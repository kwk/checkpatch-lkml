WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#35: 
http://lkml.org/lkml/2009/1/12/235 , this is a container group based approach 

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#50: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#63: FILE: Documentation/cgroups/oom.txt:9:
+/proc/<pid>/oom_adj. Giving it a high score will increase the likelihood of $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#64: FILE: Documentation/cgroups/oom.txt:10:
+this process being killed by the oom-killer.  Valid values are in the range $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#78: FILE: Documentation/cgroups/oom.txt:24:
+oom.victim value, the usual badness heuristics would be applied. The $

WARNING:TYPO_SPELLING: 'unnecesarily' may be misspelled - perhaps 'unnecessarily'?
#83: FILE: Documentation/cgroups/oom.txt:29:
+get killed unnecesarily.
            ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#103: FILE: include/linux/oomcontrol.h:1:
+#ifndef _LINUX_OOMCONTROL_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#107: FILE: include/linux/oomcontrol.h:5:
+struct oom_cgroup { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#111: FILE: include/linux/oomcontrol.h:9:
+^I */  $

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#125: FILE: init/Kconfig:357:
+config CGROUP_OOM
+	bool "Oom cgroup subsystem"
+	depends on CGROUPS
+	help
+	  This provides a cgroup subsystem which aids controlling
+	  the order in which tasks whould be killed during
+	  out of memory situations.
+	
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:TYPO_SPELLING: 'whould' may be misspelled - perhaps 'would'?
#130: FILE: init/Kconfig:362:
+	  the order in which tasks whould be killed during
 	                           ^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#132: FILE: init/Kconfig:364:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#145: FILE: mm/Makefile:36:
+obj-$(CONFIG_CGROUP_OOM) += oomcontrol.o $

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#159: FILE: mm/oom_kill.c:205:
long *ppoints,

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#179: FILE: mm/oom_kill.c:269:
+		if (taskvictim > chosenvictim ||
+			(taskvictim == chosenvictim && points > *ppoints) ||

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#181: FILE: mm/oom_kill.c:271:
+			!chosen) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#186: FILE: mm/oom_kill.c:276:
+
+		}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#187: FILE: mm/oom_kill.c:277:
+^I^I$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#203: FILE: mm/oomcontrol.c:1:
+/*

ERROR:CODE_INDENT: code indent should use tabs where possible
#217: FILE: mm/oomcontrol.c:15:
+        return container_of(cgroup_subsys_state(cgrp,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#217: FILE: mm/oomcontrol.c:15:
+        return container_of(cgroup_subsys_state(cgrp,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#218: FILE: mm/oomcontrol.c:16:
+                                oom_subsys_id), struct oom_cgroup,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#218: FILE: mm/oomcontrol.c:16:
+                                oom_subsys_id), struct oom_cgroup,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#219: FILE: mm/oomcontrol.c:17:
+                                css);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#219: FILE: mm/oomcontrol.c:17:
+                                css);$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#222: FILE: mm/oomcontrol.c:20:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#224: FILE: mm/oomcontrol.c:22:
+static struct cgroup_subsys_state *oom_create(struct cgroup_subsys *ss,
+						   struct cgroup *cont)

CHECK:BRACES: braces {} should be used on all arms of this statement
#236: FILE: mm/oomcontrol.c:34:
+	if (cont->parent == NULL)
[...]
+	else {
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cont->parent"
#236: FILE: mm/oomcontrol.c:34:
+	if (cont->parent == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: Unbalanced braces around else statement
#238: FILE: mm/oomcontrol.c:36:
+	else {

ERROR:CODE_INDENT: code indent should use tabs where possible
#252: FILE: mm/oomcontrol.c:50:
+                                       u64 val)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#252: FILE: mm/oomcontrol.c:50:
+static int oom_victim_write(struct cgroup *cgrp, struct cftype *cft,
+                                       u64 val)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#252: FILE: mm/oomcontrol.c:50:
+                                       u64 val)$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#254: FILE: mm/oomcontrol.c:52:
+{
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#255: FILE: mm/oomcontrol.c:53:
+        cgroup_lock();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#255: FILE: mm/oomcontrol.c:53:
+        cgroup_lock();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#259: FILE: mm/oomcontrol.c:57:
+        cgroup_unlock();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#259: FILE: mm/oomcontrol.c:57:
+        cgroup_unlock();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#261: FILE: mm/oomcontrol.c:59:
+        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#261: FILE: mm/oomcontrol.c:59:
+        return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#266: FILE: mm/oomcontrol.c:64:
+        u64 victim = (oom_css_from_cgroup(cgrp))->victim;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#266: FILE: mm/oomcontrol.c:64:
+        u64 victim = (oom_css_from_cgroup(cgrp))->victim;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#268: FILE: mm/oomcontrol.c:66:
+        return victim;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#268: FILE: mm/oomcontrol.c:66:
+        return victim;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#271: FILE: mm/oomcontrol.c:69:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#281: FILE: mm/oomcontrol.c:79:
+                                struct cgroup *cont)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#281: FILE: mm/oomcontrol.c:79:
+static int oom_populate(struct cgroup_subsys *ss,
+                                struct cgroup *cont)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#281: FILE: mm/oomcontrol.c:79:
+                                struct cgroup *cont)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#283: FILE: mm/oomcontrol.c:81:
+        int ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#283: FILE: mm/oomcontrol.c:81:
+        int ret;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#285: FILE: mm/oomcontrol.c:83:
+        ret = cgroup_add_files(cont, ss, oom_cgroup_files,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#285: FILE: mm/oomcontrol.c:83:
+        ret = cgroup_add_files(cont, ss, oom_cgroup_files,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#286: FILE: mm/oomcontrol.c:84:
+                                ARRAY_SIZE(oom_cgroup_files));$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#286: FILE: mm/oomcontrol.c:84:
+        ret = cgroup_add_files(cont, ss, oom_cgroup_files,
+                                ARRAY_SIZE(oom_cgroup_files));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#286: FILE: mm/oomcontrol.c:84:
+                                ARRAY_SIZE(oom_cgroup_files));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#288: FILE: mm/oomcontrol.c:86:
+        return ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#288: FILE: mm/oomcontrol.c:86:
+        return ret;$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000177627.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 23 errors, 21 warnings, 13 checks, 209 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000177627.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
