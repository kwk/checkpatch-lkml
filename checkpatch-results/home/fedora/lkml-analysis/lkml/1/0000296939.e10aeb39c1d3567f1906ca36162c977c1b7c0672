WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#46: FILE: include/linux/ridr.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#47: FILE: include/linux/ridr.h:2:
+ * include/linux/ridr.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:TYPO_SPELLING: 'implmentation' may be misspelled - perhaps 'implementation'?
#50: FILE: include/linux/ridr.h:5:
+ * tables. RCU-based implmentation of IDRs.
                      ^^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#60: FILE: include/linux/ridr.h:15:
+	struct ridr_layer	*ary[1<<IDR_BITS];
 	                 	      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#69: FILE: include/linux/ridr.h:24:
+	spinlock_t	  lock;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#76: FILE: include/linux/ridr.h:31:
+^I.layers ^I= 0,^I^I^I^I^I\$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#80: FILE: include/linux/ridr.h:35:
+}
+#define DEFINE_RIDR(name)	struct ridr name = RIDR_INIT(name)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#80: FILE: include/linux/ridr.h:35:
+#define DEFINE_RIDR(name)	struct ridr name = RIDR_INIT(name)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#82: FILE: include/linux/ridr.h:37:
+#define INIT_RIDR(name)							\
+do {									\
+	(name)->top		= NULL;					\
+	(name)->id_free		= NULL;					\
+	(name)->layers		= 0;					\
+	(name)->id_free_cnt	= 0;					\
+	(name)->lock		= __SPIN_LOCK_UNLOCKED(name.lock);	\
+} while (0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#91: FILE: include/linux/ridr.h:46:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#109: FILE: lib/ridr.c:1:
+/*

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#137: FILE: lib/ridr.c:29:
+	return(p);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

WARNING:LINE_SPACING: Missing a blank line after declarations
#197: FILE: lib/ridr.c:89:
+		struct ridr_layer *new;
+		new = kmem_cache_alloc(ridr_layer_cache, gfp_mask);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new"
#198: FILE: lib/ridr.c:90:
+		if (new == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#207: FILE: lib/ridr.c:99:
+static int sub_alloc(struct ridr *idp, int *starting_id,
+			struct ridr_layer **pa)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#223: FILE: lib/ridr.c:115:
+		n = (id >> (IDR_BITS*l)) & IDR_MASK;
 		                    ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#249: FILE: lib/ridr.c:141:
+			sh = IDR_BITS*l;
 			             ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'id >= MAX_ID_BIT'
#252: FILE: lib/ridr.c:144:
+		if ((id >= MAX_ID_BIT) || (id < 0))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'id < 0'
#252: FILE: lib/ridr.c:144:
+		if ((id >= MAX_ID_BIT) || (id < 0))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#275: FILE: lib/ridr.c:167:
+static int ridr_get_empty_slot(struct ridr *idp, int starting_id,
+			      struct ridr_layer **pa)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#295: FILE: lib/ridr.c:187:
+	while ((layers < (MAX_LEVEL - 1)) && (id >= (1 << (layers*IDR_BITS)))) {
 	                                                         ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#309: FILE: lib/ridr.c:201:
+				new->bitmap = new->count = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#326: FILE: lib/ridr.c:218:
+	return(v);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#385: FILE: lib/ridr.c:277:
+	printk("ridr_remove called for id=%d which is not allocated.\n", id);

CHECK:BRACES: braces {} should be used on all arms of this statement
#407: FILE: lib/ridr.c:299:
+	if (likely(p != NULL && test_bit(n, &p->bitmap))) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p"
#407: FILE: lib/ridr.c:299:
+	if (likely(p != NULL && test_bit(n, &p->bitmap))) {

CHECK:BRACES: Unbalanced braces around else statement
#416: FILE: lib/ridr.c:308:
+	} else

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'idp->layers > 1'
#433: FILE: lib/ridr.c:325:
+	if (idp->top && idp->top->count == 1 && (idp->layers > 1) &&
+	    idp->top->ary[0]) {  /* We can drop a layer */

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#437: FILE: lib/ridr.c:329:
+		idp->top->bitmap = idp->top->count = 0;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#484: FILE: lib/ridr.c:376:
+static void ridr_cache_ctor(struct kmem_cache *ridr_layer_cache,
+				void *ridr_layer)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#492: FILE: lib/ridr.c:384:
+	ridr_layer_cache = kmem_cache_create("ridr_layer_cache",
+				sizeof(struct ridr_layer), 0, SLAB_PANIC,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000296939.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 7 warnings, 22 checks, 444 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000296939.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
