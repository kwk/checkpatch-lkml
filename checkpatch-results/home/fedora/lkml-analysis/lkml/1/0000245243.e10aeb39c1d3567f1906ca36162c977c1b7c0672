ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#30: 
--- a/debug/mdb-proc.h	1969-12-31 17:00:00.000000000 -0700

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#33: FILE: debug/mdb-proc.h:1:
+

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#35: FILE: debug/mdb-proc.h:3:
+/***************************************************************************
+*

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:CAMELCASE: Avoid CamelCase: <MajorVersion>
#84: FILE: debug/mdb-proc.h:52:
+extern ULONG MajorVersion;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <MinorVersion>
#85: FILE: debug/mdb-proc.h:53:
+extern ULONG MinorVersion;

CHECK:CAMELCASE: Avoid CamelCase: <BuildVersion>
#86: FILE: debug/mdb-proc.h:54:
+extern ULONG BuildVersion;

CHECK:CAMELCASE: Avoid CamelCase: <IA32Flags>
#87: FILE: debug/mdb-proc.h:55:
+extern BYTE *IA32Flags[];

CHECK:CAMELCASE: Avoid CamelCase: <BreakDescription>
#88: FILE: debug/mdb-proc.h:56:
+extern BYTE *BreakDescription[];

CHECK:CAMELCASE: Avoid CamelCase: <BreakLengthDescription>
#89: FILE: debug/mdb-proc.h:57:
+extern BYTE *BreakLengthDescription[];

CHECK:CAMELCASE: Avoid CamelCase: <ExceptionDescription>
#90: FILE: debug/mdb-proc.h:58:
+extern BYTE *ExceptionDescription[];

CHECK:CAMELCASE: Avoid CamelCase: <StackFrame>
#92: FILE: debug/mdb-proc.h:60:
+extern StackFrame ReferenceFrame[MAX_PROCESSORS];

CHECK:CAMELCASE: Avoid CamelCase: <ReferenceFrame>
#92: FILE: debug/mdb-proc.h:60:
+extern StackFrame ReferenceFrame[MAX_PROCESSORS];

CHECK:CAMELCASE: Avoid CamelCase: <debuggerActive>
#93: FILE: debug/mdb-proc.h:61:
+extern volatile ULONG debuggerActive;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#93: FILE: debug/mdb-proc.h:61:
+extern volatile ULONG debuggerActive;

CHECK:CAMELCASE: Avoid CamelCase: <ProcessorHold>
#94: FILE: debug/mdb-proc.h:62:
+extern volatile ULONG ProcessorHold[MAX_PROCESSORS];

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#94: FILE: debug/mdb-proc.h:62:
+extern volatile ULONG ProcessorHold[MAX_PROCESSORS];

CHECK:CAMELCASE: Avoid CamelCase: <ProcessorState>
#95: FILE: debug/mdb-proc.h:63:
+extern volatile ULONG ProcessorState[MAX_PROCESSORS];

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#95: FILE: debug/mdb-proc.h:63:
+extern volatile ULONG ProcessorState[MAX_PROCESSORS];

CHECK:CAMELCASE: Avoid CamelCase: <ProcessorMode>
#96: FILE: debug/mdb-proc.h:64:
+extern volatile ULONG ProcessorMode[MAX_PROCESSORS];

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#96: FILE: debug/mdb-proc.h:64:
+extern volatile ULONG ProcessorMode[MAX_PROCESSORS];

CHECK:CAMELCASE: Avoid CamelCase: <lastDumpAddress>
#99: FILE: debug/mdb-proc.h:67:
+extern volatile BYTE *lastDumpAddress;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#99: FILE: debug/mdb-proc.h:67:
+extern volatile BYTE *lastDumpAddress;

CHECK:CAMELCASE: Avoid CamelCase: <lastLinkAddress>
#100: FILE: debug/mdb-proc.h:68:
+extern volatile BYTE *lastLinkAddress;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#100: FILE: debug/mdb-proc.h:68:
+extern volatile BYTE *lastLinkAddress;

CHECK:CAMELCASE: Avoid CamelCase: <lastUnasmAddress>
#101: FILE: debug/mdb-proc.h:69:
+extern volatile ULONG lastUnasmAddress;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#101: FILE: debug/mdb-proc.h:69:
+extern volatile ULONG lastUnasmAddress;

CHECK:CAMELCASE: Avoid CamelCase: <displayLength>
#102: FILE: debug/mdb-proc.h:70:
+extern volatile ULONG displayLength;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#102: FILE: debug/mdb-proc.h:70:
+extern volatile ULONG displayLength;

CHECK:CAMELCASE: Avoid CamelCase: <lastCommand>
#103: FILE: debug/mdb-proc.h:71:
+extern volatile ULONG lastCommand;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#103: FILE: debug/mdb-proc.h:71:
+extern volatile ULONG lastCommand;

CHECK:CAMELCASE: Avoid CamelCase: <lastCommandEntry>
#104: FILE: debug/mdb-proc.h:72:
+extern volatile ULONG lastCommandEntry;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#104: FILE: debug/mdb-proc.h:72:
+extern volatile ULONG lastCommandEntry;

CHECK:CAMELCASE: Avoid CamelCase: <lastDebugCommand>
#105: FILE: debug/mdb-proc.h:73:
+extern volatile BYTE lastDebugCommand[100];

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#105: FILE: debug/mdb-proc.h:73:
+extern volatile BYTE lastDebugCommand[100];

CHECK:CAMELCASE: Avoid CamelCase: <lastDisplayLength>
#106: FILE: debug/mdb-proc.h:74:
+extern volatile ULONG lastDisplayLength;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#106: FILE: debug/mdb-proc.h:74:
+extern volatile ULONG lastDisplayLength;

CHECK:CAMELCASE: Avoid CamelCase: <debugCommand>
#107: FILE: debug/mdb-proc.h:75:
+extern volatile BYTE debugCommand[100];

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#107: FILE: debug/mdb-proc.h:75:
+extern volatile BYTE debugCommand[100];

CHECK:CAMELCASE: Avoid CamelCase: <nextUnasmAddress>
#108: FILE: debug/mdb-proc.h:76:
+extern volatile ULONG nextUnasmAddress;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#108: FILE: debug/mdb-proc.h:76:
+extern volatile ULONG nextUnasmAddress;

CHECK:CAMELCASE: Avoid CamelCase: <pic1Value>
#109: FILE: debug/mdb-proc.h:77:
+extern volatile ULONG pic1Value;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#109: FILE: debug/mdb-proc.h:77:
+extern volatile ULONG pic1Value;

CHECK:CAMELCASE: Avoid CamelCase: <pic2Value>
#110: FILE: debug/mdb-proc.h:78:
+extern volatile ULONG pic2Value;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#110: FILE: debug/mdb-proc.h:78:
+extern volatile ULONG pic2Value;

CHECK:CAMELCASE: Avoid CamelCase: <BreakReserved>
#111: FILE: debug/mdb-proc.h:79:
+extern volatile ULONG BreakReserved[4];

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#111: FILE: debug/mdb-proc.h:79:
+extern volatile ULONG BreakReserved[4];

CHECK:CAMELCASE: Avoid CamelCase: <BreakPoints>
#112: FILE: debug/mdb-proc.h:80:
+extern volatile ULONG BreakPoints[4];

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#112: FILE: debug/mdb-proc.h:80:
+extern volatile ULONG BreakPoints[4];

CHECK:CAMELCASE: Avoid CamelCase: <BreakType>
#113: FILE: debug/mdb-proc.h:81:
+extern volatile ULONG BreakType[4];

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#113: FILE: debug/mdb-proc.h:81:
+extern volatile ULONG BreakType[4];

CHECK:CAMELCASE: Avoid CamelCase: <BreakLength>
#114: FILE: debug/mdb-proc.h:82:
+extern volatile ULONG BreakLength[4];

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#114: FILE: debug/mdb-proc.h:82:
+extern volatile ULONG BreakLength[4];

CHECK:CAMELCASE: Avoid CamelCase: <BreakTemp>
#115: FILE: debug/mdb-proc.h:83:
+extern volatile ULONG BreakTemp[4];

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#115: FILE: debug/mdb-proc.h:83:
+extern volatile ULONG BreakTemp[4];

CHECK:CAMELCASE: Avoid CamelCase: <BreakGo>
#116: FILE: debug/mdb-proc.h:84:
+extern volatile ULONG BreakGo[4];

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#116: FILE: debug/mdb-proc.h:84:
+extern volatile ULONG BreakGo[4];

CHECK:CAMELCASE: Avoid CamelCase: <BreakProceed>
#117: FILE: debug/mdb-proc.h:85:
+extern volatile ULONG BreakProceed[4];

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#117: FILE: debug/mdb-proc.h:85:
+extern volatile ULONG BreakProceed[4];

CHECK:CAMELCASE: Avoid CamelCase: <BreakMask>
#118: FILE: debug/mdb-proc.h:86:
+extern volatile ULONG BreakMask[MAX_PROCESSORS];

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#118: FILE: debug/mdb-proc.h:86:
+extern volatile ULONG BreakMask[MAX_PROCESSORS];

CHECK:CAMELCASE: Avoid CamelCase: <CurrentFrame>
#119: FILE: debug/mdb-proc.h:87:
+extern volatile StackFrame *CurrentFrame[MAX_PROCESSORS];

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#119: FILE: debug/mdb-proc.h:87:
+extern volatile StackFrame *CurrentFrame[MAX_PROCESSORS];

CHECK:CAMELCASE: Avoid CamelCase: <NestedInterrupts>
#120: FILE: debug/mdb-proc.h:88:
+extern volatile ULONG NestedInterrupts[MAX_PROCESSORS];

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#120: FILE: debug/mdb-proc.h:88:
+extern volatile ULONG NestedInterrupts[MAX_PROCESSORS];

CHECK:CAMELCASE: Avoid CamelCase: <ConditionalBreakpoint>
#121: FILE: debug/mdb-proc.h:89:
+extern volatile ULONG ConditionalBreakpoint[4];

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#121: FILE: debug/mdb-proc.h:89:
+extern volatile ULONG ConditionalBreakpoint[4];

CHECK:CAMELCASE: Avoid CamelCase: <BreakCondition>
#122: FILE: debug/mdb-proc.h:90:
+extern volatile BYTE BreakCondition[4][256];

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#122: FILE: debug/mdb-proc.h:90:
+extern volatile BYTE BreakCondition[4][256];

CHECK:CAMELCASE: Avoid CamelCase: <lastStackFrame>
#123: FILE: debug/mdb-proc.h:91:
+extern volatile StackFrame lastStackFrame;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#123: FILE: debug/mdb-proc.h:91:
+extern volatile StackFrame lastStackFrame;

CHECK:CAMELCASE: Avoid CamelCase: <lastCR0>
#124: FILE: debug/mdb-proc.h:92:
+extern volatile ULONG lastCR0;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#124: FILE: debug/mdb-proc.h:92:
+extern volatile ULONG lastCR0;

CHECK:CAMELCASE: Avoid CamelCase: <lastCR2>
#125: FILE: debug/mdb-proc.h:93:
+extern volatile ULONG lastCR2;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#125: FILE: debug/mdb-proc.h:93:
+extern volatile ULONG lastCR2;

CHECK:CAMELCASE: Avoid CamelCase: <lastCR4>
#126: FILE: debug/mdb-proc.h:94:
+extern volatile ULONG lastCR4;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#126: FILE: debug/mdb-proc.h:94:
+extern volatile ULONG lastCR4;

CHECK:CAMELCASE: Avoid CamelCase: <CurrentDR7>
#127: FILE: debug/mdb-proc.h:95:
+extern volatile ULONG CurrentDR7;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#127: FILE: debug/mdb-proc.h:95:
+extern volatile ULONG CurrentDR7;

CHECK:CAMELCASE: Avoid CamelCase: <CurrentDR6>
#128: FILE: debug/mdb-proc.h:96:
+extern volatile ULONG CurrentDR6[MAX_PROCESSORS];

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#128: FILE: debug/mdb-proc.h:96:
+extern volatile ULONG CurrentDR6[MAX_PROCESSORS];

CHECK:CAMELCASE: Avoid CamelCase: <repeatCommand>
#129: FILE: debug/mdb-proc.h:97:
+extern volatile ULONG repeatCommand;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#129: FILE: debug/mdb-proc.h:97:
+extern volatile ULONG repeatCommand;

CHECK:CAMELCASE: Avoid CamelCase: <totalLines>
#130: FILE: debug/mdb-proc.h:98:
+extern volatile ULONG totalLines;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#130: FILE: debug/mdb-proc.h:98:
+extern volatile ULONG totalLines;

CHECK:CAMELCASE: Avoid CamelCase: <debuggerInitialized>
#131: FILE: debug/mdb-proc.h:99:
+extern volatile ULONG debuggerInitialized;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#131: FILE: debug/mdb-proc.h:99:
+extern volatile ULONG debuggerInitialized;

CHECK:CAMELCASE: Avoid CamelCase: <stackFrame>
#133: FILE: debug/mdb-proc.h:101:
+extern ULONG disassemble(StackFrame *stackFrame, ULONG p, ULONG count,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#133: FILE: debug/mdb-proc.h:101:
+extern ULONG disassemble(StackFrame *stackFrame, ULONG p, ULONG count,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:CODE_INDENT: code indent should use tabs where possible
#134: FILE: debug/mdb-proc.h:102:
+                         ULONG use);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#134: FILE: debug/mdb-proc.h:102:
+                         ULONG use);$

CHECK:CAMELCASE: Avoid CamelCase: <ClearDebuggerState>
#135: FILE: debug/mdb-proc.h:103:
+extern void ClearDebuggerState(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#135: FILE: debug/mdb-proc.h:103:
+extern void ClearDebuggerState(void);

CHECK:CAMELCASE: Avoid CamelCase: <displayMTRRRegisters>
#136: FILE: debug/mdb-proc.h:104:
+extern void displayMTRRRegisters(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#136: FILE: debug/mdb-proc.h:104:
+extern void displayMTRRRegisters(void);

CHECK:CAMELCASE: Avoid CamelCase: <DisplayGDT>
#137: FILE: debug/mdb-proc.h:105:
+extern void DisplayGDT(BYTE *GDT_ADDRESS);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#137: FILE: debug/mdb-proc.h:105:
+extern void DisplayGDT(BYTE *GDT_ADDRESS);

CHECK:CAMELCASE: Avoid CamelCase: <DisplayIDT>
#138: FILE: debug/mdb-proc.h:106:
+extern void DisplayIDT(BYTE *IDT_ADDRESS);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#138: FILE: debug/mdb-proc.h:106:
+extern void DisplayIDT(BYTE *IDT_ADDRESS);

CHECK:CAMELCASE: Avoid CamelCase: <SetDebugRegisters>
#139: FILE: debug/mdb-proc.h:107:
+extern void SetDebugRegisters(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#139: FILE: debug/mdb-proc.h:107:
+extern void SetDebugRegisters(void);

CHECK:CAMELCASE: Avoid CamelCase: <LoadDebugRegisters>
#140: FILE: debug/mdb-proc.h:108:
+extern void LoadDebugRegisters(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#140: FILE: debug/mdb-proc.h:108:
+extern void LoadDebugRegisters(void);

CHECK:CAMELCASE: Avoid CamelCase: <ClearTempBreakpoints>
#141: FILE: debug/mdb-proc.h:109:
+extern void ClearTempBreakpoints(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#141: FILE: debug/mdb-proc.h:109:
+extern void ClearTempBreakpoints(void);

CHECK:CAMELCASE: Avoid CamelCase: <ValidBreakpoint>
#142: FILE: debug/mdb-proc.h:110:
+extern ULONG ValidBreakpoint(ULONG address);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#142: FILE: debug/mdb-proc.h:110:
+extern ULONG ValidBreakpoint(ULONG address);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#143: FILE: debug/mdb-proc.h:111:
+extern BYTE *dump(BYTE *p, ULONG count);

CHECK:CAMELCASE: Avoid CamelCase: <dumpWord>
#144: FILE: debug/mdb-proc.h:112:
+extern BYTE *dumpWord(BYTE *p, ULONG count);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#144: FILE: debug/mdb-proc.h:112:
+extern BYTE *dumpWord(BYTE *p, ULONG count);

CHECK:CAMELCASE: Avoid CamelCase: <dumpDouble>
#145: FILE: debug/mdb-proc.h:113:
+extern BYTE *dumpDouble(BYTE *p, ULONG count);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#145: FILE: debug/mdb-proc.h:113:
+extern BYTE *dumpDouble(BYTE *p, ULONG count);

CHECK:CAMELCASE: Avoid CamelCase: <dumpLinkedList>
#146: FILE: debug/mdb-proc.h:114:
+extern BYTE *dumpLinkedList(BYTE *p, ULONG count, ULONG offset);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#146: FILE: debug/mdb-proc.h:114:
+extern BYTE *dumpLinkedList(BYTE *p, ULONG count, ULONG offset);

CHECK:CAMELCASE: Avoid CamelCase: <dumpDoubleStack>
#147: FILE: debug/mdb-proc.h:115:
+extern BYTE *dumpDoubleStack(StackFrame *stackFrame, BYTE *p, ULONG count);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#147: FILE: debug/mdb-proc.h:115:
+extern BYTE *dumpDoubleStack(StackFrame *stackFrame, BYTE *p, ULONG count);

CHECK:CAMELCASE: Avoid CamelCase: <dumpStack>
#148: FILE: debug/mdb-proc.h:116:
+extern BYTE *dumpStack(StackFrame *stackFrame, BYTE *p, ULONG count);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#148: FILE: debug/mdb-proc.h:116:
+extern BYTE *dumpStack(StackFrame *stackFrame, BYTE *p, ULONG count);

CHECK:CAMELCASE: Avoid CamelCase: <Exception>
#149: FILE: debug/mdb-proc.h:117:
+extern ULONG debugger_setup(ULONG processor, ULONG Exception, StackFrame

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#149: FILE: debug/mdb-proc.h:117:
+extern ULONG debugger_setup(ULONG processor, ULONG Exception, StackFrame

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#150: FILE: debug/mdb-proc.h:117:
*stackFrame, BYTE *panicMsg);

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#151: FILE: debug/mdb-proc.h:118:
+extern ULONG debugger_entry(ULONG Exception, StackFrame *stackFrame,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#153: FILE: debug/mdb-proc.h:119:
+extern ULONG debugger_entry(ULONG Exception, StackFrame *stackFrame,
+extern ULONG debugger_command_entry(ULONG processor, ULONG Exception,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#153: FILE: debug/mdb-proc.h:119:
+extern ULONG debugger_command_entry(ULONG processor, ULONG Exception,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#154: FILE: debug/mdb-proc.h:119:
+extern ULONG debugger_entry(ULONG Exception, StackFrame *stackFrame,
StackFrame *stackFrame);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#155: FILE: debug/mdb-proc.h:120:
+extern ULONG debugger_command_entry(ULONG processor, ULONG Exception,
+extern ULONG ConsoleDisplayBreakReason(StackFrame *stackFrame,

CHECK:CAMELCASE: Avoid CamelCase: <ConsoleDisplayBreakReason>
#155: FILE: debug/mdb-proc.h:120:
+extern ULONG ConsoleDisplayBreakReason(StackFrame *stackFrame,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#155: FILE: debug/mdb-proc.h:120:
+extern ULONG ConsoleDisplayBreakReason(StackFrame *stackFrame,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#156: FILE: debug/mdb-proc.h:121:
+extern ULONG ConsoleDisplayBreakReason(StackFrame *stackFrame,
+			       ULONG reason, ULONG processor,

CHECK:CAMELCASE: Avoid CamelCase: <EvaluateExpression>
#158: FILE: debug/mdb-proc.h:123:
+extern ULONG EvaluateExpression(StackFrame *stackFrame, BYTE **p, ULONG

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#158: FILE: debug/mdb-proc.h:123:
+extern ULONG EvaluateExpression(StackFrame *stackFrame, BYTE **p, ULONG

CHECK:CAMELCASE: Avoid CamelCase: <EvaluateNumericExpression>
#160: FILE: debug/mdb-proc.h:124:
+extern ULONG EvaluateNumericExpression(StackFrame *stackFrame, BYTE **p,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#160: FILE: debug/mdb-proc.h:124:
+extern ULONG EvaluateNumericExpression(StackFrame *stackFrame, BYTE **p,

ERROR:CODE_INDENT: code indent should use tabs where possible
#161: FILE: debug/mdb-proc.h:125:
+                                       ULONG *type);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#161: FILE: debug/mdb-proc.h:125:
+                                       ULONG *type);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#162: FILE: debug/mdb-proc.h:126:
+extern ULONG unassemble(StackFrame *stackFrame, ULONG ip, ULONG use,

ERROR:CODE_INDENT: code indent should use tabs where possible
#163: FILE: debug/mdb-proc.h:127:
+                        ULONG *ret);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#163: FILE: debug/mdb-proc.h:127:
+                        ULONG *ret);$

CHECK:CAMELCASE: Avoid CamelCase: <DisplayASCIITable>
#164: FILE: debug/mdb-proc.h:128:
+extern void DisplayASCIITable(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#164: FILE: debug/mdb-proc.h:128:
+extern void DisplayASCIITable(void);

CHECK:CAMELCASE: Avoid CamelCase: <UpcaseString>
#165: FILE: debug/mdb-proc.h:129:
+extern BYTE *UpcaseString(BYTE *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#165: FILE: debug/mdb-proc.h:129:
+extern BYTE *UpcaseString(BYTE *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'BYTE *' should also have an identifier name
#165: FILE: debug/mdb-proc.h:129:
+extern BYTE *UpcaseString(BYTE *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#166: FILE: debug/mdb-proc.h:130:
+extern ULONG validate_address(ULONG addr);

CHECK:CAMELCASE: Avoid CamelCase: <ScreenInputFromKeyboard>
#167: FILE: debug/mdb-proc.h:131:
+extern ULONG ScreenInputFromKeyboard(BYTE *buffer, ULONG Start, ULONG

CHECK:CAMELCASE: Avoid CamelCase: <Start>
#167: FILE: debug/mdb-proc.h:131:
+extern ULONG ScreenInputFromKeyboard(BYTE *buffer, ULONG Start, ULONG

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#167: FILE: debug/mdb-proc.h:131:
+extern ULONG ScreenInputFromKeyboard(BYTE *buffer, ULONG Start, ULONG

CHECK:CAMELCASE: Avoid CamelCase: <GetIP>
#170: FILE: debug/mdb-proc.h:133:
+extern ULONG GetIP(StackFrame *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#170: FILE: debug/mdb-proc.h:133:
+extern ULONG GetIP(StackFrame *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'StackFrame *' should also have an identifier name
#170: FILE: debug/mdb-proc.h:133:
+extern ULONG GetIP(StackFrame *);

CHECK:CAMELCASE: Avoid CamelCase: <GetStackAddress>
#171: FILE: debug/mdb-proc.h:134:
+extern ULONG GetStackAddress(StackFrame *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#171: FILE: debug/mdb-proc.h:134:
+extern ULONG GetStackAddress(StackFrame *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'StackFrame *' should also have an identifier name
#171: FILE: debug/mdb-proc.h:134:
+extern ULONG GetStackAddress(StackFrame *);

CHECK:CAMELCASE: Avoid CamelCase: <GetStackSegment>
#172: FILE: debug/mdb-proc.h:135:
+extern ULONG GetStackSegment(StackFrame *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#172: FILE: debug/mdb-proc.h:135:
+extern ULONG GetStackSegment(StackFrame *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'StackFrame *' should also have an identifier name
#172: FILE: debug/mdb-proc.h:135:
+extern ULONG GetStackSegment(StackFrame *);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#173: FILE: debug/mdb-proc.h:136:
+extern WORD read_memory(void *, void *, unsigned);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#173: FILE: debug/mdb-proc.h:136:
+extern WORD read_memory(void *, void *, unsigned);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#173: FILE: debug/mdb-proc.h:136:
+extern WORD read_memory(void *, void *, unsigned);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#173: FILE: debug/mdb-proc.h:136:
+extern WORD read_memory(void *, void *, unsigned);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned' should also have an identifier name
#173: FILE: debug/mdb-proc.h:136:
+extern WORD read_memory(void *, void *, unsigned);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000245243.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 50 warnings, 105 checks, 144 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000245243.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
