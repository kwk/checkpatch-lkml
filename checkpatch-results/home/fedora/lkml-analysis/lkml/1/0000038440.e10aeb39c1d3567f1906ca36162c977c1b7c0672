WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
This patch adds new subcommand "lock" to perf for analyzing lock usage statistics.

WARNING:TYPO_SPELLING: 'siginificant' may be misspelled - perhaps 'significant'?
#58: 
Third, siginificant overhead :-(
       ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'chello' may be misspelled - perhaps 'cello'?
#97: 
Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
                                 ^^^^^^

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#122: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#127: FILE: tools/perf/builtin-lock.c:1:
+#include "builtin.h"

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#211: FILE: tools/perf/builtin-lock.c:85:
+static char^I        ^Iconst *input_name = "perf.data";$

WARNING:STATIC_CONST: Move const after static - use 'static const char'
#211: FILE: tools/perf/builtin-lock.c:85:
+static char	        	const *input_name = "perf.data";

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct trace_acquire_event *' should also have an identifier name
#241: FILE: tools/perf/builtin-lock.c:115:
+	void (*acquire_event)(struct trace_acquire_event *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct event *' should also have an identifier name
#241: FILE: tools/perf/builtin-lock.c:115:
+	void (*acquire_event)(struct trace_acquire_event *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct trace_acquired_event *' should also have an identifier name
#247: FILE: tools/perf/builtin-lock.c:121:
+	void (*acquired_event)(struct trace_acquired_event *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct event *' should also have an identifier name
#247: FILE: tools/perf/builtin-lock.c:121:
+	void (*acquired_event)(struct trace_acquired_event *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct trace_contended_event *' should also have an identifier name
#253: FILE: tools/perf/builtin-lock.c:127:
+	void (*contended_event)(struct trace_contended_event *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct event *' should also have an identifier name
#253: FILE: tools/perf/builtin-lock.c:127:
+	void (*contended_event)(struct trace_contended_event *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct trace_release_event *' should also have an identifier name
#259: FILE: tools/perf/builtin-lock.c:133:
+	void (*release_event)(struct trace_release_event *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct event *' should also have an identifier name
#259: FILE: tools/perf/builtin-lock.c:133:
+	void (*release_event)(struct trace_release_event *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#267: FILE: tools/perf/builtin-lock.c:141:
+static void prof_lock_acquire_event(struct trace_acquire_event *acquire_event __used,
+			struct event *__event __used,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#275: FILE: tools/perf/builtin-lock.c:149:
+static void prof_lock_acquired_event(struct trace_acquired_event *acquired_event,
+			 struct event *__event __used,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#295: FILE: tools/perf/builtin-lock.c:169:
+static void prof_lock_contended_event(struct trace_contended_event *contended_event,
+			  struct event *__event __used,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#307: FILE: tools/perf/builtin-lock.c:181:
+static void prof_lock_release_event(struct trace_release_event *release_event __used,
+			struct event *__event __used,

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#426: FILE: tools/perf/builtin-lock.c:300:
+	dump_printf("(IP, %d): %d/%d: %p period: %Ld\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#427: FILE: tools/perf/builtin-lock.c:301:
+	dump_printf("(IP, %d): %d/%d: %p period: %Ld\n",
+		event->header.misc,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!thread"
#432: FILE: tools/perf/builtin-lock.c:306:
+	if (thread == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: No space is necessary after a cast
#440: FILE: tools/perf/builtin-lock.c:314:
+	if (profile_cpu != -1 && profile_cpu != (int) cpu)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPLIT_STRING: quoted string split across lines
#455: FILE: tools/perf/builtin-lock.c:329:
+			"No trace sample to read. Did you call perf record "
+			"without -R?");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:LONG_LINE_STRING: line length of 114 exceeds 100 columns
#468: FILE: tools/perf/builtin-lock.c:342:
+	printf("\n ------------------------------------------------------------------------------------------\n");

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE_STRING: line length of 114 exceeds 100 columns
#469: FILE: tools/perf/builtin-lock.c:343:
+	printf("  Lock                           |   Acquired   | Max wait ns | Min wait ns | Total wait ns |\n");

WARNING:LONG_LINE_STRING: line length of 114 exceeds 100 columns
#470: FILE: tools/perf/builtin-lock.c:344:
+	printf(" --------------------------------------------------------------------------------------------\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#512: FILE: tools/perf/builtin-lock.c:386:
+	OPT_STRING('i', "input", &input_name, "file",
+		    "input file name"),

WARNING:STATIC_CONST_CHAR_ARRAY: static const char * array should probably be static const char * const
#520: FILE: tools/perf/builtin-lock.c:394:
+static const char *record_args[] = {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#548: FILE: tools/perf/builtin-lock.c:422:
+	BUG_ON(i != rec_argc);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#570: FILE: tools/perf/builtin-lock.c:444:
+		return cmd_trace(argc, argv, prefix);
+	} else {

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#584: FILE: tools/perf/builtin.h:32:
+extern int cmd_lock(int argc, const char **argv, const char *prefix);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000038440.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 23 warnings, 9 checks, 469 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000038440.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
