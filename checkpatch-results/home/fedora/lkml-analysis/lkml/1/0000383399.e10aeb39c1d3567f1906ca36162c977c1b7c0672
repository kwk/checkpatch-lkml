CHECK:LINE_SPACING: Please don't use multiple blank lines
#86: FILE: drivers/dma/ioat.c:65:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#87: FILE: drivers/dma/ioat.c:66:
 static int __devinit ioat_probe(struct pci_dev *pdev,

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#90: FILE: drivers/dma/ioat.c:69:
 static void __devexit ioat_remove(struct pci_dev *pdev);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#163: FILE: drivers/dma/ioat_dca.c:264:
 
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ioatdca->req_slots[i].pdev"
#182: FILE: drivers/dma/ioat_dca.c:283:
+		if (ioatdca->req_slots[i].pdev == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:LINE_SPACING: Please don't use multiple blank lines
#306: FILE: drivers/dma/ioat_dca.c:407:
+
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ch' - possible side-effects?
#342: FILE: drivers/dma/ioat_dma.c:44:
+#define chan_num(ch) ((int)((ch)->reg_base - (ch)->device->reg_base) / 0x80)

WARNING:SPLIT_STRING: quoted string split across lines
#348: FILE: drivers/dma/ioat_dma.c:50:
+		 "control use of dca on dma operations, "
+		 "does not affect endpoint dca (default: 0)");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:TRAILING_SEMICOLON: trailing semicolon indicates no statements, indent implies otherwise
#373: FILE: drivers/dma/ioat_dma.c:168:
+		if (--cnt == 0);
+			break;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#373: FILE: drivers/dma/ioat_dma.c:168:
+		if (--cnt == 0);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:TRAILING_SEMICOLON: trailing semicolon indicates no statements, indent implies otherwise
#390: FILE: drivers/dma/ioat_dma.c:188:
+		if (--cnt == 0);
+			break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#390: FILE: drivers/dma/ioat_dma.c:188:
+		if (--cnt == 0);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#396: FILE: drivers/dma/ioat_dma.c:193:
+static inline void __ioat1_dma_memcpy_issue_pending(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#398: FILE: drivers/dma/ioat_dma.c:195:
+static inline void __ioat2_dma_memcpy_issue_pending(

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#442: FILE: drivers/dma/ioat_dma.c:242:
+	ioat_chan->common.cookie = desc->async_tx.cookie = cookie;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#635: FILE: drivers/dma/ioat_dma.c:476:
+static struct ioat_desc_sw *ioat1_dma_get_next_descriptor(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#644: FILE: drivers/dma/ioat_dma.c:496:
+static struct ioat_desc_sw *ioat2_dma_get_next_descriptor(

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#660: FILE: drivers/dma/ioat_dma.c:512:
+	    ioat_chan->used_desc.next == ioat_chan->used_desc.prev->prev) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#679: FILE: drivers/dma/ioat_dma.c:531:
+			BUG_ON(!desc);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#683: FILE: drivers/dma/ioat_dma.c:535:
+			desc->hw->next
+				= to_ioat_desc(desc->node.next)->async_tx.phys;

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#685: FILE: drivers/dma/ioat_dma.c:537:
+			to_ioat_desc(desc->node.prev)->hw->next
+				= desc->async_tx.phys;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ioat_chan->used_desc.prev"
#694: FILE: drivers/dma/ioat_dma.c:546:
+	if (ioat_chan->used_desc.prev == NULL)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#701: FILE: drivers/dma/ioat_dma.c:553:
+static struct ioat_desc_sw *ioat_dma_get_next_descriptor(

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#710: FILE: drivers/dma/ioat_dma.c:562:
+		return ioat1_dma_get_next_descriptor(ioat_chan);
+		break;

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#713: FILE: drivers/dma/ioat_dma.c:565:
+		return ioat2_dma_get_next_descriptor(ioat_chan);
+		break;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#754: FILE: drivers/dma/ioat_dma.c:606:
+			writeb(IOAT_CHANCMD_RESET,
+			     ioat_chan->reg_base

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#766: FILE: drivers/dma/ioat_dma.c:618:
+		 * this puts channel engine into ARMED state */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:SPACING: No space is necessary after a cast
#768: FILE: drivers/dma/ioat_dma.c:620:
+		writel(((u64) desc->async_tx.phys) & 0x00000000FFFFFFFF,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#770: FILE: drivers/dma/ioat_dma.c:622:
+		writel(((u64) desc->async_tx.phys) >> 32,

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#792: FILE: drivers/dma/ioat_dma.c:644:
+static struct dma_async_tx_descriptor *ioat1_dma_prep_memcpy(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#830: FILE: drivers/dma/ioat_dma.c:702:
+static struct dma_async_tx_descriptor *ioat2_dma_prep_memcpy(

CHECK:SPACING: No space is necessary after a cast
#854: FILE: drivers/dma/ioat_dma.c:726:
+		copy = min((u32) len, ioat_chan->xfercap);

WARNING:MINMAX: min() should probably be min_t(u32, len, ioat_chan->xfercap)
#854: FILE: drivers/dma/ioat_dma.c:726:
+		copy = min((u32) len, ioat_chan->xfercap);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#885: FILE: drivers/dma/ioat_dma.c:756:
+static inline void __ioat1_dma_memcpy_issue_pending(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#906: FILE: drivers/dma/ioat_dma.c:774:
+static inline void __ioat2_dma_memcpy_issue_pending(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1031: FILE: drivers/dma/ioat_dma.c:882:
+				pci_unmap_page(ioat_chan->device->pdev,
+						pci_unmap_addr(desc, dst),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1035: FILE: drivers/dma/ioat_dma.c:886:
+				pci_unmap_page(ioat_chan->device->pdev,
+						pci_unmap_addr(desc, src),

CHECK:BRACES: braces {} should be used on all arms of this statement
#1055: FILE: drivers/dma/ioat_dma.c:896:
+				if (desc->async_tx.ack) {
[...]
+				} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1059: FILE: drivers/dma/ioat_dma.c:900:
+				} else

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ioat_chan->used_desc.prev"
#1083: FILE: drivers/dma/ioat_dma.c:917:
+		if (ioat_chan->used_desc.prev == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "latest_desc"
#1099: FILE: drivers/dma/ioat_dma.c:933:
+		if (latest_desc != NULL) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1100: FILE: drivers/dma/ioat_dma.c:934:
+		if (latest_desc != NULL) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1111: FILE: drivers/dma/ioat_dma.c:945:
+					pci_unmap_page(ioat_chan->device->pdev,
+						      pci_unmap_addr(desc, dst),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1115: FILE: drivers/dma/ioat_dma.c:949:
+					pci_unmap_page(ioat_chan->device->pdev,
+						      pci_unmap_addr(desc, src),

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'chansts == IOAT_CHANSTS_DMA_TRANSFER_STATUS_HALTED'
#1150: FILE: drivers/dma/ioat_dma.c:1007:
+		if ((chansts == IOAT_CHANSTS_DMA_TRANSFER_STATUS_HALTED) ||
+		    (chansts == IOAT_CHANSTS_DMA_TRANSFER_STATUS_SUSPENDED) ||
+		    (ioat_chan->check_count == 100000)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'chansts == IOAT_CHANSTS_DMA_TRANSFER_STATUS_SUSPENDED'
#1150: FILE: drivers/dma/ioat_dma.c:1007:
+		if ((chansts == IOAT_CHANSTS_DMA_TRANSFER_STATUS_HALTED) ||
+		    (chansts == IOAT_CHANSTS_DMA_TRANSFER_STATUS_SUSPENDED) ||
+		    (ioat_chan->check_count == 100000)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ioat_chan->check_count == 100000'
#1150: FILE: drivers/dma/ioat_dma.c:1007:
+		if ((chansts == IOAT_CHANSTS_DMA_TRANSFER_STATUS_HALTED) ||
+		    (chansts == IOAT_CHANSTS_DMA_TRANSFER_STATUS_SUSPENDED) ||
+		    (ioat_chan->check_count == 100000)) {

WARNING:SPLIT_STRING: quoted string split across lines
#1156: FILE: drivers/dma/ioat_dma.c:1013:
+				 "chan%d reset %d, cookie %d x %d, "
+				 "last_completed %d, chansts %02x\n",

CHECK:SPACING: No space is necessary after a cast
#1191: FILE: drivers/dma/ioat_dma.c:1070:
+		writel(((u64) desc->async_tx.phys) & 0x00000000FFFFFFFF,

CHECK:SPACING: No space is necessary after a cast
#1193: FILE: drivers/dma/ioat_dma.c:1072:
+		writel(((u64) desc->async_tx.phys) >> 32,

CHECK:SPACING: No space is necessary after a cast
#1210: FILE: drivers/dma/ioat_dma.c:1089:
+		writel(((u64) desc->async_tx.phys) & 0x00000000FFFFFFFF,

CHECK:SPACING: No space is necessary after a cast
#1212: FILE: drivers/dma/ioat_dma.c:1091:
+		writel(((u64) desc->async_tx.phys) >> 32,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1448: FILE: drivers/dma/ioatdma_registers.h:80:
+
+

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#1456: FILE: drivers/dma/ioatdma_registers.h:88:
+						? IOAT1_CHANSTS_OFFSET_LOW : IOAT2_CHANSTS_OFFSET_LOW)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#1460: FILE: drivers/dma/ioatdma_registers.h:92:
+						? IOAT1_CHANSTS_OFFSET_HIGH : IOAT2_CHANSTS_OFFSET_HIGH)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1523: FILE: drivers/dma/ioatdma_registers.h:151:
+
+

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#1531: FILE: drivers/dma/ioatdma_registers.h:159:
+						? IOAT1_CHAINADDR_OFFSET_LOW : IOAT2_CHAINADDR_OFFSET_LOW)

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#1535: FILE: drivers/dma/ioatdma_registers.h:163:
+						? IOAT1_CHAINADDR_OFFSET_HIGH : IOAT2_CHAINADDR_OFFSET_HIGH)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000383399.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 15 warnings, 41 checks, 1441 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000383399.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
