WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#131: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#136: FILE: include/linux/netfilter/xt_smack.h:1:
+#ifndef _XT_SMACK_MATCH_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#140: FILE: include/linux/netfilter/xt_smack.h:5:
+#define SMK_LABELLEN    (SMK_MAXLEN+1)
                                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'u_int8_t'
#149: FILE: include/linux/netfilter/xt_smack.h:14:
+	u_int8_t	mask, invert;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#150: FILE: include/linux/netfilter/xt_smack.h:15:
+^Ichar    ^Imatch_in[SMK_LABELLEN];$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#151: FILE: include/linux/netfilter/xt_smack.h:16:
+^Ichar    ^Imatch_out[SMK_LABELLEN];$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#152: FILE: include/linux/netfilter/xt_smack.h:17:
+^Ichar    ^Imatch_peer_packet[SMK_LABELLEN];$

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#165: FILE: net/netfilter/Kconfig:653:
+config NETFILTER_XT_MATCH_SMACK
+	tristate '"smack" socket label match support'
+	depends on NETFILTER_XTABLES
+	depends on NETFILTER_ADVANCED
+	depends on SECURITY_SMACK
+	help
+	  SMACK label matching allows you to match locally generated packets
+	  based on the smack labels of the socket which is inherited from the
+	  associated process and allows matching on the TCP peers CIPSO label.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#193: FILE: net/netfilter/xt_smack.c:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#210: FILE: net/netfilter/xt_smack.c:18:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#213: FILE: net/netfilter/xt_smack.c:21:
+         const struct net_device *out, const struct xt_match *match,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#213: FILE: net/netfilter/xt_smack.c:21:
+         const struct net_device *out, const struct xt_match *match,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#214: FILE: net/netfilter/xt_smack.c:22:
+         const void *matchinfo, int offset, unsigned int protoff,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#214: FILE: net/netfilter/xt_smack.c:22:
+         const void *matchinfo, int offset, unsigned int protoff,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#215: FILE: net/netfilter/xt_smack.c:23:
+         bool *hotdrop)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#215: FILE: net/netfilter/xt_smack.c:23:
+         bool *hotdrop)$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!skb->sk"
#220: FILE: net/netfilter/xt_smack.c:28:
+	if (skb->sk == NULL || skb->sk->sk_socket == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!skb->sk->sk_socket"
#220: FILE: net/netfilter/xt_smack.c:28:
+	if (skb->sk == NULL || skb->sk->sk_socket == NULL)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 17)
#223: FILE: net/netfilter/xt_smack.c:31:
+	if (smacks == NULL){
+		 return (info->mask ^ info->invert);

ERROR:SPACING: space required before the open brace '{'
#223: FILE: net/netfilter/xt_smack.c:31:
+	if (smacks == NULL){

WARNING:BRACES: braces {} are not necessary for single statement blocks
#223: FILE: net/netfilter/xt_smack.c:31:
+	if (smacks == NULL){
+		 return (info->mask ^ info->invert);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!smacks"
#223: FILE: net/netfilter/xt_smack.c:31:
+	if (smacks == NULL){

WARNING:TABSTOP: Statements should start on a tabstop
#224: FILE: net/netfilter/xt_smack.c:32:
+		 return (info->mask ^ info->invert);

ERROR:SPACING: space required before the open brace '{'
#227: FILE: net/netfilter/xt_smack.c:35:
+	if(info->mask & XT_SMACK_IN){

ERROR:SPACING: space required before the open parenthesis '('
#227: FILE: net/netfilter/xt_smack.c:35:
+	if(info->mask & XT_SMACK_IN){

ERROR:SPACING: space prohibited after that '!' (ctx:WxW)
#228: FILE: net/netfilter/xt_smack.c:36:
+		return ! ((!strncmp(smacks->smk_in, info->match_in, SMK_LABELLEN)) ^
 		       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#231: FILE: net/netfilter/xt_smack.c:39:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open brace '{'
#232: FILE: net/netfilter/xt_smack.c:40:
+	if(info->mask & XT_SMACK_OUT){

ERROR:SPACING: space required before the open parenthesis '('
#232: FILE: net/netfilter/xt_smack.c:40:
+	if(info->mask & XT_SMACK_OUT){

ERROR:SPACING: space prohibited after that '!' (ctx:WxW)
#233: FILE: net/netfilter/xt_smack.c:41:
+		return ! ((!strncmp(smacks->smk_in, info->match_out, SMK_LABELLEN)) ^
 		       ^

ERROR:SPACING: space required before the open brace '{'
#237: FILE: net/netfilter/xt_smack.c:45:
+	if(info->mask & XT_SMACK_PEER){

ERROR:SPACING: space required before the open parenthesis '('
#237: FILE: net/netfilter/xt_smack.c:45:
+	if(info->mask & XT_SMACK_PEER){

ERROR:SPACING: space prohibited after that '!' (ctx:WxW)
#238: FILE: net/netfilter/xt_smack.c:46:
+		return ! ((!strncmp(smacks->smk_packet, info->match_peer_packet, SMK_LABELLEN)) ^
 		       ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#244: FILE: net/netfilter/xt_smack.c:52:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#287: FILE: extensions/libxt_smack.c:1:
+#include <stdbool.h>

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#300: FILE: extensions/libxt_smack.c:14:
+	printf(

CHECK:LINE_SPACING: Please don't use multiple blank lines
#307: FILE: extensions/libxt_smack.c:21:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#316: FILE: extensions/libxt_smack.c:30:
+{^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#321: FILE: extensions/libxt_smack.c:35:
+		exit_error(PARAMETER_PROBLEM,
+			"SMACK label must be shorter than %i characters", SMK_LABELLEN);

ERROR:CODE_INDENT: code indent should use tabs where possible
#327: FILE: extensions/libxt_smack.c:41:
+                          const void *entry, struct xt_entry_match **match)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#327: FILE: extensions/libxt_smack.c:41:
+static int smack_parse(int c, char **argv, int invert, unsigned int *flags,
+                          const void *entry, struct xt_entry_match **match)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#327: FILE: extensions/libxt_smack.c:41:
+                          const void *entry, struct xt_entry_match **match)$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#334: FILE: extensions/libxt_smack.c:48:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#344: FILE: extensions/libxt_smack.c:58:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#354: FILE: extensions/libxt_smack.c:68:
+^I^I$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#372: FILE: extensions/libxt_smack.c:86:
+static void smack_save_item(const char *param, const char *label, u_int8_t invert){

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open brace '{'
#372: FILE: extensions/libxt_smack.c:86:
+static void smack_save_item(const char *param, const char *label, u_int8_t invert){

ERROR:SPACING: space required before the open parenthesis '('
#382: FILE: extensions/libxt_smack.c:96:
+	if(info->mask & XT_SMACK_IN)

ERROR:SPACING: space required before the open parenthesis '('
#384: FILE: extensions/libxt_smack.c:98:
+	if(info->mask & XT_SMACK_OUT)

ERROR:SPACING: space required before the open parenthesis '('
#386: FILE: extensions/libxt_smack.c:100:
+	if(info->mask & XT_SMACK_PEER)

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#389: FILE: extensions/libxt_smack.c:103:
+
+}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#395: FILE: extensions/libxt_smack.c:109:
+^I$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#396: FILE: extensions/libxt_smack.c:110:
+	
+}

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#420: FILE: include/linux/netfilter/xt_smack.h:1:
+#ifndef _XT_SMACK_MATCH_H

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#424: FILE: include/linux/netfilter/xt_smack.h:5:
+#define SMK_LABELLEN    (SMK_MAXLEN+1)
                                    ^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'u_int8_t'
#433: FILE: include/linux/netfilter/xt_smack.h:14:
+	u_int8_t	mask, invert;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#434: FILE: include/linux/netfilter/xt_smack.h:15:
+^Ichar    ^Imatch_in[SMK_LABELLEN];$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#435: FILE: include/linux/netfilter/xt_smack.h:16:
+^Ichar    ^Imatch_out[SMK_LABELLEN];$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#436: FILE: include/linux/netfilter/xt_smack.h:17:
+^Ichar    ^Imatch_peer_packet[SMK_LABELLEN];$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000224223.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 25 errors, 19 warnings, 15 checks, 277 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000224223.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
