WARNING:TYPO_SPELLING: 'funtions' may be misspelled - perhaps 'functions'?
#78: FILE: kernel/trace/Kconfig:68:
+	  native types and event handler funtions.  For instance, the
 	                                 ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:REPEATED_WORD: Possible repeated word: 'or'
#81: FILE: kernel/trace/Kconfig:71:
+	  per-cpu trace files or or a live trace stream in real-time.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#120: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#134: FILE: kernel/trace/trace_binary/zed.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#148: FILE: kernel/trace/trace_binary/zed.c:15:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#149: FILE: kernel/trace/trace_binary/zed.c:16:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#221: FILE: kernel/trace/trace_binary/zed.c:88:
+static int zed_event_desc_open(struct inode *inode, struct file *filp)
                                                                  ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#231: FILE: kernel/trace/trace_binary/zed.c:98:
+static ssize_t zed_event_desc_read(struct file *filp, char __user *buffer,
                                                 ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#264: FILE: kernel/trace/trace_binary/zed.c:131:
+static ssize_t zed_event_desc_write(struct file *filp,
                                                  ^^^^

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#280: FILE: kernel/trace/trace_binary/zed.c:147:
+	enable = simple_strtol(buf, &tmp, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*field)...) over kmalloc(sizeof(struct zed_field)...)
#311: FILE: kernel/trace/trace_binary/zed.c:178:
+	field = kmalloc(sizeof(struct zed_field), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#346: FILE: kernel/trace/trace_binary/zed.c:213:
+static int all_open(struct inode *inode, struct file *filp)
                                                       ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#353: FILE: kernel/trace/trace_binary/zed.c:220:
+static ssize_t all_write(struct file *filp, const char __user *buffer,
                                       ^^^^

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#368: FILE: kernel/trace/trace_binary/zed.c:235:
+	enable = simple_strtol(buf, &tmp, 10);

ERROR:NON_OCTAL_PERMISSIONS: Use 4 digit octal (0777) not decimal permissions
#423: FILE: kernel/trace/trace_binary/zed.c:290:
+	s->all_file = debugfs_create_file("all", 0, s->dir, s->name,
+					  &all_fops);
Permission bits should use 4 digit octal permissions (like 0700 or 0444).
Avoid using any other base like decimal.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#426: FILE: kernel/trace/trace_binary/zed.c:293:
+		printk(KERN_ERR "Couldn't create %s control file 'all'.\n",

WARNING:NEEDLESS_IF: debugfs_remove(NULL) is safe and this check is probably not required
#433: FILE: kernel/trace/trace_binary/zed.c:300:
+	if (s->dir)
+		debugfs_remove(s->dir);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#470: FILE: kernel/trace/trace_binary/zed.c:337:
+			printk(KERN_ERR "Couldn't create zed subsys %s\n",

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#476: FILE: kernel/trace/trace_binary/zed.c:343:
+	event = zed_events[event_id] = kmalloc(sizeof(struct zed_event),

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*zed_events[event_id])...) over kmalloc(sizeof(struct zed_event)...)
#476: FILE: kernel/trace/trace_binary/zed.c:343:
+	event = zed_events[event_id] = kmalloc(sizeof(struct zed_event),

ERROR:NON_OCTAL_PERMISSIONS: Use 4 digit octal (0777) not decimal permissions
#501: FILE: kernel/trace/trace_binary/zed.c:368:
+	event->desc_file = debugfs_create_file(event->name, 0,
+					       subsys->dir,
+					       event, &zed_event_desc_fops);
WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#505: FILE: kernel/trace/trace_binary/zed.c:372:
+		printk(KERN_ERR "Couldn't create zed event desc file %s.\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#520: FILE: kernel/trace/trace_binary/zed.c:387:
+		printk(KERN_ERR "Couldn't create zed event desc dir.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#528: FILE: kernel/trace/trace_binary/zed.c:395:
+		printk(KERN_ERR "Couldn't create control file 'all'.\n");

WARNING:NEEDLESS_IF: debugfs_remove(NULL) is safe and this check is probably not required
#537: FILE: kernel/trace/trace_binary/zed.c:404:
+	if (zed_event_desc_dir)
+		debugfs_remove(zed_event_desc_dir);

WARNING:NEEDLESS_IF: debugfs_remove(NULL) is safe and this check is probably not required
#581: FILE: kernel/trace/trace_binary/zed.c:448:
+	if (tree_root) {
+		debugfs_remove(tree_root);

CHECK:BRACES: braces {} should be used on all arms of this statement
#610: FILE: kernel/trace/trace_binary/zed.c:477:
+	if (dir)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#612: FILE: kernel/trace/trace_binary/zed.c:479:
+	else {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#664: FILE: kernel/trace/trace_binary/zed.c:531:
+static ssize_t buf_size_read(struct file *filp, char __user *buffer,
                                           ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#674: FILE: kernel/trace/trace_binary/zed.c:541:
+static ssize_t buf_size_write(struct file *filp, const char __user *buffer,
                                            ^^^^

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#689: FILE: kernel/trace/trace_binary/zed.c:556:
+	size = simple_strtol(buf, &tmp, 10);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#704: FILE: kernel/trace/trace_binary/zed.c:571:
+static ssize_t buf_nr_read(struct file *filp, char __user *buffer,
                                         ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#714: FILE: kernel/trace/trace_binary/zed.c:581:
+static ssize_t buf_nr_write(struct file *filp, const char __user *buffer,
                                          ^^^^

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#729: FILE: kernel/trace/trace_binary/zed.c:596:
+	n = simple_strtol(buf, &tmp, 10);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#744: FILE: kernel/trace/trace_binary/zed.c:611:
+static ssize_t create_read(struct file *filp, char __user *buffer,
                                         ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#754: FILE: kernel/trace/trace_binary/zed.c:621:
+static ssize_t create_write(struct file *filp, const char __user *buffer,
                                          ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#771: FILE: kernel/trace/trace_binary/zed.c:638:
+static ssize_t destroy_read(struct file *filp, char __user *buffer,
                                          ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#781: FILE: kernel/trace/trace_binary/zed.c:648:
+static ssize_t destroy_write(struct file *filp, const char __user *buffer,
                                           ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#798: FILE: kernel/trace/trace_binary/zed.c:665:
+static ssize_t start_read(struct file *filp, char __user *buffer,
                                        ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#808: FILE: kernel/trace/trace_binary/zed.c:675:
+static ssize_t start_write(struct file *filp, const char __user *buffer,
                                         ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#825: FILE: kernel/trace/trace_binary/zed.c:692:
+static ssize_t stop_read(struct file *filp, char __user *buffer,
                                       ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#835: FILE: kernel/trace/trace_binary/zed.c:702:
+static ssize_t stop_write(struct file *filp, const char __user *buffer,
                                        ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#852: FILE: kernel/trace/trace_binary/zed.c:719:
+static ssize_t dropped_read(struct file *filp, char __user *buffer,
                                          ^^^^

WARNING:NEEDLESS_IF: debugfs_remove(NULL) is safe and this check is probably not required
#873: FILE: kernel/trace/trace_binary/zed.c:740:
+	if (buf_size_file) {
+		debugfs_remove(buf_size_file);

WARNING:NEEDLESS_IF: debugfs_remove(NULL) is safe and this check is probably not required
#878: FILE: kernel/trace/trace_binary/zed.c:745:
+	if (buf_nr_file) {
+		debugfs_remove(buf_nr_file);

WARNING:NEEDLESS_IF: debugfs_remove(NULL) is safe and this check is probably not required
#883: FILE: kernel/trace/trace_binary/zed.c:750:
+	if (create_file) {
+		debugfs_remove(create_file);

WARNING:NEEDLESS_IF: debugfs_remove(NULL) is safe and this check is probably not required
#888: FILE: kernel/trace/trace_binary/zed.c:755:
+	if (destroy_file) {
+		debugfs_remove(destroy_file);

WARNING:NEEDLESS_IF: debugfs_remove(NULL) is safe and this check is probably not required
#893: FILE: kernel/trace/trace_binary/zed.c:760:
+	if (start_file) {
+		debugfs_remove(start_file);

WARNING:NEEDLESS_IF: debugfs_remove(NULL) is safe and this check is probably not required
#898: FILE: kernel/trace/trace_binary/zed.c:765:
+	if (stop_file) {
+		debugfs_remove(stop_file);

WARNING:NEEDLESS_IF: debugfs_remove(NULL) is safe and this check is probably not required
#903: FILE: kernel/trace/trace_binary/zed.c:770:
+	if (dropped_file) {
+		debugfs_remove(dropped_file);

WARNING:LINE_SPACING: Missing a blank line after declarations
#916: FILE: kernel/trace/trace_binary/zed.c:783:
+	int ret = -ENOENT;
+	dir = create_tree("zed", "trace");

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:NON_OCTAL_PERMISSIONS: Use 4 digit octal (0777) not decimal permissions
#923: FILE: kernel/trace/trace_binary/zed.c:790:
+	buf_size_file = debugfs_create_file("buf_size", 0, dir,
+					    NULL, &buf_size_fops);
WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#926: FILE: kernel/trace/trace_binary/zed.c:793:
+		printk(KERN_ERR "Couldn't create control file 'buf_size'.\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#931: FILE: kernel/trace/trace_binary/zed.c:798:
+	buf_nr_file = debugfs_create_file("buf_nr", 0, dir,
+					     NULL, &buf_nr_fops);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#933: FILE: kernel/trace/trace_binary/zed.c:800:
+		printk(KERN_ERR "Couldn't create control file 'buf_nr'.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#940: FILE: kernel/trace/trace_binary/zed.c:807:
+		printk(KERN_ERR "Couldn't create control file 'create'.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#947: FILE: kernel/trace/trace_binary/zed.c:814:
+		printk(KERN_ERR "Couldn't create control file 'destroy'.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#954: FILE: kernel/trace/trace_binary/zed.c:821:
+		printk(KERN_ERR "Couldn't create control file 'start'.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#961: FILE: kernel/trace/trace_binary/zed.c:828:
+		printk(KERN_ERR "Couldn't create control file 'stop'.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1053: FILE: kernel/trace/trace_binary/zed.c:920:
+		printk(KERN_ERR "Couldn't register sched tracepoints.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1082: FILE: kernel/trace/trace_binary/zed.c:949:
+		printk(KERN_ERR "Unable to create trace controls\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1111: FILE: kernel/trace/trace_binary/zed.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1125: FILE: kernel/trace/trace_binary/zed.h:15:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1126: FILE: kernel/trace/trace_binary/zed.h:16:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1156: FILE: kernel/trace/trace_binary/zed.h:46:
+#define EVENTS(EVENT, sep)	       \
+	EVENT(sched, kthread_stop_trace) sep \
+	EVENT(sched, kthread_stop_ret_trace) sep \
+	EVENT(sched, wait_task_trace) sep \
+	EVENT(sched, wakeup_trace) sep \
+	EVENT(sched, wakeup_new_trace) sep \
+	EVENT(sched, switch_trace) sep \
+	EVENT(sched, migrate_task_trace) sep \
+	EVENT(sched, process_free_trace) sep \
+	EVENT(sched, process_exit_trace) sep \
+	EVENT(sched, process_wait_trace) sep \
+	EVENT(sched, process_fork_trace) sep \
+	EVENT(sched, signal_send_trace) sep \
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'EVENT' - possible side-effects?
#1156: FILE: kernel/trace/trace_binary/zed.h:46:
+#define EVENTS(EVENT, sep)	       \
+	EVENT(sched, kthread_stop_trace) sep \
+	EVENT(sched, kthread_stop_ret_trace) sep \
+	EVENT(sched, wait_task_trace) sep \
+	EVENT(sched, wakeup_trace) sep \
+	EVENT(sched, wakeup_new_trace) sep \
+	EVENT(sched, switch_trace) sep \
+	EVENT(sched, migrate_task_trace) sep \
+	EVENT(sched, process_free_trace) sep \
+	EVENT(sched, process_exit_trace) sep \
+	EVENT(sched, process_wait_trace) sep \
+	EVENT(sched, process_fork_trace) sep \
+	EVENT(sched, signal_send_trace) sep \
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sep' - possible side-effects?
#1156: FILE: kernel/trace/trace_binary/zed.h:46:
+#define EVENTS(EVENT, sep)	       \
+	EVENT(sched, kthread_stop_trace) sep \
+	EVENT(sched, kthread_stop_ret_trace) sep \
+	EVENT(sched, wait_task_trace) sep \
+	EVENT(sched, wakeup_trace) sep \
+	EVENT(sched, wakeup_new_trace) sep \
+	EVENT(sched, switch_trace) sep \
+	EVENT(sched, migrate_task_trace) sep \
+	EVENT(sched, process_free_trace) sep \
+	EVENT(sched, process_exit_trace) sep \
+	EVENT(sched, process_wait_trace) sep \
+	EVENT(sched, process_fork_trace) sep \
+	EVENT(sched, signal_send_trace) sep \
+

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1235: FILE: kernel/trace/trace_binary/zed.h:125:
+#define DECLARE_FIELD(subsys, event_name, field, type) type field;

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1235: FILE: kernel/trace/trace_binary/zed.h:125:
+#define DECLARE_FIELD(subsys, event_name, field, type) type field;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'field' - possible side-effects?
#1248: FILE: kernel/trace/trace_binary/zed.h:138:
+#define REGISTER_FIELD(subsys, event_name, field, type)	\
+	register_zed_field(event, #field, #type, \
+	   offsetof(struct subsys##_##event_name##_struct, field),\
+	   sizeof(((struct subsys##_##event_name##_struct *)0)->field));

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1248: FILE: kernel/trace/trace_binary/zed.h:138:
+#define REGISTER_FIELD(subsys, event_name, field, type)	\
+	register_zed_field(event, #field, #type, \
+	   offsetof(struct subsys##_##event_name##_struct, field),\
+	   sizeof(((struct subsys##_##event_name##_struct *)0)->field));

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#1275: FILE: kernel/trace/trace_binary/zed.h:165:
+#define COMMA ,
               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1275: FILE: kernel/trace/trace_binary/zed.h:165:
+#define COMMA ,

WARNING:SPACING: space prohibited before semicolon
#1276: FILE: kernel/trace/trace_binary/zed.h:166:
+#define SEMICOLON ;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1276: FILE: kernel/trace/trace_binary/zed.h:166:
+#define SEMICOLON ;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1276: FILE: kernel/trace/trace_binary/zed.h:166:
+#define SEMICOLON ;

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1284: FILE: kernel/trace/trace_binary/zed.h:174:
+ * Macros to generate boilerplate tracepoint entry/exit code.
+*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1286: FILE: kernel/trace/trace_binary/zed.h:176:
+#define ZED_TRACEPOINT_ENTER(name, proto)			\
+	static void name##_tracepoint(proto)			\
+	{							\
+		unsigned long zed_flags;			\
+		unsigned long var_len = 0;			\
+		struct name##_trace_struct *zed_event;		\
+		if (!zed_tracing)				\
+			return;					\
+		if (!trace_##name##_trace)			\
+			return;					\
+		local_irq_save(zed_flags);			\
+		zed_event = zed_reserve(name##_trace, var_len);	\
+		if (!zed_event)				\
+			goto exit;			\
+

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1301: FILE: kernel/trace/trace_binary/zed.h:191:
+#define ZED_TRACEPOINT_ENTER_VAR(name, proto)		\
+	static void name##_tracepoint(proto)			\
+	{							\
+		unsigned long zed_flags;			\
+		unsigned long var_len = 0;			\
+		struct name##_trace_struct *zed_event;		\
+		if (!zed_tracing)				\
+			return;					\
+		if (!trace_##name##_trace)			\
+			return;					\
+		local_irq_save(zed_flags);			\
+

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1313: FILE: kernel/trace/trace_binary/zed.h:203:
+#define ZED_RESERVE_VAR(name, var)		\
+	var_len = var;							\
+	zed_event = zed_reserve(name##_trace, var_len);			\
+	if (!zed_event)							\
+		goto exit;						\
+

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1313: FILE: kernel/trace/trace_binary/zed.h:203:
+#define ZED_RESERVE_VAR(name, var)		\
+	var_len = var;							\
+	zed_event = zed_reserve(name##_trace, var_len);			\
+	if (!zed_event)							\
+		goto exit;						\
+

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1319: FILE: kernel/trace/trace_binary/zed.h:209:
+#define ZED_TRACEPOINT_EXIT(name)					\
+	exit:								\
+	local_irq_restore(zed_flags);					\
+	}								\
+

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#1320: FILE: kernel/trace/trace_binary/zed.h:210:
+	exit:								\
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#1320: FILE: kernel/trace/trace_binary/zed.h:210:
+	exit:								\

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1353: FILE: kernel/trace/trace_binary/zed_sched.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1367: FILE: kernel/trace/trace_binary/zed_sched.c:15:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1368: FILE: kernel/trace/trace_binary/zed_sched.c:16:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1389: FILE: kernel/trace/trace_binary/zed_sched.c:37:
+}
+ZED_TRACEPOINT_EXIT(sched_kthread_stop)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1396: FILE: kernel/trace/trace_binary/zed_sched.c:44:
+}
+ZED_TRACEPOINT_EXIT(sched_kthread_stop_ret)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1403: FILE: kernel/trace/trace_binary/zed_sched.c:51:
+}
+ZED_TRACEPOINT_EXIT(sched_wait_task)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1412: FILE: kernel/trace/trace_binary/zed_sched.c:60:
+}
+ZED_TRACEPOINT_EXIT(sched_wakeup)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1421: FILE: kernel/trace/trace_binary/zed_sched.c:69:
+}
+ZED_TRACEPOINT_EXIT(sched_wakeup_new)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1430: FILE: kernel/trace/trace_binary/zed_sched.c:78:
+}
+ZED_TRACEPOINT_EXIT(sched_switch)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1433: FILE: kernel/trace/trace_binary/zed_sched.c:81:
+ZED_TRACEPOINT_ENTER(sched_migrate_task,
+	     TPPROTO(struct task_struct *p, int orig_cpu, int dest_cpu))

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1439: FILE: kernel/trace/trace_binary/zed_sched.c:87:
+}
+ZED_TRACEPOINT_EXIT(sched_migrate_task)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1442: FILE: kernel/trace/trace_binary/zed_sched.c:90:
+ZED_TRACEPOINT_ENTER(sched_process_free,
+	     TPPROTO(struct task_struct *p))

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1446: FILE: kernel/trace/trace_binary/zed_sched.c:94:
+}
+ZED_TRACEPOINT_EXIT(sched_process_free)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1449: FILE: kernel/trace/trace_binary/zed_sched.c:97:
+ZED_TRACEPOINT_ENTER(sched_process_exit,
+	     TPPROTO(struct task_struct *p))

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1453: FILE: kernel/trace/trace_binary/zed_sched.c:101:
+}
+ZED_TRACEPOINT_EXIT(sched_process_exit)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1456: FILE: kernel/trace/trace_binary/zed_sched.c:104:
+ZED_TRACEPOINT_ENTER(sched_process_wait,
+	     TPPROTO(struct pid *pid))

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1460: FILE: kernel/trace/trace_binary/zed_sched.c:108:
+}
+ZED_TRACEPOINT_EXIT(sched_process_wait)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1463: FILE: kernel/trace/trace_binary/zed_sched.c:111:
+ZED_TRACEPOINT_ENTER(sched_process_fork,
+	     TPPROTO(struct task_struct *parent, struct task_struct *child))

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1468: FILE: kernel/trace/trace_binary/zed_sched.c:116:
+}
+ZED_TRACEPOINT_EXIT(sched_process_fork)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1471: FILE: kernel/trace/trace_binary/zed_sched.c:119:
+ZED_TRACEPOINT_ENTER(sched_signal_send,
+	     TPPROTO(int sig, struct task_struct *p))

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1476: FILE: kernel/trace/trace_binary/zed_sched.c:124:
+}
+ZED_TRACEPOINT_EXIT(sched_signal_send)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1481: FILE: kernel/trace/trace_binary/zed_sched.c:129:
+		printk(KERN_ERR "Couldn't register kthread_stop tracepoint.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1485: FILE: kernel/trace/trace_binary/zed_sched.c:133:
+		printk(KERN_ERR "Couldn't register sched_kthread_stop_ret tracepoint.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1489: FILE: kernel/trace/trace_binary/zed_sched.c:137:
+		printk(KERN_ERR "Couldn't register sched_wait_task tracepoint.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1493: FILE: kernel/trace/trace_binary/zed_sched.c:141:
+		printk(KERN_ERR "Couldn't register sched_wakeup tracepoint.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1497: FILE: kernel/trace/trace_binary/zed_sched.c:145:
+		printk(KERN_ERR "Couldn't register sched_wakeup_new tracepoint.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1501: FILE: kernel/trace/trace_binary/zed_sched.c:149:
+		printk(KERN_ERR "Couldn't register sched_switch tracepoint.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1505: FILE: kernel/trace/trace_binary/zed_sched.c:153:
+		printk(KERN_ERR "Couldn't register sched_migrate_task tracepoint.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1509: FILE: kernel/trace/trace_binary/zed_sched.c:157:
+		printk(KERN_ERR "Couldn't register sched_process_free tracepoint.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1513: FILE: kernel/trace/trace_binary/zed_sched.c:161:
+		printk(KERN_ERR "Couldn't register sched_process_exit tracepoint.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1517: FILE: kernel/trace/trace_binary/zed_sched.c:165:
+		printk(KERN_ERR "Couldn't register sched_process_wait tracepoint.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1521: FILE: kernel/trace/trace_binary/zed_sched.c:169:
+		printk(KERN_ERR "Couldn't register sched_process_fork tracepoint.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1525: FILE: kernel/trace/trace_binary/zed_sched.c:173:
+		printk(KERN_ERR "Couldn't register sched_signal_send tracepoint.\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1560: FILE: kernel/trace/trace_binary/zed_sched.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1574: FILE: kernel/trace/trace_binary/zed_sched.h:15:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1575: FILE: kernel/trace/trace_binary/zed_sched.h:16:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1594: FILE: kernel/trace/trace_binary/zed_sched.h:35:
+#define sched_wakeup_trace_fields(subsys, event_name, FIELD)		\
+	FIELD(subsys, event_name, wakeup_pid, pid_t);			\
+	FIELD(subsys, event_name, success, int);			\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'subsys' - possible side-effects?
#1594: FILE: kernel/trace/trace_binary/zed_sched.h:35:
+#define sched_wakeup_trace_fields(subsys, event_name, FIELD)		\
+	FIELD(subsys, event_name, wakeup_pid, pid_t);			\
+	FIELD(subsys, event_name, success, int);			\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'event_name' - possible side-effects?
#1594: FILE: kernel/trace/trace_binary/zed_sched.h:35:
+#define sched_wakeup_trace_fields(subsys, event_name, FIELD)		\
+	FIELD(subsys, event_name, wakeup_pid, pid_t);			\
+	FIELD(subsys, event_name, success, int);			\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'FIELD' - possible side-effects?
#1594: FILE: kernel/trace/trace_binary/zed_sched.h:35:
+#define sched_wakeup_trace_fields(subsys, event_name, FIELD)		\
+	FIELD(subsys, event_name, wakeup_pid, pid_t);			\
+	FIELD(subsys, event_name, success, int);			\
+

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1594: FILE: kernel/trace/trace_binary/zed_sched.h:35:
+#define sched_wakeup_trace_fields(subsys, event_name, FIELD)		\
+	FIELD(subsys, event_name, wakeup_pid, pid_t);			\
+	FIELD(subsys, event_name, success, int);			\
+

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1598: FILE: kernel/trace/trace_binary/zed_sched.h:39:
+#define sched_wakeup_new_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, wakeup_pid, pid_t)	\
+	FIELD(subsys, event_name, success, int)	\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'subsys' - possible side-effects?
#1598: FILE: kernel/trace/trace_binary/zed_sched.h:39:
+#define sched_wakeup_new_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, wakeup_pid, pid_t)	\
+	FIELD(subsys, event_name, success, int)	\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'event_name' - possible side-effects?
#1598: FILE: kernel/trace/trace_binary/zed_sched.h:39:
+#define sched_wakeup_new_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, wakeup_pid, pid_t)	\
+	FIELD(subsys, event_name, success, int)	\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'FIELD' - possible side-effects?
#1598: FILE: kernel/trace/trace_binary/zed_sched.h:39:
+#define sched_wakeup_new_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, wakeup_pid, pid_t)	\
+	FIELD(subsys, event_name, success, int)	\
+

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1602: FILE: kernel/trace/trace_binary/zed_sched.h:43:
+#define sched_switch_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, prev_pid, pid_t)	\
+	FIELD(subsys, event_name, next_pid, pid_t)	\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'subsys' - possible side-effects?
#1602: FILE: kernel/trace/trace_binary/zed_sched.h:43:
+#define sched_switch_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, prev_pid, pid_t)	\
+	FIELD(subsys, event_name, next_pid, pid_t)	\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'event_name' - possible side-effects?
#1602: FILE: kernel/trace/trace_binary/zed_sched.h:43:
+#define sched_switch_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, prev_pid, pid_t)	\
+	FIELD(subsys, event_name, next_pid, pid_t)	\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'FIELD' - possible side-effects?
#1602: FILE: kernel/trace/trace_binary/zed_sched.h:43:
+#define sched_switch_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, prev_pid, pid_t)	\
+	FIELD(subsys, event_name, next_pid, pid_t)	\
+

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1606: FILE: kernel/trace/trace_binary/zed_sched.h:47:
+#define sched_migrate_task_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, pid, pid_t)	\
+	FIELD(subsys, event_name, orig_cpu, int)	\
+	FIELD(subsys, event_name, dest_cpu, int)	\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'subsys' - possible side-effects?
#1606: FILE: kernel/trace/trace_binary/zed_sched.h:47:
+#define sched_migrate_task_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, pid, pid_t)	\
+	FIELD(subsys, event_name, orig_cpu, int)	\
+	FIELD(subsys, event_name, dest_cpu, int)	\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'event_name' - possible side-effects?
#1606: FILE: kernel/trace/trace_binary/zed_sched.h:47:
+#define sched_migrate_task_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, pid, pid_t)	\
+	FIELD(subsys, event_name, orig_cpu, int)	\
+	FIELD(subsys, event_name, dest_cpu, int)	\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'FIELD' - possible side-effects?
#1606: FILE: kernel/trace/trace_binary/zed_sched.h:47:
+#define sched_migrate_task_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, pid, pid_t)	\
+	FIELD(subsys, event_name, orig_cpu, int)	\
+	FIELD(subsys, event_name, dest_cpu, int)	\
+

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1620: FILE: kernel/trace/trace_binary/zed_sched.h:61:
+#define sched_process_fork_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, parent_pid, pid_t)	\
+	FIELD(subsys, event_name, child_pid, pid_t)	\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'subsys' - possible side-effects?
#1620: FILE: kernel/trace/trace_binary/zed_sched.h:61:
+#define sched_process_fork_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, parent_pid, pid_t)	\
+	FIELD(subsys, event_name, child_pid, pid_t)	\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'event_name' - possible side-effects?
#1620: FILE: kernel/trace/trace_binary/zed_sched.h:61:
+#define sched_process_fork_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, parent_pid, pid_t)	\
+	FIELD(subsys, event_name, child_pid, pid_t)	\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'FIELD' - possible side-effects?
#1620: FILE: kernel/trace/trace_binary/zed_sched.h:61:
+#define sched_process_fork_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, parent_pid, pid_t)	\
+	FIELD(subsys, event_name, child_pid, pid_t)	\
+

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1624: FILE: kernel/trace/trace_binary/zed_sched.h:65:
+#define sched_signal_send_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, sig, int)	\
+	FIELD(subsys, event_name, pid, pid_t)	\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'subsys' - possible side-effects?
#1624: FILE: kernel/trace/trace_binary/zed_sched.h:65:
+#define sched_signal_send_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, sig, int)	\
+	FIELD(subsys, event_name, pid, pid_t)	\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'event_name' - possible side-effects?
#1624: FILE: kernel/trace/trace_binary/zed_sched.h:65:
+#define sched_signal_send_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, sig, int)	\
+	FIELD(subsys, event_name, pid, pid_t)	\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'FIELD' - possible side-effects?
#1624: FILE: kernel/trace/trace_binary/zed_sched.h:65:
+#define sched_signal_send_trace_fields(subsys, event_name, FIELD)	\
+	FIELD(subsys, event_name, sig, int)	\
+	FIELD(subsys, event_name, pid, pid_t)	\
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1628: FILE: kernel/trace/trace_binary/zed_sched.h:69:
+extern void zed_sched_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1629: FILE: kernel/trace/trace_binary/zed_sched.h:70:
+extern int zed_enable_sched_tracepoints(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1630: FILE: kernel/trace/trace_binary/zed_sched.h:71:
+extern void zed_disable_sched_tracepoints(void);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000161545.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 25 errors, 75 warnings, 48 checks, 1541 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000161545.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
