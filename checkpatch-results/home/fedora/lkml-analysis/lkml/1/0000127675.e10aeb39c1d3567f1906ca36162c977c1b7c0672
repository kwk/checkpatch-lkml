WARNING:TYPO_SPELLING: 'severly' may be misspelled - perhaps 'severely'?
#50: 
You can imagine some stuff got severly chopped in order to get it down
                               ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'architechtures' may be misspelled - perhaps 'architectures'?
#64: 
a working prototype for 4 architechtures, and it is reasonably easy to
                          ^^^^^^^^^^^^^^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#214: FILE: fs/proc/meminfo.c:192:
+	kdb_printf(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#222: FILE: fs/proc/meminfo.c:200:
+	kdb_printf(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#232: FILE: fs/proc/meminfo.c:210:
+	kdb_printf(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#243: FILE: fs/proc/meminfo.c:221:
+	kdb_printf(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#251: FILE: fs/proc/meminfo.c:229:
+	kdb_printf(

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#258: FILE: fs/proc/meminfo.c:236:
+		K(i.totalram-i.totalhigh),
 		            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#259: FILE: fs/proc/meminfo.c:237:
+		K(i.freeram-i.freehigh)
 		           ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#262: FILE: fs/proc/meminfo.c:240:
+	kdb_printf(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#270: FILE: fs/proc/meminfo.c:248:
+	kdb_printf(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#278: FILE: fs/proc/meminfo.c:256:
+	kdb_printf(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#287: FILE: fs/proc/meminfo.c:265:
+	kdb_printf(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#301: FILE: fs/proc/meminfo.c:279:
+	kdb_printf(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#309: FILE: fs/proc/meminfo.c:287:
+	kdb_printf(

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#373: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#378: FILE: include/linux/kdb.h:1:
+#ifndef _KDB_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#395: FILE: include/linux/kdb.h:18:
+#include <asm/atomic.h>

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#416: FILE: include/linux/kdb.h:39:
+ * ^IDefines whether kdb is on or not.  Default value$

CHECK:BIT_MACRO: Prefer using the BIT macro
#443: FILE: include/linux/kdb.h:66:
+#define KDB_FLAG_EARLYKDB	(1 << 0) /* set from boot parameter kdb=early */

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#444: FILE: include/linux/kdb.h:67:
+#define KDB_FLAG_CATASTROPHIC	(1 << 1) /* A catastrophic event has occurred */

CHECK:BIT_MACRO: Prefer using the BIT macro
#445: FILE: include/linux/kdb.h:68:
+#define KDB_FLAG_CMD_INTERRUPT	(1 << 2) /* Previous command was interrupted */

CHECK:BIT_MACRO: Prefer using the BIT macro
#446: FILE: include/linux/kdb.h:69:
+#define KDB_FLAG_NOIPI		(1 << 3) /* Do not send IPIs */

CHECK:BIT_MACRO: Prefer using the BIT macro
#447: FILE: include/linux/kdb.h:70:
+#define KDB_FLAG_ONLY_DO_DUMP	(1 << 4) /* Only do a dump, used when

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#448: FILE: include/linux/kdb.h:71:
+					  * kdb is off */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:BIT_MACRO: Prefer using the BIT macro
#449: FILE: include/linux/kdb.h:72:
+#define KDB_FLAG_NO_CONSOLE	(1 << 5) /* No console is available,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#450: FILE: include/linux/kdb.h:73:
+					  * kdb is disabled */

CHECK:BIT_MACRO: Prefer using the BIT macro
#451: FILE: include/linux/kdb.h:74:
+#define KDB_FLAG_NO_VT_CONSOLE	(1 << 6) /* No VT console is available, do

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#452: FILE: include/linux/kdb.h:75:
+					  * not use keyboard */

CHECK:BIT_MACRO: Prefer using the BIT macro
#453: FILE: include/linux/kdb.h:76:
+#define KDB_FLAG_NO_I8042	(1 << 7) /* No i8042 chip is available, do

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#454: FILE: include/linux/kdb.h:77:
+					  * not use keyboard */

CHECK:BIT_MACRO: Prefer using the BIT macro
#455: FILE: include/linux/kdb.h:78:
+#define KDB_FLAG_RECOVERY	(1 << 8) /* kdb is being entered for an

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#456: FILE: include/linux/kdb.h:79:
+					  * error which has been recovered */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#460: FILE: include/linux/kdb.h:83:
+extern void kdb_save_flags(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#461: FILE: include/linux/kdb.h:84:
+extern void kdb_restore_flags(void);

WARNING:NEW_TYPEDEFS: do not add new typedefs
#473: FILE: include/linux/kdb.h:96:
+typedef enum {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#483: FILE: include/linux/kdb.h:106:
+				 * regs probably valid */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#486: FILE: include/linux/kdb.h:109:
+				 * regs invalid - internal only */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#493: FILE: include/linux/kdb.h:116:
+extern void kdb_printf(const char *, ...)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#493: FILE: include/linux/kdb.h:116:
+extern void kdb_printf(const char *, ...)

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(1, 2) over __attribute__((format(printf, 1, 2)))
#494: FILE: include/linux/kdb.h:117:
+	    __attribute__ ((format (printf, 1, 2)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(1, 2) over __attribute__((format(printf, 1, 2)))
#496: FILE: include/linux/kdb.h:119:
+	     __attribute__ ((format (printf, 1, 2)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#497: FILE: include/linux/kdb.h:120:
+extern void kdb_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#503: FILE: include/linux/kdb.h:126:
+extern int kdb_ipi(struct pt_regs *, void (*ack_interrupt)(void));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#504: FILE: include/linux/kdb.h:127:
+extern void smp_kdb_stop(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#514: FILE: include/linux/kdb.h:137:
+extern int kdb_usb_keyboard_attach(struct urb *urb,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#516: FILE: include/linux/kdb.h:139:
+extern int kdb_usb_keyboard_detach(struct urb *urb);

WARNING:LINE_SPACING: Missing a blank line after declarations
#524: FILE: include/linux/kdb.h:147:
+	unsigned int cpu = task_thread_info(p)->cpu;
+	if (cpu > NR_CPUS)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#524: FILE: include/linux/kdb.h:147:
+	if (cpu > NR_CPUS)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#537: FILE: include/linux/kdb.h:160:
+void kdba_kdump_prepare(struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#538: FILE: include/linux/kdb.h:161:
+void machine_crash_shutdown(struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#540: FILE: include/linux/kdb.h:163:
+void machine_crash_shutdown_end(struct pt_regs *);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#555: FILE: include/linux/kdbprivate.h:1:
+#ifndef _KDBPRIVATE_H

CHECK:LINE_SPACING: Please don't use multiple blank lines
#568: FILE: include/linux/kdbprivate.h:14:
+
+

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#620: FILE: include/linux/kdbprivate.h:66:
+#define KDB_DEBUG_STATE(text, value) if (KDB_DEBUG(STATE)) \
+		kdb_print_state(text, value)

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:NEW_TYPEDEFS: do not add new typedefs
#651: FILE: include/linux/kdbprivate.h:97:
+typedef unsigned long kdb_machreg_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#652: FILE: include/linux/kdbprivate.h:98:
+typedef unsigned char kdb_machinst_t;

WARNING:TYPO_SPELLING: 'architecure' may be misspelled - perhaps 'architecture'?
#656: FILE: include/linux/kdbprivate.h:102:
+ * supported by this architecure.
                      ^^^^^^^^^^^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#669: FILE: include/linux/kdbprivate.h:115:
+typedef struct _kdbhard_bp {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#681: FILE: include/linux/kdbprivate.h:127:
+
+

WARNING:NEW_TYPEDEFS: do not add new typedefs
#684: FILE: include/linux/kdbprivate.h:130:
+typedef enum {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#696: FILE: include/linux/kdbprivate.h:142:
+typedef struct __ksymtab {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#699: FILE: include/linux/kdbprivate.h:145:
+					 * "kernel" */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#706: FILE: include/linux/kdbprivate.h:152:
+					 * any version */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#710: FILE: include/linux/kdbprivate.h:156:
+extern int kallsyms_symbol_next(char *prefix_name, int flag);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#711: FILE: include/linux/kdbprivate.h:157:
+extern int kallsyms_symbol_complete(char *prefix_name, int max_len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#716: FILE: include/linux/kdbprivate.h:162:
+extern int kdb_register(char *, kdb_func_t, char *, char *, short);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#716: FILE: include/linux/kdbprivate.h:162:
+extern int kdb_register(char *, kdb_func_t, char *, char *, short);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kdb_func_t' should also have an identifier name
#716: FILE: include/linux/kdbprivate.h:162:
+extern int kdb_register(char *, kdb_func_t, char *, char *, short);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#716: FILE: include/linux/kdbprivate.h:162:
+extern int kdb_register(char *, kdb_func_t, char *, char *, short);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#716: FILE: include/linux/kdbprivate.h:162:
+extern int kdb_register(char *, kdb_func_t, char *, char *, short);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'short' should also have an identifier name
#716: FILE: include/linux/kdbprivate.h:162:
+extern int kdb_register(char *, kdb_func_t, char *, char *, short);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#717: FILE: include/linux/kdbprivate.h:163:
+extern int kdb_register_repeat(char *, kdb_func_t, char *, char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#717: FILE: include/linux/kdbprivate.h:163:
+extern int kdb_register_repeat(char *, kdb_func_t, char *, char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kdb_func_t' should also have an identifier name
#717: FILE: include/linux/kdbprivate.h:163:
+extern int kdb_register_repeat(char *, kdb_func_t, char *, char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#717: FILE: include/linux/kdbprivate.h:163:
+extern int kdb_register_repeat(char *, kdb_func_t, char *, char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#717: FILE: include/linux/kdbprivate.h:163:
+extern int kdb_register_repeat(char *, kdb_func_t, char *, char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'short' should also have an identifier name
#717: FILE: include/linux/kdbprivate.h:163:
+extern int kdb_register_repeat(char *, kdb_func_t, char *, char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kdb_repeat_t' should also have an identifier name
#717: FILE: include/linux/kdbprivate.h:163:
+extern int kdb_register_repeat(char *, kdb_func_t, char *, char *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#719: FILE: include/linux/kdbprivate.h:165:
+extern int kdb_unregister(char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#719: FILE: include/linux/kdbprivate.h:165:
+extern int kdb_unregister(char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#721: FILE: include/linux/kdbprivate.h:167:
+extern int kdb_getarea_size(void *, unsigned long, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#721: FILE: include/linux/kdbprivate.h:167:
+extern int kdb_getarea_size(void *, unsigned long, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#721: FILE: include/linux/kdbprivate.h:167:
+extern int kdb_getarea_size(void *, unsigned long, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#721: FILE: include/linux/kdbprivate.h:167:
+extern int kdb_getarea_size(void *, unsigned long, size_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#722: FILE: include/linux/kdbprivate.h:168:
+extern int kdb_putarea_size(unsigned long, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#722: FILE: include/linux/kdbprivate.h:168:
+extern int kdb_putarea_size(unsigned long, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#722: FILE: include/linux/kdbprivate.h:168:
+extern int kdb_putarea_size(unsigned long, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#722: FILE: include/linux/kdbprivate.h:168:
+extern int kdb_putarea_size(unsigned long, void *, size_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#730: FILE: include/linux/kdbprivate.h:176:
+extern int kdb_getphysword(unsigned long *word,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#731: FILE: include/linux/kdbprivate.h:177:
+extern int kdb_getphysword(unsigned long *word,
+			unsigned long addr, size_t size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#732: FILE: include/linux/kdbprivate.h:178:
+extern int kdb_getword(unsigned long *, unsigned long, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long *' should also have an identifier name
#732: FILE: include/linux/kdbprivate.h:178:
+extern int kdb_getword(unsigned long *, unsigned long, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#732: FILE: include/linux/kdbprivate.h:178:
+extern int kdb_getword(unsigned long *, unsigned long, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#732: FILE: include/linux/kdbprivate.h:178:
+extern int kdb_getword(unsigned long *, unsigned long, size_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#733: FILE: include/linux/kdbprivate.h:179:
+extern int kdb_putword(unsigned long, unsigned long, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#733: FILE: include/linux/kdbprivate.h:179:
+extern int kdb_putword(unsigned long, unsigned long, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#733: FILE: include/linux/kdbprivate.h:179:
+extern int kdb_putword(unsigned long, unsigned long, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#733: FILE: include/linux/kdbprivate.h:179:
+extern int kdb_putword(unsigned long, unsigned long, size_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#735: FILE: include/linux/kdbprivate.h:181:
+extern int kdbgetularg(const char *, unsigned long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#735: FILE: include/linux/kdbprivate.h:181:
+extern int kdbgetularg(const char *, unsigned long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long *' should also have an identifier name
#735: FILE: include/linux/kdbprivate.h:181:
+extern int kdbgetularg(const char *, unsigned long *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#736: FILE: include/linux/kdbprivate.h:182:
+extern char *kdbgetenv(const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#736: FILE: include/linux/kdbprivate.h:182:
+extern char *kdbgetenv(const char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#737: FILE: include/linux/kdbprivate.h:183:
+extern int kdbgetintenv(const char *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#737: FILE: include/linux/kdbprivate.h:183:
+extern int kdbgetintenv(const char *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#737: FILE: include/linux/kdbprivate.h:183:
+extern int kdbgetintenv(const char *, int *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#738: FILE: include/linux/kdbprivate.h:184:
+extern int kdbgetaddrarg(int, const char**, int*, unsigned long *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#738: FILE: include/linux/kdbprivate.h:184:
+extern int kdbgetaddrarg(int, const char**, int*, unsigned long *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char**' should also have an identifier name
#738: FILE: include/linux/kdbprivate.h:184:
+extern int kdbgetaddrarg(int, const char**, int*, unsigned long *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int*' should also have an identifier name
#738: FILE: include/linux/kdbprivate.h:184:
+extern int kdbgetaddrarg(int, const char**, int*, unsigned long *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long *' should also have an identifier name
#738: FILE: include/linux/kdbprivate.h:184:
+extern int kdbgetaddrarg(int, const char**, int*, unsigned long *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'long *' should also have an identifier name
#738: FILE: include/linux/kdbprivate.h:184:
+extern int kdbgetaddrarg(int, const char**, int*, unsigned long *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char **' should also have an identifier name
#738: FILE: include/linux/kdbprivate.h:184:
+extern int kdbgetaddrarg(int, const char**, int*, unsigned long *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#740: FILE: include/linux/kdbprivate.h:186:
+extern int kdbgetsymval(const char *, kdb_symtab_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#740: FILE: include/linux/kdbprivate.h:186:
+extern int kdbgetsymval(const char *, kdb_symtab_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kdb_symtab_t *' should also have an identifier name
#740: FILE: include/linux/kdbprivate.h:186:
+extern int kdbgetsymval(const char *, kdb_symtab_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#741: FILE: include/linux/kdbprivate.h:187:
+extern int kdbnearsym(unsigned long, kdb_symtab_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#741: FILE: include/linux/kdbprivate.h:187:
+extern int kdbnearsym(unsigned long, kdb_symtab_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kdb_symtab_t *' should also have an identifier name
#741: FILE: include/linux/kdbprivate.h:187:
+extern int kdbnearsym(unsigned long, kdb_symtab_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#742: FILE: include/linux/kdbprivate.h:188:
+extern void kdbnearsym_cleanup(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#743: FILE: include/linux/kdbprivate.h:189:
+extern char *kdb_read(char *buffer, size_t bufsize);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#744: FILE: include/linux/kdbprivate.h:190:
+extern char *kdb_strdup(const char *str, gfp_t type);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#745: FILE: include/linux/kdbprivate.h:191:
+extern void kdb_symbol_print(kdb_machreg_t, const kdb_symtab_t *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kdb_machreg_t' should also have an identifier name
#745: FILE: include/linux/kdbprivate.h:191:
+extern void kdb_symbol_print(kdb_machreg_t, const kdb_symtab_t *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const kdb_symtab_t *' should also have an identifier name
#745: FILE: include/linux/kdbprivate.h:191:
+extern void kdb_symbol_print(kdb_machreg_t, const kdb_symtab_t *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#745: FILE: include/linux/kdbprivate.h:191:
+extern void kdb_symbol_print(kdb_machreg_t, const kdb_symtab_t *, unsigned int);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'regs' may be better as '(regs)' to avoid precedence issues
#751: FILE: include/linux/kdbprivate.h:197:
+#define KDB_NULL_REGS(regs) \
+	(regs == (struct pt_regs *)NULL ? \
+	 kdb_printf("%s: null regs - should never happen\n", __func__), \
+	 1 : 0)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#760: FILE: include/linux/kdbprivate.h:206:
+extern void kdb_print_state(const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#760: FILE: include/linux/kdbprivate.h:206:
+extern void kdb_print_state(const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#760: FILE: include/linux/kdbprivate.h:206:
+extern void kdb_print_state(const char *, int);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#771: FILE: include/linux/kdbprivate.h:217:
+						 * kdb control */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#775: FILE: include/linux/kdbprivate.h:221:
+						 * DOING_SS is also set */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#778: FILE: include/linux/kdbprivate.h:224:
+						 * DOING_SS */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#783: FILE: include/linux/kdbprivate.h:229:
+						 * back to initial cpu */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#788: FILE: include/linux/kdbprivate.h:234:
+						 * adjusted */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#791: FILE: include/linux/kdbprivate.h:237:
+						 * keyboard on this cpu */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#797: FILE: include/linux/kdbprivate.h:243:
+						 * specific use */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#812: FILE: include/linux/kdbprivate.h:258:
+^I * ^IContains the current line number on the screen.  Used$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#820: FILE: include/linux/kdbprivate.h:266:
+^I * ^IEach active and inactive breakpoint is represented by$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#821: FILE: include/linux/kdbprivate.h:267:
+^I * ^Ian instance of the following data structure.$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#824: FILE: include/linux/kdbprivate.h:270:
+typedef struct _kdb_bp {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#825: FILE: include/linux/kdbprivate.h:271:
+^Iunsigned long  ^Ibp_addr;^I/* Address breakpoint is present at */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#843: FILE: include/linux/kdbprivate.h:289:
+					 * instruction */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#856: FILE: include/linux/kdbprivate.h:302:
+extern void kdba_initbp(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#857: FILE: include/linux/kdbprivate.h:303:
+extern void kdba_printbp(kdb_bp_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kdb_bp_t *' should also have an identifier name
#857: FILE: include/linux/kdbprivate.h:303:
+extern void kdba_printbp(kdb_bp_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#858: FILE: include/linux/kdbprivate.h:304:
+extern void kdba_alloc_hwbp(kdb_bp_t *bp, int *diagp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#859: FILE: include/linux/kdbprivate.h:305:
+extern void kdba_free_hwbp(kdb_bp_t *bp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#860: FILE: include/linux/kdbprivate.h:306:
+extern int kdba_parsebp(int, const char**, int *, kdb_bp_t*);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#860: FILE: include/linux/kdbprivate.h:306:
+extern int kdba_parsebp(int, const char**, int *, kdb_bp_t*);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char**' should also have an identifier name
#860: FILE: include/linux/kdbprivate.h:306:
+extern int kdba_parsebp(int, const char**, int *, kdb_bp_t*);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#860: FILE: include/linux/kdbprivate.h:306:
+extern int kdba_parsebp(int, const char**, int *, kdb_bp_t*);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kdb_bp_t*' should also have an identifier name
#860: FILE: include/linux/kdbprivate.h:306:
+extern int kdba_parsebp(int, const char**, int *, kdb_bp_t*);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#861: FILE: include/linux/kdbprivate.h:307:
+extern char *kdba_bptype(kdbhard_bp_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kdbhard_bp_t *' should also have an identifier name
#861: FILE: include/linux/kdbprivate.h:307:
+extern char *kdba_bptype(kdbhard_bp_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#862: FILE: include/linux/kdbprivate.h:308:
+extern void kdba_setsinglestep(struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#862: FILE: include/linux/kdbprivate.h:308:
+extern void kdba_setsinglestep(struct pt_regs *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#863: FILE: include/linux/kdbprivate.h:309:
+extern void kdba_clearsinglestep(struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#863: FILE: include/linux/kdbprivate.h:309:
+extern void kdba_clearsinglestep(struct pt_regs *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#869: FILE: include/linux/kdbprivate.h:315:
+extern void kdba_adjust_ip(kdb_reason_t, int, struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kdb_reason_t' should also have an identifier name
#869: FILE: include/linux/kdbprivate.h:315:
+extern void kdba_adjust_ip(kdb_reason_t, int, struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#869: FILE: include/linux/kdbprivate.h:315:
+extern void kdba_adjust_ip(kdb_reason_t, int, struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#869: FILE: include/linux/kdbprivate.h:315:
+extern void kdba_adjust_ip(kdb_reason_t, int, struct pt_regs *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#874: FILE: include/linux/kdbprivate.h:320:
+extern void kdb_id1(unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#874: FILE: include/linux/kdbprivate.h:320:
+extern void kdb_id1(unsigned long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#875: FILE: include/linux/kdbprivate.h:321:
+extern void kdb_id_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#880: FILE: include/linux/kdbprivate.h:326:
+extern void kdba_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#881: FILE: include/linux/kdbprivate.h:327:
+extern void kdb_io_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#889: FILE: include/linux/kdbprivate.h:335:
+extern int kdb_get_kbd_char(void);

WARNING:NEW_TYPEDEFS: do not add new typedefs
#905: FILE: include/linux/kdbprivate.h:351:
+typedef struct { DECLARE_BITMAP(bits, KDBA_MAXARGS); } valid_t;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#909: FILE: include/linux/kdbprivate.h:355:
+						 * current stack */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#911: FILE: include/linux/kdbprivate.h:357:
+						 * detected */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#923: FILE: include/linux/kdbprivate.h:369:
+extern int kdba_bt_address(kdb_machreg_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kdb_machreg_t' should also have an identifier name
#923: FILE: include/linux/kdbprivate.h:369:
+extern int kdba_bt_address(kdb_machreg_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#923: FILE: include/linux/kdbprivate.h:369:
+extern int kdba_bt_address(kdb_machreg_t, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#924: FILE: include/linux/kdbprivate.h:370:
+extern int kdba_bt_process(const struct task_struct *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct task_struct *' should also have an identifier name
#924: FILE: include/linux/kdbprivate.h:370:
+extern int kdba_bt_process(const struct task_struct *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#924: FILE: include/linux/kdbprivate.h:370:
+extern int kdba_bt_process(const struct task_struct *, int);

WARNING:NEW_TYPEDEFS: do not add new typedefs
#930: FILE: include/linux/kdbprivate.h:376:
+typedef struct _kdbtab {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#937: FILE: include/linux/kdbprivate.h:383:
+					 * chars required */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#945: FILE: include/linux/kdbprivate.h:391:
+extern int kdb_id(int, const char **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#945: FILE: include/linux/kdbprivate.h:391:
+extern int kdb_id(int, const char **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char **' should also have an identifier name
#945: FILE: include/linux/kdbprivate.h:391:
+extern int kdb_id(int, const char **);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#946: FILE: include/linux/kdbprivate.h:392:
+extern int kdb_bt(int, const char **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#946: FILE: include/linux/kdbprivate.h:392:
+extern int kdb_bt(int, const char **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char **' should also have an identifier name
#946: FILE: include/linux/kdbprivate.h:392:
+extern int kdb_bt(int, const char **);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#951: FILE: include/linux/kdbprivate.h:397:
+extern char *kdb_getstr(char *, size_t, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#951: FILE: include/linux/kdbprivate.h:397:
+extern char *kdb_getstr(char *, size_t, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#951: FILE: include/linux/kdbprivate.h:397:
+extern char *kdb_getstr(char *, size_t, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#951: FILE: include/linux/kdbprivate.h:397:
+extern char *kdb_getstr(char *, size_t, char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#956: FILE: include/linux/kdbprivate.h:402:
+extern int kdba_getregcontents(const char *, struct pt_regs *, kdb_machreg_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#956: FILE: include/linux/kdbprivate.h:402:
+extern int kdba_getregcontents(const char *, struct pt_regs *, kdb_machreg_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#956: FILE: include/linux/kdbprivate.h:402:
+extern int kdba_getregcontents(const char *, struct pt_regs *, kdb_machreg_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kdb_machreg_t *' should also have an identifier name
#956: FILE: include/linux/kdbprivate.h:402:
+extern int kdba_getregcontents(const char *, struct pt_regs *, kdb_machreg_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#957: FILE: include/linux/kdbprivate.h:403:
+extern int kdba_setregcontents(const char *, struct pt_regs *, kdb_machreg_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#957: FILE: include/linux/kdbprivate.h:403:
+extern int kdba_setregcontents(const char *, struct pt_regs *, kdb_machreg_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#957: FILE: include/linux/kdbprivate.h:403:
+extern int kdba_setregcontents(const char *, struct pt_regs *, kdb_machreg_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kdb_machreg_t' should also have an identifier name
#957: FILE: include/linux/kdbprivate.h:403:
+extern int kdba_setregcontents(const char *, struct pt_regs *, kdb_machreg_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#958: FILE: include/linux/kdbprivate.h:404:
+extern int kdba_dumpregs(struct pt_regs *, const char *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#958: FILE: include/linux/kdbprivate.h:404:
+extern int kdba_dumpregs(struct pt_regs *, const char *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#958: FILE: include/linux/kdbprivate.h:404:
+extern int kdba_dumpregs(struct pt_regs *, const char *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#958: FILE: include/linux/kdbprivate.h:404:
+extern int kdba_dumpregs(struct pt_regs *, const char *, const char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#959: FILE: include/linux/kdbprivate.h:405:
+extern int kdba_setpc(struct pt_regs *, kdb_machreg_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#959: FILE: include/linux/kdbprivate.h:405:
+extern int kdba_setpc(struct pt_regs *, kdb_machreg_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kdb_machreg_t' should also have an identifier name
#959: FILE: include/linux/kdbprivate.h:405:
+extern int kdba_setpc(struct pt_regs *, kdb_machreg_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#960: FILE: include/linux/kdbprivate.h:406:
+extern kdb_machreg_t kdba_getpc(struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#960: FILE: include/linux/kdbprivate.h:406:
+extern kdb_machreg_t kdba_getpc(struct pt_regs *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#965: FILE: include/linux/kdbprivate.h:411:
+extern void kdba_installdbreg(kdb_bp_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kdb_bp_t *' should also have an identifier name
#965: FILE: include/linux/kdbprivate.h:411:
+extern void kdba_installdbreg(kdb_bp_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#966: FILE: include/linux/kdbprivate.h:412:
+extern void kdba_removedbreg(kdb_bp_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kdb_bp_t *' should also have an identifier name
#966: FILE: include/linux/kdbprivate.h:412:
+extern void kdba_removedbreg(kdb_bp_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#971: FILE: include/linux/kdbprivate.h:417:
+extern void kdb_initbptab(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#972: FILE: include/linux/kdbprivate.h:418:
+extern void kdb_bp_install_global(struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#972: FILE: include/linux/kdbprivate.h:418:
+extern void kdb_bp_install_global(struct pt_regs *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#973: FILE: include/linux/kdbprivate.h:419:
+extern void kdb_bp_install_local(struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#973: FILE: include/linux/kdbprivate.h:419:
+extern void kdb_bp_install_local(struct pt_regs *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#974: FILE: include/linux/kdbprivate.h:420:
+extern void kdb_bp_remove_global(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#975: FILE: include/linux/kdbprivate.h:421:
+extern void kdb_bp_remove_local(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#980: FILE: include/linux/kdbprivate.h:426:
+extern int kdba_installbp(struct pt_regs *regs, kdb_bp_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kdb_bp_t *' should also have an identifier name
#980: FILE: include/linux/kdbprivate.h:426:
+extern int kdba_installbp(struct pt_regs *regs, kdb_bp_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#981: FILE: include/linux/kdbprivate.h:427:
+extern int kdba_removebp(kdb_bp_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kdb_bp_t *' should also have an identifier name
#981: FILE: include/linux/kdbprivate.h:427:
+extern int kdba_removebp(kdb_bp_t *);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#983: FILE: include/linux/kdbprivate.h:429:
+
+

WARNING:NEW_TYPEDEFS: do not add new typedefs
#984: FILE: include/linux/kdbprivate.h:430:
+typedef enum {

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#993: FILE: include/linux/kdbprivate.h:439:
+extern kdb_dbtrap_t kdba_db_trap(struct pt_regs *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#993: FILE: include/linux/kdbprivate.h:439:
+extern kdb_dbtrap_t kdba_db_trap(struct pt_regs *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#993: FILE: include/linux/kdbprivate.h:439:
+extern kdb_dbtrap_t kdba_db_trap(struct pt_regs *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#995: FILE: include/linux/kdbprivate.h:441:
+extern kdb_dbtrap_t kdba_bp_trap(struct pt_regs *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#995: FILE: include/linux/kdbprivate.h:441:
+extern kdb_dbtrap_t kdba_bp_trap(struct pt_regs *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#995: FILE: include/linux/kdbprivate.h:441:
+extern kdb_dbtrap_t kdba_bp_trap(struct pt_regs *, int);

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1000: FILE: include/linux/kdbprivate.h:446:
+typedef unsigned long kdb_intstate_t;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1002: FILE: include/linux/kdbprivate.h:448:
+extern void kdba_disableint(kdb_intstate_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kdb_intstate_t *' should also have an identifier name
#1002: FILE: include/linux/kdbprivate.h:448:
+extern void kdba_disableint(kdb_intstate_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1003: FILE: include/linux/kdbprivate.h:449:
+extern void kdba_restoreint(kdb_intstate_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kdb_intstate_t *' should also have an identifier name
#1003: FILE: include/linux/kdbprivate.h:449:
+extern void kdba_restoreint(kdb_intstate_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1008: FILE: include/linux/kdbprivate.h:454:
+extern int kdba_ipi(struct pt_regs *, void (*)(void));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#1008: FILE: include/linux/kdbprivate.h:454:
+extern int kdba_ipi(struct pt_regs *, void (*)(void));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1009: FILE: include/linux/kdbprivate.h:455:
+extern int kdba_main_loop(kdb_reason_t, kdb_reason_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kdb_reason_t' should also have an identifier name
#1009: FILE: include/linux/kdbprivate.h:455:
+extern int kdba_main_loop(kdb_reason_t, kdb_reason_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kdb_reason_t' should also have an identifier name
#1009: FILE: include/linux/kdbprivate.h:455:
+extern int kdba_main_loop(kdb_reason_t, kdb_reason_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1009: FILE: include/linux/kdbprivate.h:455:
+extern int kdba_main_loop(kdb_reason_t, kdb_reason_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kdb_dbtrap_t' should also have an identifier name
#1009: FILE: include/linux/kdbprivate.h:455:
+extern int kdba_main_loop(kdb_reason_t, kdb_reason_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#1009: FILE: include/linux/kdbprivate.h:455:
+extern int kdba_main_loop(kdb_reason_t, kdb_reason_t,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1011: FILE: include/linux/kdbprivate.h:457:
+extern int kdb_main_loop(kdb_reason_t, kdb_reason_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kdb_reason_t' should also have an identifier name
#1011: FILE: include/linux/kdbprivate.h:457:
+extern int kdb_main_loop(kdb_reason_t, kdb_reason_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kdb_reason_t' should also have an identifier name
#1011: FILE: include/linux/kdbprivate.h:457:
+extern int kdb_main_loop(kdb_reason_t, kdb_reason_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1011: FILE: include/linux/kdbprivate.h:457:
+extern int kdb_main_loop(kdb_reason_t, kdb_reason_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kdb_dbtrap_t' should also have an identifier name
#1011: FILE: include/linux/kdbprivate.h:457:
+extern int kdb_main_loop(kdb_reason_t, kdb_reason_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#1011: FILE: include/linux/kdbprivate.h:457:
+extern int kdb_main_loop(kdb_reason_t, kdb_reason_t,

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1017: FILE: include/linux/kdbprivate.h:463:
+#if 0

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#1018: FILE: include/linux/kdbprivate.h:464:
+extern int kdb_dis_fprintf(PTR, const char *, ...) \

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1018: FILE: include/linux/kdbprivate.h:464:
+extern int kdb_dis_fprintf(PTR, const char *, ...) \

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 3) over __attribute__((format(printf, 2, 3)))
#1019: FILE: include/linux/kdbprivate.h:465:
+	__attribute__ ((format (printf, 2, 3)));

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#1020: FILE: include/linux/kdbprivate.h:466:
+extern int kdb_dis_fprintf_dummy(PTR, const char *, ...) \

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1020: FILE: include/linux/kdbprivate.h:466:
+extern int kdb_dis_fprintf_dummy(PTR, const char *, ...) \

WARNING:FUNCTION_ARGUMENTS: function definition argument 'PTR' should also have an identifier name
#1020: FILE: include/linux/kdbprivate.h:466:
+extern int kdb_dis_fprintf_dummy(PTR, const char *, ...) \

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#1020: FILE: include/linux/kdbprivate.h:466:
+extern int kdb_dis_fprintf_dummy(PTR, const char *, ...) \

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 3) over __attribute__((format(printf, 2, 3)))
#1021: FILE: include/linux/kdbprivate.h:467:
+	__attribute__ ((format (printf, 2, 3)));

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1028: FILE: include/linux/kdbprivate.h:474:
+#if 0

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1029: FILE: include/linux/kdbprivate.h:475:
+extern int  kdba_id_printinsn(kdb_machreg_t, disassemble_info *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1030: FILE: include/linux/kdbprivate.h:476:
+extern int  kdba_id_parsemode(const char *, disassemble_info*);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#1030: FILE: include/linux/kdbprivate.h:476:
+extern int  kdba_id_parsemode(const char *, disassemble_info*);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'disassemble_info*' should also have an identifier name
#1030: FILE: include/linux/kdbprivate.h:476:
+extern int  kdba_id_parsemode(const char *, disassemble_info*);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1031: FILE: include/linux/kdbprivate.h:477:
+extern void kdba_id_init(disassemble_info *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'disassemble_info *' should also have an identifier name
#1031: FILE: include/linux/kdbprivate.h:477:
+extern void kdba_id_init(disassemble_info *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1032: FILE: include/linux/kdbprivate.h:478:
+extern void kdba_check_pc(kdb_machreg_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kdb_machreg_t *' should also have an identifier name
#1032: FILE: include/linux/kdbprivate.h:478:
+extern void kdba_check_pc(kdb_machreg_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1039: FILE: include/linux/kdbprivate.h:485:
+extern void kdb_syslog_data(char *syslog_data[]);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1040: FILE: include/linux/kdbprivate.h:486:
+extern unsigned long kdb_task_state_string(const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#1040: FILE: include/linux/kdbprivate.h:486:
+extern unsigned long kdb_task_state_string(const char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1041: FILE: include/linux/kdbprivate.h:487:
+extern char kdb_task_state_char (const struct task_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct task_struct *' should also have an identifier name
#1041: FILE: include/linux/kdbprivate.h:487:
+extern char kdb_task_state_char (const struct task_struct *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1042: FILE: include/linux/kdbprivate.h:488:
+extern unsigned long kdb_task_state(const struct task_struct *p,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1044: FILE: include/linux/kdbprivate.h:490:
+extern void kdb_ps_suppressed(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1045: FILE: include/linux/kdbprivate.h:491:
+extern void kdb_ps1(const struct task_struct *p);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1046: FILE: include/linux/kdbprivate.h:492:
+extern int kdb_parse(const char *cmdstr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1047: FILE: include/linux/kdbprivate.h:493:
+extern void kdb_print_nameval(const char *name, unsigned long val);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1048: FILE: include/linux/kdbprivate.h:494:
+extern void kdb_send_sig_info(struct task_struct *p,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1051: FILE: include/linux/kdbprivate.h:497:
+extern void kdb_si_swapinfo(struct sysinfo *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1056: FILE: include/linux/kdbprivate.h:502:
+extern void kdb_meminfo_proc_show(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1058: FILE: include/linux/kdbprivate.h:504:
+extern void kdb_hugetlb_report_meminfo(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1060: FILE: include/linux/kdbprivate.h:506:
+extern const char *kdb_walk_kallsyms(loff_t *pos);

WARNING:TYPO_SPELLING: 'Dependant' may be misspelled - perhaps 'Dependent'?
#1063: FILE: include/linux/kdbprivate.h:509:
+	 * Architecture Dependant Local Processor setup & cleanup interfaces
 	                ^^^^^^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1065: FILE: include/linux/kdbprivate.h:511:
+extern void kdba_local_arch_setup(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1066: FILE: include/linux/kdbprivate.h:512:
+extern void kdba_local_arch_cleanup(void);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1077: FILE: include/linux/kdbprivate.h:523:
+#define KDB_SP_DEFAULT (KDB_SP_VALUE|KDB_SP_PAREN)
                                     ^

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1081: FILE: include/linux/kdbprivate.h:527:
+#if 0

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1098: FILE: include/linux/kdbprivate.h:544:
+extern void kdb_save_running_cpu(struct pt_regs *, struct task_struct *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#1098: FILE: include/linux/kdbprivate.h:544:
+extern void kdb_save_running_cpu(struct pt_regs *, struct task_struct *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#1098: FILE: include/linux/kdbprivate.h:544:
+extern void kdb_save_running_cpu(struct pt_regs *, struct task_struct *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1098: FILE: include/linux/kdbprivate.h:544:
+extern void kdb_save_running_cpu(struct pt_regs *, struct task_struct *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1099: FILE: include/linux/kdbprivate.h:545:
+extern int kdb_save_running(struct pt_regs *, kdb_reason_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#1099: FILE: include/linux/kdbprivate.h:545:
+extern int kdb_save_running(struct pt_regs *, kdb_reason_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kdb_reason_t' should also have an identifier name
#1099: FILE: include/linux/kdbprivate.h:545:
+extern int kdb_save_running(struct pt_regs *, kdb_reason_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kdb_reason_t' should also have an identifier name
#1099: FILE: include/linux/kdbprivate.h:545:
+extern int kdb_save_running(struct pt_regs *, kdb_reason_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1099: FILE: include/linux/kdbprivate.h:545:
+extern int kdb_save_running(struct pt_regs *, kdb_reason_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kdb_dbtrap_t' should also have an identifier name
#1099: FILE: include/linux/kdbprivate.h:545:
+extern int kdb_save_running(struct pt_regs *, kdb_reason_t,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1101: FILE: include/linux/kdbprivate.h:547:
+extern void kdb_unsave_running(struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#1101: FILE: include/linux/kdbprivate.h:547:
+extern void kdb_unsave_running(struct pt_regs *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1102: FILE: include/linux/kdbprivate.h:548:
+extern struct task_struct *kdb_curr_task(int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1102: FILE: include/linux/kdbprivate.h:548:
+extern struct task_struct *kdb_curr_task(int);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1104: FILE: include/linux/kdbprivate.h:550:
+/* ^IIncremented each time the main kdb loop is entered on the initial cpu,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1105: FILE: include/linux/kdbprivate.h:551:
+ * ^Iit gives some indication of how old the saved data is.$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1110: FILE: include/linux/kdbprivate.h:556:
+extern void kdb_runqueue(unsigned long cpu, kdb_printf_t xxx_printf);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1118: FILE: include/linux/kdbprivate.h:564:
+extern void *debug_kmalloc(size_t size, gfp_t flags);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1119: FILE: include/linux/kdbprivate.h:565:
+extern void debug_kfree(void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1119: FILE: include/linux/kdbprivate.h:565:
+extern void debug_kfree(void *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1120: FILE: include/linux/kdbprivate.h:566:
+extern void debug_kusage(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1122: FILE: include/linux/kdbprivate.h:568:
+extern void kdba_set_current_task(const struct task_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct task_struct *' should also have an identifier name
#1122: FILE: include/linux/kdbprivate.h:568:
+extern void kdba_set_current_task(const struct task_struct *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1133: FILE: include/linux/kdbprivate.h:579:
+extern int kdba_putarea_size(unsigned long to_xxx, void *from, size_t size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1134: FILE: include/linux/kdbprivate.h:580:
+extern int kdba_getarea_size(void *to, unsigned long from_xxx, size_t size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1135: FILE: include/linux/kdbprivate.h:581:
+extern int kdba_verify_rw(unsigned long addr, size_t size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1142: FILE: include/linux/kdbprivate.h:588:
+extern void kdba_cpu_up(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1161: FILE: include/linux/kdbprivate.h:607:
+extern void kdba_kdump_shutdown_slave(struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#1161: FILE: include/linux/kdbprivate.h:607:
+extern void kdba_kdump_shutdown_slave(struct pt_regs *);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1184: FILE: init/main.c:197:
+	if (strcmp(str, "on") == 0) {
[...]
+	} else if (strcmp(str, "on-nokey") == 0) {
[...]
+	} else if (strcmp(str, "off") == 0) {
[...]
+	} else if (strcmp(str, "early") == 0) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1193: FILE: init/main.c:206:
+	} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1194: FILE: init/main.c:207:
+		printk(KERN_ERR "kdb flag %s not recognised\n", str);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#1198: FILE: init/main.c:211:
+__setup("kdb=", kdb_setup);

WARNING:DEPRECATED_VARIABLE: Use of EXTRA_CFLAGS is deprecated, please use `ccflags-y instead.
#1237: FILE: kdb/Makefile:9:
+EXTRA_CFLAGS += -O0

EXTRA_{A,C,CPP,LD}FLAGS are deprecated and should be replaced by the new
flags added via commit f77bf01425b1 ("kbuild: introduce ccflags-y,
asflags-y and ldflags-y").

The following conversion scheme maybe used::

  EXTRA_AFLAGS    ->  asflags-y
  EXTRA_CFLAGS    ->  ccflags-y
  EXTRA_CPPFLAGS  ->  cppflags-y
  EXTRA_LDFLAGS   ->  ldflags-y

See:

  1. https://lore.kernel.org/lkml/20070930191054.GA15876@uranus.ravnborg.org/
  2. https://lore.kernel.org/lkml/1313384834-24433-12-git-send-email-lacombar@gmail.com/
  3. https://www.kernel.org/doc/html/latest/kbuild/makefiles.html#compilation-flags

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1283: FILE: kdb/kdb_bp.c:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1376: FILE: kdb/kdb_bp.c:94:
+
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'len > 4'
#1377: FILE: kdb/kdb_bp.c:95:
+			if ((len > 4) || (len == 3))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'len == 3'
#1377: FILE: kdb/kdb_bp.c:95:
+			if ((len > 4) || (len == 3))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1418: FILE: kdb/kdb_bp.c:136:
+	    kdba_verify_rw(bp->bp_addr, bph->bph_length+1)) {
 	                                               ^

WARNING:SPLIT_STRING: quoted string split across lines
#1420: FILE: kdb/kdb_bp.c:138:
+		kdb_printf("Invalid address for breakpoint, "
+			   "ignoring bp command\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:LINE_SPACING: Missing a blank line after declarations
#1432: FILE: kdb/kdb_bp.c:150:
+	int ret = 1;
+	if (!bp->bp_hardtype) {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kdba_installbp', this function's name, in a string
#1471: FILE: kdb/kdb_bp.c:189:
+		kdb_printf("kdba_installbp bp_installed %d\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kdba_installbp', this function's name, in a string
#1479: FILE: kdb/kdb_bp.c:197:
+				kdb_printf("kdba_installbp delayed bp\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kdba_installbp', this function's name, in a string
#1485: FILE: kdb/kdb_bp.c:203:
+				kdb_printf("kdba_installbp failed to set "

WARNING:SPLIT_STRING: quoted string split across lines
#1486: FILE: kdb/kdb_bp.c:204:
+				kdb_printf("kdba_installbp failed to set "
+					   "software breakpoint at 0x%lx\n",

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1495: FILE: kdb/kdb_bp.c:213:
+}
+int

WARNING:LINE_SPACING: Missing a blank line after declarations
#1499: FILE: kdb/kdb_bp.c:217:
+	unsigned char data[size];
+	return kdb_getarea_size(data, addr, size) ||

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kdb_bp_install_global', this function's name, in a string
#1566: FILE: kdb/kdb_bp.c:284:
+			kdb_printf("kdb_bp_install_global bp %d "

WARNING:SPLIT_STRING: quoted string split across lines
#1567: FILE: kdb/kdb_bp.c:285:
+			kdb_printf("kdb_bp_install_global bp %d "
+				   "bp_enabled %d bp_global %d\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kdb_bp_install_local', this function's name, in a string
#1606: FILE: kdb/kdb_bp.c:324:
+			kdb_printf("kdb_bp_install_local bp %d bp_enabled "

WARNING:SPLIT_STRING: quoted string split across lines
#1607: FILE: kdb/kdb_bp.c:325:
+			kdb_printf("kdb_bp_install_local bp %d bp_enabled "
+				   "%d bp_global %d cpu %d bp_cpu %d\n",

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1619: FILE: kdb/kdb_bp.c:337:
+ * ^IRemove global kdb_breakpoints upon entry to the kernel debugger.$

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kdb_bp_remove_global', this function's name, in a string
#1641: FILE: kdb/kdb_bp.c:359:
+			kdb_printf("kdb_bp_remove_global bp %d bp_enabled "

WARNING:SPLIT_STRING: quoted string split across lines
#1642: FILE: kdb/kdb_bp.c:360:
+			kdb_printf("kdb_bp_remove_global bp %d bp_enabled "
+				   "%d bp_global %d\n",

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1650: FILE: kdb/kdb_bp.c:368:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1654: FILE: kdb/kdb_bp.c:372:
+ * ^IRemove local kdb_breakpoints upon entry to the kernel debugger.$

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kdb_bp_remove_local', this function's name, in a string
#1676: FILE: kdb/kdb_bp.c:394:
+			kdb_printf("kdb_bp_remove_local bp %d bp_enabled "

WARNING:SPLIT_STRING: quoted string split across lines
#1677: FILE: kdb/kdb_bp.c:395:
+			kdb_printf("kdb_bp_remove_local bp %d bp_enabled "
+				   "%d bp_global %d cpu %d bp_cpu %d\n",

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1689: FILE: kdb/kdb_bp.c:407:
+ * ^IInternal function to format and print a breakpoint entry.$

WARNING:SPLIT_STRING: quoted string split across lines
#1729: FILE: kdb/kdb_bp.c:447:
+	kdb_printf("\taddr at %016lx, hardtype=%d, forcehw=%d, "
+		   "installed=%d, hard=%p\n",

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1739: FILE: kdb/kdb_bp.c:457:
+ * ^IHandle the bp, and bpa commands.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1754: FILE: kdb/kdb_bp.c:472:
+ * ^Ibp^ISet breakpoint.  Only use hardware assist if necessary.$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1787: FILE: kdb/kdb_bp.c:505:
+	template.bp_global = ((strcmp(argv[0], "bpa") == 0)
+			   || (strcmp(argv[0], "bpha") == 0));

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1789: FILE: kdb/kdb_bp.c:507:
+	template.bp_forcehw = ((strcmp(argv[0], "bph") == 0)
+			   || (strcmp(argv[0], "bpha") == 0));

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1876: FILE: kdb/kdb_bp.c:594:
+ * ^IHandles the 'bc', 'be', and 'bd' commands$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1933: FILE: kdb/kdb_bp.c:651:
+			lowbp = highbp = addr;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1939: FILE: kdb/kdb_bp.c:657:
+					lowbp = highbp = i;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1981: FILE: kdb/kdb_bp.c:699:
+			if (!bp->bp_template.bph_free
+			 && !bp->bp_hardtype) {

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#2129: FILE: kdb/kdb_bp.c:847:
+	kdb_register_repeat("bp", kdb_bp, "[<vaddr>]", "Set/Display breakpoints", 0, KDB_REPEAT_NO_ARGS);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#2130: FILE: kdb/kdb_bp.c:848:
+	kdb_register_repeat("bl", kdb_bp, "[<vaddr>]", "Display breakpoints", 0, KDB_REPEAT_NO_ARGS);

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#2131: FILE: kdb/kdb_bp.c:849:
+	kdb_register_repeat("bpa", kdb_bp, "[<vaddr>]", "Set/Display global breakpoints", 0, KDB_REPEAT_NO_ARGS);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#2132: FILE: kdb/kdb_bp.c:850:
+#if 0 /* temporarily not supported */

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#2133: FILE: kdb/kdb_bp.c:851:
+	kdb_register_repeat("bph", kdb_bp, "[<vaddr>]", "Set hardware breakpoint", 0, KDB_REPEAT_NO_ARGS);

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#2134: FILE: kdb/kdb_bp.c:852:
+	kdb_register_repeat("bpha", kdb_bp, "[<vaddr>]", "Set global hardware breakpoint", 0, KDB_REPEAT_NO_ARGS);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2152: FILE: kdb/kdb_bt.c:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2171: FILE: kdb/kdb_bt.c:20:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#2215: FILE: kdb/kdb_bt.c:64:
+	char buffer[2];
+	if (kdb_getarea(buffer[0], (unsigned long)p) ||

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2216: FILE: kdb/kdb_bt.c:65:
+	    kdb_getarea(buffer[0], (unsigned long)(p+1)-1))
 	                                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2216: FILE: kdb/kdb_bt.c:65:
+	    kdb_getarea(buffer[0], (unsigned long)(p+1)-1))
 	                                               ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#2225: FILE: kdb/kdb_bt.c:74:
+		int old_lvl = console_loglevel;
+		console_loglevel = 15;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2267: FILE: kdb/kdb_bt.c:116:
+						 * proc in bta */

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#2277: FILE: kdb/kdb_bt.c:126:
+		for (cpu = 0; cpu < NR_CPUS; ++cpu) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#2294: FILE: kdb/kdb_bt.c:143:
+		unsigned long pid;
+		if (argc != 1)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2296: FILE: kdb/kdb_bt.c:145:
+		if ((diag = kdbgetularg((char *)argv[1], &pid)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2298: FILE: kdb/kdb_bt.c:147:
+		if ((p = find_task_by_pid_type_ns(PIDTYPE_PID, pid, &init_pid_ns))) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2307: FILE: kdb/kdb_bt.c:156:
+		if ((diag = kdbgetularg((char *)argv[1], &addr)))

WARNING:LINE_SPACING: Missing a blank line after declarations
#2316: FILE: kdb/kdb_bt.c:165:
+		char buf[80];
+		if (argc > 1)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2318: FILE: kdb/kdb_bt.c:167:
+		if (argc == 1 && (diag = kdbgetularg((char *)argv[1], &cpu)))

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#2324: FILE: kdb/kdb_bt.c:173:
+			if (cpu >= NR_CPUS || !krp->seqno || !cpu_online(cpu)) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#2334: FILE: kdb/kdb_bt.c:183:
+		for (cpu = 0, krp = kdb_running_process; cpu < NR_CPUS; ++cpu, ++krp) {

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#2343: FILE: kdb/kdb_bt.c:192:
+		return 0;
+	} else {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2405: FILE: kdb/kdb_io.c:1:
+/*

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2441: FILE: kdb/kdb_io.c:37:
+extern int kdb_grepping_flag;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2442: FILE: kdb/kdb_io.c:38:
+extern char kdb_grep_string[];

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2443: FILE: kdb/kdb_io.c:39:
+extern int kdb_grep_leading;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2444: FILE: kdb/kdb_io.c:40:
+extern int kdb_grep_trailing;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2445: FILE: kdb/kdb_io.c:41:
+extern int kdb_get_kbd_char(void);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2505: FILE: kdb/kdb_io.c:101:
+	char *bufend = buffer+bufsize-2;	/* Reserve space for newline
 	                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2505: FILE: kdb/kdb_io.c:101:
+	char *bufend = buffer+bufsize-2;	/* Reserve space for newline
 	                             ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2506: FILE: kdb/kdb_io.c:102:
+						 * and null byte */

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2519: FILE: kdb/kdb_io.c:115:
+#define ESCAPE_DELAY 2*1000000/ESCAPE_UDELAY	/* 2 seconds worth of udelays */
                       ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2519: FILE: kdb/kdb_io.c:115:
+#define ESCAPE_DELAY 2*1000000/ESCAPE_UDELAY	/* 2 seconds worth of udelays */
                               ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2519: FILE: kdb/kdb_io.c:115:
+#define ESCAPE_DELAY 2*1000000/ESCAPE_UDELAY	/* 2 seconds worth of udelays */

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2531: FILE: kdb/kdb_io.c:127:
+		if (*(buffer+len-1) == '\n')
 		            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2531: FILE: kdb/kdb_io.c:127:
+		if (*(buffer+len-1) == '\n')
 		                ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#2541: FILE: kdb/kdb_io.c:137:
+		int key;
+		for (f = &kdb_poll_funcs[0]; ; ++f) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!f"
#2542: FILE: kdb/kdb_io.c:138:
+			if (*f == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LINE_SPACING: Missing a blank line after declarations
#2596: FILE: kdb/kdb_io.c:192:
+					int mapkey = 0;
+					switch (key) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2598: FILE: kdb/kdb_io.c:194:
+					case 'A': mapkey = 16; break;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2600: FILE: kdb/kdb_io.c:196:
+					case 'B': mapkey = 14; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2602: FILE: kdb/kdb_io.c:198:
+					case 'C': mapkey = 6; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2604: FILE: kdb/kdb_io.c:200:
+					case 'D': mapkey = 2; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2608: FILE: kdb/kdb_io.c:204:
+					case '4': mapkey = -1; break;

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#2611: FILE: kdb/kdb_io.c:207:
+						if (mapkey > 0) {

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

WARNING:LINE_SPACING: Missing a blank line after declarations
#2621: FILE: kdb/kdb_io.c:217:
+					int mapkey = 0;
+					if (key == '~') {

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#2622: FILE: kdb/kdb_io.c:218:
+						switch (escape_data[2]) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2624: FILE: kdb/kdb_io.c:220:
+						case '1': mapkey = 1; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2626: FILE: kdb/kdb_io.c:222:
+						case '3': mapkey = 4; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2628: FILE: kdb/kdb_io.c:224:
+						case '4': mapkey = 5; break;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2649: FILE: kdb/kdb_io.c:245:
+					memcpy(cp-1, tmpbuffer, lastchar - cp);
 					         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2668: FILE: kdb/kdb_io.c:264:
+				memcpy(tmpbuffer, cp+1, lastchar - cp - 1);
 				                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2700: FILE: kdb/kdb_io.c:296:
+			       strlen(kdb_prompt_str) + (lastchar-buffer));
 			                                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2701: FILE: kdb/kdb_io.c:297:
+			*(tmpbuffer+strlen(kdb_prompt_str) +
 			           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2702: FILE: kdb/kdb_io.c:298:
+			  (lastchar-buffer)) = '\0';
 			           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2705: FILE: kdb/kdb_io.c:301:
+			*(lastchar+1) = '\0';
 			          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2715: FILE: kdb/kdb_io.c:311:
+			       strlen(kdb_prompt_str) + (lastchar-buffer));
 			                                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2716: FILE: kdb/kdb_io.c:312:
+			*(tmpbuffer+strlen(kdb_prompt_str) +
 			           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2717: FILE: kdb/kdb_io.c:313:
+			  (lastchar-buffer)) = '\0';
 			           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2720: FILE: kdb/kdb_io.c:316:
+			*(lastchar+1) = '\0';
 			          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2729: FILE: kdb/kdb_io.c:325:
+				memcpy(tmpbuffer, p_tmp, cp-p_tmp);
 				                           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2730: FILE: kdb/kdb_io.c:326:
+				*(tmpbuffer + (cp-p_tmp)) = '\0';
 				                 ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2738: FILE: kdb/kdb_io.c:334:
+				count = kallsyms_symbol_complete(p_tmp,
+					 sizeof(tmpbuffer) -

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#2743: FILE: kdb/kdb_io.c:339:
+						if(count>dtab_count) {

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#2743: FILE: kdb/kdb_io.c:339:
+						if(count>dtab_count) {
 						        ^

ERROR:SPACING: space required before the open parenthesis '('
#2743: FILE: kdb/kdb_io.c:339:
+						if(count>dtab_count) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2744: FILE: kdb/kdb_io.c:340:
+							count=dtab_count;
 							     ^

WARNING:LONG_LINE: line length of 173 exceeds 100 columns
#2745: FILE: kdb/kdb_io.c:341:
+							kdb_printf(" But only first %d symbols will be printed.\nYou can change the environment variable DTABCOUNT.", count);

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#2748: FILE: kdb/kdb_io.c:344:
+						for(i=0;i<count;i++) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2748: FILE: kdb/kdb_io.c:344:
+						for(i=0;i<count;i++) {
 						     ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#2748: FILE: kdb/kdb_io.c:344:
+						for(i=0;i<count;i++) {
 						       ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#2748: FILE: kdb/kdb_io.c:344:
+						for(i=0;i<count;i++) {
 						         ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#2748: FILE: kdb/kdb_io.c:344:
+						for(i=0;i<count;i++) {
 						               ^

ERROR:SPACING: space required before the open parenthesis '('
#2748: FILE: kdb/kdb_io.c:344:
+						for(i=0;i<count;i++) {

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#2749: FILE: kdb/kdb_io.c:345:
+							if(kallsyms_symbol_next(p_tmp, i)<0)

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#2749: FILE: kdb/kdb_io.c:345:
+							if(kallsyms_symbol_next(p_tmp, i)<0)
 							                                 ^

ERROR:SPACING: space required before the open parenthesis '('
#2749: FILE: kdb/kdb_io.c:345:
+							if(kallsyms_symbol_next(p_tmp, i)<0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2751: FILE: kdb/kdb_io.c:347:
+							kdb_printf("%s ",p_tmp);
 							                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2752: FILE: kdb/kdb_io.c:348:
+							*(p_tmp+len)='\0';
 							       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2752: FILE: kdb/kdb_io.c:348:
+							*(p_tmp+len)='\0';
 							            ^

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#2754: FILE: kdb/kdb_io.c:350:
+						if(i>=dtab_count)kdb_printf("...");

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#2754: FILE: kdb/kdb_io.c:350:
+						if(i>=dtab_count)kdb_printf("...");
 						    ^

ERROR:SPACING: space required before the open parenthesis '('
#2754: FILE: kdb/kdb_io.c:350:
+						if(i>=dtab_count)kdb_printf("...");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2754: FILE: kdb/kdb_io.c:350:
+						if(i>=dtab_count)kdb_printf("...");

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#2760: FILE: kdb/kdb_io.c:356:
+				}
+				else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#2760: FILE: kdb/kdb_io.c:356:
+				else {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2763: FILE: kdb/kdb_io.c:359:
+						strncpy(p_tmp+len_tmp,cp, lastchar-cp+1);
 						             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2763: FILE: kdb/kdb_io.c:359:
+						strncpy(p_tmp+len_tmp,cp, lastchar-cp+1);
 						                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2763: FILE: kdb/kdb_io.c:359:
+						strncpy(p_tmp+len_tmp,cp, lastchar-cp+1);
 						                                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2763: FILE: kdb/kdb_io.c:359:
+						strncpy(p_tmp+len_tmp,cp, lastchar-cp+1);
 						                                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2765: FILE: kdb/kdb_io.c:361:
+						strncpy(cp, p_tmp+len, len_tmp-len+1);
 						                 ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2765: FILE: kdb/kdb_io.c:361:
+						strncpy(cp, p_tmp+len, len_tmp-len+1);
 						                              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2765: FILE: kdb/kdb_io.c:361:
+						strncpy(cp, p_tmp+len, len_tmp-len+1);
 						                                  ^

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#2768: FILE: kdb/kdb_io.c:364:
+						cp+=len;
 						  ^

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#2769: FILE: kdb/kdb_io.c:365:
+						lastchar+=len;
 						        ^

ERROR:SPACING: spaces required around that '&&' (ctx:WxV)
#2776: FILE: kdb/kdb_io.c:372:
+			if (key >= 32 &&lastchar < bufend) {
 			              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2779: FILE: kdb/kdb_io.c:375:
+					memcpy(cp+1, tmpbuffer, lastchar - cp);
 					         ^

WARNING:LONG_LINE_COMMENT: line length of 105 exceeds 100 columns
#2792: FILE: kdb/kdb_io.c:388:
+					/* Hide printed characters if we think that kgdb is connecting */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LINE_SPACING: Missing a blank line after declarations
#2795: FILE: kdb/kdb_io.c:391:
+						int len = strlen(buffer);
+						if (strncmp(buffer,"$?#3f",len) != 0 &&

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#2795: FILE: kdb/kdb_io.c:391:
+						if (strncmp(buffer,"$?#3f",len) != 0 &&

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2795: FILE: kdb/kdb_io.c:391:
+						if (strncmp(buffer,"$?#3f",len) != 0 &&
 						                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2795: FILE: kdb/kdb_io.c:391:
+						if (strncmp(buffer,"$?#3f",len) != 0 &&
 						                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2796: FILE: kdb/kdb_io.c:392:
+						    strncmp(buffer,"$qSupported#37",len) != 0 &&
 						                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2796: FILE: kdb/kdb_io.c:392:
+						    strncmp(buffer,"$qSupported#37",len) != 0 &&
 						                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2797: FILE: kdb/kdb_io.c:393:
+						    strncmp(buffer,"+$qSupported#37",len) != 0) {
 						                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2797: FILE: kdb/kdb_io.c:393:
+						    strncmp(buffer,"+$qSupported#37",len) != 0) {
 						                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2799: FILE: kdb/kdb_io.c:395:
+							kdb_printf("%s",buffer);
 							               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2807: FILE: kdb/kdb_io.c:403:
+					strcpy(buffer,"kgdb");
 					             ^

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#2811: FILE: kdb/kdb_io.c:407:
+				if (lastchar - buffer >= 14 && strcmp(lastchar - 14, "$qSupported#37") == 0) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2812: FILE: kdb/kdb_io.c:408:
+					strcpy(buffer,"kgdb");
 					             ^

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#2845: FILE: kdb/kdb_io.c:441:
+	if(prompt && kdb_prompt_str!=prompt)
 	                           ^

ERROR:SPACING: space required before the open parenthesis '('
#2845: FILE: kdb/kdb_io.c:441:
+	if(prompt && kdb_prompt_str!=prompt)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2870: FILE: kdb/kdb_io.c:466:
+#define FLUSH_DELAY 500000/FLUSH_UDELAY	/* 0.5 seconds worth of udelays */
                           ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2870: FILE: kdb/kdb_io.c:466:
+#define FLUSH_DELAY 500000/FLUSH_UDELAY	/* 0.5 seconds worth of udelays */

WARNING:LINE_SPACING: Missing a blank line after declarations
#2877: FILE: kdb/kdb_io.c:473:
+	int flush_delay = 1;
+	while (flush_delay--) {

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#2914: FILE: kdb/kdb_io.c:510:
+static int  suspend_grep = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2929: FILE: kdb/kdb_io.c:525:
+	len1 = strlen(searched)-1;
 	                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2939: FILE: kdb/kdb_io.c:535:
+		if (!strncmp(searched+len1-len2, searchfor, len2))
 		                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2939: FILE: kdb/kdb_io.c:535:
+		if (!strncmp(searched+len1-len2, searchfor, len2))
 		                          ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#2967: FILE: kdb/kdb_io.c:563:
+	static DEFINE_SPINLOCK(kdb_printf_lock);
+	unsigned long uninitialized_var(flags);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2967: FILE: kdb/kdb_io.c:563:
+	unsigned long uninitialized_var(flags);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'flags' should also have an identifier name
#2967: FILE: kdb/kdb_io.c:563:
+	unsigned long uninitialized_var(flags);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#3010: FILE: kdb/kdb_io.c:606:
+	if (!suspend_grep) {
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3046: FILE: kdb/kdb_io.c:642:
+				/* no newline; don't search/write the buffer
+				   until one is there */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3046: FILE: kdb/kdb_io.c:642:
+				   until one is there */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3057: FILE: kdb/kdb_io.c:653:
+^I^I^Icp++;^I ^I     /* to byte after the newline */$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!c"
#3094: FILE: kdb/kdb_io.c:690:
+	if (c == NULL)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#3096: FILE: kdb/kdb_io.c:692:
+	else
[...]
+	if (udbg_write)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#3102: FILE: kdb/kdb_io.c:698:
+	else
[...]
+	while (c) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3113: FILE: kdb/kdb_io.c:709:
+		printk(KERN_INFO "%s", kdb_buffer);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!moreprompt"
#3136: FILE: kdb/kdb_io.c:732:
+		if (moreprompt == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!c"
#3150: FILE: kdb/kdb_io.c:746:
+		if (c == NULL)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#3152: FILE: kdb/kdb_io.c:748:
+		else
[...]
+		if (udbg_write)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#3158: FILE: kdb/kdb_io.c:754:
+		else
[...]
+		while (c) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3168: FILE: kdb/kdb_io.c:764:
+			printk("%s", moreprompt);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3171: FILE: kdb/kdb_io.c:767:
+				    * immediately after getting one key. */

WARNING:LONG_LINE_STRING: line length of 102 exceeds 100 columns
#3189: FILE: kdb/kdb_io.c:785:
+			kdb_printf("\nOnly 'q' or 'Q' are processed at more prompt, input ignored\n");

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LINE_SPACING: Missing a blank line after declarations
#3263: FILE: kdb/kdb_io.c:859:
+			char *p = c->name + 3;
+			while (isdigit(*p))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!kdbcons"
#3271: FILE: kdb/kdb_io.c:867:
+	if (kdbcons == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3272: FILE: kdb/kdb_io.c:868:
+		printk(KERN_ERR "kdb: Initialization failed - no console.  kdb is disabled.\n");

WARNING:RETURN_VOID: void function return statements are not generally useful
#3280: FILE: kdb/kdb_io.c:876:
+	return;
+}

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3301: FILE: kdb/kdbmain.c:1:
+/*

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#3340: FILE: kdb/kdbmain.c:40:
+#if defined(CONFIG_LKCD_DUMP) || defined(CONFIG_LKCD_DUMP_MODULE)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#3382: FILE: kdb/kdbmain.c:82:
+static volatile int kdb_new_cpu;		/* Which cpu to switch to */

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#3412: FILE: kdb/kdbmain.c:112:
+kdb_jmp_buf *kdbjmpbuf;
             ^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#3421: FILE: kdb/kdbmain.c:121:
+typedef struct _kdbmsg {

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#3432: FILE: kdb/kdbmain.c:132:
+	KDBMSG(BADWIDTH, "Illegal value for BYTESPERWORD use 1, 2, 4 or 8, 8 is only allowed on 64 bit systems"),

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#3456: FILE: kdb/kdbmain.c:156:
+};
+#undef KDBMSG

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3460: FILE: kdb/kdbmain.c:160:
+
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3473: FILE: kdb/kdbmain.c:173:
+ "PROMPT=[%d]kdb> ",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3474: FILE: kdb/kdbmain.c:174:
+ "MOREPROMPT=[%d]more> ",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3476: FILE: kdb/kdbmain.c:176:
+ "PROMPT=kdb> ",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3477: FILE: kdb/kdbmain.c:177:
+ "MOREPROMPT=more> ",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3479: FILE: kdb/kdbmain.c:179:
+ "RADIX=16",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3480: FILE: kdb/kdbmain.c:180:
+ "LINES=24",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3481: FILE: kdb/kdbmain.c:181:
+ "COLUMNS=80",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3482: FILE: kdb/kdbmain.c:182:
+ "MDCOUNT=8",^I^I^I/* lines of md output */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3483: FILE: kdb/kdbmain.c:183:
+ "BTARGS=9",^I^I^I/* 9 possible args in bt */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3484: FILE: kdb/kdbmain.c:184:
+ KDB_PLATFORM_ENV,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3485: FILE: kdb/kdbmain.c:185:
+ "DTABCOUNT=30",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3486: FILE: kdb/kdbmain.c:186:
+ "NOSECT=1",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3487: FILE: kdb/kdbmain.c:187:
+ (char *)0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3488: FILE: kdb/kdbmain.c:188:
+ (char *)0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3489: FILE: kdb/kdbmain.c:189:
+ (char *)0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3490: FILE: kdb/kdbmain.c:190:
+ (char *)0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3491: FILE: kdb/kdbmain.c:191:
+ (char *)0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3492: FILE: kdb/kdbmain.c:192:
+ (char *)0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3493: FILE: kdb/kdbmain.c:193:
+ (char *)0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3494: FILE: kdb/kdbmain.c:194:
+ (char *)0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3495: FILE: kdb/kdbmain.c:195:
+ (char *)0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3496: FILE: kdb/kdbmain.c:196:
+ (char *)0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3497: FILE: kdb/kdbmain.c:197:
+ (char *)0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3498: FILE: kdb/kdbmain.c:198:
+ (char *)0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3499: FILE: kdb/kdbmain.c:199:
+ (char *)0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3500: FILE: kdb/kdbmain.c:200:
+ (char *)0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3501: FILE: kdb/kdbmain.c:201:
+ (char *)0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3502: FILE: kdb/kdbmain.c:202:
+ (char *)0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3503: FILE: kdb/kdbmain.c:203:
+ (char *)0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3504: FILE: kdb/kdbmain.c:204:
+ (char *)0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3505: FILE: kdb/kdbmain.c:205:
+ (char *)0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3506: FILE: kdb/kdbmain.c:206:
+ (char *)0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3507: FILE: kdb/kdbmain.c:207:
+ (char *)0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3508: FILE: kdb/kdbmain.c:208:
+ (char *)0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3509: FILE: kdb/kdbmain.c:209:
+ (char *)0,$

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#3515: FILE: kdb/kdbmain.c:215:
+int kdb_debuginfo_print(int argc, const char **argv);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#3516: FILE: kdb/kdbmain.c:216:
+int kdb_pxhelp(int argc, const char **argv);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#3517: FILE: kdb/kdbmain.c:217:
+int kdb_walkhelp(int argc, const char **argv);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#3518: FILE: kdb/kdbmain.c:218:
+int kdb_walk(int argc, const char **argv);

WARNING:STATIC_CONST_CHAR_ARRAY: const array should probably be static const
#3531: FILE: kdb/kdbmain.c:231:
+const char kdb_serial_str[] = "\eKDB";

WARNING:LINE_SPACING: Missing a blank line after declarations
#3540: FILE: kdb/kdbmain.c:240:
+	struct kdb_running_process *krp = kdb_running_process + cpu;
+	if ((task_thread_info(p)->flags & _TIF_MCA_INIT) && krp->p)

ERROR:SPACING: space required before the open parenthesis '('
#3570: FILE: kdb/kdbmain.c:270:
+	for(i = 0; i < __nenv; i++) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3577: FILE: kdb/kdbmain.c:277:
+		if ((strncmp(match, e, matchlen) == 0)
+		 && ((e[matchlen] == '\0')

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3578: FILE: kdb/kdbmain.c:278:
+		 && ((e[matchlen] == '\0')
+		   || (e[matchlen] == '='))) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#3580: FILE: kdb/kdbmain.c:280:
+			char *cp = strchr(e, '=');
+			return (cp ? ++cp : "");

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#3580: FILE: kdb/kdbmain.c:280:
+			return (cp ? ++cp : "");

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

WARNING:TYPO_SPELLING: 'represntation' may be misspelled - perhaps 'representation'?
#3594: FILE: kdb/kdbmain.c:294:
+ *	*value  the unsigned long represntation of the env variable 'match'
   	                          ^^^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'represntation' may be misspelled - perhaps 'representation'?
#3631: FILE: kdb/kdbmain.c:331:
+ *	*value  the unsigned long represntation of the env variable 'match'
   	                          ^^^^^^^^^^^^^

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#3650: FILE: kdb/kdbmain.c:350:
+	*value = simple_strtoul(ep, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#3672: FILE: kdb/kdbmain.c:372:
+int
+kdbgetintenv(const char *match, int *value) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#3679: FILE: kdb/kdbmain.c:379:
+		*value = (int) val;

WARNING:TYPO_SPELLING: 'represntation' may be misspelled - perhaps 'representation'?
#3692: FILE: kdb/kdbmain.c:392:
+ *	*value  the unsigned long represntation of arg.
   	                          ^^^^^^^^^^^^^

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#3706: FILE: kdb/kdbmain.c:406:
+	val = simple_strtoul(arg, &endp, 0);

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#3713: FILE: kdb/kdbmain.c:413:
+		val = simple_strtoul(arg, &endp, 16);

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#3769: FILE: kdb/kdbmain.c:469:
+		debugflags = simple_strtoul(argv[2], &cp, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3772: FILE: kdb/kdbmain.c:472:
+			kdb_printf("kdb: illegal debug flags '%s'\n",
+				    argv[2]);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3794: FILE: kdb/kdbmain.c:494:
+	ep[varlen+vallen+1] = '\0';
 	         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3794: FILE: kdb/kdbmain.c:494:
+	ep[varlen+vallen+1] = '\0';
 	                ^

ERROR:SPACING: space required before the open parenthesis '('
#3796: FILE: kdb/kdbmain.c:496:
+	for(i = 0; i < __nenv; i++) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3798: FILE: kdb/kdbmain.c:498:
+		if (__env[i]
+		 && ((strncmp(__env[i], argv[1], varlen) == 0)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3799: FILE: kdb/kdbmain.c:499:
+		 && ((strncmp(__env[i], argv[1], varlen) == 0)
+		   && ((__env[i][varlen] == '\0')

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3800: FILE: kdb/kdbmain.c:500:
+		   && ((__env[i][varlen] == '\0')
+		    || (__env[i][varlen] == '=')))) {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3809: FILE: kdb/kdbmain.c:509:
+	for(i = 0; i < __nenv-1; i++) {
 	                     ^

ERROR:SPACING: space required before the open parenthesis '('
#3809: FILE: kdb/kdbmain.c:509:
+	for(i = 0; i < __nenv-1; i++) {

WARNING:SPLIT_STRING: quoted string split across lines
#3824: FILE: kdb/kdbmain.c:524:
+		kdb_printf("No current kdb registers."
+			   "  You may need to select another task\n");

WARNING:TYPO_SPELLING: 'hexidecimal' may be misspelled - perhaps 'hexadecimal'?
#3838: FILE: kdb/kdbmain.c:538:
+ *	hexidecimal), a symbol name, a register name (preceeded
   	^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'preceeded' may be misspelled - perhaps 'preceded'?
#3838: FILE: kdb/kdbmain.c:538:
+ *	hexidecimal), a symbol name, a register name (preceeded
   	                                              ^^^^^^^^^

WARNING:TYPO_SPELLING: 'preceeded' may be misspelled - perhaps 'preceded'?
#3840: FILE: kdb/kdbmain.c:540:
+ *	value (preceeded by a dollar sign) or a simple arithmetic
   	       ^^^^^^^^^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#3900: FILE: kdb/kdbmain.c:600:
+	if ((cp = strpbrk(symname, "+-")) != NULL) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#3910: FILE: kdb/kdbmain.c:610:
+		if ((diag = kdb_check_regs()))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3941: FILE: kdb/kdbmain.c:641:
+	if ((*nextarg > argc)
+	 && (symbol == '\0'))

CHECK:BRACES: braces {} should be used on all arms of this statement
#3948: FILE: kdb/kdbmain.c:648:
+	if (symbol == '\0') {
[...]
+	} else
[...]

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3950: FILE: kdb/kdbmain.c:650:
+		if ((argv[*nextarg][0] != '+')
+		 && (argv[*nextarg][0] != '-')) {

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#3955: FILE: kdb/kdbmain.c:655:
+			return 0;
+		} else {

CHECK:BRACES: Unbalanced braces around else statement
#3959: FILE: kdb/kdbmain.c:659:
+	} else

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3966: FILE: kdb/kdbmain.c:666:
+	if ((*nextarg > argc)
+	 && (symbol == '\0')) {

ERROR:SPACING: space required before the open parenthesis '('
#4001: FILE: kdb/kdbmain.c:701:
+	for(i = 0; i < __nkdb_err; i++) {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#4040: FILE: kdb/kdbmain.c:740:
+};
+static struct defcmd_set *defcmd_set;

WARNING:LINE_SPACING: Missing a blank line after declarations
#4052: FILE: kdb/kdbmain.c:752:
+	char **save_command = s->command;
+	if (strcmp(argv0, "endefcmd") == 0) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around s->command
#4063: FILE: kdb/kdbmain.c:763:
+	s->command = kmalloc((s->count + 1) * sizeof(*(s->command)), GFP_KDB);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around s->command
#4069: FILE: kdb/kdbmain.c:769:
+	memcpy(s->command, save_command, s->count * sizeof(*(s->command)));

WARNING:LINE_SPACING: Missing a blank line after declarations
#4079: FILE: kdb/kdbmain.c:779:
+	struct defcmd_set *save_defcmd_set = defcmd_set, *s;
+	if (defcmd_in_progress) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#4085: FILE: kdb/kdbmain.c:785:
+		int i;
+		for (s = defcmd_set; s < defcmd_set + defcmd_set_count; ++s) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4110: FILE: kdb/kdbmain.c:810:
+		strcpy(s->usage, s->usage+1);
 		                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4111: FILE: kdb/kdbmain.c:811:
+		s->usage[strlen(s->usage)-1] = '\0';
 		                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4114: FILE: kdb/kdbmain.c:814:
+		strcpy(s->help, s->help+1);
 		                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4115: FILE: kdb/kdbmain.c:815:
+		s->help[strlen(s->help)-1] = '\0';
 		                       ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#4144: FILE: kdb/kdbmain.c:844:
+	struct defcmd_set *s;
+	if (argc != 0)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kdb_exec_defcmd', this function's name, in a string
#4151: FILE: kdb/kdbmain.c:851:
+		kdb_printf("kdb_exec_defcmd: could not find commands for %s\n", argv[0]);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4156: FILE: kdb/kdbmain.c:856:
+		 * this point */

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#4159: FILE: kdb/kdbmain.c:859:
+		if ((ret = kdb_parse(s->command[i])))

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4168: FILE: kdb/kdbmain.c:868:
+					 * size == 256 */

ERROR:SPACING: space required after that ',' (ctx:VxV)
#4190: FILE: kdb/kdbmain.c:890:
+	if (strncmp(cp, "grep ",5)) {
 	                       ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#4208: FILE: kdb/kdbmain.c:908:
+		/* allow it be "x y z" by removing the "'s - there must
+		   be two of them */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4208: FILE: kdb/kdbmain.c:908:
+		   be two of them */

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4224: FILE: kdb/kdbmain.c:924:
+	if (*(cp+len-1) == '$') {
 	        ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4224: FILE: kdb/kdbmain.c:924:
+	if (*(cp+len-1) == '$') {
 	            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4226: FILE: kdb/kdbmain.c:926:
+		*(cp+len-1) = '\0';
 		    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4226: FILE: kdb/kdbmain.c:926:
+		*(cp+len-1) = '\0';
 		        ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#4229: FILE: kdb/kdbmain.c:929:
+	if (!len) return;

WARNING:RETURN_VOID: void function return statements are not generally useful
#4237: FILE: kdb/kdbmain.c:937:
+	return;
+}

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4256: FILE: kdb/kdbmain.c:956:
+ * ^INone.$

WARNING:TYPO_SPELLING: 'delimeter' may be misspelled - perhaps 'delimiter'?
#4261: FILE: kdb/kdbmain.c:961:
+ *	is considered a token delimeter (but special consideration
   	                      ^^^^^^^^^

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#4277: FILE: kdb/kdbmain.c:977:
+	static int argc = 0;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4278: FILE: kdb/kdbmain.c:978:
+	static char cbuf[CMD_BUFLEN+2];
 	                           ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#4288: FILE: kdb/kdbmain.c:988:
+	kdb_grepping_flag = check_grep = 0;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#4302: FILE: kdb/kdbmain.c:1002:
+			while (isspace(*cp)) cp++;

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#4311: FILE: kdb/kdbmain.c:1011:
+				kdb_printf("kdb_parse: command buffer overflow, command ignored\n%s\n", cmdstr);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kdb_parse', this function's name, in a string
#4311: FILE: kdb/kdbmain.c:1011:
+				kdb_printf("kdb_parse: command buffer overflow, command ignored\n%s\n", cmdstr);

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#4315: FILE: kdb/kdbmain.c:1015:
+				kdb_printf("kdb_parse: too many arguments, command ignored\n%s\n", cmdstr);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kdb_parse', this function's name, in a string
#4315: FILE: kdb/kdbmain.c:1015:
+				kdb_printf("kdb_parse: too many arguments, command ignored\n%s\n", cmdstr);

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#4335: FILE: kdb/kdbmain.c:1035:
+				if (*cp == quoted) {
[...]
+				} else if (*cp == '\'' || *cp == '"') {
[...]

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#4340: FILE: kdb/kdbmain.c:1040:
+				if ((*cpp = *cp++) == '=' && !quoted)

WARNING:LINE_SPACING: Missing a blank line after declarations
#4353: FILE: kdb/kdbmain.c:1053:
+		int result = kdb_defcmd2(cmdstr, argv[0]);
+		if (!defcmd_in_progress) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around argv[0]
#4355: FILE: kdb/kdbmain.c:1055:
+			*(argv[0]) = '\0';

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#4364: FILE: kdb/kdbmain.c:1064:
+	for(tp=kdb_commands, i=0; i < kdb_max_commands; i++,tp++) {
 	      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#4364: FILE: kdb/kdbmain.c:1064:
+	for(tp=kdb_commands, i=0; i < kdb_max_commands; i++,tp++) {
 	                      ^

ERROR:SPACING: space required after that ',' (ctx:OxV)
#4364: FILE: kdb/kdbmain.c:1064:
+	for(tp=kdb_commands, i=0; i < kdb_max_commands; i++,tp++) {
 	                                                   ^

ERROR:SPACING: space required before the open parenthesis '('
#4364: FILE: kdb/kdbmain.c:1064:
+	for(tp=kdb_commands, i=0; i < kdb_max_commands; i++,tp++) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#4372: FILE: kdb/kdbmain.c:1072:
+			if (tp->cmd_minlen
+			 && (strlen(argv[0]) <= tp->cmd_minlen)) {

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#4380: FILE: kdb/kdbmain.c:1080:
+			if (strcmp(argv[0], tp->cmd_name)==0) {
 			                                 ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#4380: FILE: kdb/kdbmain.c:1080:
+			if (strcmp(argv[0], tp->cmd_name)==0) {
+				break;
+			}

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#4392: FILE: kdb/kdbmain.c:1092:
+		for(tp=kdb_commands, i=0; i < kdb_max_commands; i++,tp++) {
 		      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#4392: FILE: kdb/kdbmain.c:1092:
+		for(tp=kdb_commands, i=0; i < kdb_max_commands; i++,tp++) {
 		                      ^

ERROR:SPACING: space required after that ',' (ctx:OxV)
#4392: FILE: kdb/kdbmain.c:1092:
+		for(tp=kdb_commands, i=0; i < kdb_max_commands; i++,tp++) {
 		                                                   ^

ERROR:SPACING: space required before the open parenthesis '('
#4392: FILE: kdb/kdbmain.c:1092:
+		for(tp=kdb_commands, i=0; i < kdb_max_commands; i++,tp++) {

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#4396: FILE: kdb/kdbmain.c:1096:
+					    strlen(tp->cmd_name))==0) {
 					                         ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#4405: FILE: kdb/kdbmain.c:1105:
+		int result;
+		KDB_STATE_SET(CMD);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4406: FILE: kdb/kdbmain.c:1106:
+		result = (*tp->cmd_func)(argc-1,
 		                             ^

ERROR:POINTER_LOCATION: "(foo**)" should be "(foo **)"
#4407: FILE: kdb/kdbmain.c:1107:
+				       (const char**)argv);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around argv[0]
#4415: FILE: kdb/kdbmain.c:1115:
+				*(argv[0]) = '\0';

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around argv[1]
#4420: FILE: kdb/kdbmain.c:1120:
+				*(argv[1]) = '\0';

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4453: FILE: kdb/kdbmain.c:1153:
+
+

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#4461: FILE: kdb/kdbmain.c:1161:
+	if (cmd_head == cmd_tail) return 0;

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#4463: FILE: kdb/kdbmain.c:1163:
+	switch(*cmd) {
+		case CTRL_P:
[...]
+		case CTRL_N:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: space required before the open parenthesis '('
#4463: FILE: kdb/kdbmain.c:1163:
+	switch(*cmd) {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4466: FILE: kdb/kdbmain.c:1166:
+				cmdptr = (cmdptr-1) % KDB_CMD_HISTORY_COUNT;
 				                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4471: FILE: kdb/kdbmain.c:1171:
+				cmdptr = (cmdptr+1) % KDB_CMD_HISTORY_COUNT;
 				                ^

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#4496: FILE: kdb/kdbmain.c:1196:
+#if defined(CONFIG_LKCD_DUMP) || defined(CONFIG_LKCD_DUMP_MODULE)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kdb_reboot', this function's name, in a string
#4526: FILE: kdb/kdbmain.c:1226:
+	kdb_printf("Hmm, kdb_reboot did not reboot, spinning here\n");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#4527: FILE: kdb/kdbmain.c:1227:
+	while (1) {};

WARNING:BRACES: braces {} are not necessary for single statement blocks
#4527: FILE: kdb/kdbmain.c:1227:
+	while (1) {};

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#4550: FILE: kdb/kdbmain.c:1250:
+		/* If the call above returned then something
+		   didn't work */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4550: FILE: kdb/kdbmain.c:1250:
+		   didn't work */

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kdb_kdump_check', this function's name, in a string
#4551: FILE: kdb/kdbmain.c:1251:
+		kdb_printf("kdb_kdump_check: crash_kexec failed!\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4557: FILE: kdb/kdbmain.c:1257:
+
+

WARNING:STATIC_CONST_CHAR_ARRAY: char * array declaration might be better as static const
#4582: FILE: kdb/kdbmain.c:1282:
+	const char *cpu_argv[] = {NULL, cpu_id, NULL};

CHECK:BRACES: braces {} should be used on all arms of this statement
#4587: FILE: kdb/kdbmain.c:1287:
+	if (smp_processor_id() != kdb_initial_cpu) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#4595: FILE: kdb/kdbmain.c:1295:
+	} else

ERROR:CODE_INDENT: code indent should use tabs where possible
#4616: FILE: kdb/kdbmain.c:1316:
+            const char *type,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4616: FILE: kdb/kdbmain.c:1316:
+kdba_dumpregs(struct pt_regs *regs,
+            const char *type,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4616: FILE: kdb/kdbmain.c:1316:
+            const char *type,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#4617: FILE: kdb/kdbmain.c:1317:
+            const char *extra)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4617: FILE: kdb/kdbmain.c:1317:
+            const char *extra)$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4622: FILE: kdb/kdbmain.c:1322:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#4630: FILE: kdb/kdbmain.c:1330:
+		struct kdb_running_process *krp = kdb_running_process + kdb_process_cpu(p);
+		kdb_current_regs = krp->regs;

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kdb_local', this function's name, in a string
#4684: FILE: kdb/kdbmain.c:1384:
+	KDB_DEBUG_STATE("kdb_local 1", reason);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#4686: FILE: kdb/kdbmain.c:1386:
+	if (reason == KDB_REASON_ENTER
+	    && KDB_FLAG(RECOVERY)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#4687: FILE: kdb/kdbmain.c:1387:
+	    && KDB_FLAG(RECOVERY)
+	    && !KDB_FLAG(CATASTROPHIC)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#4689: FILE: kdb/kdbmain.c:1389:
+		int recovery_pause = 0;
+		kdbgetintenv("RECOVERY_PAUSE", &recovery_pause);

WARNING:SPLIT_STRING: quoted string split across lines
#4694: FILE: kdb/kdbmain.c:1394:
+			kdb_printf("%s: Recoverable error detected but"
+				   " RECOVERY_PAUSE is set, staying in KDB\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#4695: FILE: kdb/kdbmain.c:1395:
+				   __FUNCTION__);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kdb_local', this function's name, in a string
#4698: FILE: kdb/kdbmain.c:1398:
+	KDB_DEBUG_STATE("kdb_local 2", reason);

ERROR:SPACING: space required before the open parenthesis '('
#4718: FILE: kdb/kdbmain.c:1418:
+		switch(db_result) {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kdb_local', this function's name, in a string
#4730: FILE: kdb/kdbmain.c:1430:
+			KDB_DEBUG_STATE("kdb_local 3", reason);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kdb_local', this function's name, in a string
#4737: FILE: kdb/kdbmain.c:1437:
+			KDB_DEBUG_STATE("kdb_local 4", reason);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#4745: FILE: kdb/kdbmain.c:1445:
+
+	}

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#4748: FILE: kdb/kdbmain.c:1448:
+		if (KDB_STATE(KEYBOARD))
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#4750: FILE: kdb/kdbmain.c:1450:
+		else {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kdb_local', this function's name, in a string
#4763: FILE: kdb/kdbmain.c:1463:
+			KDB_DEBUG_STATE("kdb_local 5", reason);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4774: FILE: kdb/kdbmain.c:1474:
+		kdb_printf("due to NonMaskable Interrupt @ " kdb_machreg_fmt "\n",
+			  kdba_getpc(regs));

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#4780: FILE: kdb/kdbmain.c:1480:
+				   reason == KDB_REASON_BREAK ? "Breakpoint" : "SS trap", kdba_getpc(regs));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4780: FILE: kdb/kdbmain.c:1480:
+		kdb_printf("due to %s @ " kdb_machreg_fmt "\n",
+				   reason == KDB_REASON_BREAK ? "Breakpoint" : "SS trap", kdba_getpc(regs));

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kdb_local', this function's name, in a string
#4787: FILE: kdb/kdbmain.c:1487:
+			KDB_DEBUG_STATE("kdb_local 6", reason);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kdb_local', this function's name, in a string
#4796: FILE: kdb/kdbmain.c:1496:
+		KDB_DEBUG_STATE("kdb_local 7", reason);

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#4801: FILE: kdb/kdbmain.c:1501:
+		return KDB_CMD_GO;	/* Silent entry, silent exit */
+		break;

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kdb_local', this function's name, in a string
#4804: FILE: kdb/kdbmain.c:1504:
+		KDB_DEBUG_STATE("kdb_local 8", reason);

CHECK:BRACES: braces {} should be used on all arms of this statement
#4827: FILE: kdb/kdbmain.c:1527:
+			if (kdba_setjmp(&kdbjmpbuf[smp_processor_id()])) {
[...]
+			else
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#4831: FILE: kdb/kdbmain.c:1531:
+			}
+			else

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#4838: FILE: kdb/kdbmain.c:1538:
+		*(cmd_hist[cmd_head])='\0';
 		                     ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around cmd_hist[cmd_head]
#4838: FILE: kdb/kdbmain.c:1538:
+		*(cmd_hist[cmd_head])='\0';

WARNING:STATIC_CONST_CHAR_ARRAY: char * array declaration might be better as static const
#4846: FILE: kdb/kdbmain.c:1546:
+			const char *setargs[] = { "set", "LOGGING", "1" };

WARNING:LINE_SPACING: Missing a blank line after declarations
#4847: FILE: kdb/kdbmain.c:1547:
+			const char *setargs[] = { "set", "LOGGING", "1" };
+			kdb_set(2, setargs);

CHECK:BRACES: braces {} should be used on all arms of this statement
#4868: FILE: kdb/kdbmain.c:1568:
+			if (*cmdbuf < 32) {
[...]
+			else
[...]

ERROR:SPACING: space required before the open parenthesis '('
#4869: FILE: kdb/kdbmain.c:1569:
+				if(cmdptr == cmd_head) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4871: FILE: kdb/kdbmain.c:1571:
+					*(cmd_hist[cmd_head]+strlen(cmd_hist[cmd_head])-1) = '\0';
 					                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4871: FILE: kdb/kdbmain.c:1571:
+					*(cmd_hist[cmd_head]+strlen(cmd_hist[cmd_head])-1) = '\0';
 					                                               ^

ERROR:SPACING: space required before the open parenthesis '('
#4873: FILE: kdb/kdbmain.c:1573:
+				if(!handle_ctrl_cmd(cmdbuf))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4874: FILE: kdb/kdbmain.c:1574:
+					*(cmd_cur+strlen(cmd_cur)-1) = '\0';
 					         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4874: FILE: kdb/kdbmain.c:1574:
+					*(cmd_cur+strlen(cmd_cur)-1) = '\0';
 					                         ^

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#4878: FILE: kdb/kdbmain.c:1578:
+			}
+			else

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4881: FILE: kdb/kdbmain.c:1581:
+			cmd_head = (cmd_head+1) % KDB_CMD_HISTORY_COUNT;
 			                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4882: FILE: kdb/kdbmain.c:1582:
+			if (cmd_head == cmd_tail) cmd_tail = (cmd_tail+1) % KDB_CMD_HISTORY_COUNT;
 			                                              ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#4882: FILE: kdb/kdbmain.c:1582:
+			if (cmd_head == cmd_tail) cmd_tail = (cmd_tail+1) % KDB_CMD_HISTORY_COUNT;

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#4884: FILE: kdb/kdbmain.c:1584:
+
+		}

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#4893: FILE: kdb/kdbmain.c:1593:
+		if (diag == KDB_CMD_GO
+		 || diag == KDB_CMD_CPU

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#4894: FILE: kdb/kdbmain.c:1594:
+		 || diag == KDB_CMD_CPU
+		 || diag == KDB_CMD_SS

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#4895: FILE: kdb/kdbmain.c:1595:
+		 || diag == KDB_CMD_SS
+		 || diag == KDB_CMD_SSB

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#4896: FILE: kdb/kdbmain.c:1596:
+		 || diag == KDB_CMD_SSB
+		 || diag == KDB_CMD_KGDB)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kdb_local', this function's name, in a string
#4906: FILE: kdb/kdbmain.c:1606:
+	KDB_DEBUG_STATE("kdb_local 9", diag);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4910: FILE: kdb/kdbmain.c:1610:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4930: FILE: kdb/kdbmain.c:1630:
+	kdb_printf("state: %s cpu %d value %d initial %d state %x\n",
+		text, smp_processor_id(), value, kdb_initial_cpu, kdb_state[smp_processor_id()]);

WARNING:TYPO_SPELLING: 'acording' may be misspelled - perhaps 'according'?
#4968: FILE: kdb/kdbmain.c:1668:
+ *			acording to kdb state.
   			^^^^^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kdb_main_loop', this function's name, in a string
#4993: FILE: kdb/kdbmain.c:1693:
+		KDB_DEBUG_STATE("kdb_main_loop 1", reason);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#4999: FILE: kdb/kdbmain.c:1699:
+			if (!KDB_STATE(KDB)) {
+				KDB_STATE_SET(KDB);
+			}

WARNING:LINE_SPACING: Missing a blank line after declarations
#5006: FILE: kdb/kdbmain.c:1706:
+				struct pt_regs r;
+				if (regs == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!regs"
#5006: FILE: kdb/kdbmain.c:1706:
+				if (regs == NULL)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kdb_main_loop', this function's name, in a string
#5016: FILE: kdb/kdbmain.c:1716:
+		KDB_DEBUG_STATE("kdb_main_loop 2", reason);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kdb_main_loop', this function's name, in a string
#5024: FILE: kdb/kdbmain.c:1724:
+		KDB_DEBUG_STATE("kdb_main_loop 3", result);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#5044: FILE: kdb/kdbmain.c:1744:
+
+		}

WARNING:LONG_LINE_STRING: line length of 103 exceeds 100 columns
#5048: FILE: kdb/kdbmain.c:1748:
+				kdb_printf("Entering please attach debugger or use $D#44+ or $3#33\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kdb_main_loop', this function's name, in a string
#5054: FILE: kdb/kdbmain.c:1754:
+		KDB_DEBUG_STATE("kdb_main_loop 4", reason);

WARNING:LINE_SPACING: Missing a blank line after declarations
#5086: FILE: kdb/kdbmain.c:1786:
+	unsigned char c;
+	while (count--) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#5139: FILE: kdb/kdbmain.c:1839:
+		if (phys) {
[...]
+		} else if (kdb_getword(&word, addr, bytesperword))
[...]

ERROR:SPACING: space required after that ';' (ctx:VxV)
#5174: FILE: kdb/kdbmain.c:1874:
+#define printable_char(c) ({unsigned char __c = c; isascii(__c) && isprint(__c) ? __c : '.';})
                                                                                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#5197: FILE: kdb/kdbmain.c:1897:
+	kdb_printf("%*s %s\n", (int)((num-i)*(2*bytesperword + 1)+1), " ", cbuf);
 	                                 ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#5197: FILE: kdb/kdbmain.c:1897:
+	kdb_printf("%*s %s\n", (int)((num-i)*(2*bytesperword + 1)+1), " ", cbuf);
 	                                    ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#5197: FILE: kdb/kdbmain.c:1897:
+	kdb_printf("%*s %s\n", (int)((num-i)*(2*bytesperword + 1)+1), " ", cbuf);
 	                                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#5197: FILE: kdb/kdbmain.c:1897:
+	kdb_printf("%*s %s\n", (int)((num-i)*(2*bytesperword + 1)+1), " ", cbuf);
 	                                                         ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#5222: FILE: kdb/kdbmain.c:1922:
+	if (strcmp(argv[0], "mdr") == 0) {
[...]
+	} else if (isdigit(argv[0][2])) {
[...]
+	} else if (strcmp(argv[0], "md") == 0)
[...]
+	else if (strcmp(argv[0], "mds") == 0)
[...]
+	else if (strcmp(argv[0], "mdp") == 0) {
[...]

WARNING:BRACES: braces {} are not necessary for single statement blocks
#5230: FILE: kdb/kdbmain.c:1930:
+			if (bytesperword == 0) {
+				bytesperword = 4;
+			}

CHECK:BRACES: braces {} should be used on all arms of this statement
#5236: FILE: kdb/kdbmain.c:1936:
+		if (!argv[0][3])
[...]
+		else if (argv[0][3] == 'c' && argv[0][4]) {
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#5240: FILE: kdb/kdbmain.c:1940:
+			char *p;
+			repeat = simple_strtoul(argv[0]+4, &p, 10);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#5240: FILE: kdb/kdbmain.c:1940:
+			repeat = simple_strtoul(argv[0]+4, &p, 10);
 			                               ^

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#5240: FILE: kdb/kdbmain.c:1940:
+			repeat = simple_strtoul(argv[0]+4, &p, 10);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#5250: FILE: kdb/kdbmain.c:1950:
+		phys = valid = 1;

WARNING:LINE_SPACING: Missing a blank line after declarations
#5268: FILE: kdb/kdbmain.c:1968:
+		int diag, nextarg = 1;
+		diag = kdbgetaddrarg(argc, argv, &nextarg, &addr, &offset, NULL);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#5271: FILE: kdb/kdbmain.c:1971:
+		if (argc > nextarg+2)
 		                  ^

CHECK:SPACING: No space is necessary after a cast
#5277: FILE: kdb/kdbmain.c:1977:
+				mdcount = (int) val;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#5281: FILE: kdb/kdbmain.c:1981:
+		if (argc >= nextarg+1) {
 		                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#5282: FILE: kdb/kdbmain.c:1982:
+			diag = kdbgetularg(argv[nextarg+1], &val);
 			                               ^

CHECK:SPACING: No space is necessary after a cast
#5284: FILE: kdb/kdbmain.c:1984:
+				radix = (int) val;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#5288: FILE: kdb/kdbmain.c:1988:
+	if (strcmp(argv[0], "mdr") == 0) {
+		return kdb_mdr(addr, mdcount);
+	}

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#5343: FILE: kdb/kdbmain.c:2043:
+	addr &= ~(bytesperword-1);
 	                      ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#5350: FILE: kdb/kdbmain.c:2050:
+			if (phys) {
[...]
+			} else if (kdb_getword(&word, a, bytesperword) || word)
[...]

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#5352: FILE: kdb/kdbmain.c:2052:
+				if (kdb_getphysword(&word, a, bytesperword)
+						|| word)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#5363: FILE: kdb/kdbmain.c:2063:
+			int s = num * (z-2);
 			                ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#5364: FILE: kdb/kdbmain.c:2064:
+			int s = num * (z-2);
+			kdb_printf(kdb_machreg_fmt0 "-" kdb_machreg_fmt0 " zero suppressed\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5365: FILE: kdb/kdbmain.c:2065:
+			kdb_printf(kdb_machreg_fmt0 "-" kdb_machreg_fmt0 " zero suppressed\n",
+				addr, addr + bytesperword * s - 1);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#5408: FILE: kdb/kdbmain.c:2108:
+	if (argc < 2) {
+		return KDB_ARGCOUNT;
+	}

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#5413: FILE: kdb/kdbmain.c:2113:
+	if ((diag = kdbgetaddrarg(argc, argv, &nextarg, &addr, &offset, NULL)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#5419: FILE: kdb/kdbmain.c:2119:
+	if ((diag = kdbgetaddrarg(argc, argv, &nextarg, &contents, NULL, NULL)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#5426: FILE: kdb/kdbmain.c:2126:
+	if ((diag = kdb_putword(addr, contents, width)))

CHECK:BRACES: braces {} should be used on all arms of this statement
#5463: FILE: kdb/kdbmain.c:2163:
+	if (argc == 1) {
[...]
+	} else if (argc)
[...]

WARNING:LONG_LINE: line length of 123 exceeds 100 columns
#5465: FILE: kdb/kdbmain.c:2165:
+			kdb_printf("go <address> must be issued from the initial cpu, do cpu %d first\n", kdb_initial_cpu);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5484: FILE: kdb/kdbmain.c:2184:
+		kdb_printf("kdb_continue_catastrophic=%d, ",
+			kdb_continue_catastrophic);

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#5498: FILE: kdb/kdbmain.c:2198:
+		kdb_printf("go was not issued from initial cpu, switching back to cpu %d\n", kdb_initial_cpu);

WARNING:LINE_SPACING: Missing a blank line after declarations
#5498: FILE: kdb/kdbmain.c:2198:
+		char buf[80];
+		kdb_printf("go was not issued from initial cpu, switching back to cpu %d\n", kdb_initial_cpu);

WARNING:LINE_SPACING: Missing a blank line after declarations
#5534: FILE: kdb/kdbmain.c:2234:
+	int diag;
+	if (argc == 0) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#5535: FILE: kdb/kdbmain.c:2235:
+		if ((diag = kdb_check_regs()))

WARNING:BRACES: braces {} are not necessary for single statement blocks
#5540: FILE: kdb/kdbmain.c:2240:
+	if (argc > 2) {
+		return KDB_ARGCOUNT;
+	}

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#5544: FILE: kdb/kdbmain.c:2244:
+	if ((diag = kdb_check_regs()))

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#5546: FILE: kdb/kdbmain.c:2246:
+	return kdba_dumpregs(kdb_current_regs, argv[1], argc==2 ? argv[2]: NULL);
 	                                                    ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#5546: FILE: kdb/kdbmain.c:2246:
+	return kdba_dumpregs(kdb_current_regs, argv[1], argc==2 ? argv[2]: NULL);
 	                                                                 ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#5577: FILE: kdb/kdbmain.c:2277:
+	if (argc != 2) {
+		return KDB_ARGCOUNT;
+	}

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#5592: FILE: kdb/kdbmain.c:2292:
+	if ((diag = kdb_check_regs()))

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#5628: FILE: kdb/kdbmain.c:2328:
+	extern int __sysrq_enabled;

WARNING:LINE_SPACING: Missing a blank line after declarations
#5629: FILE: kdb/kdbmain.c:2329:
+	extern int __sysrq_enabled;
+	if (argc != 1) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#5629: FILE: kdb/kdbmain.c:2329:
+	if (argc != 1) {
+		return KDB_ARGCOUNT;
+	}

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#5689: FILE: kdb/kdbmain.c:2389:
+extern void free_module(struct module *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct module *' should also have an identifier name
#5689: FILE: kdb/kdbmain.c:2389:
+extern void free_module(struct module *);

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#5693: FILE: kdb/kdbmain.c:2393:
+struct module_use
+{

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#5729: FILE: kdb/kdbmain.c:2429:
+	list_for_each_entry(mod, kdb_modules, list) {
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#5745: FILE: kdb/kdbmain.c:2445:
+			struct module_use *use;
+			kdb_printf(" [ ");

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#5781: FILE: kdb/kdbmain.c:2481:
+	for(i=0; i<__nenv; i++) {
 	     ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#5781: FILE: kdb/kdbmain.c:2481:
+	for(i=0; i<__nenv; i++) {
 	          ^

ERROR:SPACING: space required before the open parenthesis '('
#5781: FILE: kdb/kdbmain.c:2481:
+	for(i=0; i<__nenv; i++) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#5782: FILE: kdb/kdbmain.c:2482:
+		if (__env[i]) {
+			kdb_printf("%s\n", __env[i]);
+		}

WARNING:LINE_SPACING: Missing a blank line after declarations
#5824: FILE: kdb/kdbmain.c:2524:
+		char *cp;
+		lines = simple_strtol(argv[1], &cp, 0);

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#5824: FILE: kdb/kdbmain.c:2524:
+		lines = simple_strtol(argv[1], &cp, 0);

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#5828: FILE: kdb/kdbmain.c:2528:
+			adjust = simple_strtoul(argv[2], &cp, 0);

WARNING:STATIC_CONST_CHAR_ARRAY: char * array declaration might be better as static const
#5837: FILE: kdb/kdbmain.c:2537:
+		const char *setargs[] = { "set", "LOGGING", "0" };

WARNING:LINE_SPACING: Missing a blank line after declarations
#5838: FILE: kdb/kdbmain.c:2538:
+		const char *setargs[] = { "set", "LOGGING", "0" };
+		kdb_set(2, setargs);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'p' may be better as '(p)' to avoid precedence issues
#5848: FILE: kdb/kdbmain.c:2548:
+#define KDB_WRAP(p) (((p - syslog_data[0]) % logsize) + syslog_data[0])

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#5850: FILE: kdb/kdbmain.c:2550:
+		if ((c = *KDB_WRAP(p)) == '\n')

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5860: FILE: kdb/kdbmain.c:2560:
+			kdb_printf("buffer only contains %d lines, last %d lines printed\n",
+				n, n - adjust);

WARNING:LINE_SPACING: Missing a blank line after declarations
#5876: FILE: kdb/kdbmain.c:2576:
+		int skip = n - (adjust + lines);
+		if (adjust >= n) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5883: FILE: kdb/kdbmain.c:2583:
+			kdb_printf("buffer only contains %d lines, first %d lines printed\n",
+				n, lines);

ERROR:CODE_INDENT: code indent should use tabs where possible
#5899: FILE: kdb/kdbmain.c:2599:
+^I       ^Ip = buf;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#5899: FILE: kdb/kdbmain.c:2599:
+^I       ^Ip = buf;$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#5900: FILE: kdb/kdbmain.c:2600:
+		while (start < end && (c = *KDB_WRAP(start)) && (p - buf) < sizeof(buf)-1) {
 		                                                                       ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#5945: FILE: kdb/kdbmain.c:2645:
+	for (start_cpu = -1, i = 0; i < NR_CPUS; i++) {

CHECK:BRACES: Unbalanced braces around else statement
#5948: FILE: kdb/kdbmain.c:2648:
+		else {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#5949: FILE: kdb/kdbmain.c:2649:
+			struct kdb_running_process *krp = kdb_running_process+i;
 			                                                     ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#5950: FILE: kdb/kdbmain.c:2650:
+			struct kdb_running_process *krp = kdb_running_process+i;
+			if (KDB_STATE_CPU(KDB, i)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#5950: FILE: kdb/kdbmain.c:2650:
+			if (KDB_STATE_CPU(KDB, i)) {
[...]
+			} else if (krp->seqno && krp->p && krp->seqno >= kdb_seqno - 1)
[...]

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#5965: FILE: kdb/kdbmain.c:2665:
+				if (start_cpu < i-1)
 				                 ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#5966: FILE: kdb/kdbmain.c:2666:
+					kdb_printf("-%d", i-1);
 					                   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#5979: FILE: kdb/kdbmain.c:2679:
+		if (start_cpu < i-1)
 		                 ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#5980: FILE: kdb/kdbmain.c:2680:
+			kdb_printf("-%d", i-1);
 			                   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#5994: FILE: kdb/kdbmain.c:2694:
+	for (i=0; i<NR_CPUS; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#5994: FILE: kdb/kdbmain.c:2694:
+	for (i=0; i<NR_CPUS; i++) {
 	           ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#5994: FILE: kdb/kdbmain.c:2694:
+	for (i=0; i<NR_CPUS; i++) {

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#6003: FILE: kdb/kdbmain.c:2703:
+	udelay(1000);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cpunum > NR_CPUS'
#6020: FILE: kdb/kdbmain.c:2720:
+	if ((cpunum > NR_CPUS)
+	 || !cpu_online(cpunum)
+	 || !KDB_STATE_CPU(KDB, cpunum))

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#6020: FILE: kdb/kdbmain.c:2720:
+	if ((cpunum > NR_CPUS)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#6021: FILE: kdb/kdbmain.c:2721:
+	if ((cpunum > NR_CPUS)
+	 || !cpu_online(cpunum)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#6022: FILE: kdb/kdbmain.c:2722:
+	 || !cpu_online(cpunum)
+	 || !KDB_STATE_CPU(KDB, cpunum))

WARNING:LINE_SPACING: Missing a blank line after declarations
#6044: FILE: kdb/kdbmain.c:2744:
+	const struct task_struct *p, *g;
+	for (cpu = 0; cpu < NR_CPUS; ++cpu) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#6044: FILE: kdb/kdbmain.c:2744:
+	for (cpu = 0; cpu < NR_CPUS; ++cpu) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#6091: FILE: kdb/kdbmain.c:2791:
+	struct kdb_running_process *krp = kdb_running_process + kdb_process_cpu(p);
+	kdb_printf("0x%p %8d %8d  %d %4d   %c  0x%p %c%s\n",

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#6096: FILE: kdb/kdbmain.c:2796:
+		   p == kdb_curr_task(smp_processor_id()) ? '*': ' ',
 		                                               ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#6099: FILE: kdb/kdbmain.c:2799:
+		if (!krp->seqno || !krp->p)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#6101: FILE: kdb/kdbmain.c:2801:
+		else {

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#6105: FILE: kdb/kdbmain.c:2805:
+				kdb_printf("  Error: does not match running process table (0x%p)\n", krp->p);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6119: FILE: kdb/kdbmain.c:2819:
+	kdb_printf("%-*s      Pid   Parent [*] cpu State %-*s Command\n",
+		(int)(2*sizeof(void *))+2, "Task Addr",

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#6119: FILE: kdb/kdbmain.c:2819:
+		(int)(2*sizeof(void *))+2, "Task Addr",
 		       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#6119: FILE: kdb/kdbmain.c:2819:
+		(int)(2*sizeof(void *))+2, "Task Addr",
 		                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#6120: FILE: kdb/kdbmain.c:2820:
+		(int)(2*sizeof(void *))+2, "Thread");
 		       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#6120: FILE: kdb/kdbmain.c:2820:
+		(int)(2*sizeof(void *))+2, "Thread");
 		                       ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#6123: FILE: kdb/kdbmain.c:2823:
+	for (cpu = 0; cpu < NR_CPUS; ++cpu) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#6160: FILE: kdb/kdbmain.c:2860:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6180: FILE: kdb/kdbmain.c:2880:
+			p = find_task_by_pid_type_ns(PIDTYPE_PID, (pid_t)val,
+				&init_pid_ns);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#6189: FILE: kdb/kdbmain.c:2889:
+		printk(KERN_CRIT "DOH NEED TO IMPLEMENT THIS!");

WARNING:BRACES: braces {} are not necessary for single statement blocks
#6227: FILE: kdb/kdbmain.c:2927:
+	if (argc != 3) {
+		return KDB_ARGCOUNT;
+	}

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#6247: FILE: kdb/kdbmain.c:2947:
+	if (!(command = kdb_strdup(argv[3], GFP_KDB))) {

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#6248: FILE: kdb/kdbmain.c:2948:
+		kdb_printf("%s: cannot duplicate command\n", __FUNCTION__);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#6302: FILE: kdb/kdbmain.c:3002:
+	for(i=0, kt=kdb_commands; i<kdb_max_commands; i++, kt++) {
 	     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#6302: FILE: kdb/kdbmain.c:3002:
+	for(i=0, kt=kdb_commands; i<kdb_max_commands; i++, kt++) {
 	           ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#6302: FILE: kdb/kdbmain.c:3002:
+	for(i=0, kt=kdb_commands; i<kdb_max_commands; i++, kt++) {
 	                           ^

ERROR:SPACING: space required before the open parenthesis '('
#6302: FILE: kdb/kdbmain.c:3002:
+	for(i=0, kt=kdb_commands; i<kdb_max_commands; i++, kt++) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#6310: FILE: kdb/kdbmain.c:3010:
+extern int kdb_wake_up_process(struct task_struct * p);

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#6337: FILE: kdb/kdbmain.c:3037:
+	if (argc!=2)
 	        ^

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#6340: FILE: kdb/kdbmain.c:3040:
+	sig = simple_strtol(argv[1], &endp, 0);

ERROR:SPACING: space prohibited before that close parenthesis ')'
#6343: FILE: kdb/kdbmain.c:3043:
+	if (sig >= 0 ) {

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#6347: FILE: kdb/kdbmain.c:3047:
+	sig=-sig;
 	   ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#6347: FILE: kdb/kdbmain.c:3047:
+	sig=-sig;
 	    ^

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#6349: FILE: kdb/kdbmain.c:3049:
+	pid = simple_strtol(argv[2], &endp, 0);

ERROR:SPACING: spaces required around that '<=' (ctx:WxV)
#6352: FILE: kdb/kdbmain.c:3052:
+	if (pid <=0 ) {
 	        ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#6352: FILE: kdb/kdbmain.c:3052:
+	if (pid <=0 ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#6358: FILE: kdb/kdbmain.c:3058:
+	if (!(p = find_task_by_pid_type_ns(PIDTYPE_PID, pid, &init_pid_ns))) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#6386: FILE: kdb/kdbmain.c:3086:
+	static int mon_day[] = { 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
+	memset(tm, 0, sizeof(*tm));

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#6388: FILE: kdb/kdbmain.c:3088:
+	tm->tm_mday = tv->tv_sec / (24 * 60 * 60) + (2 * 365 + 1); /* shift base from 1970 to 1968 */

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#6392: FILE: kdb/kdbmain.c:3092:
+	tm->tm_year = 68 + 4*(tm->tm_mday / (4*365+1));
 	                    ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#6392: FILE: kdb/kdbmain.c:3092:
+	tm->tm_year = 68 + 4*(tm->tm_mday / (4*365+1));
 	                                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#6392: FILE: kdb/kdbmain.c:3092:
+	tm->tm_year = 68 + 4*(tm->tm_mday / (4*365+1));
 	                                          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#6393: FILE: kdb/kdbmain.c:3093:
+	tm->tm_mday %= (4*365+1);
 	                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#6393: FILE: kdb/kdbmain.c:3093:
+	tm->tm_mday %= (4*365+1);
 	                     ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#6416: FILE: kdb/kdbmain.c:3116:
+	struct timespec uptime;
+	do_posix_clock_monotonic_gettime(&uptime);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#6422: FILE: kdb/kdbmain.c:3122:
+	val->procs = nr_threads-1;
 	                       ^

WARNING:RETURN_VOID: void function return statements are not generally useful
#6427: FILE: kdb/kdbmain.c:3127:
+	return;
+}

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#6449: FILE: kdb/kdbmain.c:3149:
+	extern struct timespec xtime;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#6450: FILE: kdb/kdbmain.c:3150:
+	extern struct timezone sys_tz;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6467: FILE: kdb/kdbmain.c:3167:
+	kdb_printf("date       %04d-%02d-%02d %02d:%02d:%02d tz_minuteswest %d\n",
+		1900+tm.tm_year, tm.tm_mon+1, tm.tm_mday,

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#6467: FILE: kdb/kdbmain.c:3167:
+		1900+tm.tm_year, tm.tm_mon+1, tm.tm_mday,
 		    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#6467: FILE: kdb/kdbmain.c:3167:
+		1900+tm.tm_year, tm.tm_mon+1, tm.tm_mday,
 		                          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#6473: FILE: kdb/kdbmain.c:3173:
+	if (val.uptime > (24*60*60)) {
 	                    ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#6473: FILE: kdb/kdbmain.c:3173:
+	if (val.uptime > (24*60*60)) {
 	                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#6474: FILE: kdb/kdbmain.c:3174:
+		int days = val.uptime / (24*60*60);
 		                           ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#6474: FILE: kdb/kdbmain.c:3174:
+		int days = val.uptime / (24*60*60);
 		                              ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#6475: FILE: kdb/kdbmain.c:3175:
+		int days = val.uptime / (24*60*60);
+		val.uptime %= (24*60*60);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#6475: FILE: kdb/kdbmain.c:3175:
+		val.uptime %= (24*60*60);
 		                 ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#6475: FILE: kdb/kdbmain.c:3175:
+		val.uptime %= (24*60*60);
 		                    ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#6478: FILE: kdb/kdbmain.c:3178:
+	kdb_printf("%02ld:%02ld\n", val.uptime/(60*60), (val.uptime/60)%60);
 	                                      ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#6478: FILE: kdb/kdbmain.c:3178:
+	kdb_printf("%02ld:%02ld\n", val.uptime/(60*60), (val.uptime/60)%60);
 	                                          ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#6478: FILE: kdb/kdbmain.c:3178:
+	kdb_printf("%02ld:%02ld\n", val.uptime/(60*60), (val.uptime/60)%60);
 	                                                           ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#6478: FILE: kdb/kdbmain.c:3178:
+	kdb_printf("%02ld:%02ld\n", val.uptime/(60*60), (val.uptime/60)%60);
 	                                                               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#6483: FILE: kdb/kdbmain.c:3183:
+#define LOAD_FRAC(x) LOAD_INT(((x) & (FIXED_1-1)) * 100)
                                              ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6485: FILE: kdb/kdbmain.c:3185:
+	kdb_printf("load avg   %ld.%02ld %ld.%02ld %ld.%02ld\n",
+		LOAD_INT(val.loads[0]), LOAD_FRAC(val.loads[0]),

ERROR:SPACING: spaces required around that '>=' (ctx:WxV)
#6531: FILE: kdb/kdbmain.c:3231:
+	if (argc >=2 && (diag = kdbgetularg(argv[2], &bytesperword)))
 	         ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#6531: FILE: kdb/kdbmain.c:3231:
+	if (argc >=2 && (diag = kdbgetularg(argv[2], &bytesperword)))

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#6537: FILE: kdb/kdbmain.c:3237:
+	sprintf(fmtstr, "%%0%dlx ", (int)(2*bytesperword));
 	                                   ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#6539: FILE: kdb/kdbmain.c:3239:
+		if ((diag = kdbgetularg(argv[3], &whichcpu)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#6564: FILE: kdb/kdbmain.c:3264:
+		if ((diag = kdb_getword(&val, addr, bytesperword))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6566: FILE: kdb/kdbmain.c:3266:
+			kdb_printf("%5d " kdb_bfd_vma_fmt0 " - unable to read, diag=%d\n",
+				cpu, addr, diag);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6577: FILE: kdb/kdbmain.c:3277:
+		kdb_md_line(fmtstr, addr,
+			bytesperword == KDB_WORD_SIZE,

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#6583: FILE: kdb/kdbmain.c:3283:
+	for (cpu = first_cpu(suppress); cpu < NR_CPUS; cpu = next_cpu(cpu, suppress)) {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#6585: FILE: kdb/kdbmain.c:3285:
+		if (cpu == NR_CPUS-1 || next_cpu(cpu, suppress) != cpu + 1)
 		                  ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#6585: FILE: kdb/kdbmain.c:3285:
+		if (cpu == NR_CPUS-1 || next_cpu(cpu, suppress) != cpu + 1)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#6587: FILE: kdb/kdbmain.c:3287:
+		while (cpu < NR_CPUS && next_cpu(cpu, suppress) == cpu + 1)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#6651: FILE: kdb/kdbmain.c:3351:
+	for (i=0, kp=kdb_commands; i<kdb_max_commands; i++, kp++) {
 	      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#6651: FILE: kdb/kdbmain.c:3351:
+	for (i=0, kp=kdb_commands; i<kdb_max_commands; i++, kp++) {
 	            ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#6651: FILE: kdb/kdbmain.c:3351:
+	for (i=0, kp=kdb_commands; i<kdb_max_commands; i++, kp++) {
 	                            ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#6652: FILE: kdb/kdbmain.c:3352:
+		if (kp->cmd_name && (strcmp(kp->cmd_name, cmd)==0)) {
 		                                              ^

WARNING:SPLIT_STRING: quoted string split across lines
#6654: FILE: kdb/kdbmain.c:3354:
+			kdb_printf("Duplicate kdb command registered: "
+				"%s, func %p help %s\n", cmd, func, help);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#6662: FILE: kdb/kdbmain.c:3362:
+	for (i=0, kp=kdb_commands; i<kdb_max_commands; i++, kp++) {
 	      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#6662: FILE: kdb/kdbmain.c:3362:
+	for (i=0, kp=kdb_commands; i<kdb_max_commands; i++, kp++) {
 	            ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#6662: FILE: kdb/kdbmain.c:3362:
+	for (i=0, kp=kdb_commands; i<kdb_max_commands; i++, kp++) {
 	                            ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#6663: FILE: kdb/kdbmain.c:3363:
+		if (kp->cmd_name == NULL) {
+			break;
+		}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!kp->cmd_name"
#6663: FILE: kdb/kdbmain.c:3363:
+		if (kp->cmd_name == NULL) {

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#6669: FILE: kdb/kdbmain.c:3369:
+		kdbtab_t *new = kmalloc((kdb_max_commands + kdb_command_extend) * sizeof(*new), GFP_KDB);

WARNING:LINE_SPACING: Missing a blank line after declarations
#6670: FILE: kdb/kdbmain.c:3370:
+		kdbtab_t *new = kmalloc((kdb_max_commands + kdb_command_extend) * sizeof(*new), GFP_KDB);
+		if (!new) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#6755: FILE: kdb/kdbmain.c:3455:
+	for (i=0, kp=kdb_commands; i<kdb_max_commands; i++, kp++) {
 	      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#6755: FILE: kdb/kdbmain.c:3455:
+	for (i=0, kp=kdb_commands; i<kdb_max_commands; i++, kp++) {
 	            ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#6755: FILE: kdb/kdbmain.c:3455:
+	for (i=0, kp=kdb_commands; i<kdb_max_commands; i++, kp++) {
 	                            ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#6756: FILE: kdb/kdbmain.c:3456:
+		if (kp->cmd_name && (strcmp(kp->cmd_name, cmd)==0)) {
 		                                              ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#6793: FILE: kdb/kdbmain.c:3493:
+	for(i=0, kp=kdb_commands; i < kdb_max_commands; i++,kp++) {
 	     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#6793: FILE: kdb/kdbmain.c:3493:
+	for(i=0, kp=kdb_commands; i < kdb_max_commands; i++,kp++) {
 	           ^

ERROR:SPACING: space required after that ',' (ctx:OxV)
#6793: FILE: kdb/kdbmain.c:3493:
+	for(i=0, kp=kdb_commands; i < kdb_max_commands; i++,kp++) {
 	                                                   ^

ERROR:SPACING: space required before the open parenthesis '('
#6793: FILE: kdb/kdbmain.c:3493:
+	for(i=0, kp=kdb_commands; i < kdb_max_commands; i++,kp++) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#6793: FILE: kdb/kdbmain.c:3493:
+	for(i=0, kp=kdb_commands; i < kdb_max_commands; i++,kp++) {
+		kp->cmd_name = NULL;
+	}

WARNING:LONG_LINE: line length of 129 exceeds 100 columns
#6797: FILE: kdb/kdbmain.c:3497:
+	kdb_register_repeat("md", kdb_md, "<vaddr>",   "Display Memory Contents, also mdWcN, e.g. md8c1", 1, KDB_REPEAT_NO_ARGS);

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#6798: FILE: kdb/kdbmain.c:3498:
+	kdb_register_repeat("mdr", kdb_md, "<vaddr> <bytes>", 	"Display Raw Memory", 0, KDB_REPEAT_NO_ARGS);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#6798: FILE: kdb/kdbmain.c:3498:
+^Ikdb_register_repeat("mdr", kdb_md, "<vaddr> <bytes>", ^I"Display Raw Memory", 0, KDB_REPEAT_NO_ARGS);$

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#6799: FILE: kdb/kdbmain.c:3499:
+	kdb_register_repeat("mdp", kdb_md, "<paddr> <bytes>", 	"Display Physical Memory", 0, KDB_REPEAT_NO_ARGS);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#6799: FILE: kdb/kdbmain.c:3499:
+^Ikdb_register_repeat("mdp", kdb_md, "<paddr> <bytes>", ^I"Display Physical Memory", 0, KDB_REPEAT_NO_ARGS);$

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#6800: FILE: kdb/kdbmain.c:3500:
+	kdb_register_repeat("mds", kdb_md, "<vaddr>", 	"Display Memory Symbolically", 0, KDB_REPEAT_NO_ARGS);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#6800: FILE: kdb/kdbmain.c:3500:
+^Ikdb_register_repeat("mds", kdb_md, "<vaddr>", ^I"Display Memory Symbolically", 0, KDB_REPEAT_NO_ARGS);$

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#6801: FILE: kdb/kdbmain.c:3501:
+	kdb_register_repeat("mm", kdb_mm, "<vaddr> <contents>",   "Modify Memory Contents", 0, KDB_REPEAT_NO_ARGS);

WARNING:LONG_LINE_COMMENT: line length of 110 exceeds 100 columns
#6802: FILE: kdb/kdbmain.c:3502:
+	//	kdb_register_repeat("id", kdb_id, "<vaddr>",   "Display Instructions", 1, KDB_REPEAT_NO_ARGS);

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#6806: FILE: kdb/kdbmain.c:3506:
+	kdb_register_repeat("rm", kdb_rm, "<reg> <contents>", "Modify Registers", 0, KDB_REPEAT_NONE);

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#6807: FILE: kdb/kdbmain.c:3507:
+	kdb_register_repeat("ef", kdb_ef, "<vaddr>",   "Display exception frame", 0, KDB_REPEAT_NONE);

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#6809: FILE: kdb/kdbmain.c:3509:
+	kdb_register_repeat("btp", kdb_bt, "<pid>", 	"Display stack for process <pid>", 0, KDB_REPEAT_NONE);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#6809: FILE: kdb/kdbmain.c:3509:
+^Ikdb_register_repeat("btp", kdb_bt, "<pid>", ^I"Display stack for process <pid>", 0, KDB_REPEAT_NONE);$

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#6810: FILE: kdb/kdbmain.c:3510:
+	kdb_register_repeat("bta", kdb_bt, "[DRSTCZEUIMA]", 	"Display stack all processes", 0, KDB_REPEAT_NONE);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#6810: FILE: kdb/kdbmain.c:3510:
+^Ikdb_register_repeat("bta", kdb_bt, "[DRSTCZEUIMA]", ^I"Display stack all processes", 0, KDB_REPEAT_NONE);$

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#6811: FILE: kdb/kdbmain.c:3511:
+	kdb_register_repeat("btc", kdb_bt, "", 	"Backtrace current process on each cpu", 0, KDB_REPEAT_NONE);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#6811: FILE: kdb/kdbmain.c:3511:
+^Ikdb_register_repeat("btc", kdb_bt, "", ^I"Backtrace current process on each cpu", 0, KDB_REPEAT_NONE);$

WARNING:LONG_LINE: line length of 127 exceeds 100 columns
#6812: FILE: kdb/kdbmain.c:3512:
+	kdb_register_repeat("btt", kdb_bt, "<vaddr>", 	"Backtrace process given its struct task address", 0, KDB_REPEAT_NONE);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#6812: FILE: kdb/kdbmain.c:3512:
+^Ikdb_register_repeat("btt", kdb_bt, "<vaddr>", ^I"Backtrace process given its struct task address", 0, KDB_REPEAT_NONE);$

WARNING:LONG_LINE: line length of 147 exceeds 100 columns
#6813: FILE: kdb/kdbmain.c:3513:
+	kdb_register_repeat("ll", kdb_ll, "<first-element> <linkoffset> <cmd>", "Execute cmd for each element in linked list", 0, KDB_REPEAT_NONE);

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#6814: FILE: kdb/kdbmain.c:3514:
+	kdb_register_repeat("env", kdb_env, "", 	"Show environment variables", 0, KDB_REPEAT_NONE);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#6814: FILE: kdb/kdbmain.c:3514:
+^Ikdb_register_repeat("env", kdb_env, "", ^I"Show environment variables", 0, KDB_REPEAT_NONE);$

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#6815: FILE: kdb/kdbmain.c:3515:
+	kdb_register_repeat("set", kdb_set, "", 	"Set environment variables", 0, KDB_REPEAT_NONE);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#6815: FILE: kdb/kdbmain.c:3515:
+^Ikdb_register_repeat("set", kdb_set, "", ^I"Set environment variables", 0, KDB_REPEAT_NONE);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#6816: FILE: kdb/kdbmain.c:3516:
+^Ikdb_register_repeat("help", kdb_help, "", ^I"Display Help Message", 1, KDB_REPEAT_NONE);$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#6819: FILE: kdb/kdbmain.c:3519:
+	kdb_register_repeat("cpu", kdb_cpu, "<cpunum>","Switch to new cpu", 0, KDB_REPEAT_NONE);
 	                                              ^

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#6820: FILE: kdb/kdbmain.c:3520:
+	kdb_register_repeat("ps", kdb_ps, "[<flags>|A]", "Display active task list", 0, KDB_REPEAT_NONE);

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#6821: FILE: kdb/kdbmain.c:3521:
+	kdb_register_repeat("pid", kdb_pid, "<pidnum>",	"Switch to another task", 0, KDB_REPEAT_NONE);

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#6822: FILE: kdb/kdbmain.c:3522:
+	kdb_register_repeat("reboot", kdb_reboot, "",  "Reboot the machine immediately", 0, KDB_REPEAT_NONE);

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#6827: FILE: kdb/kdbmain.c:3527:
+	kdb_register_repeat("lsmod", kdb_lsmod, "",	"List loaded kernel modules", 0, KDB_REPEAT_NONE);

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#6832: FILE: kdb/kdbmain.c:3532:
+	kdb_register_repeat("dmesg", kdb_dmesg, "[lines]",	"Display syslog buffer", 0, KDB_REPEAT_NONE);

WARNING:LONG_LINE: line length of 143 exceeds 100 columns
#6833: FILE: kdb/kdbmain.c:3533:
+	kdb_register_repeat("defcmd", kdb_defcmd, "name \"usage\" \"help\"", "Define a set of commands, down to endefcmd", 0, KDB_REPEAT_NONE);

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#6834: FILE: kdb/kdbmain.c:3534:
+	kdb_register_repeat("kill", kdb_kill, "<-signal> <pid>", "Send a signal to a process", 0, KDB_REPEAT_NONE);

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#6836: FILE: kdb/kdbmain.c:3536:
+	kdb_register_repeat("per_cpu", kdb_per_cpu, "", "Display per_cpu variables", 3, KDB_REPEAT_NONE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6838: FILE: kdb/kdbmain.c:3538:
+	kdb_register_repeat("grephelp", kdb_grep_help, "",
+		"Display help on | grep", 0, KDB_REPEAT_NONE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6841: FILE: kdb/kdbmain.c:3541:
+	kdb_register_repeat("print", kdb_debuginfo_print, "<expression>",
+		"Type casting, as in lcrash",  0, KDB_REPEAT_NONE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6843: FILE: kdb/kdbmain.c:3543:
+	kdb_register_repeat("px", kdb_debuginfo_print, "<expression>",
+	   "Print in hex (type casting) (see 'pxhelp')",  0, KDB_REPEAT_NONE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6845: FILE: kdb/kdbmain.c:3545:
+	kdb_register_repeat("pxhelp", kdb_pxhelp, "",
+		"Display help for the px command", 0, KDB_REPEAT_NONE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6847: FILE: kdb/kdbmain.c:3547:
+	kdb_register_repeat("pd", kdb_debuginfo_print, "<expression>",
+		"Print in decimal (type casting)", 0, KDB_REPEAT_NONE);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#6848: FILE: kdb/kdbmain.c:3548:
+	kdb_register_repeat("whatis", kdb_debuginfo_print,"<type or symbol>",
 	                                                 ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6849: FILE: kdb/kdbmain.c:3549:
+	kdb_register_repeat("whatis", kdb_debuginfo_print,"<type or symbol>",
+	"Display the type, or the address for a symbol", 0, KDB_REPEAT_NONE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6851: FILE: kdb/kdbmain.c:3551:
+	kdb_register_repeat("sizeof", kdb_debuginfo_print, "<type>",
+	"Display the size of a structure, typedef, etc.", 0, KDB_REPEAT_NONE);

ERROR:CODE_INDENT: code indent should use tabs where possible
#6852: FILE: kdb/kdbmain.c:3552:
+        kdb_register_repeat("walk", kdb_walk, "",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#6852: FILE: kdb/kdbmain.c:3552:
+        kdb_register_repeat("walk", kdb_walk, "",$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6853: FILE: kdb/kdbmain.c:3553:
+        kdb_register_repeat("walk", kdb_walk, "",
+		"Walk a linked list (see 'walkhelp')", 0, KDB_REPEAT_NONE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6855: FILE: kdb/kdbmain.c:3555:
+	kdb_register_repeat("walkhelp", kdb_walkhelp, "",
+		"Display help for the walk command", 0, KDB_REPEAT_NONE);

WARNING:LINE_SPACING: Missing a blank line after declarations
#6881: FILE: kdb/kdbmain.c:3581:
+	int i, diag;
+	for (i = 0; kdb_cmds[i]; ++i) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6885: FILE: kdb/kdbmain.c:3585:
+			kdb_printf("kdb command %s failed, kdb diag %d\n",
+				kdb_cmds[i], diag);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#6896: FILE: kdb/kdbmain.c:3596:
+ * ^IInitialize the kernel debugger environment.$

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#6939: FILE: kdb/kdbmain.c:3639:
+	kdbjmpbuf = vmalloc(NR_CPUS * sizeof(*kdbjmpbuf));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#6941: FILE: kdb/kdbmain.c:3641:
+		printk(KERN_ERR "Cannot allocate kdbjmpbuf, no kdb recovery will be possible\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#6941: FILE: kdb/kdbmain.c:3641:
+	if (!kdbjmpbuf)
+		printk(KERN_ERR "Cannot allocate kdbjmpbuf, no kdb recovery will be possible\n");

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#6947: FILE: kdb/kdbmain.c:3647:
+}
+// HACK have to sort through these later, some probably are not needed

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#6949: FILE: kdb/kdbmain.c:3649:
+EXPORT_SYMBOL_GPL(kdb_register_repeat);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#6950: FILE: kdb/kdbmain.c:3650:
+EXPORT_SYMBOL_GPL(kdb_unregister);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#6951: FILE: kdb/kdbmain.c:3651:
+EXPORT_SYMBOL_GPL(kdb_getarea_size);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#6952: FILE: kdb/kdbmain.c:3652:
+EXPORT_SYMBOL_GPL(kdb_putarea_size);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#6956: FILE: kdb/kdbmain.c:3656:
+EXPORT_SYMBOL_GPL(kdbgetenv);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#6957: FILE: kdb/kdbmain.c:3657:
+EXPORT_SYMBOL_GPL(kdbgetintenv);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#6958: FILE: kdb/kdbmain.c:3658:
+EXPORT_SYMBOL_GPL(kdbgetaddrarg);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#6961: FILE: kdb/kdbmain.c:3661:
+EXPORT_SYMBOL_GPL(kdb_seqno);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#6962: FILE: kdb/kdbmain.c:3662:
+EXPORT_SYMBOL_GPL(kdb_initial_cpu);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#6963: FILE: kdb/kdbmain.c:3663:
+EXPORT_SYMBOL_GPL(kdbnearsym);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#6964: FILE: kdb/kdbmain.c:3664:
+EXPORT_SYMBOL_GPL(kdb_printf);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#6965: FILE: kdb/kdbmain.c:3665:
+EXPORT_SYMBOL_GPL(kdb_symbol_print);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#6966: FILE: kdb/kdbmain.c:3666:
+EXPORT_SYMBOL_GPL(kdb_running_process);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#6973: FILE: kdb/kdbsupport.c:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#6997: FILE: kdb/kdbsupport.c:25:
+#include <asm/uaccess.h>

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kdbgetsymval', this function's name, in a string
#7027: FILE: kdb/kdbsupport.c:55:
+		kdb_printf("kdbgetsymval: symname=%s, symtab=%p\n", symname, symtab);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#7030: FILE: kdb/kdbsupport.c:58:
+	if ((symtab->sym_start = kallsyms_lookup_name(symname))) {

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#7032: FILE: kdb/kdbsupport.c:60:
+			kdb_printf("kdbgetsymval: returns 1, symtab->sym_start=0x%lx\n", symtab->sym_start);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kdbgetsymval', this function's name, in a string
#7032: FILE: kdb/kdbsupport.c:60:
+			kdb_printf("kdbgetsymval: returns 1, symtab->sym_start=0x%lx\n", symtab->sym_start);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kdbgetsymval', this function's name, in a string
#7036: FILE: kdb/kdbsupport.c:64:
+		kdb_printf("kdbgetsymval: returns 0\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kdbnearsym', this function's name, in a string
#7078: FILE: kdb/kdbsupport.c:106:
+		kdb_printf("kdbnearsym: addr=0x%lx, symtab=%p\n", addr, symtab);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kdbnearsym', this function's name, in a string
#7085: FILE: kdb/kdbsupport.c:113:
+		kdb_printf("kdbnearsym: addr=0x%lx cannot kmalloc knt1\n", addr);

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#7088: FILE: kdb/kdbsupport.c:116:
+	symtab->sym_name = kallsyms_lookup(addr, &symbolsize , &offset, (char **)(&symtab->mod_name), knt1);

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#7088: FILE: kdb/kdbsupport.c:116:
+	symtab->sym_name = kallsyms_lookup(addr, &symbolsize , &offset, (char **)(&symtab->mod_name), knt1);
 	                                                     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#7089: FILE: kdb/kdbsupport.c:117:
+	if (offset > 8*1024*1024) {
 	              ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#7089: FILE: kdb/kdbsupport.c:117:
+	if (offset > 8*1024*1024) {
 	                   ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#7091: FILE: kdb/kdbsupport.c:119:
+		addr = offset = symbolsize = 0;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around symtab->sym_name
#7095: FILE: kdb/kdbsupport.c:123:
+	ret = symtab->sym_name != NULL && *(symtab->sym_name) != '\0';

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "symtab->sym_name"
#7095: FILE: kdb/kdbsupport.c:123:
+	ret = symtab->sym_name != NULL && *(symtab->sym_name) != '\0';

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#7108: FILE: kdb/kdbsupport.c:136:
+			knt1[knt1_size-1] = '\0';
 			              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#7116: FILE: kdb/kdbsupport.c:144:
+			memcpy(kdb_name_table, kdb_name_table+1,
 			                                     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#7117: FILE: kdb/kdbsupport.c:145:
+			       sizeof(kdb_name_table[0])*(ARRAY_SIZE(kdb_name_table)-1));
 			                                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#7117: FILE: kdb/kdbsupport.c:145:
+			       sizeof(kdb_name_table[0])*(ARRAY_SIZE(kdb_name_table)-1));
 			                                                            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#7121: FILE: kdb/kdbsupport.c:149:
+			memcpy(kdb_name_table+i, kdb_name_table+i+1,
 			                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#7121: FILE: kdb/kdbsupport.c:149:
+			memcpy(kdb_name_table+i, kdb_name_table+i+1,
 			                                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#7121: FILE: kdb/kdbsupport.c:149:
+			memcpy(kdb_name_table+i, kdb_name_table+i+1,
 			                                         ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#7122: FILE: kdb/kdbsupport.c:150:
+			       sizeof(kdb_name_table[0])*(ARRAY_SIZE(kdb_name_table)-i-1));
 			                                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#7122: FILE: kdb/kdbsupport.c:150:
+			       sizeof(kdb_name_table[0])*(ARRAY_SIZE(kdb_name_table)-i-1));
 			                                                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#7122: FILE: kdb/kdbsupport.c:150:
+			       sizeof(kdb_name_table[0])*(ARRAY_SIZE(kdb_name_table)-i-1));
 			                                                              ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!symtab->mod_name"
#7130: FILE: kdb/kdbsupport.c:158:
+	if (symtab->mod_name == NULL)

WARNING:LONG_LINE: line length of 204 exceeds 100 columns
#7133: FILE: kdb/kdbsupport.c:161:
+		kdb_printf("kdbnearsym: returns %d symtab->sym_start=0x%lx, symtab->mod_name=%p, symtab->sym_name=%p (%s)\n", ret, symtab->sym_start, symtab->mod_name, symtab->sym_name, symtab->sym_name);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kdbnearsym', this function's name, in a string
#7133: FILE: kdb/kdbsupport.c:161:
+		kdb_printf("kdbnearsym: returns %d symtab->sym_start=0x%lx, symtab->mod_name=%p, symtab->sym_name=%p (%s)\n", ret, symtab->sym_start, symtab->mod_name, symtab->sym_name, symtab->sym_name);

WARNING:LINE_SPACING: Missing a blank line after declarations
#7144: FILE: kdb/kdbsupport.c:172:
+	int i;
+	for (i = 0; i < ARRAY_SIZE(kdb_name_table); ++i) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#7165: FILE: kdb/kdbsupport.c:193:
+static char ks_namebuf[KSYM_NAME_LEN+1], ks_namebuf_prev[KSYM_NAME_LEN+1];
                                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#7165: FILE: kdb/kdbsupport.c:193:
+static char ks_namebuf[KSYM_NAME_LEN+1], ks_namebuf_prev[KSYM_NAME_LEN+1];
                                                                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#7179: FILE: kdb/kdbsupport.c:207:
+				prev_len = min_t(int, max_len-1, strlen(ks_namebuf));
 				                             ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#7182: FILE: kdb/kdbsupport.c:210:
+			} else for (i = 0; i < prev_len; ++i) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#7182: FILE: kdb/kdbsupport.c:210:
+			} else for (i = 0; i < prev_len; ++i) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#7191: FILE: kdb/kdbsupport.c:219:
+ ^Iif (prev_len > prefix_len)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#7191: FILE: kdb/kdbsupport.c:219:
+ ^Iif (prev_len > prefix_len)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#7191: FILE: kdb/kdbsupport.c:219:
+ ^Iif (prev_len > prefix_len)$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#7192: FILE: kdb/kdbsupport.c:220:
+		memcpy(prefix_name, ks_namebuf_prev, prev_len+1);
 		                                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#7218: FILE: kdb/kdbsupport.c:246:
+			strncpy(prefix_name, name, strlen(name)+1);
 			                                       ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#7250: FILE: kdb/kdbsupport.c:278:
+	kdb_symtab_t symtab, *symtab_p2;
+	if (symtab_p) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#7253: FILE: kdb/kdbsupport.c:281:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#7253: FILE: kdb/kdbsupport.c:281:
+	else {

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#7257: FILE: kdb/kdbsupport.c:285:
+	if (symtab_p2->sym_name || (punc & KDB_SP_VALUE)) {
[...]
+	else {
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#7260: FILE: kdb/kdbsupport.c:288:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#7260: FILE: kdb/kdbsupport.c:288:
+	else {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#7263: FILE: kdb/kdbsupport.c:291:
+	if (punc & KDB_SP_SPACEB) {
+		kdb_printf(" ");
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#7266: FILE: kdb/kdbsupport.c:294:
+	if (punc & KDB_SP_VALUE) {
+		kdb_printf(kdb_machreg_fmt0, addr);
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#7270: FILE: kdb/kdbsupport.c:298:
+		if (punc & KDB_SP_VALUE) {
+			kdb_printf(" ");
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#7273: FILE: kdb/kdbsupport.c:301:
+		if (punc & KDB_SP_PAREN) {
+			kdb_printf("(");
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#7276: FILE: kdb/kdbsupport.c:304:
+		if (strcmp(symtab_p2->mod_name, "kernel")) {
+			kdb_printf("[%s]", symtab_p2->mod_name);
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#7280: FILE: kdb/kdbsupport.c:308:
+		if (addr != symtab_p2->sym_start) {
+			kdb_printf("+0x%lx", addr - symtab_p2->sym_start);
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#7283: FILE: kdb/kdbsupport.c:311:
+		if (punc & KDB_SP_SYMSIZE) {
+			kdb_printf("/0x%lx", symtab_p2->sym_end - symtab_p2->sym_start);
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#7286: FILE: kdb/kdbsupport.c:314:
+		if (punc & KDB_SP_PAREN) {
+			kdb_printf(")");
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#7290: FILE: kdb/kdbsupport.c:318:
+	if (punc & KDB_SP_SPACEA) {
+		kdb_printf(" ");
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#7293: FILE: kdb/kdbsupport.c:321:
+	if (punc & KDB_SP_NEWLINE) {
+		kdb_printf("\n");
+	}

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#7318: FILE: kdb/kdbsupport.c:346:
+	int n = strlen(str)+1;
 	                   ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#7320: FILE: kdb/kdbsupport.c:348:
+	char *s = kmalloc(n, type);
+	if (!s) return NULL;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#7320: FILE: kdb/kdbsupport.c:348:
+	if (!s) return NULL;

WARNING:LINE_SPACING: Missing a blank line after declarations
#7346: FILE: kdb/kdbsupport.c:374:
+	int ret = probe_kernel_read((char *)res, (char *)addr, size);
+	if (ret) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#7353: FILE: kdb/kdbsupport.c:381:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#7353: FILE: kdb/kdbsupport.c:381:
+	else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#7381: FILE: kdb/kdbsupport.c:409:
+	int ret = probe_kernel_read((char *)addr, (char *)res, size);
+	if (ret) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#7388: FILE: kdb/kdbsupport.c:416:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#7388: FILE: kdb/kdbsupport.c:416:
+	else {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#7403: FILE: kdb/kdbsupport.c:431:
+ * ^Ires^IPointer to the word to receive the result$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#7404: FILE: kdb/kdbsupport.c:432:
+ * ^Iaddr^IPhysical address of the area to copy$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#7405: FILE: kdb/kdbsupport.c:433:
+ * ^Isize^ISize of the area$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#7407: FILE: kdb/kdbsupport.c:435:
+ * ^Inone.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#7411: FILE: kdb/kdbsupport.c:439:
+ * ^Inone.$

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#7424: FILE: kdb/kdbsupport.c:452:
+	memcpy(res, vaddr + (addr & (PAGE_SIZE -1)), size);
 	                                       ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#7455: FILE: kdb/kdbsupport.c:483:
+		if (!(diag = kdb_getphys(&w1, addr, sizeof(w1))))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#7459: FILE: kdb/kdbsupport.c:487:
+		if (!(diag = kdb_getphys(&w2, addr, sizeof(w2))))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#7463: FILE: kdb/kdbsupport.c:491:
+		if (!(diag = kdb_getphys(&w4, addr, sizeof(w4))))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#7468: FILE: kdb/kdbsupport.c:496:
+			if (!(diag = kdb_getphys(&w8, addr, sizeof(w8))))

CHECK:SPACING: No space is necessary after a cast
#7475: FILE: kdb/kdbsupport.c:503:
+		kdb_printf("kdb_getphysword: bad width %ld\n", (long) size);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kdb_getphysword', this function's name, in a string
#7475: FILE: kdb/kdbsupport.c:503:
+		kdb_printf("kdb_getphysword: bad width %ld\n", (long) size);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#7506: FILE: kdb/kdbsupport.c:534:
+		if (!(diag = kdb_getarea(w1, addr)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#7510: FILE: kdb/kdbsupport.c:538:
+		if (!(diag = kdb_getarea(w2, addr)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#7514: FILE: kdb/kdbsupport.c:542:
+		if (!(diag = kdb_getarea(w4, addr)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#7519: FILE: kdb/kdbsupport.c:547:
+			if (!(diag = kdb_getarea(w8, addr)))

CHECK:SPACING: No space is necessary after a cast
#7526: FILE: kdb/kdbsupport.c:554:
+		kdb_printf("kdb_getword: bad width %ld\n", (long) size);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kdb_getword', this function's name, in a string
#7526: FILE: kdb/kdbsupport.c:554:
+		kdb_printf("kdb_getword: bad width %ld\n", (long) size);

WARNING:LINE_SPACING: Missing a blank line after declarations
#7554: FILE: kdb/kdbsupport.c:582:
+	__u64 w8;
+	switch (size) {

CHECK:SPACING: No space is necessary after a cast
#7576: FILE: kdb/kdbsupport.c:604:
+		kdb_printf("kdb_putword: bad width %ld\n", (long) size);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kdb_putword', this function's name, in a string
#7576: FILE: kdb/kdbsupport.c:604:
+		kdb_printf("kdb_putword: bad width %ld\n", (long) size);

WARNING:TYPO_SPELLING: 'carefull' may be misspelled - perhaps 'careful'?
#7598: FILE: kdb/kdbsupport.c:626:
+ *	be carefull not to overlap the bits.  TASK_* bits are in the LSB,
   	   ^^^^^^^^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#7605: FILE: kdb/kdbsupport.c:633:
+#define UNRUNNABLE	(1UL << (8*sizeof(unsigned long) - 1))	/* unrunnable is < 0 */
                   	          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#7606: FILE: kdb/kdbsupport.c:634:
+#define RUNNING		(1UL << (8*sizeof(unsigned long) - 2))
                		          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#7607: FILE: kdb/kdbsupport.c:635:
+#define IDLE		(1UL << (8*sizeof(unsigned long) - 3))
             		          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#7608: FILE: kdb/kdbsupport.c:636:
+#define DAEMON		(1UL << (8*sizeof(unsigned long) - 4))
               		          ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#7614: FILE: kdb/kdbsupport.c:642:
+	long res = 0;
+	if (!s && !(s = kdbgetenv("PS"))) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#7614: FILE: kdb/kdbsupport.c:642:
+	if (!s && !(s = kdbgetenv("PS"))) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#7614: FILE: kdb/kdbsupport.c:642:
+	if (!s && !(s = kdbgetenv("PS"))) {
+		s = "DRSTCZEU";	/* default value for ps */
+	}

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#7619: FILE: kdb/kdbsupport.c:647:
+		case 'D': res |= TASK_UNINTERRUPTIBLE; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#7620: FILE: kdb/kdbsupport.c:648:
+		case 'R': res |= RUNNING; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#7621: FILE: kdb/kdbsupport.c:649:
+		case 'S': res |= TASK_INTERRUPTIBLE; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#7622: FILE: kdb/kdbsupport.c:650:
+		case 'T': res |= TASK_STOPPED; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#7623: FILE: kdb/kdbsupport.c:651:
+		case 'C': res |= TASK_TRACED; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#7624: FILE: kdb/kdbsupport.c:652:
+		case 'Z': res |= EXIT_ZOMBIE << 16; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#7625: FILE: kdb/kdbsupport.c:653:
+		case 'E': res |= EXIT_DEAD << 16; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#7626: FILE: kdb/kdbsupport.c:654:
+		case 'U': res |= UNRUNNABLE; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#7627: FILE: kdb/kdbsupport.c:655:
+		case 'I': res |= IDLE; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#7628: FILE: kdb/kdbsupport.c:656:
+		case 'M': res |= DAEMON; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#7629: FILE: kdb/kdbsupport.c:657:
+		case 'A': res = ~0UL; break;

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#7631: FILE: kdb/kdbsupport.c:659:
+			  kdb_printf("%s: unknown flag '%c' ignored\n", __FUNCTION__, *s);

WARNING:TABSTOP: Statements should start on a tabstop
#7632: FILE: kdb/kdbsupport.c:660:
+			  break;

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#7679: FILE: kdb/kdbsupport.c:707:
+	}
+	else if (!p->mm && state == 'S') {

WARNING:LINE_SPACING: Missing a blank line after declarations
#7704: FILE: kdb/kdbsupport.c:732:
+	char state[] = { kdb_task_state_char(p), '\0' };
+	return (mask & kdb_task_state_string(state)) != 0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#7713: FILE: kdb/kdbsupport.c:741:
+	struct kdb_running_process *krp = kdb_running_process + cpu;
+	krp->p = task;

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#7723: FILE: kdb/kdbsupport.c:751:
+#if 0

WARNING:LINE_SPACING: Missing a blank line after declarations
#7729: FILE: kdb/kdbsupport.c:757:
+	struct kdb_running_process *krp = kdb_running_process + smp_processor_id();
+	krp->p = current;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around krp->arch
#7733: FILE: kdb/kdbsupport.c:761:
+	kdba_save_running(&(krp->arch), regs);

WARNING:LINE_SPACING: Missing a blank line after declarations
#7755: FILE: kdb/kdbsupport.c:783:
+	struct kdb_running_process *krp = kdb_running_process + smp_processor_id();
+	kdba_unsave_running(&(krp->arch), regs);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around krp->arch
#7755: FILE: kdb/kdbsupport.c:783:
+	kdba_unsave_running(&(krp->arch), regs);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#7760: FILE: kdb/kdbsupport.c:788:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#7781: FILE: kdb/kdbsupport.c:809:
+	kdb_symtab_t symtab;
+	kdb_printf("  %-11.11s ", name);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#7783: FILE: kdb/kdbsupport.c:811:
+		kdb_symbol_print(val, &symtab, KDB_SP_VALUE|KDB_SP_SYMSIZE|KDB_SP_NEWLINE);
 		                                           ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#7783: FILE: kdb/kdbsupport.c:811:
+		kdb_symbol_print(val, &symtab, KDB_SP_VALUE|KDB_SP_SYMSIZE|KDB_SP_NEWLINE);
 		                                                          ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#7788: FILE: kdb/kdbsupport.c:816:
+static struct page * kdb_get_one_user_page(const struct task_struct *tsk, unsigned long start,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7789: FILE: kdb/kdbsupport.c:817:
+static struct page * kdb_get_one_user_page(const struct task_struct *tsk, unsigned long start,
+		int len, int write)

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#7793: FILE: kdb/kdbsupport.c:821:
+	struct vm_area_struct *	vma;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#7796: FILE: kdb/kdbsupport.c:824:
+	if ((start & PAGE_MASK) != ((start+len) & PAGE_MASK))
 	                                  ^

WARNING:TYPO_SPELLING: 'boundry' may be misspelled - perhaps 'boundary'?
#7800: FILE: kdb/kdbsupport.c:828:
+	 * aligns to next page boundry.
 	                       ^^^^^^^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxW)
#7825: FILE: kdb/kdbsupport.c:853:
+	memcpy(to, vaddr+ (from & (PAGE_SIZE - 1)), size);
 	                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxW)
#7841: FILE: kdb/kdbsupport.c:869:
+	memcpy(vaddr+ (to & (PAGE_SIZE - 1)), from, size);
 	            ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#7869: FILE: kdb/kdbsupport.c:897:
+static u64 debug_alloc_pool_aligned[256*1024/dah_align];	/* 256K pool */
                                        ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#7869: FILE: kdb/kdbsupport.c:897:
+static u64 debug_alloc_pool_aligned[256*1024/dah_align];	/* 256K pool */
                                             ^

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#7871: FILE: kdb/kdbsupport.c:899:
+static u32 dah_first, dah_first_call = 1, dah_used = 0, dah_used_max = 0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#7889: FILE: kdb/kdbsupport.c:917:
+	int count;
+	if (dap_locked == smp_processor_id())

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#7900: FILE: kdb/kdbsupport.c:928:
+		udelay(1000);

WARNING:LINE_SPACING: Missing a blank line after declarations
#7913: FILE: kdb/kdbsupport.c:941:
+	void *p = NULL;
+	if (!get_dap_lock()) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#7923: FILE: kdb/kdbsupport.c:951:
+	prev = best = bestprev = NULL;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bestprev"
#7940: FILE: kdb/kdbsupport.c:968:
+	if (best->next == 0 && bestprev == NULL && rem < dah_overhead)

CHECK:BRACES: braces {} should be used on all arms of this statement
#7942: FILE: kdb/kdbsupport.c:970:
+	if (rem >= dah_overhead) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#7949: FILE: kdb/kdbsupport.c:977:
+	} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#7971: FILE: kdb/kdbsupport.c:999:
+	unsigned int h_offset;
+	if (!p)

WARNING:LINE_SPACING: Missing a blank line after declarations
#7994: FILE: kdb/kdbsupport.c:1022:
+		unsigned int prev_offset;
+		prev = (struct debug_alloc_header *)(debug_alloc_pool + dah_first);

WARNING:LINE_SPACING: Missing a blank line after declarations
#8015: FILE: kdb/kdbsupport.c:1043:
+		struct debug_alloc_header *next;
+		next = (struct debug_alloc_header *)

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#8034: FILE: kdb/kdbsupport.c:1062:
+	static int debug_kusage_one_time = 0;

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#8051: FILE: kdb/kdbsupport.c:1079:
+		   __FUNCTION__, dah_first);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#8054: FILE: kdb/kdbsupport.c:1082:
+		kdb_printf("%s: h_used %p size %d\n", __FUNCTION__, h_used, h_used->size);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#8060: FILE: kdb/kdbsupport.c:1088:
+			   __FUNCTION__, h_used, h_used->size, h_used->caller);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#8069: FILE: kdb/kdbsupport.c:1097:
+			   __FUNCTION__, h_used, h_used->size, h_used->caller);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#8083: FILE: kdb/kdbsupport.c:1111:
+	BUG_ON(kdb_flags_index >= ARRAY_SIZE(kdb_flags_stack));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#8090: FILE: kdb/kdbsupport.c:1118:
+	BUG_ON(kdb_flags_index <= 0);

WARNING:LINE_SPACING: Missing a blank line after declarations
#8109: FILE: kernel/kallsyms.c:515:
+	static struct kallsym_iter kdb_walk_kallsyms_iter;
+	if (*pos == 0) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#8196: FILE: kernel/panic.c:86:
+	if (kdb_kdump_state == KDB_KDUMP_RESET) {
+		(void)kdb(KDB_REASON_OOPS, 999, get_irq_regs());
+	}

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#8220: FILE: kernel/printk.c:417:
+	syslog_data[2] = log_buf + log_end - (logged_chars < log_buf_len ? logged_chars : log_buf_len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8252: FILE: kernel/sched.c:10249:
+kdb_prio(char *name, struct rt_prio_array *array, kdb_printf_t xxx_printf,
+	unsigned int cpu)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8258: FILE: kernel/sched.c:10255:
+	xxx_printf("  %s rt bitmap: 0x%lx 0x%lx 0x%lx\n",
+		name,

ERROR:SPACING: space required before the open parenthesis '('
#8278: FILE: kernel/sched.c:10275:
+		while(curr != head) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#8280: FILE: kernel/sched.c:10277:
+			struct task_struct *task;
+			if (!printed_hdr) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8287: FILE: kernel/sched.c:10284:
+				xxx_printf("    0x%p %d %s  time_slice:%d\n",
+				   task, task->pid, task->comm,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'p->policy == SCHED_NORMAL'
#8293: FILE: kernel/sched.c:10290:
+		if (p->se.on_rq && (task_cpu(p) == cpu) &&
+		   (p->policy == SCHED_NORMAL)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8294: FILE: kernel/sched.c:10291:
+		if (p->se.on_rq && (task_cpu(p) == cpu) &&
+		   (p->policy == SCHED_NORMAL)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8300: FILE: kernel/sched.c:10297:
+			xxx_printf("    0x%p %d %s pri:%d spri:%d npri:%d\n",
+				p, p->pid, p->comm, p->prio,

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#8320: FILE: kernel/sched.c:10317:
+		   cpu, (spin_is_locked(&rq->lock))?"LOCKED":"free",
 		                                   ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#8320: FILE: kernel/sched.c:10317:
+		   cpu, (spin_is_locked(&rq->lock))?"LOCKED":"free",
 		                                            ^

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#8320: FILE: kernel/sched.c:10317:
+		   cpu, (spin_is_locked(&rq->lock))?"LOCKED":"free",

lockdep_assert_held() annotations should be preferred over
assertions based on spin_is_locked()

See: https://www.kernel.org/doc/html/latest/locking/lockdep-design.html#annotations

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8327: FILE: kernel/sched.c:10324:
+	xxx_printf(" cpu_load:%lu %lu %lu",
+			rq->cpu_load[0], rq->cpu_load[1], rq->cpu_load[2]);

WARNING:LINE_SPACING: Missing a blank line after declarations
#8371: FILE: kernel/signal.c:2686:
+	int sig, new_t;
+	if (!spin_trylock(&t->sighand->siglock)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#8409: FILE: mm/hugetlb.c:1544:
+	struct hstate *h = &default_hstate;
+	kdb_printf(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#8409: FILE: mm/hugetlb.c:1544:
+	kdb_printf(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8454: FILE: mm/swapfile.c:1953:
+		if (!(swap_info[i].flags & SWP_USED) ||
+		     (swap_info[i].flags & SWP_WRITEOK))

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000127675.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 174 errors, 555 warnings, 399 checks, 8209 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000127675.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
