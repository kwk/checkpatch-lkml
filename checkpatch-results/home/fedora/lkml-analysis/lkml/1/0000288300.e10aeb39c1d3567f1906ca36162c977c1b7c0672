WARNING:LINE_SPACING: Missing a blank line after declarations
#126: FILE: fs/sysfs/mount.c:226:
+	struct super_block *sb;
+	printk(KERN_NOTICE "sysfs: user namespace exiting\n");

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#126: FILE: fs/sysfs/mount.c:226:
+	printk(KERN_NOTICE "sysfs: user namespace exiting\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#132: FILE: fs/sysfs/mount.c:232:
+		struct sysfs_super_info *info = sysfs_info(sb);
+		if (info->tag.user_ns != user_ns)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#162: FILE: include/linux/sched.h:1678:
+extern int task_user_equiv(struct task_struct *tsk, struct user_struct *u);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#236: FILE: include/linux/user_namespace.h:20:
+extern int register_user_ns_kobj(struct user_namespace *ns);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#237: FILE: include/linux/user_namespace.h:21:
+extern void unregister_user_ns_kobj(struct user_namespace *ns);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#238: FILE: include/linux/user_namespace.h:22:
+extern int register_user_ns_kobj(struct user_namespace *ns);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#239: FILE: include/linux/user_namespace.h:23:
+extern void unregister_user_ns_kobj(struct user_namespace *ns);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#273: FILE: kernel/user.c:88:
+static struct user_struct *uid_hash_find(uid_t uid,
+				struct hlist_head *hashent)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#290: FILE: kernel/user.c:255:
+       return info->user_ns;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#295: FILE: kernel/user.c:260:
+       struct user_struct *up;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#296: FILE: kernel/user.c:261:
+       struct user_struct *up;
+       up = container_of(kobj, struct user_struct, kobj);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#296: FILE: kernel/user.c:261:
+       up = container_of(kobj, struct user_struct, kobj);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#297: FILE: kernel/user.c:262:
+       return up->uid.ns;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#301: FILE: kernel/user.c:266:
+       .sb_tag = userns_sb_tag,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#302: FILE: kernel/user.c:267:
+       .kobject_tag = userns_kobject_tag,$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*ns)...) over kzalloc(sizeof(struct user_namespace)...)
#360: FILE: kernel/user_namespace.c:25:
+	ns = kzalloc(sizeof(struct user_namespace), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:SPACING: No space is necessary after a cast
#398: FILE: security/keys/process_keys.c:70:
+						    (gid_t) -1, tsk,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#414: FILE: security/keys/process_keys.c:85:
+				keyring_alloc(buf, user->uid.uid, (gid_t) -1,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000288300.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 10 warnings, 9 checks, 291 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000288300.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
