WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
   git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip.git tracing-core-for-linus

WARNING:SPLIT_STRING: quoted string split across lines
#525: FILE: arch/x86/mm/testmmiotrace.c:104:
+	pr_warning("WARNING: mapping %lu kB @ 0x%08lx in PCI address space, "
+		   "and writing 16 kB of rubbish in there.\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: __always_unused or __maybe_unused is preferred over __attribute__((__unused__))
#548: FILE: include/linux/compiler-gcc.h:82:
+#define __always_unused			__attribute__((unused))

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#585: FILE: include/linux/smp_lock.h:35:
+#define lock_kernel() do {					\
+	_lock_kernel(__func__, __FILE__, __LINE__);		\
+} while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#589: FILE: include/linux/smp_lock.h:39:
+#define unlock_kernel()	do {					\
+	_unlock_kernel(__func__, __FILE__, __LINE__);		\
+} while (0)

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#607: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#612: FILE: include/trace/events/bkl.h:1:
+#undef TRACE_SYSTEM

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#621: FILE: include/trace/events/bkl.h:10:
+TRACE_EVENT(lock_kernel,
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#626: FILE: include/trace/events/bkl.h:15:
+	TP_STRUCT__entry(

ERROR:SPACING: space prohibited after that open parenthesis '('
#627: FILE: include/trace/events/bkl.h:16:
+		__field(	int,		lock_depth		)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that close parenthesis ')'
#627: FILE: include/trace/events/bkl.h:16:
+		__field(	int,		lock_depth		)

ERROR:SPACING: space prohibited after that open parenthesis '('
#628: FILE: include/trace/events/bkl.h:17:
+		__field_ext(	const char *,	func, FILTER_PTR_STRING	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#628: FILE: include/trace/events/bkl.h:17:
+		__field_ext(	const char *,	func, FILTER_PTR_STRING	)

ERROR:SPACING: space prohibited after that open parenthesis '('
#629: FILE: include/trace/events/bkl.h:18:
+		__field_ext(	const char *,	file, FILTER_PTR_STRING	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#629: FILE: include/trace/events/bkl.h:18:
+		__field_ext(	const char *,	file, FILTER_PTR_STRING	)

ERROR:SPACING: space prohibited after that open parenthesis '('
#630: FILE: include/trace/events/bkl.h:19:
+		__field(	int,		line			)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#630: FILE: include/trace/events/bkl.h:19:
+		__field(	int,		line			)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#633: FILE: include/trace/events/bkl.h:22:
+	TP_fast_assign(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#646: FILE: include/trace/events/bkl.h:35:
+TRACE_EVENT(unlock_kernel,
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#651: FILE: include/trace/events/bkl.h:40:
+	TP_STRUCT__entry(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#658: FILE: include/trace/events/bkl.h:47:
+	TP_fast_assign(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#732: FILE: include/trace/syscall.h:36:
+extern unsigned long arch_syscall_addr(int nr);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:TYPO_SPELLING: 'convertion' may be misspelled - perhaps 'conversion'?
#827: FILE: kernel/trace/ftrace.c:1274:
+		 * Do the initial record convertion from mcount jump
 		                         ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'immediatelly' may be misspelled - perhaps 'immediately'?
#841: FILE: kernel/trace/ftrace.c:1288:
+		 * The reason not to enable the record immediatelly is the
 		                                       ^^^^^^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#849: FILE: kernel/trace/ftrace.c:1296:
+			int failed = __ftrace_replace_code(p, 1);
+			if (failed) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#962: FILE: kernel/trace/ftrace.c:2296:
+	strlcpy(ftrace_graph_buf, str, FTRACE_FILTER_SIZE);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#965: FILE: kernel/trace/ftrace.c:2299:
+__setup("ftrace_graph_filter=", set_graph_function);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#978: FILE: kernel/trace/ftrace.c:2312:
+			printk(KERN_DEBUG "ftrace: function %s not "

WARNING:SPLIT_STRING: quoted string split across lines
#979: FILE: kernel/trace/ftrace.c:2313:
+			printk(KERN_DEBUG "ftrace: function %s not "
+					  "traceable\n", func);

CHECK:SPACING: No space is necessary after a cast
#1195: FILE: kernel/trace/ftrace.c:2927:
+		return (void *) 1;

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#1218: FILE: kernel/trace/ftrace.c:2950:
+		seq_printf(m, "no pid\n");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#1223: FILE: kernel/trace/ftrace.c:2955:
+		seq_printf(m, "swapper tasks\n");

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1253: FILE: kernel/trace/ftrace.c:2985:
+ftrace_pid_write(struct file *filp, const char __user *ubuf,
                               ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1254: FILE: kernel/trace/ftrace.c:2986:
+ftrace_pid_write(struct file *filp, const char __user *ubuf,
+		   size_t cnt, loff_t *ppos)

WARNING:CONSIDER_KSTRTO: strict_strtol is obsolete, use kstrtol instead
#1276: FILE: kernel/trace/ftrace.c:3008:
+	ret = strict_strtol(tmp, 10, &val);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:TRACE_PRINTK: Do not use trace_printk() in production code (this can be ignored if built only with a debug config option)
#1417: FILE: kernel/trace/ring_buffer_benchmark.c:294:
+			trace_printk("Running Consumer at nice: %d\n",

WARNING:TRACE_PRINTK: Do not use trace_printk() in production code (this can be ignored if built only with a debug config option)
#1420: FILE: kernel/trace/ring_buffer_benchmark.c:297:
+			trace_printk("Running Consumer at SCHED_FIFO %d\n",

WARNING:TRACE_PRINTK: Do not use trace_printk() in production code (this can be ignored if built only with a debug config option)
#1424: FILE: kernel/trace/ring_buffer_benchmark.c:301:
+		trace_printk("Running Producer at nice: %d\n",

WARNING:TRACE_PRINTK: Do not use trace_printk() in production code (this can be ignored if built only with a debug config option)
#1427: FILE: kernel/trace/ring_buffer_benchmark.c:304:
+		trace_printk("Running Producer at SCHED_FIFO %d\n",

WARNING:TRACE_PRINTK: Do not use trace_printk() in production code (this can be ignored if built only with a debug config option)
#1433: FILE: kernel/trace/ring_buffer_benchmark.c:310:
+		trace_printk("WARNING!!! This test is running at lowest priority.\n");

CHECK:BRACES: braces {} should be used on all arms of this statement
#1446: FILE: kernel/trace/ring_buffer_benchmark.c:445:
+		if (consumer_fifo >= 0) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1451: FILE: kernel/trace/ring_buffer_benchmark.c:450:
+		} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#1455: FILE: kernel/trace/ring_buffer_benchmark.c:454:
+	if (producer_fifo >= 0) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1460: FILE: kernel/trace/ring_buffer_benchmark.c:459:
+	} else

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#1484: FILE: kernel/trace/trace.c:140:
+__setup("ftrace=", set_cmdline_ftrace);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1553: FILE: kernel/trace/trace.h:720:
+^Ifilter_pred_fn_t ^Ifn;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1554: FILE: kernel/trace/trace.h:721:
+^Iu64 ^I^I^Ival;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1556: FILE: kernel/trace/trace.h:723:
+^Ichar ^I^I^I*field_name;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1557: FILE: kernel/trace/trace.h:724:
+^Iint ^I^I^Ioffset;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1558: FILE: kernel/trace/trace.h:725:
+^Iint ^I^I^Inot;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1559: FILE: kernel/trace/trace.h:726:
+^Iint ^I^I^Iop;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1560: FILE: kernel/trace/trace.h:727:
+^Iint ^I^I^Ipop_n;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1640: FILE: kernel/trace/trace_events.c:917:
+^I^I ^I^I  id);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1640: FILE: kernel/trace/trace_events.c:917:
+^I^I ^I^I  id);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1640: FILE: kernel/trace/trace_events.c:917:
+		trace_create_file("id", 0444, call->dir, call,
+		 		  id);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ptr[r->len] == 0'
#1744: FILE: kernel/trace/trace_events_filter.c:277:
+	if (ptr && (ptr[r->len] == 0))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:BRACES: braces {} should be used on all arms of this statement
#1771: FILE: kernel/trace/trace_events_filter.c:304:
+	if (buff[0] == '!') {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1775: FILE: kernel/trace/trace_events_filter.c:308:
+	} else

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#1863: FILE: kernel/trace/trace_events_filter.c:786:
+		} else if (field->filter_type == FILTER_DYN_STRING)
+				fn = filter_pred_strloc;

WARNING:CONSIDER_KSTRTO: strict_strtoll is obsolete, use kstrtoll instead
#1873: FILE: kernel/trace/trace_events_filter.c:794:
+			ret = strict_strtoll(pred->regex.pattern, 0, &val);

WARNING:CONSIDER_KSTRTO: strict_strtoull is obsolete, use kstrtoull instead
#1876: FILE: kernel/trace/trace_events_filter.c:796:
+			ret = strict_strtoull(pred->regex.pattern, 0, &val);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1917: FILE: kernel/trace/trace_syscalls.c:17:
+extern unsigned long __start_syscalls_metadata[];

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1918: FILE: kernel/trace/trace_syscalls.c:18:
+extern unsigned long __stop_syscalls_metadata[];

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1928: FILE: kernel/trace/trace_syscalls.c:28:
+
+

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#1993: FILE: kernel/trace/trace_syscalls.c:447:
+	syscalls_metadata = kzalloc(sizeof(*syscalls_metadata) *
+					NR_syscalls, GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2061: FILE: lib/kernel_lock.c:139:
+EXPORT_SYMBOL(_lock_kernel);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000039777.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 9 errors, 37 warnings, 20 checks, 2056 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000039777.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
