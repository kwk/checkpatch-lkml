WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#61: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#73: FILE: drivers/sfi/sfi_core.c:1:
+/* sfi_core.c Simple Firmware Interface - core internals */

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'MERCHANTIBILITY' may be misspelled - perhaps 'MERCHANTABILITY'?
#101: FILE: drivers/sfi/sfi_core.c:29:
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR
                                          ^^^^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:INCLUDE_LINUX: Use #include <linux/pgtable.h> instead of <asm/pgtable.h>
#127: FILE: drivers/sfi/sfi_core.c:55:
+#include <asm/pgtable.h>

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'page' - possible side-effects?
#134: FILE: drivers/sfi/sfi_core.c:62:
+#define TABLE_ON_PAGE(page, table, size) (ON_SAME_PAGE(page, table) && \
+				ON_SAME_PAGE(page, table + size))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'table' - possible side-effects?
#134: FILE: drivers/sfi/sfi_core.c:62:
+#define TABLE_ON_PAGE(page, table, size) (ON_SAME_PAGE(page, table) && \
+				ON_SAME_PAGE(page, table + size))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'size' may be better as '(size)' to avoid precedence issues
#134: FILE: drivers/sfi/sfi_core.c:62:
+#define TABLE_ON_PAGE(page, table, size) (ON_SAME_PAGE(page, table) && \
+				ON_SAME_PAGE(page, table + size))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#174: FILE: drivers/sfi/sfi_core.c:102:
+static void sfi_print_table_header(unsigned long long pa,
+				struct sfi_table_header *header)

WARNING:TYPO_SPELLING: 'lengh' may be misspelled - perhaps 'length'?
#184: FILE: drivers/sfi/sfi_core.c:112:
+ * sanity check table lengh, calculate checksum
                       ^^^^^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#188: FILE: drivers/sfi/sfi_core.c:116:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#204: FILE: drivers/sfi/sfi_core.c:132:
+		pr_err("Checksum %2.2X should be %2.2X\n",
+			table->checksum, table->checksum - checksum);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#259: FILE: drivers/sfi/sfi_core.c:187:
+static struct sfi_table_header *sfi_get_table(char *signature, char *oem_id,
+		char *oem_table_id, unsigned int flags)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#278: FILE: drivers/sfi/sfi_core.c:206:
+		if (oem_table_id && strncmp(th->oem_table_id, oem_table_id,
+						SFI_OEM_TABLE_ID_SIZE))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#292: FILE: drivers/sfi/sfi_core.c:220:
+	if (!ON_SAME_PAGE(((void *)table + table->length),
+		(void *)syst_va + syst_va->header.length)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#293: FILE: drivers/sfi/sfi_core.c:221:
+		(void *)syst_va + syst_va->header.length)
+		&& !ON_SAME_PAGE(table, syst_va))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#299: FILE: drivers/sfi/sfi_core.c:227:
+int sfi_table_parse(char *signature, char *oem_id, char *oem_table_id,
+			unsigned int flags, sfi_table_handler handler)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#384: FILE: drivers/sfi/sfi_core.c:312:
+		if (strncmp(syst_hdr->signature, SFI_SIG_SYST,
+				SFI_SIGNATURE_SIZE))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#391: FILE: drivers/sfi/sfi_core.c:319:
+		sfi_print_table_header(SFI_SYST_SEARCH_BEGIN + offset,
+					syst_hdr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#401: FILE: drivers/sfi/sfi_core.c:329:
+			pr_debug("SYST 0x%llx + 0x%x crosses page\n",
+					syst_pa, syst_hdr->length);

WARNING:RETURN_VOID: void function return statements are not generally useful
#429: FILE: drivers/sfi/sfi_core.c:357:
+	return;
+}

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#464: FILE: drivers/sfi/sfi_core.h:1:
+/* sfi_core.h Simple Firmware Interface, internal header */

WARNING:TYPO_SPELLING: 'MERCHANTIBILITY' may be misspelled - perhaps 'MERCHANTABILITY'?
#492: FILE: drivers/sfi/sfi_core.h:29:
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR
                                          ^^^^^^^^^^^^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#503: FILE: drivers/sfi/sfi_core.h:40:
+extern int __init sfi_acpi_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#504: FILE: drivers/sfi/sfi_core.h:41:
+extern int sfi_check_table(u64 paddr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#505: FILE: drivers/sfi/sfi_core.h:42:
+extern void sfi_put_table(struct sfi_table_header *table);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#506: FILE: drivers/sfi/sfi_core.h:43:
+extern struct sfi_table_header *sfi_map_table(u64 pa);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#507: FILE: drivers/sfi/sfi_core.h:44:
+extern void sfi_unmap_table(struct sfi_table_header *th);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000099063.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 8 warnings, 19 checks, 437 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000099063.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
