WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#63: FILE: arch/x86/kernel/pci-dma.c:42:
+/* Dummy device used for NULL arguments (normally ISA). Better would
+   be probably a smaller DMA mask, but this is bug-to-bug compatible

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#64: FILE: arch/x86/kernel/pci-dma.c:43:
+   to older i386. */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "mem"
#96: FILE: arch/x86/kernel/pci-dma.c:158:
+	return (mem != NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#124: FILE: arch/x86/kernel/pci-dma.c:222:
+dma_alloc_pages(struct device *dev, gfp_t gfp, unsigned order)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dev->dma_mask"
#158: FILE: arch/x86/kernel/pci-dma.c:256:
+	if (dev->dma_mask == NULL)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#166: FILE: arch/x86/kernel/pci-dma.c:264:
+	/* Why <=? Even when the mask is smaller than 4GB it is often
+	   larger than 16MB and in this case we have a chance of

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#168: FILE: arch/x86/kernel/pci-dma.c:266:
+	   not retry with true GFP_DMA. -AK */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page"
#175: FILE: arch/x86/kernel/pci-dma.c:273:
+	if (page == NULL)

WARNING:LINE_SPACING: Missing a blank line after declarations
#180: FILE: arch/x86/kernel/pci-dma.c:278:
+		int high, mmu;
+		bus = page_to_phys(page);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#184: FILE: arch/x86/kernel/pci-dma.c:282:
+		if (force_iommu && !(gfp & GFP_DMA))
[...]
+		else if (high) {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#191: FILE: arch/x86/kernel/pci-dma.c:289:
+			/* Don't use the 16MB ZONE_DMA unless absolutely
+			   needed. It's better to use remapping first. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#191: FILE: arch/x86/kernel/pci-dma.c:289:
+			   needed. It's better to use remapping first. */

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#198: FILE: arch/x86/kernel/pci-dma.c:296:
+			gfp &= ~(GFP_DMA32|GFP_DMA);
 			                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#215: FILE: arch/x86/kernel/pci-dma.c:313:
+		gfp &= ~(GFP_DMA|GFP_DMA32);
 		                ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dma_alloc_coherent', this function's name, in a string
#228: FILE: arch/x86/kernel/pci-dma.c:326:
+		panic("dma_alloc_coherent: IOMMU overflow by %lu bytes\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#240: FILE: arch/x86/kernel/pci-dma.c:338:
+void dma_free_coherent(struct device *dev, size_t size,
+			 void *vaddr, dma_addr_t bus)

WARNING:LINE_SPACING: Missing a blank line after declarations
#243: FILE: arch/x86/kernel/pci-dma.c:341:
+	int order = get_order(size);
+	WARN_ON(irqs_disabled());	/* for portability */

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#255: 
deleted file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000298085.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 11 warnings, 7 checks, 201 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000298085.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
