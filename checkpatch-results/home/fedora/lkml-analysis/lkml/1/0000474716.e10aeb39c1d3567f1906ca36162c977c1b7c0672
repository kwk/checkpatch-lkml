WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
I've attached the final version of SIN, a user inactivity monitor posted few

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#101: FILE: debug.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#118: FILE: debug.h:18:
+ *  with SIN; if not, write to the Free Software Foundation, Inc., 51 Franklin$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#127: FILE: debug.h:27:
+#define set_debug(val) debug = (val)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#128: FILE: debug.h:28:
+#define printd(fmt...) if (unlikely(debug)) { printk("SIN: " fmt); }

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#128: FILE: debug.h:28:
+#define printd(fmt...) if (unlikely(debug)) { printk("SIN: " fmt); }

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:BRACES: braces {} are not necessary for single statement blocks
#128: FILE: debug.h:28:
+#define printd(fmt...) if (unlikely(debug)) { printk("SIN: " fmt); }

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#132: FILE: debug.h:32:
+#define set_debug(val) if (val) { printk(KERN_DEBUG SORRY); }

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#132: FILE: debug.h:32:
+#define set_debug(val) if (val) { printk(KERN_DEBUG SORRY); }

WARNING:BRACES: braces {} are not necessary for single statement blocks
#132: FILE: debug.h:32:
+#define set_debug(val) if (val) { printk(KERN_DEBUG SORRY); }

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 2
#142: FILE: etc/sin/rules.sh:2:
+

WARNING:LONG_LINE: line length of 143 exceeds 100 columns
#148: FILE: etc/sin/rules.sh:8:
+#	    XAUTHORITY=/home/`/bin/ps x | /bin/grep tty11 | /bin/grep auth | /usr/bin/cut -d / -f 3`/.Xauthority xset -display :0 dpms force on

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 140 exceeds 100 columns
#168: FILE: etc/sin/rules.sh:28:
+#	XAUTHORITY=/home/`/bin/ps x | /bin/grep tty11 | /bin/grep auth | /usr/bin/cut -d / -f 3`/.Xauthority xset -display :0 dpms force off

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 2
#189: FILE: etc/sin/setup.sh:2:
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 2
#234: FILE: gentable.sh:2:
+

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#246: FILE: gentable.sh:14:
+# SIN; if not, write to the Free Software Foundation, Inc., 51 Franklin St,$

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#276: FILE: gentable.sh:44:
+echo -e "Specify the the input devices you want to monitor from the list below:\n"

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#383: FILE: input_enumerator.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#400: FILE: input_enumerator.c:18:
+ *  with SIN; if not, write to the Free Software Foundation, Inc., 51 Franklin$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#514: FILE: input_enumerator.c:132:
+	if (err >= left) {
+		err = left;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#518: FILE: input_enumerator.c:136:
+	if (err > 0) {
+		size += err;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#541: FILE: input_enumerator.c:159:
+	if (!page) {
+		goto out;
+	}

CHECK:SPACING: No space is necessary after a cast
#546: FILE: input_enumerator.c:164:
+	(void) input_register_handler(&ih);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#549: FILE: input_enumerator.c:167:
+		printk(KERN_NOTICE "no input devices found\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#554: FILE: input_enumerator.c:172:
+	id = kmalloc(idsize * sizeof (struct input_devices), GFP_KERNEL);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#558: FILE: input_enumerator.c:176:
+	if (!id) {
+		goto cleanout;
+	}

CHECK:SPACING: No space is necessary after a cast
#563: FILE: input_enumerator.c:181:
+	(void) input_register_handler(&ih);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#585: FILE: input_enumerator.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#602: FILE: input_enumerator.h:18:
+ *  with SIN; if not, write to the Free Software Foundation, Inc., 51 Franklin$

CHECK:SPACING: spaces preferred around that '|' (ctx:ExV)
#619: FILE: input_enumerator.h:35:
+		     |INPUT_DEVICE_ID_MATCH_VENDOR	\
 		     ^

CHECK:SPACING: spaces preferred around that '|' (ctx:ExV)
#620: FILE: input_enumerator.h:36:
+		     |INPUT_DEVICE_ID_MATCH_PRODUCT	\
 		     ^

CHECK:SPACING: spaces preferred around that '|' (ctx:ExV)
#621: FILE: input_enumerator.h:37:
+		     |INPUT_DEVICE_ID_MATCH_VERSION)
 		     ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#623: FILE: input_enumerator.h:39:
+extern int get_devices(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#624: FILE: input_enumerator.h:40:
+extern size_t get_devices_desc(char **buf);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#626: FILE: input_enumerator.h:42:
+extern void fill_input_device(struct input_device_id *idi, int i);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#628: FILE: input_enumerator.h:44:
+extern int input_enum(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#629: FILE: input_enumerator.h:45:
+extern void free_input_enum(void);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#636: FILE: sin.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#653: FILE: sin.c:18:
+ *  with SIN; if not, write to the Free Software Foundation, Inc., 51 Franklin$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#716: FILE: sin.c:81:
+			if (likely(mod_timer(&timer, next))) {
+				WARN_ON(test_bit(RULE_OVER, &status));
+			}

CHECK:SPACING: No space is necessary after a cast
#728: FILE: sin.c:93:
+	(void) simulate_activity();

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#745: FILE: sin.c:110:
+	if (!(handle = kzalloc(sizeof(struct input_handle), GFP_KERNEL))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#745: FILE: sin.c:110:
+	if (!(handle = kzalloc(sizeof(struct input_handle), GFP_KERNEL))) {
+		return NULL;
+	}

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*handle)...) over kzalloc(sizeof(struct input_handle)...)
#745: FILE: sin.c:110:
+	if (!(handle = kzalloc(sizeof(struct input_handle), GFP_KERNEL))) {

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'timer_fn', this function's name, in a string
#769: FILE: sin.c:134:
+		printd(">>>>>>>>>>>> timer_fn()\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:BRACES: braces {} are not necessary for single statement blocks
#778: FILE: sin.c:143:
+		if (unlikely(test_and_clear_bit(RULE_MARK, &status))) {
+			signal_interaction();
+		}

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'timer_fn', this function's name, in a string
#790: FILE: sin.c:155:
+		printd("timer_fn() >>>>>>>>>>>>\n");

WARNING:BRACES: braces {} are not necessary for single statement blocks
#809: FILE: sin.c:174:
+	if  (err < 0) {
+		return err;
+	}

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#858: FILE: sin.c:223:
+static int __devinit sin_probe(struct platform_device *dev)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#864: FILE: sin.c:229:
+		printk(KERN_ERR "SIN: miscdev initialization failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#870: FILE: sin.c:235:
+		printk(KERN_ERR "SIN: input enumeration failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#876: FILE: sin.c:241:
+		printk(KERN_ERR "SIN: sysfs initialization failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#882: FILE: sin.c:247:
+	printk(KERN_DEBUG "System Inactivity Notifier 1.6 - (c) Alessandro Di Marco <dmr@gmx.it>\n");

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#894: FILE: sin.c:259:
+static int __devexit sin_remove(struct platform_device *dev)

CHECK:SPACING: No space is necessary after a cast
#899: FILE: sin.c:264:
+	(void) stop_monitor();

CHECK:SPACING: No space is necessary after a cast
#921: FILE: sin.c:286:
+		left = (long) now - (long) last_activity(&uact);

CHECK:SPACING: No space is necessary after a cast
#922: FILE: sin.c:287:
+		right = (long) timer.expires - (long) now;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#993: FILE: sin.c:358:
+	if (err < 0) {
+		goto out;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1004: FILE: sin.c:369:
+	if (err < 0) {
+		goto cleanout2;
+	}

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1030: FILE: sin.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1047: FILE: sin.h:18:
+ *  with SIN; if not, write to the Free Software Foundation, Inc., 51 Franklin$

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1065: FILE: sin.h:36:
+	spinlock_t lock;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1074: FILE: sin.h:45:
+	last = uact->last = jiffies;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:SPACING: No space is necessary after a cast
#1098: FILE: sin.h:69:
+	uact->last = (long) last - (long) offset;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1104: FILE: sin.h:75:
+extern unsigned long simulate_activity(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1105: FILE: sin.h:76:
+extern void signal_interaction(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1106: FILE: sin.h:77:
+extern void simulate_event(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1108: FILE: sin.h:79:
+extern int start_monitor(struct input_device_id *idi);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1109: FILE: sin.h:80:
+extern void stop_monitor(void);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1116: FILE: sysfs.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1133: FILE: sysfs.c:18:
+ *  with SIN; if not, write to the Free Software Foundation, Inc., 51 Franklin$

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_input' to 'input_show'
#1158: FILE: sysfs.c:43:
+}

The function names used in DEVICE_ATTR is unusual.
Typically, the store and show functions are used with <attr>_store and
<attr>_show, where <attr> is a named attribute variable of the device.

Consider the following examples::

  static DEVICE_ATTR(type, 0444, type_show, NULL);
  static DEVICE_ATTR(power, 0644, power_show, power_store);

The function names should preferably follow the above pattern.

See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device.html#attributes

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1170: FILE: sysfs.c:55:
+		if (size > PAGE_SIZE) {
+			size = PAGE_SIZE;
+		}

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_table' to 'table_show' 'store_table' to 'table_store'
#1185: FILE: sysfs.c:70:
+}

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'store_interact' to 'interact_store'
#1195: FILE: sysfs.c:80:
+}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1208: FILE: sysfs.c:93:
+	if (err < 0) {
+		goto out;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1213: FILE: sysfs.c:98:
+	if (err < 0) {
+		goto cleanout1;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1218: FILE: sysfs.c:103:
+	if (err < 0) {
+		goto cleanout2;
+	}

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1242: FILE: sysfs.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1259: FILE: sysfs.h:18:
+ *  with SIN; if not, write to the Free Software Foundation, Inc., 51 Franklin$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1266: FILE: sysfs.h:25:
+extern int start_sysfs(struct device *dev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1267: FILE: sysfs.h:26:
+extern void stop_sysfs(void);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1274: FILE: table.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1291: FILE: table.c:18:
+ *  with SIN; if not, write to the Free Software Foundation, Inc., 51 Franklin$

WARNING:STATIC_CONST_CHAR_ARRAY: char * array declaration might be better as static const
#1314: FILE: table.c:41:
+	char *envp_ext[] = {

WARNING:SIZEOF_PARENTHESIS: sizeof HINT should be sizeof(HINT)
#1319: FILE: table.c:46:
+	printd("sending hint '%s'\n", rule->hint + sizeof HINT - 1);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1322: FILE: table.c:49:
+		printk(KERN_ERR "SIN: hint '%s' failed\n",

WARNING:SIZEOF_PARENTHESIS: sizeof HINT should be sizeof(HINT)
#1323: FILE: table.c:50:
+		       rule->hint + sizeof HINT - 1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1347: FILE: table.c:74:
+	for (; next_rule < rt.rnum &&
+		     time_after_eq(jiffies, last + rt.rules[next_rule].target);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'endp' - possible side-effects?
#1375: FILE: table.c:102:
+#define parse_num(endp) ({						\
+			const char *cp = (endp);			\
+									\
+			while (*cp && isspace(*cp)) {			\
+				++cp;					\
+			}						\
+									\
+			simple_strtol(cp, (char **) &(endp), 10);	\
+		})

CHECK:SPACING: No space is necessary after a cast
#1382: FILE: table.c:109:
+			simple_strtol(cp, (char **) &(endp), 10);	\

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#1382: FILE: table.c:109:
+			simple_strtol(cp, (char **) &(endp), 10);	\

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1385: FILE: table.c:112:
+#define hint_value(key, hint) ((hint) + sizeof (key) - 1)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'key' - possible side-effects?
#1387: FILE: table.c:114:
+#define parse_hint(key, endp) ({					\
+			const char *l, *r;				\
+			char *h;					\
+									\
+			l = endp;					\
+									\
+			while (*l && isspace(*l)) {			\
+				++l;					\
+			}						\
+									\
+			r = l;						\
+									\
+			while (isalnum(*r)) {				\
+				++r;					\
+			}						\
+									\
+			(endp) = r;					\
+									\
+			h = kmalloc(hint_value(key, r - l + 1),		\
+				    GFP_KERNEL);			\
+			if (h) {					\
+				memcpy(h, (key), hint_value(key, 0));	\
+				memcpy(hint_value(key, h), l, r - l);	\
+									\
+				h[hint_value(key, r - l)] = '\0';	\
+			}						\
+									\
+			h;						\
+		})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'endp' - possible side-effects?
#1387: FILE: table.c:114:
+#define parse_hint(key, endp) ({					\
+			const char *l, *r;				\
+			char *h;					\
+									\
+			l = endp;					\
+									\
+			while (*l && isspace(*l)) {			\
+				++l;					\
+			}						\
+									\
+			r = l;						\
+									\
+			while (isalnum(*r)) {				\
+				++r;					\
+			}						\
+									\
+			(endp) = r;					\
+									\
+			h = kmalloc(hint_value(key, r - l + 1),		\
+				    GFP_KERNEL);			\
+			if (h) {					\
+				memcpy(h, (key), hint_value(key, 0));	\
+				memcpy(hint_value(key, h), l, r - l);	\
+									\
+				h[hint_value(key, r - l)] = '\0';	\
+			}						\
+									\
+			h;						\
+		})

CHECK:SPACING: No space is necessary after a cast
#1419: FILE: table.c:146:
+	long lt = ((struct rule *) l)->target;

CHECK:SPACING: No space is necessary after a cast
#1420: FILE: table.c:147:
+	long rt = ((struct rule *) r)->target;

CHECK:SPACING: No space is necessary after a cast
#1428: FILE: table.c:155:
+	struct rule t = *((struct rule *) l);

CHECK:SPACING: No space is necessary after a cast
#1430: FILE: table.c:157:
+	*((struct rule *) l) = *((struct rule *) r);

CHECK:SPACING: No space is necessary after a cast
#1431: FILE: table.c:158:
+	*((struct rule *) r) = t;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1444: FILE: table.c:171:
+	table = t = kmalloc(PAGE_SIZE, GFP_KERNEL);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1445: FILE: table.c:172:
+	if (!table) {
+		return -EFAULT;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1451: FILE: table.c:178:
+	for (i = 0; i < rt.dnum; i++) {
+		t += sprintf(t, "%d ", rt.devices[i]);
+	}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1499: FILE: table.c:226:
+	nrt.devices = kmalloc(nrt.dnum * sizeof (int), GFP_KERNEL);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1500: FILE: table.c:227:
+	if (!nrt.devices) {
+		goto out;
+	}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1504: FILE: table.c:231:
+	nrt.rules = kmalloc((nrt.rnum + 1) * sizeof (struct rule), GFP_KERNEL);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1505: FILE: table.c:232:
+	if (!nrt.rules) {
+		goto cleanout1;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1509: FILE: table.c:236:
+	if (uniq_alloc(&uniq, devices) < 0) {
+		goto cleanout2;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1515: FILE: table.c:242:
+		if (uniq_check(&uniq, nrt.devices[i])) {
+			break;
+		}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1549: FILE: table.c:276:
+	sort(nrt.rules, nrt.rnum, sizeof (struct rule), cmp, swap);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1559: FILE: table.c:286:
+		      sizeof (struct input_device_id), GFP_KERNEL);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1560: FILE: table.c:287:
+	if (!idi) {
+		goto cleanout2;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1564: FILE: table.c:291:
+	for (i = 0; i < nrt.dnum; i++) {
+		fill_input_device(&idi[i], nrt.devices[i]);
+	}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1568: FILE: table.c:295:
+	memcpy(&rt, &nrt, sizeof (struct table));

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1571: FILE: table.c:298:
+	if (err < 0) {
+		goto cleanout3;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1578: FILE: table.c:305:
+	if (err < 0) {
+		goto cleanout3;
+	}

WARNING:SIZEOF_PARENTHESIS: sizeof TABLE_HELP should be sizeof(TABLE_HELP)
#1600: FILE: table.c:327:
+		size = sizeof TABLE_HELP;

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1603: FILE: table.c:330:
+		if (table) {
[...]
+		} else {
[...]

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1620: FILE: table.c:347:
+	memset(&rt, 0, sizeof (struct table));

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1631: FILE: table.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1648: FILE: table.h:18:
+ *  with SIN; if not, write to the Free Software Foundation, Inc., 51 Franklin$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1682: FILE: table.h:52:
+	if (memcmp(l->devices, r->devices, l->dnum * sizeof (int))) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1689: FILE: table.h:59:
+		if (l->rules[i].target != r->rules[i].target
+		    || strcmp(l->rules[i].hint, r->rules[i].hint)) {

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1701: FILE: table.h:71:
+extern void special_event(struct kobject *kobj);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1702: FILE: table.h:72:
+extern unsigned long occasionally_generate_event(struct kobject *kobj, unsigned long last);

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#1703: FILE: table.h:73:
+extern unsigned long timely_generate_event(struct kobject *kobj, unsigned long last, unsigned long *notify);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1703: FILE: table.h:73:
+extern unsigned long timely_generate_event(struct kobject *kobj, unsigned long last, unsigned long *notify);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1705: FILE: table.h:75:
+extern int push_table(const char *buf, unsigned long count);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1706: FILE: table.h:76:
+extern size_t pull_table(char **buf);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1707: FILE: table.h:77:
+extern void cleanup_table(void);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1714: FILE: uniq.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1731: FILE: uniq.h:18:
+ *  with SIN; if not, write to the Free Software Foundation, Inc., 51 Franklin$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#1740: FILE: uniq.h:27:
+#define out_of_range(l, x, u) ((x) < (l) || (x) >= (u))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1749: FILE: uniq.h:36:
+	int size = (1 + elm / sizeof (unsigned long)) * sizeof (unsigned long);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1749: FILE: uniq.h:36:
+	int size = (1 + elm / sizeof (unsigned long)) * sizeof (unsigned long);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1754: FILE: uniq.h:41:
+	if (!ci->bitmap) {
+		return -ENOMEM;
+	}

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1769: FILE: uniq.h:56:
+	return out_of_range(0, index, ci->elements)
+		|| test_and_set_bit(index, ci->bitmap);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000474716.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 15 errors, 77 warnings, 45 checks, 1655 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000474716.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
