WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#185: FILE: arch/x86/kernel/io_apic.c:134:
+	printk(KERN_DEBUG "  alloc irq_2_pin on cpu %d node %d\n", cpu, node);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#260: FILE: arch/x86/kernel/io_apic.c:190:
+	BUG_ON(count > count_desc);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#294: FILE: arch/x86/kernel/io_apic.c:221:
+	printk(KERN_DEBUG "  alloc irq_cfg on cpu %d node %d\n", cpu, node);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#332: FILE: arch/x86/kernel/io_apic.c:241:
+static void init_copy_irq_2_pin(struct irq_cfg *old_cfg, struct irq_cfg *cfg,
+				 int cpu);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#336: FILE: arch/x86/kernel/io_apic.c:244:
+void arch_init_copy_chip_data(struct irq_desc *old_desc,
+				 struct irq_desc *desc, int cpu)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#378: FILE: arch/x86/kernel/io_apic.c:274:
+static void init_copy_irq_2_pin(struct irq_cfg *old_cfg, struct irq_cfg *cfg,
+				 int cpu)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#420: FILE: arch/x86/kernel/io_apic.c:316:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#564: FILE: arch/x86/kernel/io_apic.c:589:
+static void __init replace_pin_at_irq_cpu(struct irq_cfg *cfg, int cpu,
 				      int oldapic, int oldpin,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#581: FILE: arch/x86/kernel/io_apic.c:612:
+static inline void io_apic_modify_irq(struct irq_cfg *cfg,
 				int mask_and, int mask_or,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#627: FILE: arch/x86/kernel/io_apic.c:660:
+	io_apic_modify_irq(cfg, ~IO_APIC_REDIR_LEVEL_TRIGGER,
 			IO_APIC_REDIR_MASKED, NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#635: FILE: arch/x86/kernel/io_apic.c:666:
+	io_apic_modify_irq(cfg, ~IO_APIC_REDIR_MASKED,
 			IO_APIC_REDIR_LEVEL_TRIGGER, NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#652: FILE: arch/x86/kernel/io_apic.c:682:
+	BUG_ON(!cfg);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cfg->move_in_progress'
#704: FILE: arch/x86/kernel/io_apic.c:1224:
+	if ((cfg->move_in_progress) || cfg->move_cleanup_count)

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:LINE_SPACING: Missing a blank line after declarations
#813: FILE: arch/x86/kernel/io_apic.c:1697:
+		struct irq_pin_list *entry;
+		cfg = desc->chip_data;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1148: FILE: arch/x86/kernel/io_apic.c:2688:
+static void mask_lapic_irq (unsigned int irq, struct irq_desc **descp)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1150: FILE: arch/x86/kernel/io_apic.c:2690:
+static void mask_lapic_irq (unsigned int irq)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1161: FILE: arch/x86/kernel/io_apic.c:2700:
+static void unmask_lapic_irq (unsigned int irq, struct irq_desc **descp)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1163: FILE: arch/x86/kernel/io_apic.c:2702:
+static void unmask_lapic_irq (unsigned int irq)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1173: FILE: arch/x86/kernel/io_apic.c:2712:
+static void ack_lapic_irq (unsigned int irq, struct irq_desc **descp)

WARNING:PREFER_DEV_LEVEL: Prefer dev_dbg(... to dev_printk(KERN_DEBUG, ...
#1369: FILE: arch/x86/kernel/io_apic.c:3469:
+	dev_printk(KERN_DEBUG, &dev->dev, "irq %d aka 0x%08x for MSI/MSI-X\n", irq, irq);

WARNING:PREFER_DEV_LEVEL: Prefer dev_dbg(... to dev_printk(KERN_DEBUG, ...
#1490: FILE: arch/x86/kernel/io_apic.c:3809:
+		dev_printk(KERN_DEBUG, &dev->dev, "irq %d aka 0x%08x for HT\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1491: FILE: arch/x86/kernel/io_apic.c:3810:
+		dev_printk(KERN_DEBUG, &dev->dev, "irq %d aka 0x%08x for HT\n",
+				 irq, irq);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1750: FILE: drivers/pci/intr_remapping.c:33:
+	printk(KERN_DEBUG "alloc irq_2_iommu on cpu %d node %d\n", cpu, node);

CHECK:CAMELCASE: Avoid CamelCase: <irq_2_iommuX>
#1793: FILE: drivers/pci/intr_remapping.c:75:
+static struct irq_2_iommu irq_2_iommuX[NR_IRQS];

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2017: FILE: include/linux/irq.h:204:
+extern struct irq_desc *irq_to_desc(unsigned int irq);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2018: FILE: include/linux/irq.h:205:
+extern struct irq_desc *irq_to_desc_alloc_cpu(unsigned int irq, int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2019: FILE: include/linux/irq.h:206:
+extern struct irq_desc *irq_to_desc_alloc(unsigned int irq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2020: FILE: include/linux/irq.h:207:
+extern struct irq_desc *move_irq_desc(struct irq_desc *old_desc, int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2021: FILE: include/linux/irq.h:208:
+extern void arch_early_irq_init_work(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2022: FILE: include/linux/irq.h:209:
+extern void arch_init_chip_data(struct irq_desc *desc, int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2023: FILE: include/linux/irq.h:210:
+extern void arch_init_copy_chip_data(struct irq_desc *old_desc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2024: FILE: include/linux/irq.h:211:
+extern void arch_init_copy_chip_data(struct irq_desc *old_desc,
+					struct irq_desc *desc, int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2025: FILE: include/linux/irq.h:212:
+extern void arch_free_chip_data(struct irq_desc *desc);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'irq' - possible side-effects?
#2037: FILE: include/linux/irq.h:220:
+# define for_each_irq_desc(irq, desc)		\
+	for (irq = 0, desc = irq_desc; irq < nr_irqs; irq++, desc++)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'desc' - possible side-effects?
#2037: FILE: include/linux/irq.h:220:
+# define for_each_irq_desc(irq, desc)		\
+	for (irq = 0, desc = irq_desc; irq < nr_irqs; irq++, desc++)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'irq' - possible side-effects?
#2039: FILE: include/linux/irq.h:222:
+# define for_each_irq_desc_reverse(irq, desc)                          \
+	for (irq = nr_irqs - 1, desc = irq_desc + (nr_irqs - 1);        \
+	    irq >= 0; irq--, desc--)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'desc' - possible side-effects?
#2039: FILE: include/linux/irq.h:222:
+# define for_each_irq_desc_reverse(irq, desc)                          \
+	for (irq = nr_irqs - 1, desc = irq_desc + (nr_irqs - 1);        \
+	    irq >= 0; irq--, desc--)

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2050: FILE: include/linux/irq.h:233:
+#define for_each_irq_desc(irqX, desc)					\
+	rcu_read_lock();						\
+	for (desc = list_entry(rcu_dereference(sparse_irqs_head.next), typeof(*desc), list), irqX = desc->irq; \
+		prefetch(desc->list.next), &desc->list != &sparse_irqs_head; \
+		desc = list_entry(rcu_dereference(desc->list.next), typeof(*desc), list), irqX = desc ? desc->irq : -1U)

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'irqX' - possible side-effects?
#2050: FILE: include/linux/irq.h:233:
+#define for_each_irq_desc(irqX, desc)					\
+	rcu_read_lock();						\
+	for (desc = list_entry(rcu_dereference(sparse_irqs_head.next), typeof(*desc), list), irqX = desc->irq; \
+		prefetch(desc->list.next), &desc->list != &sparse_irqs_head; \
+		desc = list_entry(rcu_dereference(desc->list.next), typeof(*desc), list), irqX = desc ? desc->irq : -1U)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'desc' - possible side-effects?
#2050: FILE: include/linux/irq.h:233:
+#define for_each_irq_desc(irqX, desc)					\
+	rcu_read_lock();						\
+	for (desc = list_entry(rcu_dereference(sparse_irqs_head.next), typeof(*desc), list), irqX = desc->irq; \
+		prefetch(desc->list.next), &desc->list != &sparse_irqs_head; \
+		desc = list_entry(rcu_dereference(desc->list.next), typeof(*desc), list), irqX = desc ? desc->irq : -1U)

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#2052: FILE: include/linux/irq.h:235:
+	for (desc = list_entry(rcu_dereference(sparse_irqs_head.next), typeof(*desc), list), irqX = desc->irq; \

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#2054: FILE: include/linux/irq.h:237:
+		desc = list_entry(rcu_dereference(desc->list.next), typeof(*desc), list), irqX = desc ? desc->irq : -1U)

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2056: FILE: include/linux/irq.h:239:
+#define for_each_irq_desc_reverse(irqX, desc)				\
+	rcu_read_lock();						\
+	for (desc = list_entry(rcu_dereference(sparse_irqs_head.prev), typeof(*desc), list), irqX = desc->irq; \
+		prefetch(desc->list.prev), &desc->list != &sparse_irqs_head; \
+		desc = list_entry(rcu_dereference(desc->list.prev), typeof(*desc), list), irqX = desc ? desc->irq : -1U)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'irqX' - possible side-effects?
#2056: FILE: include/linux/irq.h:239:
+#define for_each_irq_desc_reverse(irqX, desc)				\
+	rcu_read_lock();						\
+	for (desc = list_entry(rcu_dereference(sparse_irqs_head.prev), typeof(*desc), list), irqX = desc->irq; \
+		prefetch(desc->list.prev), &desc->list != &sparse_irqs_head; \
+		desc = list_entry(rcu_dereference(desc->list.prev), typeof(*desc), list), irqX = desc ? desc->irq : -1U)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'desc' - possible side-effects?
#2056: FILE: include/linux/irq.h:239:
+#define for_each_irq_desc_reverse(irqX, desc)				\
+	rcu_read_lock();						\
+	for (desc = list_entry(rcu_dereference(sparse_irqs_head.prev), typeof(*desc), list), irqX = desc->irq; \
+		prefetch(desc->list.prev), &desc->list != &sparse_irqs_head; \
+		desc = list_entry(rcu_dereference(desc->list.prev), typeof(*desc), list), irqX = desc ? desc->irq : -1U)

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#2058: FILE: include/linux/irq.h:241:
+	for (desc = list_entry(rcu_dereference(sparse_irqs_head.prev), typeof(*desc), list), irqX = desc->irq; \

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#2060: FILE: include/linux/irq.h:243:
+		desc = list_entry(rcu_dereference(desc->list.prev), typeof(*desc), list), irqX = desc ? desc->irq : -1U)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2096: FILE: include/linux/kernel_stat.h:32:
+       unsigned int irqs[NR_IRQS];$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2125: FILE: include/linux/kernel_stat.h:64:
+extern unsigned int kstat_irqs_cpu(unsigned int irq, int cpu);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2376: FILE: kernel/irq/chip.c:627:
+		if (desc->chip != &no_irq_chip) {
+			mask_ack_irq(&desc, irq);
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#2407: FILE: kernel/irq/handle.c:59:
+void __init __attribute__((weak)) arch_early_irq_init_work(void)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#2438: FILE: kernel/irq/handle.c:90:
+	printk(KERN_DEBUG "  alloc kstat_irqs on cpu %d node %d\n", cpu, node);

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#2464: FILE: kernel/irq/handle.c:116:
+void __attribute__((weak)) arch_init_chip_data(struct irq_desc *desc, int cpu)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2482: FILE: kernel/irq/handle.c:134:
+static void init_copy_one_irq_desc(int irq, struct irq_desc *old_desc,
+		 struct irq_desc *desc, int cpu)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2507: FILE: kernel/irq/handle.c:159:
+#define SPARSEIRQHASH_SIZE          (1UL << SPARSEIRQHASH_BITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2514: FILE: kernel/irq/handle.c:166:
+	[0 ... NR_IRQS_LEGACY-1] = {
 	                     ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#2603: FILE: kernel/irq/handle.c:255:
+	printk(KERN_DEBUG "  alloc irq_desc for %d aka %#x on cpu %d node %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2604: FILE: kernel/irq/handle.c:256:
+	printk(KERN_DEBUG "  alloc irq_desc for %d aka %#x on cpu %d node %d\n",
+		 irq, irq, cpu, node);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2630: FILE: kernel/irq/handle.c:282:
+static struct irq_desc *__real_move_irq_desc(struct irq_desc *old_desc,
+						int cpu)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#2656: FILE: kernel/irq/handle.c:308:
+	printk(KERN_DEBUG "  move irq_desc for %d aka %#x to cpu %d node %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2657: FILE: kernel/irq/handle.c:309:
+	printk(KERN_DEBUG "  move irq_desc for %d aka %#x to cpu %d node %d\n",
+		 irq, irq, cpu, node);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#2684: FILE: kernel/irq/handle.c:336:
+	printk(KERN_DEBUG "try to move irq_desc from cpu %d to %d\n", old_cpu, cpu);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2714: FILE: kernel/irq/handle.c:372:
+}
+struct irq_desc *irq_to_desc_alloc_cpu(unsigned int irq, int cpu)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2718: FILE: kernel/irq/handle.c:376:
+}
+struct irq_desc *irq_to_desc_alloc(unsigned int irq)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2722: FILE: kernel/irq/handle.c:380:
+}
+struct irq_desc *move_irq_desc(struct irq_desc *old_desc, int cpu)

WARNING:LINE_SPACING: Missing a blank line after declarations
#2851: FILE: kernel/irq/handle.c:631:
+	struct irq_desc *desc = irq_to_desc(irq);
+	return desc->kstat_irqs[cpu];

CHECK:SPACING: No space is necessary after a cast
#2876: FILE: arch/x86/kernel/irq.c:113:
+	i = *(loff_t *) v;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#3040: FILE: init/main.c:544:
+void __init __attribute__((weak)) arch_early_irq_init_work(void)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#3044: FILE: init/main.c:548:
+void __init __attribute__((weak)) early_irq_init_work(void)

WARNING:LINE_SPACING: Missing a blank line after declarations
#3258: FILE: drivers/pci/msi.c:322:
+		struct irq_desc *desc = irq_to_desc(dev->irq);
+		msi_set_mask_bits(desc, entry->msi_attrib.maskbits_mask,

WARNING:LINE_SPACING: Missing a blank line after declarations
#3281: FILE: drivers/pci/msi.c:617:
+		struct irq_desc *desc = irq_to_desc(dev->irq);
+		msi_set_mask_bits(desc, mask, ~mask);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3295: FILE: include/linux/msi.h:15:
+extern void mask_msi_irq(unsigned int irq, struct irq_desc **descp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3296: FILE: include/linux/msi.h:16:
+extern void unmask_msi_irq(unsigned int irq, struct irq_desc **descp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3313: FILE: arch/x86/include/asm/hpet.h:76:
+extern void hpet_msi_unmask(unsigned int irq, struct irq_desc **descp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3314: FILE: arch/x86/include/asm/hpet.h:77:
+extern void hpet_msi_mask(unsigned int irq, struct irq_desc **descp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3457: FILE: include/linux/dmar.h:126:
+extern void dmar_msi_unmask(unsigned int irq, struct irq_desc **descp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3458: FILE: include/linux/dmar.h:127:
+extern void dmar_msi_mask(unsigned int irq, struct irq_desc **descp);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000205747.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 30 warnings, 45 checks, 3037 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000205747.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
