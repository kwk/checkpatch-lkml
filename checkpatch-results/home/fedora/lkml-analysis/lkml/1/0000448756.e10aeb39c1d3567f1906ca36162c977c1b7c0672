CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#105: FILE: drivers/lguest/core.c:219:
+	if (!lguest_address_ok(lg, addr)
+	    || get_user(val, (u32 __user *)addr) != 0)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#116: FILE: drivers/lguest/core.c:230:
+	if (!lguest_address_ok(lg, addr)
+	    || get_user(val, (u32 __user *)addr) != 0)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#166: FILE: drivers/lguest/lguest.c:52:
+extern const unsigned long kallsyms_addresses[] __attribute__((weak));

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#166: FILE: drivers/lguest/lguest.c:52:
+extern const unsigned long kallsyms_addresses[] __attribute__((weak));

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#167: FILE: drivers/lguest/lguest.c:53:
+extern const unsigned long kallsyms_num_syms __attribute__((weak));

ERROR:WEAK_DECLARATION: Using weak declarations can have unintended link defects
#167: FILE: drivers/lguest/lguest.c:53:
+extern const unsigned long kallsyms_num_syms __attribute__((weak));

Using weak declarations like __attribute__((weak)) or __weak
can have unintended link defects.  Avoid using them.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#167: FILE: drivers/lguest/lguest.c:53:
+extern const unsigned long kallsyms_num_syms __attribute__((weak));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#168: FILE: drivers/lguest/lguest.c:54:
+extern const u8 kallsyms_names[] __attribute__((weak));

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#168: FILE: drivers/lguest/lguest.c:54:
+extern const u8 kallsyms_names[] __attribute__((weak));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#169: FILE: drivers/lguest/lguest.c:55:
+extern const u8 kallsyms_token_table[] __attribute__((weak));

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#169: FILE: drivers/lguest/lguest.c:55:
+extern const u8 kallsyms_token_table[] __attribute__((weak));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#170: FILE: drivers/lguest/lguest.c:56:
+extern const u16 kallsyms_token_index[] __attribute__((weak));

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#170: FILE: drivers/lguest/lguest.c:56:
+extern const u16 kallsyms_token_index[] __attribute__((weak));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#171: FILE: drivers/lguest/lguest.c:57:
+extern const unsigned long kallsyms_markers[] __attribute__((weak));

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#171: FILE: drivers/lguest/lguest.c:57:
+extern const unsigned long kallsyms_markers[] __attribute__((weak));

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#212: FILE: drivers/lguest/lguest_debug.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#213: FILE: drivers/lguest/lguest_debug.c:2:
+/*
+    lguest debug utils. Modified from various other parts of Linux.

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#227: FILE: drivers/lguest/lguest_debug.c:16:
+    along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#228: FILE: drivers/lguest/lguest_debug.c:17:
+    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA$

WARNING:INCLUDE_LINUX: Use #include <linux/pgtable.h> instead of <asm/pgtable.h>
#235: FILE: drivers/lguest/lguest_debug.c:24:
+#include <asm/pgtable.h>

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#236: FILE: drivers/lguest/lguest_debug.c:25:
+#include <asm/uaccess.h>

WARNING:IF_1: Consider removing the #if 1 and its #endif
#239: FILE: drivers/lguest/lguest_debug.c:28:
+#if 1

ERROR:SPACING: space required before the open parenthesis '('
#242: FILE: drivers/lguest/lguest_debug.c:31:
+#define DEBUG_DUMP_STACK() do { } while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#259: FILE: drivers/lguest/lguest_debug.c:48:
+	vsnprintf(lgdebug_print_buf, LGDEBUG_BUF_SIZ-1, fmt, ap);
 	                                            ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#260: FILE: drivers/lguest/lguest_debug.c:49:
+	printk("%s", lgdebug_print_buf);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#277: FILE: drivers/lguest/lguest_debug.c:66:
+void lgdebug_lprint(unsigned flags, const char *fmt, ...)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#289: FILE: drivers/lguest/lguest_debug.c:78:
+void lgdebug_lvprint(unsigned flags, const char *fmt, va_list ap)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#303: FILE: drivers/lguest/lguest_debug.c:92:
+	printk("called from ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#306: FILE: drivers/lguest/lguest_debug.c:95:
+	printk("Printing LG %d regs cr3: %08lx\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#308: FILE: drivers/lguest/lguest_debug.c:97:
+	printk("EIP: %04x: ", regs->cs & 0xffff);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#310: FILE: drivers/lguest/lguest_debug.c:99:
+	printk("ESP: %04x:%08x  EFLAGS: %08x\n", regs->ss, regs->esp,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#311: FILE: drivers/lguest/lguest_debug.c:100:
+	printk("ESP: %04x:%08x  EFLAGS: %08x\n", regs->ss, regs->esp,
+		regs->eflags);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#312: FILE: drivers/lguest/lguest_debug.c:101:
+	printk("EAX: %08x EBX: %08x ECX: %08x EDX: %08x\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#314: FILE: drivers/lguest/lguest_debug.c:103:
+	printk("ESI: %08x EDI: %08x EBP: %08x\n",

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#316: FILE: drivers/lguest/lguest_debug.c:105:
+#if 0

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#317: FILE: drivers/lguest/lguest_debug.c:106:
+	printk("FS %04llx: Base: %016lx  Desc: %08lx\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#324: FILE: drivers/lguest/lguest_debug.c:113:
+	printk(" CR2: %lx  lguest_data->cr2: %lx\n", cr2, data_cr2);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#326: FILE: drivers/lguest/lguest_debug.c:115:
+	printk("errcode: %x   trapnum: %x\n",

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#355: FILE: drivers/lguest/lguest_debug.c:144:
+	g = (struct lguest_text_ptr*)addr;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#360: FILE: drivers/lguest/lguest_debug.c:149:
+	for (i=0; i < 10; i++) {
 	      ^

ERROR:POINTER_LOCATION: "(foo**)" should be "(foo **)"
#367: FILE: drivers/lguest/lguest_debug.c:156:
+		p = (struct lguest_text_ptr**)&((*p)->next);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#370: FILE: drivers/lguest/lguest_debug.c:159:
+		g = (struct lguest_text_ptr*)addr;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#378: FILE: drivers/lguest/lguest_debug.c:167:
+		g = (struct lguest_text_ptr*)segs->next;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#391: FILE: drivers/lguest/lguest_debug.c:180:
+		segs = (struct lguest_text_ptr*)segs->next;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#401: FILE: drivers/lguest/lguest_debug.c:190:
+		p = (struct lguest_text_ptr*)segs->next;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#422: FILE: drivers/lguest/lguest_debug.c:211:
+	 * the compressed stream */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#426: FILE: drivers/lguest/lguest_debug.c:215:
+	/* for every byte on the compressed symbol data, copy the table
+	   entry for that byte */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#426: FILE: drivers/lguest/lguest_debug.c:215:
+	   entry for that byte */

ERROR:SPACING: space required before the open parenthesis '('
#427: FILE: drivers/lguest/lguest_debug.c:216:
+	while(len) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#430: FILE: drivers/lguest/lguest_debug.c:219:
+		u16 tok;
+		idx = lgread_u8(lg, (unsigned long)data);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited after that open square bracket '['
#432: FILE: drivers/lguest/lguest_debug.c:221:
+		tptr = &kstuff->token_table[ tok ];

ERROR:SPACING: space prohibited before that close square bracket ']'
#432: FILE: drivers/lguest/lguest_debug.c:221:
+		tptr = &kstuff->token_table[ tok ];

ERROR:SPACING: space required before the open parenthesis '('
#438: FILE: drivers/lguest/lguest_debug.c:227:
+			if(skipped_first) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#438: FILE: drivers/lguest/lguest_debug.c:227:
+			if(skipped_first) {
[...]
+			} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#441: FILE: drivers/lguest/lguest_debug.c:230:
+			} else

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#479: FILE: drivers/lguest/lguest_debug.c:268:
+	while (low && kstuff->addresses[low-1] == kstuff->addresses[low])
 	                                   ^

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#495: FILE: drivers/lguest/lguest_debug.c:284:
+#if 0

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#526: FILE: drivers/lguest/lguest_debug.c:315:
+	idx = lgread_u32(lg, (unsigned long)&kstuff->markers[pos>>8]);
 	                                                        ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#529: FILE: drivers/lguest/lguest_debug.c:318:
+	 * so that should be close enough */

ERROR:SPACING: space prohibited after that open square bracket '['
#530: FILE: drivers/lguest/lguest_debug.c:319:
+	name = &kstuff->names[ idx ];

ERROR:SPACING: space prohibited before that close square bracket ']'
#530: FILE: drivers/lguest/lguest_debug.c:319:
+	name = &kstuff->names[ idx ];

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#535: FILE: drivers/lguest/lguest_debug.c:324:
+	 * wish to skip */

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#536: FILE: drivers/lguest/lguest_debug.c:325:
+	for(i = 0; i < (pos&0xFF); i++) {
 	                   ^

ERROR:SPACING: space required before the open parenthesis '('
#536: FILE: drivers/lguest/lguest_debug.c:325:
+	for(i = 0; i < (pos&0xFF); i++) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#538: FILE: drivers/lguest/lguest_debug.c:327:
+		u8 c;
+		c = lgread_u8(lg, (unsigned long)name);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#557: FILE: drivers/lguest/lguest_debug.c:346:
+	kstuff.addresses = (unsigned long*)lgread_u32(lg,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#560: FILE: drivers/lguest/lguest_debug.c:349:
+	kstuff.names = (u8*)lgread_u32(lg, (unsigned long)&data->kallsyms_names);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#561: FILE: drivers/lguest/lguest_debug.c:350:
+	kstuff.token_table = (u8*)lgread_u32(lg,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#563: FILE: drivers/lguest/lguest_debug.c:352:
+	kstuff.token_index = (u16*)lgread_u32(lg,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#565: FILE: drivers/lguest/lguest_debug.c:354:
+	kstuff.markers = (unsigned long*)lgread_u32(lg,

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#574: FILE: drivers/lguest/lguest_debug.c:363:
+	ptr = kmalloc(sizeof(unsigned long)*kstuff.num_syms, GFP_KERNEL);
 	                                   ^

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#574: FILE: drivers/lguest/lguest_debug.c:363:
+	ptr = kmalloc(sizeof(unsigned long)*kstuff.num_syms, GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#578: FILE: drivers/lguest/lguest_debug.c:367:
+	for (i=0; i < kstuff.num_syms; i++) {
 	      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#581: FILE: drivers/lguest/lguest_debug.c:370:
+		if (i && ptr[i] < ptr[i-1]) {
 		                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#625: FILE: drivers/lguest/lguest_debug.c:414:
+	char namebuf[KSYM_NAME_LEN+1];
 	                          ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#630: FILE: drivers/lguest/lguest_debug.c:419:
+		printk(" [<%016lx>]\n", address);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#634: FILE: drivers/lguest/lguest_debug.c:423:
+		modname = delim = "";

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#635: FILE: drivers/lguest/lguest_debug.c:424:
+	printk(" [<%016lx>] %s%s%s%s+0x%lx/0x%lx\n",

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#638: FILE: drivers/lguest/lguest_debug.c:427:
+
+}

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#647: FILE: drivers/lguest/lguest_debug.c:436:
+	printk("Stack Dump:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#649: FILE: drivers/lguest/lguest_debug.c:438:
+		printk("  <USER STACK>\n");

WARNING:BRACES: braces {} are not necessary for single statement blocks
#659: FILE: drivers/lguest/lguest_debug.c:448:
+		if (is_text_seg(segs, addr)) {
+			lguest_print_address(lg, addr);
+		}

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#667: FILE: drivers/lguest/lguest_debug.c:456:
+	printk("=======\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000448756.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 24 errors, 45 warnings, 14 checks, 589 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000448756.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
