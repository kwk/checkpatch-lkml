WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
but now perf lock can provide minimal functions for analyzing lock statistics.

WARNING:TYPO_SPELLING: 'containts' may be misspelled - perhaps 'contains'?
#34: 
This patch containts some over-80 chars line,
           ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#99: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#104: FILE: tools/perf/builtin-lock.c:1:
+#include "builtin.h"

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:BIT_MACRO: Prefer using the BIT macro
#131: FILE: tools/perf/builtin-lock.c:28:
+#define LOCKHASH_SIZE		(1UL << LOCKHASH_BITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:TYPO_SPELLING: 'dealed' may be misspelled - perhaps 'dealt'?
#146: FILE: tools/perf/builtin-lock.c:43:
+	 * so address of lockdep_map should be dealed as 64bit.
 	                                       ^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#147: FILE: tools/perf/builtin-lock.c:44:
+	 * Is there more better solution? */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'member' - possible side-effects?
#168: FILE: tools/perf/builtin-lock.c:65:
+#define SINGLE_KEY(member)					\
+	static int lock_stat_key_ ## member(struct lock_stat *one,	\
+					 struct lock_stat *two)		\
+	{								\
+		return one->member > two->member;			\
+	}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'member' may be better as '(member)' to avoid precedence issues
#168: FILE: tools/perf/builtin-lock.c:65:
+#define SINGLE_KEY(member)					\
+	static int lock_stat_key_ ## member(struct lock_stat *one,	\
+					 struct lock_stat *two)		\
+	{								\
+		return one->member > two->member;			\
+	}

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct lock_stat*' should also have an identifier name
#188: FILE: tools/perf/builtin-lock.c:85:
+	int (*key)(struct lock_stat*, struct lock_stat*);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct lock_stat*' should also have an identifier name
#188: FILE: tools/perf/builtin-lock.c:85:
+	int (*key)(struct lock_stat*, struct lock_stat*);

WARNING:STATIC_CONST: Move const after static - use 'static const char'
#298: FILE: tools/perf/builtin-lock.c:195:
+static char			const *input_name = "perf.data";

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct trace_acquire_event *' should also have an identifier name
#336: FILE: tools/perf/builtin-lock.c:233:
+	void (*acquire_event)(struct trace_acquire_event *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct event *' should also have an identifier name
#336: FILE: tools/perf/builtin-lock.c:233:
+	void (*acquire_event)(struct trace_acquire_event *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct trace_acquired_event *' should also have an identifier name
#342: FILE: tools/perf/builtin-lock.c:239:
+	void (*acquired_event)(struct trace_acquired_event *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct event *' should also have an identifier name
#342: FILE: tools/perf/builtin-lock.c:239:
+	void (*acquired_event)(struct trace_acquired_event *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct trace_contended_event *' should also have an identifier name
#348: FILE: tools/perf/builtin-lock.c:245:
+	void (*contended_event)(struct trace_contended_event *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct event *' should also have an identifier name
#348: FILE: tools/perf/builtin-lock.c:245:
+	void (*contended_event)(struct trace_contended_event *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct trace_release_event *' should also have an identifier name
#354: FILE: tools/perf/builtin-lock.c:251:
+	void (*release_event)(struct trace_release_event *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct event *' should also have an identifier name
#354: FILE: tools/perf/builtin-lock.c:251:
+	void (*release_event)(struct trace_release_event *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#362: FILE: tools/perf/builtin-lock.c:259:
+static void prof_lock_acquire_event(struct trace_acquire_event *acquire_event,
+			struct event *__event __used,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#378: FILE: tools/perf/builtin-lock.c:275:
+		BUG_ON(1);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#386: FILE: tools/perf/builtin-lock.c:283:
+static void prof_lock_acquired_event(struct trace_acquired_event *acquired_event,
+			 struct event *__event __used,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#404: FILE: tools/perf/builtin-lock.c:301:
+		BUG_ON(1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#412: FILE: tools/perf/builtin-lock.c:309:
+static void prof_lock_contended_event(struct trace_contended_event *contended_event,
+			  struct event *__event __used,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#429: FILE: tools/perf/builtin-lock.c:326:
+		BUG_ON(1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#437: FILE: tools/perf/builtin-lock.c:334:
+static void prof_lock_release_event(struct trace_release_event *release_event,
+			struct event *__event __used,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#469: FILE: tools/perf/builtin-lock.c:366:
+		BUG_ON(1);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!thread"
#613: FILE: tools/perf/builtin-lock.c:510:
+	if (thread == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: No space is necessary after a cast
#621: FILE: tools/perf/builtin-lock.c:518:
+	if (profile_cpu != -1 && profile_cpu != (int) data.cpu)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#732: FILE: tools/perf/builtin-lock.c:629:
+	OPT_STRING('k', "key", &sort_key, "acquired",
+		    "key for sorting"),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#744: FILE: tools/perf/builtin-lock.c:641:
+	OPT_STRING('i', "input", &input_name, "file",
+		    "input file name"),

WARNING:STATIC_CONST_CHAR_ARRAY: static const char * array should probably be static const char * const
#752: FILE: tools/perf/builtin-lock.c:649:
+static const char *record_args[] = {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#780: FILE: tools/perf/builtin-lock.c:677:
+	BUG_ON(i != rec_argc);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#832: FILE: tools/perf/builtin.h:34:
+extern int cmd_lock(int argc, const char **argv, const char *prefix);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000021082.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 23 warnings, 12 checks, 740 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000021082.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
