WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#50: 
   git://git.kernel.org/pub/scm/linux/kernel/git/x86/linux-2.6-generic-bitops-v2.git for-linus

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#199: 
deleted file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#477: FILE: include/asm-generic/bitops/__fls.h:1:
+#ifndef _ASM_GENERIC_BITOPS___FLS_H_

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#498: FILE: include/asm-generic/bitops/__fls.h:22:
+	if (!(word & (~0ul << (BITS_PER_LONG-16)))) {
 	                                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#502: FILE: include/asm-generic/bitops/__fls.h:26:
+	if (!(word & (~0ul << (BITS_PER_LONG-8)))) {
 	                                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#506: FILE: include/asm-generic/bitops/__fls.h:30:
+	if (!(word & (~0ul << (BITS_PER_LONG-4)))) {
 	                                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#510: FILE: include/asm-generic/bitops/__fls.h:34:
+	if (!(word & (~0ul << (BITS_PER_LONG-2)))) {
 	                                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#514: FILE: include/asm-generic/bitops/__fls.h:38:
+	if (!(word & (~0ul << (BITS_PER_LONG-1))))
 	                                    ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#590: FILE: include/asm-ia64/bitops.h:415:
+__fls (unsigned long x)

WARNING:INLINE: plain inline is preferred over __inline__
#640: FILE: include/asm-powerpc/bitops.h:316:
+static __inline__ unsigned long __fls(unsigned long x)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'nr' - possible side-effects?
#710: FILE: include/asm-x86/bitops.h:297:
+#define test_bit(nr, addr)			\
+	(__builtin_constant_p((nr))		\
+	 ? constant_test_bit((nr), (addr))	\
+	 : variable_test_bit((nr), (addr)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'addr' - possible side-effects?
#710: FILE: include/asm-x86/bitops.h:297:
+#define test_bit(nr, addr)			\
+	(__builtin_constant_p((nr))		\
+	 ? constant_test_bit((nr), (addr))	\
+	 : variable_test_bit((nr), (addr)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#823: FILE: include/asm-x86/bitops.h:405:
+static inline void set_bit_string(unsigned long *bitmap,
+		unsigned long i, int len)

WARNING:LINE_SPACING: Missing a blank line after declarations
#826: FILE: include/asm-x86/bitops.h:408:
+	unsigned long end = i + len;
+	while (i < end) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:DEFINE_ARCH_HAS: #define of 'ARCH_HAS_FAST_MULTIPLIER' is wrong - use Kconfig variables or standard guards instead
#836: FILE: include/asm-x86/bitops.h:418:
+#define ARCH_HAS_FAST_MULTIPLIER 1

The ARCH_HAS_xyz and ARCH_HAVE_xyz patterns are wrong.

For big conceptual features use Kconfig symbols instead.  And for
smaller things where we have compatibility fallback functions but
want architectures able to override them with optimized ones, we
should either use weak functions (appropriate for some cases), or
the symbol that protects them should be the same symbol we use.

See: https://lore.kernel.org/lkml/CA+55aFycQ9XJvEOsiM3txHL5bjUc8CeKWJNR_H+MiicaddB42Q@mail.gmail.com/

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1207: FILE: include/linux/bitops.h:117:
+extern unsigned long __find_first_bit(const unsigned long *addr,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1208: FILE: include/linux/bitops.h:118:
+extern unsigned long __find_first_bit(const unsigned long *addr,
+		unsigned long size);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'size < BITS_PER_LONG'
#1225: FILE: include/linux/bitops.h:135:
+	if (__builtin_constant_p(size) && (size < BITS_PER_LONG))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'size == BITS_PER_LONG'
#1230: FILE: include/linux/bitops.h:140:
+	if (__builtin_constant_p(size) && (size == BITS_PER_LONG))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1237: FILE: include/linux/bitops.h:147:
+extern unsigned long __find_first_zero_bit(const unsigned long *addr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1238: FILE: include/linux/bitops.h:148:
+extern unsigned long __find_first_zero_bit(const unsigned long *addr,
+		unsigned long size);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'size < BITS_PER_LONG'
#1255: FILE: include/linux/bitops.h:165:
+	if (__builtin_constant_p(size) && (size < BITS_PER_LONG)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1255: FILE: include/linux/bitops.h:165:
+	if (__builtin_constant_p(size) && (size < BITS_PER_LONG)) {
+		return __ffs(~(*addr) | (1ul << size));
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'size == BITS_PER_LONG'
#1261: FILE: include/linux/bitops.h:171:
+	if (__builtin_constant_p(size) && (size == BITS_PER_LONG))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1270: FILE: include/linux/bitops.h:180:
+extern unsigned long __find_next_bit(const unsigned long *addr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1271: FILE: include/linux/bitops.h:181:
+extern unsigned long __find_next_bit(const unsigned long *addr,
+		unsigned long size, unsigned long offset);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1281: FILE: include/linux/bitops.h:191:
+find_next_bit(const unsigned long *addr, unsigned long size,
+		unsigned long offset)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'size < BITS_PER_LONG'
#1290: FILE: include/linux/bitops.h:200:
+	if (__builtin_constant_p(size) && (size < BITS_PER_LONG)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'size == BITS_PER_LONG'
#1298: FILE: include/linux/bitops.h:208:
+	if (__builtin_constant_p(size) && (size == BITS_PER_LONG)) {

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1307: FILE: include/linux/bitops.h:217:
+extern unsigned long __find_next_zero_bit(const unsigned long *addr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1308: FILE: include/linux/bitops.h:218:
+extern unsigned long __find_next_zero_bit(const unsigned long *addr,
+		unsigned long size, unsigned long offset);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1318: FILE: include/linux/bitops.h:228:
+find_next_zero_bit(const unsigned long *addr, unsigned long size,
+		unsigned long offset)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'size < BITS_PER_LONG'
#1327: FILE: include/linux/bitops.h:237:
+	if (__builtin_constant_p(size) && (size < BITS_PER_LONG)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'size == BITS_PER_LONG'
#1335: FILE: include/linux/bitops.h:245:
+	if (__builtin_constant_p(size) && (size == BITS_PER_LONG)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1395: FILE: lib/find_next_bit.c:24:
+unsigned long __find_next_bit(const unsigned long *addr,
+		unsigned long size, unsigned long offset)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1414: FILE: lib/find_next_bit.c:68:
+unsigned long __find_next_zero_bit(const unsigned long *addr,
+		unsigned long size, unsigned long offset)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1430: FILE: lib/find_next_bit.c:113:
+unsigned long __find_first_bit(const unsigned long *addr,
+		unsigned long size)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1437: FILE: lib/find_next_bit.c:119:
+	while (size & ~(BITS_PER_LONG-1)) {
 	                             ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1438: FILE: lib/find_next_bit.c:120:
+		if ((tmp = *(p++)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1458: FILE: lib/find_next_bit.c:140:
+unsigned long __find_first_zero_bit(const unsigned long *addr,
+		unsigned long size)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1464: FILE: lib/find_next_bit.c:146:
+	while (size & ~(BITS_PER_LONG-1)) {
 	                             ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1465: FILE: lib/find_next_bit.c:147:
+		if (~(tmp = *(p++)))

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000290105.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 7 warnings, 32 checks, 668 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000290105.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
