CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#57: FILE: include/linux/ptrace.h:82:
+extern void ptrace_notify_stop(struct task_struct *tracee);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#89: FILE: kernel/ptrace-utrace.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#123: FILE: kernel/ptrace-utrace.c:35:
+	BUG_ON(!list_empty(&child->ptrace_entry));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#136: FILE: kernel/ptrace-utrace.c:48:
+	BUG_ON(!child->ptrace);

CHECK:BIT_MACRO: Prefer using the BIT macro
#161: FILE: kernel/ptrace-utrace.c:73:
+#define PTRACE_EVENT_SYSCALL		(1 << 16)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:LIKELY_MISUSE: nested (un)?likely() calls, IS_ERR already uses unlikely() internally
#256: FILE: kernel/ptrace-utrace.c:168:
+	if (unlikely(IS_ERR(engine))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#267: FILE: kernel/ptrace-utrace.c:179:
+static inline int ptrace_set_events(struct task_struct *target,
+					struct utrace_engine *engine,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#308: FILE: kernel/ptrace-utrace.c:220:
+static void ptrace_wake_up(struct task_struct *tracee,
+				struct utrace_engine *engine,

WARNING:LIKELY_MISUSE: nested (un)?likely() calls, IS_ERR already uses unlikely() internally
#340: FILE: kernel/ptrace-utrace.c:252:
+	if (unlikely(IS_ERR(engine)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#378: FILE: kernel/ptrace-utrace.c:290:
+	WARN_ON(ptrace_event_pending(ctx) &&
+			!signal_group_exit(task->signal));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#454: FILE: kernel/ptrace-utrace.c:366:
+	if ((event && event != PTRACE_EVENT_VFORK_DONE) ||
+				(clone_flags & CLONE_PTRACE))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#569: FILE: kernel/ptrace-utrace.c:481:
+static enum utrace_signal_action resume_signal(struct task_struct *task,
+						struct ptrace_context *ctx,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#767: FILE: kernel/ptrace-utrace.c:679:
+	BUG_ON(task->ptrace);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#798: FILE: kernel/ptrace-utrace.c:710:
+	BUG_ON(current->ptrace);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#859: FILE: kernel/ptrace-utrace.c:771:
+			tracee = list_first_entry(&tracer->ptraced,
+					struct task_struct, ptrace_entry);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#872: FILE: kernel/ptrace-utrace.c:784:
+static int ptrace_set_options(struct task_struct *tracee,
+				struct utrace_engine *engine, long data)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#881: FILE: kernel/ptrace-utrace.c:793:
+static int ptrace_rw_siginfo(struct task_struct *tracee,
+				struct ptrace_context *ctx,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#920: FILE: kernel/ptrace-utrace.c:832:
+static void do_ptrace_notify_stop(struct ptrace_context *ctx,
+					struct task_struct *tracee)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1017: FILE: kernel/ptrace-utrace.c:929:
+static int ptrace_resume(struct task_struct *tracee,
+				struct utrace_engine *engine,

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1052: FILE: kernel/ptrace-utrace.c:964:
+			 * synthesize a trap to follow the syscall insn.
+			*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LIKELY_MISUSE: nested (un)?likely() calls, IS_ERR already uses unlikely() internally
#1080: FILE: kernel/ptrace-utrace.c:992:
+	if (unlikely(IS_ERR(engine)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1101: FILE: kernel/ptrace-utrace.c:1013:
+		ret = put_user(ptrace_context(engine)->eventmsg,
+				(unsigned long __user *) data);

CHECK:SPACING: No space is necessary after a cast
#1101: FILE: kernel/ptrace-utrace.c:1013:
+				(unsigned long __user *) data);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#1108: FILE: kernel/ptrace-utrace.c:1020:
+			ret = copy_siginfo_to_user((siginfo_t __user *) data,

CHECK:SPACING: No space is necessary after a cast
#1113: FILE: kernel/ptrace-utrace.c:1025:
+		if (copy_from_user(&siginfo, (siginfo_t __user *) data,

WARNING:SIZEOF_PARENTHESIS: sizeof siginfo should be sizeof(siginfo)
#1114: FILE: kernel/ptrace-utrace.c:1026:
+				   sizeof siginfo))

WARNING:LIKELY_MISUSE: nested (un)?likely() calls, IS_ERR already uses unlikely() internally
#1153: FILE: kernel/ptrace-utrace.c:1065:
+	if (unlikely(IS_ERR(engine)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1174: FILE: kernel/ptrace-utrace.c:1086:
+		ret = put_user((compat_ulong_t)ptrace_context(engine)->eventmsg,
+				datap);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1181: FILE: kernel/ptrace-utrace.c:1093:
+			ret = copy_siginfo_to_user32(

CHECK:SPACING: No space is necessary after a cast
#1182: FILE: kernel/ptrace-utrace.c:1094:
+				(struct compat_siginfo __user *) datap,

WARNING:SIZEOF_PARENTHESIS: sizeof siginfo should be sizeof(siginfo)
#1187: FILE: kernel/ptrace-utrace.c:1099:
+		memset(&siginfo, 0, sizeof siginfo);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1188: FILE: kernel/ptrace-utrace.c:1100:
+		if (copy_siginfo_from_user32(

CHECK:SPACING: No space is necessary after a cast
#1189: FILE: kernel/ptrace-utrace.c:1101:
+			    &siginfo, (struct compat_siginfo __user *) datap))

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000043642.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 12 warnings, 21 checks, 1141 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000043642.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
