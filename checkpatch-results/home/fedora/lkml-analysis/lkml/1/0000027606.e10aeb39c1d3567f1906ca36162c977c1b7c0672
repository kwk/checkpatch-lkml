WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#77: 
# Samples: 1164449628090

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#78: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#79: 
# Overhead          Command             Shared Object  Symbol

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#80: 
# ........  ...............  ........................  ......

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#81: 
#

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#82: 
    43.23%  multi-fault-all  [kernel]                  [k] smp_invalidate_interrupt

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#97: 
# Samples: 181505050964

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#98: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#99: 
# Overhead          Command             Shared Object  Symbol

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#100: 
# ........  ...............  ........................  ......

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#101: 
#

WARNING:LINE_SPACING: Missing a blank line after declarations
#206: FILE: mm/mmap.c:193:
+	struct vm_area_struct *vma;
+	vma = container_of(head, struct vm_area_struct, rcuhead);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#209: FILE: mm/mmap.c:196:
+}
+/* Call this if vma was linked to rb-tree */

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#214: FILE: mm/mmap.c:201:
+}
+#define VMA_FREE_MAGIC	(10000000)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#220: FILE: mm/mmap.c:207:
+	wait_event(vma->wait_queue,
+		(atomic_read(&vma->refcnt) == -VMA_FREE_MAGIC));

WARNING:MEMORY_BARRIER: memory barrier without comment
#252: FILE: mm/mmap.c:517:
+	smp_wmb();

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#291: FILE: mm/mmap.c:1587:
+		return NULL;;

ERROR:CODE_INDENT: code indent should use tabs where possible
#295: FILE: mm/mmap.c:1591:
+ ^I * Barreir against modification of rb-tree$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#295: FILE: mm/mmap.c:1591:
+ ^I * Barreir against modification of rb-tree$

ERROR:CODE_INDENT: code indent should use tabs where possible
#296: FILE: mm/mmap.c:1592:
+ ^I * rb-tree update is not an atomic ops and no barreir is used while$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#296: FILE: mm/mmap.c:1592:
+ ^I * rb-tree update is not an atomic ops and no barreir is used while$

ERROR:CODE_INDENT: code indent should use tabs where possible
#297: FILE: mm/mmap.c:1593:
+ ^I * modification. Then, modification to rb-tree can be reordered. This$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#297: FILE: mm/mmap.c:1593:
+ ^I * modification. Then, modification to rb-tree can be reordered. This$

ERROR:CODE_INDENT: code indent should use tabs where possible
#298: FILE: mm/mmap.c:1594:
+ ^I * memory barrier is against vma_(un)link_rb() for avoiding to read$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#298: FILE: mm/mmap.c:1594:
+ ^I * memory barrier is against vma_(un)link_rb() for avoiding to read$

ERROR:CODE_INDENT: code indent should use tabs where possible
#299: FILE: mm/mmap.c:1595:
+ ^I * too old data to catch all changes we get rcu_read_lock.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#299: FILE: mm/mmap.c:1595:
+ ^I * too old data to catch all changes we get rcu_read_lock.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#300: FILE: mm/mmap.c:1596:
+ ^I *$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#300: FILE: mm/mmap.c:1596:
+ ^I *$

ERROR:CODE_INDENT: code indent should use tabs where possible
#301: FILE: mm/mmap.c:1597:
+ ^I * We may see broken RB-tree and can't find existing vma. But it's ok.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#301: FILE: mm/mmap.c:1597:
+ ^I * We may see broken RB-tree and can't find existing vma. But it's ok.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#302: FILE: mm/mmap.c:1598:
+ ^I * We allowed to return NULL even if valid one exists. The caller will$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#302: FILE: mm/mmap.c:1598:
+ ^I * We allowed to return NULL even if valid one exists. The caller will$

ERROR:CODE_INDENT: code indent should use tabs where possible
#303: FILE: mm/mmap.c:1599:
+ ^I * use find_vma() with read-semaphore.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#303: FILE: mm/mmap.c:1599:
+ ^I * use find_vma() with read-semaphore.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#304: FILE: mm/mmap.c:1600:
+ ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#304: FILE: mm/mmap.c:1600:
+ ^I */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#306: FILE: mm/mmap.c:1602:
+  ^Ismp_read_barrier_depends();$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#306: FILE: mm/mmap.c:1602:
+  ^Ismp_read_barrier_depends();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#306: FILE: mm/mmap.c:1602:
+  ^Ismp_read_barrier_depends();$

CHECK:BRACES: braces {} should be used on all arms of this statement
#312: FILE: mm/mmap.c:1608:
+		if (vma_tmp->vm_end > addr) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#317: FILE: mm/mmap.c:1613:
+		} else

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vma->vm_start <= addr'
#321: FILE: mm/mmap.c:1617:
+		if ((vma->vm_start <= addr) && (addr < vma->vm_end)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr < vma->vm_end'
#321: FILE: mm/mmap.c:1617:
+		if ((vma->vm_start <= addr) && (addr < vma->vm_end)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#321: FILE: mm/mmap.c:1617:
+		if ((vma->vm_start <= addr) && (addr < vma->vm_end)) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#326: FILE: mm/mmap.c:1622:
+		} else

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#336: FILE: mm/mmap.c:1632:
+	    waitqueue_active(&vma->wait_queue))

WARNING:RETURN_VOID: void function return statements are not generally useful
#339: FILE: mm/mmap.c:1635:
+	return;
+}

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#371: FILE: include/linux/mm.h:1248:
+extern struct vm_area_struct *find_vma_speculative(struct mm_struct *mm,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#372: FILE: include/linux/mm.h:1249:
+extern struct vm_area_struct *find_vma_speculative(struct mm_struct *mm,
+	unsigned long addr);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000027606.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 11 errors, 28 warnings, 11 checks, 213 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000027606.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
