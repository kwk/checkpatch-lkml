CHECK:BRACES: braces {} should be used on all arms of this statement
#107: FILE: arch/um/sys-x86_64/ptrace.c:66:
+	if (addr < MAX_REG_OFFSET)
[...]
+	else if ((addr >= offsetof(struct user, u_debugreg[0])) &&
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#110: FILE: arch/um/sys-x86_64/ptrace.c:69:
+	else if ((addr >= offsetof(struct user, u_debugreg[0])) &&
+		(addr <= offsetof(struct user, u_debugreg[7]))){

ERROR:SPACING: space required before the open brace '{'
#110: FILE: arch/um/sys-x86_64/ptrace.c:69:
+		(addr <= offsetof(struct user, u_debugreg[7]))){

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr == 4'
#113: FILE: arch/um/sys-x86_64/ptrace.c:72:
+		if ((addr == 4) || (addr == 5))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr == 5'
#113: FILE: arch/um/sys-x86_64/ptrace.c:72:
+		if ((addr == 4) || (addr == 5))

ERROR:SPACING: space required before the open brace '{'
#153: FILE: arch/um/sys-x86_64/ptrace.c:111:
+	if (addr < MAX_REG_OFFSET){

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#156: FILE: arch/um/sys-x86_64/ptrace.c:114:
+	}
+	else if ((addr >= offsetof(struct user, u_debugreg[0])) &&

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#157: FILE: arch/um/sys-x86_64/ptrace.c:115:
+	else if ((addr >= offsetof(struct user, u_debugreg[0])) &&
+		(addr <= offsetof(struct user, u_debugreg[7]))){

ERROR:SPACING: space required before the open brace '{'
#157: FILE: arch/um/sys-x86_64/ptrace.c:115:
+		(addr <= offsetof(struct user, u_debugreg[7]))){

CHECK:SPACING: No space is necessary after a cast
#162: FILE: arch/um/sys-x86_64/ptrace.c:120:
+	return put_user(tmp, (unsigned long *) data);

ERROR:SPACING: space required before the open brace '{'
#171: FILE: arch/um/sys-x86_64/ptrace.c:130:
+	if (n){

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#298: FILE: arch/um/os-Linux/sys-i386/registers.c:51:
+		printk(UM_KERN_ERR "get_thread_regs - unknown register %d\n",

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'fi' - possible side-effects?
#370: FILE: arch/um/include/sysdep-x86_64/sigcontext.h:14:
+#define GET_FAULTINFO_FROM_SC(fi, sc) \
 	{ \
 		(fi).cr2 = SC_CR2(sc); \
 		(fi).error_code = SC_ERR(sc); \
 		(fi).trap_no = SC_TRAPNO(sc); \
 	}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sc' - possible side-effects?
#370: FILE: arch/um/include/sysdep-x86_64/sigcontext.h:14:
+#define GET_FAULTINFO_FROM_SC(fi, sc) \
 	{ \
 		(fi).cr2 = SC_CR2(sc); \
 		(fi).error_code = SC_ERR(sc); \
 		(fi).trap_no = SC_TRAPNO(sc); \
 	}

WARNING:TYPO_SPELLING: 'orignal' may be misspelled - perhaps 'original'?
#587: FILE: arch/um/sys-x86_64/signal.c:115:
+	 * Must use orignal RSP, which is passed in, rather than what's in
 	            ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000387537.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 2 warnings, 8 checks, 378 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000387537.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
