WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#76: 
> > +static struct slqb_page *new_slab_page(struct kmem_cache *s, gfp_t flags, int node)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#174: FILE: include/linux/slqb_def.h:1:
+#ifndef _LINUX_SLQB_DEF_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#217: FILE: include/linux/slqb_def.h:44:
+	spinlock_t lock;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#273: FILE: include/linux/slqb_def.h:100:
+	unsigned stat[NR_SLQB_STAT_ITEMS];

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#305: FILE: include/linux/slqb_def.h:132:
+	void (*ctor)(void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#355: FILE: include/linux/slqb_def.h:182:
+	if (size <=          8) return 3;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#356: FILE: include/linux/slqb_def.h:183:
+	if (size <=         16) return 4;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#357: FILE: include/linux/slqb_def.h:184:
+	if (size <=         32) return 5;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#358: FILE: include/linux/slqb_def.h:185:
+	if (size <=         64) return 6;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#359: FILE: include/linux/slqb_def.h:186:
+	if (size <=        128) return 7;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#360: FILE: include/linux/slqb_def.h:187:
+	if (size <=        256) return 8;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#361: FILE: include/linux/slqb_def.h:188:
+	if (size <=        512) return 9;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#362: FILE: include/linux/slqb_def.h:189:
+	if (size <=       1024) return 10;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#363: FILE: include/linux/slqb_def.h:190:
+	if (size <=   2 * 1024) return 11;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#364: FILE: include/linux/slqb_def.h:191:
+	if (size <=   4 * 1024) return 12;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#365: FILE: include/linux/slqb_def.h:192:
+	if (size <=   8 * 1024) return 13;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#366: FILE: include/linux/slqb_def.h:193:
+	if (size <=  16 * 1024) return 14;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#367: FILE: include/linux/slqb_def.h:194:
+	if (size <=  32 * 1024) return 15;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#368: FILE: include/linux/slqb_def.h:195:
+	if (size <=  64 * 1024) return 16;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#369: FILE: include/linux/slqb_def.h:196:
+	if (size <= 128 * 1024) return 17;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#370: FILE: include/linux/slqb_def.h:197:
+	if (size <= 256 * 1024) return 18;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#371: FILE: include/linux/slqb_def.h:198:
+	if (size <= 512 * 1024) return 19;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#372: FILE: include/linux/slqb_def.h:199:
+	if (size <= 1024 * 1024) return 20;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#373: FILE: include/linux/slqb_def.h:200:
+	if (size <=  2 * 1024 * 1024) return 21;

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#381: FILE: include/linux/slqb_def.h:208:
+#define SLQB_DMA (__force gfp_t)0

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#412: FILE: include/linux/slqb_def.h:239:
+#define KMALLOC_HEADER (ARCH_KMALLOC_MINALIGN < sizeof(void *) ? sizeof(void *) : ARCH_KMALLOC_MINALIGN)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#412: FILE: include/linux/slqb_def.h:239:
+#define KMALLOC_HEADER (ARCH_KMALLOC_MINALIGN < sizeof(void *) ? sizeof(void *) : ARCH_KMALLOC_MINALIGN)

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kmem_cache *' should also have an identifier name
#430: FILE: include/linux/slqb_def.h:257:
+void *kmem_cache_alloc_node(struct kmem_cache *, gfp_t flags, int node);

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#456: FILE: init/Kconfig:763:
+config SLQB_DEBUG
+	default y
+	bool "Enable SLQB debugging support"
+	depends on SLQB
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#468: FILE: init/Kconfig:791:
+config SLQB
+	bool "SLQB (Qeued allocator)"
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#491: FILE: lib/Kconfig.debug:293:
+config SLQB_DEBUG_ON
+	bool "SLQB debugging on by default"
+	depends on SLQB_DEBUG
+	default n
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#496: FILE: lib/Kconfig.debug:298:
+config SLQB_STATS2
+	default n
+	bool "Enable SLQB performance statistics"
+	depends on SLQB
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#509: FILE: mm/slqb.c:1:
+/*

WARNING:TYPO_SPELLING: 'allocaiton' may be misspelled - perhaps 'allocation'?
#511: FILE: mm/slqb.c:3:
+ * with order-0 allocations. Fastpaths emphasis is placed on local allocaiton
                                                                    ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:CODE_INDENT: code indent should use tabs where possible
#543: FILE: mm/slqb.c:35:
+^I^I   ^Istruct kmem_cache_list *list; /* Pointer to list */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#543: FILE: mm/slqb.c:35:
+^I^I   ^Istruct kmem_cache_list *list; /* Pointer to list */$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#553: FILE: mm/slqb.c:45:
+};
+static inline void struct_slqb_page_wrong_size(void)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#653: FILE: mm/slqb.c:145:
+static inline struct slqb_page *alloc_slqb_pages_node(int nid, gfp_t flags,
+						unsigned int order)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#687: FILE: mm/slqb.c:179:
+}
+static inline int slab_poison(struct kmem_cache *s)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#696: FILE: mm/slqb.c:188:
+}
+static inline int slab_poison(struct kmem_cache *s)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#734: FILE: mm/slqb.c:226:
+ * ^I^I^ICore slab cache functions$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#754: FILE: mm/slqb.c:246:
+static inline int check_valid_pointer(struct kmem_cache *s,
+				struct slqb_page *page, const void *object)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#760: FILE: mm/slqb.c:252:
+	if (object < base || object >= base + s->objects * s->size ||
+		(object - base) % s->size) {

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__p' - possible side-effects?
#778: FILE: mm/slqb.c:270:
+#define for_each_object(__p, __s, __addr) \
+	for (__p = (__addr); __p < (__addr) + (__s)->objects * (__s)->size;\
+			__p += (__s)->size)

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__s' - possible side-effects?
#778: FILE: mm/slqb.c:270:
+#define for_each_object(__p, __s, __addr) \
+	for (__p = (__addr); __p < (__addr) + (__s)->objects * (__s)->size;\
+			__p += (__s)->size)

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__addr' - possible side-effects?
#778: FILE: mm/slqb.c:270:
+#define for_each_object(__p, __s, __addr) \
+	for (__p = (__addr); __p < (__addr) + (__s)->objects * (__s)->size;\
+			__p += (__s)->size)

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__p' - possible side-effects?
#783: FILE: mm/slqb.c:275:
+#define for_each_free_object(__p, __s, __free) \
+	for (__p = (__free); (__p) != NULL; __p = get_freepointer((__s),\
+		__p))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#812: FILE: mm/slqb.c:304:
+			printk(KERN_ERR "%8s 0x%p: ", text, addr + i);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#815: FILE: mm/slqb.c:307:
+		printk(KERN_CONT " %02x", addr[i]);

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#815: FILE: mm/slqb.c:307:
+		printk(KERN_CONT " %02x", addr[i]);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#819: FILE: mm/slqb.c:311:
+			printk(KERN_CONT " %s\n", ascii);

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#819: FILE: mm/slqb.c:311:
+			printk(KERN_CONT " %s\n", ascii);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#826: FILE: mm/slqb.c:318:
+			printk(KERN_CONT "   ");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#826: FILE: mm/slqb.c:318:
+			printk(KERN_CONT "   ");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#830: FILE: mm/slqb.c:322:
+		printk(KERN_CONT " %s\n", ascii);

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#830: FILE: mm/slqb.c:322:
+		printk(KERN_CONT " %s\n", ascii);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#835: FILE: mm/slqb.c:327:
+static struct track *get_track(struct kmem_cache *s, void *object,
+	enum track_item alloc)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#848: FILE: mm/slqb.c:340:
+static void set_track(struct kmem_cache *s, void *object,
+				enum track_item alloc, void *addr)

CHECK:BRACES: braces {} should be used on all arms of this statement
#858: FILE: mm/slqb.c:350:
+	if (addr) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#863: FILE: mm/slqb.c:355:
+	} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#881: FILE: mm/slqb.c:373:
+	printk(KERN_ERR "INFO: %s in ", s);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#883: FILE: mm/slqb.c:375:
+	printk(" age=%lu cpu=%u pid=%d\n", jiffies - t->when, t->cpu, t->pid);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#897: FILE: mm/slqb.c:389:
+	printk(KERN_ERR "INFO: Slab 0x%p used=%u fp=0x%p flags=0x%04lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#898: FILE: mm/slqb.c:390:
+	printk(KERN_ERR "INFO: Slab 0x%p used=%u fp=0x%p flags=0x%04lx\n",
+		page, page->inuse, page->freelist, page->flags);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#900: FILE: mm/slqb.c:392:
+
+}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#910: FILE: mm/slqb.c:402:
+	printk(KERN_ERR "========================================"

WARNING:SPLIT_STRING: quoted string split across lines
#911: FILE: mm/slqb.c:403:
+	printk(KERN_ERR "========================================"
+			"=====================================\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#912: FILE: mm/slqb.c:404:
+	printk(KERN_ERR "BUG %s: %s\n", s->name, buf);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#913: FILE: mm/slqb.c:405:
+	printk(KERN_ERR "----------------------------------------"

WARNING:SPLIT_STRING: quoted string split across lines
#914: FILE: mm/slqb.c:406:
+	printk(KERN_ERR "----------------------------------------"
+			"-------------------------------------\n\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#925: FILE: mm/slqb.c:417:
+	printk(KERN_ERR "FIX %s: %s\n", s->name, buf);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#937: FILE: mm/slqb.c:429:
+	printk(KERN_ERR "INFO: Object 0x%p @offset=%tu fp=0x%p\n\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#938: FILE: mm/slqb.c:430:
+	printk(KERN_ERR "INFO: Object 0x%p @offset=%tu fp=0x%p\n\n",
+			p, p - addr, get_freepointer(s, p));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#947: FILE: mm/slqb.c:439:
+		print_section("Redzone", p + s->objsize,
+			s->inuse - s->objsize);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#965: FILE: mm/slqb.c:457:
+static void object_err(struct kmem_cache *s, struct slqb_page *page,
+			u8 *object, char *reason)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#995: FILE: mm/slqb.c:487:
+		memset(p + s->objsize,
+			active ? SLUB_RED_ACTIVE : SLUB_RED_INACTIVE,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1011: FILE: mm/slqb.c:503:
+static void restore_bytes(struct kmem_cache *s, char *message, u8 data,
+						void *from, void *to)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1018: FILE: mm/slqb.c:510:
+static int check_bytes_and_report(struct kmem_cache *s, struct slqb_page *page,
+			u8 *object, char *what,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1033: FILE: mm/slqb.c:525:
+	printk(KERN_ERR "INFO: 0x%p-0x%p. First byte 0x%x instead of 0x%x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1034: FILE: mm/slqb.c:526:
+	printk(KERN_ERR "INFO: 0x%p-0x%p. First byte 0x%x instead of 0x%x\n",
+					fault, end - 1, fault[0], value);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1045: FILE: mm/slqb.c:537:
+ * ^IBytes of the object to be managed.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1046: FILE: mm/slqb.c:538:
+ * ^IIf the freepointer may overlay the object then the free$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1047: FILE: mm/slqb.c:539:
+ * ^Ipointer is the first word of the object.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1049: FILE: mm/slqb.c:541:
+ * ^IPoisoning uses 0x6b (POISON_FREE) and the last byte is$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1050: FILE: mm/slqb.c:542:
+ * ^I0xa5 (POISON_END)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1053: FILE: mm/slqb.c:545:
+ * ^IPadding to reach word boundary. This is also used for Redzoning.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1054: FILE: mm/slqb.c:546:
+ * ^IPadding is extended by another word if Redzoning is enabled and$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1055: FILE: mm/slqb.c:547:
+ * ^Iobjsize == inuse.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1057: FILE: mm/slqb.c:549:
+ * ^IWe fill with 0xbb (RED_INACTIVE) for inactive objects and with$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1058: FILE: mm/slqb.c:550:
+ * ^I0xcc (RED_ACTIVE) for objects in use.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1061: FILE: mm/slqb.c:553:
+ * ^IMeta data starts here.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1063: FILE: mm/slqb.c:555:
+ * ^IA. Free pointer (if we cannot overwrite object on free)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1064: FILE: mm/slqb.c:556:
+ * ^IB. Tracking data for SLAB_STORE_USER$

WARNING:TYPO_SPELLING: 'mininum' may be misspelled - perhaps 'minimum'?
#1065: FILE: mm/slqb.c:557:
+ * 	C. Padding to reach required alignment boundary or at mininum
    	                                                      ^^^^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1065: FILE: mm/slqb.c:557:
+ * ^IC. Padding to reach required alignment boundary or at mininum$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1066: FILE: mm/slqb.c:558:
+ * ^I^Ione word if debuggin is on to be able to detect writes$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1067: FILE: mm/slqb.c:559:
+ * ^I^Ibefore the word boundary.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1072: FILE: mm/slqb.c:564:
+ * ^INothing is used beyond s->size.$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1126: FILE: mm/slqb.c:618:
+static int check_object(struct kmem_cache *s, struct slqb_page *page,
+					void *object, int active)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1137: FILE: mm/slqb.c:629:
+		if (!check_bytes_and_report(s, page, object, "Redzone",
+			endobject, red, s->inuse - s->objsize))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1142: FILE: mm/slqb.c:634:
+			check_bytes_and_report(s, page, p, "Alignment padding",
+				endobject, POISON_INUSE, s->inuse - s->objsize);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1148: FILE: mm/slqb.c:640:
+		if (!active && (s->flags & __OBJECT_POISON) &&
+			(!check_bytes_and_report(s, page, p, "Poison", p,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1174: FILE: mm/slqb.c:666:
+		slab_err(s, page, "inuse %u > max %u",
+			s->name, page->inuse, s->objects);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1185: FILE: mm/slqb.c:677:
+		printk(KERN_INFO "TRACE %s %s 0x%p inuse=%d fp=0x%p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1186: FILE: mm/slqb.c:678:
+		printk(KERN_INFO "TRACE %s %s 0x%p inuse=%d fp=0x%p\n",
+			s->name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1199: FILE: mm/slqb.c:691:
+static void setup_object_debug(struct kmem_cache *s, struct slqb_page *page,
+								void *object)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1204: FILE: mm/slqb.c:696:
+	if (!(s->flags & (SLAB_STORE_USER|SLAB_RED_ZONE|__OBJECT_POISON)))
 	                                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1204: FILE: mm/slqb.c:696:
+	if (!(s->flags & (SLAB_STORE_USER|SLAB_RED_ZONE|__OBJECT_POISON)))
 	                                               ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1214: FILE: mm/slqb.c:706:
+	struct slqb_page *page;
+	page = virt_to_head_slqb_page(object);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1241: FILE: mm/slqb.c:733:
+	struct slqb_page *page;
+	page = virt_to_head_slqb_page(object);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1310: FILE: mm/slqb.c:802:
+			printk(KERN_ERR "slqb_debug option '%c' "

WARNING:SPLIT_STRING: quoted string split across lines
#1311: FILE: mm/slqb.c:803:
+			printk(KERN_ERR "slqb_debug option '%c' "
+				"unknown. skipped\n", *str);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#1322: FILE: mm/slqb.c:814:
+__setup("slqb_debug", setup_slqb_debug);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1325: FILE: mm/slqb.c:817:
+static unsigned long kmem_cache_flags(unsigned long objsize,
+	unsigned long flags, const char *name,

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#1331: FILE: mm/slqb.c:823:
+	if (slqb_debug && (!slqb_debug_slabs ||
[...]
+			flags |= slqb_debug;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1332: FILE: mm/slqb.c:824:
+	if (slqb_debug && (!slqb_debug_slabs ||
+	    strncmp(slqb_debug_slabs, name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1333: FILE: mm/slqb.c:825:
+	    strncmp(slqb_debug_slabs, name,
+		strlen(slqb_debug_slabs)) == 0))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1340: FILE: mm/slqb.c:832:
+static inline void setup_object_debug(struct kmem_cache *s,
+			struct slqb_page *page, void *object) {}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1343: FILE: mm/slqb.c:835:
+static inline int alloc_debug_processing(struct kmem_cache *s,
+	void *object, void *addr) { return 0; }

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1346: FILE: mm/slqb.c:838:
+static inline int free_debug_processing(struct kmem_cache *s,
+	void *object, void *addr) { return 0; }

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1351: FILE: mm/slqb.c:843:
+static inline int check_object(struct kmem_cache *s, struct slqb_page *page,
+			void *object, int active) { return 1; }

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1354: FILE: mm/slqb.c:846:
+static inline unsigned long kmem_cache_flags(unsigned long objsize,
+	unsigned long flags, const char *name, void (*ctor)(void *))

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1358: FILE: mm/slqb.c:850:
+}
+#define slqb_debug 0

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1376: FILE: mm/slqb.c:868:
+	mod_zone_page_state(slqb_page_zone(page),
+		(s->flags & SLAB_RECLAIM_ACCOUNT) ?

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1387: FILE: mm/slqb.c:879:
+static void setup_object(struct kmem_cache *s, struct slqb_page *page,
+				void *object)

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#1397: FILE: mm/slqb.c:889:
+static struct slqb_page *new_slab_page(struct kmem_cache *s, gfp_t flags, int node, unsigned int colour)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1404: FILE: mm/slqb.c:896:
+	BUG_ON(flags & GFP_SLAB_BUG_MASK);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1407: FILE: mm/slqb.c:899:
+	page = allocate_slab(s,
+		flags & (GFP_RECLAIM_MASK | GFP_CONSTRAINT_MASK), node);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1452: FILE: mm/slqb.c:944:
+	mod_zone_page_state(slqb_page_zone(page),
+		(s->flags & SLAB_RECLAIM_ACCOUNT) ?

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#1483: FILE: mm/slqb.c:975:
+static int free_object_to_page(struct kmem_cache *s, struct kmem_cache_list *l, struct slqb_page *page, void *object)

WARNING:LONG_LINE: line length of 127 exceeds 100 columns
#1510: FILE: mm/slqb.c:1002:
+static noinline void slab_free_to_remote(struct kmem_cache *s, struct slqb_page *page, void *object, struct kmem_cache_cpu *c);

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#1620: FILE: mm/slqb.c:1112:
+static __always_inline void *__cache_list_get_object(struct kmem_cache *s, struct kmem_cache_list *l)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1627: FILE: mm/slqb.c:1119:
+		void *next = get_freepointer(s, object);
+		VM_BUG_ON(!l->freelist.nr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1647: FILE: mm/slqb.c:1139:
+			void *next = get_freepointer(s, object);
+			VM_BUG_ON(!l->freelist.nr);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page->freelist"
#1696: FILE: mm/slqb.c:1188:
+	VM_BUG_ON((page->inuse == s->objects) != (page->freelist == NULL));

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1819: FILE: mm/slqb.c:1311:
+static __always_inline void *__slab_alloc(struct kmem_cache *s,
+		gfp_t gfpflags, int node)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1858: FILE: mm/slqb.c:1350:
+static __always_inline void *slab_alloc(struct kmem_cache *s,
+		gfp_t gfpflags, int node, void *addr)

WARNING:LONG_LINE: line length of 126 exceeds 100 columns
#1949: FILE: mm/slqb.c:1441:
+static noinline void slab_free_to_remote(struct kmem_cache *s, struct slqb_page *page, void *object, struct kmem_cache_cpu *c)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1977: FILE: mm/slqb.c:1469:
+ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1977: FILE: mm/slqb.c:1469:
+ $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1984: FILE: mm/slqb.c:1476:
+static __always_inline void __slab_free(struct kmem_cache *s,
+		struct slqb_page *page, void *object)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1996: FILE: mm/slqb.c:1488:
+	if (!NUMA_BUILD || !numa_platform ||
+			likely(slqb_page_to_nid(page) == numa_node_id())) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2027: FILE: mm/slqb.c:1519:
+static __always_inline void slab_free(struct kmem_cache *s,
+		struct slqb_page *page, void *object)

WARNING:LINE_SPACING: Missing a blank line after declarations
#2047: FILE: mm/slqb.c:1539:
+	struct slqb_page *page = NULL;
+	if (numa_platform)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#2109: FILE: mm/slqb.c:1601:
+	return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2116: FILE: mm/slqb.c:1608:
+static unsigned long calculate_alignment(unsigned long flags,
+		unsigned long align, unsigned long size)

WARNING:LINE_SPACING: Missing a blank line after declarations
#2127: FILE: mm/slqb.c:1619:
+		unsigned long ralign = cache_line_size();
+		while (size <= ralign / 2)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2159: FILE: mm/slqb.c:1651:
+static void init_kmem_cache_cpu(struct kmem_cache *s,
+			struct kmem_cache_cpu *c)

WARNING:TYPO_SPELLING: 'an user' may be misspelled - perhaps 'a user'?
#2381: FILE: mm/slqb.c:1873:
+		 * corrupted if an user writes before the start
 		                ^^^^^^^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2421: FILE: mm/slqb.c:1913:
+	s->batch = max(4*PAGE_SIZE / size, min(256, 64*PAGE_SIZE / size));
 	                ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2421: FILE: mm/slqb.c:1913:
+	s->batch = max(4*PAGE_SIZE / size, min(256, 64*PAGE_SIZE / size));
 	                                              ^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2432: FILE: mm/slqb.c:1924:
+
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2435: FILE: mm/slqb.c:1927:
+static int kmem_cache_open(struct kmem_cache *s,
+		const char *name, size_t size,

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2479: FILE: mm/slqb.c:1971:
+		panic("kmem_cache_create(): failed to create slab `%s'\n",name);
 		                                                         ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2596: FILE: mm/slqb.c:2088:
+static struct kmem_cache *open_kmalloc_cache(struct kmem_cache *s,
+		const char *name, int size, gfp_t gfp_flags)

CHECK:BRACES: Unbalanced braces around else statement
#2672: FILE: mm/slqb.c:2164:
+	} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2712: FILE: mm/slqb.c:2204:
+	BUG_ON(!object);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2717: FILE: mm/slqb.c:2209:
+	BUG_ON(!PageSlab(page));

ERROR:CODE_INDENT: code indent should use tabs where possible
#2847: FILE: mm/slqb.c:2339:
+        struct delayed_work *work =$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2847: FILE: mm/slqb.c:2339:
+        struct delayed_work *work =$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2848: FILE: mm/slqb.c:2340:
+                container_of(w, struct delayed_work, work);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2848: FILE: mm/slqb.c:2340:
+                container_of(w, struct delayed_work, work);$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2874: FILE: mm/slqb.c:2366:
+	schedule_delayed_work(work, round_jiffies_relative(3*HZ));
 	                                                    ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2888: FILE: mm/slqb.c:2380:
+        if (keventd_up() && cache_trim_work->work.func == NULL) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2888: FILE: mm/slqb.c:2380:
+        if (keventd_up() && cache_trim_work->work.func == NULL) {$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cache_trim_work->work.func"
#2888: FILE: mm/slqb.c:2380:
+        if (keventd_up() && cache_trim_work->work.func == NULL) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#2889: FILE: mm/slqb.c:2381:
+                INIT_DELAYED_WORK(cache_trim_work, cache_trim_worker);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2889: FILE: mm/slqb.c:2381:
+                INIT_DELAYED_WORK(cache_trim_work, cache_trim_worker);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2890: FILE: mm/slqb.c:2382:
+                schedule_delayed_work_on(cpu, cache_trim_work,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2890: FILE: mm/slqb.c:2382:
+                schedule_delayed_work_on(cpu, cache_trim_work,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2891: FILE: mm/slqb.c:2383:
+                                        __round_jiffies_relative(HZ, cpu));$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2891: FILE: mm/slqb.c:2383:
+                schedule_delayed_work_on(cpu, cache_trim_work,
+                                        __round_jiffies_relative(HZ, cpu));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2891: FILE: mm/slqb.c:2383:
+                                        __round_jiffies_relative(HZ, cpu));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2892: FILE: mm/slqb.c:2384:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2892: FILE: mm/slqb.c:2384:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2897: FILE: mm/slqb.c:2389:
+        int cpu;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2897: FILE: mm/slqb.c:2389:
+        int cpu;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2899: FILE: mm/slqb.c:2391:
+        for_each_online_cpu(cpu)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2899: FILE: mm/slqb.c:2391:
+        for_each_online_cpu(cpu)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2900: FILE: mm/slqb.c:2392:
+                start_cpu_timer(cpu);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2900: FILE: mm/slqb.c:2392:
+                start_cpu_timer(cpu);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2901: FILE: mm/slqb.c:2393:
+        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2901: FILE: mm/slqb.c:2393:
+        return 0;$

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#2903: FILE: mm/slqb.c:2395:
+__initcall(cpucache_init);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2905: FILE: mm/slqb.c:2397:
+
+

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#2926: FILE: mm/slqb.c:2418:
+#if 0 // XXX: see cpu offline comment

WARNING:TYPO_SPELLING: 'availabe' may be misspelled - perhaps 'available'?
#2955: FILE: mm/slqb.c:2447:
+	 * We are bringing a node online. No memory is availabe yet. We must
 	                                               ^^^^^^^^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#3013: FILE: mm/slqb.c:2505:
+	unsigned int flags = SLAB_HWCACHE_ALIGN|SLAB_PANIC;
 	                                       ^

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#3031: FILE: mm/slqb.c:2523:
+	kmem_cache_open(&kmem_cpu_cache, "kmem_cache_cpu", sizeof(struct kmem_cache_cpu), 0, flags, NULL, 0);

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#3034: FILE: mm/slqb.c:2526:
+	kmem_cache_open(&kmem_node_cache, "kmem_cache_node", sizeof(struct kmem_cache_node), 0, flags, NULL, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3070: FILE: mm/slqb.c:2562:
+		open_kmalloc_cache(&kmalloc_caches[1],
+				"kmalloc-96", 96, GFP_KERNEL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3073: FILE: mm/slqb.c:2565:
+		open_kmalloc_cache(&kmalloc_caches_dma[1],
+				"kmalloc_dma-96", 96, GFP_KERNEL|SLQB_DMA);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#3073: FILE: mm/slqb.c:2565:
+				"kmalloc_dma-96", 96, GFP_KERNEL|SLQB_DMA);
 				                                ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3078: FILE: mm/slqb.c:2570:
+		open_kmalloc_cache(&kmalloc_caches[2],
+				"kmalloc-192", 192, GFP_KERNEL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3081: FILE: mm/slqb.c:2573:
+		open_kmalloc_cache(&kmalloc_caches_dma[2],
+				"kmalloc_dma-192", 192, GFP_KERNEL|SLQB_DMA);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#3081: FILE: mm/slqb.c:2573:
+				"kmalloc_dma-192", 192, GFP_KERNEL|SLQB_DMA);
 				                                  ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3087: FILE: mm/slqb.c:2579:
+		open_kmalloc_cache(&kmalloc_caches[i],
+			"kmalloc", 1 << i, GFP_KERNEL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3090: FILE: mm/slqb.c:2582:
+		open_kmalloc_cache(&kmalloc_caches_dma[i],
+				"kmalloc_dma", 1 << i, GFP_KERNEL|SLQB_DMA);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#3090: FILE: mm/slqb.c:2582:
+				"kmalloc_dma", 1 << i, GFP_KERNEL|SLQB_DMA);
 				                                 ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3094: FILE: mm/slqb.c:2586:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3107: FILE: mm/slqb.c:2599:
+	BUILD_BUG_ON(KMALLOC_MIN_SIZE > 256 ||
+		(KMALLOC_MIN_SIZE & (KMALLOC_MIN_SIZE - 1)));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3136: FILE: mm/slqb.c:2628:
+struct kmem_cache *kmem_cache_create(const char *name, size_t size,
+		size_t align, unsigned long flags, void (*ctor)(void *))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#3151: FILE: mm/slqb.c:2643:
+		panic("kmem_cache_create(): failed to create slab `%s'\n",name);
 		                                                         ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kmem_cache_create', this function's name, in a string
#3151: FILE: mm/slqb.c:2643:
+		panic("kmem_cache_create(): failed to create slab `%s'\n",name);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3162: FILE: mm/slqb.c:2654:
+static int __cpuinit slab_cpuup_callback(struct notifier_block *nfb,
+		unsigned long action, void *hcpu)

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#3198: FILE: mm/slqb.c:2690:
+#if 0

WARNING:LINE_SPACING: Missing a blank line after declarations
#3206: FILE: mm/slqb.c:2698:
+			struct kmem_cache_cpu *c = get_cpu_slab(s, cpu);
+			if (c) {

WARNING:MISPLACED_INIT: __cpuinitdata should be placed after slab_notifier
#3221: FILE: mm/slqb.c:2713:
+static struct notifier_block __cpuinitdata slab_notifier = {

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3240: FILE: mm/slqb.c:2732:
+void *__kmalloc_node_track_caller(size_t size, gfp_t flags,
+					int node, void *caller)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#3258: FILE: mm/slqb.c:2750:
+ssize_t slabinfo_write(struct file *file, const char __user * buffer,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#3259: FILE: mm/slqb.c:2751:
+                       size_t count, loff_t *ppos)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3259: FILE: mm/slqb.c:2751:
+                       size_t count, loff_t *ppos)$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3264: FILE: mm/slqb.c:2756:
+
+

WARNING:SPLIT_STRING: quoted string split across lines
#3269: FILE: mm/slqb.c:2761:
+	seq_puts(m, "# name            <active_objs> <num_objs> <objsize> "
+		 "<objperslab> <pagesperslab>");

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#3298: FILE: mm/slqb.c:2790:
+	spinlock_t lock;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#3401: FILE: mm/slqb.c:2893:
+	proc_create("slabinfo",S_IWUSR|S_IRUGO,NULL,&proc_slabinfo_operations);
 	                      ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#3401: FILE: mm/slqb.c:2893:
+	proc_create("slabinfo",S_IWUSR|S_IRUGO,NULL,&proc_slabinfo_operations);
 	                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#3401: FILE: mm/slqb.c:2893:
+	proc_create("slabinfo",S_IWUSR|S_IRUGO,NULL,&proc_slabinfo_operations);
 	                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#3401: FILE: mm/slqb.c:2893:
+	proc_create("slabinfo",S_IWUSR|S_IRUGO,NULL,&proc_slabinfo_operations);
 	                                           ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#3401: FILE: mm/slqb.c:2893:
+	proc_create("slabinfo",S_IWUSR|S_IRUGO,NULL,&proc_slabinfo_operations);
 	                                            ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR|S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#3401: FILE: mm/slqb.c:2893:
+	proc_create("slabinfo",S_IWUSR|S_IRUGO,NULL,&proc_slabinfo_operations);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#3433: FILE: include/linux/slab.h:275:
+#if defined(CONFIG_DEBUG_SLAB) || defined(CONFIG_SLUB) || defined (CONFIG_SLQB_DEBUG)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3454: FILE: include/linux/rcu_types.h:1:
+#ifndef __LINUX_RCU_TYPES_H

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000188244.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 41 errors, 99 warnings, 83 checks, 3348 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000188244.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
