WARNING:BAD_SIGN_OFF: Use a single space after Signed-off-by:
#48: 
Signed-off-by:  Lee Schermerhorn <lee.schermerhorn@hp.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:BAD_SIGN_OFF: Use a single space after Signed-off-by:
#49: 
Signed-off-by:  Rik van Riel <riel@redhat.com>

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#68: FILE: include/linux/swap.h:248:
+extern void scan_zone_noreclaim_pages(struct zone *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct zone *' should also have an identifier name
#68: FILE: include/linux/swap.h:248:
+extern void scan_zone_noreclaim_pages(struct zone *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#69: FILE: include/linux/swap.h:249:
+extern void scan_all_zones_noreclaim_pages(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#71: FILE: include/linux/swap.h:251:
+extern int scan_noreclaim_handler(struct ctl_table *, int, struct file *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ctl_table *' should also have an identifier name
#71: FILE: include/linux/swap.h:251:
+extern int scan_noreclaim_handler(struct ctl_table *, int, struct file *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#71: FILE: include/linux/swap.h:251:
+extern int scan_noreclaim_handler(struct ctl_table *, int, struct file *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#71: FILE: include/linux/swap.h:251:
+extern int scan_noreclaim_handler(struct ctl_table *, int, struct file *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void __user *' should also have an identifier name
#71: FILE: include/linux/swap.h:251:
+extern int scan_noreclaim_handler(struct ctl_table *, int, struct file *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t *' should also have an identifier name
#71: FILE: include/linux/swap.h:251:
+extern int scan_noreclaim_handler(struct ctl_table *, int, struct file *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t *' should also have an identifier name
#71: FILE: include/linux/swap.h:251:
+extern int scan_noreclaim_handler(struct ctl_table *, int, struct file *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#72: FILE: include/linux/swap.h:252:
+extern int scan_noreclaim_handler(struct ctl_table *, int, struct file *,
+					void __user *, size_t *, loff_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#73: FILE: include/linux/swap.h:253:
+extern int scan_noreclaim_register_node(struct node *node);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#74: FILE: include/linux/swap.h:254:
+extern void scan_noreclaim_unregister_node(struct node *node);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#81: FILE: include/linux/swap.h:261:
 }
+static inline void scan_zone_noreclaim_pages(struct zone *z) { }

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#87: FILE: include/linux/swap.h:267:
+}
+static inline void scan_noreclaim_unregister_node(struct node *node) { }

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#133: FILE: mm/vmscan.c:2323:
+			struct page* page = lru_to_page(l_noreclaim);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#155: FILE: mm/vmscan.c:2345:
+
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#162: FILE: mm/vmscan.c:2352:
+
+

ERROR:SPACING: space prohibited after that open parenthesis '('
#189: FILE: mm/vmscan.c:2379:
+int scan_noreclaim_handler( struct ctl_table *table, int write,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#213: FILE: mm/vmscan.c:2403:
+static ssize_t write_scan_noreclaim_node(struct sys_device *dev,
+					const char *buf, size_t count)

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#217: FILE: mm/vmscan.c:2407:
+	unsigned long req = simple_strtoul(buf, NULL, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:LINE_SPACING: Please don't use multiple blank lines
#230: FILE: mm/vmscan.c:2420:
+
+

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#231: FILE: mm/vmscan.c:2421:
+static SYSDEV_ATTR(scan_noreclaim_pages, S_IRUGO | S_IWUSR,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#245: FILE: mm/vmscan.c:2435:
+
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000311469.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 11 warnings, 13 checks, 222 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000311469.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
