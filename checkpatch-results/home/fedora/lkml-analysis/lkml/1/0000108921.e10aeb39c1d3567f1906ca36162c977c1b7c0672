WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#37: 
> > > > Since pm_runtime_resume() takes care of powering up the parent, there's

WARNING:TYPO_SPELLING: 'responsibile' may be misspelled - perhaps 'responsible'?
#117: FILE: kernel/power/Kconfig:223:
+	  responsibile for the actual handling of the autosuspend requests and
 	  ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LINE_SPACING: Missing a blank line after declarations
#151: FILE: kernel/power/main.c:237:
+	int error = pm_start_workqueue();
+	if (error)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#285: FILE: include/linux/pm.h:415:
+	spinlock_t		lock;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#306: FILE: drivers/base/power/runtime.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#307: FILE: drivers/base/power/runtime.c:2:
+ * drivers/base/power/runtime.c - Helper functions for device run-time PM

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:TYPO_SPELLING: 'funtion' may be misspelled - perhaps 'function'?
#388: FILE: drivers/base/power/runtime.c:83:
+ * @sync: If unset, the funtion has been called via pm_wq.
                         ^^^^^^^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#410: FILE: drivers/base/power/runtime.c:105:
+	} else if ((dev->power.runtime_status & RPM_NO_SUSPEND)
+	    || (!sync && dev->power.suspend_aborted)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#558: FILE: drivers/base/power/runtime.c:253:
+	if (dev->power.runtime_status == RPM_ERROR) {
+		goto out_unlock;
+	} if (!(dev->power.runtime_status & ~RPM_GRACE)) {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line (or did you mean 'else if'?)
#560: FILE: drivers/base/power/runtime.c:255:
+	} if (!(dev->power.runtime_status & ~RPM_GRACE)) {

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#586: FILE: drivers/base/power/runtime.c:281:
+	} else if (dev->power.runtime_status == RPM_SUSPENDED && dev->parent
+	    && (dev->parent->power.runtime_status & ~RPM_GRACE)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#692: FILE: drivers/base/power/runtime.c:387:
+	} else if (dev->parent
+	    && (dev->parent->power.runtime_status & RPM_INACTIVE)) {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pm_runtime_enable', this function's name, in a string
#790: FILE: drivers/base/power/runtime.c:485:
+		dev_warn(dev, "PM: Excessive pm_runtime_enable()!\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#810: FILE: include/linux/pm_runtime.h:1:
+/*

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#828: FILE: include/linux/pm_runtime.h:19:
+extern void pm_runtime_init(struct device *dev);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#829: FILE: include/linux/pm_runtime.h:20:
+extern void __pm_runtime_change_status(struct device *dev, unsigned int status,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#831: FILE: include/linux/pm_runtime.h:22:
+extern int __pm_runtime_suspend(struct device *dev, bool sync);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#832: FILE: include/linux/pm_runtime.h:23:
+extern void pm_request_suspend(struct device *dev, unsigned int msec);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#833: FILE: include/linux/pm_runtime.h:24:
+extern int __pm_runtime_resume(struct device *dev, bool grace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#834: FILE: include/linux/pm_runtime.h:25:
+extern void __pm_request_resume(struct device *dev, bool grace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#835: FILE: include/linux/pm_runtime.h:26:
+extern void pm_cancel_runtime_suspend(struct device *dev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#836: FILE: include/linux/pm_runtime.h:27:
+extern void pm_cancel_runtime_resume(struct device *dev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#837: FILE: include/linux/pm_runtime.h:28:
+extern void pm_runtime_disable(struct device *dev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#838: FILE: include/linux/pm_runtime.h:29:
+extern void pm_runtime_enable(struct device *dev);

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#862: FILE: include/linux/pm_runtime.h:53:
+	return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#864: FILE: include/linux/pm_runtime.h:55:
+}
+static inline void pm_request_suspend(struct device *dev, unsigned int msec) {}

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#867: FILE: include/linux/pm_runtime.h:58:
+	return -ENOSYS;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#869: FILE: include/linux/pm_runtime.h:60:
+}
+static inline void __pm_request_resume(struct device *dev, bool grace) {}

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000108921.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 11 warnings, 16 checks, 1172 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000108921.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
