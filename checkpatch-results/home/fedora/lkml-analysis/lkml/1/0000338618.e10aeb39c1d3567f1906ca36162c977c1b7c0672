WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#56: FILE: lib/tracing/trace_function.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#92: FILE: lib/tracing/trace_function.c:37:
+static ssize_t function_trace_ctrl_read(struct file *filp, char __user *ubuf,
                                                      ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#112: FILE: lib/tracing/trace_function.c:57:
+static ssize_t function_trace_ctrl_write(struct file *filp,
                                                       ^^^^

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#128: FILE: lib/tracing/trace_function.c:73:
+	val = !!simple_strtoul(buf, NULL, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:BRACES: braces {} should be used on all arms of this statement
#131: FILE: lib/tracing/trace_function.c:76:
+	if (val)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#133: FILE: lib/tracing/trace_function.c:78:
+	else {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#158: FILE: lib/tracing/trace_function.c:103:
+static struct file_operations function_trace_ctrl_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#186: FILE: lib/tracing/trace_function.c:131:
+
+}

WARNING:LINE_SPACING: Missing a blank line after declarations
#215: FILE: lib/tracing/trace_function.c:160:
+	const unsigned long nr_pages = DIV_ROUND_UP(size, PAGE_SIZE);
+	return ilog2(roundup_pow_of_two(nr_pages));

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!array"
#229: FILE: lib/tracing/trace_function.c:174:
+		if (array == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#230: FILE: lib/tracing/trace_function.c:175:
+			printk(KERN_ERR "function tracer: failed to allocate"

WARNING:SPLIT_STRING: quoted string split across lines
#231: FILE: lib/tracing/trace_function.c:176:
+			printk(KERN_ERR "function tracer: failed to allocate"
+			       " %ld bytes for trace buffer!\n", size);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#408: FILE: lib/tracing/tracer.c:131:
+static unsigned trace_flags;

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#615: FILE: lib/tracing/tracer.c:475:
+			seq_printf(m, " <-- ");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#650: FILE: lib/tracing/tracer.c:513:
+			seq_printf(m, "tracer:\n");

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#659: FILE: lib/tracing/tracer.c:524:
+static struct seq_operations tracer_seq_ops = {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#705: FILE: lib/tracing/tracer.c:566:
+int tracing_open_generic(struct inode *inode, struct file *filp)
                                                            ^^^^

WARNING:CONST_STRUCT: struct file_operations should normally be const
#762: FILE: lib/tracing/tracer.c:607:
+struct file_operations tracing_fops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#772: FILE: lib/tracing/tracer.c:614:
+struct file_operations tracing_lt_fops = {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#781: FILE: lib/tracing/tracer.c:621:
+static ssize_t tracing_iter_ctrl_read(struct file *filp, char __user *ubuf,
                                                    ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#876: FILE: lib/tracing/tracer.c:658:
+static ssize_t tracing_iter_ctrl_write(struct file *filp,
                                                     ^^^^

WARNING:CONST_STRUCT: struct file_operations should normally be const
#904: FILE: lib/tracing/tracer.c:697:
+static struct file_operations tracing_iter_fops = {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1102: FILE: lib/tracing/tracer.h:65:
+int tracing_open_generic(struct inode *inode, struct file *filp);
                                                            ^^^^

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1108: FILE: lib/tracing/tracer.h:71:
+extern struct file_operations tracing_fops;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1109: FILE: lib/tracing/tracer.h:72:
+extern struct file_operations tracing_lt_fops;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000338618.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 21 warnings, 4 checks, 1048 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000338618.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
