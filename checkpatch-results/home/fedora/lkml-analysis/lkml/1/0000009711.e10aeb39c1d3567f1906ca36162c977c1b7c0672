WARNING:TYPO_SPELLING: 'miscellanous' may be misspelled - perhaps 'miscellaneous'?
#36: 
- miscellanous changes and improvements
  ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#97: FILE: arch/x86/include/asm/atomic_32.h:274:
+#define ATOMIC64_ALTERNATIVE_(f, g) ALTERNATIVE_CALL("call atomic64_" #f "_386", "atomic64_" #g "_cx8", X86_FEATURE_CX8)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'f' - possible side-effects?
#100: FILE: arch/x86/include/asm/atomic_32.h:277:
+#define ATOMIC64_ALTERNATIVE(f) ATOMIC64_ALTERNATIVE_(f, f)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#132: FILE: arch/x86/include/asm/atomic_32.h:305:
+	unsigned high = (unsigned)(n >> 32);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#132: FILE: arch/x86/include/asm/atomic_32.h:305:
+	unsigned high = (unsigned)(n >> 32);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#133: FILE: arch/x86/include/asm/atomic_32.h:306:
+	unsigned low = (unsigned)n;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#133: FILE: arch/x86/include/asm/atomic_32.h:306:
+	unsigned low = (unsigned)n;

WARNING:LINE_SPACING: Missing a blank line after declarations
#134: FILE: arch/x86/include/asm/atomic_32.h:307:
+	unsigned low = (unsigned)n;
+	asm volatile(ATOMIC64_ALTERNATIVE(xchg)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#155: FILE: arch/x86/include/asm/atomic_32.h:324:
+	unsigned high = (unsigned)(i >> 32);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#155: FILE: arch/x86/include/asm/atomic_32.h:324:
+	unsigned high = (unsigned)(i >> 32);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#156: FILE: arch/x86/include/asm/atomic_32.h:325:
+	unsigned low = (unsigned)i;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#156: FILE: arch/x86/include/asm/atomic_32.h:325:
+	unsigned low = (unsigned)i;

WARNING:LINE_SPACING: Missing a blank line after declarations
#157: FILE: arch/x86/include/asm/atomic_32.h:326:
+	unsigned low = (unsigned)i;
+	asm volatile(ATOMIC64_ALTERNATIVE(set)

WARNING:LINE_SPACING: Missing a blank line after declarations
#197: FILE: arch/x86/include/asm/atomic_32.h:342:
+	long long r;
+	asm volatile(ATOMIC64_ALTERNATIVE(read)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#202: FILE: arch/x86/include/asm/atomic_32.h:347:
+ }$

WARNING:LINE_SPACING: Missing a blank line after declarations
#242: FILE: arch/x86/include/asm/atomic_32.h:380:
+	long long a;
+	asm volatile(ATOMIC64_ALTERNATIVE(inc_return)

WARNING:LINE_SPACING: Missing a blank line after declarations
#253: FILE: arch/x86/include/asm/atomic_32.h:391:
+	long long a;
+	asm volatile(ATOMIC64_ALTERNATIVE(dec_return)

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#309: FILE: arch/x86/include/asm/atomic_32.h:435:
+ * @v: pointer to type atomic64_t
+  *

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#310: FILE: arch/x86/include/asm/atomic_32.h:436:
+  *
+ * Atomically subtracts @i from @v and returns

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#413: FILE: arch/x86/include/asm/atomic_32.h:524:
+	unsigned low = (unsigned)u;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#413: FILE: arch/x86/include/asm/atomic_32.h:524:
+	unsigned low = (unsigned)u;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#414: FILE: arch/x86/include/asm/atomic_32.h:525:
+	unsigned high = (unsigned)(u >> 32);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#414: FILE: arch/x86/include/asm/atomic_32.h:525:
+	unsigned high = (unsigned)(u >> 32);

WARNING:LINE_SPACING: Missing a blank line after declarations
#415: FILE: arch/x86/include/asm/atomic_32.h:526:
+	unsigned high = (unsigned)(u >> 32);
+	asm volatile(ATOMIC64_ALTERNATIVE(add_unless) "\n\t"

CHECK:LINE_SPACING: Please don't use multiple blank lines
#421: FILE: arch/x86/include/asm/atomic_32.h:532:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#425: FILE: arch/x86/include/asm/atomic_32.h:536:
+	int r;
+	asm volatile(ATOMIC64_ALTERNATIVE(inc_not_zero)

WARNING:LINE_SPACING: Missing a blank line after declarations
#436: FILE: arch/x86/include/asm/atomic_32.h:547:
+	long long r;
+	asm volatile(ATOMIC64_ALTERNATIVE(dec_if_positive)

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#699: FILE: arch/x86/lib/atomic64_32.c:11:
+long long atomic64_set_cx8(long long, const atomic64_t *v);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'long long' should also have an identifier name
#699: FILE: arch/x86/lib/atomic64_32.c:11:
+long long atomic64_set_cx8(long long, const atomic64_t *v);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#701: FILE: arch/x86/lib/atomic64_32.c:13:
+long long atomic64_xchg_cx8(long long, unsigned high);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#701: FILE: arch/x86/lib/atomic64_32.c:13:
+long long atomic64_xchg_cx8(long long, unsigned high);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'long long' should also have an identifier name
#701: FILE: arch/x86/lib/atomic64_32.c:13:
+long long atomic64_xchg_cx8(long long, unsigned high);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#703: FILE: arch/x86/lib/atomic64_32.c:15:
+long long atomic64_add_return_cx8(long long a, atomic64_t *v);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#705: FILE: arch/x86/lib/atomic64_32.c:17:
+long long atomic64_sub_return_cx8(long long a, atomic64_t *v);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#707: FILE: arch/x86/lib/atomic64_32.c:19:
+long long atomic64_inc_return_cx8(long long a, atomic64_t *v);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#709: FILE: arch/x86/lib/atomic64_32.c:21:
+long long atomic64_dec_return_cx8(long long a, atomic64_t *v);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#711: FILE: arch/x86/lib/atomic64_32.c:23:
+long long atomic64_dec_if_positive_cx8(atomic64_t *v);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#713: FILE: arch/x86/lib/atomic64_32.c:25:
+int atomic64_inc_not_zero_cx8(atomic64_t *v);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#715: FILE: arch/x86/lib/atomic64_32.c:27:
+int atomic64_add_unless_cx8(atomic64_t *v, long long a, long long u);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#721: FILE: arch/x86/lib/atomic64_32.c:33:
+long long atomic64_set_386(long long, const atomic64_t *v);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'long long' should also have an identifier name
#721: FILE: arch/x86/lib/atomic64_32.c:33:
+long long atomic64_set_386(long long, const atomic64_t *v);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#723: FILE: arch/x86/lib/atomic64_32.c:35:
+long long atomic64_xchg_386(long long, unsigned high);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#723: FILE: arch/x86/lib/atomic64_32.c:35:
+long long atomic64_xchg_386(long long, unsigned high);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'long long' should also have an identifier name
#723: FILE: arch/x86/lib/atomic64_32.c:35:
+long long atomic64_xchg_386(long long, unsigned high);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#725: FILE: arch/x86/lib/atomic64_32.c:37:
+long long atomic64_add_return_386(long long a, atomic64_t *v);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#727: FILE: arch/x86/lib/atomic64_32.c:39:
+long long atomic64_sub_return_386(long long a, atomic64_t *v);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#729: FILE: arch/x86/lib/atomic64_32.c:41:
+long long atomic64_inc_return_386(long long a, atomic64_t *v);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#731: FILE: arch/x86/lib/atomic64_32.c:43:
+long long atomic64_dec_return_386(long long a, atomic64_t *v);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#733: FILE: arch/x86/lib/atomic64_32.c:45:
+long long atomic64_add_386(long long a, atomic64_t *v);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#735: FILE: arch/x86/lib/atomic64_32.c:47:
+long long atomic64_sub_386(long long a, atomic64_t *v);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#737: FILE: arch/x86/lib/atomic64_32.c:49:
+long long atomic64_inc_386(long long a, atomic64_t *v);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#739: FILE: arch/x86/lib/atomic64_32.c:51:
+long long atomic64_dec_386(long long a, atomic64_t *v);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#741: FILE: arch/x86/lib/atomic64_32.c:53:
+long long atomic64_dec_if_positive_386(atomic64_t *v);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#743: FILE: arch/x86/lib/atomic64_32.c:55:
+int atomic64_inc_not_zero_386(atomic64_t *v);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#745: FILE: arch/x86/lib/atomic64_32.c:57:
+int atomic64_add_unless_386(atomic64_t *v, long long a, long long u);

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#749: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#754: FILE: arch/x86/lib/atomic64_386_32.S:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#935: FILE: arch/x86/lib/atomic64_cx8_32.S:1:
+/*

WARNING:REPEATED_WORD: Possible repeated word: 'add'
#1039: FILE: arch/x86/lib/atomic64_cx8_32.S:105:
+addsub_return add add adc

WARNING:REPEATED_WORD: Possible repeated word: 'sub'
#1040: FILE: arch/x86/lib/atomic64_cx8_32.S:106:
+addsub_return sub sub sbb

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000009711.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 58 warnings, 2 checks, 1047 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000009711.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
