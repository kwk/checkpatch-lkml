WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#88: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#93: FILE: include/linux/lock_monitor.h:1:
+#ifndef __LINUX_LOCK_MONITOR_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#132: FILE: include/linux/lock_monitor.h:40:
+extern void lock_monitor_register(struct lock_monitor_hook *new_hook);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#133: FILE: include/linux/lock_monitor.h:41:
+extern void lock_monitor_unregister(const char *name);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#150: FILE: include/linux/lock_monitor.h:58:
+extern void lock_acquire(struct lock_monitor *monitor, unsigned int subclass,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#153: FILE: include/linux/lock_monitor.h:61:
+extern void lock_acquired(struct lock_monitor *monitor, unsigned long ip);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#154: FILE: include/linux/lock_monitor.h:62:
+extern void lock_contended(struct lock_monitor *monitor, unsigned long ip);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#155: FILE: include/linux/lock_monitor.h:63:
+extern void lock_release(struct lock_monitor *monitor, int nested,

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_lock' - possible side-effects?
#158: FILE: include/linux/lock_monitor.h:66:
+#define LOCK_CONTENDED(_lock, try, lock)				\
+	do {								\
+	if (!try(_lock)) {						\
+		lock_contended(&(_lock)->monitor, _RET_IP_);	\
+		lock(_lock);						\
+	}								\
+	lock_acquired(&(_lock)->monitor, _RET_IP_);		\
+} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'try' may be better as '(try)' to avoid precedence issues
#158: FILE: include/linux/lock_monitor.h:66:
+#define LOCK_CONTENDED(_lock, try, lock)				\
+	do {								\
+	if (!try(_lock)) {						\
+		lock_contended(&(_lock)->monitor, _RET_IP_);	\
+		lock(_lock);						\
+	}								\
+	lock_acquired(&(_lock)->monitor, _RET_IP_);		\
+} while (0)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#159: FILE: include/linux/lock_monitor.h:67:
+	do {								\
+	if (!try(_lock)) {						\

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#181: FILE: include/linux/lock_monitor.h:89:
+static inline void lock_acquire(struct lock_monitor *monitor, unsigned int subclass,
+			 int trylock, int read, int check,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#195: FILE: include/linux/lock_monitor.h:103:
+static inline void lock_release(struct lock_monitor *monitor, int nested,
+			 unsigned long ip)

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#199: FILE: include/linux/lock_monitor.h:107:
+#define LOCK_CONTENDED(_lock, try, lock)	\
+	lock(_lock);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#202: FILE: include/linux/lock_monitor.h:110:
+#define LOCK_CONTENDED_FLAGS(_lock, try, lock, lockfl, flags)	\
+	lock(_lock);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#282: FILE: kernel/lock_monitor.c:1:
+/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#282: FILE: kernel/lock_monitor.c:1:
+/* 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#284: FILE: kernel/lock_monitor.c:3:
+ * Started by Hitoshi Mitake <mitake@dcl.info.waseda.ac.jp> $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#307: FILE: kernel/lock_monitor.c:26:
+	printk(KERN_INFO "new lock hook:%s registered\n", new_hook->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#322: FILE: kernel/lock_monitor.c:41:
+			printk(KERN_INFO "lock hook:%s unregistered\n", hook->name);

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#327: FILE: kernel/lock_monitor.c:46:
+	printk(KERN_ERR "request occured for unregistering "
 	                         ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#327: FILE: kernel/lock_monitor.c:46:
+	printk(KERN_ERR "request occured for unregistering "

WARNING:SPLIT_STRING: quoted string split across lines
#328: FILE: kernel/lock_monitor.c:47:
+	printk(KERN_ERR "request occured for unregistering "
+	       "unknown look hook:%s\n", name);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#336: FILE: kernel/lock_monitor.c:55:
+void lock_acquire(struct lock_monitor *monitor, unsigned int subclass,
+			 int trylock, int read, int check,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#375: FILE: kernel/lock_monitor.c:94:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#396: FILE: kernel/lock_monitor.c:115:
+void lock_release(struct lock_monitor *monitor, int nested,
+			 unsigned long ip)

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#422: FILE: lib/Kconfig.debug:446:
+config LOCK_MONITOR
+	bool "Lock monitoring"
+	depends on DEBUG_KERNEL
+	help
+	  Enable lock monitor.
+	  Lock monitor is a generic lock event hooking mechanism.
+	  You can add any hooks to events of acquire, acquired, contended, release.
+

Kconfig symbols should have a help text which fully describes
it.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000000267.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 12 warnings, 13 checks, 352 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000000267.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
