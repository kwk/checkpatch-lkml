WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#39: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#44: FILE: fs/aufs/opts.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:CAMELCASE: Avoid CamelCase: <Opt_br>
#64: FILE: fs/aufs/opts.c:21:
+	Opt_br,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Opt_add>
#65: FILE: fs/aufs/opts.c:22:
+	Opt_add, Opt_del, Opt_mod, Opt_reorder, Opt_append, Opt_prepend,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_del>
#65: FILE: fs/aufs/opts.c:22:
+	Opt_add, Opt_del, Opt_mod, Opt_reorder, Opt_append, Opt_prepend,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_mod>
#65: FILE: fs/aufs/opts.c:22:
+	Opt_add, Opt_del, Opt_mod, Opt_reorder, Opt_append, Opt_prepend,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_reorder>
#65: FILE: fs/aufs/opts.c:22:
+	Opt_add, Opt_del, Opt_mod, Opt_reorder, Opt_append, Opt_prepend,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_append>
#65: FILE: fs/aufs/opts.c:22:
+	Opt_add, Opt_del, Opt_mod, Opt_reorder, Opt_append, Opt_prepend,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_prepend>
#65: FILE: fs/aufs/opts.c:22:
+	Opt_add, Opt_del, Opt_mod, Opt_reorder, Opt_append, Opt_prepend,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_idel>
#66: FILE: fs/aufs/opts.c:23:
+	Opt_idel, Opt_imod, Opt_ireorder,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_imod>
#66: FILE: fs/aufs/opts.c:23:
+	Opt_idel, Opt_imod, Opt_ireorder,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_ireorder>
#66: FILE: fs/aufs/opts.c:23:
+	Opt_idel, Opt_imod, Opt_ireorder,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_dirwh>
#67: FILE: fs/aufs/opts.c:24:
+	Opt_dirwh, Opt_rdcache, Opt_deblk, Opt_nhash, Opt_rendir,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_rdcache>
#67: FILE: fs/aufs/opts.c:24:
+	Opt_dirwh, Opt_rdcache, Opt_deblk, Opt_nhash, Opt_rendir,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_deblk>
#67: FILE: fs/aufs/opts.c:24:
+	Opt_dirwh, Opt_rdcache, Opt_deblk, Opt_nhash, Opt_rendir,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_nhash>
#67: FILE: fs/aufs/opts.c:24:
+	Opt_dirwh, Opt_rdcache, Opt_deblk, Opt_nhash, Opt_rendir,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_rendir>
#67: FILE: fs/aufs/opts.c:24:
+	Opt_dirwh, Opt_rdcache, Opt_deblk, Opt_nhash, Opt_rendir,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_xino>
#68: FILE: fs/aufs/opts.c:25:
+	Opt_xino, Opt_zxino, Opt_noxino,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_zxino>
#68: FILE: fs/aufs/opts.c:25:
+	Opt_xino, Opt_zxino, Opt_noxino,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_noxino>
#68: FILE: fs/aufs/opts.c:25:
+	Opt_xino, Opt_zxino, Opt_noxino,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_trunc_xino>
#69: FILE: fs/aufs/opts.c:26:
+	Opt_trunc_xino, Opt_trunc_xino_v, Opt_notrunc_xino,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_trunc_xino_v>
#69: FILE: fs/aufs/opts.c:26:
+	Opt_trunc_xino, Opt_trunc_xino_v, Opt_notrunc_xino,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_notrunc_xino>
#69: FILE: fs/aufs/opts.c:26:
+	Opt_trunc_xino, Opt_trunc_xino_v, Opt_notrunc_xino,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_trunc_xino_path>
#70: FILE: fs/aufs/opts.c:27:
+	Opt_trunc_xino_path, Opt_itrunc_xino,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_itrunc_xino>
#70: FILE: fs/aufs/opts.c:27:
+	Opt_trunc_xino_path, Opt_itrunc_xino,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_trunc_xib>
#71: FILE: fs/aufs/opts.c:28:
+	Opt_trunc_xib, Opt_notrunc_xib,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_notrunc_xib>
#71: FILE: fs/aufs/opts.c:28:
+	Opt_trunc_xib, Opt_notrunc_xib,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_plink>
#72: FILE: fs/aufs/opts.c:29:
+	Opt_plink, Opt_noplink, Opt_list_plink,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_noplink>
#72: FILE: fs/aufs/opts.c:29:
+	Opt_plink, Opt_noplink, Opt_list_plink,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_list_plink>
#72: FILE: fs/aufs/opts.c:29:
+	Opt_plink, Opt_noplink, Opt_list_plink,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_udba>
#73: FILE: fs/aufs/opts.c:30:
+	Opt_udba,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_cmd>
#75: FILE: fs/aufs/opts.c:32:
+	Opt_cmd, Opt_cmd_args,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_cmd_args>
#75: FILE: fs/aufs/opts.c:32:
+	Opt_cmd, Opt_cmd_args,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_diropq_a>
#76: FILE: fs/aufs/opts.c:33:
+	Opt_diropq_a, Opt_diropq_w,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_diropq_w>
#76: FILE: fs/aufs/opts.c:33:
+	Opt_diropq_a, Opt_diropq_w,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_warn_perm>
#77: FILE: fs/aufs/opts.c:34:
+	Opt_warn_perm, Opt_nowarn_perm,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_nowarn_perm>
#77: FILE: fs/aufs/opts.c:34:
+	Opt_warn_perm, Opt_nowarn_perm,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_wbr_copyup>
#78: FILE: fs/aufs/opts.c:35:
+	Opt_wbr_copyup, Opt_wbr_create,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_wbr_create>
#78: FILE: fs/aufs/opts.c:35:
+	Opt_wbr_copyup, Opt_wbr_create,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_refrof>
#79: FILE: fs/aufs/opts.c:36:
+	Opt_refrof, Opt_norefrof,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_norefrof>
#79: FILE: fs/aufs/opts.c:36:
+	Opt_refrof, Opt_norefrof,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_verbose>
#80: FILE: fs/aufs/opts.c:37:
+	Opt_verbose, Opt_noverbose,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_noverbose>
#80: FILE: fs/aufs/opts.c:37:
+	Opt_verbose, Opt_noverbose,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_sum>
#81: FILE: fs/aufs/opts.c:38:
+	Opt_sum, Opt_nosum, Opt_wsum,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_nosum>
#81: FILE: fs/aufs/opts.c:38:
+	Opt_sum, Opt_nosum, Opt_wsum,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_wsum>
#81: FILE: fs/aufs/opts.c:38:
+	Opt_sum, Opt_nosum, Opt_wsum,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_tail>
#82: FILE: fs/aufs/opts.c:39:
+	Opt_tail, Opt_ignore, Opt_ignore_silent, Opt_err

CHECK:CAMELCASE: Avoid CamelCase: <Opt_ignore>
#82: FILE: fs/aufs/opts.c:39:
+	Opt_tail, Opt_ignore, Opt_ignore_silent, Opt_err

CHECK:CAMELCASE: Avoid CamelCase: <Opt_ignore_silent>
#82: FILE: fs/aufs/opts.c:39:
+	Opt_tail, Opt_ignore, Opt_ignore_silent, Opt_err

CHECK:CAMELCASE: Avoid CamelCase: <Opt_err>
#82: FILE: fs/aufs/opts.c:39:
+	Opt_tail, Opt_ignore, Opt_ignore_silent, Opt_err

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#191: FILE: fs/aufs/opts.c:148:
+	BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:CAMELCASE: Avoid CamelCase: <AuBrPerm_RO>
#198: FILE: fs/aufs/opts.c:155:
+	{AuBrPerm_RO, AUFS_BRPERM_RO},

CHECK:CAMELCASE: Avoid CamelCase: <AuBrPerm_RR>
#199: FILE: fs/aufs/opts.c:156:
+	{AuBrPerm_RR, AUFS_BRPERM_RR},

CHECK:CAMELCASE: Avoid CamelCase: <AuBrPerm_RW>
#200: FILE: fs/aufs/opts.c:157:
+	{AuBrPerm_RW, AUFS_BRPERM_RW},

CHECK:CAMELCASE: Avoid CamelCase: <AuBrPerm_ROWH>
#202: FILE: fs/aufs/opts.c:159:
+	{AuBrPerm_ROWH, AUFS_BRPERM_ROWH},

CHECK:CAMELCASE: Avoid CamelCase: <AuBrPerm_RRWH>
#203: FILE: fs/aufs/opts.c:160:
+	{AuBrPerm_RRWH, AUFS_BRPERM_RRWH},

CHECK:CAMELCASE: Avoid CamelCase: <AuBrPerm_RWNoLinkWH>
#204: FILE: fs/aufs/opts.c:161:
+	{AuBrPerm_RWNoLinkWH, AUFS_BRPERM_RWNLWH},

CHECK:CAMELCASE: Avoid CamelCase: <AuOpt_UDBA_REVAL>
#227: FILE: fs/aufs/opts.c:184:
+	{AuOpt_UDBA_REVAL, "reval"},

CHECK:CAMELCASE: Avoid CamelCase: <AuOpt_UDBA_NONE>
#228: FILE: fs/aufs/opts.c:185:
+	{AuOpt_UDBA_NONE, "none"},

CHECK:CAMELCASE: Avoid CamelCase: <AuOpt_UDBA_HINOTIFY>
#230: FILE: fs/aufs/opts.c:187:
+	{AuOpt_UDBA_HINOTIFY, "inotify"},

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCreate_TDP>
#250: FILE: fs/aufs/opts.c:207:
+	{AuWbrCreate_TDP, "tdp"},

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCreate_RR>
#252: FILE: fs/aufs/opts.c:209:
+	{AuWbrCreate_RR, "rr"},

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCreate_MFS>
#254: FILE: fs/aufs/opts.c:211:
+	{AuWbrCreate_MFS, "mfs"},

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCreate_MFSV>
#256: FILE: fs/aufs/opts.c:213:
+	{AuWbrCreate_MFSV, "mfs:%d"},

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCreate_MFSRR>
#259: FILE: fs/aufs/opts.c:216:
+	{AuWbrCreate_MFSRR, "mfsrr:%d"},

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCreate_MFSRRV>
#260: FILE: fs/aufs/opts.c:217:
+	{AuWbrCreate_MFSRRV, "mfsrr:%d:%d"},

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCreate_PMFS>
#261: FILE: fs/aufs/opts.c:218:
+	{AuWbrCreate_PMFS, "pmfs"},

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCreate_PMFSV>
#262: FILE: fs/aufs/opts.c:219:
+	{AuWbrCreate_PMFSV, "pmfs:%d"},

WARNING:CONSIDER_KSTRTO: strict_strtoull is obsolete, use kstrtoull instead
#279: FILE: fs/aufs/opts.c:236:
+		err = strict_strtoull(a, 0, result);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:BRACES: braces {} should be used on all arms of this statement
#291: FILE: fs/aufs/opts.c:248:
+	if (!au_match_ull(arg, &ull))
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#293: FILE: fs/aufs/opts.c:250:
+	else {

CHECK:CAMELCASE: Avoid CamelCase: <AuErr>
#294: FILE: fs/aufs/opts.c:251:
+		AuErr("bad integer in %s\n", str);

CHECK:BRACES: braces {} should be used on all arms of this statement
#307: FILE: fs/aufs/opts.c:264:
+	if (!match_int(arg, &n) && 0 <= n)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#309: FILE: fs/aufs/opts.c:266:
+	else {

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#338: FILE: fs/aufs/opts.c:295:
+		/*FALLTHROUGH*/

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCopyup_TDP>
#360: FILE: fs/aufs/opts.c:317:
+	{AuWbrCopyup_TDP, "tdp"},

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCopyup_BUP>
#362: FILE: fs/aufs/opts.c:319:
+	{AuWbrCopyup_BUP, "bup"},

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCopyup_BU>
#364: FILE: fs/aufs/opts.c:321:
+	{AuWbrCopyup_BU, "bu"},

CHECK:CAMELCASE: Avoid CamelCase: <AuDbg>
#404: FILE: fs/aufs/opts.c:361:
+			AuDbg("add {b%d, %s, 0x%x, %p}\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#405: FILE: fs/aufs/opts.c:362:
+			AuDbg("add {b%d, %s, 0x%x, %p}\n",
+				  u.add->bindex, u.add->pathname, u.add->perm,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#418: FILE: fs/aufs/opts.c:375:
+			AuDbg("mod {%s, 0x%x, %p}\n",
+				  u.mod->path, u.mod->perm, u.mod->h_root);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#423: FILE: fs/aufs/opts.c:380:
+			AuDbg("append {b%d, %s, 0x%x, %p}\n",
+				  u.add->bindex, u.add->pathname, u.add->perm,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#429: FILE: fs/aufs/opts.c:386:
+			AuDbg("prepend {b%d, %s, 0x%x, %p}\n",
+				  u.add->bindex, u.add->pathname, u.add->perm,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#441: FILE: fs/aufs/opts.c:398:
+			AuDbg("xino {%s %.*s}\n",
+				  u.xino->path,

CHECK:CAMELCASE: Avoid CamelCase: <AuDLNPair>
#442: FILE: fs/aufs/opts.c:399:
+				  AuDLNPair(u.xino->file->f_dentry));

CHECK:CAMELCASE: Avoid CamelCase: <AuLabel>
#445: FILE: fs/aufs/opts.c:402:
+			AuLabel(trunc_xino);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#476: FILE: fs/aufs/opts.c:433:
+			AuDbg("udba %d, %s\n",
+				  opt->udba, au_optstr_udba(opt->udba));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#514: FILE: fs/aufs/opts.c:471:
+			AuDbg("create %d, %s\n", u.create->wbr_create,
+				  au_optstr_wbr_create(u.create->wbr_create));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#522: FILE: fs/aufs/opts.c:479:
+				AuDbg("%llu watermark\n",
+					  u.create->mfsrr_watermark);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#526: FILE: fs/aufs/opts.c:483:
+				AuDbg("%llu watermark, %d sec\n",
+					  u.create->mfsrr_watermark,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#533: FILE: fs/aufs/opts.c:490:
+			AuDbg("copyup %d, %s\n", opt->wbr_copyup,
+				  au_optstr_wbr_copyup(opt->wbr_copyup));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#536: FILE: fs/aufs/opts.c:493:
+			BUG();

CHECK:CAMELCASE: Avoid CamelCase: <AuBrPerm_Last>
#579: FILE: fs/aufs/opts.c:536:
+	add->perm = AuBrPerm_Last;

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#621: FILE: fs/aufs/opts.c:578:
+#if 0 /* reserved for future use */

CHECK:CAMELCASE: Avoid CamelCase: <AuLock_FLUSH>
#630: FILE: fs/aufs/opts.c:587:
+	aufs_read_lock(root, AuLock_FLUSH);

CHECK:CAMELCASE: Avoid CamelCase: <AuLock_IR>
#641: FILE: fs/aufs/opts.c:598:
+	aufs_read_unlock(root, !AuLock_IR);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#676: FILE: fs/aufs/opts.c:633:
+#if 0 /* reserved for future use */

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#804: FILE: fs/aufs/opts.c:761:
+			while (!err && (opt_str = strsep(&a->args[0].from, ":"))
+			       && *opt_str) {

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#843: FILE: fs/aufs/opts.c:800:
+#if 0 /* reserved for future use */

CHECK:BRACES: braces {} should be used on all arms of this statement
#942: FILE: fs/aufs/opts.c:899:
+			if (opt->udba >= 0) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#945: FILE: fs/aufs/opts.c:902:
+			} else

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#952: FILE: fs/aufs/opts.c:909:
+			u.create->wbr_create
+				= au_wbr_create_val(a->args[0].from, u.create);

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

CHECK:BRACES: braces {} should be used on all arms of this statement
#953: FILE: fs/aufs/opts.c:910:
+			if (u.create->wbr_create >= 0) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#956: FILE: fs/aufs/opts.c:913:
+			} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#961: FILE: fs/aufs/opts.c:918:
+			if (opt->wbr_copyup >= 0) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#964: FILE: fs/aufs/opts.c:921:
+			} else

CHECK:CAMELCASE: Avoid CamelCase: <AuWarn>
#969: FILE: fs/aufs/opts.c:926:
+			AuWarn("ignored %s\n", opt_str);

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#970: FILE: fs/aufs/opts.c:927:
+			/*FALLTHROUGH*/

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1020: FILE: fs/aufs/opts.c:977:
+		/*FALLTHROUGH*/

CHECK:CAMELCASE: Avoid CamelCase: <AuOptMask_UDBA>
#1050: FILE: fs/aufs/opts.c:1007:
+		sbinfo->si_mntflags &= ~AuOptMask_UDBA;

WARNING:INDENTED_LABEL: labels should not be indented
#1172: FILE: fs/aufs/opts.c:1129:
+	add:

CHECK:CAMELCASE: Avoid CamelCase: <AuDebugOn>
#1270: FILE: fs/aufs/opts.c:1227:
+	AuDebugOn(!(sbinfo->si_mntflags & AuOptMask_UDBA));

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1273: FILE: fs/aufs/opts.c:1230:
+	if (unlikely(!(sb_flags & MS_RDONLY)
+		     && !au_br_writable(au_sbr_perm(sb, 0))))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1277: FILE: fs/aufs/opts.c:1234:
+	if (au_opt_test((sbinfo->si_mntflags | pending), UDBA_HINOTIFY)
+	    && !au_opt_test(sbinfo->si_mntflags, XINO))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1302: FILE: fs/aufs/opts.c:1259:
+			skip = (!wbr
+				|| (!wbr->wbr_whbase

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1303: FILE: fs/aufs/opts.c:1260:
+				|| (!wbr->wbr_whbase
+				    && !wbr->wbr_plink

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1304: FILE: fs/aufs/opts.c:1261:
+				    && !wbr->wbr_plink
+				    && !wbr->wbr_orph));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1330: FILE: fs/aufs/opts.c:1287:
+			BUG();

CHECK:CAMELCASE: Avoid CamelCase: <AuLsc_I_PARENT>
#1339: FILE: fs/aufs/opts.c:1296:
+		au_hin_imtx_lock_nested(hdir, AuLsc_I_PARENT);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1426: FILE: fs/aufs/opts.c:1383:
+		struct inode *dir = sb->s_root->d_inode;
+		au_reset_hinotify(dir,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <AuHi_XINO>
#1427: FILE: fs/aufs/opts.c:1384:
+				  au_hi_flags(dir, /*isdir*/1) & ~AuHi_XINO);

CHECK:CAMELCASE: Avoid CamelCase: <AuTraceErr>
#1457: FILE: fs/aufs/opts.c:1414:
+	AuTraceErr(err);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1472: FILE: fs/aufs/opts.c:1429:
+	if (!au_ftest_opts(opts->flags, REFRESH_DIR)
+	    && (opts->given_udba || au_opt_test(sbinfo->si_mntflags, XINO)))

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1491: FILE: fs/aufs/opts.h:1:
+/*

CHECK:CAMELCASE: Avoid CamelCase: <AuOpt_XINO>
#1516: FILE: fs/aufs/opts.h:26:
+#define AuOpt_XINO		1		/* external inode number bitmap

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1517: FILE: fs/aufs/opts.h:27:
+#define AuOpt_XINO		1		/* external inode number bitmap
+						   and translation table */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1517: FILE: fs/aufs/opts.h:27:
+						   and translation table */

CHECK:CAMELCASE: Avoid CamelCase: <AuOpt_TRUNC_XINO>
#1518: FILE: fs/aufs/opts.h:28:
+#define AuOpt_TRUNC_XINO	(1 << 1)	/* truncate xino files */

CHECK:BIT_MACRO: Prefer using the BIT macro
#1518: FILE: fs/aufs/opts.h:28:
+#define AuOpt_TRUNC_XINO	(1 << 1)	/* truncate xino files */

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#1519: FILE: fs/aufs/opts.h:29:
+#define AuOpt_UDBA_NONE		(1 << 2)	/* users direct branch access */

CHECK:BIT_MACRO: Prefer using the BIT macro
#1520: FILE: fs/aufs/opts.h:30:
+#define AuOpt_UDBA_REVAL	(1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1521: FILE: fs/aufs/opts.h:31:
+#define AuOpt_UDBA_HINOTIFY	(1 << 4)

CHECK:CAMELCASE: Avoid CamelCase: <AuOpt_PLINK>
#1522: FILE: fs/aufs/opts.h:32:
+#define AuOpt_PLINK		(1 << 5)	/* pseudo-link */

CHECK:BIT_MACRO: Prefer using the BIT macro
#1522: FILE: fs/aufs/opts.h:32:
+#define AuOpt_PLINK		(1 << 5)	/* pseudo-link */

CHECK:CAMELCASE: Avoid CamelCase: <AuOpt_DIRPERM1>
#1523: FILE: fs/aufs/opts.h:33:
+#define AuOpt_DIRPERM1		(1 << 6)	/* unimplemented */

CHECK:BIT_MACRO: Prefer using the BIT macro
#1523: FILE: fs/aufs/opts.h:33:
+#define AuOpt_DIRPERM1		(1 << 6)	/* unimplemented */

CHECK:CAMELCASE: Avoid CamelCase: <AuOpt_REFROF>
#1524: FILE: fs/aufs/opts.h:34:
+#define AuOpt_REFROF		(1 << 7)	/* unimplemented */

CHECK:BIT_MACRO: Prefer using the BIT macro
#1524: FILE: fs/aufs/opts.h:34:
+#define AuOpt_REFROF		(1 << 7)	/* unimplemented */

CHECK:CAMELCASE: Avoid CamelCase: <AuOpt_ALWAYS_DIROPQ>
#1525: FILE: fs/aufs/opts.h:35:
+#define AuOpt_ALWAYS_DIROPQ	(1 << 8)	/* policy to creating diropq */

CHECK:BIT_MACRO: Prefer using the BIT macro
#1525: FILE: fs/aufs/opts.h:35:
+#define AuOpt_ALWAYS_DIROPQ	(1 << 8)	/* policy to creating diropq */

CHECK:CAMELCASE: Avoid CamelCase: <AuOpt_SUM>
#1526: FILE: fs/aufs/opts.h:36:
+#define AuOpt_SUM		(1 << 9)	/* summation for statfs(2) */

CHECK:BIT_MACRO: Prefer using the BIT macro
#1526: FILE: fs/aufs/opts.h:36:
+#define AuOpt_SUM		(1 << 9)	/* summation for statfs(2) */

CHECK:CAMELCASE: Avoid CamelCase: <AuOpt_SUM_W>
#1527: FILE: fs/aufs/opts.h:37:
+#define AuOpt_SUM_W		(1 << 10)	/* unimplemented */

CHECK:BIT_MACRO: Prefer using the BIT macro
#1527: FILE: fs/aufs/opts.h:37:
+#define AuOpt_SUM_W		(1 << 10)	/* unimplemented */

CHECK:CAMELCASE: Avoid CamelCase: <AuOpt_WARN_PERM>
#1528: FILE: fs/aufs/opts.h:38:
+#define AuOpt_WARN_PERM		(1 << 11)	/* warn when add-branch */

CHECK:BIT_MACRO: Prefer using the BIT macro
#1528: FILE: fs/aufs/opts.h:38:
+#define AuOpt_WARN_PERM		(1 << 11)	/* warn when add-branch */

CHECK:CAMELCASE: Avoid CamelCase: <AuOpt_VERBOSE>
#1529: FILE: fs/aufs/opts.h:39:
+#define AuOpt_VERBOSE		(1 << 12)	/* busy inode when del-branch */

CHECK:BIT_MACRO: Prefer using the BIT macro
#1529: FILE: fs/aufs/opts.h:39:
+#define AuOpt_VERBOSE		(1 << 12)	/* busy inode when del-branch */

CHECK:CAMELCASE: Avoid CamelCase: <AuOpt_Def>
#1536: FILE: fs/aufs/opts.h:46:
+#define AuOpt_Def	(AuOpt_XINO \

CHECK:CAMELCASE: Avoid CamelCase: <AuOpt_##name>
#1545: FILE: fs/aufs/opts.h:55:
+#define au_opt_test(flags, name)	(flags & AuOpt_##name)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'flags' may be better as '(flags)' to avoid precedence issues
#1545: FILE: fs/aufs/opts.h:55:
+#define au_opt_test(flags, name)	(flags & AuOpt_##name)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'flags' - possible side-effects?
#1550: FILE: fs/aufs/opts.h:60:
+#define au_opt_set_udba(flags, name) do { \
+	(flags) &= ~AuOptMask_UDBA; \
+	((flags) |= AuOpt_##name); \
+} while (0)

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCreate_Def>
#1569: FILE: fs/aufs/opts.h:79:
+	AuWbrCreate_Def = AuWbrCreate_TDP

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCopyup_Def>
#1577: FILE: fs/aufs/opts.h:87:
+	AuWbrCopyup_Def = AuWbrCopyup_TDP

CHECK:CAMELCASE: Avoid CamelCase: <AuOpts_REMOUNT>
#1634: FILE: fs/aufs/opts.h:144:
+#define AuOpts_REMOUNT		1

CHECK:CAMELCASE: Avoid CamelCase: <AuOpts_REFRESH_DIR>
#1635: FILE: fs/aufs/opts.h:145:
+#define AuOpts_REFRESH_DIR	(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1635: FILE: fs/aufs/opts.h:145:
+#define AuOpts_REFRESH_DIR	(1 << 1)

CHECK:CAMELCASE: Avoid CamelCase: <AuOpts_REFRESH_NONDIR>
#1636: FILE: fs/aufs/opts.h:146:
+#define AuOpts_REFRESH_NONDIR	(1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1636: FILE: fs/aufs/opts.h:146:
+#define AuOpts_REFRESH_NONDIR	(1 << 2)

CHECK:CAMELCASE: Avoid CamelCase: <AuOpts_TRUNC_XIB>
#1637: FILE: fs/aufs/opts.h:147:
+#define AuOpts_TRUNC_XIB	(1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1637: FILE: fs/aufs/opts.h:147:
+#define AuOpts_TRUNC_XIB	(1 << 3)

CHECK:CAMELCASE: Avoid CamelCase: <AuOpts_##name>
#1638: FILE: fs/aufs/opts.h:148:
+#define au_ftest_opts(flags, name)	((flags) & AuOpts_##name)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000141176.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 17 warnings, 145 checks, 1621 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000141176.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
