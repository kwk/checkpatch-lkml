WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#45: FILE: arch/x86_64/kernel/aperture.c:99:
+		printk("Aperture pointing to runtime code. Ignoring.\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#46: FILE: arch/x86_64/kernel/aperture.c:100:
+^I^Ireturn 0; $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#47: FILE: arch/x86_64/kernel/aperture.c:101:
+^I} $

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#66: FILE: arch/x86_64/kernel/e820.c:238:
+		case E820_RUNTIME_CODE:	res->name = "EFI runtime code"; break;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#75: FILE: arch/x86_64/kernel/e820.c:389:
+				printk("(runtime code)\n");

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#149: FILE: arch/x86_64/kernel/setup.c:74:
+int efi_enabled = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#241: FILE: arch/x86_64/mm/init.c:55:
+static int efi_runtime_code_area = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:BRACES: braces {} should be used on all arms of this statement
#278: FILE: arch/x86_64/mm/init.c:274:
+		if (efi_runtime_code_area) {
[...]
+		} else entry = _PAGE_NX|_PAGE_PSE|_KERNPG_TABLE|_PAGE_GLOBAL|address;
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#281: FILE: arch/x86_64/mm/init.c:277:
+		} else entry = _PAGE_NX|_PAGE_PSE|_KERNPG_TABLE|_PAGE_GLOBAL|address;
 		                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#281: FILE: arch/x86_64/mm/init.c:277:
+		} else entry = _PAGE_NX|_PAGE_PSE|_KERNPG_TABLE|_PAGE_GLOBAL|address;
 		                                 ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#281: FILE: arch/x86_64/mm/init.c:277:
+		} else entry = _PAGE_NX|_PAGE_PSE|_KERNPG_TABLE|_PAGE_GLOBAL|address;
 		                                               ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#281: FILE: arch/x86_64/mm/init.c:277:
+		} else entry = _PAGE_NX|_PAGE_PSE|_KERNPG_TABLE|_PAGE_GLOBAL|address;
 		                                                            ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#281: FILE: arch/x86_64/mm/init.c:277:
+		} else entry = _PAGE_NX|_PAGE_PSE|_KERNPG_TABLE|_PAGE_GLOBAL|address;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#292: FILE: arch/x86_64/mm/init.c:307:
+		if (!after_bootmem && !efi_enabled &&
+			!e820_any_mapped(addr,addr+PUD_SIZE,0)) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#292: FILE: arch/x86_64/mm/init.c:307:
+			!e820_any_mapped(addr,addr+PUD_SIZE,0)) {
 			                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#292: FILE: arch/x86_64/mm/init.c:307:
+			!e820_any_mapped(addr,addr+PUD_SIZE,0)) {
 			                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#292: FILE: arch/x86_64/mm/init.c:307:
+			!e820_any_mapped(addr,addr+PUD_SIZE,0)) {
 			                                   ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#301: FILE: arch/x86_64/mm/init.c:354:
+   physical memory. To access them they are temporarily mapped. $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#302: FILE: arch/x86_64/mm/init.c:355:
+   This code can also be called to map EFI runtime code. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000411251.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 9 errors, 3 warnings, 7 checks, 252 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000411251.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
