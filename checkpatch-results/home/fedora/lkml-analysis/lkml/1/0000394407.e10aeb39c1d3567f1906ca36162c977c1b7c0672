WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#34: FILE: fs/logfs/segment.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#35: FILE: fs/logfs/segment.c:2:
+ * fs/logfs/segment.c	- Handling the Object Store

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#64: FILE: fs/logfs/segment.c:31:
+	BUG_ON(ret>0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#64: FILE: fs/logfs/segment.c:31:
+	BUG_ON(ret>0);
 	          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#70: FILE: fs/logfs/segment.c:37:
+	BUG_ON(area->a_used_bytes >= logfs_super(area->a_sb)->s_segsize);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#98: FILE: fs/logfs/segment.c:65:
+	BUG_ON(li->li_used_bytes + bytes < bytes);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#110: FILE: fs/logfs/segment.c:77:
+	BUG_ON(li->li_used_bytes < bytes);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#163: FILE: fs/logfs/segment.c:130:
+static s64 __logfs_segment_write(struct inode *inode, void *buf, u64 pos,
+		int level, int alloc, int len, int compr)

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#185: FILE: fs/logfs/segment.c:152:
+		int acc_len = (level==0) ? len : sb->s_blocksize;
 		                    ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#186: FILE: fs/logfs/segment.c:153:
+		int acc_len = (level==0) ? len : sb->s_blocksize;
+		logfs_consume_bytes(inode, acc_len + LOGFS_HEADERSIZE);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#196: FILE: fs/logfs/segment.c:163:
+static s64 logfs_segment_write_compress(struct inode *inode, void *buf, u64 pos,
+		int level, int alloc)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#209: FILE: fs/logfs/segment.c:176:
+		ofs = __logfs_segment_write(inode, compressor_buf, pos, level,
+				alloc, compr_len, COMPR_ZLIB);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#212: FILE: fs/logfs/segment.c:179:
+		ofs = __logfs_segment_write(inode, buf, pos, level, alloc, bs,
+				COMPR_NONE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#220: FILE: fs/logfs/segment.c:187:
+	BUG_ON(level >= LOGFS_MAX_LEVELS);

WARNING:TYPO_SPELLING: 'seperate' may be misspelled - perhaps 'separate'?
#223: FILE: fs/logfs/segment.c:190:
+		/* ifile has seperate areas */
 		             ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#230: FILE: fs/logfs/segment.c:197:
+s64 logfs_segment_write(struct inode *inode, void *buf, u64 pos, int level,
+		int alloc)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#247: FILE: fs/logfs/segment.c:214:
+		ofs = logfs_segment_write_compress(inode, buf, pos, level,
+				alloc);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#250: FILE: fs/logfs/segment.c:217:
+		ofs = __logfs_segment_write(inode, buf, pos, level, alloc, bs,
+				COMPR_NONE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#253: FILE: fs/logfs/segment.c:220:
+	BUG_ON(!(ofs & (logfs_super(sb)->s_segsize - 1)));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#259: FILE: fs/logfs/segment.c:226:
+static void fixup_from_wbuf(struct super_block *sb, struct logfs_area *area,
+		void *read, u64 ofs, size_t readlen)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#300: FILE: fs/logfs/segment.c:267:
+	for (i=0; i<LOGFS_NO_AREAS; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#300: FILE: fs/logfs/segment.c:267:
+	for (i=0; i<LOGFS_NO_AREAS; i++) {
 	           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#312: FILE: fs/logfs/segment.c:279:
+	~(I1_BLOCKS-1),
 	           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#313: FILE: fs/logfs/segment.c:280:
+	~(I2_BLOCKS-1),
 	           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#314: FILE: fs/logfs/segment.c:281:
+	~(I3_BLOCKS-1)
 	           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#329: FILE: fs/logfs/segment.c:296:
+int logfs_segment_read(struct inode *inode, void *buf, u64 ofs, u64 pos,
+		u8 level)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#344: FILE: fs/logfs/segment.c:311:
+		printk(KERN_ERR"LOGFS: header crc error at %llx: expected %x, "

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#344: FILE: fs/logfs/segment.c:311:
+		printk(KERN_ERR"LOGFS: header crc error at %llx: expected %x, "

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

WARNING:SPLIT_STRING: quoted string split across lines
#345: FILE: fs/logfs/segment.c:312:
+		printk(KERN_ERR"LOGFS: header crc error at %llx: expected %x, "
+				"got %x\n", ofs, be32_to_cpu(h.crc),

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#351: FILE: fs/logfs/segment.c:318:
+	if (be64_to_cpu(h.ino) != inode->i_ino
+			|| check_pos(sb, be64_to_cpu(h.pos), pos, level)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#352: FILE: fs/logfs/segment.c:319:
+		printk(KERN_ERR"LOGFS: (ino, pos) don't match at %llx: "

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#352: FILE: fs/logfs/segment.c:319:
+		printk(KERN_ERR"LOGFS: (ino, pos) don't match at %llx: "

WARNING:SPLIT_STRING: quoted string split across lines
#353: FILE: fs/logfs/segment.c:320:
+		printk(KERN_ERR"LOGFS: (ino, pos) don't match at %llx: "
+				"expected (%lx, %llx), got %llx, %llx)\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#368: FILE: fs/logfs/segment.c:335:
+			printk(KERN_ERR"LOGFS: uncompressed data crc error at "

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#368: FILE: fs/logfs/segment.c:335:
+			printk(KERN_ERR"LOGFS: uncompressed data crc error at "

WARNING:SPLIT_STRING: quoted string split across lines
#369: FILE: fs/logfs/segment.c:336:
+			printk(KERN_ERR"LOGFS: uncompressed data crc error at "
+					"%llx: expected %x, got %x\n", ofs,

ERROR:SPACING: space required after that ',' (ctx:VxV)
#377: FILE: fs/logfs/segment.c:344:
+		err = wbuf_read(sb, ofs + LOGFS_HEADERSIZE, len,compressor_buf);
 		                                               ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#384: FILE: fs/logfs/segment.c:351:
+			printk(KERN_ERR"LOGFS: compressed data crc error at "

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#384: FILE: fs/logfs/segment.c:351:
+			printk(KERN_ERR"LOGFS: compressed data crc error at "

WARNING:SPLIT_STRING: quoted string split across lines
#385: FILE: fs/logfs/segment.c:352:
+			printk(KERN_ERR"LOGFS: compressed data crc error at "
+					"%llx: expected %x, got %x\n", ofs,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#394: FILE: fs/logfs/segment.c:361:
+			printk(KERN_ERR"LOGFS: uncompress error at %llx\n",ofs);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#394: FILE: fs/logfs/segment.c:361:
+			printk(KERN_ERR"LOGFS: uncompress error at %llx\n",ofs);
 			                                                  ^

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#394: FILE: fs/logfs/segment.c:361:
+			printk(KERN_ERR"LOGFS: uncompress error at %llx\n",ofs);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#416: FILE: fs/logfs/segment.c:383:
+
+

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#423: FILE: fs/logfs/segment.c:390:
+	len = (level==0) ? len : sb->s_blocksize;
 	            ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#433: FILE: fs/logfs/segment.c:400:
+	err = btree_insert(head, segno, (void*)1);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#460: FILE: fs/logfs/segment.c:427:
+		printk(KERN_WARNING "LogFS: Error erasing segment %x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#461: FILE: fs/logfs/segment.c:428:
+		printk(KERN_WARNING "LogFS: Error erasing segment %x\n",
+				area->a_segno);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#485: FILE: fs/logfs/segment.c:452:
+	BUG_ON(list_empty(&super->s_free_list));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#494: FILE: fs/logfs/segment.c:461:
+		pr_debug("use segment #%02x, %2x remaining\n", area->a_segno,
+				super->s_free_count);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#503: FILE: fs/logfs/segment.c:470:
+	BUG_ON(err);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#612: FILE: fs/logfs/segment.c:579:
+	for (i=0; i<LOGFS_NO_AREAS; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#612: FILE: fs/logfs/segment.c:579:
+	for (i=0; i<LOGFS_NO_AREAS; i++) {
 	           ^

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#622: FILE: fs/logfs/segment.c:589:
+	for (i--; i>=0; i--)
 	           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#632: FILE: fs/logfs/segment.c:599:
+	for (i=0; i<LOGFS_NO_AREAS; i++)
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#632: FILE: fs/logfs/segment.c:599:
+	for (i=0; i<LOGFS_NO_AREAS; i++)
 	           ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000394407.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 13 errors, 23 warnings, 21 checks, 602 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000394407.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
