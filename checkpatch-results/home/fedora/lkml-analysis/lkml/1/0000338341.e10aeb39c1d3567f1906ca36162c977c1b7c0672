WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#38: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#43: FILE: fs/unionfs/mmap.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#73: FILE: fs/unionfs/mmap.c:31:
+	BUG_ON(!PageUptodate(page));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#121: FILE: fs/unionfs/mmap.c:79:
+	BUG_ON(!lower_mapping->a_ops->writepage);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#210: FILE: fs/unionfs/mmap.c:168:
+	BUG_ON(lower_file == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!lower_file"
#210: FILE: fs/unionfs/mmap.c:168:
+	BUG_ON(lower_file == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: No space is necessary after a cast
#214: FILE: fs/unionfs/mmap.c:172:
+	page_data = (char *) kmap(page);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#267: FILE: fs/unionfs/mmap.c:225:
+				 unsigned from, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#267: FILE: fs/unionfs/mmap.c:225:
+				 unsigned from, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#292: FILE: fs/unionfs/mmap.c:250:
+				unsigned from, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#292: FILE: fs/unionfs/mmap.c:250:
+				unsigned from, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#297: FILE: fs/unionfs/mmap.c:255:
+	unsigned bytes = to - from;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#301: FILE: fs/unionfs/mmap.c:259:
+	BUG_ON(file == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file"
#301: FILE: fs/unionfs/mmap.c:259:
+	BUG_ON(file == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "UNIONFS_F"
#311: FILE: fs/unionfs/mmap.c:269:
+	if (UNIONFS_F(file) != NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#315: FILE: fs/unionfs/mmap.c:273:
+	BUG_ON(lower_file == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!lower_file"
#315: FILE: fs/unionfs/mmap.c:273:
+	BUG_ON(lower_file == NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#342: FILE: fs/unionfs/mmap.c:300:
+	BUG_ON(!lower_inode);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct address_space *' should also have an identifier name
#364: FILE: fs/unionfs/mmap.c:322:
+	sector_t (*bmap)(struct address_space *, sector_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'sector_t' should also have an identifier name
#364: FILE: fs/unionfs/mmap.c:322:
+	sector_t (*bmap)(struct address_space *, sector_t);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#377: FILE: fs/unionfs/mmap.c:335:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#378: FILE: fs/unionfs/mmap.c:336:
+struct address_space_operations unionfs_aops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000338341.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 16 warnings, 6 checks, 343 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000338341.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
