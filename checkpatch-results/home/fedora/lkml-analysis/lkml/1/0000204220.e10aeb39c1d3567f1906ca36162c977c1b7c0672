WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#39: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#44: FILE: fs/ceph/super.c:1:
+#include <linux/module.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#81: FILE: fs/ceph/super.c:38:
+void ceph_peer_reset(void *p, struct ceph_entity_addr *peer_addr,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#84: FILE: fs/ceph/super.c:41:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#93: FILE: fs/ceph/super.c:50:
+		dout(30, "ceph_write_inode %llx.%llx .. atime updated\n",
 		^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ceph_write_inode', this function's name, in a string
#93: FILE: fs/ceph/super.c:50:
+		dout(30, "ceph_write_inode %llx.%llx .. atime updated\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#106: FILE: fs/ceph/super.c:63:
+	dout(30, "put_super\n");
 	^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#112: FILE: fs/ceph/super.c:69:
+		rc = wait_event_timeout(cl->mount_wq,
+				(cl->mount_state == CEPH_MOUNT_UNMOUNTED),

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#113: FILE: fs/ceph/super.c:70:
+				seconds*HZ);
 				       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:RETURN_VOID: void function return statements are not generally useful
#119: FILE: fs/ceph/super.c:76:
+	return;
+}

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#129: FILE: fs/ceph/super.c:86:
+	dout(30, "statfs\n");
 	^^^^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#142: FILE: fs/ceph/super.c:99:
+	buf->f_blocks = le64_to_cpu(st.f_total) >> (CEPH_BLOCK_SHIFT-10);
 	                                                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#143: FILE: fs/ceph/super.c:100:
+	buf->f_bfree = le64_to_cpu(st.f_free) >> (CEPH_BLOCK_SHIFT-10);
 	                                                          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#144: FILE: fs/ceph/super.c:101:
+	buf->f_bavail = le64_to_cpu(st.f_avail) >> (CEPH_BLOCK_SHIFT-10);
 	                                                            ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#159: FILE: fs/ceph/super.c:116:
+
+

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#162: FILE: fs/ceph/super.c:119:
+	dout(10, "sync_fs %d\n", wait);
 	^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#166: FILE: fs/ceph/super.c:123:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#199: FILE: fs/ceph/super.c:156:
+
+

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#205: FILE: fs/ceph/super.c:162:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 27)

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#205: FILE: fs/ceph/super.c:162:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 27)

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:LINE_SPACING: Missing a blank line after declarations
#212: FILE: fs/ceph/super.c:169:
+	struct ceph_inode_info *ci = foo;
+	inode_init_once(&ci->vfs_inode);

CHECK:SPACING: space preferred before that '|' (ctx:VxE)
#219: FILE: fs/ceph/super.c:176:
+					      0, (SLAB_RECLAIM_ACCOUNT|
 					                              ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ceph_inode_cachep"
#222: FILE: fs/ceph/super.c:179:
+	if (ceph_inode_cachep == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#232: FILE: fs/ceph/super.c:189:
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 26)

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#232: FILE: fs/ceph/super.c:189:
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 26)

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#238: FILE: fs/ceph/super.c:195:
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 26)

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#238: FILE: fs/ceph/super.c:195:
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 26)

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#244: FILE: fs/ceph/super.c:201:
+	dout(30, "ceph_umount_begin\n");
 	^^^^

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#246: FILE: fs/ceph/super.c:203:
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 26)

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#246: FILE: fs/ceph/super.c:203:
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 26)

WARNING:RETURN_VOID: void function return statements are not generally useful
#256: FILE: fs/ceph/super.c:213:
+	return;
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#258: FILE: fs/ceph/super.c:215:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#270: FILE: fs/ceph/super.c:227:
+
+

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#282: FILE: fs/ceph/super.c:239:
+	dout(2, "handle_monmap had epoch %d\n", client->monc.monmap->epoch);
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'handle_monmap', this function's name, in a string
#282: FILE: fs/ceph/super.c:239:
+	dout(2, "handle_monmap had epoch %d\n", client->monc.monmap->epoch);

WARNING:LINE_SPACING: Missing a blank line after declarations
#295: FILE: fs/ceph/super.c:252:
+		char name[10];
+		client->whoami = le32_to_cpu(msg->hdr.dst.name.num);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#298: FILE: fs/ceph/super.c:255:
+		dout(1, "i am %s, fsid is %llx.%llx\n", name,
 		^^^^

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#302: FILE: fs/ceph/super.c:259:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 25)

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#302: FILE: fs/ceph/super.c:259:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 25)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#305: FILE: fs/ceph/super.c:262:
+		/*
+		  client->fsid_kobj = kobject_create_and_add("fsid",

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#349: FILE: fs/ceph/super.c:306:
+	dout(30, "ceph_peer_reset %s%d\n", ENTITY_NAME(*peer_name));
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ceph_peer_reset', this function's name, in a string
#349: FILE: fs/ceph/super.c:306:
+	dout(30, "ceph_peer_reset %s%d\n", ENTITY_NAME(*peer_name));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#353: FILE: fs/ceph/super.c:310:
+		ceph_mdsc_handle_reset(&client->mdsc,
+					      le32_to_cpu(peer_name->num));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#361: FILE: fs/ceph/super.c:318:
+
+

CHECK:CAMELCASE: Avoid CamelCase: <Opt_fsidmajor>
#366: FILE: fs/ceph/super.c:323:
+	Opt_fsidmajor,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Opt_fsidminor>
#367: FILE: fs/ceph/super.c:324:
+	Opt_fsidminor,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_debug>
#368: FILE: fs/ceph/super.c:325:
+	Opt_debug,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_debug_console>
#369: FILE: fs/ceph/super.c:326:
+	Opt_debug_console,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_debug_msgr>
#370: FILE: fs/ceph/super.c:327:
+	Opt_debug_msgr,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_debug_mdsc>
#371: FILE: fs/ceph/super.c:328:
+	Opt_debug_mdsc,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_debug_osdc>
#372: FILE: fs/ceph/super.c:329:
+	Opt_debug_osdc,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_debug_addr>
#373: FILE: fs/ceph/super.c:330:
+	Opt_debug_addr,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_debug_inode>
#374: FILE: fs/ceph/super.c:331:
+	Opt_debug_inode,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_debug_snap>
#375: FILE: fs/ceph/super.c:332:
+	Opt_debug_snap,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_debug_ioctl>
#376: FILE: fs/ceph/super.c:333:
+	Opt_debug_ioctl,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_debug_caps>
#377: FILE: fs/ceph/super.c:334:
+	Opt_debug_caps,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_monport>
#378: FILE: fs/ceph/super.c:335:
+	Opt_monport,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_port>
#379: FILE: fs/ceph/super.c:336:
+	Opt_port,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_wsize>
#380: FILE: fs/ceph/super.c:337:
+	Opt_wsize,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_rsize>
#381: FILE: fs/ceph/super.c:338:
+	Opt_rsize,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_osdtimeout>
#382: FILE: fs/ceph/super.c:339:
+	Opt_osdtimeout,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_mount_timeout>
#383: FILE: fs/ceph/super.c:340:
+	Opt_mount_timeout,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_ip>
#385: FILE: fs/ceph/super.c:342:
+	Opt_ip,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_noshare>
#386: FILE: fs/ceph/super.c:343:
+	Opt_noshare,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_unsafewriteback>
#387: FILE: fs/ceph/super.c:344:
+	Opt_unsafewriteback,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_safewriteback>
#388: FILE: fs/ceph/super.c:345:
+	Opt_safewriteback,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_dirstat>
#389: FILE: fs/ceph/super.c:346:
+	Opt_dirstat,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_nodirstat>
#390: FILE: fs/ceph/super.c:347:
+	Opt_nodirstat,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_rbytes>
#391: FILE: fs/ceph/super.c:348:
+	Opt_rbytes,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_norbytes>
#392: FILE: fs/ceph/super.c:349:
+	Opt_norbytes,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_nocrc>
#393: FILE: fs/ceph/super.c:350:
+	Opt_nocrc,

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c' - possible side-effects?
#428: FILE: fs/ceph/super.c:385:
+#define ADDR_DELIM(c) ((!c) || (c == ':') || (c == ','))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'c' may be better as '(c)' to avoid precedence issues
#428: FILE: fs/ceph/super.c:385:
+#define ADDR_DELIM(c) ((!c) || (c == ':') || (c == ','))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#439: FILE: fs/ceph/super.c:396:
+	unsigned ip = 0;

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#442: FILE: fs/ceph/super.c:399:
+	dout(15, "parse_ip on '%s' len %d\n", c, len);
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'parse_ip', this function's name, in a string
#442: FILE: fs/ceph/super.c:399:
+	dout(15, "parse_ip on '%s' len %d\n", c, len);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#447: FILE: fs/ceph/super.c:404:
+			while (!ADDR_DELIM(*p) && *p != '.' && p < c+len) {
 			                                            ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#465: FILE: fs/ceph/super.c:422:
+		if (*p == ':') {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#469: FILE: fs/ceph/super.c:426:
+			while (!ADDR_DELIM(*p) && *p != '.' && p < c+len) {
 			                                            ^

CHECK:BRACES: Unbalanced braces around else statement
#478: FILE: fs/ceph/super.c:435:
+		} else

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#481: FILE: fs/ceph/super.c:438:
+		dout(15, "parse_ip got %u.%u.%u.%u:%u\n",
 		^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'parse_ip', this function's name, in a string
#481: FILE: fs/ceph/super.c:438:
+		dout(15, "parse_ip got %u.%u.%u.%u:%u\n",

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#489: FILE: fs/ceph/super.c:446:
+	if (p < c+len)
 	         ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'parse_ip', this function's name, in a string
#498: FILE: fs/ceph/super.c:455:
+	derr(1, "parse_ip bad ip '%s'\n", c);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#510: FILE: fs/ceph/super.c:467:
+	dout(15, "parse_mount_args dev_name '%s'\n", dev_name);
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'parse_mount_args', this function's name, in a string
#510: FILE: fs/ceph/super.c:467:
+	dout(15, "parse_mount_args dev_name '%s'\n", dev_name);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!c"
#522: FILE: fs/ceph/super.c:479:
+	if (c == NULL)

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#547: FILE: fs/ceph/super.c:504:
+	dout(15, "server path '%s'\n", *path);
 	^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#552: FILE: fs/ceph/super.c:509:
+		int token, intval, ret;
+		if (!*c)

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#559: FILE: fs/ceph/super.c:516:
+
+		}

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#563: FILE: fs/ceph/super.c:520:
+				dout(0, "bad mount arg, not int\n");
 				^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#566: FILE: fs/ceph/super.c:523:
+			dout(30, "got token %d intval %d\n", token, intval);
 			^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#580: FILE: fs/ceph/super.c:537:
+			err = parse_ip(argstr[0].from,
+					argstr[0].to-argstr[0].from,

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#580: FILE: fs/ceph/super.c:537:
+					argstr[0].to-argstr[0].from,
 					            ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#661: FILE: fs/ceph/super.c:618:
+			BUG_ON(token);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!client"
#677: FILE: fs/ceph/super.c:634:
+	if (client == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!client->wb_wq"
#691: FILE: fs/ceph/super.c:648:
+	if (client->wb_wq == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!client->pg_inv_wq"
#694: FILE: fs/ceph/super.c:651:
+	if (client->pg_inv_wq == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!client->trunc_wq"
#697: FILE: fs/ceph/super.c:654:
+	if (client->trunc_wq == NULL)

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#715: FILE: fs/ceph/super.c:672:
+	dout(10, "destroy_client %p\n", client);
 	^^^^

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#722: FILE: fs/ceph/super.c:679:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 25)

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#722: FILE: fs/ceph/super.c:679:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 25)

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#735: FILE: fs/ceph/super.c:692:
+	dout(10, "destroy_client %p done\n", client);
 	^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#764: FILE: fs/ceph/super.c:721:
+	dout(30, "open_root_inode opening '%s'\n", path);
 	^^^^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*req->r_expected_cap)...) over kmalloc(sizeof(struct ceph_cap)...)
#772: FILE: fs/ceph/super.c:729:
+	req->r_expected_cap = kmalloc(sizeof(struct ceph_cap), GFP_NOFS);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:BRACES: braces {} should be used on all arms of this statement
#781: FILE: fs/ceph/super.c:738:
+	if (err == 0) {
[...]
+	} else
[...]

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#784: FILE: fs/ceph/super.c:741:
+		dout(30, "open_root_inode success, root dentry is %p\n", root);
 		^^^^

CHECK:BRACES: Unbalanced braces around else statement
#785: FILE: fs/ceph/super.c:742:
+	} else

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#808: FILE: fs/ceph/super.c:765:
+	dout(10, "mount start\n");
 	^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!client->msgr"
#812: FILE: fs/ceph/super.c:769:
+	if (client->msgr == NULL) {

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#832: FILE: fs/ceph/super.c:789:
+		dout(10, "mount sending mount request\n");
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#848: FILE: fs/ceph/super.c:805:
+		dout(10, "mount sent to mon%d, waiting for maps\n", which);
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#856: FILE: fs/ceph/super.c:813:
+	dout(30, "mount opening base mountpoint\n");
 	^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#874: FILE: fs/ceph/super.c:831:
+	dout(10, "mount success\n");
 	^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#882: FILE: fs/ceph/super.c:839:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#956: FILE: fs/ceph/super.c:913:
+
+

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#962: FILE: fs/ceph/super.c:919:
+	dout(10, "set_super %p data %p\n", s, data);
 	^^^^

WARNING:MINMAX: min() should probably be min_t(u64, MAX_LFS_FILESIZE, CEPH_FILE_MAX_SIZE)
#965: FILE: fs/ceph/super.c:922:
+	s->s_maxbytes = min((u64)MAX_LFS_FILESIZE, CEPH_FILE_MAX_SIZE);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#996: FILE: fs/ceph/super.c:953:
+	dout(10, "ceph_compare_super %p\n", sb);
 	^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#996: FILE: fs/ceph/super.c:953:
+	int i;
+	dout(10, "ceph_compare_super %p\n", sb);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ceph_compare_super', this function's name, in a string
#996: FILE: fs/ceph/super.c:953:
+	dout(10, "ceph_compare_super %p\n", sb);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1001: FILE: fs/ceph/super.c:958:
+			dout(30, "fsid doesn't match\n");
 			^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1011: FILE: fs/ceph/super.c:968:
+			dout(30, "mon ip not part of monmap\n");
 			^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1014: FILE: fs/ceph/super.c:971:
+		dout(10, "mon ip matches existing sb %p\n", sb);
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1017: FILE: fs/ceph/super.c:974:
+		dout(30, "flags differ\n");
 		^^^^

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#1041: FILE: fs/ceph/super.c:998:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 26)

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1041: FILE: fs/ceph/super.c:998:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 26)

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1061: FILE: fs/ceph/super.c:1018:
+	dout(25, "ceph_get_sb\n");
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ceph_get_sb', this function's name, in a string
#1061: FILE: fs/ceph/super.c:1018:
+	dout(25, "ceph_get_sb\n");

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1085: FILE: fs/ceph/super.c:1042:
+		dout(20, "get_sb got existing client %p\n", client);
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1087: FILE: fs/ceph/super.c:1044:
+		dout(20, "get_sb using new client %p\n", client);
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1097: FILE: fs/ceph/super.c:1054:
+	dout(22, "root ino %llx.%llx\n", ceph_vinop(mnt->mnt_root->d_inode));
 	^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1107: FILE: fs/ceph/super.c:1064:
+	dout(25, "ceph_get_sb fail %d\n", err);
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ceph_get_sb', this function's name, in a string
#1107: FILE: fs/ceph/super.c:1064:
+	dout(25, "ceph_get_sb fail %d\n", err);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1114: FILE: fs/ceph/super.c:1071:
+	dout(1, "kill_sb %p\n", s);
 	^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1114: FILE: fs/ceph/super.c:1071:
+	struct ceph_client *client = ceph_sb_to_client(s);
+	dout(1, "kill_sb %p\n", s);

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#1116: FILE: fs/ceph/super.c:1073:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 26)

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1116: FILE: fs/ceph/super.c:1073:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 26)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1124: FILE: fs/ceph/super.c:1081:
+
+

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1141: FILE: fs/ceph/super.c:1098:
+	dout(1, "init_ceph\n");
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'init_ceph', this function's name, in a string
#1141: FILE: fs/ceph/super.c:1098:
+	dout(1, "init_ceph\n");

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#1147: FILE: fs/ceph/super.c:1104:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 25)

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1147: FILE: fs/ceph/super.c:1104:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 25)

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#1178: FILE: fs/ceph/super.c:1135:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 25)

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1178: FILE: fs/ceph/super.c:1135:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 25)

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1188: FILE: fs/ceph/super.c:1145:
+	dout(1, "exit_ceph\n");
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'exit_ceph', this function's name, in a string
#1188: FILE: fs/ceph/super.c:1145:
+	dout(1, "exit_ceph\n");

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#1193: FILE: fs/ceph/super.c:1150:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 25)

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1193: FILE: fs/ceph/super.c:1150:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 25)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000204220.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 85 warnings, 64 checks, 1165 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000204220.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
