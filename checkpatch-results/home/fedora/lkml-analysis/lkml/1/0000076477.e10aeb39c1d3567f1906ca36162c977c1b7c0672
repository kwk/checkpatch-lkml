WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#63: FILE: fs/dcache.c:110:
+	BUG_ON(dentry->d_count);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#129: FILE: fs/dcache.c:385:
+struct dentry * dget_locked_dlock(struct dentry *dentry)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#152: FILE: fs/dcache.c:408:
+	BUG_ON(!ret->d_count);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#344: FILE: include/linux/dcache.h:338:
+		BUG_ON(!dentry->d_count);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#362: FILE: include/linux/dcache.h:354:
+extern struct dentry * dget_locked_dlock(struct dentry *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#362: FILE: include/linux/dcache.h:354:
+extern struct dentry * dget_locked_dlock(struct dentry *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#362: FILE: include/linux/dcache.h:354:
+extern struct dentry * dget_locked_dlock(struct dentry *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#364: FILE: include/linux/dcache.h:356:
+extern struct dentry *dget_parent(struct dentry *dentry);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#395: FILE: fs/configfs/dir.c:402:
+	pr_debug(" o %s removing done (%d)\n",d->d_name.name, d->d_count);
 	                                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#408: FILE: fs/locks.c:1377:
 		if ((arg == F_WRLCK)
+		    && (dentry->d_count > 1

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#518: FILE: fs/ecryptfs/inode.c:266:
+	BUG_ON(!lower_dentry->d_count);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000076477.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 5 warnings, 3 checks, 638 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000076477.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
