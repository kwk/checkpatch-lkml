WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#118: FILE: fs/autofs/autofs_i.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#160: FILE: fs/autofs/autofs_i.h:39:
+#define DPRINTK(fmt, args...)				\
+do {							\
+	printk(KERN_DEBUG "pid %d: %s: " fmt "\n",	\
+		current->pid, __func__, ##args);	\
+} while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#162: FILE: fs/autofs/autofs_i.h:41:
+	printk(KERN_DEBUG "pid %d: %s: " fmt "\n",	\

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#194: FILE: fs/autofs/autofs_i.h:48:
+#define AUTOFS_WARN(fmt, args...)			\
+do {							\
+	printk(KERN_WARNING "pid %d: %s: " fmt "\n",	\
+		current->pid, __func__, ##args);	\
+} while (0)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#196: FILE: fs/autofs/autofs_i.h:50:
+	printk(KERN_WARNING "pid %d: %s: " fmt "\n",	\

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#200: FILE: fs/autofs/autofs_i.h:54:
+#define AUTOFS_ERROR(fmt, args...)			\
+do {							\
+	printk(KERN_ERR "pid %d: %s: " fmt "\n",	\
+		current->pid, __func__, ##args);	\
+} while (0)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#202: FILE: fs/autofs/autofs_i.h:56:
+	printk(KERN_ERR "pid %d: %s: " fmt "\n",	\

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#215: FILE: fs/autofs/autofs_i.h:66:
+/* Unified info structure.  This is pointed to by both the dentry and
+   inode structures.  Each file in the filesystem has an instance of this

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#219: FILE: fs/autofs/autofs_i.h:70:
+   process.  Readdir is implemented by traversing the dentry lists. */

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct autofs_info *' should also have an identifier name
#244: FILE: fs/autofs/autofs_i.h:95:
+	void (*free)(struct autofs_info *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#250: FILE: fs/autofs/autofs_i.h:101:
+#define AUTOFS_INF_EXPIRING	(1<<0) /* dentry in the process of expiring */
                            	  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#250: FILE: fs/autofs/autofs_i.h:101:
+#define AUTOFS_INF_EXPIRING	(1<<0) /* dentry in the process of expiring */

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#251: FILE: fs/autofs/autofs_i.h:102:
+#define AUTOFS_INF_MOUNTPOINT	(1<<1) /* mountpoint status for direct expire */
                              	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#251: FILE: fs/autofs/autofs_i.h:102:
+#define AUTOFS_INF_MOUNTPOINT	(1<<1) /* mountpoint status for direct expire */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#252: FILE: fs/autofs/autofs_i.h:103:
+#define AUTOFS_INF_PENDING	(1<<2) /* dentry pending mount */
                           	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#252: FILE: fs/autofs/autofs_i.h:103:
+#define AUTOFS_INF_PENDING	(1<<2) /* dentry pending mount */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#253: FILE: fs/autofs/autofs_i.h:104:
+#define AUTOFS_INF_REHASH	(1<<3) /* dentry in transit to ->lookup() */
                          	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#253: FILE: fs/autofs/autofs_i.h:104:
+#define AUTOFS_INF_REHASH	(1<<3) /* dentry in transit to ->lookup() */

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#311: FILE: fs/autofs/autofs_i.h:140:
+	struct mutex wq_mutex;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#312: FILE: fs/autofs/autofs_i.h:141:
+	spinlock_t fs_lock;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#317: FILE: fs/autofs/autofs_i.h:143:
+	spinlock_t lookup_lock;

WARNING:RETURN_VOID: void function return statements are not generally useful
#376: FILE: fs/autofs/autofs_i.h:187:
+	return;
+}

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct autofs_info *' should also have an identifier name
#381: FILE: fs/autofs/autofs_i.h:190:
+void autofs4_free_ino(struct autofs_info *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#384: FILE: fs/autofs/autofs_i.h:193:
+int is_autofs4_dentry(struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#386: FILE: fs/autofs/autofs_i.h:195:
+int autofs4_expire_run(struct super_block *, struct vfsmount *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#386: FILE: fs/autofs/autofs_i.h:195:
+int autofs4_expire_run(struct super_block *, struct vfsmount *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct autofs_sb_info *' should also have an identifier name
#386: FILE: fs/autofs/autofs_i.h:195:
+int autofs4_expire_run(struct super_block *, struct vfsmount *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct autofs_packet_expire __user *' should also have an identifier name
#386: FILE: fs/autofs/autofs_i.h:195:
+int autofs4_expire_run(struct super_block *, struct vfsmount *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#387: FILE: fs/autofs/autofs_i.h:196:
+int autofs4_expire_run(struct super_block *, struct vfsmount *,
+			struct autofs_sb_info *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#391: FILE: fs/autofs/autofs_i.h:200:
+int autofs4_expire_multi(struct super_block *, struct vfsmount *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#391: FILE: fs/autofs/autofs_i.h:200:
+int autofs4_expire_multi(struct super_block *, struct vfsmount *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct autofs_sb_info *' should also have an identifier name
#391: FILE: fs/autofs/autofs_i.h:200:
+int autofs4_expire_multi(struct super_block *, struct vfsmount *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int __user *' should also have an identifier name
#391: FILE: fs/autofs/autofs_i.h:200:
+int autofs4_expire_multi(struct super_block *, struct vfsmount *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#392: FILE: fs/autofs/autofs_i.h:201:
+int autofs4_expire_multi(struct super_block *, struct vfsmount *,
+			struct autofs_sb_info *, int __user *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#423: FILE: fs/autofs/autofs_i.h:226:
+int autofs4_fill_super(struct super_block *, void *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#423: FILE: fs/autofs/autofs_i.h:226:
+int autofs4_fill_super(struct super_block *, void *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#423: FILE: fs/autofs/autofs_i.h:226:
+int autofs4_fill_super(struct super_block *, void *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct autofs_info *' should also have an identifier name
#424: FILE: fs/autofs/autofs_i.h:227:
+struct autofs_info *autofs4_init_ino(struct autofs_info *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct autofs_sb_info *' should also have an identifier name
#424: FILE: fs/autofs/autofs_i.h:227:
+struct autofs_info *autofs4_init_ino(struct autofs_info *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'mode_t' should also have an identifier name
#424: FILE: fs/autofs/autofs_i.h:227:
+struct autofs_info *autofs4_init_ino(struct autofs_info *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct autofs_sb_info *' should also have an identifier name
#432: FILE: fs/autofs/autofs_i.h:232:
+int autofs4_wait(struct autofs_sb_info *, struct dentry *, enum autofs_notify);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#432: FILE: fs/autofs/autofs_i.h:232:
+int autofs4_wait(struct autofs_sb_info *, struct dentry *, enum autofs_notify);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct autofs_sb_info *' should also have an identifier name
#433: FILE: fs/autofs/autofs_i.h:233:
+int autofs4_wait_release(struct autofs_sb_info *, autofs_wqt_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'autofs_wqt_t' should also have an identifier name
#433: FILE: fs/autofs/autofs_i.h:233:
+int autofs4_wait_release(struct autofs_sb_info *, autofs_wqt_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#433: FILE: fs/autofs/autofs_i.h:233:
+int autofs4_wait_release(struct autofs_sb_info *, autofs_wqt_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct autofs_sb_info *' should also have an identifier name
#434: FILE: fs/autofs/autofs_i.h:234:
+void autofs4_catatonic_mode(struct autofs_sb_info *);

WARNING:LINE_SPACING: Missing a blank line after declarations
#447: FILE: fs/autofs/autofs_i.h:242:
+		int followed = follow_down(path);
+		if (!followed)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#486: FILE: fs/autofs/autofs_i.h:281:
+	struct autofs_info *ino = autofs4_dentry_ino(dentry);
+	if (ino) {

WARNING:RETURN_VOID: void function return statements are not generally useful
#493: FILE: fs/autofs/autofs_i.h:288:
+	return;
+}

WARNING:LINE_SPACING: Missing a blank line after declarations
#499: FILE: fs/autofs/autofs_i.h:294:
+	struct autofs_info *ino = autofs4_dentry_ino(dentry);
+	if (ino) {

WARNING:RETURN_VOID: void function return statements are not generally useful
#506: FILE: fs/autofs/autofs_i.h:301:
+	return;
+}

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#509: FILE: fs/autofs/autofs_i.h:304:
+extern void autofs4_kill_sb(struct super_block *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#509: FILE: fs/autofs/autofs_i.h:304:
+extern void autofs4_kill_sb(struct super_block *);

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#511: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#516: FILE: fs/autofs/dev-ioctl.c:1:
+/*

WARNING:REPEATED_WORD: Possible repeated word: 'at'
#552: FILE: fs/autofs/dev-ioctl.c:37:
+ * which have been left busy at at service shutdown.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'AUTOFS_DEV_IOCTL_VERSION_MAJOR != param->ver_major'
#589: FILE: fs/autofs/dev-ioctl.c:74:
+	if ((AUTOFS_DEV_IOCTL_VERSION_MAJOR != param->ver_major) ||
+	    (AUTOFS_DEV_IOCTL_VERSION_MINOR < param->ver_minor)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'AUTOFS_DEV_IOCTL_VERSION_MINOR < param->ver_minor'
#589: FILE: fs/autofs/dev-ioctl.c:74:
+	if ((AUTOFS_DEV_IOCTL_VERSION_MAJOR != param->ver_major) ||
+	    (AUTOFS_DEV_IOCTL_VERSION_MINOR < param->ver_minor)) {

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#589: FILE: fs/autofs/dev-ioctl.c:74:
+	if ((AUTOFS_DEV_IOCTL_VERSION_MAJOR != param->ver_major) ||

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#590: FILE: fs/autofs/dev-ioctl.c:75:
+	    (AUTOFS_DEV_IOCTL_VERSION_MINOR < param->ver_minor)) {

WARNING:SPLIT_STRING: quoted string split across lines
#592: FILE: fs/autofs/dev-ioctl.c:77:
+		AUTOFS_WARN("ioctl control interface version mismatch: "
+		     "kernel(%u.%u), user(%u.%u), cmd(%d)",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:RETURN_VOID: void function return statements are not generally useful
#636: FILE: fs/autofs/dev-ioctl.c:121:
+	return;
+}

WARNING:SPLIT_STRING: quoted string split across lines
#649: FILE: fs/autofs/dev-ioctl.c:134:
+		AUTOFS_WARN("invalid device control module version "
+		     "supplied for cmd(0x%08x)", cmd);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#656: FILE: fs/autofs/dev-ioctl.c:141:
+			AUTOFS_WARN(

WARNING:LINE_SPACING: Missing a blank line after declarations
#716: FILE: fs/autofs/dev-ioctl.c:201:
+	int err = kern_path(pathname, 0, &path);
+	if (err)

WARNING:LINE_SPACING: Missing a blank line after declarations
#744: FILE: fs/autofs/dev-ioctl.c:229:
+	struct autofs_info *ino = autofs4_dentry_ino(path->dentry);
+	return ino && ino->sbi->type & *(unsigned *)p;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#744: FILE: fs/autofs/dev-ioctl.c:229:
+	return ino && ino->sbi->type & *(unsigned *)p;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#754: FILE: fs/autofs/dev-ioctl.c:239:
+	BUG_ON(fdt->fd[fd] != NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "fdt->fd[fd]"
#754: FILE: fs/autofs/dev-ioctl.c:239:
+	BUG_ON(fdt->fd[fd] != NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:LINE_SPACING: Please don't use multiple blank lines
#760: FILE: fs/autofs/dev-ioctl.c:245:
+
+

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#771: FILE: fs/autofs/dev-ioctl.c:256:
+		struct file *filp;
 		             ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#783: FILE: fs/autofs/dev-ioctl.c:268:
+		filp = dentry_open(path.dentry, path.mnt, O_RDONLY,
 		^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#785: FILE: fs/autofs/dev-ioctl.c:270:
+		if (IS_ERR(filp)) {
 		           ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#786: FILE: fs/autofs/dev-ioctl.c:271:
+			err = PTR_ERR(filp);
 			              ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#790: FILE: fs/autofs/dev-ioctl.c:275:
+		autofs_dev_ioctl_fd_install(fd, filp);
 		                                ^^^^

CHECK:SPACING: No space is necessary after a cast
#848: FILE: fs/autofs/dev-ioctl.c:333:
+	token = (autofs_wqt_t) param->ready.token;

CHECK:SPACING: No space is necessary after a cast
#863: FILE: fs/autofs/dev-ioctl.c:348:
+	token = (autofs_wqt_t) param->fail.token;

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#896: FILE: fs/autofs/dev-ioctl.c:381:
+		return -EBUSY;
+	} else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#898: FILE: fs/autofs/dev-ioctl.c:383:
+		struct file *pipe = fget(pipefd);
+		if (!pipe->f_op || !pipe->f_op->write) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#962: FILE: fs/autofs/dev-ioctl.c:447:
+	param->requester.uid = param->requester.gid = -1;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#1029: FILE: fs/autofs/dev-ioctl.c:514:
+ * In both cases the the device number (as returned by

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1050: FILE: fs/autofs/dev-ioctl.c:535:
+	param->ismountpoint.out.devid = devid = 0;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1051: FILE: fs/autofs/dev-ioctl.c:536:
+	param->ismountpoint.out.magic = magic = 0;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'cmd' may be better as '(cmd)' to avoid precedence issues
#1096: FILE: fs/autofs/dev-ioctl.c:581:
+#define cmd_idx(cmd)	(cmd - _IOC_NR(AUTOFS_DEV_IOCTL_IOC_FIRST))

CHECK:SPACING: No space is necessary after a cast
#1237: FILE: fs/autofs/dev-ioctl.c:722:
+	err = _autofs_dev_ioctl(command, (struct autofs_dev_ioctl __user *) u);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1237: FILE: fs/autofs/dev-ioctl.c:722:
+	int err;
+	err = _autofs_dev_ioctl(command, (struct autofs_dev_ioctl __user *) u);

CHECK:SPACING: No space is necessary after a cast
#1238: FILE: fs/autofs/dev-ioctl.c:723:
+	return (long) err;

CHECK:SPACING: No space is necessary after a cast
#1244: FILE: fs/autofs/dev-ioctl.c:729:
+	return (long) autofs_dev_ioctl(file, command, (ulong) compat_ptr(u));

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1257: FILE: fs/autofs/dev-ioctl.c:742:
+^I.minor ^I^I= MISC_DYNAMIC_MINOR,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1258: FILE: fs/autofs/dev-ioctl.c:743:
+^I.name  ^I^I= AUTOFS_DEVICE_NAME,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1259: FILE: fs/autofs/dev-ioctl.c:744:
+^I.fops  ^I^I= &_dev_ioctl_fops$

WARNING:RETURN_VOID: void function return statements are not generally useful
#1280: FILE: fs/autofs/dev-ioctl.c:765:
+	return;
+}

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1544: FILE: fs/autofs/expire.c:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1553: FILE: fs/autofs/expire.c:10:
+ * ------------------------------------------------------------------------- */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1561: FILE: fs/autofs/expire.c:18:
+static inline int autofs4_can_expire(struct dentry *dentry,
+					unsigned long timeout, int do_now)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ino"
#1566: FILE: fs/autofs/expire.c:23:
+	if (ino == NULL)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1579: FILE: fs/autofs/expire.c:36:
+		/* update last_used here :-
+		   - obviously makes sense if it is in use now

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1581: FILE: fs/autofs/expire.c:38:
+		     attempts if expire fails the first time */

WARNING:LINE_SPACING: Missing a blank line after declarations
#1622: FILE: fs/autofs/expire.c:79:
+		struct autofs_info *ino = autofs4_dentry_ino(top);
+		ino->last_used = jiffies;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1661: FILE: fs/autofs/expire.c:118:
+static int autofs4_direct_busy(struct vfsmount *mnt,
+				struct dentry *top,

CHECK:SPACING: No space is necessary after a cast
#1666: FILE: fs/autofs/expire.c:123:
+		top, (int) top->d_name.len, top->d_name.name);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1671: FILE: fs/autofs/expire.c:128:
+		struct autofs_info *ino = autofs4_dentry_ino(top);
+		if (ino)

CHECK:SPACING: No space is necessary after a cast
#1708: FILE: fs/autofs/expire.c:165:
+			p, (int) p->d_name.len, p->d_name.name);

CHECK:SPACING: No space is necessary after a cast
#1776: FILE: fs/autofs/expire.c:233:
+			p, (int) p->d_name.len, p->d_name.name);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1817: FILE: fs/autofs/expire.c:274:
+		struct autofs_info *ino = autofs4_dentry_ino(root);
+		if (d_mountpoint(root)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1975: FILE: fs/autofs/expire.c:432:
+		DPRINTK("waiting for expire %p name=%.*s",
+			 dentry, dentry->d_name.len, dentry->d_name.name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1994: FILE: fs/autofs/expire.c:451:
+int autofs4_expire_run(struct super_block *sb,
+		      struct vfsmount *mnt,

WARNING:SIZEOF_PARENTHESIS: sizeof pkt should be sizeof(pkt)
#2003: FILE: fs/autofs/expire.c:460:
+	memset(&pkt, 0, sizeof pkt);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dentry"
#2009: FILE: fs/autofs/expire.c:466:
+	if (dentry == NULL)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2066: FILE: fs/autofs/expire.c:523:
+/* Call repeatedly until it returns -EAGAIN, meaning there's nothing
+   more to be done */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2066: FILE: fs/autofs/expire.c:523:
+   more to be done */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2068: FILE: fs/autofs/expire.c:525:
+int autofs4_expire_multi(struct super_block *sb, struct vfsmount *mnt,
+			struct autofs_sb_info *sbi, int __user *arg)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2087: FILE: fs/autofs/init.c:1:
+/*

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2153: FILE: fs/autofs/inode.c:1:
+/*

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#2178: FILE: fs/autofs/inode.c:25:
+	if (ino->u.symlink) {
+		kfree(ino->u.symlink);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ino"
#2188: FILE: fs/autofs/inode.c:35:
+	if (ino == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ino"
#2193: FILE: fs/autofs/inode.c:40:
+	if (ino == NULL)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (ino->free)
#2216: FILE: fs/autofs/inode.c:63:
+		(ino->free)(ino);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2236: FILE: fs/autofs/inode.c:83:
+			struct dentry *parent = ino->dentry->d_parent;
+			if (atomic_dec_and_test(&ino->count)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (ino->free)
#2246: FILE: fs/autofs/inode.c:93:
+		(ino->free)(ino);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2361: FILE: fs/autofs/inode.c:197:
+	seq_printf(m, ",timeout=%lu", sbi->exp_timeout/HZ);
 	                                              ^

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#2366: FILE: fs/autofs/inode.c:202:
+		seq_printf(m, ",offset");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#2368: FILE: fs/autofs/inode.c:204:
+		seq_printf(m, ",direct");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#2370: FILE: fs/autofs/inode.c:206:
+		seq_printf(m, ",indirect");

CHECK:CAMELCASE: Avoid CamelCase: <Opt_err>
#2382: FILE: fs/autofs/inode.c:216:
+enum {Opt_err, Opt_fd, Opt_uid, Opt_gid, Opt_pgrp, Opt_minproto, Opt_maxproto,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Opt_fd>
#2382: FILE: fs/autofs/inode.c:216:
+enum {Opt_err, Opt_fd, Opt_uid, Opt_gid, Opt_pgrp, Opt_minproto, Opt_maxproto,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_uid>
#2382: FILE: fs/autofs/inode.c:216:
+enum {Opt_err, Opt_fd, Opt_uid, Opt_gid, Opt_pgrp, Opt_minproto, Opt_maxproto,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_gid>
#2382: FILE: fs/autofs/inode.c:216:
+enum {Opt_err, Opt_fd, Opt_uid, Opt_gid, Opt_pgrp, Opt_minproto, Opt_maxproto,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_pgrp>
#2382: FILE: fs/autofs/inode.c:216:
+enum {Opt_err, Opt_fd, Opt_uid, Opt_gid, Opt_pgrp, Opt_minproto, Opt_maxproto,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_minproto>
#2382: FILE: fs/autofs/inode.c:216:
+enum {Opt_err, Opt_fd, Opt_uid, Opt_gid, Opt_pgrp, Opt_minproto, Opt_maxproto,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_maxproto>
#2382: FILE: fs/autofs/inode.c:216:
+enum {Opt_err, Opt_fd, Opt_uid, Opt_gid, Opt_pgrp, Opt_minproto, Opt_maxproto,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_indirect>
#2383: FILE: fs/autofs/inode.c:217:
+	Opt_indirect, Opt_direct, Opt_offset};

CHECK:CAMELCASE: Avoid CamelCase: <Opt_direct>
#2383: FILE: fs/autofs/inode.c:217:
+	Opt_indirect, Opt_direct, Opt_offset};

CHECK:CAMELCASE: Avoid CamelCase: <Opt_offset>
#2383: FILE: fs/autofs/inode.c:217:
+	Opt_indirect, Opt_direct, Opt_offset};

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2574: FILE: fs/autofs/inode.c:377:
+	if (parse_options(data, &pipefd, &root_inode->i_uid, &root_inode->i_gid,
+				&sbi->oz_pgrp, &sbi->type, &sbi->min_proto,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2576: FILE: fs/autofs/inode.c:379:
+		printk(KERN_ERR "autofs: called with bogus options\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2592: FILE: fs/autofs/inode.c:391:
+		printk(KERN_ERR "autofs: kernel does not match daemon "

WARNING:SPLIT_STRING: quoted string split across lines
#2593: FILE: fs/autofs/inode.c:392:
+		printk(KERN_ERR "autofs: kernel does not match daemon "
+		       "version (%d, %d) kernel (%d, %d)\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2612: FILE: fs/autofs/inode.c:409:
+		printk(KERN_ERR

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#2636: FILE: fs/autofs/inode.c:431:
+	/* fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!inode"
#2704: FILE: fs/autofs/inode.c:452:
+	if (inode == NULL)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2713: FILE: fs/autofs/inode.c:461:
+	inode->i_atime = inode->i_mtime = inode->i_ctime = CURRENT_TIME;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2737: FILE: fs/autofs/root.c:1:
+/*

WARNING:LINE_SPACING: Missing a blank line after declarations
#2858: FILE: fs/autofs/root.c:78:
+	struct autofs_info *ino = autofs4_dentry_ino(dentry);
+	if (ino) {

WARNING:RETURN_VOID: void function return statements are not generally useful
#2869: FILE: fs/autofs/root.c:88:
+	return;
+}

WARNING:LINE_SPACING: Missing a blank line after declarations
#2878: FILE: fs/autofs/root.c:94:
+	struct autofs_info *ino = autofs4_dentry_ino(dentry);
+	if (ino) {

WARNING:RETURN_VOID: void function return statements are not generally useful
#2901: FILE: fs/autofs/root.c:113:
+	return;
+}

WARNING:LINE_SPACING: Missing a blank line after declarations
#2914: FILE: fs/autofs/root.c:119:
+	struct rehash_entry *entry;
+	list_for_each_entry(entry, head, list) {

WARNING:RETURN_VOID: void function return statements are not generally useful
#2922: FILE: fs/autofs/root.c:127:
+	return;
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#2996: FILE: fs/autofs/root.c:179:
+	return;
+}

WARNING:LINE_SPACING: Missing a blank line after declarations
#3006: FILE: fs/autofs/root.c:185:
+	struct autofs_info *ino = autofs4_dentry_ino(dentry);
+	if (ino->flags & AUTOFS_INF_REHASH) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#3009: FILE: fs/autofs/root.c:188:
+		if (list_empty(&ino->rehash_list)) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#3014: FILE: fs/autofs/root.c:193:
+		} else

WARNING:RETURN_VOID: void function return statements are not generally useful
#3018: FILE: fs/autofs/root.c:197:
+	return;
+}

WARNING:LINE_SPACING: Missing a blank line after declarations
#3023: FILE: fs/autofs/root.c:202:
+	unsigned int res = 0;
+	if (flags & (TRIGGER_FLAGS | TRIGGER_INTENTS))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3080: FILE: fs/autofs/root.c:253:
+	DPRINTK("waiting for mount name=%.*s",
+		 dentry->d_name.len, dentry->d_name.name);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#3093: FILE: fs/autofs/root.c:266:
+static void *autofs4_follow_link(struct dentry *dentry, struct nameidata *nd)
                                                                           ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#3188: FILE: fs/autofs/root.c:360:
+static int autofs4_revalidate(struct dentry *dentry, struct nameidata *nd)
                                                                        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#3198: FILE: fs/autofs/root.c:366:
+	int flags = nd ? nd->flags : 0;
 	            ^^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*entry)...) over kmalloc(sizeof(struct rehash_entry)...)
#3211: FILE: fs/autofs/root.c:376:
+	entry = kmalloc(sizeof(struct rehash_entry), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3280: FILE: fs/autofs/root.c:434:
+		DPRINTK("dentry=%p %.*s, emptydir",
+			 dentry, dentry->d_name.len, dentry->d_name.name);

WARNING:LINE_SPACING: Missing a blank line after declarations
#3343: FILE: fs/autofs/root.c:488:
+	struct rehash_entry *entry, *next;
+	list_for_each_entry_safe(entry, next, head, list) {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#3595: FILE: fs/autofs/root.c:701:
+				     struct nameidata *nd)
 				                       ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3614: FILE: fs/autofs/root.c:720:
+	DPRINTK("pid = %u, pgrp = %u, catatonic = %d, oz_mode = %d",
+		 current->pid, task_pgrp_nr(current), sbi->catatonic, oz_mode);

CHECK:SPACING: No space is necessary after a cast
#3628: FILE: fs/autofs/root.c:734:
+			return (struct dentry *) ino;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 28)
#3668: FILE: fs/autofs/root.c:768:
+			if (sigismember(sigset, SIGKILL) ||
[...]
+			    if (active)

WARNING:TABSTOP: Statements should start on a tabstop
#3671: FILE: fs/autofs/root.c:771:
+			    if (active)

WARNING:TABSTOP: Statements should start on a tabstop
#3673: FILE: fs/autofs/root.c:773:
+			    return ERR_PTR(-ERESTARTNOINTR);

WARNING:LINE_SPACING: Missing a blank line after declarations
#3691: FILE: fs/autofs/root.c:786:
+		struct dentry *new;
+		new = d_lookup(dentry->d_parent, &dentry->d_name);

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#3696: FILE: fs/autofs/root.c:791:
+			return new;
+		} else {

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#3714: FILE: fs/autofs/root.c:807:
+		return dentry;
+	} else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4075: FILE: fs/autofs/root.c:1005:
+static inline int autofs4_get_set_timeout(struct autofs_sb_info *sbi,
 					 unsigned long __user *p)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#4083: FILE: fs/autofs/root.c:1010:
+	if ((rv = get_user(ntimeout, p)) ||

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4084: FILE: fs/autofs/root.c:1011:
+	if ((rv = get_user(ntimeout, p)) ||
+	     (rv = put_user(sbi->exp_timeout/HZ, p)))

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#4084: FILE: fs/autofs/root.c:1011:
+	     (rv = put_user(sbi->exp_timeout/HZ, p)))
 	                                    ^

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#4117: FILE: fs/autofs/root.c:1037:
+/*
+* Tells the daemon whether it can umount the autofs mount.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#4144: FILE: fs/autofs/root.c:1054:
+/* Identify autofs4_dentries - this is so we can tell if there's
+   an extra dentry refcount or not.  We only hold a refcount on the

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "dentry->d_fsdata"
#4152: FILE: fs/autofs/root.c:1062:
+		dentry->d_fsdata != NULL;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#4160: FILE: fs/autofs/root.c:1069:
+static int autofs4_root_ioctl(struct inode *inode, struct file *filp,
                                                                 ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4161: FILE: fs/autofs/root.c:1070:
+static int autofs4_root_ioctl(struct inode *inode, struct file *filp,
 			     unsigned int cmd, unsigned long arg)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#4227: FILE: fs/autofs/symlink.c:1:
+/*

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#4237: FILE: fs/autofs/symlink.c:12:
+static void *autofs4_follow_link(struct dentry *dentry, struct nameidata *nd)
                                                                           ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#4242: FILE: fs/autofs/symlink.c:15:
+	nd_set_link(nd, (char *)ino->u.symlink);
 	            ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#4242: FILE: fs/autofs/symlink.c:15:
+	struct autofs_info *ino = autofs4_dentry_ino(dentry);
+	nd_set_link(nd, (char *)ino->u.symlink);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#4261: FILE: fs/autofs/waitq.c:1:
+/*

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#4302: FILE: fs/autofs/waitq.c:43:
+		if (wq->name.name) {
+			kfree(wq->name.name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4327: FILE: fs/autofs/waitq.c:92:
+static void autofs4_notify_daemon(struct autofs_sb_info *sbi,
+				 struct autofs_wait_queue *wq,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#4409: FILE: fs/autofs/waitq.c:165:
+		printk(KERN_ERR "autofs4_notify_daemon: bad type %d!\n", type);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'autofs4_notify_daemon', this function's name, in a string
#4409: FILE: fs/autofs/waitq.c:165:
+		printk(KERN_ERR "autofs4_notify_daemon: bad type %d!\n", type);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:TYPO_SPELLING: 'idicate' may be misspelled - perhaps 'indicate'?
#4480: FILE: fs/autofs/waitq.c:236:
+ *   found or NULL to idicate a new wait needs to be created.
                       ^^^^^^^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#4519: FILE: fs/autofs/waitq.c:275:
+			schedule_timeout_interruptible(HZ/10);
 			                                 ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4561: FILE: fs/autofs/waitq.c:314:
+int autofs4_wait(struct autofs_sb_info *sbi, struct dentry *dentry,
+		enum autofs_notify notify)

CHECK:BRACES: braces {} should be used on all arms of this statement
#4605: FILE: fs/autofs/waitq.c:345:
+	if (IS_ROOT(dentry) && autofs_type_trigger(sbi->type))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#4607: FILE: fs/autofs/waitq.c:347:
+	else {

CHECK:SPACING: No space is necessary after a cast
#4691: FILE: fs/autofs/waitq.c:413:
+			(unsigned long) wq->wait_queue_token, wq->name.len,

CHECK:SPACING: No space is necessary after a cast
#4706: FILE: fs/autofs/waitq.c:423:
+			(unsigned long) wq->wait_queue_token, wq->name.len,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!wq->name.name"
#4730: FILE: fs/autofs/waitq.c:442:
+		wait_event_interruptible(wq->queue, wq->name.name == NULL);

WARNING:DEPRECATED_VARIABLE: Use of EXTRA_CFLAGS is deprecated, please use `ccflags-y instead.
#4871: FILE: fs/autofs4/Makefile:15:
+EXTRA_CFLAGS := -I$(src)/../autofs

EXTRA_{A,C,CPP,LD}FLAGS are deprecated and should be replaced by the new
flags added via commit f77bf01425b1 ("kbuild: introduce ccflags-y,
asflags-y and ldflags-y").

The following conversion scheme maybe used::

  EXTRA_AFLAGS    ->  asflags-y
  EXTRA_CFLAGS    ->  ccflags-y
  EXTRA_CPPFLAGS  ->  cppflags-y
  EXTRA_LDFLAGS   ->  ldflags-y

See:

  1. https://lore.kernel.org/lkml/20070930191054.GA15876@uranus.ravnborg.org/
  2. https://lore.kernel.org/lkml/1313384834-24433-12-git-send-email-lacombar@gmail.com/
  3. https://www.kernel.org/doc/html/latest/kbuild/makefiles.html#compilation-flags

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000042787.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 122 warnings, 76 checks, 4465 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000042787.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
