CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#61: FILE: lib/lmb.c:58:
+static unsigned long lmb_addrs_overlap(u64 base1, u64 size1, u64 base2,
+		u64 size2)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#78: FILE: lib/lmb.c:74:
+static long lmb_regions_adjacent(struct lmb_region *rgn,
 		unsigned long r1, unsigned long r2)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#96: FILE: lib/lmb.c:97:
+static void lmb_coalesce_regions(struct lmb_region *rgn,
 		unsigned long r1, unsigned long r2)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around lmb.memory
#123: FILE: lib/lmb.c:211:
+	struct lmb_region *rgn = &(lmb.memory);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:TYPO_SPELLING: 'supress' may be misspelled - perhaps 'suppress'?
#128: FILE: lib/lmb.c:216:
+	rgnbegin = rgnend = 0; /* supress gcc warnings */
 	                          ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#128: FILE: lib/lmb.c:216:
+	rgnbegin = rgnend = 0; /* supress gcc warnings */

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#131: FILE: lib/lmb.c:219:
+	for (i=0; i < rgn->cnt; i++) {
 	      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rgnbegin <= base'
#135: FILE: lib/lmb.c:223:
+		if ((rgnbegin <= base) && (end <= rgnend))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'end <= rgnend'
#135: FILE: lib/lmb.c:223:
+		if ((rgnbegin <= base) && (end <= rgnend))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rgnbegin == base'
#144: FILE: lib/lmb.c:232:
+	if ((rgnbegin == base) && (rgnend == end)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rgnend == end'
#144: FILE: lib/lmb.c:232:
+	if ((rgnbegin == base) && (rgnend == end)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!type"
#213: FILE: arch/powerpc/platforms/pseries/hotplug-memory.c:86:
+	if (type == NULL || strcmp(type, "memory") != 0)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#257: FILE: include/linux/lmb.h:43:
+extern long lmb_add(u64 base, u64 size);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#258: FILE: include/linux/lmb.h:44:
+extern long lmb_remove(u64 base, u64 size);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000310408.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 1 warnings, 12 checks, 188 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000310408.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
