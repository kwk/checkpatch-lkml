WARNING:TYPO_SPELLING: 'suport' may be misspelled - perhaps 'support'?
#21: 
Subject: [PATCH 1/4] Generic Virtual Memmap suport for SPARSEMEM V3
                                            ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#54: 
#define pfn_to_page(pfn)     (vmemmap + (pfn))

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#55: 
#define page_to_pfn(page)    ((page) - vmemmap)

WARNING:REPEATED_WORD: Possible repeated word: 'etc'
#73: 
for FLATMEM, DISCONTIG etc etc.

WARNING:INCLUDE_LINUX: Use #include <linux/pgtable.h> instead of <asm/pgtable.h>
#105: FILE: mm/sparse.c:13:
+#include <asm/pgtable.h>

WARNING:TYPO_SPELLING: 'memmory' may be misspelled - perhaps 'memory'?
#133: FILE: mm/sparse.c:227:
+ * via TLBs. For those arches the virtual memmory map is essentially
                                           ^^^^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#142: FILE: mm/sparse.c:236:
+ * ^IThe architecture has its own functions to populate the memory$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#143: FILE: mm/sparse.c:237:
+ * ^Imap and provides a vmemmap_populate function.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#147: FILE: mm/sparse.c:241:
+ * ^IIf not set then PAGE_SIZE mappings are generated which$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#148: FILE: mm/sparse.c:242:
+ * ^Irequire one PTE/TLB per PAGE_SIZE chunk of the virtual memory map.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#150: FILE: mm/sparse.c:244:
+ * ^IIf set then PMD_SIZE mappings are generated which are much$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#151: FILE: mm/sparse.c:245:
+ * ^Ilighter on the TLB. On some platforms these generate$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#152: FILE: mm/sparse.c:246:
+ * ^Ithe same overhead as the 1-1 mappings.$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#164: FILE: mm/sparse.c:258:
+			alloc_pages_node(node, GFP_KERNEL | __GFP_ZERO,
+				get_order(size));

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#169: FILE: mm/sparse.c:263:
+		return NULL;
+	} else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#181: FILE: mm/sparse.c:275:
+static int vmemmap_verify(pte_t *pte, int node,
+		unsigned long start, unsigned long end)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#187: FILE: mm/sparse.c:281:
+		printk(KERN_WARNING "[%lx-%lx] potential offnode page_structs\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#188: FILE: mm/sparse.c:282:
+		printk(KERN_WARNING "[%lx-%lx] potential offnode page_structs\n",
+			start, end - 1);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#209: FILE: mm/sparse.c:303:
+	printk(KERN_INFO "[%lx-%lx] PTE ->%p on node %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#210: FILE: mm/sparse.c:304:
+	printk(KERN_INFO "[%lx-%lx] PTE ->%p on node %d\n",
+		addr, addr + PAGE_SIZE -1, block, node);

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#210: FILE: mm/sparse.c:304:
+		addr, addr + PAGE_SIZE -1, block, node);
 		                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#215: FILE: mm/sparse.c:309:
+static int vmemmap_pop_pte(pmd_t *pmd, unsigned long addr,
+				unsigned long end, int node)

ERROR:CODE_INDENT: code indent should use tabs where possible
#222: FILE: mm/sparse.c:316:
+  ^I^Iif (pte_none(*pte))$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#222: FILE: mm/sparse.c:316:
+  ^I^Iif (pte_none(*pte))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#222: FILE: mm/sparse.c:316:
+  ^I^Iif (pte_none(*pte))$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#226: FILE: mm/sparse.c:320:
+			error = vmemmap_verify(pte, node,
+				addr + PAGE_SIZE, end);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#247: FILE: mm/sparse.c:341:
+static int vmemmap_pop_pte(pmd_t *pmd, unsigned long addr,
+				unsigned long end, int node)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#265: FILE: mm/sparse.c:359:
+	printk(KERN_INFO " [%lx-%lx] PMD ->%p on node %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#266: FILE: mm/sparse.c:360:
+	printk(KERN_INFO " [%lx-%lx] PMD ->%p on node %d\n",
+		addr, addr + PMD_SIZE - 1, block, node);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#273: FILE: mm/sparse.c:367:
+static int vmemmap_pop_pmd(pud_t *pud, unsigned long addr,
+				unsigned long end, int node)

ERROR:CODE_INDENT: code indent should use tabs where possible
#280: FILE: mm/sparse.c:374:
+  ^I^Iif (pmd_none(*pmd))$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#280: FILE: mm/sparse.c:374:
+  ^I^Iif (pmd_none(*pmd))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#280: FILE: mm/sparse.c:374:
+  ^I^Iif (pmd_none(*pmd))$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#284: FILE: mm/sparse.c:378:
+			error = vmemmap_verify((pte_t *)pmd, node,
+				pmd_addr_end(addr, end), end);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#288: FILE: mm/sparse.c:382:
+			error = vmemmap_pop_pte(pmd, addr,
+				pmd_addr_end(addr, end), node);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#294: FILE: mm/sparse.c:388:
+static int vmemmap_pop_pud(pgd_t *pgd, unsigned long addr,
+					unsigned long end, int node)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#301: FILE: mm/sparse.c:395:
+				pud++, addr += PUD_SIZE) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#312: FILE: mm/sparse.c:406:
+		error = vmemmap_pop_pmd(pud, addr,
+			pud_addr_end(addr, end), node);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#318: FILE: mm/sparse.c:412:
+int vmemmap_populate(struct page *start_page, unsigned long nr,
+								int node)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#327: FILE: mm/sparse.c:421:
+	printk(KERN_INFO "[%lx-%lx] Virtual memory section"

WARNING:SPLIT_STRING: quoted string split across lines
#328: FILE: mm/sparse.c:422:
+	printk(KERN_INFO "[%lx-%lx] Virtual memory section"
+		" (%ld pages) node %d\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#334: FILE: mm/sparse.c:428:
+				pgd++, addr += PGDIR_SIZE) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#342: FILE: mm/sparse.c:436:
+		error = vmemmap_pop_pud(pgd, addr,
+			pgd_addr_end(addr, end), node);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#359: FILE: mm/sparse.c:453:
+		printk(KERN_ERR "%s: allocation failed. Error=%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#360: FILE: mm/sparse.c:454:
+		printk(KERN_ERR "%s: allocation failed. Error=%d\n",
+				__FUNCTION__, error);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#360: FILE: mm/sparse.c:454:
+				__FUNCTION__, error);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000448594.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 25 warnings, 19 checks, 299 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000448594.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
