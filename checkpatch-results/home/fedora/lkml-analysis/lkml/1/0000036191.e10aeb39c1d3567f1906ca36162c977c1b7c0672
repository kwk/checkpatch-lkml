WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
2.6.31-stable review patch.  If anyone has any objections, please let us know.

WARNING:UNKNOWN_COMMIT_ID: Unknown commit id '8d5d02e6b176565c77ff03604908b1453a22044d', maybe rebased or not pulled?
#32: 
(cherry picked from commit 8d5d02e6b176565c77ff03604908b1453a22044d)

WARNING:TYPO_SPELLING: 'convertion' may be misspelled - perhaps 'conversion'?
#35: 
callback function now queued the convertion work on workqueue but
                                 ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#85: FILE: fs/ext4/ext4.h:1434:
+extern int flush_aio_dio_completed_IO(struct inode *inode);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:SPACING: space required before the open brace '{'
#123: FILE: fs/ext4/extents.c:3267:
+	if (flags & EXT4_GET_BLOCKS_UNINIT_EXT){

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'unecessary' may be misspelled - perhaps 'unnecessary'?
#128: FILE: fs/ext4/extents.c:3272:
+		 * To avoid unecessary convertion for every aio dio rewrite
 		            ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'convertion' may be misspelled - perhaps 'conversion'?
#130: FILE: fs/ext4/extents.c:3274:
+		 * need the convertion.
 		            ^^^^^^^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ext4_get_block_dio_write', this function's name, in a string
#166: FILE: fs/ext4/inode.c:3448:
+	ext4_debug("ext4_get_block_dio_write: inode %lu, create flag %d\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#179: FILE: fs/ext4/inode.c:3492:
+	BUG_ON(!io);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#180: FILE: fs/ext4/inode.c:3493:
+	iput(io->inode);
 	^^^^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#183: FILE: fs/ext4/inode.c:3496:
 }
+static void dump_aio_dio_list(struct inode * inode)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#183: FILE: fs/ext4/inode.c:3496:
+static void dump_aio_dio_list(struct inode * inode)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open brace '{'
#189: FILE: fs/ext4/inode.c:3502:
+	if (list_empty(&EXT4_I(inode)->i_aio_dio_complete_list)){

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#194: FILE: fs/ext4/inode.c:3507:
+	ext4_debug("Dump inode %lu aio_dio_completed_IO list \n", inode->i_ino);

ERROR:SPACING: space required before the open brace '{'
#195: FILE: fs/ext4/inode.c:3508:
+	list_for_each_entry(io, &EXT4_I(inode)->i_aio_dio_complete_list, list){

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#203: FILE: fs/ext4/inode.c:3516:
+		ext4_debug("io 0x%p from inode %lu,prev 0x%p,next 0x%p\n",
+			    io, inode->i_ino, io0, io1);

WARNING:SPLIT_STRING: quoted string split across lines
#226: FILE: fs/ext4/inode.c:3532:
+	ext4_debug("end_aio_dio_onlock: io 0x%p from inode %lu,list->next 0x%p,"
+		   "list->prev 0x%p\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:CODE_INDENT: code indent should use tabs where possible
#227: FILE: fs/ext4/inode.c:3533:
+^I           io, inode->i_ino, io->list.next, io->list.prev);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPLIT_STRING: quoted string split across lines
#243: FILE: fs/ext4/inode.c:3546:
 		printk(KERN_EMERG "%s: failed to convert unwritten"
+			"extents to written extents, error is %d"

WARNING:MISSING_SPACE: break quoted strings at a space character
#243: FILE: fs/ext4/inode.c:3546:
 		printk(KERN_EMERG "%s: failed to convert unwritten"
+			"extents to written extents, error is %d"

WARNING:SPLIT_STRING: quoted string split across lines
#244: FILE: fs/ext4/inode.c:3547:
+			"extents to written extents, error is %d"
+			" io is still on inode %lu aio dio list\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#245: FILE: fs/ext4/inode.c:3548:
+                       __func__, ret, inode->i_ino);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#245: FILE: fs/ext4/inode.c:3548:
+                       __func__, ret, inode->i_ino);$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#253: FILE: fs/ext4/inode.c:3556:
+}
+/*

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#274: FILE: fs/ext4/inode.c:3574:
 }
+/*

ERROR:SPACING: space required before the open brace '{'
#296: FILE: fs/ext4/inode.c:3595:
+	while (!list_empty(&EXT4_I(inode)->i_aio_dio_complete_list)){

WARNING:TYPO_SPELLING: 'convertion' may be misspelled - perhaps 'conversion'?
#309: FILE: fs/ext4/inode.c:3608:
+		 * convertion finished. The io structure has a flag to
 		   ^^^^^^^^^^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#322: FILE: fs/ext4/inode.c:3621:
+static ext4_io_end_t *ext4_init_io_end (struct inode *inode)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ext4_end_io_dio', this function's name, in a string
#348: FILE: fs/ext4/inode.c:3647:
+	ext_debug("ext4_end_io_dio(): io_end 0x%p"

WARNING:SPLIT_STRING: quoted string split across lines
#349: FILE: fs/ext4/inode.c:3648:
+	ext_debug("ext4_end_io_dio(): io_end 0x%p"
+		  "for inode %lu, iocb 0x%p, offset %llu, size %llu\n",

WARNING:MISSING_SPACE: break quoted strings at a space character
#349: FILE: fs/ext4/inode.c:3648:
+	ext_debug("ext4_end_io_dio(): io_end 0x%p"
+		  "for inode %lu, iocb 0x%p, offset %llu, size %llu\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#350: FILE: fs/ext4/inode.c:3649:
+ ^I^I  iocb->private, io_end->inode->i_ino, iocb, offset,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#350: FILE: fs/ext4/inode.c:3649:
+ ^I^I  iocb->private, io_end->inode->i_ino, iocb, offset,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#350: FILE: fs/ext4/inode.c:3649:
+ ^I^I  iocb->private, io_end->inode->i_ino, iocb, offset,$

ERROR:SPACING: space required before the open brace '{'
#357: FILE: fs/ext4/inode.c:3656:
+	if (io_end->flag != DIO_AIO_UNWRITTEN){

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#376: FILE: fs/ext4/inode.c:3671:
+	list_add_tail(&io_end->list,
+		 &EXT4_I(io_end->inode)->i_aio_dio_complete_list);

WARNING:TYPO_SPELLING: 'unwrritten' may be misspelled - perhaps 'unwritten'?
#386: FILE: fs/ext4/inode.c:3683:
+ * The unwrritten extents will be converted to written when DIO is completed.
        ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'convertion' may be misspelled - perhaps 'conversion'?
#388: FILE: fs/ext4/inode.c:3685:
+ * set up an end_io call back function, which will do the convertion
                                                           ^^^^^^^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#399: FILE: fs/ext4/inode.c:3705:
+ ^I^I * We could direct write to holes and fallocate.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#399: FILE: fs/ext4/inode.c:3705:
+ ^I^I * We could direct write to holes and fallocate.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#401: FILE: fs/ext4/inode.c:3707:
+ ^I^I * Allocated blocks to fill the hole are marked as uninitialized$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#401: FILE: fs/ext4/inode.c:3707:
+ ^I^I * Allocated blocks to fill the hole are marked as uninitialized$

ERROR:CODE_INDENT: code indent should use tabs where possible
#406: FILE: fs/ext4/inode.c:3711:
+ ^I^I * As to previously fallocated extents, ext4 get_block$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#406: FILE: fs/ext4/inode.c:3711:
+ ^I^I * As to previously fallocated extents, ext4 get_block$

WARNING:TYPO_SPELLING: 'defered' may be misspelled - perhaps 'deferred'?
#416: FILE: fs/ext4/inode.c:3718:
+		 * for async DIO, the conversion needs to be defered when
 		                                             ^^^^^^^

WARNING:TYPO_SPELLING: 'convertion' may be misspelled - perhaps 'conversion'?
#468: FILE: fs/ext4/inode.c:3767:
+			 * completed, we could do the convertion right here
 			                              ^^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#471: FILE: fs/ext4/inode.c:3770:
+			ret = ext4_convert_unwritten_extents(inode,
+								offset, ret);

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#475: FILE: fs/ext4/inode.c:3774:
+	/* for write the the end of file case, we fall back to old way */

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000036191.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 12 errors, 29 warnings, 7 checks, 424 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000036191.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
