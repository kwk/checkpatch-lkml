WARNING:TYPO_SPELLING: 'accouting' may be misspelled - perhaps 'accounting'?
#32: 
and another one: the cputime accouting patches I've been working on the
                             ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: No space is necessary after a cast
#261: FILE: arch/s390/include/asm/cputime.h:83:
+	return (cputime_t) m * 4096000;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#277: FILE: arch/s390/include/asm/cputime.h:98:
+	return (cputime_t) s * 4096000000ULL;

CHECK:SPACING: No space is necessary after a cast
#286: FILE: arch/s390/include/asm/cputime.h:107:
+	return value->tv_nsec * 4096 / 1000 + (u64) value->tv_sec * 4096000000ULL;

CHECK:SPACING: No space is necessary after a cast
#312: FILE: arch/s390/include/asm/cputime.h:134:
+	return value->tv_usec * 4096 + (u64) value->tv_sec * 4096000000ULL;

CHECK:SPACING: No space is necessary after a cast
#345: FILE: arch/s390/include/asm/cputime.h:165:
+	return (cputime_t) x * (4096000000ULL / USER_HZ);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#354: FILE: arch/s390/include/asm/cputime.h:174:
+       return __div(cputime, 4096000000ULL / USER_HZ);$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#447: FILE: arch/s390/include/asm/lowcore.h:387:
+	__u8	     pad_0xe04[0xe3c-0xe04];   /* 0xe04 */
 	    	                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#451: FILE: arch/s390/include/asm/lowcore.h:391:
+	__u8	     pad13[0x11b8-0xe80];      /* 0xe80 */
 	    	                 ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#464: FILE: arch/s390/include/asm/system.h:102:
+extern void account_vtime(struct task_struct *, struct task_struct *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#526: FILE: arch/s390/include/asm/timer.h:49:
+extern void vtime_stop_cpu(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#527: FILE: arch/s390/include/asm/timer.h:50:
+extern void vtime_start_leave(void);

WARNING:TYPO_SPELLING: 'Reenable' may be misspelled - perhaps 'Re-enable'?
#828: FILE: arch/s390/kernel/process.c:108:
+	/* Reenable preemption tracer. */
 	   ^^^^^^^^

CHECK:SPACING: No space is necessary after a cast
#855: FILE: arch/s390/kernel/setup.c:431:
+	lc->vdso_per_cpu_data = (unsigned long) &lc->paste[0];

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#894: FILE: arch/s390/kernel/smp.c:679:
+	BUG_ON(!lowcore || !panic_stack || !async_stack);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#903: FILE: arch/s390/kernel/smp.c:694:
+	BUG_ON(vdso_alloc_per_cpu(smp_processor_id(), lowcore));

CHECK:SPACING: No space is necessary after a cast
#1011: FILE: arch/s390/kernel/vdso.c:115:
+	clear_table((unsigned long *) segment_table, _SEGMENT_ENTRY_EMPTY,

CHECK:SPACING: No space is necessary after a cast
#1013: FILE: arch/s390/kernel/vdso.c:117:
+	clear_table((unsigned long *) page_table, _PAGE_TYPE_EMPTY,

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1014: FILE: arch/s390/kernel/vdso.c:118:
+		    256*sizeof(unsigned long));
 		       ^

CHECK:SPACING: No space is necessary after a cast
#1016: FILE: arch/s390/kernel/vdso.c:120:
+	*(unsigned long *) segment_table = _SEGMENT_ENTRY + page_table;

CHECK:SPACING: No space is necessary after a cast
#1017: FILE: arch/s390/kernel/vdso.c:121:
+	*(unsigned long *) page_table = _PAGE_RO + page_frame;

CHECK:SPACING: No space is necessary after a cast
#1019: FILE: arch/s390/kernel/vdso.c:123:
+	psal = (u32 *) (page_table + 256*sizeof(unsigned long));

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1019: FILE: arch/s390/kernel/vdso.c:123:
+	psal = (u32 *) (page_table + 256*sizeof(unsigned long));
 	                                ^

CHECK:SPACING: No space is necessary after a cast
#1025: FILE: arch/s390/kernel/vdso.c:129:
+	lowcore->paste[4] = (u32)(addr_t) psal;

CHECK:SPACING: No space is necessary after a cast
#1027: FILE: arch/s390/kernel/vdso.c:131:
+	psal[2] = (u32)(addr_t) aste;

CHECK:SPACING: No space is necessary after a cast
#1028: FILE: arch/s390/kernel/vdso.c:132:
+	*(unsigned long *) (aste + 2) = segment_table +

CHECK:SPACING: No space is necessary after a cast
#1030: FILE: arch/s390/kernel/vdso.c:134:
+	aste[4] = (u32)(addr_t) psal;

CHECK:SPACING: No space is necessary after a cast
#1033: FILE: arch/s390/kernel/vdso.c:137:
+	vdso_init_per_cpu_data(cpu, (struct vdso_per_cpu_data *) page_frame);

CHECK:SPACING: No space is necessary after a cast
#1052: FILE: arch/s390/kernel/vdso.c:156:
+	psal = (u32 *)(addr_t) lowcore->paste[4];

CHECK:SPACING: No space is necessary after a cast
#1053: FILE: arch/s390/kernel/vdso.c:157:
+	aste = (u32 *)(addr_t) psal[2];

CHECK:SPACING: No space is necessary after a cast
#1055: FILE: arch/s390/kernel/vdso.c:159:
+	page_table = *(unsigned long *) segment_table;

CHECK:SPACING: No space is necessary after a cast
#1056: FILE: arch/s390/kernel/vdso.c:160:
+	page_frame = *(unsigned long *) page_table;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1098: FILE: arch/s390/kernel/vdso.c:325:
+	BUG_ON(vdso_alloc_per_cpu(0, S390_lowcore));

WARNING:TYPO_SPELLING: 'immediatly' may be misspelled - perhaps 'immediately'?
#1227: FILE: arch/s390/kernel/vtime.c:49:
+		      "  SPT %1"     /* Set new value immediatly afterwards */
 		                                      ^^^^^^^^^^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1228: FILE: arch/s390/kernel/vtime.c:50:
+		      : "=m" (timer) : "m" (expires) );

CHECK:SPACING: No space is necessary after a cast
#1283: FILE: arch/s390/kernel/vtime.c:84:
+	if ((s64) steal > 0) {

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1428: FILE: arch/s390/kernel/vtime.c:168:
+	psw.mask = psw_kernel_bits|PSW_MASK_WAIT|PSW_MASK_IO|PSW_MASK_EXT;
 	                          ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1428: FILE: arch/s390/kernel/vtime.c:168:
+	psw.mask = psw_kernel_bits|PSW_MASK_WAIT|PSW_MASK_IO|PSW_MASK_EXT;
 	                                        ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1428: FILE: arch/s390/kernel/vtime.c:168:
+	psw.mask = psw_kernel_bits|PSW_MASK_WAIT|PSW_MASK_IO|PSW_MASK_EXT;
 	                                                    ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1444: FILE: arch/s390/kernel/vtime.c:184:
+		asm volatile(

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#1445: FILE: arch/s390/kernel/vtime.c:185:
+#ifndef __s390x__

Architecture specific defines should be avoided wherever
possible.

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1473: FILE: arch/s390/kernel/vtime.c:213:
+		asm volatile(

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#1474: FILE: arch/s390/kernel/vtime.c:214:
+#ifndef __s390x__

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (event->function)
#1545: FILE: arch/s390/kernel/vtime.c:266:
+		(event->function)(event->data);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:SPACING: No space is necessary after a cast
#1593: FILE: arch/s390/kernel/vtime.c:294:
+	BUG_ON((s64) elapsed < 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1593: FILE: arch/s390/kernel/vtime.c:294:
+	BUG_ON((s64) elapsed < 0);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1630: FILE: arch/s390/kernel/vtime.c:311:
+	if (!list_empty(&vq->list)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1633: FILE: arch/s390/kernel/vtime.c:314:
+	} else

CHECK:SPACING: No space is necessary after a cast
#1692: FILE: arch/s390/kernel/vtime.c:365:
+		if (likely((s64) expires < (s64) left)) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1849: FILE: arch/x86/xen/time.c:135:
+	   including any left-overs from last time. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1863: FILE: arch/x86/xen/time.c:146:
+	   including any left-overs from last time. */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1924: FILE: include/linux/kernel_stat.h:70:
+extern void account_user_time(struct task_struct *, cputime_t, cputime_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#1924: FILE: include/linux/kernel_stat.h:70:
+extern void account_user_time(struct task_struct *, cputime_t, cputime_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'cputime_t' should also have an identifier name
#1924: FILE: include/linux/kernel_stat.h:70:
+extern void account_user_time(struct task_struct *, cputime_t, cputime_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'cputime_t' should also have an identifier name
#1924: FILE: include/linux/kernel_stat.h:70:
+extern void account_user_time(struct task_struct *, cputime_t, cputime_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1925: FILE: include/linux/kernel_stat.h:71:
+extern void account_system_time(struct task_struct *, int, cputime_t, cputime_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#1925: FILE: include/linux/kernel_stat.h:71:
+extern void account_system_time(struct task_struct *, int, cputime_t, cputime_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1925: FILE: include/linux/kernel_stat.h:71:
+extern void account_system_time(struct task_struct *, int, cputime_t, cputime_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'cputime_t' should also have an identifier name
#1925: FILE: include/linux/kernel_stat.h:71:
+extern void account_system_time(struct task_struct *, int, cputime_t, cputime_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'cputime_t' should also have an identifier name
#1925: FILE: include/linux/kernel_stat.h:71:
+extern void account_system_time(struct task_struct *, int, cputime_t, cputime_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1926: FILE: include/linux/kernel_stat.h:72:
+extern void account_steal_time(cputime_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'cputime_t' should also have an identifier name
#1926: FILE: include/linux/kernel_stat.h:72:
+extern void account_steal_time(cputime_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1927: FILE: include/linux/kernel_stat.h:73:
+extern void account_idle_time(cputime_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'cputime_t' should also have an identifier name
#1927: FILE: include/linux/kernel_stat.h:73:
+extern void account_idle_time(cputime_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1929: FILE: include/linux/kernel_stat.h:75:
+extern void account_process_tick(struct task_struct *, int user);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#1929: FILE: include/linux/kernel_stat.h:75:
+extern void account_process_tick(struct task_struct *, int user);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1930: FILE: include/linux/kernel_stat.h:76:
+extern void account_steal_ticks(unsigned long ticks);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1931: FILE: include/linux/kernel_stat.h:77:
+extern void account_idle_ticks(unsigned long ticks);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000189331.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 20 warnings, 47 checks, 1907 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000189331.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
