WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
My hardware consists of a GPIO input pin with a timer attached. The pin is set to generate an interrupt each time the input signal changes state.  I take the timing data from each pulse and pass it into the core IR decode function. The decode function is running a state machine in parallel for each IR protocol. When a state machine detects a valid set of pulses it sends out three input messages as part of a transaction. The first is the detected protocol, second the address, third the command.

WARNING:UNDOCUMENTED_DT_STRING: DT compatible string "gpt-ir" appears un-documented -- check /home/fedora/lkml-analysis/linux/Documentation/devicetree/bindings/
#83: FILE: arch/powerpc/boot/dts/dspeak01.dts:322:
+			compatible = "gpt-ir";

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#151: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#156: FILE: drivers/input/ir-core.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#164: FILE: drivers/input/ir-core.c:9:
+static int decode_sirc(struct input_dev *dev, struct ir_protocol *sirc, unsigned int d, unsigned int bit)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bit == 0'
#174: FILE: drivers/input/ir-core.c:19:
+	if ((bit == 0) && (delta > 22)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta > 22'
#174: FILE: drivers/input/ir-core.c:19:
+	if ((bit == 0) && (delta > 22)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sirc->state == 26'
#176: FILE: drivers/input/ir-core.c:21:
+		if ((sirc->state == 26) || (sirc->state == 32) || (sirc->state == 42)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sirc->state == 32'
#176: FILE: drivers/input/ir-core.c:21:
+		if ((sirc->state == 26) || (sirc->state == 32) || (sirc->state == 42)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sirc->state == 42'
#176: FILE: drivers/input/ir-core.c:21:
+		if ((sirc->state == 26) || (sirc->state == 32) || (sirc->state == 42)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sirc->good == sirc->code'
#177: FILE: drivers/input/ir-core.c:22:
+			if (sirc->good && (sirc->good == sirc->code)) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#178: FILE: drivers/input/ir-core.c:23:
+			if (sirc->good && (sirc->good == sirc->code)) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LONG_LINE_COMMENT: line length of 107 exceeds 100 columns
#193: FILE: drivers/input/ir-core.c:38:
+				//printk("SIRC - Saving %d bit %05x\n", (sirc->state - 2) / 2, sirc->code);

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sirc->state == 1'
#201: FILE: drivers/input/ir-core.c:46:
+	if ((sirc->state == 1) && (bit == 1) && (delta == 4)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bit == 1'
#201: FILE: drivers/input/ir-core.c:46:
+	if ((sirc->state == 1) && (bit == 1) && (delta == 4)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta == 4'
#201: FILE: drivers/input/ir-core.c:46:
+	if ((sirc->state == 1) && (bit == 1) && (delta == 4)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sirc->state == 2'
#206: FILE: drivers/input/ir-core.c:51:
+	if ((sirc->state == 2) && (bit == 0) && (delta == 1)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bit == 0'
#206: FILE: drivers/input/ir-core.c:51:
+	if ((sirc->state == 2) && (bit == 0) && (delta == 1)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta == 1'
#206: FILE: drivers/input/ir-core.c:51:
+	if ((sirc->state == 2) && (bit == 0) && (delta == 1)) {

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#211: FILE: drivers/input/ir-core.c:56:
+	if ((sirc->state >= 3) && (sirc->state & 1) && (bit == 1) && ((delta == 1) || (delta == 2))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sirc->state >= 3'
#211: FILE: drivers/input/ir-core.c:56:
+	if ((sirc->state >= 3) && (sirc->state & 1) && (bit == 1) && ((delta == 1) || (delta == 2))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bit == 1'
#211: FILE: drivers/input/ir-core.c:56:
+	if ((sirc->state >= 3) && (sirc->state & 1) && (bit == 1) && ((delta == 1) || (delta == 2))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta == 1'
#211: FILE: drivers/input/ir-core.c:56:
+	if ((sirc->state >= 3) && (sirc->state & 1) && (bit == 1) && ((delta == 1) || (delta == 2))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta == 2'
#211: FILE: drivers/input/ir-core.c:56:
+	if ((sirc->state >= 3) && (sirc->state & 1) && (bit == 1) && ((delta == 1) || (delta == 2))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sirc->state >= 3'
#217: FILE: drivers/input/ir-core.c:62:
+	if ((sirc->state >= 3) && !(sirc->state & 1) && (bit == 0) && (delta == 1)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bit == 0'
#217: FILE: drivers/input/ir-core.c:62:
+	if ((sirc->state >= 3) && !(sirc->state & 1) && (bit == 0) && (delta == 1)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta == 1'
#217: FILE: drivers/input/ir-core.c:62:
+	if ((sirc->state >= 3) && !(sirc->state & 1) && (bit == 0) && (delta == 1)) {

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#226: FILE: drivers/input/ir-core.c:71:
+static int decode_jvc(struct input_dev *dev, struct ir_protocol *jvc, unsigned int d, unsigned int bit)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bit == 0'
#236: FILE: drivers/input/ir-core.c:81:
+	if ((bit == 0) && (delta > 22)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta > 22'
#236: FILE: drivers/input/ir-core.c:81:
+	if ((bit == 0) && (delta > 22)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'jvc->state == 1'
#242: FILE: drivers/input/ir-core.c:87:
+	if ((jvc->state == 1) && (bit == 1) && (delta == 16)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bit == 1'
#242: FILE: drivers/input/ir-core.c:87:
+	if ((jvc->state == 1) && (bit == 1) && (delta == 16)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta == 16'
#242: FILE: drivers/input/ir-core.c:87:
+	if ((jvc->state == 1) && (bit == 1) && (delta == 16)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'jvc->state == 2'
#247: FILE: drivers/input/ir-core.c:92:
+	if ((jvc->state == 2) && (bit == 0) && (delta == 8)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bit == 0'
#247: FILE: drivers/input/ir-core.c:92:
+	if ((jvc->state == 2) && (bit == 0) && (delta == 8)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta == 8'
#247: FILE: drivers/input/ir-core.c:92:
+	if ((jvc->state == 2) && (bit == 0) && (delta == 8)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'jvc->state >= 3'
#252: FILE: drivers/input/ir-core.c:97:
+	if ((jvc->state >= 3) && (jvc->state & 1) && (bit == 1) && (delta == 1)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bit == 1'
#252: FILE: drivers/input/ir-core.c:97:
+	if ((jvc->state >= 3) && (jvc->state & 1) && (bit == 1) && (delta == 1)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta == 1'
#252: FILE: drivers/input/ir-core.c:97:
+	if ((jvc->state >= 3) && (jvc->state & 1) && (bit == 1) && (delta == 1)) {

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#257: FILE: drivers/input/ir-core.c:102:
+	if ((jvc->state >= 3) && !(jvc->state & 1) && (bit == 0) && ((delta == 1) || (delta == 3))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'jvc->state >= 3'
#257: FILE: drivers/input/ir-core.c:102:
+	if ((jvc->state >= 3) && !(jvc->state & 1) && (bit == 0) && ((delta == 1) || (delta == 3))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bit == 0'
#257: FILE: drivers/input/ir-core.c:102:
+	if ((jvc->state >= 3) && !(jvc->state & 1) && (bit == 0) && ((delta == 1) || (delta == 3))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta == 1'
#257: FILE: drivers/input/ir-core.c:102:
+	if ((jvc->state >= 3) && !(jvc->state & 1) && (bit == 0) && ((delta == 1) || (delta == 3))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta == 3'
#257: FILE: drivers/input/ir-core.c:102:
+	if ((jvc->state >= 3) && !(jvc->state & 1) && (bit == 0) && ((delta == 1) || (delta == 3))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'jvc->good == jvc->code'
#264: FILE: drivers/input/ir-core.c:109:
+			if (jvc->good && (jvc->good == jvc->code)) {

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#283: FILE: drivers/input/ir-core.c:128:
+static int decode_nec(struct input_dev *dev, struct ir_protocol *nec, unsigned int d, unsigned int bit)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bit == 0'
#293: FILE: drivers/input/ir-core.c:138:
+	if ((bit == 0) && (delta > 22)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta > 22'
#293: FILE: drivers/input/ir-core.c:138:
+	if ((bit == 0) && (delta > 22)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nec->state == 1'
#299: FILE: drivers/input/ir-core.c:144:
+	if ((nec->state == 1) && (bit == 1) && (delta == 16)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bit == 1'
#299: FILE: drivers/input/ir-core.c:144:
+	if ((nec->state == 1) && (bit == 1) && (delta == 16)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta == 16'
#299: FILE: drivers/input/ir-core.c:144:
+	if ((nec->state == 1) && (bit == 1) && (delta == 16)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nec->state == 2'
#304: FILE: drivers/input/ir-core.c:149:
+	if ((nec->state == 2) && (bit == 0) && (delta == 8)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bit == 0'
#304: FILE: drivers/input/ir-core.c:149:
+	if ((nec->state == 2) && (bit == 0) && (delta == 8)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta == 8'
#304: FILE: drivers/input/ir-core.c:149:
+	if ((nec->state == 2) && (bit == 0) && (delta == 8)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nec->state >= 3'
#309: FILE: drivers/input/ir-core.c:154:
+	if ((nec->state >= 3) && (nec->state & 1) && (bit == 1) && (delta == 1)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bit == 1'
#309: FILE: drivers/input/ir-core.c:154:
+	if ((nec->state >= 3) && (nec->state & 1) && (bit == 1) && (delta == 1)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta == 1'
#309: FILE: drivers/input/ir-core.c:154:
+	if ((nec->state >= 3) && (nec->state & 1) && (bit == 1) && (delta == 1)) {

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#321: FILE: drivers/input/ir-core.c:166:
+	if ((nec->state >= 3) && !(nec->state & 1) && (bit == 0) && ((delta == 1) || (delta == 3))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nec->state >= 3'
#321: FILE: drivers/input/ir-core.c:166:
+	if ((nec->state >= 3) && !(nec->state & 1) && (bit == 0) && ((delta == 1) || (delta == 3))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bit == 0'
#321: FILE: drivers/input/ir-core.c:166:
+	if ((nec->state >= 3) && !(nec->state & 1) && (bit == 0) && ((delta == 1) || (delta == 3))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta == 1'
#321: FILE: drivers/input/ir-core.c:166:
+	if ((nec->state >= 3) && !(nec->state & 1) && (bit == 0) && ((delta == 1) || (delta == 3))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta == 3'
#321: FILE: drivers/input/ir-core.c:166:
+	if ((nec->state >= 3) && !(nec->state & 1) && (bit == 0) && ((delta == 1) || (delta == 3))) {

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#333: FILE: drivers/input/ir-core.c:178:
+static int decode_rc5(struct input_dev *dev, struct ir_protocol *rc5, unsigned int d, unsigned int bit)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rc6->bits == 0'
#356: FILE: drivers/input/ir-core.c:201:
+		if ((rc6->bits == 0) || (rc6->bits == 3)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rc6->bits == 3'
#356: FILE: drivers/input/ir-core.c:201:
+		if ((rc6->bits == 0) || (rc6->bits == 3)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#365: FILE: drivers/input/ir-core.c:210:
+		if (rc6->state == 23) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#371: FILE: drivers/input/ir-core.c:216:
+		} else

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#378: FILE: drivers/input/ir-core.c:223:
+static int decode_rc6(struct input_dev *dev, struct ir_protocol *rc6, unsigned int d, unsigned int bit)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bit == 0'
#389: FILE: drivers/input/ir-core.c:234:
+	if ((bit == 0) && (delta > 19)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta > 19'
#389: FILE: drivers/input/ir-core.c:234:
+	if ((bit == 0) && (delta > 19)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rc6->state == 1'
#397: FILE: drivers/input/ir-core.c:242:
+	if ((rc6->state == 1) && (bit == 1) && (delta == 6)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bit == 1'
#397: FILE: drivers/input/ir-core.c:242:
+	if ((rc6->state == 1) && (bit == 1) && (delta == 6)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta == 6'
#397: FILE: drivers/input/ir-core.c:242:
+	if ((rc6->state == 1) && (bit == 1) && (delta == 6)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rc6->state == 2'
#402: FILE: drivers/input/ir-core.c:247:
+	if ((rc6->state == 2) && (bit == 0) && (delta == 2)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bit == 0'
#402: FILE: drivers/input/ir-core.c:247:
+	if ((rc6->state == 2) && (bit == 0) && (delta == 2)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta == 2'
#402: FILE: drivers/input/ir-core.c:247:
+	if ((rc6->state == 2) && (bit == 0) && (delta == 2)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta >= 1'
#408: FILE: drivers/input/ir-core.c:253:
+		if ((delta >= 1) || (delta <= 3)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta <= 3'
#408: FILE: drivers/input/ir-core.c:253:
+		if ((delta >= 1) || (delta <= 3)) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#429: FILE: drivers/input/ir-core.c:274:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*dev->ir)...) over kzalloc(sizeof(struct ir_device)...)
#432: FILE: drivers/input/ir-core.c:277:
+	dev->ir = kzalloc(sizeof(struct ir_device), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:LINE_SPACING: Please don't use multiple blank lines
#441: FILE: drivers/input/ir-core.c:286:
+
+

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#445: FILE: drivers/input/ir-core.c:290:
+	if (dev->ir) {
+		kfree(dev->ir);

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#459: FILE: drivers/input/ir/Kconfig:4:
+menuconfig INPUT_IR
+	bool "Infrared Remote (IR) receiver/transmitter drivers"
+	default n
+	help
+	  Say Y here, and all supported Infrared Remote Control IR
+	  receiver and transmitter drivers will be displayed. The receiver drivers
+	  allow control of your Linux system via remote control.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#469: FILE: drivers/input/ir/Kconfig:14:
+config IR_GPT
+	tristate "GPT Based IR Receiver"
+	default m
+	help
+	  Driver for GPT-based IR receiver found on Digispeaker
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#494: FILE: drivers/input/ir/ir-gpt.c:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#509: FILE: drivers/input/ir/ir-gpt.c:16:
+#include <asm/io.h>

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#517: FILE: drivers/input/ir/ir-gpt.c:24:
+	spinlock_t lock;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#581: FILE: drivers/input/ir/ir-gpt.c:88:
+
+

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#587: FILE: drivers/input/ir/ir-gpt.c:94:
+static int __devinit ir_gpt_of_probe(struct of_device *op,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#588: FILE: drivers/input/ir/ir-gpt.c:95:
+static int __devinit ir_gpt_of_probe(struct of_device *op,
+				      const struct of_device_id *match)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ir_gpt_of_probe', this function's name, in a string
#594: FILE: drivers/input/ir/ir-gpt.c:101:
+	dev_dbg(&op->dev, "ir_gpt_of_probe\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SIZEOF_PARENTHESIS: sizeof *ir_gpt should be sizeof(*ir_gpt)
#597: FILE: drivers/input/ir/ir-gpt.c:104:
+	ir_gpt = kzalloc(sizeof *ir_gpt, GFP_KERNEL);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#616: FILE: drivers/input/ir/ir-gpt.c:123:
+	INIT_WORK (&ir_gpt->queue, ir_event);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ir_gpt_of_probe', this function's name, in a string
#635: FILE: drivers/input/ir/ir-gpt.c:142:
+	dev_dbg(&op->dev, "ir_gpt_of_probe irq=%d\n", ir_gpt->irq);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ir_gpt_of_probe', this function's name, in a string
#639: FILE: drivers/input/ir/ir-gpt.c:146:
+	dev_dbg(&op->dev, "ir_gpt_of_probe request irq rc=%d\n", rc);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#651: FILE: drivers/input/ir/ir-gpt.c:158:
+	printk("GPT IR Receiver driver\n");

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#663: FILE: drivers/input/ir/ir-gpt.c:170:
+static int __devexit ir_gpt_of_remove(struct of_device *op)

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#678: FILE: drivers/input/ir/ir-gpt.c:185:
+static struct of_device_id ir_gpt_match[] __devinitdata = {

WARNING:CONST_STRUCT: struct of_device_id should normally be const
#678: FILE: drivers/input/ir/ir-gpt.c:185:
+static struct of_device_id ir_gpt_match[] __devinitdata = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:UNDOCUMENTED_DT_STRING: DT compatible string "gpt-ir" appears un-documented -- check /home/fedora/lkml-analysis/linux/Documentation/devicetree/bindings/
#679: FILE: drivers/input/ir/ir-gpt.c:186:
+	{ .compatible = "gpt-ir", },

CHECK:LINE_SPACING: Please don't use multiple blank lines
#742: FILE: include/linux/input.h:968:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#791: FILE: include/linux/input.h:1416:
+
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000224743.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 29 warnings, 73 checks, 681 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000224743.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
