WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#56: 
int cpu_area_populate(void *start, unsigned long size, gfp_t flags, int node)

WARNING:INCLUDE_LINUX: Use #include <linux/pgtable.h> instead of <asm/pgtable.h>
#91: FILE: mm/cpu_alloc.c:24:
+#include <asm/pgtable.h>

CHECK:BIT_MACRO: Prefer using the BIT macro
#117: FILE: mm/cpu_alloc.c:57:
+#define BOOT_ALLOC (1 << __GFP_BITS_SHIFT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#119: FILE: mm/cpu_alloc.c:59:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#128: FILE: mm/cpu_alloc.c:68:
+
+

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#129: FILE: mm/cpu_alloc.c:69:
+static unsigned long *cpu_alloc_map = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:BRACES: Unbalanced braces around else statement
#146: FILE: mm/cpu_alloc.c:86:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#152: FILE: mm/cpu_alloc.c:92:
+pte_t *cpu_area_pte_populate(pmd_t *pmd, unsigned long addr,
+						gfp_t flags, int node)

WARNING:LINE_SPACING: Missing a blank line after declarations
#155: FILE: mm/cpu_alloc.c:95:
+	pte_t *pte = pte_offset_kernel(pmd, addr);
+	if (pte_none(*pte)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#158: FILE: mm/cpu_alloc.c:98:
+		void *p = cpu_area_alloc_block(PAGE_SIZE, flags, node);
+		if (!p)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#167: FILE: mm/cpu_alloc.c:107:
+pmd_t *cpu_area_pmd_populate(pud_t *pud, unsigned long addr,
+						gfp_t flags, int node)

WARNING:LINE_SPACING: Missing a blank line after declarations
#170: FILE: mm/cpu_alloc.c:110:
+	pmd_t *pmd = pmd_offset(pud, addr);
+	if (pmd_none(*pmd)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#172: FILE: mm/cpu_alloc.c:112:
+		void *p = cpu_area_alloc_block(PAGE_SIZE, flags, node);
+		if (!p)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#180: FILE: mm/cpu_alloc.c:120:
+pud_t *cpu_area_pud_populate(pgd_t *pgd, unsigned long addr,
+						gfp_t flags, int node)

WARNING:LINE_SPACING: Missing a blank line after declarations
#183: FILE: mm/cpu_alloc.c:123:
+	pud_t *pud = pud_offset(pgd, addr);
+	if (pud_none(*pud)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#185: FILE: mm/cpu_alloc.c:125:
+		void *p = cpu_area_alloc_block(PAGE_SIZE, flags, node);
+		if (!p)

WARNING:LINE_SPACING: Missing a blank line after declarations
#195: FILE: mm/cpu_alloc.c:135:
+	pgd_t *pgd = pgd_offset_k(addr);
+	if (pgd_none(*pgd)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#197: FILE: mm/cpu_alloc.c:137:
+		void *p = cpu_area_alloc_block(PAGE_SIZE, flags, node);
+		if (!p)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#205: FILE: mm/cpu_alloc.c:145:
+int cpu_area_populate_basepages(void *start, unsigned long size,
+						gfp_t flags, int node)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#236: FILE: mm/cpu_alloc.c:176:
+int __attribute__((weak)) cpu_area_populate(void *start, unsigned long size,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#237: FILE: mm/cpu_alloc.c:177:
+int __attribute__((weak)) cpu_area_populate(void *start, unsigned long size,
+					gfp_t flags, int node)

WARNING:TYPO_SPELLING: 'accomodate' may be misspelled - perhaps 'accommodate'?
#244: FILE: mm/cpu_alloc.c:184:
+ * until we have enough space to accomodate a newly allocated object.
                                  ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#272: FILE: mm/cpu_alloc.c:212:
+	BUG_ON(map_order >= MAX_ORDER);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#273: FILE: mm/cpu_alloc.c:213:
+	start = cpu_area + \

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#278: FILE: mm/cpu_alloc.c:218:
+		err = cpu_area_populate(CPU_PTR(start, cpu), ALLOC_SIZE,
+			flags, cpu_to_node(cpu));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#288: FILE: mm/cpu_alloc.c:228:
+		new_map = cpu_area_alloc_block(PAGE_SIZE << map_order,
+						flags | __GFP_ZERO, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#304: FILE: mm/cpu_alloc.c:244:
+			free_pages((unsigned long)new_map,
+						map_order);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#315: FILE: mm/cpu_alloc.c:255:
+			memcpy(new_map, cpu_alloc_map,
+				PAGE_SIZE << cpu_alloc_map_order);

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#366: FILE: mm/cpu_alloc.c:309:
+	return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#375: FILE: mm/cpu_alloc.c:317:
+	BUG_ON(units_reserved > units_total);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#456: FILE: include/linux/mm.h:1142:
+pud_t *cpu_area_pud_populate(pgd_t *pgd, unsigned long addr,
+						gfp_t flags, int node);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#458: FILE: include/linux/mm.h:1144:
+pmd_t *cpu_area_pmd_populate(pud_t *pud, unsigned long addr,
+						gfp_t flags, int node);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#460: FILE: include/linux/mm.h:1146:
+pte_t *cpu_area_pte_populate(pmd_t *pmd, unsigned long addr,
+						gfp_t flags, int node);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#463: FILE: include/linux/mm.h:1149:
+int cpu_area_populate_basepages(void *start, unsigned long size,
+						gfp_t flags, int node);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#465: FILE: include/linux/mm.h:1151:
+int cpu_area_populate(void *start, unsigned long size,
+						gfp_t flags, int node);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000356684.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 16 warnings, 18 checks, 388 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000356684.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
