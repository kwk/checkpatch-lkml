WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#82: FILE: fs/dlm/lock.c:887:
+	/* Cancel state was preemptively cleared by a successful convert,
+	   see next comment, nothing to do. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#82: FILE: fs/dlm/lock.c:887:
+	   see next comment, nothing to do. */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mstype == DLM_MSG_CANCEL_REPLY'
#84: FILE: fs/dlm/lock.c:889:
+	if ((mstype == DLM_MSG_CANCEL_REPLY) &&
+	    (lkb->lkb_wait_type != DLM_MSG_CANCEL)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'lkb->lkb_wait_type != DLM_MSG_CANCEL'
#84: FILE: fs/dlm/lock.c:889:
+	if ((mstype == DLM_MSG_CANCEL_REPLY) &&
+	    (lkb->lkb_wait_type != DLM_MSG_CANCEL)) {

WARNING:TYPO_SPELLING: 'premptively' may be misspelled - perhaps 'preemptively'?
#91: FILE: fs/dlm/lock.c:896:
+	/* Remove for the convert reply, and premptively remove for the
 	                                     ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#92: FILE: fs/dlm/lock.c:897:
+	/* Remove for the convert reply, and premptively remove for the
+	   cancel reply.  A convert has been granted while there's still

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#97: FILE: fs/dlm/lock.c:902:
+	   lingering state of the cancel and fail with -EBUSY. */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mstype == DLM_MSG_CONVERT_REPLY'
#99: FILE: fs/dlm/lock.c:904:
+	if ((mstype == DLM_MSG_CONVERT_REPLY) &&
+	    (lkb->lkb_wait_type == DLM_MSG_CONVERT) &&
+	    is_overlap_cancel(lkb) && ms && !ms->m_result) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'lkb->lkb_wait_type == DLM_MSG_CONVERT'
#99: FILE: fs/dlm/lock.c:904:
+	if ((mstype == DLM_MSG_CONVERT_REPLY) &&
+	    (lkb->lkb_wait_type == DLM_MSG_CONVERT) &&
+	    is_overlap_cancel(lkb) && ms && !ms->m_result) {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'validate_lock_args', this function's name, in a string
#156: FILE: fs/dlm/lock.c:2119:
+		log_debug(ls, "validate_lock_args %d %x %x %x %d %d %s",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000150397.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 6 warnings, 4 checks, 117 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000150397.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
