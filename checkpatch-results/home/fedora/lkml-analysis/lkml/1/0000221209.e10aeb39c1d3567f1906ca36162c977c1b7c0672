WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#64: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#69: FILE: arch/x86/kernel/traps.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/processor.h> instead of <asm/processor.h>
#118: FILE: arch/x86/kernel/traps.c:50:
+#include <asm/processor.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/atomic.h> instead of <asm/atomic.h>
#121: FILE: arch/x86/kernel/traps.c:53:
+#include <asm/atomic.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/nmi.h> instead of <asm/nmi.h>
#137: FILE: arch/x86/kernel/traps.c:69:
+#include <asm/nmi.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/smp.h> instead of <asm/smp.h>
#138: FILE: arch/x86/kernel/traps.c:70:
+#include <asm/smp.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#139: FILE: arch/x86/kernel/traps.c:71:
+#include <asm/io.h>

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#144: FILE: arch/x86/kernel/traps.c:76:
+EXPORT_SYMBOL_GPL(used_vectors);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".data.idt") over __attribute__((__section__(".data.idt")))
#157: FILE: arch/x86/kernel/traps.c:89:
+	__attribute__((__section__(".data.idt"))) = { { { { 0, 0 } } }, };

CHECK:SPACING: No space is necessary after a cast
#215: FILE: arch/x86/kernel/traps.c:147:
+			memset((char *) tss->io_bitmap +

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_RATELIMITED: Prefer printk_ratelimited or pr_<level>_ratelimited to printk_ratelimit
#270: FILE: arch/x86/kernel/traps.c:202:
+	    printk_ratelimit()) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#271: FILE: arch/x86/kernel/traps.c:203:
+		printk(KERN_INFO

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#276: FILE: arch/x86/kernel/traps.c:208:
+		printk("\n");

CHECK:SPACING: No space is necessary after a cast
#296: FILE: arch/x86/kernel/traps.c:228:
+	if (handle_vm86_trap((struct kernel_vm86_regs *) regs,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#297: FILE: arch/x86/kernel/traps.c:229:
+	if (handle_vm86_trap((struct kernel_vm86_regs *) regs,
+						error_code, trapnr))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'trapnr' - possible side-effects?
#303: FILE: arch/x86/kernel/traps.c:235:
+#define DO_ERROR(trapnr, signr, str, name)				\
+dotraplinkage void do_##name(struct pt_regs *regs, long error_code)	\
+{									\
+	if (notify_die(DIE_TRAP, str, regs, error_code, trapnr, signr)	\
+							== NOTIFY_STOP)	\
+		return;							\
+	conditional_sti(regs);						\
+	do_trap(trapnr, signr, str, regs, error_code, NULL);		\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'signr' - possible side-effects?
#303: FILE: arch/x86/kernel/traps.c:235:
+#define DO_ERROR(trapnr, signr, str, name)				\
+dotraplinkage void do_##name(struct pt_regs *regs, long error_code)	\
+{									\
+	if (notify_die(DIE_TRAP, str, regs, error_code, trapnr, signr)	\
+							== NOTIFY_STOP)	\
+		return;							\
+	conditional_sti(regs);						\
+	do_trap(trapnr, signr, str, regs, error_code, NULL);		\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'str' - possible side-effects?
#303: FILE: arch/x86/kernel/traps.c:235:
+#define DO_ERROR(trapnr, signr, str, name)				\
+dotraplinkage void do_##name(struct pt_regs *regs, long error_code)	\
+{									\
+	if (notify_die(DIE_TRAP, str, regs, error_code, trapnr, signr)	\
+							== NOTIFY_STOP)	\
+		return;							\
+	conditional_sti(regs);						\
+	do_trap(trapnr, signr, str, regs, error_code, NULL);		\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'trapnr' - possible side-effects?
#313: FILE: arch/x86/kernel/traps.c:245:
+#define DO_ERROR_INFO(trapnr, signr, str, name, sicode, siaddr)		\
+dotraplinkage void do_##name(struct pt_regs *regs, long error_code)	\
+{									\
+	siginfo_t info;							\
+	info.si_signo = signr;						\
+	info.si_errno = 0;						\
+	info.si_code = sicode;						\
+	info.si_addr = (void __user *)siaddr;				\
+	if (notify_die(DIE_TRAP, str, regs, error_code, trapnr, signr)	\
+							== NOTIFY_STOP)	\
+		return;							\
+	conditional_sti(regs);						\
+	do_trap(trapnr, signr, str, regs, error_code, &info);		\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'signr' - possible side-effects?
#313: FILE: arch/x86/kernel/traps.c:245:
+#define DO_ERROR_INFO(trapnr, signr, str, name, sicode, siaddr)		\
+dotraplinkage void do_##name(struct pt_regs *regs, long error_code)	\
+{									\
+	siginfo_t info;							\
+	info.si_signo = signr;						\
+	info.si_errno = 0;						\
+	info.si_code = sicode;						\
+	info.si_addr = (void __user *)siaddr;				\
+	if (notify_die(DIE_TRAP, str, regs, error_code, trapnr, signr)	\
+							== NOTIFY_STOP)	\
+		return;							\
+	conditional_sti(regs);						\
+	do_trap(trapnr, signr, str, regs, error_code, &info);		\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'str' - possible side-effects?
#313: FILE: arch/x86/kernel/traps.c:245:
+#define DO_ERROR_INFO(trapnr, signr, str, name, sicode, siaddr)		\
+dotraplinkage void do_##name(struct pt_regs *regs, long error_code)	\
+{									\
+	siginfo_t info;							\
+	info.si_signo = signr;						\
+	info.si_errno = 0;						\
+	info.si_code = sicode;						\
+	info.si_addr = (void __user *)siaddr;				\
+	if (notify_die(DIE_TRAP, str, regs, error_code, trapnr, signr)	\
+							== NOTIFY_STOP)	\
+		return;							\
+	conditional_sti(regs);						\
+	do_trap(trapnr, signr, str, regs, error_code, &info);		\
+}

WARNING:TYPO_SPELLING: 'IST' may be misspelled - perhaps 'IS'?
#341: FILE: arch/x86/kernel/traps.c:273:
+/* Runs on IST stack */
            ^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#345: FILE: arch/x86/kernel/traps.c:277:
+	if (notify_die(DIE_TRAP, "stack segment", regs, error_code,
+			12, SIGBUS) == NOTIFY_STOP)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#364: FILE: arch/x86/kernel/traps.c:296:
+	/* This is always a kernel trap and never fixable (and thus must
+	   never return). */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#364: FILE: arch/x86/kernel/traps.c:296:
+	   never return). */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#395: FILE: arch/x86/kernel/traps.c:327:
+	if (show_unhandled_signals && unhandled_signal(tsk, SIGSEGV) &&
+			printk_ratelimit()) {

WARNING:PRINTK_RATELIMITED: Prefer printk_ratelimited or pr_<level>_ratelimited to printk_ratelimit
#395: FILE: arch/x86/kernel/traps.c:327:
+			printk_ratelimit()) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#396: FILE: arch/x86/kernel/traps.c:328:
+		printk(KERN_INFO

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#401: FILE: arch/x86/kernel/traps.c:333:
+		printk("\n");

CHECK:SPACING: No space is necessary after a cast
#410: FILE: arch/x86/kernel/traps.c:342:
+	handle_vm86_fault((struct kernel_vm86_regs *) regs, error_code);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#421: FILE: arch/x86/kernel/traps.c:353:
+	if (notify_die(DIE_GPF, "general protection fault", regs,
+				error_code, 13, SIGSEGV) == NOTIFY_STOP)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#429: FILE: arch/x86/kernel/traps.c:361:
+	printk(KERN_EMERG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#433: FILE: arch/x86/kernel/traps.c:365:
+	printk(KERN_EMERG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#446: FILE: arch/x86/kernel/traps.c:378:
+	printk(KERN_EMERG "Dazed and confused, but trying to continue\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#458: FILE: arch/x86/kernel/traps.c:390:
+	printk(KERN_EMERG "NMI: IOCK error (debug interrupt?)\n");

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#467: FILE: arch/x86/kernel/traps.c:399:
+		udelay(1000);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#489: FILE: arch/x86/kernel/traps.c:421:
+	printk(KERN_EMERG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#493: FILE: arch/x86/kernel/traps.c:425:
+	printk(KERN_EMERG "Do you have a strange power saving mode enabled?\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#497: FILE: arch/x86/kernel/traps.c:429:
+	printk(KERN_EMERG "Dazed and confused, but trying to continue\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#510: FILE: arch/x86/kernel/traps.c:442:
+	/*
+	* We are in trouble anyway, lets at least try

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#514: FILE: arch/x86/kernel/traps.c:446:
+	printk(KERN_EMERG "%s", str);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#515: FILE: arch/x86/kernel/traps.c:447:
+	printk(" on CPU%d, ip %08lx, registers:\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#516: FILE: arch/x86/kernel/traps.c:448:
+	printk(" on CPU%d, ip %08lx, registers:\n",
+		smp_processor_id(), regs->ip);

WARNING:TYPO_SPELLING: 'aswell' may be misspelled - perhaps 'as well'?
#526: FILE: arch/x86/kernel/traps.c:458:
+	 * and might aswell get out now while we still can:
 	             ^^^^^^

WARNING:TYPO_SPELLING: 'IST' may be misspelled - perhaps 'IS'?
#613: FILE: arch/x86/kernel/traps.c:545:
+/* May run on IST stack. */
               ^^^

WARNING:TYPO_SPELLING: 'IST' may be misspelled - perhaps 'IS'?
#632: FILE: arch/x86/kernel/traps.c:564:
+/* Help handler running on IST stack to switch back to user stack
                            ^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#633: FILE: arch/x86/kernel/traps.c:565:
+/* Help handler running on IST stack to switch back to user stack
+   for scheduling or signal handling. The actual stack switch is done in

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#634: FILE: arch/x86/kernel/traps.c:566:
+   entry.S */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#645: FILE: arch/x86/kernel/traps.c:577:
+	/* Exception from kernel and interrupts are enabled. Move to
+	   kernel process stack. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#645: FILE: arch/x86/kernel/traps.c:577:
+	   kernel process stack. */

WARNING:TYPO_SPELLING: 'IST' may be misspelled - perhaps 'IS'?
#676: FILE: arch/x86/kernel/traps.c:608:
+ * May run on IST stack.
               ^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#697: FILE: arch/x86/kernel/traps.c:629:
+	if (notify_die(DIE_DEBUG, "debug", regs, condition, error_code,
+						SIGTRAP) == NOTIFY_STOP)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#704: FILE: arch/x86/kernel/traps.c:636:
+	if (condition & (DR_TRAP0|DR_TRAP1|DR_TRAP2|DR_TRAP3)) {
 	                         ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#704: FILE: arch/x86/kernel/traps.c:636:
+	if (condition & (DR_TRAP0|DR_TRAP1|DR_TRAP2|DR_TRAP3)) {
 	                                  ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#704: FILE: arch/x86/kernel/traps.c:636:
+	if (condition & (DR_TRAP0|DR_TRAP1|DR_TRAP2|DR_TRAP3)) {
 	                                           ^

CHECK:SPACING: No space is necessary after a cast
#741: FILE: arch/x86/kernel/traps.c:673:
+	handle_vm86_trap((struct kernel_vm86_regs *) regs, error_code, 1);

WARNING:RETURN_VOID: void function return statements are not generally useful
#751: FILE: arch/x86/kernel/traps.c:683:
+	return;
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#922: FILE: arch/x86/kernel/traps.c:854:
+	if (!user_mode(regs) &&
+			kernel_math_error(regs, "kernel simd math error", 19))

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#932: FILE: arch/x86/kernel/traps.c:864:
+#if 0

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#934: FILE: arch/x86/kernel/traps.c:866:
+	printk(KERN_INFO "Ignoring P6 Local APIC Spurious Interrupt Bug...\n");

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#958: FILE: arch/x86/kernel/traps.c:890:
+asmlinkage void __attribute__((weak)) smp_thermal_interrupt(void)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#962: FILE: arch/x86/kernel/traps.c:894:
+asmlinkage void __attribute__((weak)) mce_threshold_interrupt(void)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#1018: FILE: arch/x86/kernel/traps.c:950:
+	printk(KERN_EMERG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#1020: FILE: arch/x86/kernel/traps.c:952:
+	printk(KERN_EMERG "killing %s.\n", current->comm);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1054: FILE: arch/x86/kernel/traps.c:986:
+	siginfo_t info;
+	local_irq_enable();

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1061: FILE: arch/x86/kernel/traps.c:993:
+	if (notify_die(DIE_TRAP, "iret exception",
+			regs, error_code, 32, SIGILL) == NOTIFY_STOP)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1076: FILE: arch/x86/kernel/traps.c:1008:
+	if (readl(p) == 'E' + ('I'<<8) + ('S'<<16) + ('A'<<24))
 	                          ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1076: FILE: arch/x86/kernel/traps.c:1008:
+	if (readl(p) == 'E' + ('I'<<8) + ('S'<<16) + ('A'<<24))
 	                                     ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1076: FILE: arch/x86/kernel/traps.c:1008:
+	if (readl(p) == 'E' + ('I'<<8) + ('S'<<16) + ('A'<<24))
 	                                                 ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1116: FILE: arch/x86/kernel/traps.c:1048:
+		printk(KERN_INFO "Enabling fast FPU save and restore... ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1118: FILE: arch/x86/kernel/traps.c:1050:
+		printk("done.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1121: FILE: arch/x86/kernel/traps.c:1053:
+		printk(KERN_INFO

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1124: FILE: arch/x86/kernel/traps.c:1056:
+		printk("done.\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000221209.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 43 warnings, 30 checks, 1083 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000221209.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
