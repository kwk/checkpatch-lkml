WARNING:TYPO_SPELLING: 'fileds' may be misspelled - perhaps 'fields'?
#44: 
Also mount options are split into two fileds, the first containing the
                                      ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:REPEATED_WORD: Possible repeated word: 'rootfs'
#57: 
2 2 0:1 rootfs rootfs / / rw rw private

WARNING:REPEATED_WORD: Possible repeated word: 'rw'
#57: 
2 2 0:1 rootfs rootfs / / rw rw private

WARNING:REPEATED_WORD: Possible repeated word: 'rw'
#58: 
16 2 98:0 ext2 /dev/root / / rw rw private

WARNING:REPEATED_WORD: Possible repeated word: 'rw'
#59: 
17 16 0:3 proc /proc / /proc rw rw unbindable

WARNING:REPEATED_WORD: Possible repeated word: 'devpts'
#60: 
18 16 0:10 devpts devpts /dev/pts / rw rw private

WARNING:REPEATED_WORD: Possible repeated word: 'rw'
#60: 
18 16 0:10 devpts devpts /dev/pts / rw rw private

WARNING:REPEATED_WORD: Possible repeated word: 'rw'
#61: 
19 16 98:0 ext2 /dev/root /mnt /mnt rw rw shared:19

WARNING:REPEATED_WORD: Possible repeated word: 'rw'
#62: 
20 16 98:0 ext2 /dev/root /mnt/1 /var rw rw shared:21,slave:19

WARNING:REPEATED_WORD: Possible repeated word: 'rw'
#63: 
21 16 98:0 ext2 /dev/root /mnt/1/abc /tmp rw rw shared:20,slave:19

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#81: 
  and master, this is more useful, than a random ID within the same namespace

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#99: FILE: fs/dcache.c:1894:
+static int prepend(char **buffer, int *buflen, const char *str,
+			  int namelen)

CHECK:CAMELCASE: Avoid CamelCase: <Elong>
#121: FILE: fs/dcache.c:1916:
+			goto Elong;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#126: FILE: fs/dcache.c:1921:
+	retval = end-1;
 	            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#131: FILE: fs/dcache.c:1926:
+		struct dentry *parent;
+		if (IS_ROOT(dentry))

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#138: FILE: fs/dcache.c:1933:
+		if (prepend(&end, &buflen, dentry->d_name.name,
+				dentry->d_name.len) ||

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#358: FILE: fs/namespace.c:784:
+		seq_printf(m, " unbindable");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#360: FILE: fs/namespace.c:786:
+		seq_printf(m, " private");

WARNING:LINE_SPACING: Missing a blank line after declarations
#406: FILE: fs/seq_file.c:356:
+		char c = *p++;
+		if (!c) {

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#412: FILE: fs/seq_file.c:362:
+			break;
+		} else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#467: FILE: fs/seq_file.c:402:
+		char *p = dentry_path(dentry, s, m->size - m->count);
+		if (!IS_ERR(p)) {

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#492: FILE: include/linux/dcache.h:305:
+extern char *dentry_path(struct dentry *, char *, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#492: FILE: include/linux/dcache.h:305:
+extern char *dentry_path(struct dentry *, char *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#492: FILE: include/linux/dcache.h:305:
+extern char *dentry_path(struct dentry *, char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#492: FILE: include/linux/dcache.h:305:
+extern char *dentry_path(struct dentry *, char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct seq_file *' should also have an identifier name
#512: FILE: include/linux/seq_file.h:47:
+int seq_dentry(struct seq_file *, struct dentry *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#512: FILE: include/linux/seq_file.h:47:
+int seq_dentry(struct seq_file *, struct dentry *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#512: FILE: include/linux/seq_file.h:47:
+int seq_dentry(struct seq_file *, struct dentry *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#570: FILE: fs/pnode.h:38:
+int get_peer_group_id(struct vfsmount *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#571: FILE: fs/pnode.h:39:
+int get_master_id(struct vfsmount *);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#682: FILE: fs/proc/base.c:2212:
+	REG("mountinfo",  S_IRUGO, mountinfo),

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#690: FILE: fs/proc/base.c:2541:
+	REG("mountinfo",  S_IRUGO, mountinfo),

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000330092.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 27 warnings, 5 checks, 600 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000330092.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
