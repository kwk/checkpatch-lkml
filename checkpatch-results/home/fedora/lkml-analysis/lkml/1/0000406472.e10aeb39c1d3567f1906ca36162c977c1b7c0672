WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#38: 
group of requests 'deserves' usage of the cache and disks at any given time.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#207: FILE: drivers/md/raid5.c:265:
+		if (dev_q->toread || dev->read || dev_q->towrite ||
+			dev->written || test_bit(R5_LOCKED, &dev->flags)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#221: FILE: drivers/md/raid5.c:293:
+static sector_t compute_blocknr(raid5_conf_t *conf, int raid_disks,
+	sector_t sector, int pd_idx, int i);

CHECK:CAMELCASE: Avoid CamelCase: <R5_Wantfill>
#267: FILE: drivers/md/raid5.c:540:
+		if (test_bit(R5_Wantfill, &dev->flags) && !dev_q->toread) {

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#301: FILE: drivers/md/raid5.c:589:
+			dev->read = rbi = dev_q->toread;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:CAMELCASE: Avoid CamelCase: <R5_Wantprexor>
#332: FILE: drivers/md/raid5.c:690:
+		if (dev_q->towrite && test_bit(R5_Wantprexor, &dev->flags))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#363: FILE: drivers/md/raid5.c:729:
+			if (i != pd_idx && dev_q->towrite &&
 				test_bit(R5_LOCKED, &dev->flags))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#464: FILE: drivers/md/raid5.c:952:
+		(conf->raid_disks-1) * sizeof(struct r5_queue_dev));
 		                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#512: FILE: drivers/md/raid5.c:995:
+	sc = kmem_cache_create(conf->sq_cache_name[conf->active_name],
+		sizeof(struct stripe_queue) +

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#513: FILE: drivers/md/raid5.c:996:
+		(devs-1)*sizeof(struct r5_queue_dev), 0, 0, NULL, NULL);
 		     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#513: FILE: drivers/md/raid5.c:996:
+		(devs-1)*sizeof(struct r5_queue_dev), 0, 0, NULL, NULL);
 		        ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#536: FILE: drivers/md/raid5.c:1047:
+	sc = kmem_cache_create(conf->sh_cache_name[1-conf->active_name],
 	                                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#542: FILE: drivers/md/raid5.c:1053:
+	sc_q = kmem_cache_create(conf->sh_cache_name[1-conf->active_name],
 	                                              ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#543: FILE: drivers/md/raid5.c:1054:
+	sc_q = kmem_cache_create(conf->sh_cache_name[1-conf->active_name],
+		    sizeof(struct stripe_queue) +

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#544: FILE: drivers/md/raid5.c:1055:
+		    (newsize-1)*sizeof(struct r5_queue_dev), 0, 0, NULL, NULL);
 		            ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#544: FILE: drivers/md/raid5.c:1055:
+		    (newsize-1)*sizeof(struct r5_queue_dev), 0, 0, NULL, NULL);
 		               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#565: FILE: drivers/md/raid5.c:1076:
+			(newsize-1)*sizeof(struct r5_queue_dev));
 			        ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#565: FILE: drivers/md/raid5.c:1076:
+			(newsize-1)*sizeof(struct r5_queue_dev));
 			           ^

WARNING:NEEDLESS_IF: kmem_cache_destroy(NULL) is safe and this check is probably not required
#629: FILE: drivers/md/raid5.c:1181:
+	if (conf->sh_slab_cache)
+		kmem_cache_destroy(conf->sh_slab_cache);

WARNING:NEEDLESS_IF: kmem_cache_destroy(NULL) is safe and this check is probably not required
#633: FILE: drivers/md/raid5.c:1185:
+	if (conf->sq_slab_cache)
+		kmem_cache_destroy(conf->sq_slab_cache);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#676: FILE: drivers/md/raid5.c:1320:
+	dev_q->sector = compute_blocknr(sh->sq->raid_conf, sh->disks,
+			sh->sector, sh->sq->pd_idx, i);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#687: FILE: drivers/md/raid5.c:1457:
+compute_blocknr(raid5_conf_t *conf, int raid_disks, sector_t sector,
+	int pd_idx, int i)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#737: FILE: drivers/md/raid5.c:1500:
+			if (pd_idx == raid_disks-1)
 			                        ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#745: FILE: drivers/md/raid5.c:1507:
+			if (pd_idx == raid_disks-1)
 			                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#906: FILE: drivers/md/raid5.c:1902:
+		sq->bm_seq = conf->seq_flush+1;
 		                            ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#916: FILE: drivers/md/raid5.c:1909:
+		sector_t sector = sq->dev[dd_idx].sector;
+		for (bi = sq->dev[dd_idx].towrite;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'disk_idx == sq->pd_idx'
#1014: FILE: drivers/md/raid5.c:2056:
+	if ((disk_idx == sq->pd_idx) &&
 	     test_bit(STRIPE_OP_CHECK, &sh->ops.pending))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1015: FILE: drivers/md/raid5.c:2057:
+	if ((disk_idx == sq->pd_idx) &&
 	     test_bit(STRIPE_OP_CHECK, &sh->ops.pending))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dev_q->towrite"
#1087: FILE: drivers/md/raid5.c:2238:
+				if (dev_q->towrite == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:SPLIT_STRING: quoted string split across lines
#1264: FILE: drivers/md/raid5.c:2747:
 		pr_debug("check %d: state 0x%lx toread %p read %p write %p "
+			"written %p\n",	i, dev->flags, dev_q->toread,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1274: FILE: drivers/md/raid5.c:2756:
+		if (test_bit(R5_UPTODATE, &dev->flags) && dev_q->toread &&
 			!test_bit(STRIPE_OP_BIOFILL, &sh->ops.pending))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1309: FILE: drivers/md/raid5.c:2862:
+		BUG_ON(!test_bit(R5_UPTODATE, &sh->dev[sq->pd_idx].flags));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1332: FILE: drivers/md/raid5.c:2962:
+		sq->pd_idx = stripe_to_pdidx(sh->sector, conf,
 			conf->raid_disks);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000406472.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 6 warnings, 27 checks, 1338 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000406472.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
