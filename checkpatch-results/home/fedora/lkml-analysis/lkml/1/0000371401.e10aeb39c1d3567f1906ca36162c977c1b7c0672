WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#61: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#66: FILE: include/linux/cpupri.h:1:
+#ifndef _LINUX_CPUPRI_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#71: FILE: include/linux/cpupri.h:6:
+#define CPUPRI_NR_PRIORITIES 2+MAX_RT_PRIO
                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#71: FILE: include/linux/cpupri.h:6:
+#define CPUPRI_NR_PRIORITIES 2+MAX_RT_PRIO

ERROR:SPACING: space required before the open parenthesis '('
#85: FILE: include/linux/cpupri.h:20:
+#define cpupri_set(cpu, pri)            do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#87: FILE: include/linux/cpupri.h:22:
+#define cpupri_init()                   do { } while(0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#129: FILE: kernel/cpupri.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#130: FILE: kernel/cpupri.c:2:
+ *  kernel/cpupri.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#169: FILE: kernel/cpupri.c:41:
+	long          pri_active[CPUPRI_NR_PRIORITIES/BITS_PER_LONG];
 	                                             ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'array' - possible side-effects?
#176: FILE: kernel/cpupri.c:48:
+#define for_each_cpupri_active(array, idx)                   \
+  for( idx = find_first_bit(array, CPUPRI_NR_PRIORITIES);    \
+       idx < CPUPRI_NR_PRIORITIES;                           \
+       idx = find_next_bit(array, CPUPRI_NR_PRIORITIES, idx+1))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'idx' - possible side-effects?
#176: FILE: kernel/cpupri.c:48:
+#define for_each_cpupri_active(array, idx)                   \
+  for( idx = find_first_bit(array, CPUPRI_NR_PRIORITIES);    \
+       idx < CPUPRI_NR_PRIORITIES;                           \
+       idx = find_next_bit(array, CPUPRI_NR_PRIORITIES, idx+1))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#177: FILE: kernel/cpupri.c:49:
+  for( idx = find_first_bit(array, CPUPRI_NR_PRIORITIES);    \$

ERROR:SPACING: space prohibited after that open parenthesis '('
#177: FILE: kernel/cpupri.c:49:
+  for( idx = find_first_bit(array, CPUPRI_NR_PRIORITIES);    \

ERROR:SPACING: space required before the open parenthesis '('
#177: FILE: kernel/cpupri.c:49:
+  for( idx = find_first_bit(array, CPUPRI_NR_PRIORITIES);    \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#178: FILE: kernel/cpupri.c:50:
+       idx < CPUPRI_NR_PRIORITIES;                           \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#179: FILE: kernel/cpupri.c:51:
+       idx = find_next_bit(array, CPUPRI_NR_PRIORITIES, idx+1))$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#179: FILE: kernel/cpupri.c:51:
+       idx = find_next_bit(array, CPUPRI_NR_PRIORITIES, idx+1))
                                                            ^

WARNING:TYPO_SPELLING: 'recommeded' may be misspelled - perhaps 'recommended'?
#187: FILE: kernel/cpupri.c:59:
+ * Note: This function returns the recommeded CPU as calculated during the
                                    ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'invokation' may be misspelled - perhaps 'invocation'?
#188: FILE: kernel/cpupri.c:60:
+ * current invokation.  By the time the call returns, the CPUs may have in
            ^^^^^^^^^^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#209: FILE: kernel/cpupri.c:81:
+			int       lowest_pri = idx-1;
 			                          ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#210: FILE: kernel/cpupri.c:82:
+^I^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#213: FILE: kernel/cpupri.c:85:
+^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#215: FILE: kernel/cpupri.c:87:
+^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#230: FILE: kernel/cpupri.c:102:
+^I^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#260: FILE: kernel/cpupri.c:132:
+^I * Its safe to check the CPU priority outside the seqlock because $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#266: FILE: kernel/cpupri.c:138:
+^I^I$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#274: FILE: kernel/cpupri.c:146:
+			int        idx  = oldpri+1;
 			                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#283: FILE: kernel/cpupri.c:155:
+			int        idx  = pri+1;
 			                     ^

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#309: FILE: kernel/cpupri.c:181:
+#if 0

ERROR:TRAILING_WHITESPACE: trailing whitespace
#327: FILE: kernel/cpupri.c:199:
+ * This must be called during the scheduler initialization before the $

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#337: FILE: kernel/cpupri.c:209:
+y	memset(cp, 0, sizeof(*cp));

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'cp' should also have an identifier name
#337: FILE: kernel/cpupri.c:209:
+y	memset(cp, 0, sizeof(*cp));

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'cp' should also have an identifier name
#337: FILE: kernel/cpupri.c:209:
+y	memset(cp, 0, sizeof(*cp));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#348: FILE: kernel/cpupri.c:220:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#383: FILE: kernel/sched.c:496:
+	int pri = calc_task_cpupri(rq, p);
+	cpupri_set(rq->cpu, pri);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000371401.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 12 errors, 14 warnings, 9 checks, 332 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000371401.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
