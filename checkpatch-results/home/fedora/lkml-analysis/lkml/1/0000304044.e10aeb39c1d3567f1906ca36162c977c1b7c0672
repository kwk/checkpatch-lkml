WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#37: FILE: Makefile:4:
+EXTRAVERSION = .4
 ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#146: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#151: FILE: arch/sparc/kernel/una_asm.S:1:
+/* una_asm.S: Kernel unaligned trap assembler helpers.

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#448: FILE: arch/sparc/kernel/unaligned.c:179:
+extern int do_int_load(unsigned long *dest_reg, int size,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#450: FILE: arch/sparc/kernel/unaligned.c:181:
+extern int __do_int_store(unsigned long *dst_addr, int size,

CHECK:BRACES: braces {} should be used on all arms of this statement
#459: FILE: arch/sparc/kernel/unaligned.c:190:
+	if (reg_num)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#461: FILE: arch/sparc/kernel/unaligned.c:192:
+	else {

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#527: FILE: arch/sparc/kernel/unaligned.c:264:
+			err = do_int_load(fetch_reg_addr(((insn>>25)&0x1f),
 			                                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#527: FILE: arch/sparc/kernel/unaligned.c:264:
+			err = do_int_load(fetch_reg_addr(((insn>>25)&0x1f),
 			                                            ^

CHECK:SPACING: No space is necessary after a cast
#529: FILE: arch/sparc/kernel/unaligned.c:266:
+					  size, (unsigned long *) addr,

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#537: FILE: arch/sparc/kernel/unaligned.c:271:
+			err = do_int_store(((insn>>25)&0x1f), size,
 			                         ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#537: FILE: arch/sparc/kernel/unaligned.c:271:
+			err = do_int_store(((insn>>25)&0x1f), size,
 			                              ^

CHECK:SPACING: No space is necessary after a cast
#538: FILE: arch/sparc/kernel/unaligned.c:272:
+					   (unsigned long *) addr, regs);

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#587: FILE: arch/sparc/kernel/unaligned.c:355:
+			err = do_int_load(fetch_reg_addr(((insn>>25)&0x1f),
 			                                       ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#587: FILE: arch/sparc/kernel/unaligned.c:355:
+			err = do_int_load(fetch_reg_addr(((insn>>25)&0x1f),
 			                                            ^

CHECK:SPACING: No space is necessary after a cast
#589: FILE: arch/sparc/kernel/unaligned.c:357:
+					  size, (unsigned long *) addr,

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#597: FILE: arch/sparc/kernel/unaligned.c:362:
+			err = do_int_store(((insn>>25)&0x1f), size,
 			                         ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#597: FILE: arch/sparc/kernel/unaligned.c:362:
+			err = do_int_store(((insn>>25)&0x1f), size,
 			                              ^

CHECK:SPACING: No space is necessary after a cast
#598: FILE: arch/sparc/kernel/unaligned.c:363:
+					   (unsigned long *) addr, regs);

CHECK:SPACING: No space is necessary after a cast
#667: FILE: arch/sparc64/mm/fault.c:289:
+		if ((tpc >= KERNBASE && tpc < (unsigned long) __init_end) ||

ERROR:SPACING: space required after that ',' (ctx:VxV)
#934: FILE: arch/x86/pci/mmconfig_32.c:72:
+		return pci_conf1_read(seg,bus,devfn,reg,len,value);
 		                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#934: FILE: arch/x86/pci/mmconfig_32.c:72:
+		return pci_conf1_read(seg,bus,devfn,reg,len,value);
 		                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#934: FILE: arch/x86/pci/mmconfig_32.c:72:
+		return pci_conf1_read(seg,bus,devfn,reg,len,value);
 		                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#934: FILE: arch/x86/pci/mmconfig_32.c:72:
+		return pci_conf1_read(seg,bus,devfn,reg,len,value);
 		                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#934: FILE: arch/x86/pci/mmconfig_32.c:72:
+		return pci_conf1_read(seg,bus,devfn,reg,len,value);
 		                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#948: FILE: arch/x86/pci/mmconfig_32.c:108:
+		return pci_conf1_write(seg,bus,devfn,reg,len,value);
 		                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#948: FILE: arch/x86/pci/mmconfig_32.c:108:
+		return pci_conf1_write(seg,bus,devfn,reg,len,value);
 		                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#948: FILE: arch/x86/pci/mmconfig_32.c:108:
+		return pci_conf1_write(seg,bus,devfn,reg,len,value);
 		                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#948: FILE: arch/x86/pci/mmconfig_32.c:108:
+		return pci_conf1_write(seg,bus,devfn,reg,len,value);
 		                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#948: FILE: arch/x86/pci/mmconfig_32.c:108:
+		return pci_conf1_write(seg,bus,devfn,reg,len,value);
 		                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#995: FILE: arch/x86/pci/mmconfig_64.c:62:
+		return pci_conf1_read(seg,bus,devfn,reg,len,value);
 		                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#995: FILE: arch/x86/pci/mmconfig_64.c:62:
+		return pci_conf1_read(seg,bus,devfn,reg,len,value);
 		                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#995: FILE: arch/x86/pci/mmconfig_64.c:62:
+		return pci_conf1_read(seg,bus,devfn,reg,len,value);
 		                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#995: FILE: arch/x86/pci/mmconfig_64.c:62:
+		return pci_conf1_read(seg,bus,devfn,reg,len,value);
 		                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#995: FILE: arch/x86/pci/mmconfig_64.c:62:
+		return pci_conf1_read(seg,bus,devfn,reg,len,value);
 		                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1009: FILE: arch/x86/pci/mmconfig_64.c:93:
+		return pci_conf1_write(seg,bus,devfn,reg,len,value);
 		                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1009: FILE: arch/x86/pci/mmconfig_64.c:93:
+		return pci_conf1_write(seg,bus,devfn,reg,len,value);
 		                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1009: FILE: arch/x86/pci/mmconfig_64.c:93:
+		return pci_conf1_write(seg,bus,devfn,reg,len,value);
 		                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1009: FILE: arch/x86/pci/mmconfig_64.c:93:
+		return pci_conf1_write(seg,bus,devfn,reg,len,value);
 		                                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1009: FILE: arch/x86/pci/mmconfig_64.c:93:
+		return pci_conf1_write(seg,bus,devfn,reg,len,value);
 		                                            ^

CHECK:CAMELCASE: Avoid CamelCase: <NumPhys>
#1442: FILE: drivers/message/fusion/mptsas.c:1702:
+	if (!buffer->NumPhys) {

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#1500: FILE: drivers/net/niu.c:39:
 static char version[] __devinitdata =

WARNING:LINE_SPACING: Missing a blank line after declarations
#1526: FILE: drivers/net/niu.c:5152:
+		int alt_start;
+		if (np->flags & NIU_FLAGS_XMAC)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ring->dmabase
#1580: FILE: drivers/net/wireless/b43/dma.c:443:
+					    &(ring->dmabase), flags);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:CAMELCASE: Avoid CamelCase: <ptmpQbuffer>
#1777: FILE: drivers/scsi/arcmsr/arcmsr_hba.c:1392:
+		ptmpQbuffer = ver_addr;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1830: FILE: drivers/scsi/gdth.c:163:
+                                    char *buffer, ushort count);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1830: FILE: drivers/scsi/gdth.c:163:
+                                    char *buffer, ushort count);$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1861: FILE: drivers/scsi/gdth.c:443:
+			priv->index = i+1;
 			               ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1884: FILE: drivers/scsi/gdth.c:506:
+    cmndinfo.internal_cmd_str = gdtcmd;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1893: FILE: drivers/scsi/gdth.c:2347:
+                                    char *buffer, ushort count)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1893: FILE: drivers/scsi/gdth.c:2347:
+                                    char *buffer, ushort count)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1905: FILE: drivers/scsi/gdth.c:2373:
+            memcpy(address, buffer, cpnow);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1905: FILE: drivers/scsi/gdth.c:2373:
+            memcpy(address, buffer, cpnow);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1914: FILE: drivers/scsi/gdth.c:2427:
+        gdth_copy_internal_data(ha, scp, (char*)&inq, sizeof(gdth_inq_data));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1914: FILE: drivers/scsi/gdth.c:2427:
+        gdth_copy_internal_data(ha, scp, (char*)&inq, sizeof(gdth_inq_data));$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1914: FILE: drivers/scsi/gdth.c:2427:
+        gdth_copy_internal_data(ha, scp, (char*)&inq, sizeof(gdth_inq_data));

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#1923: FILE: drivers/scsi/gdth.c:2437:
+        gdth_copy_internal_data(ha, scp, (char*)&sd, sizeof(gdth_sense_data));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1923: FILE: drivers/scsi/gdth.c:2437:
+        gdth_copy_internal_data(ha, scp, (char*)&sd, sizeof(gdth_sense_data));$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1923: FILE: drivers/scsi/gdth.c:2437:
+        gdth_copy_internal_data(ha, scp, (char*)&sd, sizeof(gdth_sense_data));

ERROR:CODE_INDENT: code indent should use tabs where possible
#1932: FILE: drivers/scsi/gdth.c:2449:
+        gdth_copy_internal_data(ha, scp, (char*)&mpd, sizeof(gdth_modep_data));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1932: FILE: drivers/scsi/gdth.c:2449:
+        gdth_copy_internal_data(ha, scp, (char*)&mpd, sizeof(gdth_modep_data));$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1932: FILE: drivers/scsi/gdth.c:2449:
+        gdth_copy_internal_data(ha, scp, (char*)&mpd, sizeof(gdth_modep_data));

ERROR:CODE_INDENT: code indent should use tabs where possible
#1941: FILE: drivers/scsi/gdth.c:2459:
+        gdth_copy_internal_data(ha, scp, (char*)&rdc, sizeof(gdth_rdcap_data));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1941: FILE: drivers/scsi/gdth.c:2459:
+        gdth_copy_internal_data(ha, scp, (char*)&rdc, sizeof(gdth_rdcap_data));$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1941: FILE: drivers/scsi/gdth.c:2459:
+        gdth_copy_internal_data(ha, scp, (char*)&rdc, sizeof(gdth_rdcap_data));

ERROR:CODE_INDENT: code indent should use tabs where possible
#1950: FILE: drivers/scsi/gdth.c:2471:
+                                                 sizeof(gdth_rdcap16_data));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1950: FILE: drivers/scsi/gdth.c:2471:
+                                                 sizeof(gdth_rdcap16_data));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1958: FILE: drivers/scsi/gdth.c:2841:
+    struct gdth_cmndinfo *cmndinfo = gdth_cmnd_priv(scp);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1967: FILE: drivers/scsi/gdth.c:2850:
+    *cmdp = *cmndinfo->internal_cmd_str;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1975: FILE: drivers/scsi/gdth.c:3783:
+    BUG_ON(list_empty(&gdth_instances));$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1975: FILE: drivers/scsi/gdth.c:3783:
+    BUG_ON(list_empty(&gdth_instances));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'gdth_halt', this function's name, in a string
#2050: FILE: drivers/scsi/gdth.c:5130:
+	TRACE2(("gdth_halt() event %d\n", (int)event));

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2061: FILE: drivers/scsi/gdth.c:5141:
+    gdth_halt, NULL, 0$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2104: FILE: drivers/scsi/gdth.h:918:
+        gdth_cmd_str *internal_cmd_str;         /* crier for internal messages*/$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2104: FILE: drivers/scsi/gdth.h:918:
+        gdth_cmd_str *internal_cmd_str;         /* crier for internal messages*/$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2287: FILE: drivers/spi/pxa2xx_spi.c:1006:
+	 * struct spi_device.mode[s], including SPI_CS_HIGH */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2291: FILE: drivers/spi/pxa2xx_spi.c:1010:
+	 * requests and interrupts, without changing any mode bits */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2320: FILE: drivers/usb/serial/ftdi_sio.c:313:
+static int   ftdi_mtxorb_hack_setup	(struct usb_serial *serial);

CHECK:CAMELCASE: Avoid CamelCase: <wMaxPacketSize>
#2365: FILE: drivers/usb/serial/ftdi_sio.c:1321:
+	if (ep->enabled && ep_desc->wMaxPacketSize == 0) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2414: FILE: drivers/usb/storage/protocol.c:254:
+	buflen = usb_stor_access_xfer_buf(buffer, buflen, srb, &sg, &offset,
 			TO_XFER_BUF);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2474: FILE: fs/ecryptfs/mmap.c:285:
+			&ecryptfs_inode_to_private(

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2478: FILE: fs/ecryptfs/mmap.c:289:
+		if (!(crypt_stat->flags & ECRYPTFS_ENCRYPTED)
+		    || (crypt_stat->flags & ECRYPTFS_NEW_FILE)) {

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2479: FILE: fs/ecryptfs/mmap.c:290:
+			rc = ecryptfs_read_lower_page_segment(

CHECK:BRACES: braces {} should be used on all arms of this statement
#2482: FILE: fs/ecryptfs/mmap.c:293:
+			if (rc) {
[...]
+			} else
[...]

WARNING:TYPO_SPELLING: 'attemping' may be misspelled - perhaps 'attempting'?
#2483: FILE: fs/ecryptfs/mmap.c:294:
+				printk(KERN_ERR "%s: Error attemping to read "
 				                           ^^^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2483: FILE: fs/ecryptfs/mmap.c:294:
+				printk(KERN_ERR "%s: Error attemping to read "

WARNING:SPLIT_STRING: quoted string split across lines
#2484: FILE: fs/ecryptfs/mmap.c:295:
+				printk(KERN_ERR "%s: Error attemping to read "
+				       "lower page segment; rc = [%d]\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2485: FILE: fs/ecryptfs/mmap.c:296:
+				       __FUNCTION__, rc);

CHECK:BRACES: Unbalanced braces around else statement
#2488: FILE: fs/ecryptfs/mmap.c:299:
+			} else

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2492: FILE: fs/ecryptfs/mmap.c:303:
+				rc = ecryptfs_copy_up_encrypted_with_header(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2495: FILE: fs/ecryptfs/mmap.c:306:
+					printk(KERN_ERR "%s: Error attempting "

WARNING:SPLIT_STRING: quoted string split across lines
#2496: FILE: fs/ecryptfs/mmap.c:307:
+					printk(KERN_ERR "%s: Error attempting "
+					       "to copy the encrypted content "

WARNING:SPLIT_STRING: quoted string split across lines
#2497: FILE: fs/ecryptfs/mmap.c:308:
+					       "to copy the encrypted content "
+					       "from the lower file whilst "

WARNING:SPLIT_STRING: quoted string split across lines
#2498: FILE: fs/ecryptfs/mmap.c:309:
+					       "from the lower file whilst "
+					       "inserting the metadata from "

WARNING:SPLIT_STRING: quoted string split across lines
#2499: FILE: fs/ecryptfs/mmap.c:310:
+					       "inserting the metadata from "
+					       "the xattr into the header; rc "

WARNING:SPLIT_STRING: quoted string split across lines
#2500: FILE: fs/ecryptfs/mmap.c:311:
+					       "the xattr into the header; rc "
+					       "= [%d]\n", __FUNCTION__, rc);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2500: FILE: fs/ecryptfs/mmap.c:311:
+					       "= [%d]\n", __FUNCTION__, rc);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2506: FILE: fs/ecryptfs/mmap.c:317:
+				rc = ecryptfs_read_lower_page_segment(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2510: FILE: fs/ecryptfs/mmap.c:321:
+					printk(KERN_ERR "%s: Error reading "

WARNING:SPLIT_STRING: quoted string split across lines
#2511: FILE: fs/ecryptfs/mmap.c:322:
+					printk(KERN_ERR "%s: Error reading "
+					       "page; rc = [%d]\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2512: FILE: fs/ecryptfs/mmap.c:323:
+					       __FUNCTION__, rc);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2521: FILE: fs/ecryptfs/mmap.c:332:
+				printk(KERN_ERR "%s: Error decrypting page "

WARNING:SPLIT_STRING: quoted string split across lines
#2522: FILE: fs/ecryptfs/mmap.c:333:
+				printk(KERN_ERR "%s: Error decrypting page "
+				       "at index [%ld]; rc = [%d]\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2523: FILE: fs/ecryptfs/mmap.c:334:
+				       __FUNCTION__, page->index, rc);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2538: FILE: fs/ecryptfs/mmap.c:343:
+	 * Note, this will increase i_size. */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2545: FILE: fs/ecryptfs/mmap.c:349:
+				printk(KERN_ERR "%s: Error on attempt to "

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2548: FILE: fs/ecryptfs/mmap.c:351:
+				       " rc = [%d]\n", __FUNCTION__,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2561: FILE: fs/ecryptfs/mmap.c:358:
+	 * of page?  Zero it out. */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'from != 0'
#2562: FILE: fs/ecryptfs/mmap.c:359:
+	if ((i_size_read(page->mapping->host) == prev_page_end_size)
+	    && (from != 0))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2563: FILE: fs/ecryptfs/mmap.c:360:
+	if ((i_size_read(page->mapping->host) == prev_page_end_size)
+	    && (from != 0))

CHECK:BIT_MACRO: Prefer using the BIT macro
#2680: FILE: include/asm-arm/arch-pxa/pxa-regs.h:1672:
+#define SSCR1_IFS		(1 << 16)	/* Invert Frame Signal */

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2693: FILE: include/asm-x86/apic_32.h:112:
+extern void enable_NMI_through_LVT0(void);

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#2706: FILE: include/asm-x86/futex_32.h:31:
+"2:	lock ; cmpxchgl %3, %2\n\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2724: FILE: include/asm-x86/futex_32.h:114:
+		"1:	lock ; cmpxchgl %3, %1			\n"

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#2737: FILE: include/asm-x86/futex_64.h:30:
+"2:	lock ; cmpxchgl %3, %2\n\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2755: FILE: include/asm-x86/futex_64.h:104:
+		"1:	lock ; cmpxchgl %3, %1			\n"

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2784: FILE: include/asm-x86/processor_32.h:717:
+      defined(CONFIG_MCORE2) || defined(CONFIG_PENTIUM4)) && \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2785: FILE: include/asm-x86/processor_32.h:718:
+      !defined(CONFIG_X86_GENERIC)$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2821: FILE: include/linux/irq.h:370:
+extern void set_irq_noprobe(unsigned int irq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2822: FILE: include/linux/irq.h:371:
+extern void set_irq_probe(unsigned int irq);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2836: FILE: include/linux/moduleparam.h:66:
+/* On alpha, ia64 and ppc64 relocations to global data cannot go into
+   read-only sections (which is part of respective UNIX ABI on these

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2838: FILE: include/linux/moduleparam.h:68:
+   with some compilers. */

CHECK:SPACING: No space is necessary after a cast
#2866: FILE: include/net/inet_sock.h:178:
+	return jhash_3words((__force __u32) laddr,

CHECK:SPACING: No space is necessary after a cast
#2867: FILE: include/net/inet_sock.h:179:
+			    (__force __u32) faddr,

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#2898: FILE: kernel/futex.c:1862:
+		return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#2907: FILE: kernel/futex.c:1888:
+		return -ENOSYS;

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#2927: FILE: kernel/futex.c:2049:
+	int ret = -ENOSYS;

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#3012: FILE: kernel/futex_compat.c:122:
+		return -ENOSYS;

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#3022: FILE: kernel/futex_compat.c:140:
+		return -ENOSYS;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3042: FILE: kernel/irq/chip.c:617:
+		printk(KERN_ERR "Trying to mark IRQ%d non-probeable\n", irq);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3060: FILE: kernel/irq/chip.c:635:
+		printk(KERN_ERR "Trying to mark IRQ%d probeable\n", irq);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3200: FILE: mm/filemap.c:1730:
+	BUG_ON(i->count < bytes);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3220: FILE: mm/filemap.c:1747:
+			BUG_ON(!i->count || i->count < copy);

WARNING:SPLIT_STRING: quoted string split across lines
#3492: FILE: net/ipv4/netfilter/ip_queue.c:357:
 				printk(KERN_WARNING "ip_queue: error "
+				      "in mangle, dropping packet\n");

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#3664: FILE: net/netfilter/xt_time.c:99:
+	/*
+	 * 1970-01-01 (w=0) was a Thursday (4).

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000304044.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 33 errors, 67 warnings, 36 checks, 3028 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000304044.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
