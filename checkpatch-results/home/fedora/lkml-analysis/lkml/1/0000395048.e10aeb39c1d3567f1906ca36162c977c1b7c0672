CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#163: FILE: include/linux/rcuclassic.h:89:
+extern void FASTCALL(call_rcu_classic(struct rcu_head *head,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#164: FILE: include/linux/rcuclassic.h:90:
+extern void FASTCALL(call_rcu_classic(struct rcu_head *head,
+		     void (*func)(struct rcu_head *head)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#192: FILE: include/linux/rcupdate.h:233:
+extern long rcu_batches_completed(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#193: FILE: include/linux/rcupdate.h:234:
+extern long rcu_batches_completed_bh(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#194: FILE: include/linux/rcupdate.h:235:
+extern void rcu_check_callbacks(int cpu, int user);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#195: FILE: include/linux/rcupdate.h:236:
+extern void rcu_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#196: FILE: include/linux/rcupdate.h:237:
+extern int  rcu_needs_cpu(int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#197: FILE: include/linux/rcupdate.h:238:
+extern int  rcu_pending(int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#199: FILE: include/linux/rcupdate.h:240:
+extern void rcu_restart_cpu(int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#238: FILE: include/linux/rcupreempt.h:51:
+extern void FASTCALL(call_rcu_classic(struct rcu_head *head,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#239: FILE: include/linux/rcupreempt.h:52:
+extern void FASTCALL(call_rcu_classic(struct rcu_head *head,
+		     void (*func)(struct rcu_head *head)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#240: FILE: include/linux/rcupreempt.h:53:
+extern void FASTCALL(call_rcu_preempt(struct rcu_head *head,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#241: FILE: include/linux/rcupreempt.h:54:
+extern void FASTCALL(call_rcu_preempt(struct rcu_head *head,
+		     void (*func)(struct rcu_head *head)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#242: FILE: include/linux/rcupreempt.h:55:
+extern void __rcu_read_lock(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#243: FILE: include/linux/rcupreempt.h:56:
+extern void __rcu_read_unlock(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#249: FILE: include/linux/rcupreempt.h:58:
+extern void rcu_advance_callbacks_rt(int cpu, int user);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#250: FILE: include/linux/rcupreempt.h:59:
+extern void rcu_check_callbacks_rt(int cpu, int user);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#251: FILE: include/linux/rcupreempt.h:60:
+extern void rcu_init_rt(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#252: FILE: include/linux/rcupreempt.h:61:
+extern int  rcu_needs_cpu_rt(int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#253: FILE: include/linux/rcupreempt.h:62:
+extern int  rcu_pending_rt(int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#255: FILE: include/linux/rcupreempt.h:64:
+extern void rcu_process_callbacks_rt(struct softirq_action *unused);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#282: FILE: kernel/rcuclassic.c:51:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#293: FILE: kernel/rcuclassic.c:62:
+^I                         /* for current batch to proceed.        */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#299: FILE: kernel/rcuclassic.c:68:
+        return (a - b) < 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#299: FILE: kernel/rcuclassic.c:68:
+        return (a - b) < 0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#314: FILE: kernel/rcuclassic.c:83:
+^Ilong  ^I       ^Ibatch;           /* Batch # for current RCU batch */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#317: FILE: kernel/rcuclassic.c:86:
+^Ilong            qlen; ^I ^I /* # of queued callbacks */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#413: FILE: kernel/rcuclassic.c:426:
+ * This does the RCU processing work from softirq context. $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#672: FILE: kernel/rcupreempt.c:735:
+EXPORT_SYMBOL_GPL(call_rcu_preempt);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000395048.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 4 warnings, 22 checks, 556 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000395048.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
