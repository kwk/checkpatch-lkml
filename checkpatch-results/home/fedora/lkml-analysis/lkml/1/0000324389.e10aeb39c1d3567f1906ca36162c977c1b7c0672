WARNING:TYPO_SPELLING: 'consit' may be misspelled - perhaps 'consist'?
#36: 
The reverse maps need to consit of references to vma f.e.
                         ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#49: FILE: Documentation/mmu_notifier/skeleton_rmap.c:1:
+#include <linux/mm.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#60: FILE: Documentation/mmu_notifier/skeleton_rmap.c:12:
+ * ^I^IChristoph Lameter <clameter@sgi.com>$

WARNING:TYPO_SPELLING: 'invidual' may be misspelled - perhaps 'individual'?
#73: FILE: Documentation/mmu_notifier/skeleton_rmap.c:25:
+	spinlock_t lock;	/* Protects counter and invidual zaps */
 	                	                        ^^^^^^^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#77: FILE: Documentation/mmu_notifier/skeleton_rmap.c:29:
+       struct list_head list;^I/* rmap list of my_mmu structs */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#78: FILE: Documentation/mmu_notifier/skeleton_rmap.c:30:
+       unsigned long base;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#85: FILE: Documentation/mmu_notifier/skeleton_rmap.c:37:
+static void my_mmu_insert_page(struct my_mmu *m,
+		unsigned long address, unsigned long pfn)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#88: FILE: Documentation/mmu_notifier/skeleton_rmap.c:40:
+	printk(KERN_INFO "insert page %p address=%lx pfn=%ld\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#89: FILE: Documentation/mmu_notifier/skeleton_rmap.c:41:
+	printk(KERN_INFO "insert page %p address=%lx pfn=%ld\n",
+							m, address, pfn);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#96: FILE: Documentation/mmu_notifier/skeleton_rmap.c:48:
+static void my_mmu_zap_range(struct my_mmu *m,
+	unsigned long start, unsigned long end, int atomic)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#99: FILE: Documentation/mmu_notifier/skeleton_rmap.c:51:
+	printk(KERN_INFO "zap range %p address=%lx-%lx atomic=%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#100: FILE: Documentation/mmu_notifier/skeleton_rmap.c:52:
+	printk(KERN_INFO "zap range %p address=%lx-%lx atomic=%d\n",
+						m, start, end, atomic);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#110: FILE: Documentation/mmu_notifier/skeleton_rmap.c:62:
+	printk(KERN_INFO "zap page %p address=%lx\n", m, address);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#131: FILE: Documentation/mmu_notifier/skeleton_rmap.c:83:
+static void my_mmu_invalidate_range_begin(struct mmu_notifier *mn,
+	struct mm_struct *mm, unsigned long start, unsigned long end,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#141: FILE: Documentation/mmu_notifier/skeleton_rmap.c:93:
+static void my_mmu_invalidate_range_end(struct mmu_notifier *mn,
+	struct mm_struct *mm, unsigned long start, unsigned long end,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#158: FILE: Documentation/mmu_notifier/skeleton_rmap.c:110:
+struct page *my_mmu_populate_page(struct my_mmu *m,
+	struct vm_area_struct *vma,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#173: FILE: Documentation/mmu_notifier/skeleton_rmap.c:125:
+	err = get_user_pages(current, vma->vm_mm, address, 1,
+						write, 1, &page, NULL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#211: FILE: Documentation/mmu_notifier/skeleton_rmap.c:163:
+	printk(KERN_INFO "MMU Notifier terminating\n");

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*m)...) over kzalloc(sizeof(struct my_mmu)...)
#231: FILE: Documentation/mmu_notifier/skeleton_rmap.c:183:
+	struct my_mmu *m = kzalloc(sizeof(struct my_mmu), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:LINE_SPACING: Please don't use multiple blank lines
#260: FILE: Documentation/mmu_notifier/skeleton_rmap.c:212:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#267: FILE: Documentation/mmu_notifier/skeleton_rmap.c:219:
+	printk(KERN_INFO "Sleeping invalidate_page %p address=%lx\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#268: FILE: Documentation/mmu_notifier/skeleton_rmap.c:220:
+                                                               m, address);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#268: FILE: Documentation/mmu_notifier/skeleton_rmap.c:220:
+	printk(KERN_INFO "Sleeping invalidate_page %p address=%lx\n",
+                                                               m, address);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#268: FILE: Documentation/mmu_notifier/skeleton_rmap.c:220:
+                                                               m, address);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#283: FILE: Documentation/mmu_notifier/skeleton_rmap.c:235:
+static void my_mmu_rmap_invalidate_page(struct mmu_rmap_notifier *mrn,
+							struct page *page)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#287: FILE: Documentation/mmu_notifier/skeleton_rmap.c:239:
+	BUG_ON(!PageLocked(page));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000324389.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 13 warnings, 12 checks, 265 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000324389.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
