WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#25: 
Reimplementation of the cond calls which uses a hash table to hold the active

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#60: FILE: kernel/module.c:78:
+ * Protected by module_mutex. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:BIT_MACRO: Prefer using the BIT macro
#62: FILE: kernel/module.c:80:
+#define COND_CALL_TABLE_SIZE (1 << COND_CALL_HASH_BITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#80: FILE: kernel/module.c:325:
+ * Returns 1 if present, 0 if not. */

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#89: FILE: kernel/module.c:334:
+	head = &cond_call_table[hash & ((1 << COND_CALL_HASH_BITS)-1)];
 	                                                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#105: FILE: kernel/module.c:350:
+	head = &cond_call_table[hash & ((1 << COND_CALL_HASH_BITS)-1)];
 	                                                          ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#110: FILE: kernel/module.c:355:
+	 * cause some memory fragmentation if overused. */

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*e)...) over kmalloc(sizeof(struct cond_call_entry)...)
#111: FILE: kernel/module.c:356:
+	e = kmalloc(sizeof(struct cond_call_entry) + len + 1, GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#120: FILE: kernel/module.c:365:
+ * held. */

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#130: FILE: kernel/module.c:375:
+	head = &cond_call_table[hash & ((1 << COND_CALL_HASH_BITS)-1)];
 	                                                          ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#161: FILE: kernel/module.c:407:
+ * upon module load. */

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#178: FILE: kernel/module.c:414:
+		iter < mod->cond_calls+mod->num_cond_calls; iter++) {
 		                      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#189: FILE: kernel/module.c:423:
+static void _cond_call_arm_range(const char *name,
 	const struct __cond_call_struct *begin,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#209: FILE: kernel/module.c:436:
+static void _cond_call_disarm_range(const char *name,
 	const struct __cond_call_struct *begin,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#257: FILE: kernel/module.c:473:
+ * Returns 1 if enabled, 0 if disabled. */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#288: FILE: kernel/module.c:497:
+	_cond_call_arm_range(name,
 			__start___cond_call, __stop___cond_call);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#295: FILE: kernel/module.c:503:
+		_cond_call_arm_range(name,
 			mod->cond_calls, mod->cond_calls+mod->num_cond_calls);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#327: FILE: kernel/module.c:528:
+	_cond_call_disarm_range(name,
 			__start___cond_call, __stop___cond_call);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#334: FILE: kernel/module.c:534:
+		_cond_call_disarm_range(name,
 			mod->cond_calls, mod->cond_calls+mod->num_cond_calls);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#384: FILE: include/linux/condcall.h:84:
+extern void cond_call_disarm(const char *name);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000424888.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 7 warnings, 13 checks, 331 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000424888.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
