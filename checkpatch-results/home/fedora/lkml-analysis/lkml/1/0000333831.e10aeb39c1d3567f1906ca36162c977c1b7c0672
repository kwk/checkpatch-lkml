WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#78: 
 swapper-0     1d.s3    0us+: _spin_lock_irqsave+0x2a/0xb7 (e1000_update_stats+0x47/0x64c [e1000])

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#231: FILE: include/linux/irqflags.h:16:
+  extern void trace_hardirqs_on_caller(unsigned long ip);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#231: FILE: include/linux/irqflags.h:16:
+  extern void trace_hardirqs_on_caller(unsigned long ip);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#232: FILE: include/linux/irqflags.h:17:
+  extern void trace_hardirqs_off_caller(unsigned long ip);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#232: FILE: include/linux/irqflags.h:17:
+  extern void trace_hardirqs_off_caller(unsigned long ip);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#235: FILE: include/linux/irqflags.h:20:
+  extern void trace_hardirqs_on(void);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#235: FILE: include/linux/irqflags.h:20:
+  extern void trace_hardirqs_on(void);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#236: FILE: include/linux/irqflags.h:21:
+  extern void trace_hardirqs_off(void);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#236: FILE: include/linux/irqflags.h:21:
+  extern void trace_hardirqs_off(void);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#237: FILE: include/linux/irqflags.h:22:
+  static inline void notrace __trace_hardirqs_on(void)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#238: FILE: include/linux/irqflags.h:23:
+  {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#240: FILE: include/linux/irqflags.h:25:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#241: FILE: include/linux/irqflags.h:26:
+  static inline void notrace __trace_hardirqs_off(void)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#242: FILE: include/linux/irqflags.h:27:
+  {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#244: FILE: include/linux/irqflags.h:29:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#262: FILE: include/linux/irqflags.h:58:
+ extern void stop_critical_timings(void);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#262: FILE: include/linux/irqflags.h:58:
+ extern void stop_critical_timings(void);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#263: FILE: include/linux/irqflags.h:59:
+ extern void start_critical_timings(void);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#263: FILE: include/linux/irqflags.h:59:
+ extern void start_critical_timings(void);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#324: FILE: include/linux/mcount.h:35:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#343: FILE: include/linux/mcount.h:54:
+  extern void notrace time_hardirqs_on(unsigned long a0, unsigned long a1);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#343: FILE: include/linux/mcount.h:54:
+  extern void notrace time_hardirqs_on(unsigned long a0, unsigned long a1);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#344: FILE: include/linux/mcount.h:55:
+  extern void notrace time_hardirqs_off(unsigned long a0, unsigned long a1);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#344: FILE: include/linux/mcount.h:55:
+  extern void notrace time_hardirqs_off(unsigned long a0, unsigned long a1);

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#396: FILE: kernel/lockdep.c:2061:
+void notrace trace_hardirqs_on(void) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#401: FILE: kernel/lockdep.c:2066:
+void notrace trace_hardirqs_off(void) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#425: FILE: kernel/lockdep.c:2099:
+void notrace trace_hardirqs_off(void) {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#477: FILE: lib/tracing/trace_irqsoff.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'criticall' may be misspelled - perhaps 'critical'?
#478: FILE: lib/tracing/trace_irqsoff.c:2:
+ * trace irqs off criticall timings
                   ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#510: FILE: lib/tracing/trace_irqsoff.c:34:
+	trace_nr_entries = simple_strtoul(str, &str, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#513: FILE: lib/tracing/trace_irqsoff.c:37:
+__setup("trace_irq_entries=", set_nr_entries);

WARNING:TYPO_SPELLING: 'doesnt' may be misspelled - perhaps 'doesn't'?
#525: FILE: lib/tracing/trace_irqsoff.c:49:
+ * and what happens together happens separately as well, so this doesnt
                                                                  ^^^^^^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#606: FILE: lib/tracing/trace_irqsoff.c:130:
+	delta = T1-T0;
 	          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#621: FILE: lib/tracing/trace_irqsoff.c:145:
+	delta = T2-T0;
 	          ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#638: FILE: lib/tracing/trace_irqsoff.c:162:
+		printk(KERN_INFO "(%16s-%-5d|#%d): %lu us critical section "

WARNING:SPLIT_STRING: quoted string split across lines
#639: FILE: lib/tracing/trace_irqsoff.c:163:
+		printk(KERN_INFO "(%16s-%-5d|#%d): %lu us critical section "
+		       "violates %lu us threshold.\n"

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#645: FILE: lib/tracing/trace_irqsoff.c:169:
+		printk(KERN_INFO "(%16s-%-5d|#%d): new %lu us maximum-latency "

WARNING:SPLIT_STRING: quoted string split across lines
#646: FILE: lib/tracing/trace_irqsoff.c:170:
+		printk(KERN_INFO "(%16s-%-5d|#%d): new %lu us maximum-latency "
+		       "critical section.\n => started at timestamp %lu: ",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#652: FILE: lib/tracing/trace_irqsoff.c:176:
+	printk(KERN_CONT " =>   ended at timestamp %lu: ", t1);

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#652: FILE: lib/tracing/trace_irqsoff.c:176:
+	printk(KERN_CONT " =>   ended at timestamp %lu: ", t1);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#656: FILE: lib/tracing/trace_irqsoff.c:180:
+	printk(KERN_CONT " =>   dump-end timestamp %lu\n\n", t1);

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#656: FILE: lib/tracing/trace_irqsoff.c:180:
+	printk(KERN_CONT " =>   dump-end timestamp %lu\n\n", t1);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#830: FILE: lib/tracing/trace_irqsoff.c:354:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#833: FILE: lib/tracing/trace_irqsoff.c:357:
+static void notrace irqsoff_trace_call(unsigned long ip,
+					unsigned long parent_ip)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#859: FILE: lib/tracing/trace_irqsoff.c:383:
+static struct mcount_ops trace_ops __read_mostly =
+{

WARNING:SPLIT_STRING: quoted string split across lines
#906: FILE: lib/tracing/trace_irqsoff.c:430:
+		pr_warning("Could not create debugfs"
+			   " 'preempt_fn_trace' entry\n");

WARNING:SPLIT_STRING: quoted string split across lines
#913: FILE: lib/tracing/trace_irqsoff.c:437:
+		pr_warning("Could not create debugfs"
+			   " 'preempt_max_latency' entry\n");

WARNING:SPLIT_STRING: quoted string split across lines
#919: FILE: lib/tracing/trace_irqsoff.c:443:
+		pr_warning("Could not create debugfs"
+			   " 'preempt_threash' entry\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!array"
#955: FILE: lib/tracing/trace_irqsoff.c:479:
+		if (array == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#956: FILE: lib/tracing/trace_irqsoff.c:480:
+			printk(KERN_ERR "irqsoff tracer: failed to allocate"

WARNING:SPLIT_STRING: quoted string split across lines
#957: FILE: lib/tracing/trace_irqsoff.c:481:
+			printk(KERN_ERR "irqsoff tracer: failed to allocate"
+			       " %ld bytes for trace buffer!\n", size);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!array"
#965: FILE: lib/tracing/trace_irqsoff.c:489:
+	if (array == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#966: FILE: lib/tracing/trace_irqsoff.c:490:
+		printk(KERN_ERR "irqsoff tracer: failed to allocate"

WARNING:SPLIT_STRING: quoted string split across lines
#967: FILE: lib/tracing/trace_irqsoff.c:491:
+		printk(KERN_ERR "irqsoff tracer: failed to allocate"
+		       " %ld bytes for trace buffer!\n", size);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1014: FILE: lib/tracing/tracer.c:734:
+static ssize_t tracing_usecs_read(struct file *filp, char __user *ubuf,
                                                ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1015: FILE: lib/tracing/tracer.c:735:
+static ssize_t tracing_usecs_read(struct file *filp, char __user *ubuf,
+					size_t cnt, loff_t *ppos)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1028: FILE: lib/tracing/tracer.c:748:
+static ssize_t tracing_usecs_write(struct file *filp,
                                                 ^^^^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1028: FILE: lib/tracing/tracer.c:748:
+}
+static ssize_t tracing_usecs_write(struct file *filp,

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#1044: FILE: lib/tracing/tracer.c:764:
+	val = simple_strtoul(buf, NULL, 10);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1051: FILE: lib/tracing/tracer.c:771:
+struct file_operations tracing_usec_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1068: FILE: lib/tracing/tracer.h:101:
+extern struct file_operations tracing_usec_fops;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000333831.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 39 warnings, 18 checks, 856 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000333831.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
