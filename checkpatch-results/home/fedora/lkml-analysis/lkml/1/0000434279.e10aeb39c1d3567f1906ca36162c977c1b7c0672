WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#44: 
AFS writeback attempts to batch writes into as chunks as large as it can manage

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#59: 
Signed-Off-By: David Howells <dhowells@redhat.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

CHECK:SPACING: No space is necessary after a cast
#200: FILE: fs/afs/file.c:286:
+		wb = (struct afs_writeback *) page_private(page);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "wb"
#201: FILE: fs/afs/file.c:287:
+		ASSERT(wb != NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:CAMELCASE: Avoid CamelCase: <xdr_encode_AFS_StoreStatus>
#252: FILE: fs/afs/fsclient.c:169:
+static void xdr_encode_AFS_StoreStatus(__be32 **_bp, struct iattr *attr)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:TRAILING_WHITESPACE: trailing whitespace
#282: FILE: fs/afs/fsclient.c:199:
+^I*bp++ = htonl(mode);^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <xdr_decode_AFSFetchStatus>
#296: FILE: fs/afs/fsclient.c:224:
+	xdr_decode_AFSFetchStatus(&bp, &vnode->status, vnode, NULL);

CHECK:CAMELCASE: Avoid CamelCase: <afs_RXFSStoreData>
#407: FILE: fs/afs/fsclient.c:1028:
+static const struct afs_call_type afs_RXFSStoreData = {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#419: FILE: fs/afs/fsclient.c:1040:
+		      unsigned offset, unsigned to,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#419: FILE: fs/afs/fsclient.c:1040:
+		      unsigned offset, unsigned to,

CHECK:SPACING: No space is necessary after a cast
#441: FILE: fs/afs/fsclient.c:1062:
+	       (unsigned long long) size, (unsigned long long) pos,

CHECK:SPACING: No space is necessary after a cast
#442: FILE: fs/afs/fsclient.c:1063:
+	       (unsigned long long) i_size);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#444: FILE: fs/afs/fsclient.c:1065:
+	BUG_ON(i_size > 0xffffffff); // TODO: use 64-bit store

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:CAMELCASE: Avoid CamelCase: <afs_RXFSStoreStatus>
#526: FILE: fs/afs/fsclient.c:1147:
+static const struct afs_call_type afs_RXFSStoreStatus = {

CHECK:CAMELCASE: Avoid CamelCase: <afs_RXFSStoreData_as_Status>
#533: FILE: fs/afs/fsclient.c:1154:
+static const struct afs_call_type afs_RXFSStoreData_as_Status = {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#729: FILE: fs/afs/internal.h:104:
+	unsigned		first_offset;	/* offset into mapping[first] */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#730: FILE: fs/afs/internal.h:105:
+	unsigned		last_to;	/* amount of mapping[last] */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#759: FILE: fs/afs/internal.h:146:
+	unsigned		offset_first;	/* offset into first page of start of write */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#760: FILE: fs/afs/internal.h:147:
+	unsigned		to_last;	/* offset into last page of end of write */

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#770: FILE: fs/afs/internal.h:157:
+	} state __attribute__((packed));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#798: FILE: fs/afs/internal.h:503:
+extern int afs_fs_store_data(struct afs_server *, struct afs_writeback *,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_server *' should also have an identifier name
#798: FILE: fs/afs/internal.h:503:
+extern int afs_fs_store_data(struct afs_server *, struct afs_writeback *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_writeback *' should also have an identifier name
#798: FILE: fs/afs/internal.h:503:
+extern int afs_fs_store_data(struct afs_server *, struct afs_writeback *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'pgoff_t' should also have an identifier name
#798: FILE: fs/afs/internal.h:503:
+extern int afs_fs_store_data(struct afs_server *, struct afs_writeback *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'pgoff_t' should also have an identifier name
#798: FILE: fs/afs/internal.h:503:
+extern int afs_fs_store_data(struct afs_server *, struct afs_writeback *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned' should also have an identifier name
#798: FILE: fs/afs/internal.h:503:
+extern int afs_fs_store_data(struct afs_server *, struct afs_writeback *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned' should also have an identifier name
#798: FILE: fs/afs/internal.h:503:
+extern int afs_fs_store_data(struct afs_server *, struct afs_writeback *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct afs_wait_mode *' should also have an identifier name
#798: FILE: fs/afs/internal.h:503:
+extern int afs_fs_store_data(struct afs_server *, struct afs_writeback *,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#799: FILE: fs/afs/internal.h:504:
+			     pgoff_t, pgoff_t, unsigned, unsigned,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#799: FILE: fs/afs/internal.h:504:
+			     pgoff_t, pgoff_t, unsigned, unsigned,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#801: FILE: fs/afs/internal.h:506:
+extern int afs_fs_setattr(struct afs_server *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_server *' should also have an identifier name
#801: FILE: fs/afs/internal.h:506:
+extern int afs_fs_setattr(struct afs_server *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct key *' should also have an identifier name
#801: FILE: fs/afs/internal.h:506:
+extern int afs_fs_setattr(struct afs_server *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_vnode *' should also have an identifier name
#801: FILE: fs/afs/internal.h:506:
+extern int afs_fs_setattr(struct afs_server *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct iattr *' should also have an identifier name
#801: FILE: fs/afs/internal.h:506:
+extern int afs_fs_setattr(struct afs_server *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct afs_wait_mode *' should also have an identifier name
#801: FILE: fs/afs/internal.h:506:
+extern int afs_fs_setattr(struct afs_server *, struct key *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#811: FILE: fs/afs/internal.h:519:
+extern int afs_setattr(struct dentry *, struct iattr *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#811: FILE: fs/afs/internal.h:519:
+extern int afs_setattr(struct dentry *, struct iattr *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct iattr *' should also have an identifier name
#811: FILE: fs/afs/internal.h:519:
+extern int afs_setattr(struct dentry *, struct iattr *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#819: FILE: fs/afs/internal.h:673:
+extern int afs_vnode_store_data(struct afs_writeback *, pgoff_t, pgoff_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_writeback *' should also have an identifier name
#819: FILE: fs/afs/internal.h:673:
+extern int afs_vnode_store_data(struct afs_writeback *, pgoff_t, pgoff_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'pgoff_t' should also have an identifier name
#819: FILE: fs/afs/internal.h:673:
+extern int afs_vnode_store_data(struct afs_writeback *, pgoff_t, pgoff_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'pgoff_t' should also have an identifier name
#819: FILE: fs/afs/internal.h:673:
+extern int afs_vnode_store_data(struct afs_writeback *, pgoff_t, pgoff_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned' should also have an identifier name
#819: FILE: fs/afs/internal.h:673:
+extern int afs_vnode_store_data(struct afs_writeback *, pgoff_t, pgoff_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned' should also have an identifier name
#819: FILE: fs/afs/internal.h:673:
+extern int afs_vnode_store_data(struct afs_writeback *, pgoff_t, pgoff_t,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#820: FILE: fs/afs/internal.h:674:
+				unsigned, unsigned);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#820: FILE: fs/afs/internal.h:674:
+				unsigned, unsigned);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#821: FILE: fs/afs/internal.h:675:
+extern int afs_vnode_setattr(struct afs_vnode *, struct key *, struct iattr *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_vnode *' should also have an identifier name
#821: FILE: fs/afs/internal.h:675:
+extern int afs_vnode_setattr(struct afs_vnode *, struct key *, struct iattr *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct key *' should also have an identifier name
#821: FILE: fs/afs/internal.h:675:
+extern int afs_vnode_setattr(struct afs_vnode *, struct key *, struct iattr *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct iattr *' should also have an identifier name
#821: FILE: fs/afs/internal.h:675:
+extern int afs_vnode_setattr(struct afs_vnode *, struct key *, struct iattr *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#832: FILE: fs/afs/internal.h:695:
+extern int afs_set_page_dirty(struct page *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#832: FILE: fs/afs/internal.h:695:
+extern int afs_set_page_dirty(struct page *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#833: FILE: fs/afs/internal.h:696:
+extern void afs_put_writeback(struct afs_writeback *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_writeback *' should also have an identifier name
#833: FILE: fs/afs/internal.h:696:
+extern void afs_put_writeback(struct afs_writeback *);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#834: FILE: fs/afs/internal.h:697:
+extern int afs_prepare_write(struct file *, struct page *, unsigned, unsigned);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#834: FILE: fs/afs/internal.h:697:
+extern int afs_prepare_write(struct file *, struct page *, unsigned, unsigned);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#834: FILE: fs/afs/internal.h:697:
+extern int afs_prepare_write(struct file *, struct page *, unsigned, unsigned);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#834: FILE: fs/afs/internal.h:697:
+extern int afs_prepare_write(struct file *, struct page *, unsigned, unsigned);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#834: FILE: fs/afs/internal.h:697:
+extern int afs_prepare_write(struct file *, struct page *, unsigned, unsigned);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned' should also have an identifier name
#834: FILE: fs/afs/internal.h:697:
+extern int afs_prepare_write(struct file *, struct page *, unsigned, unsigned);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned' should also have an identifier name
#834: FILE: fs/afs/internal.h:697:
+extern int afs_prepare_write(struct file *, struct page *, unsigned, unsigned);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#835: FILE: fs/afs/internal.h:698:
+extern int afs_commit_write(struct file *, struct page *, unsigned, unsigned);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#835: FILE: fs/afs/internal.h:698:
+extern int afs_commit_write(struct file *, struct page *, unsigned, unsigned);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#835: FILE: fs/afs/internal.h:698:
+extern int afs_commit_write(struct file *, struct page *, unsigned, unsigned);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#835: FILE: fs/afs/internal.h:698:
+extern int afs_commit_write(struct file *, struct page *, unsigned, unsigned);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#835: FILE: fs/afs/internal.h:698:
+extern int afs_commit_write(struct file *, struct page *, unsigned, unsigned);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned' should also have an identifier name
#835: FILE: fs/afs/internal.h:698:
+extern int afs_commit_write(struct file *, struct page *, unsigned, unsigned);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned' should also have an identifier name
#835: FILE: fs/afs/internal.h:698:
+extern int afs_commit_write(struct file *, struct page *, unsigned, unsigned);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#836: FILE: fs/afs/internal.h:699:
+extern int afs_writepage(struct page *, struct writeback_control *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#836: FILE: fs/afs/internal.h:699:
+extern int afs_writepage(struct page *, struct writeback_control *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct writeback_control *' should also have an identifier name
#836: FILE: fs/afs/internal.h:699:
+extern int afs_writepage(struct page *, struct writeback_control *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#837: FILE: fs/afs/internal.h:700:
+extern int afs_writepages(struct address_space *, struct writeback_control *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct address_space *' should also have an identifier name
#837: FILE: fs/afs/internal.h:700:
+extern int afs_writepages(struct address_space *, struct writeback_control *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct writeback_control *' should also have an identifier name
#837: FILE: fs/afs/internal.h:700:
+extern int afs_writepages(struct address_space *, struct writeback_control *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#838: FILE: fs/afs/internal.h:701:
+extern int afs_write_inode(struct inode *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#838: FILE: fs/afs/internal.h:701:
+extern int afs_write_inode(struct inode *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#838: FILE: fs/afs/internal.h:701:
+extern int afs_write_inode(struct inode *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#839: FILE: fs/afs/internal.h:702:
+extern void afs_pages_written_back(struct afs_vnode *, struct afs_call *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_vnode *' should also have an identifier name
#839: FILE: fs/afs/internal.h:702:
+extern void afs_pages_written_back(struct afs_vnode *, struct afs_call *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_call *' should also have an identifier name
#839: FILE: fs/afs/internal.h:702:
+extern void afs_pages_written_back(struct afs_vnode *, struct afs_call *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#840: FILE: fs/afs/internal.h:703:
+extern ssize_t afs_file_write(struct kiocb *, const struct iovec *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kiocb *' should also have an identifier name
#840: FILE: fs/afs/internal.h:703:
+extern ssize_t afs_file_write(struct kiocb *, const struct iovec *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct iovec *' should also have an identifier name
#840: FILE: fs/afs/internal.h:703:
+extern ssize_t afs_file_write(struct kiocb *, const struct iovec *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#840: FILE: fs/afs/internal.h:703:
+extern ssize_t afs_file_write(struct kiocb *, const struct iovec *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#840: FILE: fs/afs/internal.h:703:
+extern ssize_t afs_file_write(struct kiocb *, const struct iovec *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#842: FILE: fs/afs/internal.h:705:
+extern int afs_writeback_all(struct afs_vnode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_vnode *' should also have an identifier name
#842: FILE: fs/afs/internal.h:705:
+extern int afs_writeback_all(struct afs_vnode *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#843: FILE: fs/afs/internal.h:706:
+extern int afs_fsync(struct file *, struct dentry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#843: FILE: fs/afs/internal.h:706:
+extern int afs_fsync(struct file *, struct dentry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#843: FILE: fs/afs/internal.h:706:
+extern int afs_fsync(struct file *, struct dentry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#843: FILE: fs/afs/internal.h:706:
+extern int afs_fsync(struct file *, struct dentry *, int);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#845: FILE: fs/afs/internal.h:708:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#862: FILE: fs/afs/rxrpc.c:245:
+	unsigned count, n, loop, offset, to;

CHECK:SPACING: No space is necessary after a cast
#894: FILE: fs/afs/rxrpc.c:277:
+			msg->msg_iov = (struct iovec *) iov;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#899: FILE: fs/afs/rxrpc.c:282:
+			 * returns from sending the request */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#997: FILE: fs/afs/vnode.c:761:
+			 unsigned offset, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#997: FILE: fs/afs/vnode.c:761:
+			 unsigned offset, unsigned to)

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#1100: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1105: FILE: fs/afs/write.c:1:
+/* handling of writes to regular files and writing back to the server

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1147: FILE: fs/afs/write.c:43:
+		 * up */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1191: FILE: fs/afs/write.c:87:
+			 unsigned start, unsigned len, struct page *page)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1191: FILE: fs/afs/write.c:87:
+			 unsigned start, unsigned len, struct page *page)

WARNING:SPLIT_STRING: quoted string split across lines
#1203: FILE: fs/afs/write.c:99:
+			_debug("got NOENT from server"
+			       " - marking file deleted and stale");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1217: FILE: fs/afs/write.c:113:
+			    struct key *key, unsigned offset, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1217: FILE: fs/afs/write.c:113:
+			    struct key *key, unsigned offset, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1219: FILE: fs/afs/write.c:115:
+	unsigned eof, tail, start, stop, len;

CHECK:SPACING: No space is necessary after a cast
#1232: FILE: fs/afs/write.c:128:
+	pos = (loff_t) page->index << PAGE_SHIFT;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1247: FILE: fs/afs/write.c:143:
+		tail = eof = PAGE_SIZE;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1264: FILE: fs/afs/write.c:160:
+		 * (cover both fillers in one read if there are two) */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1283: FILE: fs/afs/write.c:179:
+		      unsigned offset, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1283: FILE: fs/afs/write.c:179:
+		      unsigned offset, unsigned to)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1298: FILE: fs/afs/write.c:194:
+	candidate->first = candidate->last = page->index;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1321: FILE: fs/afs/write.c:217:
+	 * - if so we can just join onto that one */

CHECK:SPACING: No space is necessary after a cast
#1322: FILE: fs/afs/write.c:218:
+	wb = (struct afs_writeback *) page_private(page);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1331: FILE: fs/afs/write.c:227:
+		 * append this page to */

CHECK:SPACING: No space is necessary after a cast
#1343: FILE: fs/afs/write.c:239:
+	set_page_private(page, (unsigned long) candidate);

CHECK:SPACING: No space is necessary after a cast
#1366: FILE: fs/afs/write.c:262:
+	set_page_private(page, (unsigned long) wb);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1372: FILE: fs/afs/write.c:268:
+	 * need to flush it before we can use the new context */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1398: FILE: fs/afs/write.c:294:
+		     unsigned offset, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1398: FILE: fs/afs/write.c:294:
+		     unsigned offset, unsigned to)

CHECK:SPACING: No space is necessary after a cast
#1406: FILE: fs/afs/write.c:302:
+	maybe_i_size = (loff_t) page->index << PAGE_SHIFT;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1433: FILE: fs/afs/write.c:329:
+	unsigned count, loop;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1472: FILE: fs/afs/write.c:368:
+	unsigned n, offset, to;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1480: FILE: fs/afs/write.c:376:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1482: FILE: fs/afs/write.c:378:
+		BUG();

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1486: FILE: fs/afs/write.c:382:
+	 * or we reach the end of the range */

CHECK:SPACING: No space is necessary after a cast
#1514: FILE: fs/afs/write.c:410:
+			    page_private(page) != (unsigned long) wb) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1519: FILE: fs/afs/write.c:415:
+				BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1521: FILE: fs/afs/write.c:417:
+				BUG();

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1538: FILE: fs/afs/write.c:434:
+	 * so, all the rest are unlocked */

CHECK:SPACING: No space is necessary after a cast
#1604: FILE: fs/afs/write.c:500:
+	wb = (struct afs_writeback *) page_private(page);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "wb"
#1605: FILE: fs/afs/write.c:501:
+	ASSERT(wb != NULL);

CHECK:SPACING: No space is necessary after a cast
#1672: FILE: fs/afs/write.c:568:
+		wb = (struct afs_writeback *) page_private(page);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "wb"
#1673: FILE: fs/afs/write.c:569:
+		ASSERT(wb != NULL);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1772: FILE: fs/afs/write.c:668:
+	unsigned count, loop;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "wb"
#1779: FILE: fs/afs/write.c:675:
+	ASSERT(wb != NULL);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1796: FILE: fs/afs/write.c:692:
+			struct page *page = pv.pages[loop];
+			end_page_writeback(page);

CHECK:SPACING: No space is necessary after a cast
#1797: FILE: fs/afs/write.c:693:
+			if (page_private(page) == (unsigned long) wb) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1837: FILE: fs/afs/write.c:733:
+		printk(KERN_INFO

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1903: FILE: fs/afs/write.c:799:
+	 * completed or rejected */

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000434279.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 99 warnings, 41 checks, 1782 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000434279.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
