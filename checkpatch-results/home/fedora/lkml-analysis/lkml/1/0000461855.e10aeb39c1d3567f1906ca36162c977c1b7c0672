WARNING:TYPO_SPELLING: 'incase' may be misspelled - perhaps 'in case'?
#58: 
  just incase.
       ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#92: FILE: fs/namespace.c:1445:
+static struct mnt_namespace *dup_mnt_ns(struct mnt_namespace *mnt_ns,
 		struct fs_struct *fs)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#104: FILE: fs/namespace.c:1512:
+struct mnt_namespace *copy_mnt_ns(int flags, struct mnt_namespace *ns,
+		struct fs_struct *new_fs)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#113: FILE: fs/namespace.c:1516:
+	BUG_ON(!ns);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#152: FILE: include/linux/mnt_namespace.h:17:
+extern struct mnt_namespace *copy_mnt_ns(int, struct mnt_namespace *,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#152: FILE: include/linux/mnt_namespace.h:17:
+extern struct mnt_namespace *copy_mnt_ns(int, struct mnt_namespace *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mnt_namespace *' should also have an identifier name
#152: FILE: include/linux/mnt_namespace.h:17:
+extern struct mnt_namespace *copy_mnt_ns(int, struct mnt_namespace *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fs_struct *' should also have an identifier name
#152: FILE: include/linux/mnt_namespace.h:17:
+extern struct mnt_namespace *copy_mnt_ns(int, struct mnt_namespace *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#153: FILE: include/linux/mnt_namespace.h:18:
+extern struct mnt_namespace *copy_mnt_ns(int, struct mnt_namespace *,
 		struct fs_struct *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#154: FILE: include/linux/mnt_namespace.h:19:
+extern void __put_mnt_ns(struct mnt_namespace *ns);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#187: FILE: kernel/nsproxy.c:58:
+static struct nsproxy *create_new_namespaces(int flags, struct task_struct *tsk,
+			struct fs_struct *new_fs)

WARNING:TYPO_SPELLING: 'sucess' may be misspelled - perhaps 'success'?
#303: FILE: kernel/nsproxy.c:148:
+ * On sucess, returns the new nsproxy and a reference to old nsproxy
       ^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#307: FILE: kernel/nsproxy.c:152:
+int unshare_nsproxy_namespaces(unsigned long unshare_flags,
+		struct nsproxy **new_nsp, struct fs_struct *new_fs)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#331: FILE: kernel/nsproxy.c:176:
+	*new_nsp = create_new_namespaces(unshare_flags, current,
+				new_fs ? new_fs : current->fs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#349: FILE: include/linux/utsname.h:52:
+extern struct uts_namespace *copy_utsname(int flags, struct uts_namespace *ns);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#415: FILE: kernel/utsname.c:44:
+	BUG_ON(!old_ns);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#451: FILE: include/linux/ipc.h:101:
+extern struct ipc_namespace *copy_ipcs(unsigned long flags,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#452: FILE: include/linux/ipc.h:102:
+extern struct ipc_namespace *copy_ipcs(unsigned long flags,
+		struct ipc_namespace *ns);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#456: FILE: include/linux/ipc.h:105:
+static struct ipc_namespace *copy_ipcs(unsigned long flags,
+		struct ipc_namespace *ns)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#500: FILE: ipc/util.c:92:
+	BUG_ON(!ns);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#537: FILE: include/linux/pid_namespace.h:32:
+extern struct pid_namespace *copy_pid_ns(int flags, struct pid_namespace *ns);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#558: FILE: kernel/pid.c:365:
+	BUG_ON(!old_ns);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#573: FILE: include/linux/nsproxy.h:38:
+int unshare_nsproxy_namespaces(unsigned long, struct nsproxy **,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nsproxy **' should also have an identifier name
#573: FILE: include/linux/nsproxy.h:38:
+int unshare_nsproxy_namespaces(unsigned long, struct nsproxy **,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fs_struct *' should also have an identifier name
#573: FILE: include/linux/nsproxy.h:38:
+int unshare_nsproxy_namespaces(unsigned long, struct nsproxy **,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#574: FILE: include/linux/nsproxy.h:39:
+int unshare_nsproxy_namespaces(unsigned long, struct nsproxy **,
+	struct fs_struct *);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#657: FILE: kernel/fork.c:1614:
+	if ((err = unshare_nsproxy_namespaces(unshare_flags, &new_nsproxy,

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#658: FILE: kernel/fork.c:1615:
+	if ((err = unshare_nsproxy_namespaces(unshare_flags, &new_nsproxy,
+			new_fs)))

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000461855.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 12 warnings, 15 checks, 592 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000461855.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
