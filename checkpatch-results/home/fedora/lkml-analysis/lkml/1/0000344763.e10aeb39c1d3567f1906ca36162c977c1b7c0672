CHECK:SPACING: No space is necessary after a cast
#149: FILE: fs/unionfs/xattr.c:60:
+	err = vfs_getxattr(lower_dentry, lower_mnt, (char *) name, value, size,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#159: FILE: fs/unionfs/xattr.c:94:
+			   (void *) value, size, flags, NULL);

CHECK:SPACING: No space is necessary after a cast
#168: FILE: fs/unionfs/xattr.c:124:
+	err = vfs_removexattr(lower_dentry, lower_mnt, (char *) name, NULL);

WARNING:LONG_LINE: line length of 126 exceeds 100 columns
#197: FILE: fs/xattr.c:81:
+	error = security_inode_setxattr(dentry, mnt, name, value, size, flags,						file);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#276: FILE: fs/xattr.c:271:
+	error = setxattr(nd.path.dentry, nd.path.mnt, name, value, size, flags,
 	                 ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#276: FILE: fs/xattr.c:271:
+	error = setxattr(nd.path.dentry, nd.path.mnt, name, value, size, flags,
 	                                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#286: FILE: fs/xattr.c:291:
+	error = setxattr(nd.path.dentry, nd.path.mnt, name, value, size, flags,
 	                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#286: FILE: fs/xattr.c:291:
+	error = setxattr(nd.path.dentry, nd.path.mnt, name, value, size, flags,
 	                                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#323: FILE: fs/xattr.c:369:
+	error = getxattr(nd.path.dentry, nd.path.mnt, name, value, size, NULL);
 	                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#323: FILE: fs/xattr.c:369:
+	error = getxattr(nd.path.dentry, nd.path.mnt, name, value, size, NULL);
 	                                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#332: FILE: fs/xattr.c:384:
+	error = getxattr(nd.path.dentry, nd.path.mnt, name, value, size, NULL);
 	                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#332: FILE: fs/xattr.c:384:
+	error = getxattr(nd.path.dentry, nd.path.mnt, name, value, size, NULL);
 	                                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#368: FILE: fs/xattr.c:444:
+	error = listxattr(nd.path.dentry, nd.path.mnt, list, size, NULL);
 	                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#368: FILE: fs/xattr.c:444:
+	error = listxattr(nd.path.dentry, nd.path.mnt, list, size, NULL);
 	                                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#377: FILE: fs/xattr.c:458:
+	error = listxattr(nd.path.dentry, nd.path.mnt, list, size, NULL);
 	                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#377: FILE: fs/xattr.c:458:
+	error = listxattr(nd.path.dentry, nd.path.mnt, list, size, NULL);
 	                                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#414: FILE: fs/xattr.c:506:
+	error = removexattr(nd.path.dentry, nd.path.mnt, name, NULL);
 	                    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#414: FILE: fs/xattr.c:506:
+	error = removexattr(nd.path.dentry, nd.path.mnt, name, NULL);
 	                                    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#423: FILE: fs/xattr.c:520:
+	error = removexattr(nd.path.dentry, nd.path.mnt, name, NULL);
 	                    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#423: FILE: fs/xattr.c:520:
+	error = removexattr(nd.path.dentry, nd.path.mnt, name, NULL);
 	                                    ^^

WARNING:LONG_LINE: line length of 143 exceeds 100 columns
#444: FILE: include/linux/security.h:60:
+extern int cap_inode_setxattr(struct dentry *dentry, struct vfsmount *mnt, char *name, void *value, size_t size, int flags, struct file *file);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#444: FILE: include/linux/security.h:60:
+extern int cap_inode_setxattr(struct dentry *dentry, struct vfsmount *mnt, char *name, void *value, size_t size, int flags, struct file *file);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#445: FILE: include/linux/security.h:61:
+extern int cap_inode_removexattr(struct dentry *dentry, struct vfsmount *mnt, char *name, struct file *file);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#445: FILE: include/linux/security.h:61:
+extern int cap_inode_removexattr(struct dentry *dentry, struct vfsmount *mnt, char *name, struct file *file);

WARNING:SPACING: Unnecessary space before function pointer arguments
#464: FILE: include/linux/security.h:1322:
+	int (*inode_listxattr) (struct dentry *dentry, struct vfsmount *mnt,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#544: FILE: include/linux/xattr.h:50:
+ssize_t vfs_getxattr(struct dentry *, struct vfsmount *, char *, void *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#544: FILE: include/linux/xattr.h:50:
+ssize_t vfs_getxattr(struct dentry *, struct vfsmount *, char *, void *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#544: FILE: include/linux/xattr.h:50:
+ssize_t vfs_getxattr(struct dentry *, struct vfsmount *, char *, void *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#544: FILE: include/linux/xattr.h:50:
+ssize_t vfs_getxattr(struct dentry *, struct vfsmount *, char *, void *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#544: FILE: include/linux/xattr.h:50:
+ssize_t vfs_getxattr(struct dentry *, struct vfsmount *, char *, void *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#544: FILE: include/linux/xattr.h:50:
+ssize_t vfs_getxattr(struct dentry *, struct vfsmount *, char *, void *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#546: FILE: include/linux/xattr.h:52:
+ssize_t vfs_listxattr(struct dentry *d, struct vfsmount *, char *list,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#546: FILE: include/linux/xattr.h:52:
+ssize_t vfs_listxattr(struct dentry *d, struct vfsmount *, char *list,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#552: FILE: include/linux/xattr.h:56:
+int vfs_removexattr(struct dentry *, struct vfsmount *, char *, struct file *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#552: FILE: include/linux/xattr.h:56:
+int vfs_removexattr(struct dentry *, struct vfsmount *, char *, struct file *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#552: FILE: include/linux/xattr.h:56:
+int vfs_removexattr(struct dentry *, struct vfsmount *, char *, struct file *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#552: FILE: include/linux/xattr.h:56:
+int vfs_removexattr(struct dentry *, struct vfsmount *, char *, struct file *);

ERROR:CODE_INDENT: code indent should use tabs where possible
#592: FILE: security/dummy.c:397:
+^I^I^I          struct vfsmount *mnt, char *name,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#599: FILE: security/dummy.c:403:
+static int dummy_inode_listxattr (struct dentry *dentry, struct vfsmount *mnt,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#691: FILE: security/selinux/hooks.c:2645:
+static int selinux_inode_listxattr (struct dentry *dentry, struct vfsmount *mnt,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000344763.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 34 warnings, 5 checks, 583 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000344763.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
