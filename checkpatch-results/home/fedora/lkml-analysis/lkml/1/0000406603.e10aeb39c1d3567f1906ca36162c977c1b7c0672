WARNING:BAD_SIGN_OFF: Use a single space after Cc:
#38: 
CC:             Alan Cox alan@lxorguk.ukuu.org.uk

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

ERROR:BAD_SIGN_OFF: Unrecognized email address: 'Alan Cox alan@lxorguk.ukuu.org.uk'
#38: 
CC:             Alan Cox alan@lxorguk.ukuu.org.uk

WARNING:BAD_SIGN_OFF: Use a single space after Signed-off-by:
#39: 
Signed-off-by:	doug thompson <dougthompson@xmission.com>

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#59: FILE: drivers/edac/edac_module.h:24:
+extern int edac_sysfs_setup_mc_kset(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#60: FILE: drivers/edac/edac_module.h:25:
+extern void edac_sysfs_teardown_mc_kset(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#61: FILE: drivers/edac/edac_module.h:26:
+extern int edac_mc_register_sysfs_main_kobj(struct mem_ctl_info *mci);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#62: FILE: drivers/edac/edac_module.h:27:
+extern void edac_mc_unregister_sysfs_main_kobj(struct mem_ctl_info *mci);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mci"
#111: FILE: drivers/edac/edac_mc.c:154:
+	if (mci == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:LINE_SPACING: Please don't use multiple blank lines
#247: FILE: drivers/edac/edac_mc_sysfs.c:18:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#428: FILE: drivers/edac/edac_mc_sysfs.c:339:
+	debugf1("%s()\n", __func__);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#445: FILE: drivers/edac/edac_mc_sysfs.c:356:
+static int edac_create_csrow_object(struct mem_ctl_info *mci,
+					struct csrow_info *csrow, int index)

WARNING:TYPO_SPELLING: 'dyanmic' may be misspelled - perhaps 'dynamic'?
#494: FILE: drivers/edac/edac_mc_sysfs.c:391:
+	/* Create the dyanmic attribute files on this csrow,
 	              ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#529: FILE: drivers/edac/edac_mc_sysfs.c:608:
 
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#567: FILE: drivers/edac/edac_mc_sysfs.c:642:
+
+

WARNING:SPACING: missing space after return type
#571: FILE: drivers/edac/edac_mc_sysfs.c:646:
+	 ssize_t(*show) (void *, char *);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: Unnecessary space before function pointer arguments
#571: FILE: drivers/edac/edac_mc_sysfs.c:646:
+	 ssize_t(*show) (void *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#571: FILE: drivers/edac/edac_mc_sysfs.c:646:
+	 ssize_t(*show) (void *, char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#571: FILE: drivers/edac/edac_mc_sysfs.c:646:
+	 ssize_t(*show) (void *, char *);

WARNING:SPACING: missing space after return type
#572: FILE: drivers/edac/edac_mc_sysfs.c:647:
+	 ssize_t(*store) (void *, const char *, size_t);

WARNING:SPACING: Unnecessary space before function pointer arguments
#572: FILE: drivers/edac/edac_mc_sysfs.c:647:
+	 ssize_t(*store) (void *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#572: FILE: drivers/edac/edac_mc_sysfs.c:647:
+	 ssize_t(*store) (void *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#572: FILE: drivers/edac/edac_mc_sysfs.c:647:
+	 ssize_t(*store) (void *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#572: FILE: drivers/edac/edac_mc_sysfs.c:647:
+	 ssize_t(*store) (void *, const char *, size_t);

WARNING:LINE_SPACING: Missing a blank line after declarations
#580: FILE: drivers/edac/edac_mc_sysfs.c:655:
+	struct memctrl_dev_attribute *memctrl_dev;
+	memctrl_dev = (struct memctrl_dev_attribute *)attr;

WARNING:LINE_SPACING: Missing a blank line after declarations
#592: FILE: drivers/edac/edac_mc_sysfs.c:667:
+	struct memctrl_dev_attribute *memctrl_dev;
+	memctrl_dev = (struct memctrl_dev_attribute *)attr;

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#600: FILE: drivers/edac/edac_mc_sysfs.c:675:
+static struct sysfs_ops memctrlfs_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_name' may be better as '(_name)' to avoid precedence issues
#605: FILE: drivers/edac/edac_mc_sysfs.c:680:
+#define MEMCTRL_ATTR(_name, _mode, _show, _store)			\
+static struct memctrl_dev_attribute attr_##_name = {			\
+	.attr = {.name = __stringify(_name), .mode = _mode },	\
+	.value  = &_name,					\
+	.show   = _show,					\
+	.store  = _store,					\
+};

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#605: FILE: drivers/edac/edac_mc_sysfs.c:680:
+#define MEMCTRL_ATTR(_name, _mode, _show, _store)			\
+static struct memctrl_dev_attribute attr_##_name = {			\
+	.attr = {.name = __stringify(_name), .mode = _mode },	\
+	.value  = &_name,					\
+	.show   = _show,					\
+	.store  = _store,					\
+};

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#613: FILE: drivers/edac/edac_mc_sysfs.c:688:
+#define MEMCTRL_STRING_ATTR(_name, _data, _mode, _show, _store)	\
+static struct memctrl_dev_attribute attr_##_name = {			\
+	.attr = {.name = __stringify(_name), .mode = _mode },	\
+	.value  = _data,					\
+	.show   = _show,					\
+	.store  = _store,					\
+};

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#623: FILE: drivers/edac/edac_mc_sysfs.c:698:
+MEMCTRL_ATTR(edac_mc_panic_on_ue,
+	S_IRUGO | S_IWUSR, memctrl_int_show, memctrl_int_store);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#623: FILE: drivers/edac/edac_mc_sysfs.c:698:
+	S_IRUGO | S_IWUSR, memctrl_int_show, memctrl_int_store);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#626: FILE: drivers/edac/edac_mc_sysfs.c:701:
+MEMCTRL_ATTR(edac_mc_log_ue,
+	S_IRUGO | S_IWUSR, memctrl_int_show, memctrl_int_store);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#626: FILE: drivers/edac/edac_mc_sysfs.c:701:
+	S_IRUGO | S_IWUSR, memctrl_int_show, memctrl_int_store);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#629: FILE: drivers/edac/edac_mc_sysfs.c:704:
+MEMCTRL_ATTR(edac_mc_log_ce,
+	S_IRUGO | S_IWUSR, memctrl_int_show, memctrl_int_store);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#629: FILE: drivers/edac/edac_mc_sysfs.c:704:
+	S_IRUGO | S_IWUSR, memctrl_int_show, memctrl_int_store);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#632: FILE: drivers/edac/edac_mc_sysfs.c:707:
+MEMCTRL_ATTR(edac_mc_poll_msec,
+	S_IRUGO | S_IWUSR, memctrl_int_show, memctrl_int_store);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#632: FILE: drivers/edac/edac_mc_sysfs.c:707:
+	S_IRUGO | S_IWUSR, memctrl_int_show, memctrl_int_store);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#643: FILE: drivers/edac/edac_mc_sysfs.c:718:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#658: FILE: drivers/edac/edac_mc_sysfs.c:733:
+
+

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#669: FILE: drivers/edac/edac_mc_sysfs.c:744:
+	debugf1("%s()\n", __func__);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#774: FILE: drivers/edac/edac_mc_sysfs.c:854:
+		sysfs_remove_file(&mci->edac_mci_kobj,
+					(struct attribute *) sysfs_attrib);

CHECK:SPACING: No space is necessary after a cast
#774: FILE: drivers/edac/edac_mc_sysfs.c:854:
+					(struct attribute *) sysfs_attrib);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#779: FILE: drivers/edac/edac_mc_sysfs.c:859:
+
+

WARNING:TYPO_SPELLING: 'attribtes' may be misspelled - perhaps 'attributes'?
#894: FILE: drivers/edac/edac_mc_sysfs.c:957:
+	/* remove this mci instance's attribtes */
 	                              ^^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#904: FILE: drivers/edac/edac_mc_sysfs.c:966:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#906: FILE: drivers/edac/edac_mc_sysfs.c:968:
+
+

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#924: FILE: drivers/edac/edac_mc_sysfs.c:986:
+	debugf1("%s()\n", __func__);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!edac_class"
#928: FILE: drivers/edac/edac_mc_sysfs.c:990:
+	if (edac_class == NULL) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#947: FILE: drivers/edac/edac_mc_sysfs.c:1009:
+
+

ERROR:DATE_TIME: Use of the '__DATE__' macro makes the build non-deterministic
#972: FILE: drivers/edac/edac_module.c:17:
+#define EDAC_MC_VERSION "Ver: 2.0.5 " __DATE__

It is generally desirable that building the same source code with
the same set of tools is reproducible, i.e. the output is always
exactly the same.

The kernel does *not* use the ``__DATE__`` and ``__TIME__`` macros,
and enables warnings if they are used as they can lead to
non-deterministic builds.

See: https://www.kernel.org/doc/html/latest/kbuild/reproducible-builds.html#timestamps

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000406603.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 25 warnings, 23 checks, 941 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000406603.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
