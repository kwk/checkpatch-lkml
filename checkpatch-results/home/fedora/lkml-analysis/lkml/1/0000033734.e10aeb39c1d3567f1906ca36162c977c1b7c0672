CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#105: FILE: include/linux/kernel.h:207:
+extern const char *print_tainted(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#106: FILE: include/linux/kernel.h:208:
+extern void add_taint(unsigned flag);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#106: FILE: include/linux/kernel.h:208:
+extern void add_taint(unsigned flag);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#107: FILE: include/linux/kernel.h:209:
+extern int test_taint(unsigned flag);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#107: FILE: include/linux/kernel.h:209:
+extern int test_taint(unsigned flag);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#108: FILE: include/linux/kernel.h:210:
+extern unsigned long get_taint(void);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#116: FILE: include/linux/kernel.h:218:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#132: FILE: include/linux/kernel.h:234:
+#define NIPQUAD(addr) \
+	((unsigned char *)&addr)[0], \
+	((unsigned char *)&addr)[1], \
+	((unsigned char *)&addr)[2], \
+	((unsigned char *)&addr)[3]

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'addr' - possible side-effects?
#132: FILE: include/linux/kernel.h:234:
+#define NIPQUAD(addr) \
+	((unsigned char *)&addr)[0], \
+	((unsigned char *)&addr)[1], \
+	((unsigned char *)&addr)[2], \
+	((unsigned char *)&addr)[3]

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'addr' may be better as '(addr)' to avoid precedence issues
#132: FILE: include/linux/kernel.h:234:
+#define NIPQUAD(addr) \
+	((unsigned char *)&addr)[0], \
+	((unsigned char *)&addr)[1], \
+	((unsigned char *)&addr)[2], \
+	((unsigned char *)&addr)[3]

CHECK:SPACING: No space is necessary after a cast
#147: FILE: include/linux/kernel.h:249:
+	(void) (&_min1 == &_min2);		\

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#153: FILE: include/linux/kernel.h:255:
+	(void) (&_max1 == &_max2);		\

CHECK:SPACING: No space is necessary after a cast
#169: FILE: include/linux/kernel.h:271:
+	(void) (&__val == &__min);		\

CHECK:SPACING: No space is necessary after a cast
#170: FILE: include/linux/kernel.h:272:
+	(void) (&__val == &__max);		\

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#171: FILE: include/linux/kernel.h:273:
+	__val = __val < __min ? __min: __val;	\
 	                             ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#172: FILE: include/linux/kernel.h:274:
+	__val > __max ? __max: __val; })
 	                     ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#183: FILE: include/linux/kernel.h:285:
+	__min1 < __min2 ? __min1: __min2; })
 	                        ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#188: FILE: include/linux/kernel.h:290:
+	__max1 > __max2 ? __max1: __max2; })
 	                        ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#204: FILE: include/linux/kernel.h:306:
+	__val = __val < __min ? __min: __val;	\
 	                             ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#205: FILE: include/linux/kernel.h:307:
+	__val > __max ? __max: __val; })
 	                     ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#222: FILE: include/linux/kernel.h:324:
+	__val = __val < __min ? __min: __val;	\
 	                             ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#223: FILE: include/linux/kernel.h:325:
+	__val > __max ? __max: __val; })
 	                     ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#225: FILE: include/linux/kernel.h:327:
+
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'a' - possible side-effects?
#229: FILE: include/linux/kernel.h:331:
+#define swap(a, b) \
+	do { typeof(a) __tmp = (a); (a) = (b); (b) = __tmp; } while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'b' - possible side-effects?
#229: FILE: include/linux/kernel.h:331:
+#define swap(a, b) \
+	do { typeof(a) __tmp = (a); (a) = (b); (b) = __tmp; } while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'member' - possible side-effects?
#239: FILE: include/linux/kernel.h:341:
+#define container_of(ptr, type, member) ({			\
+	const typeof( ((type *)0)->member ) *__mptr = (ptr);	\
+	(type *)( (char *)__mptr - offsetof(type,member) );	\
+})

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'member' may be better as '(member)' to avoid precedence issues
#239: FILE: include/linux/kernel.h:341:
+#define container_of(ptr, type, member) ({			\
+	const typeof( ((type *)0)->member ) *__mptr = (ptr);	\
+	(type *)( (char *)__mptr - offsetof(type,member) );	\
+})

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#240: FILE: include/linux/kernel.h:342:
+	const typeof( ((type *)0)->member ) *__mptr = (ptr);	\
 	                                    ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#240: FILE: include/linux/kernel.h:342:
+	const typeof( ((type *)0)->member ) *__mptr = (ptr);	\

ERROR:SPACING: space prohibited before that close parenthesis ')'
#240: FILE: include/linux/kernel.h:342:
+	const typeof( ((type *)0)->member ) *__mptr = (ptr);	\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#241: FILE: include/linux/kernel.h:343:
+	(type *)( (char *)__mptr - offsetof(type,member) );	\
 	                                        ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#241: FILE: include/linux/kernel.h:343:
+	(type *)( (char *)__mptr - offsetof(type,member) );	\

ERROR:SPACING: space prohibited before that close parenthesis ')'
#241: FILE: include/linux/kernel.h:343:
+	(type *)( (char *)__mptr - offsetof(type,member) );	\

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#245: FILE: include/linux/kernel.h:347:
+extern int do_sysinfo(struct sysinfo *info);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000033734.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 14 errors, 2 warnings, 18 checks, 419 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000033734.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
