WARNING:EMAIL_SUBJECT: A patch subject line should describe the change not the tool that found it
#17: 
Subject: [S390] Get rid of a lot of sparse warnings.

Naming the tool that found the issue is not very useful in the
subject line.  A good subject line summarizes the change that
the patch brings.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#151: FILE: arch/s390/crypto/aes_s390.c:30:
+static int has_aes_128 = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#152: FILE: arch/s390/crypto/aes_s390.c:31:
+static int has_aes_192 = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#153: FILE: arch/s390/crypto/aes_s390.c:32:
+static int has_aes_256 = 0;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#180: FILE: arch/s390/kernel/compat_exec_domain.c:17:
+static int __init s390_init (void)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#192: FILE: arch/s390/kernel/compat_linux.c:419:
+	ret = sys_sysinfo((struct sysinfo __force __user *) &s);

CHECK:SPACING: No space is necessary after a cast
#202: FILE: arch/s390/kernel/compat_linux.c:449:
+					(struct timespec __force __user *) &t);

CHECK:SPACING: No space is necessary after a cast
#212: FILE: arch/s390/kernel/compat_linux.c:476:
+				 set ? (sigset_t __force __user *) &s : NULL,

CHECK:SPACING: No space is necessary after a cast
#213: FILE: arch/s390/kernel/compat_linux.c:477:
+				 oset ? (sigset_t __force __user *) &s : NULL,

CHECK:SPACING: No space is necessary after a cast
#222: FILE: arch/s390/kernel/compat_linux.c:503:
+	ret = sys_rt_sigpending((sigset_t __force __user *) &s, sigsetsize);

CHECK:SPACING: No space is necessary after a cast
#231: FILE: arch/s390/kernel/compat_linux.c:528:
+	ret = sys_rt_sigqueueinfo(pid, sig, (siginfo_t __force __user *) &info);

CHECK:SPACING: No space is necessary after a cast
#240: FILE: arch/s390/kernel/compat_linux.c:686:
+			   offset ? (off_t __force __user *) &of : NULL, count);

CHECK:SPACING: No space is necessary after a cast
#249: FILE: arch/s390/kernel/compat_linux.c:707:
+			     offset ? (loff_t __force __user *) &lof : NULL,

CHECK:SPACING: No space is necessary after a cast
#263: FILE: arch/s390/kernel/compat_signal.c:278:
+	ret = do_sigaltstack((stack_t __force __user *) (uss ? &kss : NULL),

CHECK:SPACING: No space is necessary after a cast
#264: FILE: arch/s390/kernel/compat_signal.c:279:
+			     (stack_t __force __user *) (uoss ? &koss : NULL),

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#350: FILE: arch/s390/kernel/debug.c:1303:
+static void debug_flush(debug_info_t* id, int area)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#436: FILE: arch/s390/kernel/ptrace.c:310:
+		return put_user(tmp, (unsigned long __force __user *) data);

CHECK:SPACING: No space is necessary after a cast
#445: FILE: arch/s390/kernel/ptrace.c:332:
+		if (copy_from_user(&parea, (void __force __user *) addr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#446: FILE: arch/s390/kernel/ptrace.c:333:
+		if (copy_from_user(&parea, (void __force __user *) addr,
 							sizeof(parea)))

WARNING:LINE_SPACING: Missing a blank line after declarations
#456: FILE: arch/s390/kernel/ptrace.c:343:
+				addr_t utmp;
+				if (get_user(utmp,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#457: FILE: arch/s390/kernel/ptrace.c:344:
+					     (addr_t __force __user *) data))

CHECK:SPACING: No space is necessary after a cast
#469: FILE: arch/s390/kernel/ptrace.c:552:
+		return put_user(tmp, (unsigned int __force __user *) data);

CHECK:SPACING: No space is necessary after a cast
#478: FILE: arch/s390/kernel/ptrace.c:573:
+		if (copy_from_user(&parea, (void __force __user *) addr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#479: FILE: arch/s390/kernel/ptrace.c:574:
+		if (copy_from_user(&parea, (void __force __user *) addr,
 							sizeof(parea)))

WARNING:LINE_SPACING: Missing a blank line after declarations
#489: FILE: arch/s390/kernel/ptrace.c:584:
+				__u32 utmp;
+				if (get_user(utmp,

CHECK:SPACING: No space is necessary after a cast
#490: FILE: arch/s390/kernel/ptrace.c:585:
+					     (__u32 __force __user *) data))

CHECK:SPACING: No space is necessary after a cast
#502: FILE: arch/s390/kernel/ptrace.c:598:
+				(unsigned int __force __user *) data);

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#608: FILE: arch/s390/kernel/smp.c:382:
+static void smp_ctl_bit_callback(void *info) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#619: FILE: arch/s390/kernel/smp.c:455:
 int __devinit start_secondary(void *cpuvoid)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#661: FILE: arch/s390/kernel/traps.c:367:
+static void default_trap_handler(struct pt_regs * regs, long interruption_code)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#670: FILE: arch/s390/kernel/traps.c:378:
+static void name(struct pt_regs * regs, long interruption_code) \

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#679: FILE: arch/s390/kernel/traps.c:444:
+static void illegal_op(struct pt_regs * regs, long interruption_code)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#688: FILE: arch/s390/kernel/traps.c:587:
+static void data_exception(struct pt_regs * regs, long interruption_code)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#697: FILE: arch/s390/kernel/traps.c:677:
+static void space_switch_exception(struct pt_regs * regs, long int_code)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#717: FILE: arch/s390/lib/uaccess.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#727: FILE: arch/s390/lib/uaccess.h:11:
+extern size_t copy_from_user_std(size_t, const void __user *, void *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#727: FILE: arch/s390/lib/uaccess.h:11:
+extern size_t copy_from_user_std(size_t, const void __user *, void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const void __user *' should also have an identifier name
#727: FILE: arch/s390/lib/uaccess.h:11:
+extern size_t copy_from_user_std(size_t, const void __user *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#727: FILE: arch/s390/lib/uaccess.h:11:
+extern size_t copy_from_user_std(size_t, const void __user *, void *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#728: FILE: arch/s390/lib/uaccess.h:12:
+extern size_t copy_to_user_std(size_t, void __user *, const void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#728: FILE: arch/s390/lib/uaccess.h:12:
+extern size_t copy_to_user_std(size_t, void __user *, const void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void __user *' should also have an identifier name
#728: FILE: arch/s390/lib/uaccess.h:12:
+extern size_t copy_to_user_std(size_t, void __user *, const void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const void *' should also have an identifier name
#728: FILE: arch/s390/lib/uaccess.h:12:
+extern size_t copy_to_user_std(size_t, void __user *, const void *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#729: FILE: arch/s390/lib/uaccess.h:13:
+extern size_t strnlen_user_std(size_t, const char __user *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#729: FILE: arch/s390/lib/uaccess.h:13:
+extern size_t strnlen_user_std(size_t, const char __user *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char __user *' should also have an identifier name
#729: FILE: arch/s390/lib/uaccess.h:13:
+extern size_t strnlen_user_std(size_t, const char __user *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#730: FILE: arch/s390/lib/uaccess.h:14:
+extern size_t strncpy_from_user_std(size_t, const char __user *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#730: FILE: arch/s390/lib/uaccess.h:14:
+extern size_t strncpy_from_user_std(size_t, const char __user *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char __user *' should also have an identifier name
#730: FILE: arch/s390/lib/uaccess.h:14:
+extern size_t strncpy_from_user_std(size_t, const char __user *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#730: FILE: arch/s390/lib/uaccess.h:14:
+extern size_t strncpy_from_user_std(size_t, const char __user *, char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#731: FILE: arch/s390/lib/uaccess.h:15:
+extern int futex_atomic_cmpxchg_std(int __user *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int __user *' should also have an identifier name
#731: FILE: arch/s390/lib/uaccess.h:15:
+extern int futex_atomic_cmpxchg_std(int __user *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#731: FILE: arch/s390/lib/uaccess.h:15:
+extern int futex_atomic_cmpxchg_std(int __user *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#731: FILE: arch/s390/lib/uaccess.h:15:
+extern int futex_atomic_cmpxchg_std(int __user *, int, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#732: FILE: arch/s390/lib/uaccess.h:16:
+extern int futex_atomic_op_std(int, int __user *, int, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#732: FILE: arch/s390/lib/uaccess.h:16:
+extern int futex_atomic_op_std(int, int __user *, int, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int __user *' should also have an identifier name
#732: FILE: arch/s390/lib/uaccess.h:16:
+extern int futex_atomic_op_std(int, int __user *, int, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#732: FILE: arch/s390/lib/uaccess.h:16:
+extern int futex_atomic_op_std(int, int __user *, int, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#732: FILE: arch/s390/lib/uaccess.h:16:
+extern int futex_atomic_op_std(int, int __user *, int, int *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#734: FILE: arch/s390/lib/uaccess.h:18:
+extern size_t copy_from_user_pt(size_t, const void __user *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#734: FILE: arch/s390/lib/uaccess.h:18:
+extern size_t copy_from_user_pt(size_t, const void __user *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const void __user *' should also have an identifier name
#734: FILE: arch/s390/lib/uaccess.h:18:
+extern size_t copy_from_user_pt(size_t, const void __user *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#734: FILE: arch/s390/lib/uaccess.h:18:
+extern size_t copy_from_user_pt(size_t, const void __user *, void *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#735: FILE: arch/s390/lib/uaccess.h:19:
+extern size_t copy_to_user_pt(size_t, void __user *, const void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#735: FILE: arch/s390/lib/uaccess.h:19:
+extern size_t copy_to_user_pt(size_t, void __user *, const void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void __user *' should also have an identifier name
#735: FILE: arch/s390/lib/uaccess.h:19:
+extern size_t copy_to_user_pt(size_t, void __user *, const void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const void *' should also have an identifier name
#735: FILE: arch/s390/lib/uaccess.h:19:
+extern size_t copy_to_user_pt(size_t, void __user *, const void *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#736: FILE: arch/s390/lib/uaccess.h:20:
+extern int futex_atomic_op_pt(int, int __user *, int, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#736: FILE: arch/s390/lib/uaccess.h:20:
+extern int futex_atomic_op_pt(int, int __user *, int, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int __user *' should also have an identifier name
#736: FILE: arch/s390/lib/uaccess.h:20:
+extern int futex_atomic_op_pt(int, int __user *, int, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#736: FILE: arch/s390/lib/uaccess.h:20:
+extern int futex_atomic_op_pt(int, int __user *, int, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#736: FILE: arch/s390/lib/uaccess.h:20:
+extern int futex_atomic_op_pt(int, int __user *, int, int *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#737: FILE: arch/s390/lib/uaccess.h:21:
+extern int futex_atomic_cmpxchg_pt(int __user *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int __user *' should also have an identifier name
#737: FILE: arch/s390/lib/uaccess.h:21:
+extern int futex_atomic_cmpxchg_pt(int __user *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#737: FILE: arch/s390/lib/uaccess.h:21:
+extern int futex_atomic_cmpxchg_pt(int __user *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#737: FILE: arch/s390/lib/uaccess.h:21:
+extern int futex_atomic_cmpxchg_pt(int __user *, int, int);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#987: FILE: drivers/s390/block/dasd.c:40:
+void dasd_int_handler(struct ccw_device *, unsigned long, struct irb *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ccw_device *' should also have an identifier name
#987: FILE: drivers/s390/block/dasd.c:40:
+void dasd_int_handler(struct ccw_device *, unsigned long, struct irb *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#987: FILE: drivers/s390/block/dasd.c:40:
+void dasd_int_handler(struct ccw_device *, unsigned long, struct irb *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct irb *' should also have an identifier name
#987: FILE: drivers/s390/block/dasd.c:40:
+void dasd_int_handler(struct ccw_device *, unsigned long, struct irb *);

CHECK:SPACING: No space is necessary after a cast
#1040: FILE: drivers/s390/block/dasd_genhd.c:150:
+	barg.data = (void __force __user *) &bpart;

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1121: FILE: drivers/s390/char/keyboard.c:151:
+#if 0

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1302: FILE: drivers/s390/cio/chsc.h:50:
+extern int css_get_ssd_info(struct subchannel *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct subchannel *' should also have an identifier name
#1302: FILE: drivers/s390/cio/chsc.h:50:
+extern int css_get_ssd_info(struct subchannel *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1303: FILE: drivers/s390/cio/chsc.h:51:
+extern int chsc_process_crw(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1304: FILE: drivers/s390/cio/chsc.h:52:
+extern int chp_process_crw(int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1304: FILE: drivers/s390/cio/chsc.h:52:
+extern int chp_process_crw(int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1304: FILE: drivers/s390/cio/chsc.h:52:
+extern int chp_process_crw(int, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1337: FILE: drivers/s390/cio/css.h:146:
+extern int css_process_crw(int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1337: FILE: drivers/s390/cio/css.h:146:
+extern int css_process_crw(int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1337: FILE: drivers/s390/cio/css.h:146:
+extern int css_process_crw(int, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1338: FILE: drivers/s390/cio/css.h:147:
+extern void css_reiterate_subchannels(void);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1372: FILE: drivers/s390/cio/device.h:77:
+void io_subchannel_irq (struct device *pdev);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1412: FILE: drivers/s390/crypto/zcrypt_api.c:794:
+static long zcrypt_compat_ioctl(struct file *filp, unsigned int cmd,
                                              ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1413: FILE: drivers/s390/crypto/zcrypt_api.c:795:
+static long zcrypt_compat_ioctl(struct file *filp, unsigned int cmd,
 			 unsigned long arg)

CHECK:SPACING: No space is necessary after a cast
#1421: FILE: drivers/s390/crypto/zcrypt_api.c:946:
+	zcrypt_perdev_reqcnt((int *) workarea);

CHECK:CAMELCASE: Avoid CamelCase: <ica_xcRB>
#1434: FILE: drivers/s390/crypto/zcrypt_pcixcc.c:713:
+				    struct ica_xcRB *xcRB)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <xcRB>
#1434: FILE: drivers/s390/crypto/zcrypt_pcixcc.c:713:
+				    struct ica_xcRB *xcRB)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1633: FILE: drivers/s390/scsi/zfcp_ext.h:122:
+extern void set_host_byte(int *, char);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#1633: FILE: drivers/s390/scsi/zfcp_ext.h:122:
+extern void set_host_byte(int *, char);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char' should also have an identifier name
#1633: FILE: drivers/s390/scsi/zfcp_ext.h:122:
+extern void set_host_byte(int *, char);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1634: FILE: drivers/s390/scsi/zfcp_ext.h:123:
+extern void set_driver_byte(int *, char);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#1634: FILE: drivers/s390/scsi/zfcp_ext.h:123:
+extern void set_driver_byte(int *, char);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char' should also have an identifier name
#1634: FILE: drivers/s390/scsi/zfcp_ext.h:123:
+extern void set_driver_byte(int *, char);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1733: FILE: include/asm-s390/kdebug.h:58:
+extern void die(const char *, struct pt_regs *, long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1743: FILE: include/asm-s390/pgtable.h:43:
+extern void vmem_map_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1767: FILE: include/asm-s390/smp.h:34:
+extern void machine_restart_smp(char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#1767: FILE: include/asm-s390/smp.h:34:
+extern void machine_restart_smp(char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1768: FILE: include/asm-s390/smp.h:35:
+extern void machine_halt_smp(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1769: FILE: include/asm-s390/smp.h:36:
+extern void machine_power_off_smp(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1781: FILE: include/asm-s390/timer.h:48:
+extern void init_cpu_vtimer(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1782: FILE: include/asm-s390/timer.h:49:
+extern void vtime_init(void);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000474307.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 10 errors, 54 warnings, 48 checks, 1338 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000474307.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
