WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#57: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#62: FILE: drivers/block/drbd/drbd_tracing.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#63: FILE: drivers/block/drbd/drbd_tracing.h:2:
+/*
+   drbd_tracing.h

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#83: FILE: drivers/block/drbd/drbd_tracing.h:22:
+   the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#103: FILE: drivers/block/drbd/drbd_tracing.h:42:
+DECLARE_TRACE(drbd_unplug,
+	TP_PROTO(struct drbd_conf *mdev, char* msg),

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#103: FILE: drivers/block/drbd/drbd_tracing.h:42:
+	TP_PROTO(struct drbd_conf *mdev, char* msg),

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#107: FILE: drivers/block/drbd/drbd_tracing.h:46:
+DECLARE_TRACE(drbd_uuid,
+	TP_PROTO(struct drbd_conf *mdev, enum drbd_uuid_index index),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#111: FILE: drivers/block/drbd/drbd_tracing.h:50:
+DECLARE_TRACE(drbd_ee,
+	TP_PROTO(struct drbd_conf *mdev, struct drbd_epoch_entry *e, char* msg),

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#111: FILE: drivers/block/drbd/drbd_tracing.h:50:
+	TP_PROTO(struct drbd_conf *mdev, struct drbd_epoch_entry *e, char* msg),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#115: FILE: drivers/block/drbd/drbd_tracing.h:54:
+DECLARE_TRACE(drbd_md_io,
+	TP_PROTO(struct drbd_conf *mdev, int rw, struct drbd_backing_dev *bdev),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#119: FILE: drivers/block/drbd/drbd_tracing.h:58:
+DECLARE_TRACE(drbd_epoch,
+	TP_PROTO(struct drbd_conf *mdev, struct drbd_epoch *epoch, enum epoch_event ev),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#123: FILE: drivers/block/drbd/drbd_tracing.h:62:
+DECLARE_TRACE(drbd_netlink,
+	TP_PROTO(void *data, int is_req),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#127: FILE: drivers/block/drbd/drbd_tracing.h:66:
+DECLARE_TRACE(drbd_actlog,
+	TP_PROTO(struct drbd_conf *mdev, sector_t sector, char* msg),

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#127: FILE: drivers/block/drbd/drbd_tracing.h:66:
+	TP_PROTO(struct drbd_conf *mdev, sector_t sector, char* msg),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#131: FILE: drivers/block/drbd/drbd_tracing.h:70:
+DECLARE_TRACE(drbd_bio,
+	TP_PROTO(struct drbd_conf *mdev, const char *pfx, struct bio *bio, int complete,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#136: FILE: drivers/block/drbd/drbd_tracing.h:75:
+DECLARE_TRACE(drbd_req,
+	TP_PROTO(struct drbd_request *req, enum drbd_req_event what, char *msg),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#140: FILE: drivers/block/drbd/drbd_tracing.h:79:
+DECLARE_TRACE(drbd_packet,
+	TP_PROTO(struct drbd_conf *mdev, struct socket *sock,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#145: FILE: drivers/block/drbd/drbd_tracing.h:84:
+DECLARE_TRACE(_drbd_resync,
+	TP_PROTO(struct drbd_conf *mdev, int level, const char *fmt, va_list args),

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#155: FILE: drivers/block/drbd/drbd_tracing.c:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#156: FILE: drivers/block/drbd/drbd_tracing.c:2:
+/*
+   drbd_tracing.c

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#176: FILE: drivers/block/drbd/drbd_tracing.c:22:
+   the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.$

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#195: FILE: drivers/block/drbd/drbd_tracing.c:41:
+unsigned int trace_mask = 0;  /* Bitmap of events to trace */

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#222: FILE: drivers/block/drbd/drbd_tracing.c:68:
+ *	 of the buffer. */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#224: FILE: drivers/block/drbd/drbd_tracing.c:70:
+    DBGPRINT_BUFFADDR = 0x0001,$

ERROR:SPACING: space required before that '!' (ctx:VxE)
#233: FILE: drivers/block/drbd/drbd_tracing.c:79:
+#define NL_INTEGER Argh!
                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <Argh>
#233: FILE: drivers/block/drbd/drbd_tracing.c:79:
+#define NL_INTEGER Argh!

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#233: FILE: drivers/block/drbd/drbd_tracing.c:79:
+#define NL_INTEGER Argh!

ERROR:SPACING: space required before that '!' (ctx:VxE)
#234: FILE: drivers/block/drbd/drbd_tracing.c:80:
+#define NL_BIT Argh!
                    ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#234: FILE: drivers/block/drbd/drbd_tracing.c:80:
+#define NL_BIT Argh!

ERROR:SPACING: space required before that '!' (ctx:VxE)
#235: FILE: drivers/block/drbd/drbd_tracing.c:81:
+#define NL_INT64 Argh!
                      ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#235: FILE: drivers/block/drbd/drbd_tracing.c:81:
+#define NL_INT64 Argh!

ERROR:SPACING: space required before that '!' (ctx:VxE)
#236: FILE: drivers/block/drbd/drbd_tracing.c:82:
+#define NL_STRING Argh!
                       ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#236: FILE: drivers/block/drbd/drbd_tracing.c:82:
+#define NL_STRING Argh!

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(nl_tag_name)
#242: FILE: drivers/block/drbd/drbd_tracing.c:88:
+	return (packet_type < sizeof(nl_tag_name)/sizeof(nl_tag_name[0])) ?

The ARRAY_SIZE(foo) macro should be preferred over
sizeof(foo)/sizeof(foo[0]) for finding number of elements in an
array.

The macro is defined in include/linux/kernel.h::

  #define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#242: FILE: drivers/block/drbd/drbd_tracing.c:88:
+	return (packet_type < sizeof(nl_tag_name)/sizeof(nl_tag_name[0])) ?
 	                                         ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#245: FILE: drivers/block/drbd/drbd_tracing.c:91:
+}
+/* /Macro stuff */

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#294: FILE: drivers/block/drbd/drbd_tracing.c:140:
+static void probe_drbd_ee(struct drbd_conf *mdev, struct drbd_epoch_entry *e, char* msg)

WARNING:STATIC_CONST_CHAR_ARRAY: char * array declaration might be better as static const
#306: FILE: drivers/block/drbd/drbd_tracing.c:152:
+	static char *epoch_event_str[] = {

WARNING:TYPO_SPELLING: 'Allocat' may be misspelled - perhaps 'Allocate'?
#323: FILE: drivers/block/drbd/drbd_tracing.c:169:
+		dev_info(DEV, "Allocat epoch %p/xxxx { } nr_epochs=%d\n", epoch, mdev->epochs);
 		               ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#349: FILE: drivers/block/drbd/drbd_tracing.c:195:
+		printk(KERN_INFO "drbd%d: "

WARNING:SPLIT_STRING: quoted string split across lines
#350: FILE: drivers/block/drbd/drbd_tracing.c:196:
+		printk(KERN_INFO "drbd%d: "
+			 "Netlink: << %s (%d) - seq: %x, ack: %x, len: %x\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#358: FILE: drivers/block/drbd/drbd_tracing.c:204:
+		printk(KERN_INFO "drbd%d: "

WARNING:SPLIT_STRING: quoted string split across lines
#359: FILE: drivers/block/drbd/drbd_tracing.c:205:
+		printk(KERN_INFO "drbd%d: "
+		       "Netlink: >> %s (%d) - seq: %x, ack: %x, len: %x\n",

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#368: FILE: drivers/block/drbd/drbd_tracing.c:214:
+static void probe_drbd_actlog(struct drbd_conf *mdev, sector_t sector, char* msg)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#370: FILE: drivers/block/drbd/drbd_tracing.c:216:
+	unsigned int enr = (sector >> (AL_EXTENT_SHIFT-9));
 	                                              ^

CHECK:SPACING: No space is necessary after a cast
#376: FILE: drivers/block/drbd/drbd_tracing.c:222:
+		 msg, (unsigned long long) sector, enr,

WARNING:TYPO_SPELLING: 'arbitraty' may be misspelled - perhaps 'arbitrary'?
#381: FILE: drivers/block/drbd/drbd_tracing.c:227:
+ * drbd_print_buffer() - Hexdump arbitraty binary data into a buffer
                                  ^^^^^^^^^

WARNING:TYPO_SPELLING: 'outupt' may be misspelled - perhaps 'output'?
#385: FILE: drivers/block/drbd/drbd_tracing.c:231:
+ *		outupt. If clear, each line starts with the offset from the
   		^^^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#388: FILE: drivers/block/drbd/drbd_tracing.c:234:
+ * ^I^Ivalues are sizeof(char), sizeof(short) and sizeof(int)$

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#400: FILE: drivers/block/drbd/drbd_tracing.c:246:
+#define LINE_ENTRIES    (int)(LINE_SIZE/size)
                                        ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#400: FILE: drivers/block/drbd/drbd_tracing.c:246:
+#define LINE_ENTRIES    (int)(LINE_SIZE/size)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#405: FILE: drivers/block/drbd/drbd_tracing.c:251:
+	char bytes_str[LINE_SIZE*3+8], ascii_str[LINE_SIZE+8];
 	                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#405: FILE: drivers/block/drbd/drbd_tracing.c:251:
+	char bytes_str[LINE_SIZE*3+8], ascii_str[LINE_SIZE+8];
 	                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#405: FILE: drivers/block/drbd/drbd_tracing.c:251:
+	char bytes_str[LINE_SIZE*3+8], ascii_str[LINE_SIZE+8];
 	                                                  ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#419: FILE: drivers/block/drbd/drbd_tracing.c:265:
+		printk(KERN_DEBUG "drbd_print_buffer: "

WARNING:SPLIT_STRING: quoted string split across lines
#420: FILE: drivers/block/drbd/drbd_tracing.c:266:
+		printk(KERN_DEBUG "drbd_print_buffer: "
+			"ERROR invalid size %d\n", size);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#424: FILE: drivers/block/drbd/drbd_tracing.c:270:
+	sizemask = size-1;
 	               ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#425: FILE: drivers/block/drbd/drbd_tracing.c:271:
+	field_width = size*2;
 	                  ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#435: FILE: drivers/block/drbd/drbd_tracing.c:281:
+		 * with addresses being on line size (16) byte boundaries */

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#436: FILE: drivers/block/drbd/drbd_tracing.c:282:
+		pstart = (const unsigned char *)((long)buffer & ~(LINE_SIZE-1));
 		                                                           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#443: FILE: drivers/block/drbd/drbd_tracing.c:289:
+		 - ((const unsigned char *)buffer-pstart);
 		                                 ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#446: FILE: drivers/block/drbd/drbd_tracing.c:292:
+	pend_str = pstart + (((pend-pstart) + LINE_SIZE-1) & ~(LINE_SIZE-1));
 	                           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#446: FILE: drivers/block/drbd/drbd_tracing.c:292:
+	pend_str = pstart + (((pend-pstart) + LINE_SIZE-1) & ~(LINE_SIZE-1));
 	                                               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#446: FILE: drivers/block/drbd/drbd_tracing.c:292:
+	pend_str = pstart + (((pend-pstart) + LINE_SIZE-1) & ~(LINE_SIZE-1));
 	                                                                ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#464: FILE: drivers/block/drbd/drbd_tracing.c:310:
+			int val;
+			switch (size) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#490: FILE: drivers/block/drbd/drbd_tracing.c:336:
+			printk(KERN_DEBUG "%s%8.8lx: %*s|%*s|\n",

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#493: FILE: drivers/block/drbd/drbd_tracing.c:339:
+			       ? (long)pstart_va:(long)offset,
 			                        ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#494: FILE: drivers/block/drbd/drbd_tracing.c:340:
+			       LINE_ENTRIES*(field_width+1), bytes_str,
 			                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#494: FILE: drivers/block/drbd/drbd_tracing.c:340:
+			       LINE_ENTRIES*(field_width+1), bytes_str,
 			                                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#498: FILE: drivers/block/drbd/drbd_tracing.c:344:
+			pstart_va += (p-pstart);
 			               ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#521: FILE: drivers/block/drbd/drbd_tracing.c:367:
+	printk(KERN_INFO "%s %s: %s", dev_driver_string(disk_to_dev(mdev->vdisk)),

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#529: FILE: drivers/block/drbd/drbd_tracing.c:375:
+#define SECTOR_FORMAT "%Lx"

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#537: FILE: drivers/block/drbd/drbd_tracing.c:383:
+	char rb[sizeof(void *)*2+6] = { 0, };
 	                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#537: FILE: drivers/block/drbd/drbd_tracing.c:383:
+	char rb[sizeof(void *)*2+6] = { 0, };
 	                        ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#542: FILE: drivers/block/drbd/drbd_tracing.c:388:
+	const int biorw      = (rw & (RW_MASK|RWA_MASK));
 	                                     ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#543: FILE: drivers/block/drbd/drbd_tracing.c:389:
+	const int biobarrier = (rw & (1<<BIO_RW_BARRIER));
 	                               ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#544: FILE: drivers/block/drbd/drbd_tracing.c:390:
+	const int biosync    = (rw & ((1<<BIO_RW_UNPLUG) | (1<<BIO_RW_SYNCIO)));
 	                                ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#544: FILE: drivers/block/drbd/drbd_tracing.c:390:
+	const int biosync    = (rw & ((1<<BIO_RW_UNPLUG) | (1<<BIO_RW_SYNCIO)));
 	                                                     ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'biorw == WRITE'
#564: FILE: drivers/block/drbd/drbd_tracing.c:410:
+	if (trace_level >= TRACE_LVL_METRICS &&
+	    ((biorw == WRITE) ^ complete)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#566: FILE: drivers/block/drbd/drbd_tracing.c:412:
+		printk(KERN_DEBUG "  ind     page   offset   length\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#568: FILE: drivers/block/drbd/drbd_tracing.c:414:
+			printk(KERN_DEBUG "  [%d] %p %8.8x %8.8x\n", segno,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#586: FILE: drivers/block/drbd/drbd_tracing.c:432:
+					printk(KERN_DEBUG "    ....\n");

WARNING:STATIC_CONST_CHAR_ARRAY: static const char * array should probably be static const char * const
#596: FILE: drivers/block/drbd/drbd_tracing.c:442:
+	static const char *rq_event_names[] = {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!req->master_bio"
#620: FILE: drivers/block/drbd/drbd_tracing.c:466:
+	const int rw = (req->master_bio == NULL ||

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:LINE_SPACING: Please don't use multiple blank lines
#645: FILE: drivers/block/drbd/drbd_tracing.c:491:
+
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'A' - possible side-effects?
#649: FILE: drivers/block/drbd/drbd_tracing.c:495:
+#define PSM(A)							\
+do {								\
+	if (mask.A) {						\
+		int i = snprintf(p, len, " " #A "( %s )",	\
+				A##s_to_name(val.A));		\
+		if (i >= len)					\
+			return op;				\
+		p += i;						\
+		len -= i;					\
+	}							\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'fmt' - possible side-effects?
#674: FILE: drivers/block/drbd/drbd_tracing.c:520:
+#define INFOP(fmt, args...) \
+do { \
+	if (trace_level >= TRACE_LVL_ALL) { \
+		dev_info(DEV, "%s:%d: %s [%d] %s %s " fmt , \
+		     file, line, current->comm, current->pid, \
+		     sockname, recv ? "<<<" : ">>>" , \
+		     ## args); \
+	} else { \
+		dev_info(DEV, "%s %s " fmt, sockname, \
+		     recv ? "<<<" : ">>>" , \
+		     ## args); \
+	} \
+} while (0)

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#677: FILE: drivers/block/drbd/drbd_tracing.c:523:
+		dev_info(DEV, "%s:%d: %s [%d] %s %s " fmt , \
 		                                          ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#679: FILE: drivers/block/drbd/drbd_tracing.c:525:
+		     sockname, recv ? "<<<" : ">>>" , \
 		                                    ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#683: FILE: drivers/block/drbd/drbd_tracing.c:529:
+		     recv ? "<<<" : ">>>" , \
 		                          ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#709: FILE: drivers/block/drbd/drbd_tracing.c:555:
+		INFOP("%s (protocol %u-%u)\n", cmdname(cmd),
+			be32_to_cpu(p->handshake.protocol_min),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#741: FILE: drivers/block/drbd/drbd_tracing.c:587:
+		INFOP("%s (sector %llus, size %u, id %s, seq %u)\n",
+			cmdname(cmd),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#766: FILE: drivers/block/drbd/drbd_tracing.c:612:
+		INFOP("%s (rate %u, verify-alg \"%.64s\", csums-alg \"%.64s\")\n",
+			cmdname(cmd), be32_to_cpu(p->rs_param_89.rate),

WARNING:SPLIT_STRING: quoted string split across lines
#772: FILE: drivers/block/drbd/drbd_tracing.c:618:
+		INFOP("%s Curr:%016llX, Bitmap:%016llX, "
+		      "HisSt:%016llX, HisEnd:%016llX\n",

WARNING:SPLIT_STRING: quoted string split across lines
#782: FILE: drivers/block/drbd/drbd_tracing.c:628:
+		INFOP("%s (d %lluMiB, u %lluMiB, c %lldMiB, "
+		      "max bio %x, q order %x)\n",

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#784: FILE: drivers/block/drbd/drbd_tracing.c:630:
+		      (long long)(be64_to_cpu(p->sizes.d_size)>>(20-9)),
 		                                              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#784: FILE: drivers/block/drbd/drbd_tracing.c:630:
+		      (long long)(be64_to_cpu(p->sizes.d_size)>>(20-9)),
 		                                                   ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#785: FILE: drivers/block/drbd/drbd_tracing.c:631:
+		      (long long)(be64_to_cpu(p->sizes.u_size)>>(20-9)),
 		                                              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#785: FILE: drivers/block/drbd/drbd_tracing.c:631:
+		      (long long)(be64_to_cpu(p->sizes.u_size)>>(20-9)),
 		                                                   ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#786: FILE: drivers/block/drbd/drbd_tracing.c:632:
+		      (long long)(be64_to_cpu(p->sizes.c_size)>>(20-9)),
 		                                              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#786: FILE: drivers/block/drbd/drbd_tracing.c:632:
+		      (long long)(be64_to_cpu(p->sizes.c_size)>>(20-9)),
 		                                                   ^

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#817: FILE: drivers/block/drbd/drbd_tracing.c:663:
+		/* fall through... */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#824: FILE: drivers/block/drbd/drbd_tracing.c:670:
+
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000124566.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 20 errors, 31 warnings, 52 checks, 839 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000124566.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
