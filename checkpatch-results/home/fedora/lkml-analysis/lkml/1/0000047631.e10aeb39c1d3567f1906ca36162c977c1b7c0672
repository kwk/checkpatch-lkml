ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#63: FILE: drivers/hid/Kconfig:61:
Support for A4 tech X5 and WOP-35 / Trust 450L mice.

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#65: FILE: drivers/hid/Kconfig:63:
+config HID_ALWAYSINNOVATING
+ tristate "Always Innovating" if EMBEDDED
+ depends on USB_HID
+ default !EMBEDDED
+ ---help---
+ Support for Always Innovating Touch Book.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#89: FILE: drivers/hid/hid-alwaysinnovating.c:21:
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#94: FILE: drivers/hid/hid-alwaysinnovating.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#120: FILE: drivers/hid/hid-alwaysinnovating.c:24:
+ unsigned long quirks;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#121: FILE: drivers/hid/hid-alwaysinnovating.c:25:
+ unsigned int  fn_on;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#122: FILE: drivers/hid/hid-alwaysinnovating.c:26:
+ DECLARE_BITMAP(pressed_fn, KEY_CNT);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#126: FILE: drivers/hid/hid-alwaysinnovating.c:30:
+ u16 from;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#127: FILE: drivers/hid/hid-alwaysinnovating.c:31:
+ u16 to;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#128: FILE: drivers/hid/hid-alwaysinnovating.c:32:
+ u8 flags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#132: FILE: drivers/hid/hid-alwaysinnovating.c:36:
+ { KEY_F6, KEY_BRIGHTNESSDOWN },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#133: FILE: drivers/hid/hid-alwaysinnovating.c:37:
+ { KEY_F7, KEY_BRIGHTNESSUP },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#135: FILE: drivers/hid/hid-alwaysinnovating.c:39:
+ { KEY_F8, KEY_MUTE },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#136: FILE: drivers/hid/hid-alwaysinnovating.c:40:
+ { KEY_F9, KEY_VOLUMEDOWN },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#137: FILE: drivers/hid/hid-alwaysinnovating.c:41:
+ { KEY_F10, KEY_VOLUMEUP },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#139: FILE: drivers/hid/hid-alwaysinnovating.c:43:
+ { KEY_UP, KEY_PAGEUP },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#140: FILE: drivers/hid/hid-alwaysinnovating.c:44:
+ { KEY_DOWN, KEY_PAGEDOWN },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#141: FILE: drivers/hid/hid-alwaysinnovating.c:45:
+ { }$

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#144: FILE: drivers/hid/hid-alwaysinnovating.c:48:
+extern unsigned long touchbook_revision;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#147: FILE: drivers/hid/hid-alwaysinnovating.c:51:
+static struct touchbook_key_translation *touchbook_find_translation(

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#148: FILE: drivers/hid/hid-alwaysinnovating.c:52:
+ struct touchbook_key_translation *table, u16 from)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#150: FILE: drivers/hid/hid-alwaysinnovating.c:54:
+ struct touchbook_key_translation *trans;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#153: FILE: drivers/hid/hid-alwaysinnovating.c:57:
+ for (trans = table; trans->from; trans++)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#153: FILE: drivers/hid/hid-alwaysinnovating.c:57:
+ for (trans = table; trans->from; trans++)
+ if (trans->from == from)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#154: FILE: drivers/hid/hid-alwaysinnovating.c:58:
+ if (trans->from == from)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#154: FILE: drivers/hid/hid-alwaysinnovating.c:58:
+ if (trans->from == from)
+ return trans;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#155: FILE: drivers/hid/hid-alwaysinnovating.c:59:
+ return trans;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#157: FILE: drivers/hid/hid-alwaysinnovating.c:61:
+ return NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#162: FILE: drivers/hid/hid-alwaysinnovating.c:65:
+ struct hid_usage *usage, __s32 value)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#164: FILE: drivers/hid/hid-alwaysinnovating.c:67:
+ int do_translate;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#166: FILE: drivers/hid/hid-alwaysinnovating.c:69:
+ struct input_dev *input = field->hidinput->input;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#167: FILE: drivers/hid/hid-alwaysinnovating.c:70:
+ struct touchbook_sc *asc = hid_get_drvdata(hid);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#168: FILE: drivers/hid/hid-alwaysinnovating.c:71:
+ struct touchbook_key_translation *trans;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#170: FILE: drivers/hid/hid-alwaysinnovating.c:73:
+ if (swap_key && usage->code == KEY_RIGHTSHIFT) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#170: FILE: drivers/hid/hid-alwaysinnovating.c:73:
+ if (swap_key && usage->code == KEY_RIGHTSHIFT) {
+ input_event(input, usage->type, KEY_END, value);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#171: FILE: drivers/hid/hid-alwaysinnovating.c:74:
+ input_event(input, usage->type, KEY_END, value);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#172: FILE: drivers/hid/hid-alwaysinnovating.c:75:
+ return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#173: FILE: drivers/hid/hid-alwaysinnovating.c:76:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#175: FILE: drivers/hid/hid-alwaysinnovating.c:78:
+ if (swap_key && usage->code == KEY_END) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#175: FILE: drivers/hid/hid-alwaysinnovating.c:78:
+ if (swap_key && usage->code == KEY_END) {
+ input_event(input, usage->type, KEY_RIGHTSHIFT, value);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#176: FILE: drivers/hid/hid-alwaysinnovating.c:79:
+ input_event(input, usage->type, KEY_RIGHTSHIFT, value);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#177: FILE: drivers/hid/hid-alwaysinnovating.c:80:
+ return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#178: FILE: drivers/hid/hid-alwaysinnovating.c:81:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#180: FILE: drivers/hid/hid-alwaysinnovating.c:83:
+ if (usage->code == KEY_POWER) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#180: FILE: drivers/hid/hid-alwaysinnovating.c:83:
+ if (usage->code == KEY_POWER) {
+ asc->fn_on = !!value;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#181: FILE: drivers/hid/hid-alwaysinnovating.c:84:
+ asc->fn_on = !!value;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#182: FILE: drivers/hid/hid-alwaysinnovating.c:85:
+ input_event(input, usage->type, usage->code, value);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#183: FILE: drivers/hid/hid-alwaysinnovating.c:86:
+ return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#184: FILE: drivers/hid/hid-alwaysinnovating.c:87:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#186: FILE: drivers/hid/hid-alwaysinnovating.c:89:
+ trans = touchbook_find_translation(touchbook_fn_keys, usage->code);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#187: FILE: drivers/hid/hid-alwaysinnovating.c:90:
+ if (trans) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#187: FILE: drivers/hid/hid-alwaysinnovating.c:90:
+ if (trans) {
+ if (test_bit(usage->code, asc->pressed_fn))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#188: FILE: drivers/hid/hid-alwaysinnovating.c:91:
+ if (test_bit(usage->code, asc->pressed_fn))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#188: FILE: drivers/hid/hid-alwaysinnovating.c:91:
+ if (test_bit(usage->code, asc->pressed_fn))
+ do_translate = 1;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#189: FILE: drivers/hid/hid-alwaysinnovating.c:92:
+ do_translate = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#190: FILE: drivers/hid/hid-alwaysinnovating.c:93:
+ else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#190: FILE: drivers/hid/hid-alwaysinnovating.c:93:
+ else
+ do_translate = asc->fn_on;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#191: FILE: drivers/hid/hid-alwaysinnovating.c:94:
+ do_translate = asc->fn_on;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#193: FILE: drivers/hid/hid-alwaysinnovating.c:96:
+ if (do_translate) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#193: FILE: drivers/hid/hid-alwaysinnovating.c:96:
+ if (do_translate) {
+ if (value)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#194: FILE: drivers/hid/hid-alwaysinnovating.c:97:
+ if (value)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#194: FILE: drivers/hid/hid-alwaysinnovating.c:97:
+ if (value)
+ set_bit(usage->code, asc->pressed_fn);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#195: FILE: drivers/hid/hid-alwaysinnovating.c:98:
+ set_bit(usage->code, asc->pressed_fn);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#196: FILE: drivers/hid/hid-alwaysinnovating.c:99:
+ else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#196: FILE: drivers/hid/hid-alwaysinnovating.c:99:
+ else
+ clear_bit(usage->code, asc->pressed_fn);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#197: FILE: drivers/hid/hid-alwaysinnovating.c:100:
+ clear_bit(usage->code, asc->pressed_fn);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#199: FILE: drivers/hid/hid-alwaysinnovating.c:102:
+ input_event(input, usage->type, trans->to,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#200: FILE: drivers/hid/hid-alwaysinnovating.c:103:
+ input_event(input, usage->type, trans->to,
+ value);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#200: FILE: drivers/hid/hid-alwaysinnovating.c:103:
+ value);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#202: FILE: drivers/hid/hid-alwaysinnovating.c:105:
+ return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#203: FILE: drivers/hid/hid-alwaysinnovating.c:106:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#204: FILE: drivers/hid/hid-alwaysinnovating.c:107:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#206: FILE: drivers/hid/hid-alwaysinnovating.c:109:
+ return 0;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#210: FILE: drivers/hid/hid-alwaysinnovating.c:113:
+static int touchbook_input_mapping(struct hid_device *hdev,
+ struct hid_input *hi,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#210: FILE: drivers/hid/hid-alwaysinnovating.c:113:
+ struct hid_input *hi,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#211: FILE: drivers/hid/hid-alwaysinnovating.c:114:
+ struct hid_field *field, struct hid_usage *usage,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#212: FILE: drivers/hid/hid-alwaysinnovating.c:115:
+ unsigned long **bit, int *max)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#214: FILE: drivers/hid/hid-alwaysinnovating.c:117:
+ struct touchbook_key_translation *trans;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#217: FILE: drivers/hid/hid-alwaysinnovating.c:120:
+ for (trans = touchbook_fn_keys; trans->from; trans++)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#217: FILE: drivers/hid/hid-alwaysinnovating.c:120:
+ for (trans = touchbook_fn_keys; trans->from; trans++)
+ set_bit(trans->to, hi->input->keybit);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#218: FILE: drivers/hid/hid-alwaysinnovating.c:121:
+ set_bit(trans->to, hi->input->keybit);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#220: FILE: drivers/hid/hid-alwaysinnovating.c:123:
+ return 0;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#224: FILE: drivers/hid/hid-alwaysinnovating.c:127:
+static ssize_t show_swap_key(struct device *dev,
+ struct device_attribute *attr, char *buf)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#224: FILE: drivers/hid/hid-alwaysinnovating.c:127:
+ struct device_attribute *attr, char *buf)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#226: FILE: drivers/hid/hid-alwaysinnovating.c:129:
+ return snprintf(buf, PAGE_SIZE, "%lu\n", swap_key);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#230: FILE: drivers/hid/hid-alwaysinnovating.c:133:
+static ssize_t store_swap_key(struct device *dev,
+ struct device_attribute *attr,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#230: FILE: drivers/hid/hid-alwaysinnovating.c:133:
+ struct device_attribute *attr,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#231: FILE: drivers/hid/hid-alwaysinnovating.c:134:
+ const char *buf, size_t count)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#233: FILE: drivers/hid/hid-alwaysinnovating.c:136:
+ strict_strtoul(buf, 10, &swap_key);$

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#233: FILE: drivers/hid/hid-alwaysinnovating.c:136:
+ strict_strtoul(buf, 10, &swap_key);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#235: FILE: drivers/hid/hid-alwaysinnovating.c:138:
+ if (swap_key != 0 && swap_key != 1) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#235: FILE: drivers/hid/hid-alwaysinnovating.c:138:
+ if (swap_key != 0 && swap_key != 1) {
+ swap_key = 0;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#236: FILE: drivers/hid/hid-alwaysinnovating.c:139:
+ swap_key = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#237: FILE: drivers/hid/hid-alwaysinnovating.c:140:
+ return -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#238: FILE: drivers/hid/hid-alwaysinnovating.c:141:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#240: FILE: drivers/hid/hid-alwaysinnovating.c:143:
+ return count;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#244: FILE: drivers/hid/hid-alwaysinnovating.c:147:
+ __ATTR(swap_key, S_IRUGO | S_IWUGO, show_swap_key, store_swap_key),$

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUGO' are not preferred. Consider using octal permissions '0666'.
#244: FILE: drivers/hid/hid-alwaysinnovating.c:147:
+ __ATTR(swap_key, S_IRUGO | S_IWUGO, show_swap_key, store_swap_key),

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#249: FILE: drivers/hid/hid-alwaysinnovating.c:152:
+ int i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#250: FILE: drivers/hid/hid-alwaysinnovating.c:153:
+ int r;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#252: FILE: drivers/hid/hid-alwaysinnovating.c:155:
+ for (i = 0; i < ARRAY_SIZE(touchbook_hid_attrs); i++) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#252: FILE: drivers/hid/hid-alwaysinnovating.c:155:
+ for (i = 0; i < ARRAY_SIZE(touchbook_hid_attrs); i++) {
+ r = device_create_file(&hdev->dev,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#253: FILE: drivers/hid/hid-alwaysinnovating.c:156:
+ r = device_create_file(&hdev->dev,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#254: FILE: drivers/hid/hid-alwaysinnovating.c:157:
+ r = device_create_file(&hdev->dev,
+ &touchbook_hid_attrs[i]);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#254: FILE: drivers/hid/hid-alwaysinnovating.c:157:
+ &touchbook_hid_attrs[i]);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#256: FILE: drivers/hid/hid-alwaysinnovating.c:159:
+ if (r) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#256: FILE: drivers/hid/hid-alwaysinnovating.c:159:
+ if (r) {
+ dev_err(&hdev->dev, "failed to create sysfs file\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#257: FILE: drivers/hid/hid-alwaysinnovating.c:160:
+ dev_err(&hdev->dev, "failed to create sysfs file\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#258: FILE: drivers/hid/hid-alwaysinnovating.c:161:
+ return r;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#259: FILE: drivers/hid/hid-alwaysinnovating.c:162:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#260: FILE: drivers/hid/hid-alwaysinnovating.c:163:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#262: FILE: drivers/hid/hid-alwaysinnovating.c:165:
+ return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#267: FILE: drivers/hid/hid-alwaysinnovating.c:170:
+ int i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#269: FILE: drivers/hid/hid-alwaysinnovating.c:172:
+ for (i = 0; i < ARRAY_SIZE(touchbook_hid_attrs); i++)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#269: FILE: drivers/hid/hid-alwaysinnovating.c:172:
+ for (i = 0; i < ARRAY_SIZE(touchbook_hid_attrs); i++)
+ device_remove_file(&hdev->dev,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#270: FILE: drivers/hid/hid-alwaysinnovating.c:173:
+ device_remove_file(&hdev->dev,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#271: FILE: drivers/hid/hid-alwaysinnovating.c:174:
+ device_remove_file(&hdev->dev,
+ &touchbook_hid_attrs[i]);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#271: FILE: drivers/hid/hid-alwaysinnovating.c:174:
+ &touchbook_hid_attrs[i]);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#275: FILE: drivers/hid/hid-alwaysinnovating.c:178:
+static int touchbook_probe(struct hid_device *hdev,
+ const struct hid_device_id *id)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#275: FILE: drivers/hid/hid-alwaysinnovating.c:178:
+ const struct hid_device_id *id)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#277: FILE: drivers/hid/hid-alwaysinnovating.c:180:
+ unsigned long quirks = id->driver_data;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#278: FILE: drivers/hid/hid-alwaysinnovating.c:181:
+ struct touchbook_sc *asc;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#279: FILE: drivers/hid/hid-alwaysinnovating.c:182:
+ unsigned int connect_mask = HID_CONNECT_DEFAULT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#280: FILE: drivers/hid/hid-alwaysinnovating.c:183:
+ int ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#282: FILE: drivers/hid/hid-alwaysinnovating.c:185:
+ asc = kzalloc(sizeof(*asc), GFP_KERNEL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#283: FILE: drivers/hid/hid-alwaysinnovating.c:186:
+ if (asc == NULL) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#283: FILE: drivers/hid/hid-alwaysinnovating.c:186:
+ if (asc == NULL) {
+ dev_err(&hdev->dev, "can't alloc touchbook descriptor\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!asc"
#283: FILE: drivers/hid/hid-alwaysinnovating.c:186:
+ if (asc == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#284: FILE: drivers/hid/hid-alwaysinnovating.c:187:
+ dev_err(&hdev->dev, "can't alloc touchbook descriptor\n");$

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#284: FILE: drivers/hid/hid-alwaysinnovating.c:187:
+ if (asc == NULL) {
+ dev_err(&hdev->dev, "can't alloc touchbook descriptor\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#285: FILE: drivers/hid/hid-alwaysinnovating.c:188:
+ return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#286: FILE: drivers/hid/hid-alwaysinnovating.c:189:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#288: FILE: drivers/hid/hid-alwaysinnovating.c:191:
+ asc->quirks = quirks;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#289: FILE: drivers/hid/hid-alwaysinnovating.c:192:
+ hid_set_drvdata(hdev, asc);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#291: FILE: drivers/hid/hid-alwaysinnovating.c:194:
+ ret = hid_parse(hdev);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#292: FILE: drivers/hid/hid-alwaysinnovating.c:195:
+ if (ret) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#292: FILE: drivers/hid/hid-alwaysinnovating.c:195:
+ if (ret) {
+ dev_err(&hdev->dev, "parse failed\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#293: FILE: drivers/hid/hid-alwaysinnovating.c:196:
+ dev_err(&hdev->dev, "parse failed\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#294: FILE: drivers/hid/hid-alwaysinnovating.c:197:
+ goto err_free;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#295: FILE: drivers/hid/hid-alwaysinnovating.c:198:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#297: FILE: drivers/hid/hid-alwaysinnovating.c:200:
+ ret = touchbook_create_sysfs(hdev);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#298: FILE: drivers/hid/hid-alwaysinnovating.c:201:
+ if (ret) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#298: FILE: drivers/hid/hid-alwaysinnovating.c:201:
+ if (ret) {
+ dev_err(&hdev->dev, "failed to create sysfs entries\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#299: FILE: drivers/hid/hid-alwaysinnovating.c:202:
+ dev_err(&hdev->dev, "failed to create sysfs entries\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#300: FILE: drivers/hid/hid-alwaysinnovating.c:203:
+ goto err_free;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#301: FILE: drivers/hid/hid-alwaysinnovating.c:204:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#303: FILE: drivers/hid/hid-alwaysinnovating.c:206:
+ swap_key = (touchbook_revision >= 4) ? 1 : 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#305: FILE: drivers/hid/hid-alwaysinnovating.c:208:
+ ret = hid_hw_start(hdev, connect_mask);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#306: FILE: drivers/hid/hid-alwaysinnovating.c:209:
+ if (ret) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#306: FILE: drivers/hid/hid-alwaysinnovating.c:209:
+ if (ret) {
+ dev_err(&hdev->dev, "hw start failed\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#307: FILE: drivers/hid/hid-alwaysinnovating.c:210:
+ dev_err(&hdev->dev, "hw start failed\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#308: FILE: drivers/hid/hid-alwaysinnovating.c:211:
+ goto err_free;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#309: FILE: drivers/hid/hid-alwaysinnovating.c:212:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#311: FILE: drivers/hid/hid-alwaysinnovating.c:214:
+ return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#313: FILE: drivers/hid/hid-alwaysinnovating.c:216:
+ kfree(asc);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#314: FILE: drivers/hid/hid-alwaysinnovating.c:217:
+ return ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#319: FILE: drivers/hid/hid-alwaysinnovating.c:222:
+ hid_hw_stop(hdev);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#320: FILE: drivers/hid/hid-alwaysinnovating.c:223:
+ kfree(hid_get_drvdata(hdev));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#321: FILE: drivers/hid/hid-alwaysinnovating.c:224:
+ touchbook_remove_sysfs(hdev);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#325: FILE: drivers/hid/hid-alwaysinnovating.c:228:
+ { HID_USB_DEVICE(USB_VENDOR_ID_ALWAYSINNOVATING,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#326: FILE: drivers/hid/hid-alwaysinnovating.c:229:
+ USB_DEVICE_ID_ALWAYSINNOVATING_TOUCH_BOOK) },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#327: FILE: drivers/hid/hid-alwaysinnovating.c:230:
+ { }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#333: FILE: drivers/hid/hid-alwaysinnovating.c:236:
+ .name = "touchbook",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#334: FILE: drivers/hid/hid-alwaysinnovating.c:237:
+ .id_table = touchbook_devices,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#335: FILE: drivers/hid/hid-alwaysinnovating.c:238:
+ .probe = touchbook_probe,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#336: FILE: drivers/hid/hid-alwaysinnovating.c:239:
+ .remove = touchbook_remove,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#337: FILE: drivers/hid/hid-alwaysinnovating.c:240:
+ .event = touchbook_event,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#338: FILE: drivers/hid/hid-alwaysinnovating.c:241:
+ .input_mapping = touchbook_input_mapping,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#343: FILE: drivers/hid/hid-alwaysinnovating.c:246:
+ int ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#345: FILE: drivers/hid/hid-alwaysinnovating.c:248:
+ ret = hid_register_driver(&touchbook_driver);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#346: FILE: drivers/hid/hid-alwaysinnovating.c:249:
+ if (ret)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#346: FILE: drivers/hid/hid-alwaysinnovating.c:249:
+ if (ret)
+ printk(KERN_ERR "can't register touchbook driver\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#347: FILE: drivers/hid/hid-alwaysinnovating.c:250:
+ printk(KERN_ERR "can't register touchbook driver\n");$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#347: FILE: drivers/hid/hid-alwaysinnovating.c:250:
+ printk(KERN_ERR "can't register touchbook driver\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#349: FILE: drivers/hid/hid-alwaysinnovating.c:252:
+ return ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#354: FILE: drivers/hid/hid-alwaysinnovating.c:257:
+ hid_unregister_driver(&touchbook_driver);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#368: FILE: drivers/hid/hid-core.c:1252:
+ { HID_USB_DEVICE(USB_VENDOR_ID_ALWAYSINNOVATING,$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000047631.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 167 warnings, 9 checks, 319 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000047631.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
