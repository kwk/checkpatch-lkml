WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'M:' before 'P:'
#76: FILE: MAINTAINERS:3224:
+P:	Jarod Wilson
+M:	jarod@redhat.com

WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'M:' before 'P:'
#78: FILE: MAINTAINERS:3226:
+P:	Christoph Bartelmus
+M:	lirc@bartelmus.de

WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'L:' before 'W:'
#80: FILE: MAINTAINERS:3228:
+W:	http://www.lirc.org/
+L:	lirc-list@lists.sourceforge.net

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#148: FILE: drivers/input/lirc/lirc.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#176: FILE: drivers/input/lirc/lirc.h:29:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#206: FILE: drivers/input/lirc/lirc.h:59:
+#define LIRC_CAN_SEND(x) ((x)&LIRC_CAN_SEND_MASK)
                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#207: FILE: drivers/input/lirc/lirc.h:60:
+#define LIRC_CAN_REC(x) ((x)&LIRC_CAN_REC_MASK)
                             ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#253: FILE: drivers/input/lirc/lirc_dev.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#269: FILE: drivers/input/lirc/lirc_dev.c:17:
+ *  along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#270: FILE: drivers/input/lirc/lirc_dev.c:18:
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#311: FILE: drivers/input/lirc/lirc_dev.c:59:
+	struct mutex buffer_lock;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#413: FILE: drivers/input/lirc/lirc_dev.c:161:
+
+

WARNING:CONST_STRUCT: struct file_operations should normally be const
#414: FILE: drivers/input/lirc/lirc_dev.c:162:
+static struct file_operations fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#458: FILE: drivers/input/lirc/lirc_dev.c:206:
+		printk(KERN_ERR "lirc_dev: lirc_register_driver: "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'lirc_register_driver', this function's name, in a string
#458: FILE: drivers/input/lirc/lirc_dev.c:206:
+		printk(KERN_ERR "lirc_dev: lirc_register_driver: "

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#459: FILE: drivers/input/lirc/lirc_dev.c:207:
+		printk(KERN_ERR "lirc_dev: lirc_register_driver: "
+		       "driver pointer must be not NULL!\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#464: FILE: drivers/input/lirc/lirc_dev.c:212:
+	if (MAX_IRCTL_DEVICES <= d->minor) {

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'lirc_register_driver', this function's name, in a string
#465: FILE: drivers/input/lirc/lirc_dev.c:213:
+		dev_err(d->dev, "lirc_dev: lirc_register_driver: "

WARNING:SPLIT_STRING: quoted string split across lines
#466: FILE: drivers/input/lirc/lirc_dev.c:214:
+		dev_err(d->dev, "lirc_dev: lirc_register_driver: "
+			"\"minor\" must be between 0 and %d (%d)!\n",

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#467: FILE: drivers/input/lirc/lirc_dev.c:215:
+			MAX_IRCTL_DEVICES-1, d->minor);
 			                 ^

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#472: FILE: drivers/input/lirc/lirc_dev.c:220:
+	if (1 > d->code_length || (BUFLEN * 8) < d->code_length) {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'lirc_register_driver', this function's name, in a string
#473: FILE: drivers/input/lirc/lirc_dev.c:221:
+		dev_err(d->dev, "lirc_dev: lirc_register_driver: "

WARNING:SPLIT_STRING: quoted string split across lines
#474: FILE: drivers/input/lirc/lirc_dev.c:222:
+		dev_err(d->dev, "lirc_dev: lirc_register_driver: "
+			"code length in bits for minor (%d) "

WARNING:SPLIT_STRING: quoted string split across lines
#475: FILE: drivers/input/lirc/lirc_dev.c:223:
+			"code length in bits for minor (%d) "
+			"must be less than %d!\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'lirc_register_driver', this function's name, in a string
#481: FILE: drivers/input/lirc/lirc_dev.c:229:
+	dev_dbg(d->dev, "lirc_dev: lirc_register_driver: sample_rate: %d\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'lirc_register_driver', this function's name, in a string
#485: FILE: drivers/input/lirc/lirc_dev.c:233:
+			dev_err(d->dev, "lirc_dev: lirc_register_driver: "

WARNING:SPLIT_STRING: quoted string split across lines
#486: FILE: drivers/input/lirc/lirc_dev.c:234:
+			dev_err(d->dev, "lirc_dev: lirc_register_driver: "
+				"sample_rate must be between 2 and %d!\n", HZ);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'lirc_register_driver', this function's name, in a string
#491: FILE: drivers/input/lirc/lirc_dev.c:239:
+			dev_err(d->dev, "lirc_dev: lirc_register_driver: "

WARNING:SPLIT_STRING: quoted string split across lines
#492: FILE: drivers/input/lirc/lirc_dev.c:240:
+			dev_err(d->dev, "lirc_dev: lirc_register_driver: "
+				"add_to_buf cannot be NULL when "

WARNING:SPLIT_STRING: quoted string split across lines
#493: FILE: drivers/input/lirc/lirc_dev.c:241:
+				"add_to_buf cannot be NULL when "
+				"sample_rate is set\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'lirc_register_driver', this function's name, in a string
#498: FILE: drivers/input/lirc/lirc_dev.c:246:
+		dev_err(d->dev, "lirc_dev: lirc_register_driver: "

WARNING:SPLIT_STRING: quoted string split across lines
#499: FILE: drivers/input/lirc/lirc_dev.c:247:
+		dev_err(d->dev, "lirc_dev: lirc_register_driver: "
+			"fops->read and rbuf cannot all be NULL!\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'lirc_register_driver', this function's name, in a string
#505: FILE: drivers/input/lirc/lirc_dev.c:253:
+			dev_err(d->dev, "lirc_dev: lirc_register_driver: "

WARNING:SPLIT_STRING: quoted string split across lines
#506: FILE: drivers/input/lirc/lirc_dev.c:254:
+			dev_err(d->dev, "lirc_dev: lirc_register_driver: "
+				"neither read, poll nor ioctl can be NULL!\n");

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#521: FILE: drivers/input/lirc/lirc_dev.c:269:
+		if (MAX_IRCTL_DEVICES == minor) {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'lirc_register_driver', this function's name, in a string
#522: FILE: drivers/input/lirc/lirc_dev.c:270:
+			dev_err(d->dev, "lirc_dev: lirc_register_driver: "

WARNING:SPLIT_STRING: quoted string split across lines
#523: FILE: drivers/input/lirc/lirc_dev.c:271:
+			dev_err(d->dev, "lirc_dev: lirc_register_driver: "
+				"no free slots for drivers!\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'lirc_register_driver', this function's name, in a string
#528: FILE: drivers/input/lirc/lirc_dev.c:276:
+		dev_err(d->dev, "lirc_dev: lirc_register_driver: "

WARNING:SPLIT_STRING: quoted string split across lines
#529: FILE: drivers/input/lirc/lirc_dev.c:277:
+		dev_err(d->dev, "lirc_dev: lirc_register_driver: "
+			"minor (%d) just registered!\n", minor);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*ir)...) over kzalloc(sizeof(struct irctl)...)
#534: FILE: drivers/input/lirc/lirc_dev.c:282:
+	ir = kzalloc(sizeof(struct irctl), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#551: FILE: drivers/input/lirc/lirc_dev.c:299:
+	d->name[sizeof(d->name)-1] = '\0';
 	                       ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ir->buf)...) over kmalloc(sizeof(struct lirc_buffer)...)
#561: FILE: drivers/input/lirc/lirc_dev.c:309:
+		ir->buf = kmalloc(sizeof(struct lirc_buffer), GFP_KERNEL);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'lirc_register_driver', this function's name, in a string
#589: FILE: drivers/input/lirc/lirc_dev.c:337:
+			dev_err(d->dev, "lirc_dev: lirc_register_driver: "

WARNING:SPLIT_STRING: quoted string split across lines
#590: FILE: drivers/input/lirc/lirc_dev.c:338:
+			dev_err(d->dev, "lirc_dev: lirc_register_driver: "
+				"cannot run poll thread for minor = %d\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#622: FILE: drivers/input/lirc/lirc_dev.c:370:
+		printk(KERN_ERR "lirc_dev: lirc_unregister_driver: "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'lirc_unregister_driver', this function's name, in a string
#622: FILE: drivers/input/lirc/lirc_dev.c:370:
+		printk(KERN_ERR "lirc_dev: lirc_unregister_driver: "

WARNING:SPLIT_STRING: quoted string split across lines
#623: FILE: drivers/input/lirc/lirc_dev.c:371:
+		printk(KERN_ERR "lirc_dev: lirc_unregister_driver: "
+		       "\"minor (%d)\" must be between 0 and %d!\n",

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#624: FILE: drivers/input/lirc/lirc_dev.c:372:
+		       minor, MAX_IRCTL_DEVICES-1);
 		                               ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#633: FILE: drivers/input/lirc/lirc_dev.c:381:
+		printk(KERN_ERR "lirc_dev: lirc_unregister_driver: "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'lirc_unregister_driver', this function's name, in a string
#633: FILE: drivers/input/lirc/lirc_dev.c:381:
+		printk(KERN_ERR "lirc_dev: lirc_unregister_driver: "

WARNING:SPLIT_STRING: quoted string split across lines
#634: FILE: drivers/input/lirc/lirc_dev.c:382:
+		printk(KERN_ERR "lirc_dev: lirc_unregister_driver: "
+		       "minor (%d) device not registered!", minor);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#675: FILE: drivers/input/lirc/lirc_dev.c:423:
+		printk(KERN_WARNING "lirc_dev [%d]: open result = -ENODEV\n",

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#801: FILE: drivers/input/lirc/lirc_dev.c:549:
+			return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#809: FILE: drivers/input/lirc/lirc_dev.c:557:
+			return -ENOSYS;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#877: FILE: drivers/input/lirc/lirc_dev.c:625:
+		cmd = _IOC(_IOC_DIR(cmd32), _IOC_TYPE(cmd32), _IOC_NR(cmd32),
+		(_IOC_TYPECHECK(unsigned long)));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#918: FILE: drivers/input/lirc/lirc_dev.c:666:
+		printk(KERN_ERR "lirc_dev: %s(%s:%d): Unknown cmd %08x\n",

CHECK:LINE_SPACING: Please don't use multiple blank lines
#926: FILE: drivers/input/lirc/lirc_dev.c:674:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#970: FILE: drivers/input/lirc/lirc_dev.c:718:
+			 * -ERESTARTSYS */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#997: FILE: drivers/input/lirc/lirc_dev.c:745:
+			ret = copy_to_user((void *)buffer+written, buf,
 			                                 ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1021: FILE: drivers/input/lirc/lirc_dev.c:769:
+		struct irctl *ir;
+		ir = irctls[iminor(file->f_dentry->d_inode)];

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1029: FILE: drivers/input/lirc/lirc_dev.c:777:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1044: FILE: drivers/input/lirc/lirc_dev.c:792:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1052: FILE: drivers/input/lirc/lirc_dev.c:800:
+		printk(KERN_ERR "lirc_dev: class_create failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1060: FILE: drivers/input/lirc/lirc_dev.c:808:
+		printk(KERN_ERR "lirc_dev: alloc_chrdev_region failed\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1064: FILE: drivers/input/lirc/lirc_dev.c:812:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1065: FILE: drivers/input/lirc/lirc_dev.c:813:
+	printk(KERN_INFO "lirc_dev: IR Remote Control driver registered, "

WARNING:SPLIT_STRING: quoted string split across lines
#1066: FILE: drivers/input/lirc/lirc_dev.c:814:
+	printk(KERN_INFO "lirc_dev: IR Remote Control driver registered, "
+	       "major %d \n", MAJOR(lirc_base_dev));

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1066: FILE: drivers/input/lirc/lirc_dev.c:814:
+	       "major %d \n", MAJOR(lirc_base_dev));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1072: FILE: drivers/input/lirc/lirc_dev.c:820:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1078: FILE: drivers/input/lirc/lirc_dev.c:826:
+	printk(KERN_INFO "lirc_dev: module unloaded\n");

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1088: FILE: drivers/input/lirc/lirc_dev.c:836:
+module_param(debug, bool, S_IRUGO | S_IWUSR);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1095: FILE: drivers/input/lirc/lirc_dev.h:1:
+/*

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1119: FILE: drivers/input/lirc/lirc_dev.h:25:
+	spinlock_t lock;

WARNING:TYPO_SPELLING: 'tunning' may be misspelled - perhaps 'tuning'?
#1123: FILE: drivers/input/lirc/lirc_dev.h:29:
+	 * And should allow for some performance fine tunning later */
 	                                              ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1123: FILE: drivers/input/lirc/lirc_dev.h:29:
+	 * And should allow for some performance fine tunning later */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1137: FILE: drivers/input/lirc/lirc_dev.h:43:
+static inline int lirc_buffer_init(struct lirc_buffer *buf,
+				    unsigned int chunk_size,

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1144: FILE: drivers/input/lirc/lirc_dev.h:50:
+	buf->fifo = kfifo_alloc(size*chunk_size, GFP_KERNEL, &buf->lock);
 	                            ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1175: FILE: drivers/input/lirc/lirc_dev.h:81:
+static inline void lirc_buffer_read(struct lirc_buffer *buf,
+			       unsigned char *dest)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1182: FILE: drivers/input/lirc/lirc_dev.h:88:
+static inline void lirc_buffer_write(struct lirc_buffer *buf,
+				unsigned char *orig)

WARNING:SPACING: Unnecessary space before function pointer arguments
#1198: FILE: drivers/input/lirc/lirc_dev.h:104:
+	int (*add_to_buf) (void *data, struct lirc_buffer *buf);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1200: FILE: drivers/input/lirc/lirc_dev.h:106:
+	int (*set_use_inc) (void *data);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1201: FILE: drivers/input/lirc/lirc_dev.h:107:
+	void (*set_use_dec) (void *data);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1202: FILE: drivers/input/lirc/lirc_dev.h:108:
+	struct file_operations *fops;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1255: FILE: drivers/input/lirc/lirc_dev.h:161:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1262: FILE: drivers/input/lirc/lirc_dev.h:168:
+extern int lirc_register_driver(struct lirc_driver *d);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1265: FILE: drivers/input/lirc/lirc_dev.h:171:
+/* returns negative value on error or 0 if success
+*/

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1266: FILE: drivers/input/lirc/lirc_dev.h:172:
+extern int lirc_unregister_driver(int minor);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000057377.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 60 warnings, 25 checks, 1183 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000057377.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
