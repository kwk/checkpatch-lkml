WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#23: 
gcc 4.3 supports a new __attribute__((__cold__)) to mark functions cold. Any 

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#152: FILE: include/linux/compiler-gcc4.h:29:
+/* Mark functions as cold. gcc will assume any path leading to a call
+   to them will be unlikely.  This means a lot of manual unlikely()s

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#163: FILE: include/linux/compiler-gcc4.h:40:
+   the kernel context */

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __cold over __attribute__((__cold__))
#164: FILE: include/linux/compiler-gcc4.h:41:
+#define __cold			__attribute__((__cold__))

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#167: FILE: include/linux/compiler-gcc4.h:44:
+/* Use this to mark a path cold that isn't a function call
+   Use with care. The code generation advantage isn't large and it is rarely

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#168: FILE: include/linux/compiler-gcc4.h:45:
+   worth it to uglify your code with this. */

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#170: FILE: include/linux/compiler-gcc4.h:47:
+#define COLD()			cold_inline();

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#202: FILE: include/linux/init.h:43:
+#define __init		__attribute__ ((__section__ (".init.text"))) __cold

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#202: FILE: include/linux/init.h:43:
+#define __init		__attribute__ ((__section__ (".init.text"))) __cold

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".init.text") over __attribute__((__section__(".init.text")))
#202: FILE: include/linux/init.h:43:
+#define __init		__attribute__ ((__section__ (".init.text"))) __cold

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#206: FILE: include/linux/init.h:46:
+#define __exit_call	__attribute_used__ __attribute__ ((__section__ (".exitcall.exit"))) __cold

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#206: FILE: include/linux/init.h:46:
+#define __exit_call	__attribute_used__ __attribute__ ((__section__ (".exitcall.exit"))) __cold

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".exitcall.exit") over __attribute__((__section__(".exitcall.exit")))
#206: FILE: include/linux/init.h:46:
+#define __exit_call	__attribute_used__ __attribute__ ((__section__ (".exitcall.exit"))) __cold

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#215: FILE: include/linux/init.h:62:
+#define __exit		__attribute__ ((__section__(".exit.text"))) __cold

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".exit.text") over __attribute__((__section__(".exit.text")))
#215: FILE: include/linux/init.h:62:
+#define __exit		__attribute__ ((__section__(".exit.text"))) __cold

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#218: FILE: include/linux/init.h:64:
+#define __exit		__attribute_used__ __attribute__ ((__section__(".exit.text"))) __cold

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".exit.text") over __attribute__((__section__(".exit.text")))
#218: FILE: include/linux/init.h:64:
+#define __exit		__attribute_used__ __attribute__ ((__section__(".exit.text"))) __cold

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(1, 2) over __attribute__((format(printf, 1, 2)))
#231: FILE: include/linux/kernel.h:109:
+	__attribute__ ((NORET_AND format (printf, 1, 2))) __cold;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(1, 2) over __attribute__((format(printf, 1, 2)))
#240: FILE: include/linux/kernel.h:158:
+	__attribute__ ((format (printf, 1, 2))) __cold;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#248: FILE: include/linux/kernel.h:165:
+static inline int __cold printk(const char *s, ...) { return 0; }

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#257: FILE: include/linux/kernel.h:215:
+extern void dump_stack(void) __cold;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000403871.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 16 warnings, 1 checks, 152 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000403871.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
