WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#38: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#43: FILE: fs/aufs/xino.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#57: FILE: fs/aufs/xino.c:15:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#58: FILE: fs/aufs/xino.c:16:
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

CHECK:CAMELCASE: Avoid CamelCase: <LKTRTrace>
#76: FILE: fs/aufs/xino.c:34:
+	LKTRTrace("%.*s, sz %lu, *pos %Ld\n",

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#76: FILE: fs/aufs/xino.c:34:
+	LKTRTrace("%.*s, sz %lu, *pos %Ld\n",

CHECK:CAMELCASE: Avoid CamelCase: <AuDLNPair>
#77: FILE: fs/aufs/xino.c:35:
+		  AuDLNPair(file->f_dentry), (unsigned long)size, *pos);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#87: FILE: fs/aufs/xino.c:45:
+#if 0 /* reserved for future use */

CHECK:CAMELCASE: Avoid CamelCase: <AuTraceErr>
#92: FILE: fs/aufs/xino.c:50:
+	AuTraceErr(err);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#118: FILE: fs/aufs/xino.c:76:
+#if 0 /* reserved for future use */

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#147: FILE: fs/aufs/xino.c:105:
+	LKTRTrace("%.*s, sz %lu, *pos %Ld\n",

CHECK:BRACES: braces {} should be used on all arms of this statement
#155: FILE: fs/aufs/xino.c:113:
+	if (!au_test_wkq(current)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#168: FILE: fs/aufs/xino.c:126:
+	} else

CHECK:CAMELCASE: Avoid CamelCase: <AuDebugOn>
#194: FILE: fs/aufs/xino.c:152:
+	AuDebugOn(bindex < 0);

CHECK:CAMELCASE: Avoid CamelCase: <AuWarn>
#207: FILE: fs/aufs/xino.c:165:
+		AuWarn("err b%d, (%d)\n", bindex, err);

CHECK:BRACES: braces {} should be used on all arms of this statement
#230: FILE: fs/aufs/xino.c:188:
+	if (args) {
[...]
+	} else
[...]

CHECK:CAMELCASE: Avoid CamelCase: <AuErr>
#240: FILE: fs/aufs/xino.c:198:
+		AuErr("wkq %d\n", wkq_err);

CHECK:BRACES: Unbalanced braces around else statement
#245: FILE: fs/aufs/xino.c:203:
+	} else

CHECK:CAMELCASE: Avoid CamelCase: <AuErr1>
#246: FILE: fs/aufs/xino.c:204:
+		AuErr1("no memory\n");

CHECK:CAMELCASE: Avoid CamelCase: <Au_LOFF_MAX>
#253: FILE: fs/aufs/xino.c:211:
+#define Au_LOFF_MAX	((loff_t)LLONG_MAX)

CHECK:CAMELCASE: Avoid CamelCase: <AuTraceEnter>
#261: FILE: fs/aufs/xino.c:219:
+	AuTraceEnter();

CHECK:CAMELCASE: Avoid CamelCase: <AuIOErr1>
#265: FILE: fs/aufs/xino.c:223:
+		AuIOErr1("too large hi%lu\n", h_ino);

CHECK:CAMELCASE: Avoid CamelCase: <AuIOErr>
#273: FILE: fs/aufs/xino.c:231:
+	AuIOErr("write failed (%ld)\n", (long)sz);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#292: FILE: fs/aufs/xino.c:250:
+	BUILD_BUG_ON(sizeof(long long) != sizeof(Au_LOFF_MAX)
+		     || ((loff_t) - 1) > 0);

CHECK:SPACING: No space is necessary after a cast
#292: FILE: fs/aufs/xino.c:250:
+		     || ((loff_t) - 1) > 0);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited after that '-' (ctx:WxW)
#292: FILE: fs/aufs/xino.c:250:
+		     || ((loff_t) - 1) > 0);
 		                  ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#305: FILE: fs/aufs/xino.c:263:
+		if (unlikely(au_opt_test(mnt_flags, TRUNC_XINO)
+			     && au_test_trunc_xino(br->br_mnt->mnt_sb)))

WARNING:LINE_SPACING: Missing a blank line after declarations
#320: FILE: fs/aufs/xino.c:278:
+	ino_t ino;
+	AuDebugOn(bit < 0 || page_bits <= bit);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <MtxMustLock>
#344: FILE: fs/aufs/xino.c:302:
+	MtxMustLock(&sbinfo->si_xib_mtx);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#346: FILE: fs/aufs/xino.c:304:
+	AuDebugOn(pindex > ULONG_MAX / PAGE_SIZE
+		  || !au_opt_test(sbinfo->si_mntflags, XINO));

CHECK:BRACES: braces {} should be used on all arms of this statement
#361: FILE: fs/aufs/xino.c:319:
+	if (i_size_read(xib->f_dentry->d_inode) >= pos + PAGE_SIZE)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#363: FILE: fs/aufs/xino.c:321:
+	else {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#461: FILE: fs/aufs/xino.c:419:
+	BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUGO' are not preferred. Consider using octal permissions '0666'.
#540: FILE: fs/aufs/xino.c:498:
+			       S_IRUGO | S_IWUGO);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:CAMELCASE: Avoid CamelCase: <AuLsc_I_PARENT>
#551: FILE: fs/aufs/xino.c:509:
+	mutex_lock_nested(&h_dir->i_mutex, AuLsc_I_PARENT);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#606: FILE: fs/aufs/xino.c:564:
+		.nd	= NULL,
 		 ^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:CAMELCASE: Avoid CamelCase: <IMustLock>
#614: FILE: fs/aufs/xino.c:572:
+	IMustLock(dir);

CHECK:CAMELCASE: Avoid CamelCase: <AuLNPair>
#625: FILE: fs/aufs/xino.c:583:
+		AuErr("%.*s lookup err %ld\n", AuLNPair(name), PTR_ERR(dentry));

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUGO' are not preferred. Consider using octal permissions '0666'.
#628: FILE: fs/aufs/xino.c:586:
+	err = vfsub_create(dir, dentry, S_IRUGO | S_IWUGO, NULL, /*dlgt*/0);

CHECK:CAMELCASE: Avoid CamelCase: <AuTraceErrPtr>
#663: FILE: fs/aufs/xino.c:621:
+	AuTraceErrPtr(file);

CHECK:CAMELCASE: Avoid CamelCase: <SiMustWriteLock>
#687: FILE: fs/aufs/xino.c:645:
+	SiMustWriteLock(sb);

WARNING:LINE_SPACING: Missing a blank line after declarations
#699: FILE: fs/aufs/xino.c:657:
+		struct super_block *tgt_sb = br->br_mnt->mnt_sb;
+		for (bindex = 0; bindex <= bend; bindex++)

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#728: FILE: fs/aufs/xino.c:686:
+#if 0 /* reserved for future use */

CHECK:CAMELCASE: Avoid CamelCase: <AuXino_INVALID_HGEN>
#730: FILE: fs/aufs/xino.c:688:
+	WARN_ON(xinoe.h_gen == AuXino_INVALID_HGEN);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#737: FILE: fs/aufs/xino.c:695:
+
+

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#763: FILE: fs/aufs/xino.c:721:
+		AuWarn("testing a large xino file %Ld\n", (long long)pend);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#868: FILE: fs/aufs/xino.c:826:
+#if 0 /* reserved for future use */

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#904: FILE: fs/aufs/xino.c:862:
+	return ERR_PTR(-ENOSYS);

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#917: FILE: fs/aufs/xino.c:875:
+	return ERR_PTR(-ENOSYS);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1120: FILE: fs/aufs/xino.c:1078:
+			skip = (cur_parent == parent
+				&& dname->len == cur_name->len

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1121: FILE: fs/aufs/xino.c:1079:
+				&& dname->len == cur_name->len
+				&& !memcmp(dname->name, cur_name->name,

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1220: FILE: fs/aufs/xino.c:1178:
+		if (au_br_writable(au_sbr_perm(sb, bindex))
+		    && !au_test_nfs(au_h_dptr(sb->s_root, bindex)->d_sb)) {

WARNING:SPLIT_STRING: quoted string split across lines
#1245: FILE: fs/aufs/xino.c:1203:
+			AuErr("xino or noxino option is required "
+			      "since %s is NFS\n", AUFS_XINO_DEFPATH);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000277619.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 18 warnings, 32 checks, 1212 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000277619.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
