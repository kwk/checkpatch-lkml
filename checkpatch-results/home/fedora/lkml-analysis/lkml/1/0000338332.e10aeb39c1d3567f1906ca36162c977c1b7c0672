WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#38: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#43: FILE: fs/unionfs/dentry.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#71: FILE: fs/unionfs/dentry.c:29:
+				       struct nameidata *nd)
 				                         ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#81: FILE: fs/unionfs/dentry.c:39:
+	if (nd)
 	    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#82: FILE: fs/unionfs/dentry.c:40:
+		memcpy(&lowernd, nd, sizeof(struct nameidata));
 		                 ^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#93: FILE: fs/unionfs/dentry.c:51:
+	BUG_ON(dbstart(dentry) == -1);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#108: FILE: fs/unionfs/dentry.c:66:
+		BUG_ON(IS_ROOT(dentry));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#112: FILE: fs/unionfs/dentry.c:70:
+		BUG_ON(pdgen != sbgen);	/* should never happen here */

WARNING:LINE_SPACING: Missing a blank line after declarations
#119: FILE: fs/unionfs/dentry.c:77:
+			struct dentry *lower_dentry;
+			for (bindex = bstart; bindex <= bend; bindex++) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#137: FILE: fs/unionfs/dentry.c:95:
+				struct inode *lower_inode;
+				for (bindex = bstart; bindex <= bend;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#140: FILE: fs/unionfs/dentry.c:98:
+						unionfs_lower_inode_idx(

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#143: FILE: fs/unionfs/dentry.c:101:
+					iput(lower_inode);
 					^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#179: FILE: fs/unionfs/dentry.c:137:
+	BUG_ON(bstart == -1);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#183: FILE: fs/unionfs/dentry.c:141:
+		if (!lower_dentry || !lower_dentry->d_op
+		    || !lower_dentry->d_op->d_revalidate)

WARNING:SPLIT_STRING: quoted string split across lines
#263: FILE: fs/unionfs/dentry.c:221:
+				pr_info("unionfs: new lower inode mtime "
+					"(bindex=%d, name=%s)\n", bindex,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#274: FILE: fs/unionfs/dentry.c:232:
+				pr_info("unionfs: new lower inode ctime "
+					"(bindex=%d, name=%s)\n", bindex,

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#308: FILE: fs/unionfs/dentry.c:266:
+		if (inode->i_state & (I_FREEING|I_WILL_FREE))
 		                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#325: FILE: fs/unionfs/dentry.c:283:
+bool __unionfs_d_revalidate_chain(struct dentry *dentry, struct nameidata *nd,
                                                                            ^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#366: FILE: fs/unionfs/dentry.c:324:
+		BUG_ON(IS_ROOT(dtmp));

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#379: FILE: fs/unionfs/dentry.c:337:
+	chain = kzalloc(chain_len * sizeof(struct dentry *), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#381: FILE: fs/unionfs/dentry.c:339:
+		printk(KERN_CRIT "unionfs: no more memory in %s\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#382: FILE: fs/unionfs/dentry.c:340:
+		       __FUNCTION__);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#391: FILE: fs/unionfs/dentry.c:349:
+	for (i = chain_len-1; i >= 0; i--) {
 	                  ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#410: FILE: fs/unionfs/dentry.c:368:
+		valid = __unionfs_d_revalidate_one(chain[i], nd);
 		                                             ^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#427: FILE: fs/unionfs/dentry.c:385:
+
+

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#451: FILE: fs/unionfs/dentry.c:409:
+	valid = __unionfs_d_revalidate_one(dentry, nd);
 	                                           ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#481: FILE: fs/unionfs/dentry.c:439:
+static int unionfs_d_revalidate(struct dentry *dentry, struct nameidata *nd)
                                                                          ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#488: FILE: fs/unionfs/dentry.c:446:
+	err = __unionfs_d_revalidate_chain(dentry, nd, false);
 	                                           ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#491: FILE: fs/unionfs/dentry.c:449:
+		unionfs_check_nd(nd);
 		                 ^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#512: FILE: fs/unionfs/dentry.c:470:
+	if (unlikely(!UNIONFS_D(dentry))) {
[...]
+	} else if (dbstart(dentry) < 0)
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#513: FILE: fs/unionfs/dentry.c:471:
+		printk(KERN_ERR "unionfs: dentry without private data: %.*s\n",

WARNING:RETURN_VOID: void function return statements are not generally useful
#542: FILE: fs/unionfs/dentry.c:500:
+	return;
+}

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#552: FILE: fs/unionfs/dentry.c:510:
+	BUG_ON(!dentry);

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#575: FILE: fs/unionfs/dentry.c:533:
+		iput(unionfs_lower_inode(inode));
 		^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#581: FILE: fs/unionfs/dentry.c:539:
+	iput(inode);
 	^^^^

WARNING:CONST_STRUCT: struct dentry_operations should normally be const
#586: FILE: fs/unionfs/dentry.c:544:
+struct dentry_operations unionfs_dops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000338332.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 30 warnings, 6 checks, 548 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000338332.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
