WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
With feedback, this patch corrects operation of the kobject release operation

WARNING:BAD_SIGN_OFF: Use a single space after Cc:
#31: 
CC:             Alan Cox alan@lxorguk.ukuu.org.uk

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

ERROR:BAD_SIGN_OFF: Unrecognized email address: 'Alan Cox alan@lxorguk.ukuu.org.uk'
#31: 
CC:             Alan Cox alan@lxorguk.ukuu.org.uk

WARNING:BAD_SIGN_OFF: Use a single space after Signed-off-by:
#32: 
Signed-off-by:	Doug Thompson <dougthompson@xmission.com>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#104: FILE: drivers/edac/edac_device.c:51:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: missing space after return type
#231: FILE: drivers/edac/edac_device_sysfs.c:107:
+	ssize_t(*show) (struct edac_device_ctl_info *, char *);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: Unnecessary space before function pointer arguments
#231: FILE: drivers/edac/edac_device_sysfs.c:107:
+	ssize_t(*show) (struct edac_device_ctl_info *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct edac_device_ctl_info *' should also have an identifier name
#231: FILE: drivers/edac/edac_device_sysfs.c:107:
+	ssize_t(*show) (struct edac_device_ctl_info *, char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#231: FILE: drivers/edac/edac_device_sysfs.c:107:
+	ssize_t(*show) (struct edac_device_ctl_info *, char *);

WARNING:SPACING: missing space after return type
#232: FILE: drivers/edac/edac_device_sysfs.c:108:
+	ssize_t(*store) (struct edac_device_ctl_info *, const char *, size_t);

WARNING:SPACING: Unnecessary space before function pointer arguments
#232: FILE: drivers/edac/edac_device_sysfs.c:108:
+	ssize_t(*store) (struct edac_device_ctl_info *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct edac_device_ctl_info *' should also have an identifier name
#232: FILE: drivers/edac/edac_device_sysfs.c:108:
+	ssize_t(*store) (struct edac_device_ctl_info *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#232: FILE: drivers/edac/edac_device_sysfs.c:108:
+	ssize_t(*store) (struct edac_device_ctl_info *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#232: FILE: drivers/edac/edac_device_sysfs.c:108:
+	ssize_t(*store) (struct edac_device_ctl_info *, const char *, size_t);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#375: FILE: drivers/edac/edac_device_sysfs.c:299:
+void edac_device_unregister_sysfs_main_kobj(

WARNING:TYPO_SPELLING: 'dependant' may be misspelled - perhaps 'dependent'?
#477: FILE: drivers/edac/edac_device_sysfs.c:541:
+	 * and this instance is dependant on the main
 	                        ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: No space is necessary after a cast
#506: FILE: drivers/edac/edac_device_sysfs.c:566:
+				(struct attribute *) sysfs_attrib);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#543: FILE: drivers/edac/edac_device_sysfs.c:600:
+			sysfs_remove_file(&block->kobj,
+				(struct attribute *) sysfs_attrib);

CHECK:SPACING: No space is necessary after a cast
#543: FILE: drivers/edac/edac_device_sysfs.c:600:
+				(struct attribute *) sysfs_attrib);

WARNING:TYPO_SPELLING: 'dependant' may be misspelled - perhaps 'dependent'?
#581: FILE: drivers/edac/edac_device_sysfs.c:639:
+	 * and this instance is dependant on the main
 	                        ^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#606: FILE: drivers/edac/edac_device_sysfs.c:662:
+		err = edac_device_create_block(edac_dev, instance,
+						&instance->blocks[i]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#613: FILE: drivers/edac/edac_device_sysfs.c:667:
+				edac_device_delete_block(edac_dev,
+							&instance->blocks[j]);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#670: FILE: drivers/edac/edac_device_sysfs.c:752:
+static int edac_device_add_main_sysfs_attributes(

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sysfs_attrib->attr.name"
#688: FILE: drivers/edac/edac_device_sysfs.c:763:
+		while (sysfs_attrib->attr.name != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#690: FILE: drivers/edac/edac_device_sysfs.c:765:
+			err = sysfs_create_file(&edac_dev->kobj,
 				(struct attribute*) sysfs_attrib);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#710: FILE: drivers/edac/edac_device_sysfs.c:781:
+static void edac_device_remove_main_sysfs_attributes(

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sysfs_attrib->attr.name"
#721: FILE: drivers/edac/edac_device_sysfs.c:792:
+		while (sysfs_attrib->attr.name != NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#723: FILE: drivers/edac/edac_device_sysfs.c:794:
+			sysfs_remove_file(&edac_dev->kobj,
+					(struct attribute *) sysfs_attrib);

CHECK:SPACING: No space is necessary after a cast
#723: FILE: drivers/edac/edac_device_sysfs.c:794:
+					(struct attribute *) sysfs_attrib);

WARNING:SPLIT_STRING: quoted string split across lines
#791: FILE: drivers/edac/edac_device_sysfs.c:846:
+		debugf0("%s() edac_device_create_instances() "
+			"returned err= %d\n", __func__, err);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#795: FILE: drivers/edac/edac_device_sysfs.c:850:
+
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#845: FILE: drivers/edac/edac_module.h:40:
+extern int edac_device_register_sysfs_main_kobj(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#845: FILE: drivers/edac/edac_module.h:40:
+extern int edac_device_register_sysfs_main_kobj(

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#847: FILE: drivers/edac/edac_module.h:42:
+extern void edac_device_unregister_sysfs_main_kobj(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#847: FILE: drivers/edac/edac_module.h:42:
+extern void edac_device_unregister_sysfs_main_kobj(

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000406602.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 15 warnings, 19 checks, 763 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000406602.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
