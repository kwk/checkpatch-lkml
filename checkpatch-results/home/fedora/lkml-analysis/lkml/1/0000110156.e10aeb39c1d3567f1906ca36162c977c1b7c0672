WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#63: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#68: FILE: arch/x86/kernel/cpu/mcheck/mce_amd.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#139: FILE: arch/x86/kernel/cpu/mcheck/mce_amd.c:72:
+};
+static DEFINE_PER_CPU(struct threshold_bank *, threshold_banks[NR_BANKS]);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#204: FILE: arch/x86/kernel/cpu/mcheck/mce_amd.c:137:
+			if (block == 0)
[...]
+			else if (block == 1) {
[...]
+			} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#211: FILE: arch/x86/kernel/cpu/mcheck/mce_amd.c:144:
+			} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#225: FILE: arch/x86/kernel/cpu/mcheck/mce_amd.c:158:
+			if (!(high & MASK_CNTP_HI)  ||
+			     (high & MASK_LOCKED_HI))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#296: FILE: arch/x86/kernel/cpu/mcheck/mce_amd.c:229:
+			if (!(high & MASK_CNTP_HI)  ||
+			     (high & MASK_LOCKED_HI))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#304: FILE: arch/x86/kernel/cpu/mcheck/mce_amd.c:237:
+			machine_check_poll(MCP_TIMESTAMP,
+					&__get_cpu_var(mce_poll_banks));

WARNING:SPACING: Unnecessary space before function pointer arguments
#326: FILE: arch/x86/kernel/cpu/mcheck/mce_amd.c:259:
+	ssize_t (*show) (struct threshold_block *, char *);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct threshold_block *' should also have an identifier name
#326: FILE: arch/x86/kernel/cpu/mcheck/mce_amd.c:259:
+	ssize_t (*show) (struct threshold_block *, char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#326: FILE: arch/x86/kernel/cpu/mcheck/mce_amd.c:259:
+	ssize_t (*show) (struct threshold_block *, char *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#327: FILE: arch/x86/kernel/cpu/mcheck/mce_amd.c:260:
+	ssize_t (*store) (struct threshold_block *, const char *, size_t count);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct threshold_block *' should also have an identifier name
#327: FILE: arch/x86/kernel/cpu/mcheck/mce_amd.c:260:
+	ssize_t (*store) (struct threshold_block *, const char *, size_t count);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#327: FILE: arch/x86/kernel/cpu/mcheck/mce_amd.c:260:
+	ssize_t (*store) (struct threshold_block *, const char *, size_t count);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'name' may be better as '(name)' to avoid precedence issues
#330: FILE: arch/x86/kernel/cpu/mcheck/mce_amd.c:263:
+#define SHOW_FIELDS(name)						\
+static ssize_t show_ ## name(struct threshold_block *b, char *buf)	\
+{									\
+	return sprintf(buf, "%lx\n", (unsigned long) b->name);		\
+}

CHECK:SPACING: No space is necessary after a cast
#333: FILE: arch/x86/kernel/cpu/mcheck/mce_amd.c:266:
+	return sprintf(buf, "%lx\n", (unsigned long) b->name);		\

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#335: FILE: arch/x86/kernel/cpu/mcheck/mce_amd.c:268:
+}
+SHOW_FIELDS(interrupt_enable)

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#344: FILE: arch/x86/kernel/cpu/mcheck/mce_amd.c:277:
+	if (strict_strtoul(buf, 0, &new) < 0)

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#364: FILE: arch/x86/kernel/cpu/mcheck/mce_amd.c:297:
+	if (strict_strtoul(buf, 0, &new) < 0)

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#414: FILE: arch/x86/kernel/cpu/mcheck/mce_amd.c:347:
+#define RW_ATTR(val)							\
+static struct threshold_attr val = {					\
+	.attr	= {.name = __stringify(val), .mode = 0644 },		\
+	.show	= show_## val,						\
+	.store	= store_## val,						\
+};

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#458: FILE: arch/x86/kernel/cpu/mcheck/mce_amd.c:391:
+static struct sysfs_ops threshold_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bank >= NR_BANKS'
#477: FILE: arch/x86/kernel/cpu/mcheck/mce_amd.c:410:
+	if ((bank >= NR_BANKS) || (block >= NR_BLOCKS))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'block >= NR_BLOCKS'
#477: FILE: arch/x86/kernel/cpu/mcheck/mce_amd.c:410:
+	if ((bank >= NR_BANKS) || (block >= NR_BLOCKS))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#491: FILE: arch/x86/kernel/cpu/mcheck/mce_amd.c:424:
+	if (!(high & MASK_CNTP_HI)  ||
+	     (high & MASK_LOCKED_HI))

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*b)...) over kzalloc(sizeof(struct threshold_block)...)
#494: FILE: arch/x86/kernel/cpu/mcheck/mce_amd.c:427:
+	b = kzalloc(sizeof(struct threshold_block), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*b)...) over kzalloc(sizeof(struct threshold_bank)...)
#591: FILE: arch/x86/kernel/cpu/mcheck/mce_amd.c:524:
+	b = kzalloc(sizeof(struct threshold_bank), GFP_KERNEL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#664: FILE: arch/x86/kernel/cpu/mcheck/mce_amd.c:597:
+static void deallocate_threshold_block(unsigned int cpu,
+						 unsigned int bank)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#757: FILE: arch/x86/kernel/cpu/mcheck/mce_amd.c:690:
+	unsigned lcpu = 0;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1486: FILE: arch/x86/kernel/cpu/mcheck/mce_intel.c:1:
+/*

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/processor.h> instead of <asm/processor.h>
#1496: FILE: arch/x86/kernel/cpu/mcheck/mce_intel.c:11:
+#include <asm/processor.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1534: FILE: arch/x86/kernel/cpu/mcheck/mce_intel.c:49:
+	*banks = min_t(unsigned, MAX_NR_BANKS, cap & 0xff);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1553: FILE: arch/x86/kernel/cpu/mcheck/mce_intel.c:68:
+		printk(KERN_INFO "CPU %d MCA banks", smp_processor_id());

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#1555: FILE: arch/x86/kernel/cpu/mcheck/mce_intel.c:70:
+	printk(KERN_CONT " %s:%d", type, num);

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#1555: FILE: arch/x86/kernel/cpu/mcheck/mce_intel.c:70:
+	printk(KERN_CONT " %s:%d", type, num);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#1602: FILE: arch/x86/kernel/cpu/mcheck/mce_intel.c:117:
+		printk(KERN_CONT "\n");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#1602: FILE: arch/x86/kernel/cpu/mcheck/mce_intel.c:117:
+		printk(KERN_CONT "\n");

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1640: FILE: arch/x86/kernel/cpu/mcheck/mce_intel.c:155:
+		val &= ~(CMCI_EN|CMCI_THRESHOLD_MASK);
 		                ^

WARNING:TYPO_SPELLING: 'Reenable' may be misspelled - perhaps 'Re-enable'?
#1678: FILE: arch/x86/kernel/cpu/mcheck/mce_intel.c:193:
+ * Reenable CMCI on this CPU in case a CPU down failed.
    ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LINE_SPACING: Missing a blank line after declarations
#1683: FILE: arch/x86/kernel/cpu/mcheck/mce_intel.c:198:
+	int banks;
+	if (cmci_supported(&banks))

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1702: FILE: arch/x86/kernel/cpu/mcheck/mce_intel.c:217:
+	apic_write(APIC_LVTCMCI, THRESHOLD_APIC_VECTOR|APIC_DM_FIXED);
 	                                              ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000110156.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 22 warnings, 18 checks, 938 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000110156.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
