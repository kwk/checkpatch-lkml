WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#83: 
I had to add src_vma/dst_vma to use proper ->mm pointers, and in the case of

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#97: 
#define _GNU_SOURCE 1

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#99: 
#include <stdio.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#100: 
#include <stdlib.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#101: 
#include <fcntl.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#102: 
#include <unistd.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#103: 
#include <memory.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#104: 
#include <pthread.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#105: 
#include <getopt.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#106: 
#include <errno.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#107: 
#include <sys/types.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#108: 
#include <sys/wait.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#110: 
#define FILESIZE (12*1024*1024) 

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#111: 
#define READSIZE  (1024*1024)

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#113: 
#define FILENAME    "test_%.04d.tmp"

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#114: 
#define FILECOUNT   100

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#115: 
#define MIN_WORKERS 2

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#116: 
#define MAX_WORKERS 256

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#117: 
#define PAGE_SIZE   4096

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#119: 
#define true	1

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#120: 
#define false	0

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#127: 
#define PATTERN (0xfa)

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#416: 
#define _GNU_SOURCE 1

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#418: 
#include <stdio.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#419: 
#include <stdlib.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#420: 
#include <string.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#421: 
#include <unistd.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#422: 
#include <fcntl.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#423: 
#include <errno.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#424: 
#include <sys/types.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#425: 
#include <sys/wait.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#427: 
#include <pthread.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#428: 
#include <libaio.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#439: 
#define PATTERN		0x2a  // '*'

WARNING:MEMORY_BARRIER: memory barrier without comment
#705: FILE: arch/x86/mm/gup.c:95:
+			smp_mb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#737: FILE: arch/x86/mm/gup.c:121:
+static noinline int gup_huge_pmd(pmd_t *pmdp, unsigned long addr,
 		unsigned long end, int write, struct page **pages, int *nr)

WARNING:MEMORY_BARRIER: memory barrier without comment
#752: FILE: arch/x86/mm/gup.c:145:
+		smp_mb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#783: FILE: arch/x86/mm/gup.c:187:
+static noinline int gup_huge_pud(pud_t *pudp, unsigned long addr,
 		unsigned long end, int write, struct page **pages, int *nr)

WARNING:MEMORY_BARRIER: memory barrier without comment
#798: FILE: arch/x86/mm/gup.c:211:
+		smp_mb();

WARNING:LONG_LINE: line length of 118 exceeds 100 columns
#831: FILE: include/linux/hugetlb.h:23:
+int copy_hugetlb_page_range(struct mm_struct *, struct mm_struct *, struct vm_area_struct *, struct vm_area_struct *);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mm_struct *' should also have an identifier name
#831: FILE: include/linux/hugetlb.h:23:
+int copy_hugetlb_page_range(struct mm_struct *, struct mm_struct *, struct vm_area_struct *, struct vm_area_struct *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mm_struct *' should also have an identifier name
#831: FILE: include/linux/hugetlb.h:23:
+int copy_hugetlb_page_range(struct mm_struct *, struct mm_struct *, struct vm_area_struct *, struct vm_area_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vm_area_struct *' should also have an identifier name
#831: FILE: include/linux/hugetlb.h:23:
+int copy_hugetlb_page_range(struct mm_struct *, struct mm_struct *, struct vm_area_struct *, struct vm_area_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vm_area_struct *' should also have an identifier name
#831: FILE: include/linux/hugetlb.h:23:
+int copy_hugetlb_page_range(struct mm_struct *, struct mm_struct *, struct vm_area_struct *, struct vm_area_struct *);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#840: FILE: include/linux/hugetlb.h:80:
+#define copy_hugetlb_page_range(src, dst, dst_vma, src_vma)	({ BUG(); 0; })

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#897: FILE: mm/hugetlb.c:1700:
+static struct page *hugetlbfs_pagecache_page(struct hstate *h,
+			struct vm_area_struct *vma, unsigned long address)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#946: FILE: mm/hugetlb.c:1743:
+		orig_entry = entry = huge_ptep_get(src_pte);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:MEMORY_BARRIER: memory barrier without comment
#953: FILE: mm/hugetlb.c:1750:
+				smp_mb();

CHECK:BRACES: Unbalanced braces around else statement
#965: FILE: mm/hugetlb.c:1762:
+			else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#968: FILE: mm/hugetlb.c:1765:
+				int cow_ret;
+				spin_unlock(&dst->page_table_lock);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#970: FILE: mm/hugetlb.c:1767:
+				flush_tlb_range(src_vma, addr, addr+sz);
 				                                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#991: FILE: mm/hugetlb.c:1788:
+				BUG_ON(!pte_same(huge_ptep_get(src_pte),

CHECK:BRACES: Unbalanced braces around else statement
#1041: FILE: mm/hugetlb.c:2268:
+			else {

WARNING:MEMORY_BARRIER: memory barrier without comment
#1116: FILE: mm/memory.c:610:
+			smp_mb();

CHECK:BRACES: braces {} should be used on all arms of this statement
#1118: FILE: mm/memory.c:612:
+				if (unlikely(!trylock_page(page)))
[...]
+				else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1120: FILE: mm/memory.c:614:
+				else {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1121: FILE: mm/memory.c:615:
+					BUG_ON(page_mapcount(page) != 2);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1200: FILE: mm/memory.c:702:
+		pte_t *_src_pte = src_pte-1, *_dst_pte = dst_pte-1;
 		                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1200: FILE: mm/memory.c:702:
+		pte_t *_src_pte = src_pte-1, *_dst_pte = dst_pte-1;
 		                                                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1210: FILE: mm/memory.c:712:
+					addr-PAGE_SIZE,
 					    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1217: FILE: mm/memory.c:719:
+		set_pte_at(src_mm, addr-PAGE_SIZE, src_pte-1,
 		                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1217: FILE: mm/memory.c:719:
+		set_pte_at(src_mm, addr-PAGE_SIZE, src_pte-1,
 		                                          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1218: FILE: mm/memory.c:720:
+			   pte_mkwrite(*(src_pte-1)));
 			                        ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1296: FILE: mm/memory.c:804:
+	if (!(src_vma->vm_flags & (VM_HUGETLB|VM_NONLINEAR|VM_PFNMAP|VM_INSERTPAGE))) {
 	                                     ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1296: FILE: mm/memory.c:804:
+	if (!(src_vma->vm_flags & (VM_HUGETLB|VM_NONLINEAR|VM_PFNMAP|VM_INSERTPAGE))) {
 	                                                  ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1296: FILE: mm/memory.c:804:
+	if (!(src_vma->vm_flags & (VM_HUGETLB|VM_NONLINEAR|VM_PFNMAP|VM_INSERTPAGE))) {
 	                                                            ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1380: FILE: mm/memory.c:1979:
+	BUG_ON(!old_page);

CHECK:CAMELCASE: Avoid CamelCase: <__SetPageUptodate>
#1419: FILE: mm/memory.c:2018:
+	__SetPageUptodate(new_page);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <__ClearPageGUP>
#1449: FILE: mm/swap.c:68:
+			__ClearPageGUP(page);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000156418.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 49 warnings, 20 checks, 703 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000156418.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
