WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#27: 
There are several places where recommended attributes are implemented in the

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#72: FILE: fs/nfs/dir.c:1247:
+			error = security_dentry_init_security(dentry,
+					attr.ia_mode,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "attr.ia_label"
#85: FILE: fs/nfs/dir.c:1260:
+	if (attr.ia_label != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "attr.ia_label"
#93: FILE: fs/nfs/dir.c:1268:
+	if (attr.ia_label != NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#106: FILE: fs/nfs/dir.c:1296:
+		status = security_dentry_init_security(dentry,
+				attr.ia_mode,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "attr.ia_label"
#116: FILE: fs/nfs/dir.c:1306:
+	if (attr.ia_label != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "attr.ia_label"
#127: FILE: fs/nfs/dir.c:1317:
+	if (attr.ia_label != NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#140: FILE: fs/nfs/dir.c:1341:
+		error = security_dentry_init_security(dentry, attr.ia_mode,
+				&attr.ia_label, &attr.ia_label_len);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "attr.ia_label"
#151: FILE: fs/nfs/dir.c:1352:
+	if (attr.ia_label != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "attr.ia_label"
#159: FILE: fs/nfs/dir.c:1360:
+	if (attr.ia_label != NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#172: FILE: fs/nfs/dir.c:1575:
+		error = security_dentry_init_security(dentry,
+				attr.ia_mode,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "attr.ia_label"
#187: FILE: fs/nfs/dir.c:1605:
+		if (attr.ia_label != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "attr.ia_label"
#198: FILE: fs/nfs/dir.c:1627:
+	if (attr.ia_label != NULL)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'fattr->label != NULL'
#236: FILE: fs/nfs/inode.c:250:
+	if ((fattr->valid & NFS_ATTR_FATTR_V4) &&
+	    (fattr->bitmap[1] & FATTR4_WORD1_SECURITY_LABEL) &&
+	    (fattr->label != NULL) &&
+	    (inode->i_security != NULL)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'inode->i_security != NULL'
#236: FILE: fs/nfs/inode.c:250:
+	if ((fattr->valid & NFS_ATTR_FATTR_V4) &&
+	    (fattr->bitmap[1] & FATTR4_WORD1_SECURITY_LABEL) &&
+	    (fattr->label != NULL) &&
+	    (inode->i_security != NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "fattr->label"
#238: FILE: fs/nfs/inode.c:252:
+	    (fattr->label != NULL) &&

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "inode->i_security"
#239: FILE: fs/nfs/inode.c:253:
+	    (inode->i_security != NULL)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#245: FILE: fs/nfs/inode.c:259:
+			printk(KERN_ERR

WARNING:LONG_LINE: line length of 135 exceeds 100 columns
#272: FILE: fs/nfs/inode.c:380:
+#define NFS_VALID_ATTRS (ATTR_MODE|ATTR_UID|ATTR_GID|ATTR_SIZE|ATTR_ATIME|ATTR_ATIME_SET|ATTR_MTIME|ATTR_MTIME_SET|ATTR_SECURITY_LABEL)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#272: FILE: fs/nfs/inode.c:380:
+#define NFS_VALID_ATTRS (ATTR_MODE|ATTR_UID|ATTR_GID|ATTR_SIZE|ATTR_ATIME|ATTR_ATIME_SET|ATTR_MTIME|ATTR_MTIME_SET|ATTR_SECURITY_LABEL)
                                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#272: FILE: fs/nfs/inode.c:380:
+#define NFS_VALID_ATTRS (ATTR_MODE|ATTR_UID|ATTR_GID|ATTR_SIZE|ATTR_ATIME|ATTR_ATIME_SET|ATTR_MTIME|ATTR_MTIME_SET|ATTR_SECURITY_LABEL)
                                            ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#272: FILE: fs/nfs/inode.c:380:
+#define NFS_VALID_ATTRS (ATTR_MODE|ATTR_UID|ATTR_GID|ATTR_SIZE|ATTR_ATIME|ATTR_ATIME_SET|ATTR_MTIME|ATTR_MTIME_SET|ATTR_SECURITY_LABEL)
                                                     ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#272: FILE: fs/nfs/inode.c:380:
+#define NFS_VALID_ATTRS (ATTR_MODE|ATTR_UID|ATTR_GID|ATTR_SIZE|ATTR_ATIME|ATTR_ATIME_SET|ATTR_MTIME|ATTR_MTIME_SET|ATTR_SECURITY_LABEL)
                                                               ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#272: FILE: fs/nfs/inode.c:380:
+#define NFS_VALID_ATTRS (ATTR_MODE|ATTR_UID|ATTR_GID|ATTR_SIZE|ATTR_ATIME|ATTR_ATIME_SET|ATTR_MTIME|ATTR_MTIME_SET|ATTR_SECURITY_LABEL)
                                                                          ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#272: FILE: fs/nfs/inode.c:380:
+#define NFS_VALID_ATTRS (ATTR_MODE|ATTR_UID|ATTR_GID|ATTR_SIZE|ATTR_ATIME|ATTR_ATIME_SET|ATTR_MTIME|ATTR_MTIME_SET|ATTR_SECURITY_LABEL)
                                                                                         ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#272: FILE: fs/nfs/inode.c:380:
+#define NFS_VALID_ATTRS (ATTR_MODE|ATTR_UID|ATTR_GID|ATTR_SIZE|ATTR_ATIME|ATTR_ATIME_SET|ATTR_MTIME|ATTR_MTIME_SET|ATTR_SECURITY_LABEL)
                                                                                                    ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#272: FILE: fs/nfs/inode.c:380:
+#define NFS_VALID_ATTRS (ATTR_MODE|ATTR_UID|ATTR_GID|ATTR_SIZE|ATTR_ATIME|ATTR_ATIME_SET|ATTR_MTIME|ATTR_MTIME_SET|ATTR_SECURITY_LABEL)
                                                                                                                   ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#339: FILE: fs/nfs/nfs4proc.c:1442:
+			int error;
+			error = security_dentry_init_security(dentry,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#340: FILE: fs/nfs/nfs4proc.c:1443:
+			error = security_dentry_init_security(dentry,
+					attr.ia_mode,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "attr.ia_label"
#360: FILE: fs/nfs/nfs4proc.c:1460:
+	if (attr.ia_label != NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#372: FILE: fs/nfs/nfs4proc.c:1537:
+		if (server->flags & NFS4_MOUNT_SECURITY_LABEL &&
+			res.attr_bitmask[1] & FATTR4_WORD1_SECURITY_LABEL) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#374: FILE: fs/nfs/nfs4proc.c:1539:
+		} else
[...]
+		server->attr_bitmask[1] &= ~FATTR4_WORD1_SECURITY_LABEL;

CHECK:BRACES: Unbalanced braces around else statement
#374: FILE: fs/nfs/nfs4proc.c:1539:
+		} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#434: FILE: fs/nfs/nfs4proc.c:2944:
+		err = nfs4_handle_exception(NFS_SERVER(inode),
+				_nfs4_get_security_label(inode, buf, buflen),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#441: FILE: fs/nfs/nfs4proc.c:2951:
+static int _nfs4_do_set_security_label(struct inode *inode,
+				      struct iattr *sattr,

CHECK:BRACES: braces {} should be used on all arms of this statement
#465: FILE: fs/nfs/nfs4proc.c:2975:
+	if (nfs4_copy_delegation_stateid(&args.stateid, inode)) {
[...]
+	} else if (state != NULL) {
[...]
+	} else
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "state"
#467: FILE: fs/nfs/nfs4proc.c:2977:
+	} else if (state != NULL) {

CHECK:BRACES: Unbalanced braces around else statement
#470: FILE: fs/nfs/nfs4proc.c:2980:
+	} else

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "state"
#474: FILE: fs/nfs/nfs4proc.c:2984:
+	if (status == 0 && state != NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#480: FILE: fs/nfs/nfs4proc.c:2990:
+static int nfs4_do_set_security_label(struct inode *inode,
+				     struct iattr *sattr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#489: FILE: fs/nfs/nfs4proc.c:2999:
+		err = nfs4_handle_exception(NFS_SERVER(inode),
+			_nfs4_do_set_security_label(inode, sattr, fattr, state),

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ctx"
#524: FILE: fs/nfs/nfs4proc.c:3034:
+	if (ctx != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ctx"
#532: FILE: fs/nfs/nfs4proc.c:3042:
+	if (ctx != NULL)

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#576: FILE: fs/nfs/nfs4xdr.c:2968:
+static int decode_attr_security_label(struct xdr_stream *xdr, uint32_t *bitmap, char **ctx, u32 *ctxlen)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#578: FILE: fs/nfs/nfs4xdr.c:2970:
+	uint32_t len;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ctx"
#589: FILE: fs/nfs/nfs4xdr.c:2981:
+			if (*ctx != NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#591: FILE: fs/nfs/nfs4xdr.c:2983:
+					printk(KERN_ERR

CHECK:BRACES: Unbalanced braces around else statement
#602: FILE: fs/nfs/nfs4xdr.c:2994:
+		} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#603: FILE: fs/nfs/nfs4xdr.c:2995:
+			printk(KERN_WARNING "%s: label too long (%u)!\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#604: FILE: fs/nfs/nfs4xdr.c:2996:
+			printk(KERN_WARNING "%s: label too long (%u)!\n",
+					__FUNCTION__, len);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#604: FILE: fs/nfs/nfs4xdr.c:2996:
+					__FUNCTION__, len);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#617: FILE: fs/nfs/nfs4xdr.c:3234:
+	if ((status = decode_attr_security_label(xdr, bitmap,

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nfss->nfs_client->rpc_ops->version == 4'
#634: FILE: fs/nfs/super.c:497:
+	if ((nfss->nfs_client->rpc_ops->version == 4) &&
+	    (nfss->attr_bitmask[1] & FATTR4_WORD1_SECURITY_LABEL))

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#636: FILE: fs/nfs/super.c:499:
+		seq_printf(m, ",security_label");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#648: FILE: fs/nfs/super.c:559:
+			seq_printf(m, ",security_label");

ERROR:CODE_INDENT: code indent should use tabs where possible
#687: FILE: security/selinux/hooks.c:2762:
+ ^Iisec->sid = newsid;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#687: FILE: security/selinux/hooks.c:2762:
+ ^Iisec->sid = newsid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#687: FILE: security/selinux/hooks.c:2762:
+ ^Iisec->sid = newsid;$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000314321.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 13 warnings, 43 checks, 590 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000314321.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
