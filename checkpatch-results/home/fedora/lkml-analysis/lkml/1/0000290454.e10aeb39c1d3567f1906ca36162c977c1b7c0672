WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#41: FILE: fs/hppfs/hppfs.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#58: FILE: fs/hppfs/hppfs.c:18:
+#include <asm/uaccess.h>

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#117: FILE: fs/hppfs/hppfs.c:77:
+		else len += parent->d_name.len + 1;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!name"
#124: FILE: fs/hppfs/hppfs.c:84:
+	if (name == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#134: FILE: fs/hppfs/hppfs.c:94:
+		}
+		else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#134: FILE: fs/hppfs/hppfs.c:94:
+		else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "file"
#154: FILE: fs/hppfs/hppfs.c:114:
+	if (file != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!host_file"
#158: FILE: fs/hppfs/hppfs.c:118:
+	if (host_file == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#159: FILE: fs/hppfs/hppfs.c:119:
+		printk(KERN_ERR "file_removed : allocation failed\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'file_removed', this function's name, in a string
#159: FILE: fs/hppfs/hppfs.c:119:
+		printk(KERN_ERR "file_removed : allocation failed\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "file"
#163: FILE: fs/hppfs/hppfs.c:123:
+	if (file != NULL) {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#179: FILE: fs/hppfs/hppfs.c:139:
+				   struct nameidata *nd)
 				                     ^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!proc_dentry"
#195: FILE: fs/hppfs/hppfs.c:155:
+	if (proc_dentry == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!proc_dentry"
#197: FILE: fs/hppfs/hppfs.c:157:
+		if (proc_dentry == NULL) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#218: FILE: fs/hppfs/hppfs.c:178:
+ ^Id_add(dentry, inode);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#218: FILE: fs/hppfs/hppfs.c:178:
+ ^Id_add(dentry, inode);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#218: FILE: fs/hppfs/hppfs.c:178:
+ ^Id_add(dentry, inode);$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#233: FILE: fs/hppfs/hppfs.c:193:
+	ssize_t (*read)(struct file *, char __user *, size_t, loff_t *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char __user *' should also have an identifier name
#233: FILE: fs/hppfs/hppfs.c:193:
+	ssize_t (*read)(struct file *, char __user *, size_t, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#233: FILE: fs/hppfs/hppfs.c:193:
+	ssize_t (*read)(struct file *, char __user *, size_t, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t *' should also have an identifier name
#233: FILE: fs/hppfs/hppfs.c:193:
+	ssize_t (*read)(struct file *, char __user *, size_t, loff_t *);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_buf"
#259: FILE: fs/hppfs/hppfs.c:219:
+	if (new_buf == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#260: FILE: fs/hppfs/hppfs.c:220:
+		printk(KERN_ERR "hppfs_read_file : kmalloc failed\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'hppfs_read_file', this function's name, in a string
#260: FILE: fs/hppfs/hppfs.c:220:
+		printk(KERN_ERR "hppfs_read_file : kmalloc failed\n");

CHECK:BRACES: braces {} should be used on all arms of this statement
#267: FILE: fs/hppfs/hppfs.c:227:
+		if (err < 0) {
[...]
+		} else if (err == 0)
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#268: FILE: fs/hppfs/hppfs.c:228:
+			printk(KERN_ERR "hppfs_read : read failed, "

WARNING:SPLIT_STRING: quoted string split across lines
#269: FILE: fs/hppfs/hppfs.c:229:
+			printk(KERN_ERR "hppfs_read : read failed, "
+			       "errno = %d\n", err);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:BRACES: braces {} should be used on all arms of this statement
#296: FILE: fs/hppfs/hppfs.c:256:
+	if (hppfs->contents != NULL) {
[...]
+	} else if (hppfs->host_fd != -1) {
[...]
+	else count = read_proc(hppfs->proc_file, buf, count, ppos, 1);
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "hppfs->contents"
#296: FILE: fs/hppfs/hppfs.c:256:
+	if (hppfs->contents != NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#319: FILE: fs/hppfs/hppfs.c:279:
+			printk(KERN_ERR "hppfs_read : seek failed, "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'hppfs_read', this function's name, in a string
#319: FILE: fs/hppfs/hppfs.c:279:
+			printk(KERN_ERR "hppfs_read : seek failed, "

WARNING:SPLIT_STRING: quoted string split across lines
#320: FILE: fs/hppfs/hppfs.c:280:
+			printk(KERN_ERR "hppfs_read : seek failed, "
+			       "errno = %d\n", err);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#327: FILE: fs/hppfs/hppfs.c:287:
+	else count = read_proc(hppfs->proc_file, buf, count, ppos, 1);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#327: FILE: fs/hppfs/hppfs.c:287:
+	}
+	else count = read_proc(hppfs->proc_file, buf, count, ppos, 1);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#337: FILE: fs/hppfs/hppfs.c:297:
+	ssize_t (*write)(struct file *, const char __user *, size_t, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char __user *' should also have an identifier name
#337: FILE: fs/hppfs/hppfs.c:297:
+	ssize_t (*write)(struct file *, const char __user *, size_t, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#337: FILE: fs/hppfs/hppfs.c:297:
+	ssize_t (*write)(struct file *, const char __user *, size_t, loff_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t *' should also have an identifier name
#337: FILE: fs/hppfs/hppfs.c:297:
+	ssize_t (*write)(struct file *, const char __user *, size_t, loff_t *);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!head"
#366: FILE: fs/hppfs/hppfs.c:326:
+	if (head == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!data"
#386: FILE: fs/hppfs/hppfs.c:346:
+	if (data == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#387: FILE: fs/hppfs/hppfs.c:347:
+		printk(KERN_ERR "hppfs_get_data : head allocation failed\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'hppfs_get_data', this function's name, in a string
#387: FILE: fs/hppfs/hppfs.c:347:
+		printk(KERN_ERR "hppfs_get_data : head allocation failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#402: FILE: fs/hppfs/hppfs.c:362:
+			printk(KERN_ERR "hppfs_get_data : failed to shut down "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'hppfs_get_data', this function's name, in a string
#402: FILE: fs/hppfs/hppfs.c:362:
+			printk(KERN_ERR "hppfs_get_data : failed to shut down "

WARNING:SPLIT_STRING: quoted string split across lines
#403: FILE: fs/hppfs/hppfs.c:363:
+			printk(KERN_ERR "hppfs_get_data : failed to shut down "
+			       "socket\n");

CHECK:BRACES: braces {} should be used on all arms of this statement
#409: FILE: fs/hppfs/hppfs.c:369:
+		if (n < 0) {
[...]
+		} else if (n == 0)
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#411: FILE: fs/hppfs/hppfs.c:371:
+			printk(KERN_ERR "hppfs_get_data : read failed, "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'hppfs_get_data', this function's name, in a string
#411: FILE: fs/hppfs/hppfs.c:371:
+			printk(KERN_ERR "hppfs_get_data : read failed, "

WARNING:SPLIT_STRING: quoted string split across lines
#412: FILE: fs/hppfs/hppfs.c:372:
+			printk(KERN_ERR "hppfs_get_data : read failed, "
+			       "errno = %d\n", err);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#424: FILE: fs/hppfs/hppfs.c:384:
+			printk(KERN_ERR "hppfs_get_data : data allocation "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'hppfs_get_data', this function's name, in a string
#424: FILE: fs/hppfs/hppfs.c:384:
+			printk(KERN_ERR "hppfs_get_data : data allocation "

WARNING:SPLIT_STRING: quoted string split across lines
#425: FILE: fs/hppfs/hppfs.c:385:
+			printk(KERN_ERR "hppfs_get_data : data allocation "
+			       "failed\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!data"
#447: FILE: fs/hppfs/hppfs.c:407:
+	if (data == NULL)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#450: FILE: fs/hppfs/hppfs.c:410:
+^I*data = ((struct hppfs_private ) { .host_fd  ^I^I= -1,$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#450: FILE: fs/hppfs/hppfs.c:410:
+	*data = ((struct hppfs_private ) { .host_fd  		= -1,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#451: FILE: fs/hppfs/hppfs.c:411:
+^I^I^I^I^I   .len  ^I^I= -1,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#452: FILE: fs/hppfs/hppfs.c:412:
+^I^I^I^I^I   .contents ^I^I= NULL } );$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#452: FILE: fs/hppfs/hppfs.c:412:
+					   .contents 		= NULL } );

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!data"
#477: FILE: fs/hppfs/hppfs.c:437:
+	if (data == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!host_file"
#481: FILE: fs/hppfs/hppfs.c:441:
+	if (host_file == NULL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#500: FILE: fs/hppfs/hppfs.c:460:
+			printk(KERN_ERR "hppfs_open : failed to open '%s', "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'hppfs_open', this function's name, in a string
#500: FILE: fs/hppfs/hppfs.c:460:
+			printk(KERN_ERR "hppfs_open : failed to open '%s', "

WARNING:SPLIT_STRING: quoted string split across lines
#501: FILE: fs/hppfs/hppfs.c:461:
+			printk(KERN_ERR "hppfs_open : failed to open '%s', "
+			       "errno = %d\n", host_file, -fd);

CHECK:BRACES: Unbalanced braces around else statement
#512: FILE: fs/hppfs/hppfs.c:472:
+		} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#513: FILE: fs/hppfs/hppfs.c:473:
+			printk(KERN_ERR "hppfs_open : failed to open a socket "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'hppfs_open', this function's name, in a string
#513: FILE: fs/hppfs/hppfs.c:473:
+			printk(KERN_ERR "hppfs_open : failed to open a socket "

WARNING:SPLIT_STRING: quoted string split across lines
#514: FILE: fs/hppfs/hppfs.c:474:
+			printk(KERN_ERR "hppfs_open : failed to open a socket "
+			       "in '%s', errno = %d\n", host_file, -fd);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!data"
#539: FILE: fs/hppfs/hppfs.c:499:
+	if (data == NULL)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#563: FILE: fs/hppfs/hppfs.c:523:
+	loff_t (*llseek)(struct file *, loff_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#563: FILE: fs/hppfs/hppfs.c:523:
+	loff_t (*llseek)(struct file *, loff_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#563: FILE: fs/hppfs/hppfs.c:523:
+	loff_t (*llseek)(struct file *, loff_t, int);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "llseek"
#567: FILE: fs/hppfs/hppfs.c:527:
+	if (llseek != NULL) {

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#606: FILE: fs/hppfs/hppfs.c:566:
+	int (*readdir)(struct file *, void *, filldir_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#606: FILE: fs/hppfs/hppfs.c:566:
+	int (*readdir)(struct file *, void *, filldir_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'filldir_t' should also have an identifier name
#606: FILE: fs/hppfs/hppfs.c:566:
+	int (*readdir)(struct file *, void *, filldir_t);

ERROR:CODE_INDENT: code indent should use tabs where possible
#608: FILE: fs/hppfs/hppfs.c:568:
+^I^I                      { .vfs_dirent  ^I= ent,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#608: FILE: fs/hppfs/hppfs.c:568:
+^I^I                      { .vfs_dirent  ^I= ent,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#609: FILE: fs/hppfs/hppfs.c:569:
+^I^I^I^I^I.filldir ^I= filldir,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#610: FILE: fs/hppfs/hppfs.c:570:
+^I^I^I^I^I.dentry  ^I= file->f_path.dentry$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#689: FILE: fs/hppfs/hppfs.c:649:
+static void *hppfs_follow_link(struct dentry *dentry, struct nameidata *nd)
                                                                         ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#695: FILE: fs/hppfs/hppfs.c:655:
+	return proc_dentry->d_inode->i_op->follow_link(proc_dentry, nd);
 	                                                            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#698: FILE: fs/hppfs/hppfs.c:658:
+int hppfs_permission(struct inode *inode, int mask, struct nameidata *nd)
                                                                       ^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#777: FILE: fs/hppfs/hppfs.c:737:
+	iput(root_inode);
 	^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#792: FILE: fs/hppfs/hppfs.c:752:
+^I.owner ^I^I= THIS_MODULE,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#793: FILE: fs/hppfs/hppfs.c:753:
+^I.name ^I^I= "hppfs",$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#794: FILE: fs/hppfs/hppfs.c:754:
+^I.get_sb ^I= hppfs_read_super,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#796: FILE: fs/hppfs/hppfs.c:756:
+^I.fs_flags ^I= 0,$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000290454.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 8 errors, 59 warnings, 20 checks, 783 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000290454.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
