WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
In this patch, we provide SMP extend to Blackfin kernel and memory management code

WARNING:BAD_SIGN_OFF: Non-standard signature: 'Singed-off-by:' - perhaps 'Signed-off-by:'?
#36: 
Singed-off-by: Graf Yang <graf.yang@analog.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#113: FILE: arch/blackfin/kernel/bfin_ksyms.c:74:
+EXPORT_SYMBOL(__raw_atomic_clear_asm);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#114: FILE: arch/blackfin/kernel/bfin_ksyms.c:75:
+EXPORT_SYMBOL(__raw_atomic_set_asm);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#115: FILE: arch/blackfin/kernel/bfin_ksyms.c:76:
+EXPORT_SYMBOL(__raw_atomic_xor_asm);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#116: FILE: arch/blackfin/kernel/bfin_ksyms.c:77:
+EXPORT_SYMBOL(__raw_atomic_test_asm);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#117: FILE: arch/blackfin/kernel/bfin_ksyms.c:78:
+EXPORT_SYMBOL(__raw_xchg_1_asm);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#118: FILE: arch/blackfin/kernel/bfin_ksyms.c:79:
+EXPORT_SYMBOL(__raw_xchg_2_asm);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#119: FILE: arch/blackfin/kernel/bfin_ksyms.c:80:
+EXPORT_SYMBOL(__raw_xchg_4_asm);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#120: FILE: arch/blackfin/kernel/bfin_ksyms.c:81:
+EXPORT_SYMBOL(__raw_cmpxchg_1_asm);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#121: FILE: arch/blackfin/kernel/bfin_ksyms.c:82:
+EXPORT_SYMBOL(__raw_cmpxchg_2_asm);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#122: FILE: arch/blackfin/kernel/bfin_ksyms.c:83:
+EXPORT_SYMBOL(__raw_cmpxchg_4_asm);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#123: FILE: arch/blackfin/kernel/bfin_ksyms.c:84:
+EXPORT_SYMBOL(__raw_spin_is_locked_asm);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#124: FILE: arch/blackfin/kernel/bfin_ksyms.c:85:
+EXPORT_SYMBOL(__raw_spin_lock_asm);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#125: FILE: arch/blackfin/kernel/bfin_ksyms.c:86:
+EXPORT_SYMBOL(__raw_spin_trylock_asm);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#126: FILE: arch/blackfin/kernel/bfin_ksyms.c:87:
+EXPORT_SYMBOL(__raw_spin_unlock_asm);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#127: FILE: arch/blackfin/kernel/bfin_ksyms.c:88:
+EXPORT_SYMBOL(__raw_read_lock_asm);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#128: FILE: arch/blackfin/kernel/bfin_ksyms.c:89:
+EXPORT_SYMBOL(__raw_read_trylock_asm);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#129: FILE: arch/blackfin/kernel/bfin_ksyms.c:90:
+EXPORT_SYMBOL(__raw_read_unlock_asm);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#130: FILE: arch/blackfin/kernel/bfin_ksyms.c:91:
+EXPORT_SYMBOL(__raw_write_lock_asm);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#131: FILE: arch/blackfin/kernel/bfin_ksyms.c:92:
+EXPORT_SYMBOL(__raw_write_trylock_asm);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#132: FILE: arch/blackfin/kernel/bfin_ksyms.c:93:
+EXPORT_SYMBOL(__raw_write_unlock_asm);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#133: FILE: arch/blackfin/kernel/bfin_ksyms.c:94:
+EXPORT_SYMBOL(__raw_bit_set_asm);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#134: FILE: arch/blackfin/kernel/bfin_ksyms.c:95:
+EXPORT_SYMBOL(__raw_bit_clear_asm);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#135: FILE: arch/blackfin/kernel/bfin_ksyms.c:96:
+EXPORT_SYMBOL(__raw_bit_toggle_asm);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#136: FILE: arch/blackfin/kernel/bfin_ksyms.c:97:
+EXPORT_SYMBOL(__raw_bit_test_asm);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#137: FILE: arch/blackfin/kernel/bfin_ksyms.c:98:
+EXPORT_SYMBOL(__raw_bit_test_set_asm);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#138: FILE: arch/blackfin/kernel/bfin_ksyms.c:99:
+EXPORT_SYMBOL(__raw_bit_test_clear_asm);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#139: FILE: arch/blackfin/kernel/bfin_ksyms.c:100:
+EXPORT_SYMBOL(__raw_bit_test_toggle_asm);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#140: FILE: arch/blackfin/kernel/bfin_ksyms.c:101:
+EXPORT_SYMBOL(__raw_uncached_fetch_asm);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#141: FILE: arch/blackfin/kernel/bfin_ksyms.c:102:
+EXPORT_SYMBOL(__raw_smp_mark_barrier_asm);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#142: FILE: arch/blackfin/kernel/bfin_ksyms.c:103:
+EXPORT_SYMBOL(__raw_smp_check_barrier_asm);

CHECK:SPACING: No space is necessary after a cast
#183: FILE: arch/blackfin/kernel/irqchip.c:75:
+	int i = *(loff_t *) v, j;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#254: FILE: arch/blackfin/kernel/module.c:348:
+			printk(KERN_ERR "module %s: cannot relocate in L1: %u (SMP kernel)",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#255: FILE: arch/blackfin/kernel/module.c:349:
+			printk(KERN_ERR "module %s: cannot relocate in L1: %u (SMP kernel)",
+				       mod->name, ELF32_R_TYPE(rel[i].r_info));

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Shdr>
#275: FILE: arch/blackfin/kernel/module.c:470:
+			err = apply_relocate_add((Elf_Shdr *) sechdrs, strtab,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#276: FILE: arch/blackfin/kernel/module.c:471:
+			err = apply_relocate_add((Elf_Shdr *) sechdrs, strtab,
 					   symindex, i, mod);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#307: FILE: arch/blackfin/kernel/process.c:349:
+	if (addr >= get_l1_scratch_start()
+	    && addr + size <= get_l1_scratch_start() + L1_SCRATCH_LENGTH)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#313: FILE: arch/blackfin/kernel/process.c:353:
+	if (addr >= get_l1_code_start() + (_etext_l1 - _stext_l1)
+	    && addr + size <= get_l1_code_start() + L1_CODE_LENGTH)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#320: FILE: arch/blackfin/kernel/process.c:358:
+	if (addr >= get_l1_data_a_start() + (_ebss_l1 - _sdata_l1)
+	    && addr + size <= get_l1_data_a_start() + L1_DATA_A_LENGTH)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#327: FILE: arch/blackfin/kernel/process.c:363:
+	if (addr >= get_l1_data_b_start() + (_ebss_b_l1 - _sdata_b_l1)
+	    && addr + size <= get_l1_data_b_start() + L1_DATA_B_LENGTH)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#342: FILE: arch/blackfin/kernel/ptrace.c:224:
+			if (L1_CODE_LENGTH != 0 && addr >= get_l1_code_start()
+			    && addr + sizeof(tmp) <= get_l1_code_start() + L1_CODE_LENGTH) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#353: FILE: arch/blackfin/kernel/ptrace.c:304:
+			if (L1_CODE_LENGTH != 0 && addr >= get_l1_code_start()
+			    && addr + sizeof(data) <= get_l1_code_start() + L1_CODE_LENGTH) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#473: FILE: arch/blackfin/kernel/setup.c:119:
+	printk(KERN_INFO "Instruction Cache Enabled for CPU%u\n", cpu);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#476: FILE: arch/blackfin/kernel/setup.c:122:
+	printk(KERN_INFO "Data Cache Enabled for CPU%u"

WARNING:STRING_FRAGMENTS: Consecutive strings are generally better as a single string
#705: FILE: arch/blackfin/kernel/setup.c:1055:
+	seq_printf(m, "processor\t: %d\n" "vendor_id\t: %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#706: FILE: arch/blackfin/kernel/setup.c:1056:
+	seq_printf(m, "processor\t: %d\n" "vendor_id\t: %s\n",
+		*(unsigned int *)v, vendor);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#715: FILE: arch/blackfin/kernel/setup.c:1066:
+		cpu, cpudata->cclk/1000000, sclk/1000000,
 		                  ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#715: FILE: arch/blackfin/kernel/setup.c:1066:
+		cpu, cpudata->cclk/1000000, sclk/1000000,
 		                                ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#724: FILE: arch/blackfin/kernel/setup.c:1075:
+		cpudata->cclk/1000000, cpudata->cclk%1000000,
 		             ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#724: FILE: arch/blackfin/kernel/setup.c:1075:
+		cpudata->cclk/1000000, cpudata->cclk%1000000,
 		                                    ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#760: FILE: arch/blackfin/kernel/setup.c:1138:
+	seq_printf(m,
+		"SMP Dcache Flushes\t: %lu\n\n",

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#773: FILE: arch/blackfin/kernel/setup.c:1192:
+	if (*(unsigned int *)v != NR_CPUS-1)
 	                                 ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#773: FILE: arch/blackfin/kernel/setup.c:1192:
+	if (*(unsigned int *)v != NR_CPUS-1)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#777: FILE: arch/blackfin/kernel/setup.c:1196:
+	seq_printf(m, "L2 SRAM\t\t: %dKB\n", L2_LENGTH/0x400);
 	                                              ^

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#786: FILE: arch/blackfin/kernel/setup.c:1205:
+	seq_printf(m, "\n");

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#838: FILE: arch/blackfin/kernel/time.c:90:
+		udelay(10);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#874: FILE: arch/blackfin/kernel/time.c:126:
+	offset =  bfin_read_TIMER0_COUNTER() / \

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#885: FILE: arch/blackfin/kernel/time.c:133:
+	offset = (clocks_per_jiffy - bfin_read_TCOUNT()) / \

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#891: FILE: arch/blackfin/kernel/time.c:138:
 	if ((bfin_read_ILAT() & (1 << IRQ_CORETMR))
+		&& (offset < (100000 / HZ / 2)))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#929: FILE: arch/blackfin/kernel/time.c:168:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#939: FILE: arch/blackfin/kernel/time.c:178:
+		    500000 - ((unsigned)TICK_SIZE) / 2

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#940: FILE: arch/blackfin/kernel/time.c:179:
+		    500000 - ((unsigned)TICK_SIZE) / 2
+		    && (xtime.tv_nsec / NSEC_PER_USEC) <=

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#941: FILE: arch/blackfin/kernel/time.c:180:
+		    500000 + ((unsigned)TICK_SIZE) / 2) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#1003: FILE: arch/blackfin/kernel/traps.c:215:
+		printk(KERN_NOTICE "The instruction at %s caused a double exception\n", buf);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#1039: FILE: arch/blackfin/kernel/traps.c:956:
+		printk(KERN_NOTICE "CPU = %d\n", current_thread_info()->cpu);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1113: FILE: arch/blackfin/mm/init.c:57:
+extern unsigned long exception_stack[NR_CPUS][1024];

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1130: FILE: arch/blackfin/mm/init.c:112:
+	/* Initialize the PDA fields holding references to other parts
+	   of the memory. The content of such memory is still

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1132: FILE: arch/blackfin/mm/init.c:114:
+	   valid pointers to it. */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1157: FILE: arch/blackfin/mm/init.c:139:
+	printk(KERN_INFO "PDA for CPU%u reserved at %p\n", smp_processor_id(),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1158: FILE: arch/blackfin/mm/init.c:140:
+	printk(KERN_INFO "PDA for CPU%u reserved at %p\n", smp_processor_id(),
+					&cpu_pda[smp_processor_id()]);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1244: FILE: arch/blackfin/mm/sram-alloc.c:85:
+	unsigned int cpu;
+	for (cpu = 0; cpu < num_possible_cpus(); ++cpu) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1248: FILE: arch/blackfin/mm/sram-alloc.c:89:
+			printk(KERN_INFO "Fail to initialize Scratchpad data SRAM.\n");

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#1252: FILE: arch/blackfin/mm/sram-alloc.c:93:
+		per_cpu(free_l1_ssram_head, cpu).next->paddr = (void *)get_l1_scratch_start_cpu(cpu);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1261: FILE: arch/blackfin/mm/sram-alloc.c:102:
+		printk(KERN_INFO "Blackfin Scratchpad data SRAM: %d KB\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1262: FILE: arch/blackfin/mm/sram-alloc.c:103:
+		printk(KERN_INFO "Blackfin Scratchpad data SRAM: %d KB\n",
+			L1_SCRATCH_LENGTH >> 10);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1292: FILE: arch/blackfin/mm/sram-alloc.c:115:
+			printk(KERN_INFO "Fail to initialize L1 Data A SRAM.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1305: FILE: arch/blackfin/mm/sram-alloc.c:128:
+		printk(KERN_INFO "Blackfin L1 Data A SRAM: %d KB (%d KB free)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1306: FILE: arch/blackfin/mm/sram-alloc.c:129:
+		printk(KERN_INFO "Blackfin L1 Data A SRAM: %d KB (%d KB free)\n",
+			L1_DATA_A_LENGTH >> 10,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1333: FILE: arch/blackfin/mm/sram-alloc.c:138:
+			printk(KERN_INFO "Fail to initialize L1 Data B SRAM.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1346: FILE: arch/blackfin/mm/sram-alloc.c:151:
+		printk(KERN_INFO "Blackfin L1 Data B SRAM: %d KB (%d KB free)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1347: FILE: arch/blackfin/mm/sram-alloc.c:152:
+		printk(KERN_INFO "Blackfin L1 Data B SRAM: %d KB (%d KB free)\n",
+			L1_DATA_B_LENGTH >> 10,

WARNING:LINE_SPACING: Missing a blank line after declarations
#1383: FILE: arch/blackfin/mm/sram-alloc.c:168:
+	unsigned int cpu;
+	for (cpu = 0; cpu < num_possible_cpus(); ++cpu) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1387: FILE: arch/blackfin/mm/sram-alloc.c:172:
+			printk(KERN_INFO "Failed to initialize L1 Instruction SRAM\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1400: FILE: arch/blackfin/mm/sram-alloc.c:185:
+		printk(KERN_INFO "Blackfin L1 Instruction SRAM: %d KB (%d KB free)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1401: FILE: arch/blackfin/mm/sram-alloc.c:186:
+		printk(KERN_INFO "Blackfin L1 Instruction SRAM: %d KB (%d KB free)\n",
+			L1_CODE_LENGTH >> 10,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1432: FILE: arch/blackfin/mm/sram-alloc.c:201:
+		printk(KERN_INFO "Fail to initialize L2 SRAM.\n");

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1451: FILE: arch/blackfin/mm/sram-alloc.c:377:
+	if (addr >= (void *)get_l1_code_start()
+		 && addr < (void *)(get_l1_code_start() + L1_CODE_LENGTH))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#1453: FILE: arch/blackfin/mm/sram-alloc.c:379:
 	else
[...]
+	if (addr >= (void *)get_l1_data_a_start()

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1459: FILE: arch/blackfin/mm/sram-alloc.c:383:
+	if (addr >= (void *)get_l1_data_a_start()
+		 && addr < (void *)(get_l1_data_a_start() + L1_DATA_A_LENGTH))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#1461: FILE: arch/blackfin/mm/sram-alloc.c:385:
 	else
[...]
+	if (addr >= (void *)get_l1_data_b_start()

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1467: FILE: arch/blackfin/mm/sram-alloc.c:389:
+	if (addr >= (void *)get_l1_data_b_start()
+		 && addr < (void *)(get_l1_data_b_start() + L1_DATA_B_LENGTH))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1486: FILE: arch/blackfin/mm/sram-alloc.c:415:
+	addr = _sram_alloc(size, &per_cpu(free_l1_data_A_sram_head, cpu),
+			&per_cpu(used_l1_data_A_sram_head, cpu));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1511: FILE: arch/blackfin/mm/sram-alloc.c:441:
+	ret = _sram_free(addr, &per_cpu(free_l1_data_A_sram_head, cpu),
+			&per_cpu(used_l1_data_A_sram_head, cpu));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1537: FILE: arch/blackfin/mm/sram-alloc.c:466:
+	addr = _sram_alloc(size, &per_cpu(free_l1_data_B_sram_head, cpu),
+			&per_cpu(used_l1_data_B_sram_head, cpu));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1560: FILE: arch/blackfin/mm/sram-alloc.c:494:
+	ret = _sram_free(addr, &per_cpu(free_l1_data_B_sram_head, cpu),
+			&per_cpu(used_l1_data_B_sram_head, cpu));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1583: FILE: arch/blackfin/mm/sram-alloc.c:551:
+	addr = _sram_alloc(size, &per_cpu(free_l1_inst_sram_head, cpu),
+			&per_cpu(used_l1_inst_sram_head, cpu));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1606: FILE: arch/blackfin/mm/sram-alloc.c:579:
+	ret = _sram_free(addr, &per_cpu(free_l1_inst_sram_head, cpu),
+			&per_cpu(used_l1_inst_sram_head, cpu));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1629: FILE: arch/blackfin/mm/sram-alloc.c:604:
+	addr = _sram_alloc(size, &per_cpu(free_l1_ssram_head, cpu),
+			&per_cpu(used_l1_ssram_head, cpu));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1652: FILE: arch/blackfin/mm/sram-alloc.c:625:
+	addr = _sram_alloc_max(&per_cpu(free_l1_ssram_head, cpu),
+			&per_cpu(used_l1_ssram_head, cpu), psize);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1675: FILE: arch/blackfin/mm/sram-alloc.c:646:
+	ret = _sram_free(addr, &per_cpu(free_l1_ssram_head, cpu),
+			&per_cpu(used_l1_ssram_head, cpu));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1695: FILE: arch/blackfin/mm/sram-alloc.c:815:
+		if (_sram_proc_read(buf, &len, count, "Scratchpad",
+			&per_cpu(free_l1_ssram_head, cpu), &per_cpu(used_l1_ssram_head, cpu)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1703: FILE: arch/blackfin/mm/sram-alloc.c:819:
+		if (_sram_proc_read(buf, &len, count, "L1 Data A",
+			&per_cpu(free_l1_data_A_sram_head, cpu),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1713: FILE: arch/blackfin/mm/sram-alloc.c:825:
+		if (_sram_proc_read(buf, &len, count, "L1 Data B",
+			&per_cpu(free_l1_data_B_sram_head, cpu),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1722: FILE: arch/blackfin/mm/sram-alloc.c:831:
+		if (_sram_proc_read(buf, &len, count, "L1 Instruction",
+			&per_cpu(free_l1_inst_sram_head, cpu),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1731: FILE: arch/blackfin/mm/sram-alloc.c:838:
+	if (_sram_proc_read(buf, &len, count, "L2", &free_l2_sram_head,
+		&used_l2_sram_head))

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000202635.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 62 warnings, 44 checks, 1549 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000202635.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
