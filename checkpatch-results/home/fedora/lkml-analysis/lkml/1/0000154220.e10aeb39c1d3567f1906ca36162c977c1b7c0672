WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#40: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#45: FILE: fs/aufs/dentry.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#60: FILE: fs/aufs/dentry.c:16:
+static void au_h_nd(struct nameidata *h_nd, struct nameidata *nd)
                                                               ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#62: FILE: fs/aufs/dentry.c:18:
+	if (nd) {
 	    ^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#62: FILE: fs/aufs/dentry.c:18:
+	if (nd) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#63: FILE: fs/aufs/dentry.c:19:
+		*h_nd = *nd;
 		         ^^

CHECK:BRACES: Unbalanced braces around else statement
#73: FILE: fs/aufs/dentry.c:29:
+	} else

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#82: FILE: fs/aufs/dentry.c:38:
+	struct nameidata *nd;
 	                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#86: FILE: fs/aufs/dentry.c:42:
+			   struct au_branch *br, struct nameidata *nd)
 			                                           ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#95: FILE: fs/aufs/dentry.c:51:
+	au_h_nd(&h_nd, nd);
 	               ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#113: FILE: fs/aufs/dentry.c:69:
+	*a->errp = au_lkup_one(a->name, a->h_parent, a->br, a->nd);
 	                                                       ^^

CHECK:CAMELCASE: Avoid CamelCase: <AuLkup_ALLOW_NEG>
#116: FILE: fs/aufs/dentry.c:72:
+#define AuLkup_ALLOW_NEG	1

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <AuLkup_##name>
#117: FILE: fs/aufs/dentry.c:73:
+#define au_ftest_lkup(flags, name)	((flags) & AuLkup_##name)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#124: FILE: fs/aufs/dentry.c:80:
+	struct nameidata	*nd;
 	                	 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#163: FILE: fs/aufs/dentry.c:119:
+	h_dentry = au_lkup_one(name, h_parent, br, args->nd);
 	                                                 ^^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#172: FILE: fs/aufs/dentry.c:128:
+	} else if (wh_found
+		   || (args->type && args->type != (h_inode->i_mode & S_IFMT)))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#183: FILE: fs/aufs/dentry.c:139:
+	if (!h_inode || !S_ISDIR(h_inode->i_mode) || !wh_able
+	    || (inode && !S_ISDIR(inode->i_mode)))

CHECK:CAMELCASE: Avoid CamelCase: <AuLsc_I_CHILD>
#186: FILE: fs/aufs/dentry.c:142:
+	mutex_lock_nested(&h_inode->i_mutex, AuLsc_I_CHILD);

CHECK:BRACES: braces {} should be used on all arms of this statement
#189: FILE: fs/aufs/dentry.c:145:
+	if (opq > 0)
[...]
+	else if (unlikely(opq < 0)) {
[...]

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#210: FILE: fs/aufs/dentry.c:166:
+		   struct nameidata *nd)
 		                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#219: FILE: fs/aufs/dentry.c:175:
+		.nd	= nd
 		 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#219: FILE: fs/aufs/dentry.c:175:
+		.nd	= nd
 		   	  ^^

CHECK:CAMELCASE: Avoid CamelCase: <AuLsc_I_PARENT>
#260: FILE: fs/aufs/dentry.c:216:
+		mutex_lock_nested(&h_dir->i_mutex, AuLsc_I_PARENT);

CHECK:BRACES: braces {} should be used on all arms of this statement
#279: FILE: fs/aufs/dentry.c:235:
+		if (args.type != S_IFDIR)
[...]
+		else if (isdir) {
[...]

CHECK:CAMELCASE: Avoid CamelCase: <AuLabel>
#290: FILE: fs/aufs/dentry.c:246:
+		AuLabel(positive);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#295: FILE: fs/aufs/dentry.c:251:
+	if (unlikely(!au_opt_test(au_mntflags(dentry->d_sb), UDBA_NONE)
+		     && au_dbstart(dentry) < 0))

CHECK:BRACES: braces {} should be used on all arms of this statement
#312: FILE: fs/aufs/dentry.c:268:
+	if (!au_test_h_perm_sio(parent->d_inode, MAY_EXEC))
[...]
+	else {
[...]

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#313: FILE: fs/aufs/dentry.c:269:
+		dentry = au_lkup_one(name, parent, br, /*nd*/NULL);
 		                                         ^^

CHECK:BRACES: Unbalanced braces around else statement
#314: FILE: fs/aufs/dentry.c:270:
+	else {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#320: FILE: fs/aufs/dentry.c:276:
+			.nd		= NULL
 			 ^^

CHECK:CAMELCASE: Avoid CamelCase: <AuIOErr>
#350: FILE: fs/aufs/dentry.c:306:
+		AuIOErr("b%d %.*s should be negative.\n",

CHECK:CAMELCASE: Avoid CamelCase: <AuDLNPair>
#351: FILE: fs/aufs/dentry.c:307:
+			bindex, AuDLNPair(h_dentry));

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#378: FILE: fs/aufs/dentry.c:334:
+/*
+	loff_t			i_size;

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#392: FILE: fs/aufs/dentry.c:348:
+/*
+	ia->i_size = h_inode->i_size;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#402: FILE: fs/aufs/dentry.c:358:
+		/* || ia->i_nlink != h_inode->i_nlink */
+		|| ia->i_uid != h_inode->i_uid

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#403: FILE: fs/aufs/dentry.c:359:
+		|| ia->i_uid != h_inode->i_uid
+		|| ia->i_gid != h_inode->i_gid

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#404: FILE: fs/aufs/dentry.c:360:
+		|| ia->i_gid != h_inode->i_gid
+		|| ia->i_version != h_inode->i_version

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#406: FILE: fs/aufs/dentry.c:362:
+/*
+		|| ia->i_size != h_inode->i_size

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#406: FILE: fs/aufs/dentry.c:362:
+/*
+		|| ia->i_size != h_inode->i_size

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#407: FILE: fs/aufs/dentry.c:363:
+		|| ia->i_size != h_inode->i_size
+		|| ia->i_blocks != h_inode->i_blocks

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#409: FILE: fs/aufs/dentry.c:365:
+*/
+		|| ia->i_mode != (h_inode->i_mode & S_IFMT);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#433: FILE: fs/aufs/dentry.c:389:
+	h_d = au_lkup_one(&h_dentry->d_name, h_parent, br, /*nd*/NULL);
 	                                                     ^^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#440: FILE: fs/aufs/dentry.c:396:
+	if (unlikely(h_d != h_dentry
+		     || h_d->d_inode != h_inode

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#441: FILE: fs/aufs/dentry.c:397:
+		     || h_d->d_inode != h_inode
+		     || (h_inode && au_iattr_test(&ia, h_inode))))

CHECK:CAMELCASE: Avoid CamelCase: <AuTraceErr>
#446: FILE: fs/aufs/dentry.c:402:
+	AuTraceErr(err);

CHECK:CAMELCASE: Avoid CamelCase: <AuOpt_UDBA_REVAL>
#456: FILE: fs/aufs/dentry.c:412:
+	if (udba == AuOpt_UDBA_REVAL) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#456: FILE: fs/aufs/dentry.c:412:
+	if (udba == AuOpt_UDBA_REVAL) {
[...]
+	} else if (udba == AuOpt_UDBA_HINOTIFY)
[...]

CHECK:CAMELCASE: Avoid CamelCase: <IMustLock>
#457: FILE: fs/aufs/dentry.c:413:
+		IMustLock(h_dir);

CHECK:CAMELCASE: Avoid CamelCase: <AuOpt_UDBA_HINOTIFY>
#459: FILE: fs/aufs/dentry.c:415:
+	} else if (udba == AuOpt_UDBA_HINOTIFY)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#519: FILE: fs/aufs/dentry.c:475:
+	if (bdiropq >= 0
+	    && bdiropq <= au_sbend(sb)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#520: FILE: fs/aufs/dentry.c:476:
+	    && bdiropq <= au_sbend(sb)
+	    && au_sbr_whable(sb, bdiropq))

WARNING:TYPO_SPELLING: 'sigen' may be misspelled - perhaps 'sign'?
#546: FILE: fs/aufs/dentry.c:502:
+	unsigned int sigen;
 	             ^^^^^

CHECK:CAMELCASE: Avoid CamelCase: <AuDebugOn>
#553: FILE: fs/aufs/dentry.c:509:
+	AuDebugOn(IS_ROOT(dentry));

WARNING:TYPO_SPELLING: 'sigen' may be misspelled - perhaps 'sign'?
#554: FILE: fs/aufs/dentry.c:510:
+	sigen = au_sigen(sb);
 	^^^^^

WARNING:TYPO_SPELLING: 'sigen' may be misspelled - perhaps 'sign'?
#556: FILE: fs/aufs/dentry.c:512:
+	AuDebugOn(au_digen(parent) != sigen
 	                              ^^^^^

WARNING:TYPO_SPELLING: 'sigen' may be misspelled - perhaps 'sign'?
#557: FILE: fs/aufs/dentry.c:513:
+		  || au_iigen(parent->d_inode) != sigen);
 		                                  ^^^^^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#557: FILE: fs/aufs/dentry.c:513:
+	AuDebugOn(au_digen(parent) != sigen
+		  || au_iigen(parent->d_inode) != sigen);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#572: FILE: fs/aufs/dentry.c:528:
+	npositive = au_lkup_dentry(dentry, bstart, type, /*nd*/NULL);
 	                                                   ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#587: FILE: fs/aufs/dentry.c:543:
+int au_do_h_d_reval(struct dentry *h_dentry, struct nameidata *nd,
                                                                ^^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#591: FILE: fs/aufs/dentry.c:547:
+	int (*reval)(struct dentry *, struct nameidata *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#591: FILE: fs/aufs/dentry.c:547:
+	int (*reval)(struct dentry *, struct nameidata *);

CHECK:CAMELCASE: Avoid CamelCase: <AuDbg>
#600: FILE: fs/aufs/dentry.c:556:
+	AuDbg("b%d\n", bindex);

CHECK:BRACES: Unbalanced braces around else statement
#604: FILE: fs/aufs/dentry.c:560:
+	else {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#609: FILE: fs/aufs/dentry.c:565:
+		au_h_nd(&h_nd, nd);
 		               ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#611: FILE: fs/aufs/dentry.c:567:
+		locked = (nd && nd->path.dentry != dentry);
 		          ^^

CHECK:CAMELCASE: Avoid CamelCase: <AuLock_IR>
#613: FILE: fs/aufs/dentry.c:569:
+			di_read_lock_parent(parent, AuLock_IR);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#614: FILE: fs/aufs/dentry.c:570:
+		BUG_ON(bindex > au_dbend(parent));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#616: FILE: fs/aufs/dentry.c:572:
+		BUG_ON(!h_nd.path.dentry);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#637: FILE: fs/aufs/dentry.c:593:
+			  struct nameidata *nd, int do_udba)
 			                    ^^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#684: FILE: fs/aufs/dentry.c:640:
+		if (unlikely(do_udba
+			     && !is_root

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#685: FILE: fs/aufs/dentry.c:641:
+			     && !is_root
+			     && (unhashed != !!d_unhashed(h_dentry)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#686: FILE: fs/aufs/dentry.c:642:
+			     && (unhashed != !!d_unhashed(h_dentry)
+				 || name->len != h_name->len

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#687: FILE: fs/aufs/dentry.c:643:
+				 || name->len != h_name->len
+				 || memcmp(name->name, h_name->name, name->len))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#690: FILE: fs/aufs/dentry.c:646:
+			AuDbg("unhash 0x%x 0x%x, %.*s %.*s\n",
+				  unhashed, d_unhashed(h_dentry),

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#695: FILE: fs/aufs/dentry.c:651:
+		err = au_do_h_d_reval(h_dentry, nd, dentry, bindex);
 		                                ^^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#720: FILE: fs/aufs/dentry.c:676:
+		if (unlikely(plus != h_plus
+			     || mode != h_mode

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#721: FILE: fs/aufs/dentry.c:677:
+			     || mode != h_mode
+			     || h_cached_inode != h_inode))

WARNING:INDENTED_LABEL: labels should not be indented
#725: FILE: fs/aufs/dentry.c:681:
+	err:

WARNING:TYPO_SPELLING: 'sigen' may be misspelled - perhaps 'sign'?
#733: FILE: fs/aufs/dentry.c:689:
+static int simple_reval_dpath(struct dentry *dentry, unsigned int sigen)
                                                                   ^^^^^

WARNING:TYPO_SPELLING: 'sigen' may be misspelled - perhaps 'sign'?
#740: FILE: fs/aufs/dentry.c:696:
+	if (au_digen(dentry) == sigen && au_iigen(inode) == sigen)
 	                        ^^^^^

WARNING:TYPO_SPELLING: 'sigen' may be misspelled - perhaps 'sign'?
#740: FILE: fs/aufs/dentry.c:696:
+	if (au_digen(dentry) == sigen && au_iigen(inode) == sigen)
 	                                                    ^^^^^

WARNING:TYPO_SPELLING: 'sigen' may be misspelled - perhaps 'sign'?
#745: FILE: fs/aufs/dentry.c:701:
+	AuDebugOn(au_digen(parent) != sigen
 	                              ^^^^^

WARNING:TYPO_SPELLING: 'sigen' may be misspelled - perhaps 'sign'?
#746: FILE: fs/aufs/dentry.c:702:
+		  || au_iigen(parent->d_inode) != sigen);
 		                                  ^^^^^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#746: FILE: fs/aufs/dentry.c:702:
+	AuDebugOn(au_digen(parent) != sigen
+		  || au_iigen(parent->d_inode) != sigen);

WARNING:TYPO_SPELLING: 'sigen' may be misspelled - perhaps 'sign'?
#747: FILE: fs/aufs/dentry.c:703:
+	au_dbg_verify_gen(parent, sigen);
 	                          ^^^^^

WARNING:TYPO_SPELLING: 'sigen' may be misspelled - perhaps 'sign'?
#759: FILE: fs/aufs/dentry.c:715:
+int au_reval_dpath(struct dentry *dentry, unsigned int sigen)
                                                        ^^^^^

WARNING:TYPO_SPELLING: 'sigen' may be misspelled - perhaps 'sign'?
#766: FILE: fs/aufs/dentry.c:722:
+		return simple_reval_dpath(dentry, sigen);
 		                                  ^^^^^

WARNING:TYPO_SPELLING: 'sigen' may be misspelled - perhaps 'sign'?
#772: FILE: fs/aufs/dentry.c:728:
+	while (au_digen(dentry) != sigen
 	                           ^^^^^

WARNING:TYPO_SPELLING: 'sigen' may be misspelled - perhaps 'sign'?
#773: FILE: fs/aufs/dentry.c:729:
+	       || au_iigen(dentry->d_inode) != sigen) {
 	                                       ^^^^^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#773: FILE: fs/aufs/dentry.c:729:
+	while (au_digen(dentry) != sigen
+	       || au_iigen(dentry->d_inode) != sigen) {

WARNING:TYPO_SPELLING: 'sigen' may be misspelled - perhaps 'sign'?
#778: FILE: fs/aufs/dentry.c:734:
+			if (au_digen(parent) == sigen
 			                        ^^^^^

WARNING:TYPO_SPELLING: 'sigen' may be misspelled - perhaps 'sign'?
#779: FILE: fs/aufs/dentry.c:735:
+			    && au_iigen(parent->d_inode) == sigen)
 			                                    ^^^^^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#779: FILE: fs/aufs/dentry.c:735:
+			if (au_digen(parent) == sigen
+			    && au_iigen(parent->d_inode) == sigen)

WARNING:TYPO_SPELLING: 'sigen' may be misspelled - perhaps 'sign'?
#789: FILE: fs/aufs/dentry.c:745:
+		if (au_digen(d) != sigen || au_iigen(d->d_inode) != sigen) {
 		                   ^^^^^

WARNING:TYPO_SPELLING: 'sigen' may be misspelled - perhaps 'sign'?
#789: FILE: fs/aufs/dentry.c:745:
+		if (au_digen(d) != sigen || au_iigen(d->d_inode) != sigen) {
 		                                                    ^^^^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#811: FILE: fs/aufs/dentry.c:767:
+static int aufs_d_revalidate(struct dentry *dentry, struct nameidata *nd)
                                                                       ^^

WARNING:TYPO_SPELLING: 'sigen' may be misspelled - perhaps 'sign'?
#814: FILE: fs/aufs/dentry.c:770:
+	unsigned int sigen;
 	             ^^^^^

CHECK:CAMELCASE: Avoid CamelCase: <AuLock_FLUSH>
#822: FILE: fs/aufs/dentry.c:778:
+	aufs_read_lock(dentry, AuLock_FLUSH | AuLock_DW);

CHECK:CAMELCASE: Avoid CamelCase: <AuLock_DW>
#822: FILE: fs/aufs/dentry.c:778:
+	aufs_read_lock(dentry, AuLock_FLUSH | AuLock_DW);

WARNING:TYPO_SPELLING: 'sigen' may be misspelled - perhaps 'sign'?
#823: FILE: fs/aufs/dentry.c:779:
+	sigen = au_sigen(sb);
 	^^^^^

WARNING:TYPO_SPELLING: 'sigen' may be misspelled - perhaps 'sign'?
#824: FILE: fs/aufs/dentry.c:780:
+	if (au_digen(dentry) != sigen) {
 	                        ^^^^^

WARNING:TYPO_SPELLING: 'sigen' may be misspelled - perhaps 'sign'?
#827: FILE: fs/aufs/dentry.c:783:
+			err = au_reval_dpath(dentry, sigen);
 			                             ^^^^^

WARNING:TYPO_SPELLING: 'sigen' may be misspelled - perhaps 'sign'?
#830: FILE: fs/aufs/dentry.c:786:
+		AuDebugOn(au_digen(dentry) != sigen);
 		                              ^^^^^

WARNING:TYPO_SPELLING: 'sigen' may be misspelled - perhaps 'sign'?
#832: FILE: fs/aufs/dentry.c:788:
+	if (inode && au_iigen(inode) != sigen) {
 	                                ^^^^^

WARNING:TYPO_SPELLING: 'sigen' may be misspelled - perhaps 'sign'?
#837: FILE: fs/aufs/dentry.c:793:
+		AuDebugOn(au_iigen(inode) != sigen);
 		                             ^^^^^

WARNING:TYPO_SPELLING: 'sigen' may be misspelled - perhaps 'sign'?
#841: FILE: fs/aufs/dentry.c:797:
+	AuDebugOn(au_digen(dentry) != sigen);
 	                              ^^^^^

WARNING:TYPO_SPELLING: 'sigen' may be misspelled - perhaps 'sign'?
#842: FILE: fs/aufs/dentry.c:798:
+	AuDebugOn(inode && au_iigen(inode) != sigen);
 	                                      ^^^^^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#849: FILE: fs/aufs/dentry.c:805:
+		if (bstart >= 0
+		    && au_test_higen(inode, au_h_iptr(inode, bstart)))

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#853: FILE: fs/aufs/dentry.c:809:
+	err = h_d_revalidate(dentry, inode, nd, do_udba);
 	                                    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#862: FILE: fs/aufs/dentry.c:818:
+	au_store_oflag(nd);
 	               ^^

WARNING:CONST_STRUCT: struct dentry_operations should normally be const
#899: FILE: fs/aufs/dentry.c:855:
+struct dentry_operations aufs_dop = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#909: FILE: fs/aufs/dentry.h:1:
+/*

WARNING:CONST_STRUCT: struct dentry_operations should normally be const
#949: FILE: fs/aufs/dentry.h:41:
+extern struct dentry_operations aufs_dop;

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#952: FILE: fs/aufs/dentry.h:44:
+			   struct au_branch *br, struct nameidata *nd);
 			                                           ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#959: FILE: fs/aufs/dentry.h:51:
+		   struct nameidata *nd);
 		                     ^^

WARNING:TYPO_SPELLING: 'sigen' may be misspelled - perhaps 'sign'?
#962: FILE: fs/aufs/dentry.h:54:
+int au_reval_dpath(struct dentry *dentry, unsigned int sigen);
                                                        ^^^^^

CHECK:CAMELCASE: Avoid CamelCase: <AuLsc_DI_CHILD>
#1000: FILE: fs/aufs/dentry.h:92:
+	AuLsc_DI_CHILD,		/* child first */

CHECK:CAMELCASE: Avoid CamelCase: <AuLsc_DI_CHILD2>
#1001: FILE: fs/aufs/dentry.h:93:
+	AuLsc_DI_CHILD2,	/* rename(2), link(2), and cpup at hinotify */

CHECK:CAMELCASE: Avoid CamelCase: <AuLsc_DI_CHILD3>
#1002: FILE: fs/aufs/dentry.h:94:
+	AuLsc_DI_CHILD3,	/* copyup dirs */

CHECK:CAMELCASE: Avoid CamelCase: <AuLsc_DI_PARENT>
#1003: FILE: fs/aufs/dentry.h:95:
+	AuLsc_DI_PARENT,

CHECK:CAMELCASE: Avoid CamelCase: <AuLsc_DI_PARENT2>
#1004: FILE: fs/aufs/dentry.h:96:
+	AuLsc_DI_PARENT2,

CHECK:CAMELCASE: Avoid CamelCase: <AuLsc_DI_PARENT3>
#1005: FILE: fs/aufs/dentry.h:97:
+	AuLsc_DI_PARENT3

CHECK:CAMELCASE: Avoid CamelCase: <AuReadLockFunc>
#1016: FILE: fs/aufs/dentry.h:108:
+#define AuReadLockFunc(name, lsc) \

CHECK:CAMELCASE: Avoid CamelCase: <AuLsc_DI_##lsc>
#1018: FILE: fs/aufs/dentry.h:110:
+{ di_read_lock(d, flags, AuLsc_DI_##lsc); }

CHECK:CAMELCASE: Avoid CamelCase: <AuWriteLockFunc>
#1020: FILE: fs/aufs/dentry.h:112:
+#define AuWriteLockFunc(name, lsc) \

CHECK:CAMELCASE: Avoid CamelCase: <AuRWLockFuncs>
#1024: FILE: fs/aufs/dentry.h:116:
+#define AuRWLockFuncs(name, lsc) \

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1024: FILE: fs/aufs/dentry.h:116:
+#define AuRWLockFuncs(name, lsc) \
+	AuReadLockFunc(name, lsc) \
+	AuWriteLockFunc(name, lsc)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#1024: FILE: fs/aufs/dentry.h:116:
+#define AuRWLockFuncs(name, lsc) \
+	AuReadLockFunc(name, lsc) \
+	AuWriteLockFunc(name, lsc)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lsc' - possible side-effects?
#1024: FILE: fs/aufs/dentry.h:116:
+#define AuRWLockFuncs(name, lsc) \
+	AuReadLockFunc(name, lsc) \
+	AuWriteLockFunc(name, lsc)

CHECK:CAMELCASE: Avoid CamelCase: <DiMustNoWaiters>
#1039: FILE: fs/aufs/dentry.h:131:
+#define DiMustNoWaiters(d)	AuRwMustNoWaiters(&au_di(d)->di_rwsem)

CHECK:CAMELCASE: Avoid CamelCase: <AuRwMustNoWaiters>
#1039: FILE: fs/aufs/dentry.h:131:
+#define DiMustNoWaiters(d)	AuRwMustNoWaiters(&au_di(d)->di_rwsem)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1128: FILE: fs/aufs/dinfo.c:1:
+/*

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1222: FILE: fs/aufs/dinfo.c:95:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1248: FILE: fs/aufs/dinfo.c:121:
+		BUG();

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1298: FILE: fs/aufs/dinfo.c:171:
+	AuDebugOn(d1 == d2
+		  || d1->d_inode == d2->d_inode

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1299: FILE: fs/aufs/dinfo.c:172:
+		  || d1->d_inode == d2->d_inode
+		  || d1->d_sb != d2->d_sb);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1314: FILE: fs/aufs/dinfo.c:187:
+	AuDebugOn(d1 == d2
+		  || d1->d_inode == d2->d_inode

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1315: FILE: fs/aufs/dinfo.c:188:
+		  || d1->d_inode == d2->d_inode
+		  || d1->d_sb != d2->d_sb);

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1355: FILE: fs/aufs/dinfo.c:228:
+	if (0 <= bend) {

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1359: FILE: fs/aufs/dinfo.c:232:
+		if (0 < bwh && bwh < bend)

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1370: FILE: fs/aufs/dinfo.c:243:
+	if (0 <= bend) {

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1372: FILE: fs/aufs/dinfo.c:245:
+		if (0 <= bopq && bopq < bend)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000154220.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 74 warnings, 67 checks, 1422 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000154220.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
