WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#26: 
Adds a new imv_cond() macro to declare a byte read that is meant to be embedded

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#108: FILE: include/asm-x86/immediate.h:143:
+extern int arch_imv_update(struct __imv *imv, int early);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#122: FILE: arch/x86/kernel/immediate.c:86:
+#define INSN_NOP2		0x89, 0xf6

ERROR:CODE_INDENT: code indent should use tabs where possible
#147: FILE: arch/x86/kernel/immediate.c:158:
+^I^I^I^I  ^I/* e9 cd    jmp rel32 */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#147: FILE: arch/x86/kernel/immediate.c:158:
+^I^I^I^I  ^I/* e9 cd    jmp rel32 */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#177: FILE: arch/x86/kernel/immediate.c:191:
+static inline int detect_mov_test_jne(uint8_t *addr, uint8_t **opcode,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#178: FILE: arch/x86/kernel/immediate.c:192:
+static inline int detect_mov_test_jne(uint8_t *addr, uint8_t **opcode,
+		uint8_t **jmp_offset, int *offset_len)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#178: FILE: arch/x86/kernel/immediate.c:192:
+		uint8_t **jmp_offset, int *offset_len)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#219: FILE: arch/x86/kernel/immediate.c:194:
+	printk(KERN_DEBUG "Trying at %p %hx %hx %hx %hx %hx %hx\n",

WARNING:UNNECESSARY_MODIFIER: Integer promotion: Using 'h' in '%hx' is unnecessary
#219: FILE: arch/x86/kernel/immediate.c:194:
+	printk(KERN_DEBUG "Trying at %p %hx %hx %hx %hx %hx %hx\n",
+		addr, addr[0], addr[1], addr[2], addr[3], addr[4], addr[5]);

WARNING:UNNECESSARY_MODIFIER: Integer promotion: Using 'h' in '%hx' is unnecessary
#219: FILE: arch/x86/kernel/immediate.c:194:
+	printk(KERN_DEBUG "Trying at %p %hx %hx %hx %hx %hx %hx\n",
+		addr, addr[0], addr[1], addr[2], addr[3], addr[4], addr[5]);

WARNING:UNNECESSARY_MODIFIER: Integer promotion: Using 'h' in '%hx' is unnecessary
#219: FILE: arch/x86/kernel/immediate.c:194:
+	printk(KERN_DEBUG "Trying at %p %hx %hx %hx %hx %hx %hx\n",
+		addr, addr[0], addr[1], addr[2], addr[3], addr[4], addr[5]);

WARNING:UNNECESSARY_MODIFIER: Integer promotion: Using 'h' in '%hx' is unnecessary
#219: FILE: arch/x86/kernel/immediate.c:194:
+	printk(KERN_DEBUG "Trying at %p %hx %hx %hx %hx %hx %hx\n",
+		addr, addr[0], addr[1], addr[2], addr[3], addr[4], addr[5]);

WARNING:UNNECESSARY_MODIFIER: Integer promotion: Using 'h' in '%hx' is unnecessary
#219: FILE: arch/x86/kernel/immediate.c:194:
+	printk(KERN_DEBUG "Trying at %p %hx %hx %hx %hx %hx %hx\n",
+		addr, addr[0], addr[1], addr[2], addr[3], addr[4], addr[5]);

WARNING:UNNECESSARY_MODIFIER: Integer promotion: Using 'h' in '%hx' is unnecessary
#219: FILE: arch/x86/kernel/immediate.c:194:
+	printk(KERN_DEBUG "Trying at %p %hx %hx %hx %hx %hx %hx\n",
+		addr, addr[0], addr[1], addr[2], addr[3], addr[4], addr[5]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#220: FILE: arch/x86/kernel/immediate.c:195:
+	printk(KERN_DEBUG "Trying at %p %hx %hx %hx %hx %hx %hx\n",
+		addr, addr[0], addr[1], addr[2], addr[3], addr[4], addr[5]);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#227: FILE: arch/x86/kernel/immediate.c:202:
+	printk(KERN_DEBUG "Found test %%al,%%al at %p\n", addr + 2);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#230: FILE: arch/x86/kernel/immediate.c:205:
+		printk(KERN_DEBUG "Found jne rel8 at %p\n", addr + 4);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#239: FILE: arch/x86/kernel/immediate.c:214:
+			printk(KERN_DEBUG "Found jne rel16/32 at %p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#240: FILE: arch/x86/kernel/immediate.c:215:
+			printk(KERN_DEBUG "Found jne rel16/32 at %p\n",
+				addr + 5);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#260: FILE: arch/x86/kernel/immediate.c:232:
+static inline int detect_mov_test_je(uint8_t *addr, uint8_t **opcode,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#261: FILE: arch/x86/kernel/immediate.c:233:
+static inline int detect_mov_test_je(uint8_t *addr, uint8_t **opcode,
+		uint8_t **jmp_offset, int *offset_len)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#261: FILE: arch/x86/kernel/immediate.c:233:
+		uint8_t **jmp_offset, int *offset_len)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#269: FILE: arch/x86/kernel/immediate.c:241:
+	printk(KERN_DEBUG "Found test %%al,%%al at %p\n", addr + 2);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#272: FILE: arch/x86/kernel/immediate.c:244:
+		printk(KERN_DEBUG "Found je rel8 at %p\n", addr + 4);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#281: FILE: arch/x86/kernel/immediate.c:253:
+			printk(KERN_DEBUG "Found je rel16/32 at %p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#282: FILE: arch/x86/kernel/immediate.c:254:
+			printk(KERN_DEBUG "Found je rel16/32 at %p\n",
+				addr + 5);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#307: FILE: arch/x86/kernel/immediate.c:273:
+static noinline int replace_instruction_safe(uint8_t *addr, uint8_t *newcode,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#308: FILE: arch/x86/kernel/immediate.c:274:
+static noinline int replace_instruction_safe(uint8_t *addr, uint8_t *newcode,
+		int size)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#352: FILE: arch/x86/kernel/immediate.c:317:
+		text_poke((void *)addr,
+			((unsigned char[]){BREAKPOINT_INSTRUCTION}),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#364: FILE: arch/x86/kernel/immediate.c:331:
+		text_poke((void *)(addr + BREAKPOINT_INS_LEN),
+			&newcode[BREAKPOINT_INS_LEN],

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#391: FILE: arch/x86/kernel/immediate.c:360:
+	uint8_t *opcode, *jmp_offset;

ERROR:SPACING: space required before the open parenthesis '('
#395: FILE: arch/x86/kernel/immediate.c:364:
+	if(!detect_mov_test_jne((uint8_t *)imv->imv - 1,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#396: FILE: arch/x86/kernel/immediate.c:365:
+	if(!detect_mov_test_jne((uint8_t *)imv->imv - 1,
+			&opcode, &jmp_offset, &offset_len)) {

ERROR:SPACING: space required before the open parenthesis '('
#399: FILE: arch/x86/kernel/immediate.c:368:
+	} else if(!detect_mov_test_je((uint8_t *)imv->imv - 1,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#413: FILE: arch/x86/kernel/immediate.c:382:
+			replace_instruction_safe(opcode,
+				((unsigned char[]){ JMP_REL8,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#419: FILE: arch/x86/kernel/immediate.c:388:
+			 * grow it afterward. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#423: FILE: arch/x86/kernel/immediate.c:392:
+			replace_instruction_safe(opcode,
+				((unsigned char[]){ INSN_NOP1, JMP_REL32,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#432: FILE: arch/x86/kernel/immediate.c:401:
+		replace_instruction_safe((uint8_t *)imv->imv - 1,
+			((unsigned char[]){ INSN_NOP2 }),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#436: FILE: arch/x86/kernel/immediate.c:405:
+		replace_instruction_safe((uint8_t *)imv->imv + 1,
+			((unsigned char[]){ INSN_NOP2 }),

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#445: FILE: arch/x86/kernel/immediate.c:414:
+
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#450: FILE: arch/x86/kernel/immediate.c:419:
+		printk(KERN_DEBUG "Found JMP_REL8 at %p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#451: FILE: arch/x86/kernel/immediate.c:420:
+		printk(KERN_DEBUG "Found JMP_REL8 at %p\n",
+			((uint8_t *)imv->imv - 1));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#453: FILE: arch/x86/kernel/immediate.c:422:
+		replace_instruction_safe((uint8_t *)imv->imv - 1,
+			((unsigned char[]){ JMP_REL8,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#463: FILE: arch/x86/kernel/immediate.c:432:
+		printk(KERN_DEBUG "Found JMP_REL32 at %p, update with %x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#464: FILE: arch/x86/kernel/immediate.c:433:
+		printk(KERN_DEBUG "Found JMP_REL32 at %p, update with %x\n",
+			((uint8_t *)imv->imv - 1), newoff);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#466: FILE: arch/x86/kernel/immediate.c:435:
+		replace_instruction_safe((uint8_t *)imv->imv - 1,
+			((unsigned char[]){ JMP_REL32,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#489: FILE: arch/x86/kernel/immediate.c:458:
+	uint8_t buf[10];

WARNING:LINE_SPACING: Missing a blank line after declarations
#504: FILE: arch/x86/kernel/immediate.c:473:
+			static int nr_fail;
+			printk("Jump target fallback at %lX, nr fail %d\n",

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#504: FILE: arch/x86/kernel/immediate.c:473:
+			printk("Jump target fallback at %lX, nr fail %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#505: FILE: arch/x86/kernel/immediate.c:474:
+			printk("Jump target fallback at %lX, nr fail %d\n",
+				imv->imv, ++nr_fail);

WARNING:LINE_SPACING: Missing a blank line after declarations
#511: FILE: arch/x86/kernel/immediate.c:480:
+			static int nr_success;
+			printk("Jump target at %lX, nr success %d\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#511: FILE: arch/x86/kernel/immediate.c:480:
+			printk("Jump target at %lX, nr success %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#512: FILE: arch/x86/kernel/immediate.c:481:
+			printk("Jump target at %lX, nr success %d\n",
+				imv->imv, ++nr_success);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#528: FILE: arch/x86/kernel/immediate.c:497:
+	if (unlikely(!early
+			&& *(unsigned char *)insn == BREAKPOINT_INSTRUCTION)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#529: FILE: arch/x86/kernel/immediate.c:498:
+		printk(KERN_WARNING "Immediate value in conflict with kprobe. "

WARNING:UNNECESSARY_MODIFIER: Integer promotion: Using 'h' in '%hu' is unnecessary
#529: FILE: arch/x86/kernel/immediate.c:498:
+		printk(KERN_WARNING "Immediate value in conflict with kprobe. "
+				    "Variable at %p, "
+				    "instruction at %p, size %hu\n",
+				    (void *)imv->var,
+				    (void *)imv->imv, imv->size);

WARNING:SPLIT_STRING: quoted string split across lines
#530: FILE: arch/x86/kernel/immediate.c:499:
+		printk(KERN_WARNING "Immediate value in conflict with kprobe. "
+				    "Variable at %p, "

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#531: FILE: arch/x86/kernel/immediate.c:500:
+				    "Variable at %p, "
+				    "instruction at %p, size %hu\n",

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#543: FILE: arch/x86/kernel/immediate.c:512:
+	case 1:	if (*(uint8_t *)imv->imv == *(uint8_t *)imv->var)
+			return 0;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#543: FILE: arch/x86/kernel/immediate.c:512:
+	case 1:	if (*(uint8_t *)imv->imv == *(uint8_t *)imv->var)

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#546: FILE: arch/x86/kernel/immediate.c:515:
+	case 2:	if (*(uint16_t *)imv->imv == *(uint16_t *)imv->var)
+			return 0;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#546: FILE: arch/x86/kernel/immediate.c:515:
+	case 2:	if (*(uint16_t *)imv->imv == *(uint16_t *)imv->var)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#549: FILE: arch/x86/kernel/immediate.c:518:
+	case 4:	if (*(uint32_t *)imv->imv == *(uint32_t *)imv->var)
+			return 0;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#549: FILE: arch/x86/kernel/immediate.c:518:
+	case 4:	if (*(uint32_t *)imv->imv == *(uint32_t *)imv->var)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#553: FILE: arch/x86/kernel/immediate.c:522:
+	case 8:	if (*(uint64_t *)imv->imv == *(uint64_t *)imv->var)
+			return 0;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#553: FILE: arch/x86/kernel/immediate.c:522:
+	case 8:	if (*(uint64_t *)imv->imv == *(uint64_t *)imv->var)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#576: FILE: include/linux/immediate.h:36:
+extern void imv_update_range(struct __imv *begin, struct __imv *end);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#606: FILE: kernel/immediate.c:47:
+void imv_update_range(struct __imv *begin,
+		struct __imv *end)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000294674.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 8 errors, 30 warnings, 31 checks, 552 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000294674.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
