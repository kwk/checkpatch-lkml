WARNING:TYPO_SPELLING: 'lastest' may be misspelled - perhaps 'latest'?
#58: 
PS : the lastest version of the driver can be found in 
         ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LONG_LINE_COMMENT: line length of 104 exceeds 100 columns
#100: FILE: airo.c:233:
+static int wpa_enabled; /* If set the card is in WPA mode. This is incompatible with WEP or open mode */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#109: FILE: airo.c:262:
+MODULE_PARM_DESC(wpa_enabled, "If non-zero, the driver can use WPA \

WARNING:NEW_TYPEDEFS: do not add new typedefs
#126: FILE: airo.c:521:
+typedef struct {

CHECK:CAMELCASE: Avoid CamelCase: <WpaKeyRid>
#132: FILE: airo.c:527:
+} WpaKeyRid;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <ConfigRidExtra>
#152: FILE: airo.c:559:
+} ConfigRidExtra;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#154: FILE: airo.c:561:
+typedef struct {

CHECK:CAMELCASE: Avoid CamelCase: <ConfigRidLen>
#179: FILE: airo.c:1266:
+	unsigned int ConfigRidLen;

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#180: FILE: airo.c:1267:
+	unsigned char wpa_tx_key [8];

Whitespace before opening bracket '[' is prohibited.
There are some exceptions:

1. With a type on the left::

    int [] a;

2. At the beginning of a line for slice initialisers::

    [0...10] = 5,

3. Inside a curly brace::

    = { [0...10] = 5 }

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#181: FILE: airo.c:1268:
+	unsigned char wpa_rx_key [8];

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#182: FILE: airo.c:1269:
+	unsigned char wpa_rx_key_m [8];

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#183: FILE: airo.c:1270:
+	unsigned char wpa_rx_key_m_old [8];

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#184: FILE: airo.c:1271:
+	u8 LLC [10];

ERROR:SPACING: space prohibited before that ',' (ctx:WxV)
#195: FILE: airo.c:1771:
+static void wpa_compute_mic(struct airo_info *ai ,char *pPacket, u8 *mic, int len, char *key)
                                                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:WxV)
#195: FILE: airo.c:1771:
+static void wpa_compute_mic(struct airo_info *ai ,char *pPacket, u8 *mic, int len, char *key)
                                                  ^

CHECK:CAMELCASE: Avoid CamelCase: <pPacket>
#195: FILE: airo.c:1771:
+static void wpa_compute_mic(struct airo_info *ai ,char *pPacket, u8 *mic, int len, char *key)

CHECK:CAMELCASE: Avoid CamelCase: <etherHead>
#202: FILE: airo.c:1778:
+	sg[0].length = sizeof(etherHead);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#204: FILE: airo.c:1780:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#219: FILE: airo.c:1795:
+	crypto_hash_digest(&desc, sg, len + sizeof(ai->LLC),
+			mic);

ERROR:SPACING: space prohibited before that ',' (ctx:WxV)
#223: FILE: airo.c:1799:
+static int wpa_check_rx_mic(struct airo_info *ai ,char *buffer, int len)
                                                  ^

ERROR:SPACING: space required after that ',' (ctx:WxV)
#223: FILE: airo.c:1799:
+static int wpa_check_rx_mic(struct airo_info *ai ,char *buffer, int len)
                                                  ^

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#235: FILE: airo.c:1811:
+	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#235: FILE: airo.c:1811:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#243: FILE: airo.c:1819:
+
+

ERROR:POINTER_LOCATION: "foo*bar" should be "foo *bar"
#251: FILE: airo.c:1883:
+static int writeWpaKeyRid(struct airo_info*ai, WpaKeyRid *pwkr, int lock) {

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#251: FILE: airo.c:1883:
+static int writeWpaKeyRid(struct airo_info*ai, WpaKeyRid *pwkr, int lock) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:CAMELCASE: Avoid CamelCase: <writeWpaKeyRid>
#251: FILE: airo.c:1883:
+static int writeWpaKeyRid(struct airo_info*ai, WpaKeyRid *pwkr, int lock) {

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#259: FILE: airo.c:1891:
+	if (rc!=SUCCESS) airo_print_err(ai->dev->name, "WPA set %x", rc);
 	      ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#259: FILE: airo.c:1891:
+	if (rc!=SUCCESS) airo_print_err(ai->dev->name, "WPA set %x", rc);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:SPACING: space prohibited after that open parenthesis '('
#280: FILE: airo.c:1988:
+	return PC4500_writerid( ai, RID_CONFIG, &cfgr, ai->ConfigRidLen, lock);

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#290: FILE: airo.c:2150:
+		u8 mic [8];

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#292: FILE: airo.c:2152:
+		*payloadLen = cpu_to_le16(len-sizeof(etherHead)+8);
 		                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#292: FILE: airo.c:2152:
+		*payloadLen = cpu_to_le16(len-sizeof(etherHead)+8);
 		                                               ^

CHECK:CAMELCASE: Avoid CamelCase: <payloadLen>
#292: FILE: airo.c:2152:
+		*payloadLen = cpu_to_le16(len-sizeof(etherHead)+8);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#302: FILE: airo.c:2162:
+    else if (test_bit(FLAG_MIC_CAPABLE, &ai->flags) && ai->micstats.enabled &&$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 16)
#302: FILE: airo.c:2162:
+    else if (test_bit(FLAG_MIC_CAPABLE, &ai->flags) && ai->micstats.enabled &&
[...]
 		MICBuffer pMic;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#303: FILE: airo.c:2163:
+    else if (test_bit(FLAG_MIC_CAPABLE, &ai->flags) && ai->micstats.enabled &&
 		(ntohs(((u16 *)buffer)[6]) != 0x888E)) {

WARNING:TYPO_SPELLING: 'recomended' may be misspelled - perhaps 'recommended'?
#319: FILE: airo.c:2894:
+		airo_print_info(name, "Version 5.41 is recomended");
 		                                       ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'firware' may be misspelled - perhaps 'firmware'?
#327: FILE: airo.c:2924:
+	/* this is needed for initialisation, the firware check will be done
 	                                          ^^^^^^^

CHECK:CAMELCASE: Avoid CamelCase: <ConfigRid>
#331: FILE: airo.c:2928:
+	ai->ConfigRidLen = sizeof(ConfigRid) - sizeof(ConfigRidExtra);

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#341: FILE: airo.c:3012:
+		char LLC1 [] = {0, 0, 0, 0, 0xaa, 0xaa, 0x03, 0x00, 0x00, 0x00};

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ai->tfm_michael"
#349: FILE: airo.c:3020:
+		if (ai->tfm_michael == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#350: FILE: airo.c:3021:
+			printk(KERN_DEBUG "crypto API michael_mic failed. Removing WPA\n");

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#352: FILE: airo.c:3023:
+		}
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#352: FILE: airo.c:3023:
+		else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#354: FILE: airo.c:3025:
+^I^I^I/* we don't want to enable wep mode : it will make the firmware $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#355: FILE: airo.c:3026:
+			 * hanging */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#373: FILE: airo.c:3339:
+			}
+			else if (test_bit(FLAG_MIC_CAPABLE, &apriv->flags)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#381: FILE: airo.c:3383:
+			printk("status : %x\n", newStatus);

CHECK:CAMELCASE: Avoid CamelCase: <newStatus>
#381: FILE: airo.c:3383:
+			printk("status : %x\n", newStatus);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#393: FILE: airo.c:3513:
+				}
+				else if (apriv->micstats.enabled) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#409: FILE: airo.c:3533:
+^I$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#411: FILE: airo.c:3535:
+					skb_trim (skb, len + hdrlen);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#413: FILE: airo.c:3537:
+				else if (decapsulate(apriv,&micbuf,(etherHead*)buffer,len)) {

ERROR:SPACING: space required after that ',' (ctx:VxO)
#413: FILE: airo.c:3537:
+				else if (decapsulate(apriv,&micbuf,(etherHead*)buffer,len)) {
 				                          ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#413: FILE: airo.c:3537:
+				else if (decapsulate(apriv,&micbuf,(etherHead*)buffer,len)) {
 				                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#413: FILE: airo.c:3537:
+				else if (decapsulate(apriv,&micbuf,(etherHead*)buffer,len)) {
 				                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#413: FILE: airo.c:3537:
+				else if (decapsulate(apriv,&micbuf,(etherHead*)buffer,len)) {
 				                                                     ^

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#413: FILE: airo.c:3537:
+				}
+				else if (decapsulate(apriv,&micbuf,(etherHead*)buffer,len)) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#424: FILE: airo.c:3770:
+		}
+		else if (ai->micstats.enabled) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#441: FILE: airo.c:3793:
+			skb_trim (skb, len);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#443: FILE: airo.c:3795:
+		else if (decapsulate (ai, &micbuf, (etherHead*)buffer, len - off - ETH_ALEN * 2)) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#443: FILE: airo.c:3795:
+		else if (decapsulate (ai, &micbuf, (etherHead*)buffer, len - off - ETH_ALEN * 2)) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#443: FILE: airo.c:3795:
+		}
+		else if (decapsulate (ai, &micbuf, (etherHead*)buffer, len - off - ETH_ALEN * 2)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#455: FILE: airo.c:4498:
+^Ielse if (test_bit(FLAG_MIC_CAPABLE, &ai->flags) && ai->micstats.enabled && $

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#455: FILE: airo.c:4498:
+	}
+	else if (test_bit(FLAG_MIC_CAPABLE, &ai->flags) && ai->micstats.enabled && 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#456: FILE: airo.c:4499:
+	else if (test_bit(FLAG_MIC_CAPABLE, &ai->flags) && ai->micstats.enabled && 
 	    (ntohs(((u16 *)pPacket)[6]) != 0x888E)) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#471: FILE: airo.c:4517:
+		bap_write(ai, (const u16*)(pPacket + sizeof(etherHead)), len - (len&1), BAP1);

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#471: FILE: airo.c:4517:
+		bap_write(ai, (const u16*)(pPacket + sizeof(etherHead)), len - (len&1), BAP1);
 		                                                                   ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#472: FILE: airo.c:4518:
+		if (len&1) {
 		       ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#472: FILE: airo.c:4518:
+		if (len&1) {
[...]
+		else
[...]

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#473: FILE: airo.c:4519:
+			u8 tmp [2];

WARNING:LINE_SPACING: Missing a blank line after declarations
#474: FILE: airo.c:4520:
+			u8 tmp [2];
+			tmp [0] = pPacket [sizeof(etherHead) + len-1];

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#474: FILE: airo.c:4520:
+			tmp [0] = pPacket [sizeof(etherHead) + len-1];

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#474: FILE: airo.c:4520:
+			tmp [0] = pPacket [sizeof(etherHead) + len-1];

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#474: FILE: airo.c:4520:
+			tmp [0] = pPacket [sizeof(etherHead) + len-1];
 			                                          ^

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#475: FILE: airo.c:4521:
+			tmp [1] = mic[0];

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#476: FILE: airo.c:4522:
+			bap_write(ai, (const u16*)tmp, 2, BAP1);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#477: FILE: airo.c:4523:
+			bap_write(ai, (const u16*)(mic+1), sizeof(mic)-1, BAP1);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#477: FILE: airo.c:4523:
+			bap_write(ai, (const u16*)(mic+1), sizeof(mic)-1, BAP1);
 			                              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#477: FILE: airo.c:4523:
+			bap_write(ai, (const u16*)(mic+1), sizeof(mic)-1, BAP1);
 			                                              ^

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#479: FILE: airo.c:4525:
+		}
+		else

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#480: FILE: airo.c:4526:
+			bap_write(ai, (const u16*)mic, sizeof(mic), BAP1);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#482: FILE: airo.c:4528:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#482: FILE: airo.c:4528:
+	else {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#484: FILE: airo.c:4530:
+			bap_write(ai, (const u16*)&pMic, miclen, BAP1);

CHECK:CAMELCASE: Avoid CamelCase: <pMic>
#484: FILE: airo.c:4530:
+			bap_write(ai, (const u16*)&pMic, miclen, BAP1);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#485: FILE: airo.c:4531:
+		bap_write(ai, (const u16*)(pPacket + sizeof(etherHead)), len, BAP1);

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#504: FILE: airo.c:6662:
 	switch(local->config.authType)	{
+		case AUTH_ENCRYPT_WPA:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#514: FILE: airo.c:6696:
+static int airo_set_encodeext_wpa(struct airo_info *local,
+							struct iw_encode_ext *ext,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#521: FILE: airo.c:6703:
+	printk("set wpa : %d %d %d %x\n", ext->alg, ext->key_len, index, ext->ext_flags);

CHECK:BRACES: braces {} should be used on all arms of this statement
#526: FILE: airo.c:6708:
+	if ((encoding->flags & IW_ENCODE_DISABLED) ||
[...]
+	else if (ext->alg == IW_ENCODE_ALG_WEP)
[...]
+	else if (ext->alg == IW_ENCODE_ALG_TKIP && ext->key_len == 32) {
[...]
+	else
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#527: FILE: airo.c:6709:
+	if ((encoding->flags & IW_ENCODE_DISABLED) ||
+			ext->alg == IW_ENCODE_ALG_NONE || ext->key_len == 0) {

ERROR:SPACING: space prohibited after that open parenthesis '('
#529: FILE: airo.c:6711:
+		memcpy( wkr.mac, macaddr, ETH_ALEN );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#529: FILE: airo.c:6711:
+		memcpy( wkr.mac, macaddr, ETH_ALEN );

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#530: FILE: airo.c:6712:
+		printk(KERN_INFO "Wpa Removing key %d\n", index);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#537: FILE: airo.c:6719:
+	}
+	else if (ext->alg == IW_ENCODE_ALG_WEP)

CHECK:CAMELCASE: Avoid CamelCase: <authType>
#541: FILE: airo.c:6723:
+		if (local->config.authType != AUTH_ENCRYPT_WPA)

ERROR:SPACING: space prohibited after that open parenthesis '('
#544: FILE: airo.c:6726:
+		memcpy( wkr.mac, macaddr, ETH_ALEN );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#544: FILE: airo.c:6726:
+		memcpy( wkr.mac, macaddr, ETH_ALEN );

WARNING:BRACES: braces {} are not necessary for single statement blocks
#552: FILE: airo.c:6734:
+		if (ext->ext_flags & IW_ENCODE_EXT_RX_SEQ_VALID) {
+			memcpy(wkr.key + 22, ext->rx_seq, 6);
+		}

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#558: FILE: airo.c:6740:
+			memcpy(local->wpa_rx_key_m, ext->key+16, 8);
 			                                    ^

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#560: FILE: airo.c:6742:
+		}
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#560: FILE: airo.c:6742:
+		else {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#561: FILE: airo.c:6743:
+			memcpy(local->wpa_tx_key, ext->key+16, 8);
 			                                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#562: FILE: airo.c:6744:
+			memcpy(local->wpa_rx_key, ext->key+24, 8);
 			                                  ^

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#565: FILE: airo.c:6747:
+	}
+	else

CHECK:LINE_SPACING: Please don't use multiple blank lines
#568: FILE: airo.c:6750:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#582: FILE: airo.c:6764:
+		printk(KERN_INFO "Setting default tx key to %d\n", index);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#608: FILE: airo.c:6872:
+	printk("get_encode\n");

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#615: FILE: airo.c:6897:
 	switch(local->config.authType) {
+		case AUTH_ENCRYPT_WPA:

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#626: FILE: airo.c:6926:
+	printk(KERN_INFO"WPA dis\n");

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#626: FILE: airo.c:6926:
+	printk(KERN_INFO"WPA dis\n");

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#627: FILE: airo.c:6927:
+	local->config.authType=AUTH_OPEN;
 	                      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#628: FILE: airo.c:6928:
+	local->config.extra.auth_key=AUTH_KEY_MGMT_NONE;
 	                            ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#633: FILE: airo.c:6933:
+	printk(KERN_INFO"WPA enable\n");

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#633: FILE: airo.c:6933:
+	printk(KERN_INFO"WPA enable\n");

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#634: FILE: airo.c:6934:
+	local->config.authType=AUTH_ENCRYPT_WPA;
 	                      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#635: FILE: airo.c:6935:
+	local->config.extra.auth_cipher=AUTH_CIPHER_TKIP;
 	                               ^

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#654: FILE: airo.c:6961:
+		if ((param->value == IW_AUTH_CIPHER_TKIP) && (local->config.authType == AUTH_ENCRYPT_WPA))

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'param->value == IW_AUTH_CIPHER_TKIP'
#654: FILE: airo.c:6961:
+		if ((param->value == IW_AUTH_CIPHER_TKIP) && (local->config.authType == AUTH_ENCRYPT_WPA))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'local->config.authType == AUTH_ENCRYPT_WPA'
#654: FILE: airo.c:6961:
+		if ((param->value == IW_AUTH_CIPHER_TKIP) && (local->config.authType == AUTH_ENCRYPT_WPA))

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#656: FILE: airo.c:6963:
+		else if (((param->value == IW_AUTH_CIPHER_WEP40) ||(param->value == IW_AUTH_CIPHER_WEP104))

ERROR:SPACING: spaces required around that '||' (ctx:WxV)
#656: FILE: airo.c:6963:
+		else if (((param->value == IW_AUTH_CIPHER_WEP40) ||(param->value == IW_AUTH_CIPHER_WEP104))
 		                                                 ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#657: FILE: airo.c:6964:
+		else if (((param->value == IW_AUTH_CIPHER_WEP40) ||(param->value == IW_AUTH_CIPHER_WEP104))
+				&& (local->config.authType != AUTH_ENCRYPT_WPA))

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#659: FILE: airo.c:6966:
+		else if ((param->value == IW_AUTH_CIPHER_NONE) && (local->config.authType != AUTH_ENCRYPT_WPA))

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#668: FILE: airo.c:6975:
+			local->config.extra.auth_key=AUTH_KEY_MGMT_802_1X;
 			                            ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#670: FILE: airo.c:6977:
+			local->config.extra.auth_key=AUTH_KEY_MGMT_PSK;
 			                            ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#675: FILE: airo.c:6982:
+		if (!param->value) {
[...]
+		else
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#681: FILE: airo.c:6988:
+		}
+		else

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#742: FILE: airo.c:7039:
+	set_bit (FLAG_COMMIT, &local->flags);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#751: FILE: airo.c:7092:
+static int airo_disasociate(struct net_device *dev,
+		struct iw_request_info *info,

CHECK:CAMELCASE: Avoid CamelCase: <Resp>
#755: FILE: airo.c:7096:
+	Resp rsp;

CHECK:CAMELCASE: Avoid CamelCase: <SsidRid>
#756: FILE: airo.c:7097:
+	SsidRid SSID_rid;		/* SSIDs */

CHECK:CAMELCASE: Avoid CamelCase: <writeSsidRid>
#767: FILE: airo.c:7108:
+	writeSsidRid(local, &SSID_rid, 1);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#773: FILE: airo.c:7114:
+
+

CHECK:SPACING: No space is necessary after a cast
#781: FILE: airo.c:7931:
+	[SIOCSIWMLME-SIOCSIWCOMMIT] = (iw_handler) airo_disasociate,

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#781: FILE: airo.c:7931:
+	[SIOCSIWMLME-SIOCSIWCOMMIT] = (iw_handler) airo_disasociate,
 	            ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000435642.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 62 errors, 27 warnings, 49 checks, 671 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000435642.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
