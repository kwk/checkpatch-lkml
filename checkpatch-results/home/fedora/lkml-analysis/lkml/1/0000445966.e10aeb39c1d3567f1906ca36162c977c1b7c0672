WARNING:TYPO_SPELLING: 'visibile' may be misspelled - perhaps 'visible'?
#26: 
The vfsmount parameter must be set appropriately for files visibile
                                                           ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#131: FILE: fs/namei.c:1584:
+					    ATTR_MTIME|ATTR_CTIME, NULL);
 					              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#180: FILE: fs/open.c:198:
+		unsigned int time_attrs, struct file *filp)
 		                                      ^^^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#198: FILE: fs/open.c:270:
+		error = do_truncate(nd.dentry, nd.mnt, length, 0, NULL);
 		                    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#198: FILE: fs/open.c:270:
+		error = do_truncate(nd.dentry, nd.mnt, length, 0, NULL);
 		                               ^^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#208: FILE: fs/open.c:323:
+				    ATTR_MTIME|ATTR_CTIME, file);
 				              ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#226: FILE: fs/open.c:558:
+	error = notify_change(nd.dentry, nd.mnt, &newattrs);
 	                      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#226: FILE: fs/open.c:558:
+	error = notify_change(nd.dentry, nd.mnt, &newattrs);
 	                                 ^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#235: FILE: fs/open.c:572:
+static int chown_common(struct dentry * dentry, struct vfsmount *mnt,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#254: FILE: fs/open.c:616:
+	error = chown_common(nd.dentry, nd.mnt, user, group);
 	                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#254: FILE: fs/open.c:616:
+	error = chown_common(nd.dentry, nd.mnt, user, group);
 	                                ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#263: FILE: fs/open.c:636:
+	error = chown_common(nd.dentry, nd.mnt, user, group);
 	                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#263: FILE: fs/open.c:636:
+	error = chown_common(nd.dentry, nd.mnt, user, group);
 	                                ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#272: FILE: fs/open.c:650:
+	error = chown_common(nd.dentry, nd.mnt, user, group);
 	                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#272: FILE: fs/open.c:650:
+	error = chown_common(nd.dentry, nd.mnt, user, group);
 	                                ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#332: FILE: fs/utimes.c:65:
+	error = notify_change(nd.dentry, nd.mnt, &newattrs);
 	                      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#332: FILE: fs/utimes.c:65:
+	error = notify_change(nd.dentry, nd.mnt, &newattrs);
 	                                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#341: FILE: fs/utimes.c:118:
+	error = notify_change(nd.dentry, nd.mnt, &newattrs);
 	                      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#341: FILE: fs/utimes.c:118:
+	error = notify_change(nd.dentry, nd.mnt, &newattrs);
 	                                 ^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#353: FILE: include/linux/fs.h:1461:
+extern int do_truncate(struct dentry *, struct vfsmount *, loff_t start,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#353: FILE: include/linux/fs.h:1461:
+extern int do_truncate(struct dentry *, struct vfsmount *, loff_t start,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#353: FILE: include/linux/fs.h:1461:
+extern int do_truncate(struct dentry *, struct vfsmount *, loff_t start,

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#354: FILE: include/linux/fs.h:1462:
+		       unsigned int time_attrs, struct file *filp);
 		                                             ^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#363: FILE: include/linux/fs.h:1615:
+extern int notify_change(struct dentry *, struct vfsmount *, struct iattr *);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000445966.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 19 warnings, 4 checks, 278 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000445966.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
