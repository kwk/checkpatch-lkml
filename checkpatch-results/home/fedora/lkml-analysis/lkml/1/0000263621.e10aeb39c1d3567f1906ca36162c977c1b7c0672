WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#37: 
 drivers/{ide/legacy => block}/hd.c |    0 

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:TYPO_SPELLING: 'hda' may be misspelled - perhaps 'had'?
#66: FILE: drivers/block/Kconfig:452:
+	  to use "hda=noprobe hdb=noprobe" kernel parameters to prevent the new
 	          ^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#92: FILE: drivers/block/hd.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#138: FILE: drivers/block/hd.c:47:
+#include <asm/io.h>

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#139: FILE: drivers/block/hd.c:48:
+#include <asm/uaccess.h>

WARNING:TYPO_SPELLING: 'regster' may be misspelled - perhaps 'register'?
#149: FILE: drivers/block/hd.c:58:
+/* Hd controller regster ports */
                  ^^^^^^^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#195: FILE: drivers/block/hd.c:104:
+#define TIMEOUT_VALUE	(6*HZ)
                      	  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#203: FILE: drivers/block/hd.c:112:
+#define STAT_OK		(READY_STAT|SEEK_STAT)
                		           ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#204: FILE: drivers/block/hd.c:113:
+#define OK_STATUS(s)	(((s)&(STAT_OK|(BUSY_STAT|WRERR_STAT|ERR_STAT)))==STAT_OK)
                     	     ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#204: FILE: drivers/block/hd.c:113:
+#define OK_STATUS(s)	(((s)&(STAT_OK|(BUSY_STAT|WRERR_STAT|ERR_STAT)))==STAT_OK)
                     	              ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#204: FILE: drivers/block/hd.c:113:
+#define OK_STATUS(s)	(((s)&(STAT_OK|(BUSY_STAT|WRERR_STAT|ERR_STAT)))==STAT_OK)
                     	                         ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#204: FILE: drivers/block/hd.c:113:
+#define OK_STATUS(s)	(((s)&(STAT_OK|(BUSY_STAT|WRERR_STAT|ERR_STAT)))==STAT_OK)
                     	                                    ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#204: FILE: drivers/block/hd.c:113:
+#define OK_STATUS(s)	(((s)&(STAT_OK|(BUSY_STAT|WRERR_STAT|ERR_STAT)))==STAT_OK)
                     	                                                ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#234: FILE: drivers/block/hd.c:143:
+#define TIMEOUT_VALUE (6*HZ)
                         ^

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#241: FILE: drivers/block/hd.c:150:
+static void (*do_hd)(void) = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#242: FILE: drivers/block/hd.c:151:
+#define SET_HANDLER(x) \
+if ((do_hd = (x)) != NULL) \
+	SET_TIMER; \
+else \
+	del_timer(&device_timer);

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#242: FILE: drivers/block/hd.c:151:
+#define SET_HANDLER(x) \
+if ((do_hd = (x)) != NULL) \
+	SET_TIMER; \
+else \
+	del_timer(&device_timer);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#243: FILE: drivers/block/hd.c:152:
+if ((do_hd = (x)) != NULL) \

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#248: FILE: drivers/block/hd.c:157:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#284: FILE: drivers/block/hd.c:193:
+	NR_HD = hdind+1;
 	             ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#290: FILE: drivers/block/hd.c:199:
+	char *name = "hd?";
+	if (CURRENT)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#294: FILE: drivers/block/hd.c:203:
+	printk("%s: %s: status=0x%02x { ", name, msg, stat & 0xff);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#295: FILE: drivers/block/hd.c:204:
+	if (stat & BUSY_STAT)	printk("Busy ");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#295: FILE: drivers/block/hd.c:204:
+	if (stat & BUSY_STAT)	printk("Busy ");

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#296: FILE: drivers/block/hd.c:205:
+	if (stat & READY_STAT)	printk("DriveReady ");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#296: FILE: drivers/block/hd.c:205:
+	if (stat & READY_STAT)	printk("DriveReady ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#297: FILE: drivers/block/hd.c:206:
+	if (stat & WRERR_STAT)	printk("WriteFault ");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#297: FILE: drivers/block/hd.c:206:
+	if (stat & WRERR_STAT)	printk("WriteFault ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#298: FILE: drivers/block/hd.c:207:
+	if (stat & SEEK_STAT)	printk("SeekComplete ");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#298: FILE: drivers/block/hd.c:207:
+	if (stat & SEEK_STAT)	printk("SeekComplete ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#299: FILE: drivers/block/hd.c:208:
+	if (stat & DRQ_STAT)	printk("DataRequest ");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#299: FILE: drivers/block/hd.c:208:
+	if (stat & DRQ_STAT)	printk("DataRequest ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#300: FILE: drivers/block/hd.c:209:
+	if (stat & ECC_STAT)	printk("CorrectedError ");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#300: FILE: drivers/block/hd.c:209:
+	if (stat & ECC_STAT)	printk("CorrectedError ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#301: FILE: drivers/block/hd.c:210:
+	if (stat & INDEX_STAT)	printk("Index ");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#301: FILE: drivers/block/hd.c:210:
+	if (stat & INDEX_STAT)	printk("Index ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#302: FILE: drivers/block/hd.c:211:
+	if (stat & ERR_STAT)	printk("Error ");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#302: FILE: drivers/block/hd.c:211:
+	if (stat & ERR_STAT)	printk("Error ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#303: FILE: drivers/block/hd.c:212:
+	printk("}\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#308: FILE: drivers/block/hd.c:217:
+		printk("%s: %s: error=0x%02x { ", name, msg, hd_error & 0xff);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#309: FILE: drivers/block/hd.c:218:
+		if (hd_error & BBD_ERR)		printk("BadSector ");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#309: FILE: drivers/block/hd.c:218:
+		if (hd_error & BBD_ERR)		printk("BadSector ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#310: FILE: drivers/block/hd.c:219:
+		if (hd_error & ECC_ERR)		printk("UncorrectableError ");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#310: FILE: drivers/block/hd.c:219:
+		if (hd_error & ECC_ERR)		printk("UncorrectableError ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#311: FILE: drivers/block/hd.c:220:
+		if (hd_error & ID_ERR)		printk("SectorIdNotFound ");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#311: FILE: drivers/block/hd.c:220:
+		if (hd_error & ID_ERR)		printk("SectorIdNotFound ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#312: FILE: drivers/block/hd.c:221:
+		if (hd_error & ABRT_ERR)	printk("DriveStatusError ");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#312: FILE: drivers/block/hd.c:221:
+		if (hd_error & ABRT_ERR)	printk("DriveStatusError ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#313: FILE: drivers/block/hd.c:222:
+		if (hd_error & TRK0_ERR)	printk("TrackZeroNotFound ");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#313: FILE: drivers/block/hd.c:222:
+		if (hd_error & TRK0_ERR)	printk("TrackZeroNotFound ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#314: FILE: drivers/block/hd.c:223:
+		if (hd_error & MARK_ERR)	printk("AddrMarkNotFound ");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#314: FILE: drivers/block/hd.c:223:
+		if (hd_error & MARK_ERR)	printk("AddrMarkNotFound ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#315: FILE: drivers/block/hd.c:224:
+		printk("}");

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#316: FILE: drivers/block/hd.c:225:
+		if (hd_error & (BBD_ERR|ECC_ERR|ID_ERR|MARK_ERR)) {
 		                       ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#316: FILE: drivers/block/hd.c:225:
+		if (hd_error & (BBD_ERR|ECC_ERR|ID_ERR|MARK_ERR)) {
 		                               ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#316: FILE: drivers/block/hd.c:225:
+		if (hd_error & (BBD_ERR|ECC_ERR|ID_ERR|MARK_ERR)) {
 		                                      ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#317: FILE: drivers/block/hd.c:226:
+			printk(", CHS=%d/%d/%d", (inb(HD_HCYL)<<8) + inb(HD_LCYL),

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#317: FILE: drivers/block/hd.c:226:
+			printk(", CHS=%d/%d/%d", (inb(HD_HCYL)<<8) + inb(HD_LCYL),
 			                                      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#318: FILE: drivers/block/hd.c:227:
+			printk(", CHS=%d/%d/%d", (inb(HD_HCYL)<<8) + inb(HD_LCYL),
+				inb(HD_CURRENT) & 0xf, inb(HD_SECTOR));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#320: FILE: drivers/block/hd.c:229:
+				printk(", sector=%ld", CURRENT->sector);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#322: FILE: drivers/block/hd.c:231:
+		printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#325: FILE: drivers/block/hd.c:234:
+	printk("%s: %s: status=0x%02x.\n", name, msg, stat & 0xff);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#330: FILE: drivers/block/hd.c:239:
+		printk("%s: %s: error=0x%02x.\n", name, msg, hd_error & 0xff);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#378: FILE: drivers/block/hd.c:287:
+		outb_p(0xA0 | (drive<<4) | head, HD_CURRENT);
 		                    ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 29)
#396: FILE: drivers/block/hd.c:305:
+	while (read_timer() - last_req < HD_DELAY)
+		/* nothing */;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#417: FILE: drivers/block/hd.c:326:
+static void hd_request (void);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#438: FILE: drivers/block/hd.c:347:
+	for (i = 0; i < 1000; i++) barrier();

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#440: FILE: drivers/block/hd.c:349:
+	for (i = 0; i < 1000; i++) barrier();

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#442: FILE: drivers/block/hd.c:351:
+		printk("hd: controller still busy\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#443: FILE: drivers/block/hd.c:352:
+	else if ((hd_error = inb(HD_ERROR)) != 1)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#444: FILE: drivers/block/hd.c:353:
+		printk("hd: controller reset failed: %02x\n", hd_error);

CHECK:BRACES: braces {} should be used on all arms of this statement
#461: FILE: drivers/block/hd.c:370:
+	if (++i < NR_HD) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#463: FILE: drivers/block/hd.c:372:
+		struct hd_i_struct *disk = &hd_info[i];
+		disk->special_op = disk->recalibrate = 1;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#463: FILE: drivers/block/hd.c:372:
+		disk->special_op = disk->recalibrate = 1;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#464: FILE: drivers/block/hd.c:373:
+		hd_out(disk, disk->sect, disk->sect, disk->head-1,
 		                                               ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#465: FILE: drivers/block/hd.c:374:
+		hd_out(disk, disk->sect, disk->sect, disk->head-1,
+			disk->cyl, WIN_SPECIFY, &reset_hd);

CHECK:BRACES: Unbalanced braces around else statement
#468: FILE: drivers/block/hd.c:377:
+	} else

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#485: FILE: drivers/block/hd.c:394:
+	if (stat & (BUSY_STAT|DRQ_STAT|ECC_STAT|ERR_STAT)) {
 	                     ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#485: FILE: drivers/block/hd.c:394:
+	if (stat & (BUSY_STAT|DRQ_STAT|ECC_STAT|ERR_STAT)) {
 	                              ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#485: FILE: drivers/block/hd.c:394:
+	if (stat & (BUSY_STAT|DRQ_STAT|ECC_STAT|ERR_STAT)) {
 	                                       ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#499: FILE: drivers/block/hd.c:408:
+	struct request *req = CURRENT;
+	if (req != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "req"
#499: FILE: drivers/block/hd.c:408:
+	if (req != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LINE_SPACING: Missing a blank line after declarations
#501: FILE: drivers/block/hd.c:410:
+		struct hd_i_struct *disk = req->rq_disk->private_data;
+		if (++req->errors >= MAX_ERRORS || (hd_error & BBD_ERR)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#501: FILE: drivers/block/hd.c:410:
+		if (++req->errors >= MAX_ERRORS || (hd_error & BBD_ERR)) {
[...]
+		} else if (req->errors % RESET_FREQ == 0)
[...]
+		else if ((hd_error & TRK0_ERR) || req->errors % RECAL_FREQ == 0)
[...]

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#503: FILE: drivers/block/hd.c:412:
+			disk->special_op = disk->recalibrate = 1;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#507: FILE: drivers/block/hd.c:416:
+			disk->special_op = disk->recalibrate = 1;

CHECK:SPACING: No space is necessary after a cast
#532: FILE: drivers/block/hd.c:441:
+		i = (unsigned) inb_p(HD_STATUS);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#532: FILE: drivers/block/hd.c:441:
+		i = (unsigned) inb_p(HD_STATUS);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#553: FILE: drivers/block/hd.c:462:
+	printk("%s: read: sector %ld, remaining = %ld, buffer=%p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#554: FILE: drivers/block/hd.c:463:
+	printk("%s: read: sector %ld, remaining = %ld, buffer=%p\n",
+		req->rq_disk->disk_name, req->sector, req->nr_sectors,

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#555: FILE: drivers/block/hd.c:464:
+		req->buffer+512);
 		           ^

CHECK:SPACING: No space is necessary after a cast
#563: FILE: drivers/block/hd.c:472:
+	(void) inb_p(HD_STATUS);

WARNING:RETURN_VOID: void function return statements are not generally useful
#570: FILE: drivers/block/hd.c:479:
+	return;
+}

CHECK:SPACING: No space is necessary after a cast
#579: FILE: drivers/block/hd.c:488:
+		i = (unsigned) inb_p(HD_STATUS);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#579: FILE: drivers/block/hd.c:488:
+		i = (unsigned) inb_p(HD_STATUS);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'req->nr_sectors <= 1'
#584: FILE: drivers/block/hd.c:493:
+		if ((req->nr_sectors <= 1) || (i & DRQ_STAT))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:RETURN_VOID: void function return statements are not generally useful
#609: FILE: drivers/block/hd.c:518:
+	return;
+}

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#637: FILE: drivers/block/hd.c:546:
+	printk("%s: timeout\n", name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#640: FILE: drivers/block/hd.c:549:
+		printk("%s: too many errors\n", name);

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#657: FILE: drivers/block/hd.c:566:
+		printk("%s: cannot handle device with more than 16 heads - giving up\n", req->rq_disk->disk_name);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#657: FILE: drivers/block/hd.c:566:
+		printk("%s: cannot handle device with more than 16 heads - giving up\n", req->rq_disk->disk_name);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#701: FILE: drivers/block/hd.c:610:
+	    ((block+nsect) > get_capacity(req->rq_disk))) {
 	           ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#702: FILE: drivers/block/hd.c:611:
+		printk("%s: bad access: block=%d, count=%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#703: FILE: drivers/block/hd.c:612:
+		printk("%s: bad access: block=%d, count=%d\n",
+			req->rq_disk->disk_name, block, nsect);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#718: FILE: drivers/block/hd.c:627:
+	printk("%s: %sing: CHS=%d/%d/%d, sectors=%d, buffer=%p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#719: FILE: drivers/block/hd.c:628:
+	printk("%s: %sing: CHS=%d/%d/%d, sectors=%d, buffer=%p\n",
+		req->rq_disk->disk_name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#727: FILE: drivers/block/hd.c:636:
+			hd_out(disk, nsect, sec, head, cyl, WIN_READ,
+				&read_intr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#733: FILE: drivers/block/hd.c:642:
+			hd_out(disk, nsect, sec, head, cyl, WIN_WRITE,
+				&write_intr);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#743: FILE: drivers/block/hd.c:652:
+			printk("unknown hd-command\n");

WARNING:CONST_STRUCT: struct block_device_operations should normally be const
#785: FILE: drivers/block/hd.c:694:
+static struct block_device_operations hd_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:TYPO_SPELLING: 'auxilliary' may be misspelled - perhaps 'auxiliary'?
#827: FILE: drivers/block/hd.c:736:
+		 * probably an auxilliary controller added to recover
 		               ^^^^^^^^^^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#832: FILE: drivers/block/hd.c:741:
+		printk("hd: no drives specified - use hd=cyl,head,sectors"

WARNING:SPLIT_STRING: quoted string split across lines
#833: FILE: drivers/block/hd.c:742:
+		printk("hd: no drives specified - use hd=cyl,head,sectors"
+			" on kernel command line\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:LINE_SPACING: Missing a blank line after declarations
#840: FILE: drivers/block/hd.c:749:
+		struct hd_i_struct *p = &hd_info[drive];
+		if (!disk)

CHECK:CAMELCASE: Avoid CamelCase: <Enomem>
#841: FILE: drivers/block/hd.c:750:
+			goto Enomem;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#845: FILE: drivers/block/hd.c:754:
+		sprintf(disk->disk_name, "hd%c", 'a'+drive);
 		                                    ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#851: FILE: drivers/block/hd.c:760:
+		printk("%s: %luMB, CHS=%d/%d/%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#852: FILE: drivers/block/hd.c:761:
+		printk("%s: %luMB, CHS=%d/%d/%d\n",
+			disk->disk_name, (unsigned long)get_capacity(disk)/2048,

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#852: FILE: drivers/block/hd.c:761:
+			disk->disk_name, (unsigned long)get_capacity(disk)/2048,
 			                                                  ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#857: FILE: drivers/block/hd.c:766:
+		printk("hd: unable to get IRQ%d for the hard disk driver\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#858: FILE: drivers/block/hd.c:767:
+		printk("hd: unable to get IRQ%d for the hard disk driver\n",
+			HD_IRQ);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#862: FILE: drivers/block/hd.c:771:
+		printk(KERN_WARNING "hd: port 0x%x busy\n", HD_DATA);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#866: FILE: drivers/block/hd.c:775:
+		printk(KERN_WARNING "hd: port 0x%x busy\n", HD_CMD);

CHECK:SPACING: No space is necessary after a cast
#899: FILE: drivers/block/hd.c:808:
+	(void) get_options(line, ARRAY_SIZE(ints), ints);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#904: FILE: drivers/block/hd.c:813:
+__setup("hd=", parse_hd_setup);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000263621.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 21 errors, 59 warnings, 45 checks, 881 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000263621.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
