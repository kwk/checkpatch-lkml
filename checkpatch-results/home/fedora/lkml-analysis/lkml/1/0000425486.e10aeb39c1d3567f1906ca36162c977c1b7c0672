WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#174: FILE: drivers/serial/Kconfig:447:
+config SERIAL_ZS
+	tristate "DECstation Z85C30 serial support"
+	depends on MACH_DECSTATION
+	select SERIAL_CORE
+	default y
+	---help---
+	  Support for the Zilog 85C350 serial communications controller used
+	  for serial ports in newer DECstation systems.  These include the
+	  DECsystem 5900 and all models of the DECstation and DECsystem 5000
+	  systems except from model 200.
+
+	  If unsure, say Y.  To compile this driver as a module, choose M here:
+	  the module will be called zs.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#188: FILE: drivers/serial/Kconfig:461:
+config SERIAL_ZS_CONSOLE
+	bool "Support for console on a DECstation Z85C30 serial port"
+	depends on SERIAL_ZS=y
+	select SERIAL_CORE_CONSOLE
+	default y
+	---help---
+	  If you say Y here, it will be possible to use a serial port as the
+	  system console (the system console is the device which receives all
+	  kernel messages and warnings and which allows logins in single user
+	  mode).
+
+	  Note that the firmware uses ttyS1 as the serial console on the
+	  Maxine and ttyS3 on the others using this driver.
+
+	  If unsure, say Y.
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#222: FILE: drivers/serial/zs.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/bug.h> instead of <asm/bug.h>
#286: FILE: drivers/serial/zs.c:65:
+#include <asm/bug.h>

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#287: FILE: drivers/serial/zs.c:66:
+#include <asm/io.h>

WARNING:LONG_LINE_COMMENT: line length of 147 exceeds 100 columns
#310: FILE: drivers/serial/zs.c:89:
+#define ZS_CHAN_IO_OFFSET 1		/* The SCC resides on the high byte						   of the 16-bit IOBUS.  */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#311: FILE: drivers/serial/zs.c:90:
+#define ZS_CLOCK        7372800 ^I/* Z85C30 PCLK input clock rate.  */$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#346: FILE: drivers/serial/zs.c:125:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#352: FILE: drivers/serial/zs.c:131:
+	volatile void __iomem *control = zport->port.membase +

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#367: FILE: drivers/serial/zs.c:146:
+	volatile void __iomem *control = zport->port.membase +

WARNING:RETURN_VOID: void function return statements are not generally useful
#377: FILE: drivers/serial/zs.c:156:
+	return;
+}

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#381: FILE: drivers/serial/zs.c:160:
+	volatile void __iomem *data = zport->port.membase +

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#392: FILE: drivers/serial/zs.c:171:
+	volatile void __iomem *data = zport->port.membase +

WARNING:RETURN_VOID: void function return statements are not generally useful
#398: FILE: drivers/serial/zs.c:177:
+	return;
+}

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#410: FILE: drivers/serial/zs.c:189:
+			printk("W%-2d = 0x%02x\t", j, zport->regs[j]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#411: FILE: drivers/serial/zs.c:190:
+		printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#413: FILE: drivers/serial/zs.c:192:
+			printk("R%-2d = 0x%02x\t", j, read_zsreg(zport, j));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#414: FILE: drivers/serial/zs.c:193:
+		printk("\n\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#419: FILE: drivers/serial/zs.c:198:
+
+

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#420: FILE: drivers/serial/zs.c:199:
+static inline void zs_spin_lock_cond_irq(spinlock_t* lock, int irq)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#428: FILE: drivers/serial/zs.c:207:
+static inline void zs_spin_unlock_cond_irq(spinlock_t* lock, int irq)

CHECK:CAMELCASE: Avoid CamelCase: <Rx_CH_AV>
#440: FILE: drivers/serial/zs.c:219:
+	while ((read_zsreg(zport, R0) & Rx_CH_AV) && loops--)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Tx_BUF_EMP>
#450: FILE: drivers/serial/zs.c:229:
+	while (!(read_zsreg(zport, R0) & Tx_BUF_EMP) && loops--) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#458: FILE: drivers/serial/zs.c:237:
+
+

CHECK:CAMELCASE: Avoid CamelCase: <RxENABLE>
#463: FILE: drivers/serial/zs.c:242:
+	write_zsreg(zport, R3, regs[3] & ~RxENABLE);

CHECK:CAMELCASE: Avoid CamelCase: <TxENAB>
#464: FILE: drivers/serial/zs.c:243:
+	write_zsreg(zport, R5, regs[5] & ~TxENAB);

WARNING:RETURN_VOID: void function return statements are not generally useful
#481: FILE: drivers/serial/zs.c:260:
+	return;
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#483: FILE: drivers/serial/zs.c:262:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#492: FILE: drivers/serial/zs.c:271:
+ * ^I    is emptied.  On bus types like RS485, the transmitter must$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#493: FILE: drivers/serial/zs.c:272:
+ * ^I    release the bus after transmitting.  This must be done when$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#494: FILE: drivers/serial/zs.c:273:
+ * ^I    the transmit shift register is empty, not be done when the$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#495: FILE: drivers/serial/zs.c:274:
+ * ^I    transmit holding register is empty.  This functionality$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#496: FILE: drivers/serial/zs.c:275:
+ * ^I    allows an RS485 driver to be written in user space.$

CHECK:CAMELCASE: Avoid CamelCase: <RxINT_MASK>
#653: FILE: drivers/serial/zs.c:432:
+	zport->regs[1] &= ~(RxINT_MASK | TxINT_ENAB);

CHECK:CAMELCASE: Avoid CamelCase: <TxINT_ENAB>
#653: FILE: drivers/serial/zs.c:432:
+	zport->regs[1] &= ~(RxINT_MASK | TxINT_ENAB);

CHECK:CAMELCASE: Avoid CamelCase: <RxINT_DISAB>
#654: FILE: drivers/serial/zs.c:433:
+	zport->regs[1] |= RxINT_DISAB;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#724: FILE: drivers/serial/zs.c:503:
+
+

CHECK:CAMELCASE: Avoid CamelCase: <Rx_BRK>
#728: FILE: drivers/serial/zs.c:507:
+#define Rx_BRK 0x0100			/* BREAK event software flag.  */

CHECK:CAMELCASE: Avoid CamelCase: <Rx_SYS>
#729: FILE: drivers/serial/zs.c:508:
+#define Rx_SYS 0x0200			/* SysRq event software flag.  */

CHECK:CAMELCASE: Avoid CamelCase: <Rx_OVR>
#747: FILE: drivers/serial/zs.c:526:
+		status = read_zsreg(zport, R1) & (Rx_OVR | FRM_ERR | PAR_ERR);

CHECK:CAMELCASE: Avoid CamelCase: <CHBRxIP>
#924: FILE: drivers/serial/zs.c:703:
+		if (zs_intreg & CHBRxIP)

CHECK:CAMELCASE: Avoid CamelCase: <CHARxIP>
#926: FILE: drivers/serial/zs.c:705:
+		if (zs_intreg & CHARxIP)

CHECK:CAMELCASE: Avoid CamelCase: <CHBTxIP>
#932: FILE: drivers/serial/zs.c:711:
+		if (zs_intreg & CHBTxIP)

CHECK:CAMELCASE: Avoid CamelCase: <CHATxIP>
#934: FILE: drivers/serial/zs.c:713:
+		if (zs_intreg & CHATxIP)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#943: FILE: drivers/serial/zs.c:722:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#958: FILE: drivers/serial/zs.c:737:
+			printk(KERN_ERR "zs: can't get irq %d\n",

CHECK:CAMELCASE: Avoid CamelCase: <RxINT_ALL>
#979: FILE: drivers/serial/zs.c:758:
+	zport->regs[1] |= RxINT_ALL | TxINT_ENAB | EXT_INT_ENAB;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1019: FILE: drivers/serial/zs.c:798:
+
+

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#1030: FILE: drivers/serial/zs.c:809:
+		udelay(10);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

CHECK:CAMELCASE: Avoid CamelCase: <RxNBITS_MASK>
#1052: FILE: drivers/serial/zs.c:831:
+	zport->regs[3] &= ~RxNBITS_MASK;

CHECK:CAMELCASE: Avoid CamelCase: <TxNBITS_MASK>
#1053: FILE: drivers/serial/zs.c:832:
+	zport->regs[5] &= ~TxNBITS_MASK;

CHECK:CAMELCASE: Avoid CamelCase: <Rx5>
#1056: FILE: drivers/serial/zs.c:835:
+		zport->regs[3] |= Rx5;

CHECK:CAMELCASE: Avoid CamelCase: <Tx5>
#1057: FILE: drivers/serial/zs.c:836:
+		zport->regs[5] |= Tx5;

CHECK:CAMELCASE: Avoid CamelCase: <Rx6>
#1060: FILE: drivers/serial/zs.c:839:
+		zport->regs[3] |= Rx6;

CHECK:CAMELCASE: Avoid CamelCase: <Tx6>
#1061: FILE: drivers/serial/zs.c:840:
+		zport->regs[5] |= Tx6;

CHECK:CAMELCASE: Avoid CamelCase: <Rx7>
#1064: FILE: drivers/serial/zs.c:843:
+		zport->regs[3] |= Rx7;

CHECK:CAMELCASE: Avoid CamelCase: <Tx7>
#1065: FILE: drivers/serial/zs.c:844:
+		zport->regs[5] |= Tx7;

CHECK:CAMELCASE: Avoid CamelCase: <Rx8>
#1069: FILE: drivers/serial/zs.c:848:
+		zport->regs[3] |= Rx8;

CHECK:CAMELCASE: Avoid CamelCase: <Tx8>
#1070: FILE: drivers/serial/zs.c:849:
+		zport->regs[5] |= Tx8;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1098: FILE: drivers/serial/zs.c:877:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1124: FILE: drivers/serial/zs.c:903:
+		if (!(termios->c_cflag & CLOCAL)) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1126: FILE: drivers/serial/zs.c:905:
+		} else

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1128: FILE: drivers/serial/zs.c:907:
+		if (termios->c_cflag & CRTSCTS) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1130: FILE: drivers/serial/zs.c:909:
+		} else

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1141: FILE: drivers/serial/zs.c:920:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1160: FILE: drivers/serial/zs.c:939:
+		printk(KERN_ERR "zs: Cannot map MMIO\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1171: FILE: drivers/serial/zs.c:950:
+		printk(KERN_ERR "zs: Unable to reserve MMIO resource\n");

WARNING:TYPO_SPELLING: 'ser' may be misspelled - perhaps 'set'?
#1196: FILE: drivers/serial/zs.c:975:
+static int zs_verify_port(struct uart_port *uport, struct serial_struct *ser)
                                                                          ^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1210: FILE: drivers/serial/zs.c:989:
+
+

WARNING:CONST_STRUCT: struct uart_ops should normally be const
#1211: FILE: drivers/serial/zs.c:990:
+static struct uart_ops zs_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1290: FILE: drivers/serial/zs.c:1069:
+
+

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1407: FILE: drivers/serial/zs.c:1186:
+#define SERIAL_ZS_CONSOLE	&zs_sercons

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1427: FILE: drivers/serial/zs.c:1206:
+	printk("%s%s\n", zs_name, zs_version);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1440: FILE: drivers/serial/zs.c:1219:
+^I^Iuport = &zs_sccs[i / ZS_NUM_CHAN].zport[i % ZS_NUM_CHAN].port; $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#1440: FILE: drivers/serial/zs.c:1219:
+		struct uart_port *uport;
+		uport = &zs_sccs[i / ZS_NUM_CHAN].zport[i % ZS_NUM_CHAN].port; 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1454: FILE: drivers/serial/zs.c:1233:
+^I^Iuport = &zs_sccs[i / ZS_NUM_CHAN].zport[i % ZS_NUM_CHAN].port; $

WARNING:LINE_SPACING: Missing a blank line after declarations
#1454: FILE: drivers/serial/zs.c:1233:
+		struct uart_port *uport;
+		uport = &zs_sccs[i / ZS_NUM_CHAN].zport[i % ZS_NUM_CHAN].port; 

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1472: FILE: drivers/serial/zs.h:1:
+/*

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1512: FILE: drivers/serial/zs.h:41:
+	spinlock_t	zlock;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1516: FILE: drivers/serial/zs.h:45:
+^I$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bps' - possible side-effects?
#1523: FILE: drivers/serial/zs.h:52:
+#define ZS_BPS_TO_BRG(bps, freq) ((((freq) + (bps)) / (2 * (bps))) - 2)

CHECK:CAMELCASE: Avoid CamelCase: <RxINT_FCERR>
#1566: FILE: drivers/serial/zs.h:95:
+#define RxINT_FCERR	0x8	/* Rx Int on First Character Only or Error */

CHECK:CAMELCASE: Avoid CamelCase: <RxINT_ERR>
#1568: FILE: drivers/serial/zs.h:97:
+#define RxINT_ERR	0x18	/* Int on error only */

CHECK:CAMELCASE: Avoid CamelCase: <RxCRC_ENAB>
#1581: FILE: drivers/serial/zs.h:110:
+#define RxCRC_ENAB	0x8	/* Rx CRC Enable */

CHECK:CAMELCASE: Avoid CamelCase: <TxCRC_ENAB>
#1612: FILE: drivers/serial/zs.h:141:
+#define TxCRC_ENAB	0x1	/* Tx CRC Enable */

CHECK:CAMELCASE: Avoid CamelCase: <TRxCXT>
#1655: FILE: drivers/serial/zs.h:184:
+#define TRxCXT		0	/* TRxC = Xtal output */

CHECK:CAMELCASE: Avoid CamelCase: <TRxCTC>
#1656: FILE: drivers/serial/zs.h:185:
+#define TRxCTC		1	/* TRxC = Transmit clock */

CHECK:CAMELCASE: Avoid CamelCase: <TRxCBR>
#1657: FILE: drivers/serial/zs.h:186:
+#define TRxCBR		2	/* TRxC = BR Generator Output */

CHECK:CAMELCASE: Avoid CamelCase: <TRxCDP>
#1658: FILE: drivers/serial/zs.h:187:
+#define TRxCDP		3	/* TRxC = DPLL output */

CHECK:CAMELCASE: Avoid CamelCase: <TRxCOI>
#1659: FILE: drivers/serial/zs.h:188:
+#define TRxCOI		4	/* TRxC O/I */

CHECK:CAMELCASE: Avoid CamelCase: <TCRTxCP>
#1660: FILE: drivers/serial/zs.h:189:
+#define TCRTxCP		0	/* Transmit clock = RTxC pin */

CHECK:CAMELCASE: Avoid CamelCase: <TCTRxCP>
#1661: FILE: drivers/serial/zs.h:190:
+#define TCTRxCP		8	/* Transmit clock = TRxC pin */

CHECK:CAMELCASE: Avoid CamelCase: <RCRTxCP>
#1664: FILE: drivers/serial/zs.h:193:
+#define RCRTxCP		0	/* Receive clock = RTxC pin */

CHECK:CAMELCASE: Avoid CamelCase: <RCTRxCP>
#1665: FILE: drivers/serial/zs.h:194:
+#define RCTRxCP		0x20	/* Receive clock = TRxC pin */

CHECK:CAMELCASE: Avoid CamelCase: <RTxCX>
#1668: FILE: drivers/serial/zs.h:197:
+#define RTxCX		0x80	/* RTxC Xtal/No Xtal */

CHECK:CAMELCASE: Avoid CamelCase: <TxUIE>
#1694: FILE: drivers/serial/zs.h:223:
+#define TxUIE		0x40	/* Tx Underrun/EOM IE */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1697: FILE: drivers/serial/zs.h:226:
+
+

CHECK:CAMELCASE: Avoid CamelCase: <TxEOM>
#1705: FILE: drivers/serial/zs.h:234:
+#define TxEOM		0x40	/* Tx underrun */

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000425486.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 35 warnings, 57 checks, 1630 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000425486.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
