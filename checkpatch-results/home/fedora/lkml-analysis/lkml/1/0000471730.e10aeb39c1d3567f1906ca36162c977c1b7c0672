WARNING:TYPO_SPELLING: 'aproach' may be misspelled - perhaps 'approach'?
#19: 
Subject: [PATCH/RFC] alternative aproach to: Ban module license tag string
                                 ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#27: 
X-Provags-ID: kundenserver.de abuse@kundenserver.de login:9b3b2cc444a07783f194c895a09f1de9

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#40: 
Signed-Off-By: Bodo Eggert <7eggert@gmx.de>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

ERROR:CODE_INDENT: code indent should use tabs where possible
#90: FILE: include/linux/license.h:5:
+                                            int length)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#90: FILE: include/linux/license.h:5:
+                                            int length)$

WARNING:STATIC_CONST_CHAR_ARRAY: char * array declaration might be better as static const
#98: FILE: include/linux/license.h:7:
+	static char *gpl_compatible[] = {

ERROR:SPACING: space required before the open parenthesis '('
#110: FILE: include/linux/license.h:19:
+		if(!strcmp(license, *p)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#111: FILE: include/linux/license.h:20:
+		if(!strcmp(license, *p)
+		&& length == strlen(*p))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'tag' - possible side-effects?
#126: FILE: include/linux/module.h:95:
+#define MODULE_INFO_I(tag, info) __MODULE_INFO_I(tag, tag, info)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#143: FILE: include/linux/moduleinfo.h:1:
+#ifndef __MODULEINFO_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#147: FILE: include/linux/moduleinfo.h:5:
+	char * s;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#151: FILE: include/linux/moduleinfo.h:9:
+extern void do_get_next_modinfo_len(struct pstring_len *ret,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:CODE_INDENT: code indent should use tabs where possible
#152: FILE: include/linux/moduleinfo.h:10:
+                                    char * start,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#152: FILE: include/linux/moduleinfo.h:10:
+                                    char * start,$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#152: FILE: include/linux/moduleinfo.h:10:
+                                    char * start,

ERROR:CODE_INDENT: code indent should use tabs where possible
#153: FILE: include/linux/moduleinfo.h:11:
+                                    unsigned long size,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#153: FILE: include/linux/moduleinfo.h:11:
+                                    unsigned long size,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#154: FILE: include/linux/moduleinfo.h:12:
+                                    const char *tag);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#154: FILE: include/linux/moduleinfo.h:12:
+                                    const char *tag);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#159: FILE: include/linux/moduleinfo.h:17:
+extern char *next_string(char *string, unsigned long *secsize);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#170: FILE: include/linux/moduleparam.h:24:
+static const char __module_cat(name,__LINE__)[]                           \
                                    ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#171: FILE: include/linux/moduleparam.h:25:
+  __attribute_used__                                                      \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#172: FILE: include/linux/moduleparam.h:26:
+  __attribute__((section(".modinfo"),unused)) = __stringify(tag) "=" info;\$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#172: FILE: include/linux/moduleparam.h:26:
+  __attribute__((section(".modinfo"),unused)) = __stringify(tag) "=" info;\
                                     ^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".modinfo") over __attribute__((section(".modinfo")))
#172: FILE: include/linux/moduleparam.h:26:
+  __attribute__((section(".modinfo"),unused)) = __stringify(tag) "=" info;\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#173: FILE: include/linux/moduleparam.h:27:
+static const char __module_cat(name ## _len,__LINE__)[]                   \
                                            ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#174: FILE: include/linux/moduleparam.h:28:
+  __attribute_used__                                                      \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#175: FILE: include/linux/moduleparam.h:29:
+  __attribute__((section(".modinfo"),unused)) = {'$','=',                 \$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#175: FILE: include/linux/moduleparam.h:29:
+  __attribute__((section(".modinfo"),unused)) = {'$','=',                 \
                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#175: FILE: include/linux/moduleparam.h:29:
+  __attribute__((section(".modinfo"),unused)) = {'$','=',                 \
                                                     ^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".modinfo") over __attribute__((section(".modinfo")))
#175: FILE: include/linux/moduleparam.h:29:
+  __attribute__((section(".modinfo"),unused)) = {'$','=',                 \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#176: FILE: include/linux/moduleparam.h:30:
+     (sizeof(info)        & 0x3f) + 32,                                   \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#177: FILE: include/linux/moduleparam.h:31:
+    ((sizeof(info) >>  6) & 0x3f) + 32,                                   \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#178: FILE: include/linux/moduleparam.h:32:
+    ((sizeof(info) >> 12) & 0x3f) + 32, 0 }$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#253: FILE: kernel/module.c:1349:
+		if (taglen + 1 < size
+		&&  strncmp(p, tag, taglen) == 0 && p[taglen] == '=')

ERROR:CODE_INDENT: code indent should use tabs where possible
#260: FILE: kernel/module.c:1356:
+                  Elf_Shdr *sechdrs,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#260: FILE: kernel/module.c:1356:
+void get_next_modinfo_len(struct pstring_len *ret,
+                  Elf_Shdr *sechdrs,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#260: FILE: kernel/module.c:1356:
+                  Elf_Shdr *sechdrs,$

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Shdr>
#260: FILE: kernel/module.c:1356:
+                  Elf_Shdr *sechdrs,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:CODE_INDENT: code indent should use tabs where possible
#261: FILE: kernel/module.c:1357:
+                  unsigned int info,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#261: FILE: kernel/module.c:1357:
+                  unsigned int info,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#262: FILE: kernel/module.c:1358:
+                  const char *tag)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#262: FILE: kernel/module.c:1358:
+                  const char *tag)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#265: FILE: kernel/module.c:1361:
+^I                        sechdrs[info].sh_size, tag);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#266: FILE: kernel/module.c:1362:
+^I                        $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#266: FILE: kernel/module.c:1362:
+^I                        $

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#267: FILE: kernel/module.c:1363:
+	                        
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#270: FILE: kernel/module.c:1366:
+                        Elf_Shdr *sechdrs,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#270: FILE: kernel/module.c:1366:
+                        Elf_Shdr *sechdrs,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#271: FILE: kernel/module.c:1367:
+                        unsigned int info)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#271: FILE: kernel/module.c:1367:
+                        unsigned int info)$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#273: FILE: kernel/module.c:1369:
+	char * license_gpl    = NULL;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#274: FILE: kernel/module.c:1370:
+	char * license_nongpl = NULL;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#276: FILE: kernel/module.c:1372:
+^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#293: FILE: kernel/module.c:1389:
+	 * & co., since they'll usurally load proprietary code */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#295: FILE: kernel/module.c:1391:
+	if (!license_gpl
+	||  strcmp(mod->name, "ndiswrapper") == 0

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#296: FILE: kernel/module.c:1392:
+	||  strcmp(mod->name, "ndiswrapper") == 0
+	||  strcmp(mod->name, "driverloader") == 0) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#300: FILE: kernel/module.c:1396:
+		if (!(tainted & TAINT_PROPRIETARY_MODULE)
+		&&  !license_gpl)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#301: FILE: kernel/module.c:1397:
+			printk(KERN_WARNING "%s: module license '%s' taints "

WARNING:SPLIT_STRING: quoted string split across lines
#302: FILE: kernel/module.c:1398:
+			printk(KERN_WARNING "%s: module license '%s' taints "
+				"kernel.\n", mod->name, license_nongpl);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#329: FILE: kernel/moduleinfo.c:1:
+#ifdef __KERNEL__

ERROR:CODE_INDENT: code indent should use tabs where possible
#354: FILE: kernel/moduleinfo.c:26:
+                             char * start,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#354: FILE: kernel/moduleinfo.c:26:
+                             char * start,$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#354: FILE: kernel/moduleinfo.c:26:
+                             char * start,

ERROR:CODE_INDENT: code indent should use tabs where possible
#355: FILE: kernel/moduleinfo.c:27:
+                             unsigned long size,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#355: FILE: kernel/moduleinfo.c:27:
+                             unsigned long size,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#356: FILE: kernel/moduleinfo.c:28:
+                             const char *tag)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#356: FILE: kernel/moduleinfo.c:28:
+                             const char *tag)$

ERROR:SPACING: space prohibited after that open parenthesis '('
#368: FILE: kernel/moduleinfo.c:40:
+		start = next_string(  ret->s

ERROR:CODE_INDENT: code indent should use tabs where possible
#369: FILE: kernel/moduleinfo.c:41:
+                           + ret->i, &size);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#369: FILE: kernel/moduleinfo.c:41:
+                           + ret->i, &size);$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#374: FILE: kernel/moduleinfo.c:46:
+		if (taglen + 1 < size
+		&&  strncmp(p, tag, taglen) == 0 && p[taglen] == '=') {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#377: FILE: kernel/moduleinfo.c:49:
+			if (q && *q == '$' && *(q+1) == '=') {
 			                         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#380: FILE: kernel/moduleinfo.c:52:
+				while (size-- > 0 && (c=*q++) && shift <= 30) {
 				                       ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#380: FILE: kernel/moduleinfo.c:52:
+				while (size-- > 0 && (c=*q++) && shift <= 30) {
 				                        ^

ERROR:SPACING: spaces required around that '-=' (ctx:VxV)
#382: FILE: kernel/moduleinfo.c:54:
+					c-=32;
 					 ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#389: FILE: kernel/moduleinfo.c:61:
+					/* we terminated the loop because we found the
+					   end of the string */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#389: FILE: kernel/moduleinfo.c:61:
+					   end of the string */

ERROR:SPACING: space required before the open parenthesis '('
#390: FILE: kernel/moduleinfo.c:62:
+					if(nexttag < length + taglen + 1)

WARNING:INDENTED_LABEL: labels should not be indented
#399: FILE: kernel/moduleinfo.c:71:
+	out:

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#460: FILE: scripts/mod/modpost.c:510:
+		if (taglen + 1 < size
+		&&  strncmp(p, tag, taglen) == 0 && p[taglen] == '=')

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#501: FILE: scripts/mod/moduleinfo.c:1:
+#include <string.h>

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000471730.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 33 errors, 35 warnings, 14 checks, 375 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000471730.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
