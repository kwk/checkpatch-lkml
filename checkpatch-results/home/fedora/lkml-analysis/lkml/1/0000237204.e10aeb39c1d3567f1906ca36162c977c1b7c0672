WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#43: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#48: FILE: fs/axfs/axfs_super.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#85: FILE: fs/axfs/axfs_super.c:38:
+int axfs_get_sb_bdev(struct file_system_type *, int, const char *,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file_system_type *' should also have an identifier name
#85: FILE: fs/axfs/axfs_super.c:38:
+int axfs_get_sb_bdev(struct file_system_type *, int, const char *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#85: FILE: fs/axfs/axfs_super.c:38:
+int axfs_get_sb_bdev(struct file_system_type *, int, const char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#85: FILE: fs/axfs/axfs_super.c:38:
+int axfs_get_sb_bdev(struct file_system_type *, int, const char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct axfs_super *' should also have an identifier name
#85: FILE: fs/axfs/axfs_super.c:38:
+int axfs_get_sb_bdev(struct file_system_type *, int, const char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#85: FILE: fs/axfs/axfs_super.c:38:
+int axfs_get_sb_bdev(struct file_system_type *, int, const char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#85: FILE: fs/axfs/axfs_super.c:38:
+int axfs_get_sb_bdev(struct file_system_type *, int, const char *,

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#87: FILE: fs/axfs/axfs_super.c:40:
+void axfs_kill_block_super(struct super_block *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#87: FILE: fs/axfs/axfs_super.c:40:
+void axfs_kill_block_super(struct super_block *);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#88: FILE: fs/axfs/axfs_super.c:41:
+int axfs_copy_block(struct super_block *, void *, u64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#88: FILE: fs/axfs/axfs_super.c:41:
+int axfs_copy_block(struct super_block *, void *, u64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#88: FILE: fs/axfs/axfs_super.c:41:
+int axfs_copy_block(struct super_block *, void *, u64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#88: FILE: fs/axfs/axfs_super.c:41:
+int axfs_copy_block(struct super_block *, void *, u64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#88: FILE: fs/axfs/axfs_super.c:41:
+int axfs_copy_block(struct super_block *, void *, u64, u64);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#89: FILE: fs/axfs/axfs_super.c:42:
+int axfs_is_dev_bdev(char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#89: FILE: fs/axfs/axfs_super.c:42:
+int axfs_is_dev_bdev(char *);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#90: FILE: fs/axfs/axfs_super.c:43:
+int axfs_map_mtd(struct super_block *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#90: FILE: fs/axfs/axfs_super.c:43:
+int axfs_map_mtd(struct super_block *);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#91: FILE: fs/axfs/axfs_super.c:44:
+void axfs_unmap_mtd(struct super_block *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#91: FILE: fs/axfs/axfs_super.c:44:
+void axfs_unmap_mtd(struct super_block *);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#92: FILE: fs/axfs/axfs_super.c:45:
+int axfs_copy_mtd(struct super_block *, void *, u64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#92: FILE: fs/axfs/axfs_super.c:45:
+int axfs_copy_mtd(struct super_block *, void *, u64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#92: FILE: fs/axfs/axfs_super.c:45:
+int axfs_copy_mtd(struct super_block *, void *, u64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#92: FILE: fs/axfs/axfs_super.c:45:
+int axfs_copy_mtd(struct super_block *, void *, u64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#92: FILE: fs/axfs/axfs_super.c:45:
+int axfs_copy_mtd(struct super_block *, void *, u64, u64);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#93: FILE: fs/axfs/axfs_super.c:46:
+int axfs_get_sb_mtd(struct file_system_type *, int, const char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file_system_type *' should also have an identifier name
#93: FILE: fs/axfs/axfs_super.c:46:
+int axfs_get_sb_mtd(struct file_system_type *, int, const char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#93: FILE: fs/axfs/axfs_super.c:46:
+int axfs_get_sb_mtd(struct file_system_type *, int, const char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#93: FILE: fs/axfs/axfs_super.c:46:
+int axfs_get_sb_mtd(struct file_system_type *, int, const char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct axfs_super *' should also have an identifier name
#93: FILE: fs/axfs/axfs_super.c:46:
+int axfs_get_sb_mtd(struct file_system_type *, int, const char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#93: FILE: fs/axfs/axfs_super.c:46:
+int axfs_get_sb_mtd(struct file_system_type *, int, const char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#93: FILE: fs/axfs/axfs_super.c:46:
+int axfs_get_sb_mtd(struct file_system_type *, int, const char *,

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#95: FILE: fs/axfs/axfs_super.c:48:
+int axfs_is_dev_mtd(char *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#95: FILE: fs/axfs/axfs_super.c:48:
+int axfs_is_dev_mtd(char *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#95: FILE: fs/axfs/axfs_super.c:48:
+int axfs_is_dev_mtd(char *, int *);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#96: FILE: fs/axfs/axfs_super.c:49:
+void axfs_kill_mtd_super(struct super_block *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#96: FILE: fs/axfs/axfs_super.c:49:
+void axfs_kill_mtd_super(struct super_block *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#97: FILE: fs/axfs/axfs_super.c:50:
+struct inode *axfs_create_vfs_inode(struct super_block *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#97: FILE: fs/axfs/axfs_super.c:50:
+struct inode *axfs_create_vfs_inode(struct super_block *, int);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#98: FILE: fs/axfs/axfs_super.c:51:
+int axfs_get_uml_address(char *, unsigned long *, unsigned long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#98: FILE: fs/axfs/axfs_super.c:51:
+int axfs_get_uml_address(char *, unsigned long *, unsigned long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long *' should also have an identifier name
#98: FILE: fs/axfs/axfs_super.c:51:
+int axfs_get_uml_address(char *, unsigned long *, unsigned long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long *' should also have an identifier name
#98: FILE: fs/axfs/axfs_super.c:51:
+int axfs_get_uml_address(char *, unsigned long *, unsigned long *);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#99: FILE: fs/axfs/axfs_super.c:52:
+int axfs_init_profiling(struct axfs_super *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct axfs_super *' should also have an identifier name
#99: FILE: fs/axfs/axfs_super.c:52:
+int axfs_init_profiling(struct axfs_super *);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#100: FILE: fs/axfs/axfs_super.c:53:
+int axfs_shutdown_profiling(struct axfs_super *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct axfs_super *' should also have an identifier name
#100: FILE: fs/axfs/axfs_super.c:53:
+int axfs_shutdown_profiling(struct axfs_super *);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#101: FILE: fs/axfs/axfs_super.c:54:
+void axfs_profiling_add(struct axfs_super *, unsigned long, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct axfs_super *' should also have an identifier name
#101: FILE: fs/axfs/axfs_super.c:54:
+void axfs_profiling_add(struct axfs_super *, unsigned long, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#101: FILE: fs/axfs/axfs_super.c:54:
+void axfs_profiling_add(struct axfs_super *, unsigned long, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#101: FILE: fs/axfs/axfs_super.c:54:
+void axfs_profiling_add(struct axfs_super *, unsigned long, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#102: FILE: fs/axfs/axfs_super.c:55:
+struct inode *axfs_create_vfs_inode(struct super_block *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#102: FILE: fs/axfs/axfs_super.c:55:
+struct inode *axfs_create_vfs_inode(struct super_block *, int);

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#145: FILE: fs/axfs/axfs_super.c:98:
+	if (sbi->second_dev)
+		kfree(sbi->second_dev);

CHECK:SPACING: No space is necessary after a cast
#169: FILE: fs/axfs/axfs_super.c:122:
+	memcpy(buf, (void *)addr, (size_t) len);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sbi->magic == 0'
#184: FILE: fs/axfs/axfs_super.c:137:
+	if ((sbi->magic == 0) && (sbi->virt_start_addr != 0))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sbi->virt_start_addr != 0'
#184: FILE: fs/axfs/axfs_super.c:137:
+	if ((sbi->magic == 0) && (sbi->virt_start_addr != 0))

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#194: FILE: fs/axfs/axfs_super.c:147:
+			if (AXFS_IS_OFFSET_MMAPABLE(sbi, fsoffset)) {
[...]
+			} else if (AXFS_HAS_MTD(sb)) {
[...]
+			} else if (AXFS_HAS_BDEV(sb)) {
[...]
+			} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#205: FILE: fs/axfs/axfs_super.c:158:
+		if (AXFS_NODEV(sb)) {
[...]
+		} else if (AXFS_HAS_BDEV(sb)) {
[...]
+		} else if (AXFS_HAS_MTD(sb)) {
[...]
+		} else {
[...]

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'end > sbi->mmap_size'
#241: FILE: fs/axfs/axfs_super.c:194:
+		if ((end > sbi->mmap_size) && (force))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!sbi->cblock_buffer[0]'
#357: FILE: fs/axfs/axfs_super.c:310:
+	if ((!sbi->cblock_buffer[0]) || (!sbi->cblock_buffer[1]))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!sbi->cblock_buffer[1]'
#357: FILE: fs/axfs/axfs_super.c:310:
+	if ((!sbi->cblock_buffer[0]) || (!sbi->cblock_buffer[1]))

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#368: FILE: fs/axfs/axfs_super.c:321:
+	if (AXFS_HAS_MTD(sb)) {
[...]
+	} else if (AXFS_IS_IOMEM(sbi)) {
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#454: FILE: fs/axfs/axfs_super.c:407:
+		printk(KERN_ERR "axfs: wrong magic\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#461: FILE: fs/axfs/axfs_super.c:414:
+		printk(KERN_ERR "axfs: wrong axfs signature,"

WARNING:SPLIT_STRING: quoted string split across lines
#462: FILE: fs/axfs/axfs_super.c:415:
+		printk(KERN_ERR "axfs: wrong axfs signature,"
+		       " read %s, expected %s\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#500: FILE: fs/axfs/axfs_super.c:453:
+/* Verify that the size of the block segment of a split filesystem
+   is less than or equal to that of the device containing it.

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mtd0->size < sbi->size'
#512: FILE: fs/axfs/axfs_super.c:465:
+	if (mtd0 && !mtd1 && (mtd0->size < sbi->size)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#513: FILE: fs/axfs/axfs_super.c:466:
+		printk(KERN_ERR "axfs: ERROR: Filesystem extends beyond end of"

WARNING:SPLIT_STRING: quoted string split across lines
#514: FILE: fs/axfs/axfs_super.c:467:
+		printk(KERN_ERR "axfs: ERROR: Filesystem extends beyond end of"
+		       "MTD! Filesystem cannot be safely mounted!\n");

WARNING:MISSING_SPACE: break quoted strings at a space character
#514: FILE: fs/axfs/axfs_super.c:467:
+		printk(KERN_ERR "axfs: ERROR: Filesystem extends beyond end of"
+		       "MTD! Filesystem cannot be safely mounted!\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#515: FILE: fs/axfs/axfs_super.c:468:
+		printk(KERN_ERR "mtd name: %s, mtd size: 0x%x,"

WARNING:SPLIT_STRING: quoted string split across lines
#516: FILE: fs/axfs/axfs_super.c:469:
+		printk(KERN_ERR "mtd name: %s, mtd size: 0x%x,"
+		       " fs size: 0x%llx\n", mtd0->name, mtd0->size, sbi->size);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mtd1->size < sndsize'
#521: FILE: fs/axfs/axfs_super.c:474:
+	if (sndsize && !mtd0 && mtd1 && (mtd1->size < sndsize)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#522: FILE: fs/axfs/axfs_super.c:475:
+		printk(KERN_ERR "axfs: ERROR: The specified second_dev device "

WARNING:SPLIT_STRING: quoted string split across lines
#523: FILE: fs/axfs/axfs_super.c:476:
+		printk(KERN_ERR "axfs: ERROR: The specified second_dev device "
+		       "is smaller than the store and download segment!\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#524: FILE: fs/axfs/axfs_super.c:477:
+		printk(KERN_ERR "mtd name: %s, mtd size: 0x%x, "

WARNING:SPLIT_STRING: quoted string split across lines
#525: FILE: fs/axfs/axfs_super.c:478:
+		printk(KERN_ERR "mtd name: %s, mtd size: 0x%x, "
+		       "snd size: 0x%x\n", mtd1->name, mtd1->size, sndsize);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#532: FILE: fs/axfs/axfs_super.c:485:
+			printk(KERN_ERR "axfs: ERROR: Mmap segment extends"

WARNING:SPLIT_STRING: quoted string split across lines
#533: FILE: fs/axfs/axfs_super.c:486:
+			printk(KERN_ERR "axfs: ERROR: Mmap segment extends"
+			       " beyond end of MTD!");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#534: FILE: fs/axfs/axfs_super.c:487:
+			printk(KERN_ERR "mtd name: %s, mtd size: 0x%x, mmap "

WARNING:SPLIT_STRING: quoted string split across lines
#535: FILE: fs/axfs/axfs_super.c:488:
+			printk(KERN_ERR "mtd name: %s, mtd size: 0x%x, mmap "
+			       "size: 0x%llx",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#540: FILE: fs/axfs/axfs_super.c:493:
+			printk(KERN_ERR "axfs: ERROR: The specified second_dev "

WARNING:SPLIT_STRING: quoted string split across lines
#541: FILE: fs/axfs/axfs_super.c:494:
+			printk(KERN_ERR "axfs: ERROR: The specified second_dev "
+			       "device is smaller than the store and download "

WARNING:SPLIT_STRING: quoted string split across lines
#542: FILE: fs/axfs/axfs_super.c:495:
+			       "device is smaller than the store and download "
+			       "segment!\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#543: FILE: fs/axfs/axfs_super.c:496:
+			printk(KERN_ERR "mtd name: %s, mtd size: 0x%x, "

WARNING:SPLIT_STRING: quoted string split across lines
#544: FILE: fs/axfs/axfs_super.c:497:
+			printk(KERN_ERR "mtd name: %s, mtd size: 0x%x, "
+			       "snd size: 0x%x\n",

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#554: FILE: fs/axfs/axfs_super.c:507:
+/* Read the last four bytes of the volume and make sure the AXFS magic is
+   present. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#554: FILE: fs/axfs/axfs_super.c:507:
+   present. */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#569: FILE: fs/axfs/axfs_super.c:522:
+		printk(KERN_ERR "READ: 0x%x\n", be32_to_cpu(buf));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#570: FILE: fs/axfs/axfs_super.c:523:
+		printk(KERN_ERR "ERROR: Filesystem is incomplete and cannot be "

WARNING:SPLIT_STRING: quoted string split across lines
#571: FILE: fs/axfs/axfs_super.c:524:
+		printk(KERN_ERR "ERROR: Filesystem is incomplete and cannot be "
+		       "mounted!\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#605: FILE: fs/axfs/axfs_super.c:558:
+		printk(KERN_ERR "axfs: root is not a directory\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#611: FILE: fs/axfs/axfs_super.c:564:
+		printk(KERN_INFO "axfs: empty filesystem");

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#657: FILE: fs/axfs/axfs_super.c:610:
+		iput(root);
 		^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#684: FILE: fs/axfs/axfs_super.c:637:
+		printk(KERN_ERR

WARNING:SPLIT_STRING: quoted string split across lines
#686: FILE: fs/axfs/axfs_super.c:639:
+		       "axfs: address 0x%lx for axfs image isn't aligned"
+		       " to a page boundary\n", sbi->phys_start_addr);

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#691: FILE: fs/axfs/axfs_super.c:644:
+	if (axfs_is_dev_mtd(sd, &mtdnr)) {
[...]
+	} else if (axfs_is_dev_bdev(sd)) {
[...]
+	} else {
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#695: FILE: fs/axfs/axfs_super.c:648:
+		return axfs_get_sb_bdev(fs_type, flags, sd, sbi, mnt, err);
+	} else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#737: FILE: fs/axfs/axfs_super.c:690:
+		int token;
+		if (!*p)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around sbi->second_dev
#748: FILE: fs/axfs/axfs_super.c:701:
+			if (!*(sbi->second_dev))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sbi->second_dev'
#748: FILE: fs/axfs/axfs_super.c:701:
+			if (!*(sbi->second_dev))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#768: FILE: fs/axfs/axfs_super.c:721:
+			printk(KERN_ERR

WARNING:SPLIT_STRING: quoted string split across lines
#770: FILE: fs/axfs/axfs_super.c:723:
+			       "axfs: unrecognized mount option \"%s\" "
+			       "or missing value\n", p);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#788: FILE: fs/axfs/axfs_super.c:741:
+	printk(KERN_ERR

WARNING:SPLIT_STRING: quoted string split across lines
#790: FILE: fs/axfs/axfs_super.c:743:
+	       "axfs: unrecognized mount option \"%s\" "
+	       "or missing value\n", p);

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#793: FILE: fs/axfs/axfs_super.c:746:
+	if (iomem)
+		kfree(iomem);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#821: FILE: fs/axfs/axfs_super.c:774:
+		printk(KERN_ERR

WARNING:SPLIT_STRING: quoted string split across lines
#823: FILE: fs/axfs/axfs_super.c:776:
+		       "axfs: can't specify secondary block device %s because"
+		       " %s is assumed to be a block device\n", sbi->second_dev,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000237204.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 101 warnings, 10 checks, 864 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000237204.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
