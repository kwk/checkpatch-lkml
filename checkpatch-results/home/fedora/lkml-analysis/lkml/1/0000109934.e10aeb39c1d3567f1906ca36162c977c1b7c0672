CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#37: 
Signed-off-by: Richard Röjfors <richard.rojfors.ext@mocean-labs.com>
                        ^

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#58: FILE: drivers/spi/Kconfig:223:
+config SPI_XILINX_OF
+	tristate "Xilinx SPI controller OF device"
+	depends on SPI_XILINX && XILINX_VIRTEX
+	help
+	  This exposes the SPI controller IP from the Xilinx EDK.
+
+	  See the "OPB Serial Peripheral Interface (SPI) (v1.00e)"
+	  Product Specification document (DS464) for hardware details.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#67: FILE: drivers/spi/Kconfig:232:
+config SPI_XILINX_PLTFM
+	tristate "Xilinx SPI controller platform device"
+	depends on SPI_XILINX
+	help
+	  This exposes the SPI controller IP from the Xilinx EDK.
+
+	  See the "OPB Serial Peripheral Interface (SPI) (v1.00e)"
+	  Product Specification document (DS464) for hardware details.
+
+
 #
 # Add new SPI master controllers in alphabetical order above this line
 #

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#85: FILE: drivers/spi/xilinx_spi_of.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#113: FILE: drivers/spi/xilinx_spi_of.c:29:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#115: FILE: drivers/spi/xilinx_spi_of.c:31:
+static int __init xilinx_spi_of_probe(struct of_device *ofdev,
+					const struct of_device_id *match)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#146: FILE: drivers/spi/xilinx_spi_of.c:62:
+	master = xilinx_spi_init(&ofdev->dev, r_mem, r_irq->start,
+		XILINX_SPI_MODEL_DS464, -1, *prop, 8);

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#158: FILE: drivers/spi/xilinx_spi_of.c:74:
+static int __devexit xilinx_spi_remove(struct of_device *ofdev)

WARNING:CONST_STRUCT: struct of_device_id should normally be const
#173: FILE: drivers/spi/xilinx_spi_of.c:89:
+static struct of_device_id xilinx_spi_of_match[] = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'xspi' - possible side-effects?
#259: FILE: drivers/spi/xilinx_spi.c:54:
+#define XSPI_WRITE8(xspi, offs, val) \
+	do { \
+		if (xspi->model == XILINX_SPI_MODEL_DS464) \
+			out_8(xspi->regs + offs, (val) & 0xff); \
+		else \
+			XSPI_WRITE32(xspi, offs, val); \
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'xspi' may be better as '(xspi)' to avoid precedence issues
#259: FILE: drivers/spi/xilinx_spi.c:54:
+#define XSPI_WRITE8(xspi, offs, val) \
+	do { \
+		if (xspi->model == XILINX_SPI_MODEL_DS464) \
+			out_8(xspi->regs + offs, (val) & 0xff); \
+		else \
+			XSPI_WRITE32(xspi, offs, val); \
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'offs' - possible side-effects?
#259: FILE: drivers/spi/xilinx_spi.c:54:
+#define XSPI_WRITE8(xspi, offs, val) \
+	do { \
+		if (xspi->model == XILINX_SPI_MODEL_DS464) \
+			out_8(xspi->regs + offs, (val) & 0xff); \
+		else \
+			XSPI_WRITE32(xspi, offs, val); \
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'offs' may be better as '(offs)' to avoid precedence issues
#259: FILE: drivers/spi/xilinx_spi.c:54:
+#define XSPI_WRITE8(xspi, offs, val) \
+	do { \
+		if (xspi->model == XILINX_SPI_MODEL_DS464) \
+			out_8(xspi->regs + offs, (val) & 0xff); \
+		else \
+			XSPI_WRITE32(xspi, offs, val); \
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'val' - possible side-effects?
#259: FILE: drivers/spi/xilinx_spi.c:54:
+#define XSPI_WRITE8(xspi, offs, val) \
+	do { \
+		if (xspi->model == XILINX_SPI_MODEL_DS464) \
+			out_8(xspi->regs + offs, (val) & 0xff); \
+		else \
+			XSPI_WRITE32(xspi, offs, val); \
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'xspi' - possible side-effects?
#267: FILE: drivers/spi/xilinx_spi.c:62:
+#define XSPI_WRITE16(xspi, offs, val) \
+	do { \
+		if (xspi->model == XILINX_SPI_MODEL_DS464) \
+			out_be16(xspi->regs + offs, (val) & 0xffff); \
+		else \
+			XSPI_WRITE32(xspi, offs, val); \
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'xspi' may be better as '(xspi)' to avoid precedence issues
#267: FILE: drivers/spi/xilinx_spi.c:62:
+#define XSPI_WRITE16(xspi, offs, val) \
+	do { \
+		if (xspi->model == XILINX_SPI_MODEL_DS464) \
+			out_be16(xspi->regs + offs, (val) & 0xffff); \
+		else \
+			XSPI_WRITE32(xspi, offs, val); \
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'offs' - possible side-effects?
#267: FILE: drivers/spi/xilinx_spi.c:62:
+#define XSPI_WRITE16(xspi, offs, val) \
+	do { \
+		if (xspi->model == XILINX_SPI_MODEL_DS464) \
+			out_be16(xspi->regs + offs, (val) & 0xffff); \
+		else \
+			XSPI_WRITE32(xspi, offs, val); \
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'offs' may be better as '(offs)' to avoid precedence issues
#267: FILE: drivers/spi/xilinx_spi.c:62:
+#define XSPI_WRITE16(xspi, offs, val) \
+	do { \
+		if (xspi->model == XILINX_SPI_MODEL_DS464) \
+			out_be16(xspi->regs + offs, (val) & 0xffff); \
+		else \
+			XSPI_WRITE32(xspi, offs, val); \
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'val' - possible side-effects?
#267: FILE: drivers/spi/xilinx_spi.c:62:
+#define XSPI_WRITE16(xspi, offs, val) \
+	do { \
+		if (xspi->model == XILINX_SPI_MODEL_DS464) \
+			out_be16(xspi->regs + offs, (val) & 0xffff); \
+		else \
+			XSPI_WRITE32(xspi, offs, val); \
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'xspi' may be better as '(xspi)' to avoid precedence issues
#275: FILE: drivers/spi/xilinx_spi.c:70:
+#define XSPI_WRITE32(xspi, offs, val) \
+	out_be32(xspi->regs + offs, val)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'offs' may be better as '(offs)' to avoid precedence issues
#275: FILE: drivers/spi/xilinx_spi.c:70:
+#define XSPI_WRITE32(xspi, offs, val) \
+	out_be32(xspi->regs + offs, val)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#278: FILE: drivers/spi/xilinx_spi.c:73:
+#define XSPI_READ8(xspi, offs) \
+	(xspi->model == XILINX_SPI_MODEL_DS464) ? \
+		in_8(xspi->regs + offs) : XSPI_READ32(xspi, offs)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'xspi' - possible side-effects?
#278: FILE: drivers/spi/xilinx_spi.c:73:
+#define XSPI_READ8(xspi, offs) \
+	(xspi->model == XILINX_SPI_MODEL_DS464) ? \
+		in_8(xspi->regs + offs) : XSPI_READ32(xspi, offs)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'xspi' may be better as '(xspi)' to avoid precedence issues
#278: FILE: drivers/spi/xilinx_spi.c:73:
+#define XSPI_READ8(xspi, offs) \
+	(xspi->model == XILINX_SPI_MODEL_DS464) ? \
+		in_8(xspi->regs + offs) : XSPI_READ32(xspi, offs)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'offs' - possible side-effects?
#278: FILE: drivers/spi/xilinx_spi.c:73:
+#define XSPI_READ8(xspi, offs) \
+	(xspi->model == XILINX_SPI_MODEL_DS464) ? \
+		in_8(xspi->regs + offs) : XSPI_READ32(xspi, offs)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'offs' may be better as '(offs)' to avoid precedence issues
#278: FILE: drivers/spi/xilinx_spi.c:73:
+#define XSPI_READ8(xspi, offs) \
+	(xspi->model == XILINX_SPI_MODEL_DS464) ? \
+		in_8(xspi->regs + offs) : XSPI_READ32(xspi, offs)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#282: FILE: drivers/spi/xilinx_spi.c:77:
+#define XSPI_READ16(xspi, offs) \
+	(xspi->model == XILINX_SPI_MODEL_DS464) ? \
+	in_be16(xspi->regs + offs) : XSPI_READ32(xspi, offs)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'xspi' - possible side-effects?
#282: FILE: drivers/spi/xilinx_spi.c:77:
+#define XSPI_READ16(xspi, offs) \
+	(xspi->model == XILINX_SPI_MODEL_DS464) ? \
+	in_be16(xspi->regs + offs) : XSPI_READ32(xspi, offs)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'xspi' may be better as '(xspi)' to avoid precedence issues
#282: FILE: drivers/spi/xilinx_spi.c:77:
+#define XSPI_READ16(xspi, offs) \
+	(xspi->model == XILINX_SPI_MODEL_DS464) ? \
+	in_be16(xspi->regs + offs) : XSPI_READ32(xspi, offs)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'offs' - possible side-effects?
#282: FILE: drivers/spi/xilinx_spi.c:77:
+#define XSPI_READ16(xspi, offs) \
+	(xspi->model == XILINX_SPI_MODEL_DS464) ? \
+	in_be16(xspi->regs + offs) : XSPI_READ32(xspi, offs)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'offs' may be better as '(offs)' to avoid precedence issues
#282: FILE: drivers/spi/xilinx_spi.c:77:
+#define XSPI_READ16(xspi, offs) \
+	(xspi->model == XILINX_SPI_MODEL_DS464) ? \
+	in_be16(xspi->regs + offs) : XSPI_READ32(xspi, offs)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'xspi' may be better as '(xspi)' to avoid precedence issues
#286: FILE: drivers/spi/xilinx_spi.c:81:
+#define XSPI_READ32(xspi, offs) \
+	in_be32(xspi->regs + offs)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'offs' may be better as '(offs)' to avoid precedence issues
#286: FILE: drivers/spi/xilinx_spi.c:81:
+#define XSPI_READ32(xspi, offs) \
+	in_be32(xspi->regs + offs)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#289: FILE: drivers/spi/xilinx_spi.c:84:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#376: FILE: drivers/spi/xilinx_spi.c:153:
+	XSPI_WRITE16(xspi, xspi->cr_offset,
+		 XSPI_CR_TRANS_INHIBIT | XSPI_CR_MANUAL_SSELECT |

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#408: FILE: drivers/spi/xilinx_spi.c:182:
+		XSPI_WRITE32(xspi, xspi->ssr_offset,
 			 ~(0x0001 << spi->chip_select));

WARNING:LINE_SPACING: Missing a blank line after declarations
#467: FILE: drivers/spi/xilinx_spi.c:228:
+	u8 wsize;
+	if (xspi->bits_per_word == 8)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#479: FILE: drivers/spi/xilinx_spi.c:238:
+	while ((sr & XSPI_SR_TX_FULL_MASK) == 0 &&
+		xspi->remaining_bytes > 0) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#489: FILE: drivers/spi/xilinx_spi.c:242:
+				XSPI_WRITE8(xspi, xspi->txd_offset,
+					*xspi->tx_ptr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#492: FILE: drivers/spi/xilinx_spi.c:245:
+				XSPI_WRITE16(xspi, xspi->txd_offset,
+					*(u16 *)(xspi->tx_ptr));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#495: FILE: drivers/spi/xilinx_spi.c:248:
+				XSPI_WRITE32(xspi, xspi->txd_offset,
+					*(u32 *)(xspi->tx_ptr));

CHECK:BRACES: Unbalanced braces around else statement
#498: FILE: drivers/spi/xilinx_spi.c:251:
+		} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#522: FILE: drivers/spi/xilinx_spi.c:278:
+	XSPI_WRITE32(xspi, XIPIF_V123B_IIER_OFFSET,
 		 ipif_ier | XSPI_INTR_TX_EMPTY);

WARNING:LINE_SPACING: Missing a blank line after declarations
#558: FILE: drivers/spi/xilinx_spi.c:310:
+		u8 rsize;
+		if (xspi->bits_per_word == 8)

WARNING:LINE_SPACING: Missing a blank line after declarations
#582: FILE: drivers/spi/xilinx_spi.c:329:
+			u32 data;
+			if (rsize == 1)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#626: FILE: drivers/spi/xilinx_spi.c:367:
+struct spi_master *xilinx_spi_init(struct device *dev, struct resource *mem,
+	u32 irq, u8 model, s16 bus_num, u16 num_chipselect, u8 bits_per_word)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!master"
#643: FILE: drivers/spi/xilinx_spi.c:375:
+	if (master == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#678: FILE: drivers/spi/xilinx_spi.c:390:
+	if (!request_mem_region(mem->start, resource_size(mem),
+		XILINX_SPI_NAME)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#750: FILE: drivers/spi/xilinx_spi.c:439:
+	dev_info(dev, "at 0x%08X mapped to 0x%08X, irq=%d\n",
+		(u32)mem->start, (u32)xspi->regs, xspi->irq);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#845: FILE: drivers/spi/xilinx_spi_pltfm.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#859: FILE: drivers/spi/xilinx_spi_pltfm.c:15:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#860: FILE: drivers/spi/xilinx_spi_pltfm.c:16:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pdata"
#890: FILE: drivers/spi/xilinx_spi_pltfm.c:46:
+	if (pdata == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!r"
#894: FILE: drivers/spi/xilinx_spi_pltfm.c:50:
+	if (r == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#902: FILE: drivers/spi/xilinx_spi_pltfm.c:58:
+	master = xilinx_spi_init(&dev->dev, r, irq, pdata->model,
+		pdata->bus_num, pdata->num_chipselect, pdata->bits_per_word);

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#913: FILE: drivers/spi/xilinx_spi_pltfm.c:69:
+static int __devexit xilinx_spi_remove(struct platform_device *dev)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#967: FILE: include/linux/spi/xilinx_spi.h:1:
+#ifndef __LINUX_SPI_XILINX_SPI_H

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000109934.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 11 warnings, 42 checks, 904 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000109934.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
