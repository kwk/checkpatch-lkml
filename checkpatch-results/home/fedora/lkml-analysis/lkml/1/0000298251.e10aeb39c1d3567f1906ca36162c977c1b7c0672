WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
This creates RAM based block device (called ramzswap0) which is used as swap disk.

ERROR:BAD_SIGN_OFF: Unrecognized email address: 'Nitin Gupta <nitingupta910 at gmail dot com>'
#43: 
Signed-off-by: Nitin Gupta <nitingupta910 at gmail dot com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#59: FILE: drivers/block/Kconfig:350:
+config BLK_DEV_COMPCACHE
+	tristate "Compressed RAM based swap device"
+	select TLSF
+	select LZO_COMPRESS
+	select LZO_DECOMPRESS
+	help
+	  This creates RAM based block device which acts as swap disk. Pages
+	  swapped to this disk are compressed and stored in memory itself.
+	  Project Home: http://code.google.com/p/compcache/
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#69: FILE: drivers/block/Kconfig:360:
+config BLK_DEV_COMPCACHE_DEBUG
+	default y
+	depends on BLK_DEV_COMPCACHE
+	bool "Enable debugging"
+	help
+	  This causes negligible performance loss and size increase.
+	  If unsure, say Y.
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#77: FILE: drivers/block/Kconfig:368:
+config BLK_DEV_COMPCACHE_STATS
+	default y
+	depends on BLK_DEV_COMPCACHE
+	bool "Enable statistics"
+	help
+	  Creates /proc/compcache to export various statistics.
+	  This adds about 4K to size with negligible performance loss.
+	  If unsure, say Y.
+

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#102: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#107: FILE: drivers/block/compcache.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:CONST_STRUCT: struct block_device_operations should normally be const
#139: FILE: drivers/block/compcache.c:33:
+static struct block_device_operations compcache_devops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#153: FILE: drivers/block/compcache.c:47:
+static int proc_compcache_read(char *page, char **start, off_t off,
+				int count, int *eof, void *data)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#167: FILE: drivers/block/compcache.c:61:
+	len = sprintf(page,
+		"DiskSize:	%8zu kB\n",

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bio->bi_sector >= compcache.size'
#206: FILE: drivers/block/compcache.c:100:
+	if (unlikely((bio->bi_sector >= compcache.size) ||
+			(bio->bi_sector & (SECTORS_PER_PAGE - 1)) ||
+			(bio->bi_vcnt != 1) ||
+			(bio->bi_size != PAGE_SIZE) ||
+			(bio->bi_io_vec[0].bv_offset != 0)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bio->bi_vcnt != 1'
#206: FILE: drivers/block/compcache.c:100:
+	if (unlikely((bio->bi_sector >= compcache.size) ||
+			(bio->bi_sector & (SECTORS_PER_PAGE - 1)) ||
+			(bio->bi_vcnt != 1) ||
+			(bio->bi_size != PAGE_SIZE) ||
+			(bio->bi_io_vec[0].bv_offset != 0)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bio->bi_size != PAGE_SIZE'
#206: FILE: drivers/block/compcache.c:100:
+	if (unlikely((bio->bi_sector >= compcache.size) ||
+			(bio->bi_sector & (SECTORS_PER_PAGE - 1)) ||
+			(bio->bi_vcnt != 1) ||
+			(bio->bi_size != PAGE_SIZE) ||
+			(bio->bi_io_vec[0].bv_offset != 0)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bio->bi_io_vec[0].bv_offset != 0'
#206: FILE: drivers/block/compcache.c:100:
+	if (unlikely((bio->bi_sector >= compcache.size) ||
+			(bio->bi_sector & (SECTORS_PER_PAGE - 1)) ||
+			(bio->bi_vcnt != 1) ||
+			(bio->bi_size != PAGE_SIZE) ||
+			(bio->bi_io_vec[0].bv_offset != 0)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#207: FILE: drivers/block/compcache.c:101:
+	if (unlikely((bio->bi_sector >= compcache.size) ||
+			(bio->bi_sector & (SECTORS_PER_PAGE - 1)) ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!compcache.table[page_no].addr"
#238: FILE: drivers/block/compcache.c:132:
+		if (unlikely(compcache.table[page_no].addr == NULL)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:SPLIT_STRING: quoted string split across lines
#240: FILE: drivers/block/compcache.c:134:
+			pr_debug("Read before write on swap device: "
+				"sector=%lu, size=%u, offset=%u\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#254: FILE: drivers/block/compcache.c:148:
+			memcpy(user_mem, compcache.table[page_no].addr,
+							PAGE_SIZE);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#262: FILE: drivers/block/compcache.c:156:
+		ret = lzo1x_decompress_safe(

WARNING:SPLIT_STRING: quoted string split across lines
#271: FILE: drivers/block/compcache.c:165:
+			pr_err(C "Decompression failed! "
+				"err=%d, page=%zu, len=%lu\n", ret, page_no,

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#281: FILE: drivers/block/compcache.c:175:
+		return 0;
+	} else {	/* Write */

WARNING:LINE_SPACING: Missing a blank line after declarations
#283: FILE: drivers/block/compcache.c:177:
+		unsigned char *src = compcache.compress_buffer;
+		stat_inc(stats.num_writes);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#291: FILE: drivers/block/compcache.c:185:
+			tlsf_free(compcache.table[page_no].addr,
+				compcache.mem_pool);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#301: FILE: drivers/block/compcache.c:195:
+		ret = lzo1x_1_compress(user_mem, PAGE_SIZE,
+			src, &clen, compcache.compress_workmem);

WARNING:SPLIT_STRING: quoted string split across lines
#314: FILE: drivers/block/compcache.c:208:
+			pr_debug("Page expand on compression: "
+				"page=%zu, size=%zu\n", page_no, clen);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#319: FILE: drivers/block/compcache.c:213:
+		if ((compcache.table[page_no].addr = tlsf_malloc(clen,

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#320: FILE: drivers/block/compcache.c:214:
+		if ((compcache.table[page_no].addr = tlsf_malloc(clen,
+					compcache.mem_pool)) == NULL) {

WARNING:SPLIT_STRING: quoted string split across lines
#323: FILE: drivers/block/compcache.c:217:
+			pr_err(C "Error allocating memory for compressed "
+				"page: %zu, size=%zu \n", page_no, clen);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#323: FILE: drivers/block/compcache.c:217:
+				"page: %zu, size=%zu \n", page_no, clen);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#328: FILE: drivers/block/compcache.c:222:
+^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#337: FILE: drivers/block/compcache.c:231:
+		stat_inc_if_less(stats.good_compress, clen,
+						PAGE_SIZE / 2 + 1);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#339: FILE: drivers/block/compcache.c:233:
+^I^I$

WARNING:SPLIT_STRING: quoted string split across lines
#382: FILE: drivers/block/compcache.c:276:
+		pr_info(C "compcache size not provided."
+			" Using default: (%u%% of Total RAM).\n"

WARNING:SPLIT_STRING: quoted string split across lines
#384: FILE: drivers/block/compcache.c:278:
+			"Use compcache_size_kbytes module param to specify"
+			" custom size\n", DEFAULT_COMPCACHE_PERCENT);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#389: FILE: drivers/block/compcache.c:283:
+^I$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!compcache.compress_workmem"
#396: FILE: drivers/block/compcache.c:290:
+	if (compcache.compress_workmem == NULL) {

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#397: FILE: drivers/block/compcache.c:291:
+	if (compcache.compress_workmem == NULL) {
+		pr_err(C "Error allocating compressor working memory\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!compcache.compress_buffer"
#403: FILE: drivers/block/compcache.c:297:
+	if (compcache.compress_buffer == NULL) {

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#404: FILE: drivers/block/compcache.c:298:
+	if (compcache.compress_buffer == NULL) {
+		pr_err(C "Error allocating compressor buffer space\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#410: FILE: drivers/block/compcache.c:304:
+        compcache.table = vmalloc(num_pages * sizeof(*compcache.table));$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#410: FILE: drivers/block/compcache.c:304:
+        compcache.table = vmalloc(num_pages * sizeof(*compcache.table));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#411: FILE: drivers/block/compcache.c:305:
+        if (compcache.table == NULL) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#411: FILE: drivers/block/compcache.c:305:
+        if (compcache.table == NULL) {$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!compcache.table"
#411: FILE: drivers/block/compcache.c:305:
+        if (compcache.table == NULL) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#412: FILE: drivers/block/compcache.c:306:
+                pr_err(C "Error allocating compcache address table\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#412: FILE: drivers/block/compcache.c:306:
+                pr_err(C "Error allocating compcache address table\n");$

ERROR:CODE_INDENT: code indent should use tabs where possible
#413: FILE: drivers/block/compcache.c:307:
+                ret = -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#413: FILE: drivers/block/compcache.c:307:
+                ret = -ENOMEM;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#414: FILE: drivers/block/compcache.c:308:
+                goto fail;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#414: FILE: drivers/block/compcache.c:308:
+                goto fail;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#415: FILE: drivers/block/compcache.c:309:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#415: FILE: drivers/block/compcache.c:309:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#416: FILE: drivers/block/compcache.c:310:
+        memset(compcache.table, 0, num_pages * sizeof(*compcache.table));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#416: FILE: drivers/block/compcache.c:310:
+        memset(compcache.table, 0, num_pages * sizeof(*compcache.table));$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!compcache.table[0].addr"
#419: FILE: drivers/block/compcache.c:313:
+	if (compcache.table[0].addr == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!compcache.disk"
#428: FILE: drivers/block/compcache.c:322:
+	if (compcache.disk == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!compcache.disk->queue"
#451: FILE: drivers/block/compcache.c:345:
+	if (compcache.disk->queue == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#463: FILE: drivers/block/compcache.c:357:
+	compcache.mem_pool = tlsf_create_memory_pool("compcache",
+				get_mem, put_mem,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!compcache.mem_pool"
#465: FILE: drivers/block/compcache.c:359:
+	if (compcache.mem_pool == NULL) {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#472: FILE: drivers/block/compcache.c:366:
+	proc = create_proc_entry("compcache", S_IRUGO, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:BRACES: braces {} should be used on all arms of this statement
#473: FILE: drivers/block/compcache.c:367:
+	if (proc)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#475: FILE: drivers/block/compcache.c:369:
+	else {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "compcache.disk"
#486: FILE: drivers/block/compcache.c:380:
+	if (compcache.disk != NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#489: FILE: drivers/block/compcache.c:383:
+			unregister_blkdev(compcache.disk->major,
+					compcache.disk->disk_name);

WARNING:LINE_SPACING: Missing a blank line after declarations
#509: FILE: drivers/block/compcache.c:403:
+	size_t i, num_pages;
+	num_pages = compcache.size >> SECTORS_PER_PAGE_SHIFT;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#545: FILE: drivers/block/compcache.h:1:
+/*

CHECK:BIT_MACRO: Prefer using the BIT macro
#564: FILE: drivers/block/compcache.h:20:
+#define SECTOR_SIZE		(1 << SECTOR_SHIFT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#566: FILE: drivers/block/compcache.h:22:
+#define SECTORS_PER_PAGE	(1 << SECTORS_PER_PAGE_SHIFT)

ERROR:SPACING: space required before the open parenthesis '('
#579: FILE: drivers/block/compcache.h:35:
+#define NOP	do { } while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'stat' may be better as '(stat)' to avoid precedence issues
#590: FILE: drivers/block/compcache.h:46:
+#define stat_inc(stat)			(stat++)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'stat' may be better as '(stat)' to avoid precedence issues
#591: FILE: drivers/block/compcache.h:47:
+#define stat_dec(stat)			(stat--)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#593: FILE: drivers/block/compcache.h:49:
+#define stat_setmax(stat, curr)^I^I(stat = (curr) > stat ? (curr) : stat) $

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'stat' - possible side-effects?
#593: FILE: drivers/block/compcache.h:49:
+#define stat_setmax(stat, curr)		(stat = (curr) > stat ? (curr) : stat) 

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'curr' - possible side-effects?
#593: FILE: drivers/block/compcache.h:49:
+#define stat_setmax(stat, curr)		(stat = (curr) > stat ? (curr) : stat) 

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'stat' may be better as '(stat)' to avoid precedence issues
#594: FILE: drivers/block/compcache.h:50:
+#define stat_inc_if_less(stat, val1, val2) \
+					(stat += ((val1) < (val2) ? 1 : 0))

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#616: FILE: drivers/block/compcache.h:72:
+	struct mutex lock;

WARNING:TYPO_SPELLING: 'tooo' may be misspelled - perhaps 'todo'?
#625: FILE: drivers/block/compcache.h:81:
+	u32 failed_reads;	/* can happen when memory is tooo low */
 	                 	                             ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#630: FILE: drivers/block/compcache.h:86:
+				 * compressed page size histogram */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000298251.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 14 errors, 30 warnings, 34 checks, 567 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000298251.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
