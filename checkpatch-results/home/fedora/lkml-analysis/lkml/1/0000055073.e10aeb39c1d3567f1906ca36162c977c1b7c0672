CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pp->file"
#121: FILE: tools/perf/builtin-probe.c:90:
+	DIE_IF(pp->file == NULL && pp->function == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pp->function"
#121: FILE: tools/perf/builtin-probe.c:90:
+	DIE_IF(pp->file == NULL && pp->function == NULL);

WARNING:TYPO_SPELLING: 'charactor' may be misspelled - perhaps 'character'?
#136: FILE: tools/perf/builtin-probe.c:105:
+				semantic_error("There is non-digit charactor"
 				                                   ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPLIT_STRING: quoted string split across lines
#137: FILE: tools/perf/builtin-probe.c:106:
+				semantic_error("There is non-digit charactor"
+						" in line number.");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:TYPO_SPELLING: 'charactor' may be misspelled - perhaps 'character'?
#142: FILE: tools/perf/builtin-probe.c:111:
+				semantic_error("There is non-digit charactor"
 				                                   ^^^^^^^^^

WARNING:SPLIT_STRING: quoted string split across lines
#143: FILE: tools/perf/builtin-probe.c:112:
+				semantic_error("There is non-digit charactor"
+						" in offset.");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pp->file"
#149: FILE: tools/perf/builtin-probe.c:118:
+			DIE_IF(pp->file == NULL);

WARNING:SPLIT_STRING: quoted string split across lines
#152: FILE: tools/perf/builtin-probe.c:121:
+				semantic_error("@SRC must be the last "
+					       "option.");

CHECK:BRACES: braces {} should be used on all arms of this statement
#155: FILE: tools/perf/builtin-probe.c:124:
+			if (strcmp(arg, "return") == 0) {
[...]
+			} else	/* Others not supported yet */
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#157: FILE: tools/perf/builtin-probe.c:126:
+			} else	/* Others not supported yet */

WARNING:SPLIT_STRING: quoted string split across lines
#169: FILE: tools/perf/builtin-probe.c:138:
+		semantic_error("Function-relative line number is not"
+				" supported yet.");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#279: FILE: tools/perf/builtin-probe.c:218:
+static int opt_add_probe_event(const struct option *opt __used,
 			      const char *str, int unset __used)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#356: FILE: tools/perf/builtin-probe.c:405:
+			snprintf(buf, MAX_CMDLEN, "%c:%s/%s_%x %s\n",
+				pp->retprobe ? 'r' : 'p', PERFPROBE_GROUP,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#364: FILE: tools/perf/builtin-probe.c:411:
+				snprintf(buf, MAX_CMDLEN, "%c:%s/%s_%x_%d %s\n",
+					pp->retprobe ? 'r' : 'p',

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000055073.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 6 warnings, 8 checks, 309 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000055073.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
