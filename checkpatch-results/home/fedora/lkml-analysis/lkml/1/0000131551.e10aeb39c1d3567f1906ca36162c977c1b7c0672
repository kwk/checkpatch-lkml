WARNING:TYPO_SPELLING: 'acheiving' may be misspelled - perhaps 'achieving'?
#40: 
The best way of acheiving this that I have thought of it to compile the
                ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'Alternativly' may be misspelled - perhaps 'Alternatively'?
#129: 
test/common. Alternativly, the kernel file that that external function
             ^^^^^^^^^^^^

WARNING:REPEATED_WORD: Possible repeated word: 'that'
#129: 
test/common. Alternativly, the kernel file that that external function

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#156: 
be uptodate. This can be achieved by building the .config, ie make all.
   ^^^^^^^^

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#179: FILE: arch/x86/include/asm/irqflags.h:30:
flags)

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#183: FILE: arch/x86/include/asm/irqflags.h:34:
+#if 0

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#190: FILE: arch/x86/include/asm/irqflags.h:41:
+#if 0

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#197: 
new file mode 100755

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 2
#203: FILE: test/build.sh:2:
+

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#212: FILE: test/common/common.c:1:
+#define REG_TEST_OVERRIDE_JIFFIES

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#216: FILE: test/common/common.c:5:
+unsigned long volatile __jiffy_data jiffies;

WARNING:INCLUDE_LINUX: Use #include <linux/processor.h> instead of <asm/processor.h>
#232: FILE: test/common/common.c:21:
+#include <asm/processor.h>

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#247: FILE: test/common/common.c:36:
+int printk(const char *s, ...)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#249: FILE: test/common/common.c:38:
+       return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#255: FILE: test/common/common.c:44:
+       return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#261: FILE: test/common/common.c:50:
+       for(;;)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#261: FILE: test/common/common.c:50:
+       for(;;)
+       {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 7)
#261: FILE: test/common/common.c:50:
+       for(;;)
+       {

ERROR:SPACING: space required before the open parenthesis '('
#261: FILE: test/common/common.c:50:
+       for(;;)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#262: FILE: test/common/common.c:51:
+       {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#263: FILE: test/common/common.c:52:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#269: FILE: test/common/common.c:58:
+       return (char *)0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#286: FILE: test/common/common.c:75:
+       return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#300: FILE: test/common/common.c:89:
+       return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#307: FILE: test/common/common.c:96:
+       return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#332: FILE: test/common/common.c:121:
+       return (void *)0;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#371: FILE: test/common/common.c:160:
+struct page * __alloc_pages_internal(gfp_t gfp_mask, unsigned int

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#374: FILE: test/common/common.c:162:
+       return (struct page *)0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#386: FILE: test/common/common.c:173:
+       return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#392: FILE: test/common/common.c:179:
+       return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#399: FILE: test/common/common.c:185:
+       return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#406: FILE: test/common/common.c:191:
+       return 0;$

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#410: FILE: test/common/common.c:195:
+int strict_strtoul(const char *a, unsigned int b, unsigned long *c)

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#412: FILE: test/common/common.c:197:
+       return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#418: FILE: test/common/common.c:203:
+       return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#424: FILE: test/common/common.c:209:
+       return (struct list_head *)0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#431: FILE: test/common/common.c:215:
+       return (struct list_head *)0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#437: FILE: test/common/common.c:221:
+       return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#443: FILE: test/common/common.c:227:
+       return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#449: FILE: test/common/common.c:233:
+       return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#454: FILE: test/common/common.c:238:
+       return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#485: FILE: test/common/common.c:269:
+       return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#491: FILE: test/common/common.c:275:
+       return 0;$

WARNING:INCLUDE_LINUX: Use #include <linux/percpu.h> instead of <asm/percpu.h>
#494: FILE: test/common/common.c:278:
+#include <asm/percpu.h>

WARNING:INCLUDE_LINUX: Use #include <linux/bug.h> instead of <asm/bug.h>
#497: FILE: test/common/common.c:281:
+#include <asm/bug.h>

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#500: FILE: test/common/common.c:283:
+void warn_slowpath(const char *file, const int line, const char *fmt,
+{

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#506: FILE: test/common/common.c:289:
+       return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#512: FILE: test/common/common.c:295:
+       return 0;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#518: FILE: test/common/common.c:300:
+int sysfs_create_link(struct kobject *kobj, struct kobject *target,
+{

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#519: FILE: test/common/common.c:301:
+       return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#531: FILE: test/common/common.c:312:
+       return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#541: FILE: test/common/common.c:321:
+       return (struct kset *)0;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#547: FILE: test/common/common.c:326:
+int kobject_init_and_add(struct kobject *kobj, struct kobj_type *ktype,
+{

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#548: FILE: test/common/common.c:327:
+       return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#559: FILE: test/common/common.c:338:
+       return 0;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#571: FILE: test/common/common.c:348:
+struct proc_dir_entry *proc_create_data(const char *name, mode_t mode,
+{

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#572: FILE: test/common/common.c:349:
+       return (struct proc_dir_entry *)0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#579: FILE: test/common/common.c:356:
+       return 0;$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#588: FILE: test/mm/slub/test.c:1:
+#include <linux/slab.h>

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#596: FILE: test/mm/slub/test.c:9:
+       char * p = kmalloc(10, GFP_KERNEL);$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#596: FILE: test/mm/slub/test.c:9:
+       char * p = kmalloc(10, GFP_KERNEL);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#598: FILE: test/mm/slub/test.c:11:
+       printf("%p\n", p);$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000131551.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 53 warnings, 4 checks, 402 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000131551.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
