WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#38: 
This patch adds core_alua_update_tpg_secondary_metadata() for saving ALUA target target group

WARNING:REPEATED_WORD: Possible repeated word: 'target'
#38: 
This patch adds core_alua_update_tpg_secondary_metadata() for saving ALUA target target group

WARNING:TYPO_SPELLING: 'acual' may be misspelled - perhaps 'actual'?
#46: 
for the acual ALUA secondary state transition, and freed upon
        ^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#79: FILE: drivers/target/target_core_alua.c:618:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#85: FILE: drivers/target/target_core_alua.c:620:
+int core_alua_write_tpg_metadata(

ERROR:TRAILING_WHITESPACE: trailing whitespace
#88: FILE: drivers/target/target_core_alua.c:623:
+^Iu32 md_buf_len) $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#133: FILE: drivers/target/target_core_alua.c:648:
+		printk("Error writing ALUA metadata file: %s\n", path);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#144: FILE: drivers/target/target_core_alua.c:660:
+int core_alua_update_tpg_primary_metadata(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#157: FILE: drivers/target/target_core_alua.c:673:
+	len = snprintf(md_buf, tg_pt_gp->tg_pt_gp_md_buf_len,
+			"tg_pt_gp_id=%hu\n"

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#164: FILE: drivers/target/target_core_alua.c:680:
+	snprintf(path, 512, "/var/target/alua/tpgs_%s/%s",
+		&wwn->unit_serial[0],

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#180: FILE: drivers/target/target_core_alua.c:916:
+int core_alua_update_tpg_secondary_metadata(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#194: FILE: drivers/target/target_core_alua.c:930:
+	len = snprintf(wwn, 512, "%s",
+			TPG_TFO(se_tpg)->tpg_get_wwn(se_tpg));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "tpg_get_tag"
#196: FILE: drivers/target/target_core_alua.c:932:
+	if (TPG_TFO(se_tpg)->tpg_get_tag != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#197: FILE: drivers/target/target_core_alua.c:933:
+		snprintf(wwn+len, 1024-len, "+%hu",
 		            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#197: FILE: drivers/target/target_core_alua.c:933:
+		snprintf(wwn+len, 1024-len, "+%hu",
 		                      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#198: FILE: drivers/target/target_core_alua.c:934:
+		snprintf(wwn+len, 1024-len, "+%hu",
+				TPG_TFO(se_tpg)->tpg_get_tag(se_tpg));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#206: FILE: drivers/target/target_core_alua.c:942:
+	snprintf(path, 512, "/var/target/alua/%s/%s/lun_%u",
+			TPG_TFO(se_tpg)->get_fabric_name(), wwn,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#208: FILE: drivers/target/target_core_alua.c:944:
+^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#250: FILE: drivers/target/target_core_alua.c:1001:
+			printk(KERN_ERR "Unable to allocate md_buf for"

WARNING:SPLIT_STRING: quoted string split across lines
#251: FILE: drivers/target/target_core_alua.c:1002:
+			printk(KERN_ERR "Unable to allocate md_buf for"
+				" secondary ALUA access metadata\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#256: FILE: drivers/target/target_core_alua.c:1007:
+		core_alua_update_tpg_secondary_metadata(tg_pt_gp_mem, port,
+				md_buf, md_buf_len);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#268: FILE: drivers/target/target_core_alua.c:1858:
+ssize_t core_alua_show_secondary_status(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#276: FILE: drivers/target/target_core_alua.c:1866:
+ssize_t core_alua_store_secondary_status(

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#284: FILE: drivers/target/target_core_alua.c:1874:
+	ret = strict_strtoul(page, 0, &tmp);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#286: FILE: drivers/target/target_core_alua.c:1876:
+		printk(KERN_ERR "Unable to extract alua_tg_pt_status\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tmp != ALUA_STATUS_NONE'
#289: FILE: drivers/target/target_core_alua.c:1879:
+	if ((tmp != ALUA_STATUS_NONE) &&
+	    (tmp != ALUA_STATUS_ALTERED_BY_EXPLICT_STPG) &&
+	    (tmp != ALUA_STATUS_ALTERED_BY_IMPLICT_ALUA)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tmp != ALUA_STATUS_ALTERED_BY_EXPLICT_STPG'
#289: FILE: drivers/target/target_core_alua.c:1879:
+	if ((tmp != ALUA_STATUS_NONE) &&
+	    (tmp != ALUA_STATUS_ALTERED_BY_EXPLICT_STPG) &&
+	    (tmp != ALUA_STATUS_ALTERED_BY_IMPLICT_ALUA)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tmp != ALUA_STATUS_ALTERED_BY_IMPLICT_ALUA'
#289: FILE: drivers/target/target_core_alua.c:1879:
+	if ((tmp != ALUA_STATUS_NONE) &&
+	    (tmp != ALUA_STATUS_ALTERED_BY_EXPLICT_STPG) &&
+	    (tmp != ALUA_STATUS_ALTERED_BY_IMPLICT_ALUA)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#292: FILE: drivers/target/target_core_alua.c:1882:
+		printk(KERN_ERR "Illegal value for alua_tg_pt_status: %lu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#293: FILE: drivers/target/target_core_alua.c:1883:
+		printk(KERN_ERR "Illegal value for alua_tg_pt_status: %lu\n",
+				tmp);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#302: FILE: drivers/target/target_core_alua.c:1892:
+ssize_t core_alua_show_secondary_write_metadata(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#311: FILE: drivers/target/target_core_alua.c:1901:
+ssize_t core_alua_store_secondary_write_metadata(

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#319: FILE: drivers/target/target_core_alua.c:1909:
+	ret = strict_strtoul(page, 0, &tmp);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#321: FILE: drivers/target/target_core_alua.c:1911:
+		printk(KERN_ERR "Unable to extract alua_tg_pt_write_md\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tmp != 0'
#324: FILE: drivers/target/target_core_alua.c:1914:
+	if ((tmp != 0) && (tmp != 1)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tmp != 1'
#324: FILE: drivers/target/target_core_alua.c:1914:
+	if ((tmp != 0) && (tmp != 1)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#325: FILE: drivers/target/target_core_alua.c:1915:
+		printk(KERN_ERR "Illegal value for alua_tg_pt_write_md:"

WARNING:SPLIT_STRING: quoted string split across lines
#326: FILE: drivers/target/target_core_alua.c:1916:
+		printk(KERN_ERR "Illegal value for alua_tg_pt_write_md:"
+				" %lu\n", tmp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#347: FILE: include/target/target_core_alua.h:118:
+extern ssize_t core_alua_show_preferred_bit(struct t10_alua_tg_pt_gp_s *,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct t10_alua_tg_pt_gp_s *' should also have an identifier name
#347: FILE: include/target/target_core_alua.h:118:
+extern ssize_t core_alua_show_preferred_bit(struct t10_alua_tg_pt_gp_s *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#347: FILE: include/target/target_core_alua.h:118:
+extern ssize_t core_alua_show_preferred_bit(struct t10_alua_tg_pt_gp_s *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#348: FILE: include/target/target_core_alua.h:119:
+extern ssize_t core_alua_show_preferred_bit(struct t10_alua_tg_pt_gp_s *,
+					char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#354: FILE: include/target/target_core_alua.h:123:
+extern ssize_t core_alua_store_offline_bit(struct se_lun_s *, const char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_lun_s *' should also have an identifier name
#354: FILE: include/target/target_core_alua.h:123:
+extern ssize_t core_alua_store_offline_bit(struct se_lun_s *, const char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#354: FILE: include/target/target_core_alua.h:123:
+extern ssize_t core_alua_store_offline_bit(struct se_lun_s *, const char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#354: FILE: include/target/target_core_alua.h:123:
+extern ssize_t core_alua_store_offline_bit(struct se_lun_s *, const char *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#355: FILE: include/target/target_core_alua.h:124:
+extern ssize_t core_alua_store_offline_bit(struct se_lun_s *, const char *,
+					size_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#356: FILE: include/target/target_core_alua.h:125:
+extern ssize_t core_alua_show_secondary_status(struct se_lun_s *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_lun_s *' should also have an identifier name
#356: FILE: include/target/target_core_alua.h:125:
+extern ssize_t core_alua_show_secondary_status(struct se_lun_s *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#356: FILE: include/target/target_core_alua.h:125:
+extern ssize_t core_alua_show_secondary_status(struct se_lun_s *, char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#357: FILE: include/target/target_core_alua.h:126:
+extern ssize_t core_alua_store_secondary_status(struct se_lun_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_lun_s *' should also have an identifier name
#357: FILE: include/target/target_core_alua.h:126:
+extern ssize_t core_alua_store_secondary_status(struct se_lun_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#357: FILE: include/target/target_core_alua.h:126:
+extern ssize_t core_alua_store_secondary_status(struct se_lun_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#357: FILE: include/target/target_core_alua.h:126:
+extern ssize_t core_alua_store_secondary_status(struct se_lun_s *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#358: FILE: include/target/target_core_alua.h:127:
+extern ssize_t core_alua_store_secondary_status(struct se_lun_s *,
+					const char *, size_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#359: FILE: include/target/target_core_alua.h:128:
+extern ssize_t core_alua_show_secondary_write_metadata(struct se_lun_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_lun_s *' should also have an identifier name
#359: FILE: include/target/target_core_alua.h:128:
+extern ssize_t core_alua_show_secondary_write_metadata(struct se_lun_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#359: FILE: include/target/target_core_alua.h:128:
+extern ssize_t core_alua_show_secondary_write_metadata(struct se_lun_s *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#360: FILE: include/target/target_core_alua.h:129:
+extern ssize_t core_alua_show_secondary_write_metadata(struct se_lun_s *,
+					char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#361: FILE: include/target/target_core_alua.h:130:
+extern ssize_t core_alua_store_secondary_write_metadata(struct se_lun_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_lun_s *' should also have an identifier name
#361: FILE: include/target/target_core_alua.h:130:
+extern ssize_t core_alua_store_secondary_write_metadata(struct se_lun_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#361: FILE: include/target/target_core_alua.h:130:
+extern ssize_t core_alua_store_secondary_write_metadata(struct se_lun_s *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#361: FILE: include/target/target_core_alua.h:130:
+extern ssize_t core_alua_store_secondary_write_metadata(struct se_lun_s *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#362: FILE: include/target/target_core_alua.h:131:
+extern ssize_t core_alua_store_secondary_write_metadata(struct se_lun_s *,
+					const char *, size_t);

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#382: FILE: include/target/target_core_base.h:894:
+	struct mutex	sep_tg_pt_md_mutex;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000078059.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 28 warnings, 34 checks, 294 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000078059.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
