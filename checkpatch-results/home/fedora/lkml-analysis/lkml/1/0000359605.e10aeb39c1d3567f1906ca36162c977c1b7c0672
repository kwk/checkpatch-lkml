WARNING:TYPO_SPELLING: 'separte' may be misspelled - perhaps 'separate'?
#45: 
i tested on a dockingstation with a separte cardbus controller).
                                    ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'securtiy' may be misspelled - perhaps 'security'?
#47: 
find some possible securtiy problems and fixed those, and (a bit ago
                   ^^^^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#119: FILE: drivers/char/nozomi.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#153: FILE: drivers/char/nozomi.c:35:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#154: FILE: drivers/char/nozomi.c:36:
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

WARNING:TYPO_SPELLING: 'initalization' may be misspelled - perhaps 'initialization'?
#185: FILE: drivers/char/nozomi.c:67:
+ * -Fixed issue with big endian during initalization, now proper toggle flags
                                        ^^^^^^^^^^^^^

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#224: FILE: drivers/char/nozomi.c:106:
+#include <asm/atomic.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#228: FILE: drivers/char/nozomi.c:110:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:DATE_TIME: Use of the '__DATE__' macro makes the build non-deterministic
#230: FILE: drivers/char/nozomi.c:112:
+					__DATE__ " " __TIME__ ")"

It is generally desirable that building the same source code with
the same set of tools is reproducible, i.e. the output is always
exactly the same.

The kernel does *not* use the ``__DATE__`` and ``__TIME__`` macros,
and enables warnings if they are used as they can lead to
non-deterministic builds.

See: https://www.kernel.org/doc/html/latest/kbuild/reproducible-builds.html#timestamps

ERROR:DATE_TIME: Use of the '__TIME__' macro makes the build non-deterministic
#230: FILE: drivers/char/nozomi.c:112:
+					__DATE__ " " __TIME__ ")"

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#242: FILE: drivers/char/nozomi.c:124:
+	printk(_err_flag_ "[%d] %s(): %s\n", __LINE__,		\

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#243: FILE: drivers/char/nozomi.c:125:
+		__FUNCTION__, tmp);				\

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'lvl' may be better as '(lvl)' to avoid precedence issues
#259: FILE: drivers/char/nozomi.c:141:
+#define D(lvl, args...)  do {if (lvl & debug) NFO(KERN_DEBUG, ##args); } \
+				while (0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#274: FILE: drivers/char/nozomi.c:156:
+#define DUMP(buf__,len__) \
                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'len__' - possible side-effects?
#274: FILE: drivers/char/nozomi.c:156:
+#define DUMP(buf__,len__) \
+  do {  \
+    char tbuf[TMP_BUF_MAX] = {0};\
+    if (len__ > 1) {\
+	snprintf(tbuf, len__ > TMP_BUF_MAX ? TMP_BUF_MAX : len__, "%s", buf__);\
+	if (tbuf[len__-2] == '\r') {\
+		tbuf[len__-2] = 'r';\
+	} \
+	DBG1("SENDING: '%s' (%d+n)", tbuf, len__);\
+    } else {\
+	DBG1("SENDING: '%s' (%d)", tbuf, len__);\
+    } \
+} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'len__' may be better as '(len__)' to avoid precedence issues
#274: FILE: drivers/char/nozomi.c:156:
+#define DUMP(buf__,len__) \
+  do {  \
+    char tbuf[TMP_BUF_MAX] = {0};\
+    if (len__ > 1) {\
+	snprintf(tbuf, len__ > TMP_BUF_MAX ? TMP_BUF_MAX : len__, "%s", buf__);\
+	if (tbuf[len__-2] == '\r') {\
+		tbuf[len__-2] = 'r';\
+	} \
+	DBG1("SENDING: '%s' (%d+n)", tbuf, len__);\
+    } else {\
+	DBG1("SENDING: '%s' (%d)", tbuf, len__);\
+    } \
+} while (0)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#275: FILE: drivers/char/nozomi.c:157:
+  do {  \$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#275: FILE: drivers/char/nozomi.c:157:
+  do {  \
+    char tbuf[TMP_BUF_MAX] = {0};\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#276: FILE: drivers/char/nozomi.c:158:
+    char tbuf[TMP_BUF_MAX] = {0};\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#277: FILE: drivers/char/nozomi.c:159:
+    if (len__ > 1) {\$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#279: FILE: drivers/char/nozomi.c:161:
+	if (tbuf[len__-2] == '\r') {\
 	              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#280: FILE: drivers/char/nozomi.c:162:
+		tbuf[len__-2] = 'r';\
 		          ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#283: FILE: drivers/char/nozomi.c:165:
+    } else {\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#285: FILE: drivers/char/nozomi.c:167:
+    } \$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#305: FILE: drivers/char/nozomi.c:187:
+
+

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#397: FILE: drivers/char/nozomi.c:279:
+} __attribute__ ((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#432: FILE: drivers/char/nozomi.c:314:
+} __attribute__ ((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#442: FILE: drivers/char/nozomi.c:324:
+} __attribute__ ((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#450: FILE: drivers/char/nozomi.c:332:
+} __attribute__ ((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#464: FILE: drivers/char/nozomi.c:346:
+} __attribute__ ((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#492: FILE: drivers/char/nozomi.c:374:
+} __attribute__ ((packed));

WARNING:TYPO_SPELLING: 'reserverd' may be misspelled - perhaps 'reserved'?
#500: FILE: drivers/char/nozomi.c:382:
+	unsigned reserverd:4;
 	         ^^^^^^^^^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#502: FILE: drivers/char/nozomi.c:384:
+} __attribute__ ((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#510: FILE: drivers/char/nozomi.c:392:
+} __attribute__ ((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#567: FILE: drivers/char/nozomi.c:449:
+} __attribute__ ((packed));

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#592: FILE: drivers/char/nozomi.c:474:
+};
+static atomic_t cards_found = ATOMIC_INIT(0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#606: FILE: drivers/char/nozomi.c:488:
+		curdev = list_first_entry(&my_devices,
+					struct nozomi_devices, list);

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#608: FILE: drivers/char/nozomi.c:490:
+		return curdev->my_dev;
+	} else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#618: FILE: drivers/char/nozomi.c:500:
+	printk(KERN_ALERT "Fatal error: could not find device" \

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#618: FILE: drivers/char/nozomi.c:500:
+	printk(KERN_ALERT "Fatal error: could not find device" \

WARNING:LINE_SPACING: Missing a blank line after declarations
#627: FILE: drivers/char/nozomi.c:509:
+	struct nozomi *ndev = get_dc_by_index(tty->index);
+	return ndev ? &ndev->port[tty->index % NTTY_TTY_MINORS] : NULL;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#669: FILE: drivers/char/nozomi.c:551:
+static void read_mem32(u32 *buf, const void __iomem *mem_addr_start,
+			u32 size_bytes)

CHECK:SPACING: No space is necessary after a cast
#673: FILE: drivers/char/nozomi.c:555:
+	const u32 *ptr = (u32 *) mem_addr_start;

CHECK:SPACING: No space is necessary after a cast
#675: FILE: drivers/char/nozomi.c:557:
+	const u32 *ptr = (__force u32 *) mem_addr_start;

CHECK:SPACING: No space is necessary after a cast
#685: FILE: drivers/char/nozomi.c:567:
+		buf16 = (u16 *) buf;

WARNING:UNNECESSARY_BREAK: break is not useful after a goto
#692: FILE: drivers/char/nozomi.c:574:
+		goto out;
+		break;

WARNING:UNNECESSARY_BREAK: break is not useful after a goto
#700: FILE: drivers/char/nozomi.c:582:
+		goto out;
+		break;

CHECK:SPACING: No space is necessary after a cast
#706: FILE: drivers/char/nozomi.c:588:
+			buf16 = (u16 *) buf;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#735: FILE: drivers/char/nozomi.c:617:
+static u32 write_mem32(void __iomem *mem_addr_start, u32 *buf,
+			u32 size_bytes)

CHECK:SPACING: No space is necessary after a cast
#739: FILE: drivers/char/nozomi.c:621:
+	u32 *ptr = (u32 *) mem_addr_start;

CHECK:SPACING: No space is necessary after a cast
#741: FILE: drivers/char/nozomi.c:623:
+	u32 *ptr = (__force u32 *) mem_addr_start;

CHECK:SPACING: No space is necessary after a cast
#751: FILE: drivers/char/nozomi.c:633:
+		buf16 = (u16 *) buf;

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#758: FILE: drivers/char/nozomi.c:640:
+		return 2;
+		break;

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#766: FILE: drivers/char/nozomi.c:648:
+		return 4;
+		break;

CHECK:SPACING: No space is necessary after a cast
#772: FILE: drivers/char/nozomi.c:654:
+			buf16 = (u16 *) buf;

WARNING:TYPO_SPELLING: 'initalization' may be misspelled - perhaps 'initialization'?
#876: FILE: drivers/char/nozomi.c:758:
+/* Dump config table under initalization phase */
                            ^^^^^^^^^^^^^

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#882: FILE: drivers/char/nozomi.c:764:
+	DBG3("product_information: 0x%04X", \

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#891: FILE: drivers/char/nozomi.c:773:
+	DBG3("dl_mdm_len0: 0x%04X, %d", dc->config_table.dl_mdm_len1,
+	   dc->config_table.dl_mdm_len1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#893: FILE: drivers/char/nozomi.c:775:
+	DBG3("dl_mdm_len1: 0x%04X, %d", dc->config_table.dl_mdm_len2,
+	   dc->config_table.dl_mdm_len2);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#895: FILE: drivers/char/nozomi.c:777:
+	DBG3("dl_diag_len0: 0x%04X, %d", dc->config_table.dl_diag_len1,
+	   dc->config_table.dl_diag_len1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#897: FILE: drivers/char/nozomi.c:779:
+	DBG3("dl_diag_len1: 0x%04X, %d", dc->config_table.dl_diag_len2,
+	   dc->config_table.dl_diag_len2);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#899: FILE: drivers/char/nozomi.c:781:
+	DBG3("dl_app1_len: 0x%04X, %d", dc->config_table.dl_app1_len,
+	   dc->config_table.dl_app1_len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#901: FILE: drivers/char/nozomi.c:783:
+	DBG3("dl_app2_len: 0x%04X, %d", dc->config_table.dl_app2_len,
+	   dc->config_table.dl_app2_len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#903: FILE: drivers/char/nozomi.c:785:
+	DBG3("dl_ctrl_len: 0x%04X, %d", dc->config_table.dl_ctrl_len,
+	   dc->config_table.dl_ctrl_len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#905: FILE: drivers/char/nozomi.c:787:
+	DBG3("ul_start: 0x%04X, %d", dc->config_table.ul_start,
+	   dc->config_table.ul_start);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#907: FILE: drivers/char/nozomi.c:789:
+	DBG3("ul_mdm_len[0]: 0x%04X, %d", dc->config_table.ul_mdm_len1,
+	   dc->config_table.ul_mdm_len1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#909: FILE: drivers/char/nozomi.c:791:
+	DBG3("ul_mdm_len[1]: 0x%04X, %d", dc->config_table.ul_mdm_len2,
+	   dc->config_table.ul_mdm_len2);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#911: FILE: drivers/char/nozomi.c:793:
+	DBG3("ul_diag_len: 0x%04X, %d", dc->config_table.ul_diag_len,
+	   dc->config_table.ul_diag_len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#913: FILE: drivers/char/nozomi.c:795:
+	DBG3("ul_app1_len: 0x%04X, %d", dc->config_table.ul_app1_len,
+	   dc->config_table.ul_app1_len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#915: FILE: drivers/char/nozomi.c:797:
+	DBG3("ul_app2_len: 0x%04X, %d", dc->config_table.ul_app2_len,
+	   dc->config_table.ul_app2_len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#917: FILE: drivers/char/nozomi.c:799:
+	DBG3("ul_ctrl_len: 0x%04X, %d", dc->config_table.ul_ctrl_len,
+	   dc->config_table.ul_ctrl_len);

WARNING:INLINE: plain inline is preferred over __inline__
#920: FILE: drivers/char/nozomi.c:802:
+static __inline__ void dump_table(const struct nozomi *dc) { }

CHECK:SPACING: No space is necessary after a cast
#929: FILE: drivers/char/nozomi.c:811:
+	read_mem32((u32 *) &dc->config_table, dc->base_addr + 0,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#930: FILE: drivers/char/nozomi.c:812:
+	read_mem32((u32 *) &dc->config_table, dc->base_addr + 0,
+						sizeof(struct config_table));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dc->config_table.version == 0'
#938: FILE: drivers/char/nozomi.c:820:
+	if ((dc->config_table.version == 0)
+	    || (dc->config_table.toggle.enabled == TOGGLE_VALID)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dc->config_table.toggle.enabled == TOGGLE_VALID'
#938: FILE: drivers/char/nozomi.c:820:
+	if ((dc->config_table.version == 0)
+	    || (dc->config_table.toggle.enabled == TOGGLE_VALID)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#939: FILE: drivers/char/nozomi.c:821:
+	if ((dc->config_table.version == 0)
+	    || (dc->config_table.toggle.enabled == TOGGLE_VALID)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#941: FILE: drivers/char/nozomi.c:823:
+		int i;
+		DBG1("Second phase, configuring card");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#949: FILE: drivers/char/nozomi.c:831:
+		DBG1("toggle ports: MDM UL:%d MDM DL:%d, DIAG DL:%d",
+		   dc->port[PORT_MDM].toggle_ul,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dc->config_table.version > 0'
#969: FILE: drivers/char/nozomi.c:851:
+	if ((dc->config_table.version > 0)
+	    && (dc->config_table.toggle.enabled != TOGGLE_VALID)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dc->config_table.toggle.enabled != TOGGLE_VALID'
#969: FILE: drivers/char/nozomi.c:851:
+	if ((dc->config_table.version > 0)
+	    && (dc->config_table.toggle.enabled != TOGGLE_VALID)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#970: FILE: drivers/char/nozomi.c:852:
+	if ((dc->config_table.version > 0)
+	    && (dc->config_table.toggle.enabled != TOGGLE_VALID)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#972: FILE: drivers/char/nozomi.c:854:
+		u32 offset = 0;
+		DBG1("First phase: pushing upload buffers, clearing download");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#987: FILE: drivers/char/nozomi.c:869:
+		write_mem32(dc->port[PORT_MDM].ul_addr[CH_A],
+			(u32 *) &offset, 4);

CHECK:SPACING: No space is necessary after a cast
#987: FILE: drivers/char/nozomi.c:869:
+			(u32 *) &offset, 4);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#989: FILE: drivers/char/nozomi.c:871:
+		write_mem32(dc->port[PORT_MDM].ul_addr[CH_B],
+			(u32 *) &offset, 4);

CHECK:SPACING: No space is necessary after a cast
#989: FILE: drivers/char/nozomi.c:871:
+			(u32 *) &offset, 4);

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#1021: FILE: drivers/char/nozomi.c:903:
+		return;
+		break;

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#1049: FILE: drivers/char/nozomi.c:931:
+		return;
+		break;

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#1077: FILE: drivers/char/nozomi.c:959:
+		return;
+		break;

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#1105: FILE: drivers/char/nozomi.c:987:
+		return;
+		break;

CHECK:SPACING: No space is necessary after a cast
#1138: FILE: drivers/char/nozomi.c:1020:
+	write_mem32(addr, (u32 *) &size, 4);

CHECK:SPACING: No space is necessary after a cast
#1139: FILE: drivers/char/nozomi.c:1021:
+	write_mem32(addr + 4, (u32 *) dc->send_buf, size);

CHECK:SPACING: No space is necessary after a cast
#1163: FILE: drivers/char/nozomi.c:1045:
+	read_mem32((u32 *) &size, addr, 4);

WARNING:SPLIT_STRING: quoted string split across lines
#1168: FILE: drivers/char/nozomi.c:1050:
+		DBG1("No room in tty, don't read data, don't ack interrupt, "
+			"disable interrupt");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:SPACING: No space is necessary after a cast
#1185: FILE: drivers/char/nozomi.c:1067:
+		read_mem32((u32 *) buf, addr + offset, RECEIVE_BUF_MAX);

CHECK:SPACING: No space is necessary after a cast
#1191: FILE: drivers/char/nozomi.c:1073:
+			size -= tty_insert_flip_string(tty, (char *) buf, size);

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#1193: FILE: drivers/char/nozomi.c:1075:
+			i = tty_insert_flip_string(tty, \

CHECK:SPACING: No space is necessary after a cast
#1194: FILE: drivers/char/nozomi.c:1076:
+						(char *) buf, RECEIVE_BUF_MAX);

CHECK:SPACING: No space is necessary after a cast
#1262: FILE: drivers/char/nozomi.c:1144:
+	read_mem32((u32 *) &ctrl_dl, dc->port[PORT_CTRL].dl_addr[CH_A], 2);

WARNING:SPLIT_STRING: quoted string split across lines
#1267: FILE: drivers/char/nozomi.c:1149:
+		DBG1("The Base Band sends this value as a response to a "
+			"request for IMSI detach sent over the control "

WARNING:SPLIT_STRING: quoted string split across lines
#1268: FILE: drivers/char/nozomi.c:1150:
+			"request for IMSI detach sent over the control "
+			"channel uplink (see section 7.6.1).");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1293: FILE: drivers/char/nozomi.c:1175:
+	DBG1("0x%04X->0x%04X", *((u16 *)&dc->port[port].ctrl_dl),
+	   *((u16 *)&ctrl_dl));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1300: FILE: drivers/char/nozomi.c:1182:
+		DBG1("Disable interrupt (0x%04X) on port: %d",
+			enable_ier, port);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1304: FILE: drivers/char/nozomi.c:1186:
+	} else if (old_ctrl.CTS == 0 && ctrl_dl.CTS == 1) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1307: FILE: drivers/char/nozomi.c:1189:
+			DBG1("Enable interrupt (0x%04X) on port: %d",
+				enable_ier, port);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1309: FILE: drivers/char/nozomi.c:1191:
+			DBG1("Data in buffer [%d], enable transmit! ",
+				__kfifo_len(dc->port[port].fifo_ul));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1330: FILE: drivers/char/nozomi.c:1212:
+	DBG1("port: %d DCD(%d), CTS(%d), RI(%d), DSR(%d)",
+	   port,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1338: FILE: drivers/char/nozomi.c:1220:
+static enum ctrl_port_type port2ctrl(enum port_type port,
+					const struct nozomi *dc)

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#1351: FILE: drivers/char/nozomi.c:1233:
+			"ERROR: send flow control " \

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#1375: FILE: drivers/char/nozomi.c:1257:
+			write_mem32(dc->port[PORT_CTRL].ul_addr[0], \

CHECK:SPACING: No space is necessary after a cast
#1376: FILE: drivers/char/nozomi.c:1258:
+				(u32 *) ctrl, 2);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around dc->port[port].toggle_ul
#1431: FILE: drivers/char/nozomi.c:1313:
+	u8 *toggle = &(dc->port[port].toggle_ul);

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#1448: FILE: drivers/char/nozomi.c:1330:
+				dc->last_ier = \

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#1470: FILE: drivers/char/nozomi.c:1352:
+				dc->last_ier = \

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1511: FILE: drivers/char/nozomi.c:1393:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1513: FILE: drivers/char/nozomi.c:1395:
+	DBG4("%s irq:0x%04X, prev:0x%04X", interrupt2str(m->read_iir),
+	   m->read_iir, dc->last_ier);

WARNING:SPLIT_STRING: quoted string split across lines
#1520: FILE: drivers/char/nozomi.c:1402:
+			dev_err(&dc->pdev->dev, "Could not read status from "
+				"card, we should disable interface\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1543: FILE: drivers/char/nozomi.c:1425:
+		if (!handle_data_dl(dc, m, PORT_MDM,
+				&(dc->port[PORT_MDM].toggle_dl), MDM_DL1,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around dc->port[PORT_MDM].toggle_dl
#1543: FILE: drivers/char/nozomi.c:1425:
+				&(dc->port[PORT_MDM].toggle_dl), MDM_DL1,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1557: FILE: drivers/char/nozomi.c:1439:
+		if (!handle_data_dl(dc, m, PORT_DIAG,
+				&(dc->port[PORT_DIAG].toggle_dl), DIAG_DL1,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around dc->port[PORT_DIAG].toggle_dl
#1557: FILE: drivers/char/nozomi.c:1439:
+				&(dc->port[PORT_DIAG].toggle_dl), DIAG_DL1,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1613: FILE: drivers/char/nozomi.c:1495:
+	rval = request_irq(ndev->my_dev->pdev->irq, &interrupt_handler,
+				IRQF_SHARED, NOZOMI_NAME, ndev);

WARNING:SPLIT_STRING: quoted string split across lines
#1616: FILE: drivers/char/nozomi.c:1498:
+		dev_err(&ndev->my_dev->pdev->dev, "Cannot open because IRQ %d "
+			"is already in use.\n", ndev->my_dev->pdev->irq);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1658: FILE: drivers/char/nozomi.c:1540:
+static ssize_t card_type_show(struct device *dev, struct device_attribute *attr,
+			  char *buf)

WARNING:DEVICE_ATTR_RO: Use DEVICE_ATTR_RO
#1664: FILE: drivers/char/nozomi.c:1546:
+}

The DEVICE_ATTR_RO(name) helper macro can be used instead of
DEVICE_ATTR(name, 0444, name_show, NULL);

Note that the macro automatically appends _show to the named
attribute variable of the device for the show method.

See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device.html#attributes

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1668: FILE: drivers/char/nozomi.c:1550:
+static ssize_t open_ttys_show(struct device *dev, struct device_attribute *attr,
+			  char *buf)

WARNING:DEVICE_ATTR_RO: Use DEVICE_ATTR_RO
#1674: FILE: drivers/char/nozomi.c:1556:
+}

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1694: FILE: drivers/char/nozomi.c:1576:
+static int __devinit nozomi_card_init(struct pci_dev *pdev,

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*dc)...) over kzalloc(sizeof(struct nozomi)...)
#1709: FILE: drivers/char/nozomi.c:1591:
+	dc = kzalloc(sizeof(struct nozomi), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*newdev)...) over kzalloc(sizeof(struct nozomi_devices)...)
#1714: FILE: drivers/char/nozomi.c:1596:
+	newdev = kzalloc(sizeof(struct nozomi_devices), GFP_KERNEL);

CHECK:SPACING: No space is necessary after a cast
#1755: FILE: drivers/char/nozomi.c:1637:
+			(int) /* nozomi_private.io_addr */ 0);

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#1762: FILE: drivers/char/nozomi.c:1644:
+	if (!dc->send_buf) {
+		dev_err(&pdev->dev, "Could not allocate send buffer?\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1793: FILE: drivers/char/nozomi.c:1675:
+		first = list_first_entry(&my_devices, struct nozomi_devices,
+									list);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1802: FILE: drivers/char/nozomi.c:1684:
+		tty_register_device(dc->tty_driver, new_index + i,
+							&dc->pdev->dev);

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#1857: FILE: drivers/char/nozomi.c:1739:
+static void __devexit tty_exit(struct nozomi_devices *ndev)

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#1867: FILE: drivers/char/nozomi.c:1749:
+		if (dc->port[i].tty && \

WARNING:MSLEEP: msleep < 20ms can sleep for up to 20ms; see Documentation/timers/timers-howto.rst
#1872: FILE: drivers/char/nozomi.c:1754:
+		msleep(1);

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#1874: FILE: drivers/char/nozomi.c:1756:
+	for (i = ndev->index_start; i < ndev->index_start + NTTY_TTY_MINORS; \

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1882: FILE: drivers/char/nozomi.c:1764:
+			printk(KERN_ERR "Unable to unregister the tty driver !"

WARNING:SPLIT_STRING: quoted string split across lines
#1883: FILE: drivers/char/nozomi.c:1765:
+			printk(KERN_ERR "Unable to unregister the tty driver !"
+							" (%d)\n", ret);

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#1889: FILE: drivers/char/nozomi.c:1771:
+static void __devexit nozomi_card_exit(struct pci_dev *pdev)

WARNING:LINE_SPACING: Missing a blank line after declarations
#2011: FILE: drivers/char/nozomi.c:1893:
+	struct nozomi *dc = get_dc_by_tty(tty);
+	tty_do_close(dc, (struct port *)tty->driver_data);

WARNING:TYPO_SPELLING: 'transfered' may be misspelled - perhaps 'transferred'?
#2016: FILE: drivers/char/nozomi.c:1898:
+ * Data is inserted into a fifo, which is then read and transfered to the modem.
                                                         ^^^^^^^^^^

WARNING:SPLIT_STRING: quoted string split across lines
#2037: FILE: drivers/char/nozomi.c:1919:
+		dev_err(&dc->pdev->dev, "Would have deadlocked - "
+			"return ERESTARTSYS\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dc"
#2049: FILE: drivers/char/nozomi.c:1931:
+	if (unlikely(dc == NULL)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around dc->port[PORT_MDM]
#2056: FILE: drivers/char/nozomi.c:1938:
+	if (port == &(dc->port[PORT_MDM])) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2060: FILE: drivers/char/nozomi.c:1942:
+			enable_transmit_ul(port->tty_index % NTTY_TTY_MINORS,
+									dc);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2119: FILE: drivers/char/nozomi.c:2001:
+static int ntty_tiocmset(struct tty_struct *tty, struct file *file,
+	unsigned int set, unsigned int clear)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cnow.rng != cprev.rng'
#2161: FILE: drivers/char/nozomi.c:2043:
+			if (((arg & TIOCM_RNG) && (cnow.rng != cprev.rng)) ||
+			    ((arg & TIOCM_DSR) && (cnow.dsr != cprev.dsr)) ||
+			    ((arg & TIOCM_CD) && (cnow.dcd != cprev.dcd)) ||
+			    ((arg & TIOCM_CTS) && (cnow.cts != cprev.cts)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cnow.dsr != cprev.dsr'
#2161: FILE: drivers/char/nozomi.c:2043:
+			if (((arg & TIOCM_RNG) && (cnow.rng != cprev.rng)) ||
+			    ((arg & TIOCM_DSR) && (cnow.dsr != cprev.dsr)) ||
+			    ((arg & TIOCM_CD) && (cnow.dcd != cprev.dcd)) ||
+			    ((arg & TIOCM_CTS) && (cnow.cts != cprev.cts)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cnow.dcd != cprev.dcd'
#2161: FILE: drivers/char/nozomi.c:2043:
+			if (((arg & TIOCM_RNG) && (cnow.rng != cprev.rng)) ||
+			    ((arg & TIOCM_DSR) && (cnow.dsr != cprev.dsr)) ||
+			    ((arg & TIOCM_CD) && (cnow.dcd != cprev.dcd)) ||
+			    ((arg & TIOCM_CTS) && (cnow.cts != cprev.cts)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cnow.cts != cprev.cts'
#2161: FILE: drivers/char/nozomi.c:2043:
+			if (((arg & TIOCM_RNG) && (cnow.rng != cprev.rng)) ||
+			    ((arg & TIOCM_DSR) && (cnow.dsr != cprev.dsr)) ||
+			    ((arg & TIOCM_CD) && (cnow.dcd != cprev.dcd)) ||
+			    ((arg & TIOCM_CTS) && (cnow.cts != cprev.cts)))

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2170: FILE: drivers/char/nozomi.c:2052:
+
+	}

WARNING:CONST_STRUCT: struct tty_operations should normally be const
#2326: FILE: drivers/char/nozomi.c:2208:
+static struct tty_operations tty_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2384: FILE: drivers/char/nozomi.c:2266:
+	printk(KERN_INFO "Initializing %s\n", VERSION_STRING);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2390: FILE: drivers/char/nozomi.c:2272:
+	printk(KERN_INFO "Unloading %s\n", DRIVER_DESC);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#2397: FILE: drivers/char/nozomi.c:2279:
+module_param(debug, int, S_IRUGO | S_IWUSR);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000359605.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 68 warnings, 85 checks, 2305 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000359605.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
