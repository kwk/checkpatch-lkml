ERROR:CODE_INDENT: code indent should use tabs where possible
#76: FILE: arch/x86/kernel/traps_64.c:1159:
+        init_thread_context();$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#76: FILE: arch/x86/kernel/traps_64.c:1159:
+        init_thread_context();$

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'dst' may be better as '(dst)' to avoid precedence issues
#89: FILE: kernel/fork.c:90:
+# define memcpy_task_struct(dst, src) do { *dst = *src; } while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'src' may be better as '(src)' to avoid precedence issues
#89: FILE: kernel/fork.c:90:
+# define memcpy_task_struct(dst, src) do { *dst = *src; } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#89: FILE: kernel/fork.c:90:
+# define memcpy_task_struct(dst, src) do { *dst = *src; } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

ERROR:CODE_INDENT: code indent should use tabs where possible
#98: FILE: kernel/fork.c:147:
+ ^Itask_struct_slab_init();$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#98: FILE: kernel/fork.c:147:
+ ^Itask_struct_slab_init();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#98: FILE: kernel/fork.c:147:
+ ^Itask_struct_slab_init();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#107: FILE: kernel/fork.c:187:
+ ^Imemcpy_task_struct(tsk, orig);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#107: FILE: kernel/fork.c:187:
+ ^Imemcpy_task_struct(tsk, orig);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#107: FILE: kernel/fork.c:187:
+ ^Imemcpy_task_struct(tsk, orig);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#319: FILE: include/asm-x86/i387.h:26:
+extern void init_thread_context(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around t->thread.cntxt->fsave
#328: FILE: include/asm-x86/i387.h:39:
+#define FSAVE(t)	(&(t->thread.cntxt->fsave))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 't' may be better as '(t)' to avoid precedence issues
#328: FILE: include/asm-x86/i387.h:39:
+#define FSAVE(t)	(&(t->thread.cntxt->fsave))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around t->thread.cntxt->fxsave
#329: FILE: include/asm-x86/i387.h:40:
+#define FXSAVE(t)	(&(t->thread.cntxt->fxsave))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 't' may be better as '(t)' to avoid precedence issues
#329: FILE: include/asm-x86/i387.h:40:
+#define FXSAVE(t)	(&(t->thread.cntxt->fxsave))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#452: FILE: include/asm-x86/processor.h:311:
+extern void init_thread_context(void);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#515: FILE: include/asm-x86/thread_info.h:9:
+extern struct task_struct * alloc_task_struct(void);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#515: FILE: include/asm-x86/thread_info.h:9:
+extern struct task_struct * alloc_task_struct(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#516: FILE: include/asm-x86/thread_info.h:10:
+extern void free_task_struct(struct task_struct *tsk);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#517: FILE: include/asm-x86/thread_info.h:11:
+extern void memcpy_task_struct(struct task_struct *dst, struct task_struct *src

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#519: FILE: include/asm-x86/thread_info.h:13:
+extern void task_struct_slab_init(void);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#538: FILE: arch/x86/kernel/process.c:1:
+#include <linux/errno.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#548: FILE: arch/x86/kernel/process.c:11:
+struct task_struct * alloc_task_struct(void)

WARNING:LINE_SPACING: Missing a blank line after declarations
#551: FILE: arch/x86/kernel/process.c:14:
+	struct task_struct *tsk;
+	tsk = kmem_cache_alloc(task_struct_cachep, GFP_KERNEL);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#568: FILE: arch/x86/kernel/process.c:31:
+	union thread_cntxt *ptr;
+	ptr = dst->thread.cntxt;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#577: FILE: arch/x86/kernel/process.c:40:
+	tsk->thread.cntxt=NULL;
 	                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#583: FILE: arch/x86/kernel/process.c:46:
+ ^I/* create a slab on which task_structs can be allocated */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#583: FILE: arch/x86/kernel/process.c:46:
+ ^I/* create a slab on which task_structs can be allocated */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#583: FILE: arch/x86/kernel/process.c:46:
+ ^I/* create a slab on which task_structs can be allocated */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#588: FILE: arch/x86/kernel/process.c:51:
+        task_cntxt_cachep =$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#588: FILE: arch/x86/kernel/process.c:51:
+        task_cntxt_cachep =$

ERROR:CODE_INDENT: code indent should use tabs where possible
#589: FILE: arch/x86/kernel/process.c:52:
+        ^Ikmem_cache_create("task_cntxt", math_cntxt_size,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#589: FILE: arch/x86/kernel/process.c:52:
+        ^Ikmem_cache_create("task_cntxt", math_cntxt_size,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#589: FILE: arch/x86/kernel/process.c:52:
+        ^Ikmem_cache_create("task_cntxt", math_cntxt_size,$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around t->thread.cntxt->soft
#627: FILE: arch/x86/math-emu/fpu_system.h:40:
+#define SOFT(t)			(&(t->thread.cntxt->soft))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 't' may be better as '(t)' to avoid precedence issues
#627: FILE: arch/x86/math-emu/fpu_system.h:40:
+#define SOFT(t)			(&(t->thread.cntxt->soft))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around I387->soft.no_update
#642: FILE: arch/x86/math-emu/fpu_system.h:54:
+#define no_ip_update		(*(u_char *)&(I387->soft.no_update))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around I387->soft.rm
#643: FILE: arch/x86/math-emu/fpu_system.h:55:
+#define FPU_rm			(*(u_char *)&(I387->soft.rm))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around I387->soft.alimit
#648: FILE: arch/x86/math-emu/fpu_system.h:59:
+#define access_limit		(*(u_char *)&(I387->soft.alimit))

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000316184.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 9 errors, 14 warnings, 17 checks, 540 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000316184.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
