WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#41: 
Industrialio subsystem core patch. This subsystem is intended to support the use

WARNING:TYPO_SPELLING: 'occuring' may be misspelled - perhaps 'occurring'?
#44: 
(where it makes sense) with device control occuring through sysfs interfaces and
                                           ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#92: FILE: drivers/Kconfig:105:
+source "drivers/industrialio/Kconfig" $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'subsytem' may be misspelled - perhaps 'subsystem'?
#109: FILE: drivers/industrialio/Kconfig:2:
+# Industrial I/O subsytem configuration
                  ^^^^^^^^

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#112: FILE: drivers/industrialio/Kconfig:5:
+menuconfig INDUSTRIALIO
+	tristate "Industrial I/O support"
+	---help---
+	  The industrial IO subsystem provides a unified framework for drivers
+	  for many different types of embedded sensors using a number of
+	  different phyiscal interfaces (i2c, spi etc). See
+	  Documentation/industrialio for more information.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:TYPO_SPELLING: 'phyiscal' may be misspelled - perhaps 'physical'?
#117: FILE: drivers/industrialio/Kconfig:10:
+	  different phyiscal interfaces (i2c, spi etc). See
 	            ^^^^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#140: FILE: include/linux/industrialio.h:1:
+/* The industrial I/O core

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#157: FILE: include/linux/industrialio.h:18:
+/* Static device specific elements (conversion factors etc)
+   should be exported via sysfs

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:LINE_SPACING: Please don't use multiple blank lines
#161: FILE: include/linux/industrialio.h:22:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#165: FILE: include/linux/industrialio.h:26:
+
+

WARNING:TYPO_SPELLING: 'ot' may be misspelled - perhaps 'to'?
#173: FILE: include/linux/industrialio.h:34:
+/* The actual event being pushed ot userspace */
                                  ^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#179: FILE: include/linux/industrialio.h:40:
+
+

WARNING:TYPO_SPELLING: 'typicaly' may be misspelled - perhaps 'typically'?
#183: FILE: include/linux/industrialio.h:44:
+	/* Part of shared event handling - (typicaly ring buffers) */
 	                                    ^^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#192: FILE: include/linux/industrialio.h:53:
+	struct timespec ts;
+	ktime_get_ts(&ts);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ring_buf' - possible side-effects?
#218: FILE: include/linux/industrialio.h:79:
+#define INIT_IIO_RING_BUFFER(ring_buf, _bytes_per_datum, _length) {	\
+		(ring_buf)->size = _bytes_per_datum;			\
+		(ring_buf)->length = _length;				\
+		(ring_buf)->loopcount = 0;				\
+		(ring_buf)->shared_ev_pointer.ev_p = 0;			\
+		(ring_buf)->shared_ev_pointer.lock =			\
+			__SPIN_LOCK_UNLOCKED((ring_buf)			\
+					     ->shared_ev_pointer->loc);	\
+	}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ring' - possible side-effects?
#228: FILE: include/linux/industrialio.h:89:
+#define INIT_IIO_SW_RING_BUFFER(ring, _bytes_per_datum, _length) {	\
+		INIT_IIO_RING_BUFFER(&(ring)->buf,			\
+				     _bytes_per_datum,			\
+				     _length);				\
+		(ring)->read_p = 0;					\
+		(ring)->write_p = 0;					\
+		(ring)->last_written_p = 0;				\
+		(ring)->data = kmalloc(_length*(ring)->buf.size,	\
+				       GFP_KERNEL);			\
+		(ring)->use_count = 0;					\
+		(ring)->use_lock = __SPIN_LOCK_UNLOCKED((ring)->use_lock); \
+	}

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_length' - possible side-effects?
#228: FILE: include/linux/industrialio.h:89:
+#define INIT_IIO_SW_RING_BUFFER(ring, _bytes_per_datum, _length) {	\
+		INIT_IIO_RING_BUFFER(&(ring)->buf,			\
+				     _bytes_per_datum,			\
+				     _length);				\
+		(ring)->read_p = 0;					\
+		(ring)->write_p = 0;					\
+		(ring)->last_written_p = 0;				\
+		(ring)->data = kmalloc(_length*(ring)->buf.size,	\
+				       GFP_KERNEL);			\
+		(ring)->use_count = 0;					\
+		(ring)->use_lock = __SPIN_LOCK_UNLOCKED((ring)->use_lock); \
+	}

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#235: FILE: include/linux/industrialio.h:96:
+		(ring)->data = kmalloc(_length*(ring)->buf.size,	\
 		                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#243: FILE: include/linux/industrialio.h:104:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#246: FILE: include/linux/industrialio.h:107:
+int iio_store_to_sw_ring(struct iio_sw_ring_buffer *ring,
+		      unsigned char *data,

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#250: FILE: include/linux/industrialio.h:111:
+/* Edge cases :
+   1) data at last_p is no longer valid - requires complete wrap around.

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#254: FILE: include/linux/industrialio.h:115:
+   something very very weird has occured!
                                  ^^^^^^^

WARNING:REPEATED_WORD: Possible repeated word: 'very'
#254: FILE: include/linux/industrialio.h:115:
+   something very very weird has occured!

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#260: FILE: include/linux/industrialio.h:121:
+ * and unmark when it may without problems */

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#298: FILE: include/linux/industrialio.h:159:
+	struct mutex				event_list_lock;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#313: FILE: include/linux/industrialio.h:174:
+	spinlock_t lock;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#319: FILE: include/linux/industrialio.h:180:
+ * the possible time required to read from the buffer.  */

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#355: FILE: include/linux/industrialio.h:216:
+	spinlock_t		use_lock;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#364: FILE: include/linux/industrialio.h:225:
+ * call to iio_device_register. */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#387: FILE: include/linux/industrialio.h:248:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#394: FILE: include/linux/industrialio.h:255:
+/* Software Ring Buffer
+   - for now assuming only makes sense to have a single ring */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#394: FILE: include/linux/industrialio.h:255:
+   - for now assuming only makes sense to have a single ring */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#402: FILE: include/linux/industrialio.h:263:
+	 * post / pre refer to relative to the change of current_mode. */

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct iio_dev *' should also have an identifier name
#403: FILE: include/linux/industrialio.h:264:
+	int (*ring_preenable)(struct iio_dev *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct iio_dev *' should also have an identifier name
#404: FILE: include/linux/industrialio.h:265:
+	int (*ring_postenable)(struct iio_dev *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct iio_dev *' should also have an identifier name
#405: FILE: include/linux/industrialio.h:266:
+	int (*ring_predisable)(struct iio_dev *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct iio_dev *' should also have an identifier name
#406: FILE: include/linux/industrialio.h:267:
+	int (*ring_postdisable)(struct iio_dev *);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#413: FILE: include/linux/industrialio.h:274:
+	 * with this locked.*/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#445: FILE: include/linux/industrialio.h:306:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#447: FILE: include/linux/industrialio.h:308:
+ * chrdev */

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#460: FILE: include/linux/industrialio.h:321:
+};
+#define INIT_IIO_WORK_CONT(cont, _checkfunc, _nocheckfunc, _add, _mask, _st)\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cont' - possible side-effects?
#460: FILE: include/linux/industrialio.h:321:
+#define INIT_IIO_WORK_CONT(cont, _checkfunc, _nocheckfunc, _add, _mask, _st)\
+	do {								\
+	INIT_WORK(&(cont)->ws, _checkfunc);				\
+	INIT_WORK(&(cont)->ws_nocheck, _nocheckfunc);			\
+	(cont)->address = _add;						\
+	(cont)->mask = _mask;						\
+	(cont)->st = _st;						\
+	} while (0)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#461: FILE: include/linux/industrialio.h:322:
+	do {								\
+	INIT_WORK(&(cont)->ws, _checkfunc);				\

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#474: FILE: include/linux/industrialio.h:335:
+int __iio_put_event(struct iio_event_interface *ev_int,
+		int ev_code,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#505: FILE: include/linux/industrialio.h:366:
+int iio_ptimer_set_freq(struct iio_periodic *ptimer, unsigned frequency);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#517: FILE: include/linux/industrialio_ptimer.h:1:
+#ifndef _INDUSTRIALIO_PTIMER_H_

CHECK:LINE_SPACING: Please don't use multiple blank lines
#522: FILE: include/linux/industrialio_ptimer.h:6:
+
+

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#526: FILE: include/linux/industrialio_ptimer.h:10:
+};
+struct ptimer_info_listel {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#533: FILE: include/linux/industrialio_ptimer.h:17:
+industrialio_register_ptimer(struct ptimer_info const *info, unsigned n);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#538: FILE: include/linux/industrialio_sysfs.h:1:
+/* The industrial I/O core

CHECK:LINE_SPACING: Please don't use multiple blank lines
#554: FILE: include/linux/industrialio_sysfs.h:17:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#561: FILE: include/linux/industrialio_sysfs.h:24:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#565: FILE: include/linux/industrialio_sysfs.h:28:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#573: FILE: include/linux/industrialio_sysfs.h:36:
+__init_iio_chrdev_minor_attr(struct iio_chrdev_minor_attr *minor_attr,
+			   const char *name,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#577: FILE: include/linux/industrialio_sysfs.h:40:
+
+

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#578: FILE: include/linux/industrialio_sysfs.h:41:
+#define to_iio_chrdev_minor_attr(_dev_attr) \
+	container_of(_dev_attr, struct iio_chrdev_minor_attr, dev_attr);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#586: FILE: include/linux/industrialio_sysfs.h:49:
+
+

WARNING:TYPO_SPELLING: 'dependant' may be misspelled - perhaps 'dependent'?
#590: FILE: include/linux/industrialio_sysfs.h:53:
+/* Some attributes will be hard coded (device dependant) and not require an
                                               ^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#591: FILE: include/linux/industrialio_sysfs.h:54:
+/* Some attributes will be hard coded (device dependant) and not require an
+   address, in these cases pass a negative */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#591: FILE: include/linux/industrialio_sysfs.h:54:
+   address, in these cases pass a negative */

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#598: FILE: include/linux/industrialio_sysfs.h:61:
+	struct iio_dev_attr iio_dev_attr_##_name		\
+	= IIO_ATTR(_name, _mode, _show, _store, _addr)

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#609: FILE: include/linux/industrialio_sysfs.h:72:
+	IIO_DEVICE_ATTR(revision, S_IRUGO, _show, NULL, 0)

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#617: FILE: include/linux/industrialio_sysfs.h:80:
+	IIO_DEVICE_ATTR(available_sampling_frequency, S_IRUGO, _show, NULL, 0)

WARNING:TYPO_SPELLING: 'attibute' may be misspelled - perhaps 'attribute'?
#619: FILE: include/linux/industrialio_sysfs.h:82:
+/* ADC types of attibute */
                 ^^^^^^^^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#622: FILE: include/linux/industrialio_sysfs.h:85:
+	IIO_DEVICE_ATTR(available_scan_modes, S_IRUGO, _show, NULL, 0)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#628: FILE: include/linux/industrialio_sysfs.h:91:
+	IIO_DEVICE_ATTR(in##_number, S_IRUGO, _show, NULL, _number)

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#630: FILE: include/linux/industrialio_sysfs.h:93:
+#define IIO_DEV_ATTR_SCAN(_show)		\
+	IIO_DEVICE_ATTR(scan, S_IRUGO, _show, NULL, 0);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#631: FILE: include/linux/industrialio_sysfs.h:94:
+	IIO_DEVICE_ATTR(scan, S_IRUGO, _show, NULL, 0);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#652: FILE: include/linux/industrialio_sysfs.h:115:
+
+

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#655: FILE: include/linux/industrialio_sysfs.h:118:
+	IIO_DEVICE_ATTR(x, S_IRUGO, _show, NULL, _addr)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#658: FILE: include/linux/industrialio_sysfs.h:121:
+	IIO_DEVICE_ATTR(y, S_IRUGO, _show, NULL, _addr)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#661: FILE: include/linux/industrialio_sysfs.h:124:
+	IIO_DEVICE_ATTR(z, S_IRUGO, _show, NULL, _addr)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#664: FILE: include/linux/industrialio_sysfs.h:127:
+	IIO_DEVICE_ATTR(temp, S_IRUGO, _show, NULL, 0)

WARNING:TYPO_SPELLING: 'thesholds' may be misspelled - perhaps 'thresholds'?
#666: FILE: include/linux/industrialio_sysfs.h:129:
+/* For unified thesholds (shared across all directions */
                ^^^^^^^^^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#681: FILE: include/linux/industrialio_sysfs.h:144:
+	IIO_DEVICE_ATTR(sw_ring_enable, S_IRUGO | S_IWUSR, _show, _store, 0)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#685: FILE: include/linux/industrialio_sysfs.h:148:
+	IIO_DEVICE_ATTR(hw_ring_enable, S_IRUGO | S_IWUSR, _show, _store, 0)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#692: FILE: include/linux/industrialio_sysfs.h:155:
+	IIO_DEVICE_ATTR(ring_bps_available, S_IRUGO, _show, NULL, 0)

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#696: FILE: include/linux/industrialio_sysfs.h:159:
+#define IIO_EVENT_SH(_name, _handler)					\
+	static struct iio_event_handler_list				\
+	iio_event_##_name = {						\
+		.handler = _handler,					\
+		.refcount = 0,						\
+	};

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_ev_list' may be better as '(_ev_list)' to avoid precedence issues
#702: FILE: include/linux/industrialio_sysfs.h:165:
+#define IIO_EVENT_ATTR_SH(_name, _ev_list, _show, _store, _mask)	\
+	static struct iio_event_attr				\
+	iio_event_attr_##_name					\
+	= { .dev_attr = __ATTR(_name, S_IRUGO | S_IWUSR, _show, _store),\
+	    .mask = _mask,\
+	    .listel = &_ev_list };

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#702: FILE: include/linux/industrialio_sysfs.h:165:
+#define IIO_EVENT_ATTR_SH(_name, _ev_list, _show, _store, _mask)	\
+	static struct iio_event_attr				\
+	iio_event_attr_##_name					\
+	= { .dev_attr = __ATTR(_name, S_IRUGO | S_IWUSR, _show, _store),\
+	    .mask = _mask,\
+	    .listel = &_ev_list };

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#705: FILE: include/linux/industrialio_sysfs.h:168:
+	iio_event_attr_##_name					\
+	= { .dev_attr = __ATTR(_name, S_IRUGO | S_IWUSR, _show, _store),\

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#705: FILE: include/linux/industrialio_sysfs.h:168:
+	= { .dev_attr = __ATTR(_name, S_IRUGO | S_IWUSR, _show, _store),\

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#710: FILE: include/linux/industrialio_sysfs.h:173:
+#define IIO_EVENT_ATTR(_name, _show, _store, _mask, _handler)	\
+	static struct iio_event_handler_list				\
+	iio_event_##_name = {				\
+		.handler = _handler,					\
+	};								\
+	static struct							\
+	iio_event_attr						\
+	iio_event_attr_##_name					\
+	= { .dev_attr = __ATTR(_name, S_IRUGO | S_IWUSR, _show, _store), \
+	    .mask = _mask,						\
+	    .listel = &iio_event_##_name };		\
+/*FIXME, add line number to the above?*/

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#718: FILE: include/linux/industrialio_sysfs.h:181:
+	iio_event_attr_##_name					\
+	= { .dev_attr = __ATTR(_name, S_IRUGO | S_IWUSR, _show, _store), \

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#718: FILE: include/linux/industrialio_sysfs.h:181:
+	= { .dev_attr = __ATTR(_name, S_IRUGO | S_IWUSR, _show, _store), \

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#724: FILE: include/linux/industrialio_sysfs.h:187:
+/* In most of these cases, this actually corresponds to something with a
+   value attached */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#724: FILE: include/linux/industrialio_sysfs.h:187:
+   value attached */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#727: FILE: include/linux/industrialio_sysfs.h:190:
+/* For some devices you can select whether all conditions or any condition
+   must be met for interrupt generation */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#727: FILE: include/linux/industrialio_sysfs.h:190:
+   must be met for interrupt generation */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#743: FILE: include/linux/industrialio_sysfs.h:206:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#815: FILE: drivers/industrialio/industrialio_ptimer_board_info.c:1:
+/* The industrial I/O periodic timer registration code

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#833: FILE: drivers/industrialio/industrialio_ptimer_board_info.c:19:
+EXPORT_SYMBOL_GPL(industrialio_ptimer_board_info_list);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:UNCOMMENTED_DEFINITION: DEFINE_MUTEX definition without comment
#835: FILE: drivers/industrialio/industrialio_ptimer_board_info.c:21:
+DEFINE_MUTEX(industrialio_ptimer_board_lock);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#838: FILE: drivers/industrialio/industrialio_ptimer_board_info.c:24:
+
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#840: FILE: drivers/industrialio/industrialio_ptimer_board_info.c:26:
+industrialio_register_ptimer(struct ptimer_info const *info, unsigned n)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#862: FILE: drivers/industrialio/industrialio-core.c:1:
+/* The industrial I/O core

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#929: FILE: drivers/industrialio/industrialio-core.c:68:
+ int$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ev)...) over kmalloc(sizeof(struct iio_detected_event_list)...)
#943: FILE: drivers/industrialio/industrialio-core.c:82:
+		ev = kmalloc(sizeof(struct iio_detected_event_list),

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ev"
#945: FILE: drivers/industrialio/industrialio-core.c:84:
+		if (ev == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: braces {} should be used on all arms of this statement
#951: FILE: drivers/industrialio/industrialio-core.c:90:
+		if (shared_pointer_p != NULL) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "shared_pointer_p"
#951: FILE: drivers/industrialio/industrialio-core.c:90:
+		if (shared_pointer_p != NULL) {

CHECK:BRACES: Unbalanced braces around else statement
#954: FILE: drivers/industrialio/industrialio-core.c:93:
+		} else

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#969: FILE: drivers/industrialio/industrialio-core.c:108:
+
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#983: FILE: drivers/industrialio/industrialio-core.c:122:
+int iio_register_interrupt_line(unsigned int irq,
+					 struct iio_dev *dev_info,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dev_info->interrupts[line_number]"
#992: FILE: drivers/industrialio/industrialio-core.c:131:
+	if (dev_info->interrupts[line_number] == NULL) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1005: FILE: drivers/industrialio/industrialio-core.c:144:
+	 * events no-one cares about.*/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1023: FILE: drivers/industrialio/industrialio-core.c:162:
+void iio_unregister_interrupt_line(struct iio_dev *dev_info,
+					    int line_number)

CHECK:BRACES: Unbalanced braces around else statement
#1052: FILE: drivers/industrialio/industrialio-core.c:191:
+	} else

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 23)
#1053: FILE: drivers/industrialio/industrialio-core.c:192:
+		list_for_each_entry(p, &int_info->ev_list.list, list) {
+		       disable_irq_nosync(irq);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1062: FILE: drivers/industrialio/industrialio-core.c:201:
+int iio_add_event_to_list(struct iio_event_handler_list *list,
+				   struct iio_event_handler_list *el)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1081: FILE: drivers/industrialio/industrialio-core.c:220:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!iio_state.fhs[id]"
#1088: FILE: drivers/industrialio/industrialio-core.c:227:
+		if (iio_state.fhs[id] == NULL)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1109: FILE: drivers/industrialio/industrialio-core.c:248:
+ * lifted directly from input subsystem */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1117: FILE: drivers/industrialio/industrialio-core.c:256:
+	 * chrdevs */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_fops"
#1127: FILE: drivers/industrialio/industrialio-core.c:266:
+	if (new_fops == NULL) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1145: FILE: drivers/industrialio/industrialio-core.c:284:
+	 * specific stuff */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1158: FILE: drivers/industrialio/industrialio-core.c:297:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1161: FILE: drivers/industrialio/industrialio-core.c:300:
+ * switching function above */

WARNING:TYPO_SPELLING: 'noone' may be misspelled - perhaps 'no one'?
#1189: FILE: drivers/industrialio/industrialio-core.c:328:
+		/* Single access device so noone else can get the data */
 		                           ^^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around el->ev
#1197: FILE: drivers/industrialio/industrialio-core.c:336:
+	if (copy_to_user(buf, &(el->ev),

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1241: FILE: drivers/industrialio/industrialio-core.c:380:
+}
+static const struct file_operations iio_interrupt_fileops = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1248: FILE: drivers/industrialio/industrialio-core.c:387:
+
+

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1256: FILE: drivers/industrialio/industrialio-core.c:395:
+	struct iio_chrdev_minor_attr *_attr
+		= to_iio_chrdev_minor_attr(attr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1263: FILE: drivers/industrialio/industrialio-core.c:402:
+void __init_iio_chrdev_minor_attr(struct iio_chrdev_minor_attr *minor_attr,
+				const char *name,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#1269: FILE: drivers/industrialio/industrialio-core.c:408:
+	minor_attr->dev_attr.attr.mode = S_IRUGO;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1319: FILE: drivers/industrialio/industrialio-core.c:458:
+	       sizeof(struct iio_handler *)*256,
 	                                   ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1325: FILE: drivers/industrialio/industrialio-core.c:464:
+		printk(KERN_ERR

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1332: FILE: drivers/industrialio/industrialio-core.c:471:
+		printk(KERN_ERR

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1406: FILE: drivers/industrialio/industrialio-core.c:545:
+}
+void iio_device_unregister_id(struct iio_dev *dev_info)

CHECK:BRACES: Unbalanced braces around else statement
#1416: FILE: drivers/industrialio/industrialio-core.c:555:
+	} else

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#1432: FILE: drivers/industrialio/industrialio-core.c:571:
+			 *dev_info->num_interrupt_lines,
 			 ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dev_info->event_interfaces"
#1434: FILE: drivers/industrialio/industrialio-core.c:573:
+	if (dev_info->event_interfaces == NULL) {

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1444: FILE: drivers/industrialio/industrialio-core.c:583:
+	dev_info->interrupts
+		= kzalloc(sizeof(struct iio_interrupt *)

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#1445: FILE: drivers/industrialio/industrialio-core.c:584:
+			  *dev_info->num_interrupt_lines,
 			  ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dev_info->interrupts"
#1447: FILE: drivers/industrialio/industrialio-core.c:586:
+	if (dev_info->interrupts == NULL) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1455: FILE: drivers/industrialio/industrialio-core.c:594:
+	for (i = 0; i < dev_info->num_interrupt_lines; i++) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1457: FILE: drivers/industrialio/industrialio-core.c:596:
+		snprintf(dev_info->event_interfaces[i]._name, 20,
+			"event_line%d_minor", i);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1478: FILE: drivers/industrialio/industrialio-core.c:617:
+	/* May double initialize lists in case of shared handlers,
+	   but other than a slight overhead that isn't a problem */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1478: FILE: drivers/industrialio/industrialio-core.c:617:
+	   but other than a slight overhead that isn't a problem */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dev_info->event_attrs->attrs[j]"
#1481: FILE: drivers/industrialio/industrialio-core.c:620:
+		if (dev_info->event_attrs->attrs[j] == NULL)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1505: FILE: drivers/industrialio/industrialio-core.c:644:
+	int i;
+	if (dev_info->num_interrupt_lines == 0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1509: FILE: drivers/industrialio/industrialio-core.c:648:
+		iio_free_ev_int(&dev_info->event_interfaces[i],
+					 dev_info->dev);

CHECK:BOOL_COMPARISON: Using comparison to false is error prone
#1524: FILE: drivers/industrialio/industrialio-core.c:663:
+		if (ptimer_i->inuse == false) {

Comparisons of A to true and false are better written
as A and !A.

See: https://lore.kernel.org/lkml/1365563834.27174.12.camel@joe-AO722/

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!name"
#1530: FILE: drivers/industrialio/industrialio-core.c:669:
+	if (*name == NULL)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1535: FILE: drivers/industrialio/industrialio-core.c:674:
+}
+int iio_free_ptimer(const char *name)

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1573: FILE: drivers/industrialio/industrialio-core.c:712:
+
+}

WARNING:LINE_SPACING: Missing a blank line after declarations
#1586: FILE: drivers/industrialio/industrialio-core.c:725:
+	int ret;
+	mutex_init(&dev_info->mlock);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1606: FILE: drivers/industrialio/industrialio-core.c:745:
+	if (dev_info->modes & (INDIO_RING_POLLED | INDIO_RING_DATA_RDY)) {
+

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1644: FILE: drivers/industrialio/industrialio-core.c:783:
+
+}

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1652: FILE: drivers/industrialio/industrialio-rtc.c:1:
+/* The industrial I/O core

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1679: FILE: drivers/industrialio/industrialio-rtc.c:28:
+int iio_ptimer_set_freq(struct iio_periodic *ptimer,
+			    unsigned frequency)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1679: FILE: drivers/industrialio/industrialio-rtc.c:28:
+			    unsigned frequency)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1697: FILE: drivers/industrialio/industrialio-rtc.c:46:
+	struct iio_periodic *ptimer = dev_info->ptimer;
+	return sprintf(buf, "%u\n", ptimer->frequency);

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#1710: FILE: drivers/industrialio/industrialio-rtc.c:59:
+	ret = strict_strtoul(buf, 10, &val);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1722: FILE: drivers/industrialio/industrialio-rtc.c:71:
+
+

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1723: FILE: drivers/industrialio/industrialio-rtc.c:72:
+IIO_DEV_ATTR_SAMP_FREQ(S_IRUGO | S_IWUSR,

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*indio_dev->ptimer)...) over kmalloc(sizeof(struct iio_periodic)...)
#1732: FILE: drivers/industrialio/industrialio-rtc.c:81:
+	indio_dev->ptimer = kmalloc(sizeof(struct iio_periodic), GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!indio_dev->ptimer"
#1734: FILE: drivers/industrialio/industrialio-rtc.c:83:
+	if (indio_dev->ptimer == NULL) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1768: FILE: drivers/industrialio/industrialio-rtc.c:117:
+{
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1770: FILE: drivers/industrialio/industrialio-rtc.c:119:
+	sysfs_remove_file_from_group(&indio_dev->dev->kobj,
+				      &iio_dev_attr_sampling_frequency

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1789: FILE: drivers/industrialio/industrialio-ring.c:1:
+/* The industrial I/O core

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1866: FILE: drivers/industrialio/industrialio-ring.c:78:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1869: FILE: drivers/industrialio/industrialio-ring.c:81:
+ * in the device driver */

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1883: FILE: drivers/industrialio/industrialio-ring.c:95:
+		ring->half_p = ring->data - ring->buf.length*ring->buf.size/2;
 		                                            ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1883: FILE: drivers/industrialio/industrialio-ring.c:95:
+		ring->half_p = ring->data - ring->buf.length*ring->buf.size/2;
 		                                                           ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1892: FILE: drivers/industrialio/industrialio-ring.c:104:
+	if (ring->write_p == ring->data + ring->buf.length*ring->buf.size) {
 	                                                  ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1899: FILE: drivers/industrialio/industrialio-ring.c:111:
+	 * ring event */

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1903: FILE: drivers/industrialio/industrialio-ring.c:115:
+		    == ring->data + ring->buf.length*ring->buf.size)
 		                                    ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1909: FILE: drivers/industrialio/industrialio-ring.c:121:
+			/* Event escalation - probably quicker to let this
+			   keep running than check if it is necessary */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1909: FILE: drivers/industrialio/industrialio-ring.c:121:
+			   keep running than check if it is necessary */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1931: FILE: drivers/industrialio/industrialio-ring.c:143:
+	 * simultaneous read */

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1934: FILE: drivers/industrialio/industrialio-ring.c:146:
+	if (ring->half_p == ring->data + ring->buf.length*ring->buf.size)
 	                                                 ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1954: FILE: drivers/industrialio/industrialio-ring.c:166:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1958: FILE: drivers/industrialio/industrialio-ring.c:170:
+ * reading without preventing it from ending up in the ring buffer.
+*/

WARNING:LINE_SPACING: Missing a blank line after declarations
#1964: FILE: drivers/industrialio/industrialio-ring.c:176:
+	unsigned char *last_written_p_copy;
+	iio_mark_sw_ring_buffer_in_use(ring);

WARNING:TYPO_SPELLING: 'unnessecary' may be misspelled - perhaps 'unnecessary'?
#1969: FILE: drivers/industrialio/industrialio-ring.c:181:
+	barrier(); /*unnessecary? */
 	             ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1983: FILE: drivers/industrialio/industrialio-ring.c:195:
+int iio_ring_open(struct inode *inode, struct file *filp)
                                                     ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1993: FILE: drivers/industrialio/industrialio-ring.c:205:
+int iio_ring_release(struct inode *inode, struct file *filp)
                                                        ^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2006: FILE: drivers/industrialio/industrialio-ring.c:218:
+ * less than count*/

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2010: FILE: drivers/industrialio/industrialio-ring.c:222:
+/* Can only occur currently when the ring buffer is marked
+   - from userspace call */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2010: FILE: drivers/industrialio/industrialio-ring.c:222:
+   - from userspace call */

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2011: FILE: drivers/industrialio/industrialio-ring.c:223:
+ssize_t iio_ring_rip(struct file *filp,
                                   ^^^^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2028: FILE: drivers/industrialio/industrialio-ring.c:240:
+	if (bytes_to_rip > ring->buf.size*ring->buf.length)
 	                                 ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2029: FILE: drivers/industrialio/industrialio-ring.c:241:
+		bytes_to_rip = ring->buf.size*ring->buf.length;
 		                             ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!data_cpy"
#2031: FILE: drivers/industrialio/industrialio-ring.c:243:
+	if (data_cpy == NULL) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2047: FILE: drivers/industrialio/industrialio-ring.c:259:
+	while (initial_read_p != ring->read_p
+	      || initial_write_p != ring->write_p) {

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2069: FILE: drivers/industrialio/industrialio-ring.c:281:
+			+ ring->buf.length*ring->buf.size - initial_read_p;
 			                  ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2085: FILE: drivers/industrialio/industrialio-ring.c:297:
+	 * read pointer has been pushed */

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2091: FILE: drivers/industrialio/industrialio-ring.c:303:
+		dead_offset = ring->buf.length*ring->buf.size
 		                              ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2095: FILE: drivers/industrialio/industrialio-ring.c:307:
+	 * the point we were reading to has been passed */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2098: FILE: drivers/industrialio/industrialio-ring.c:310:
+	 * pushed further than we would look. */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!buf->event_minor_name"
#2138: FILE: drivers/industrialio/industrialio-ring.c:350:
+	if (buf->event_minor_name == NULL) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around buf->ev_int
#2143: FILE: drivers/industrialio/industrialio-ring.c:355:
+	ret = iio_setup_ev_int(&(buf->ev_int),

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around buf->ev_int
#2161: FILE: drivers/industrialio/industrialio-ring.c:373:
+	iio_free_ev_int(&(buf->ev_int), dev);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!buf->access_minor_name"
#2175: FILE: drivers/industrialio/industrialio-ring.c:387:
+	if (buf->access_minor_name == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2188: FILE: drivers/industrialio/industrialio-ring.c:400:
+	__init_iio_chrdev_minor_attr(&buf->access_minor_attr,
+				   (const char *)(buf->access_minor_name),

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around buf->access_minor_attr.dev_attr.attr
#2193: FILE: drivers/industrialio/industrialio-ring.c:405:
+				&(buf->access_minor_attr.dev_attr.attr));

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ring)...) over kmalloc(sizeof(struct iio_hw_ring_buffer)...)
#2226: FILE: drivers/industrialio/industrialio-ring.c:438:
+	*ring = kmalloc(sizeof(struct iio_hw_ring_buffer),

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ring"
#2229: FILE: drivers/industrialio/industrialio-ring.c:441:
+	if (*ring == NULL) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ring->buf
#2266: FILE: drivers/industrialio/industrialio-ring.c:478:
+	__iio_free_ring_buffer_access_chrdev(&(ring->buf), dev);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ring->buf
#2267: FILE: drivers/industrialio/industrialio-ring.c:479:
+	__iio_free_ring_buffer_event_chrdev(&(ring->buf), dev);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2272: FILE: drivers/industrialio/industrialio-ring.c:484:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ring->data"
#2293: FILE: drivers/industrialio/industrialio-ring.c:505:
+	if (ring->data == NULL)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*ring)...) over kzalloc(sizeof(struct iio_sw_ring_buffer)...)
#2324: FILE: drivers/industrialio/industrialio-ring.c:536:
+	*ring = kzalloc(sizeof(struct iio_sw_ring_buffer),

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ring"
#2326: FILE: drivers/industrialio/industrialio-ring.c:538:
+	if (*ring == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2364: FILE: drivers/industrialio/industrialio-ring.c:576:
+void iio_free_sw_ring_buffer(struct iio_sw_ring_buffer *ring,
+			  struct device *dev)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ring->buf
#2366: FILE: drivers/industrialio/industrialio-ring.c:578:
+	__iio_free_ring_buffer_access_chrdev(&(ring->buf), dev);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ring->buf
#2367: FILE: drivers/industrialio/industrialio-ring.c:579:
+	__iio_free_ring_buffer_event_chrdev(&(ring->buf), dev);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2374: FILE: drivers/industrialio/industrialio-ring.c:586:
+static ssize_t iio_read_ring_length(struct device *dev,
+					     struct device_attribute *attr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2386: FILE: drivers/industrialio/industrialio-ring.c:598:
+static ssize_t iio_write_ring_length(struct device *dev,
+					      struct device_attribute *attr,

WARNING:LINE_SPACING: Missing a blank line after declarations
#2393: FILE: drivers/industrialio/industrialio-ring.c:605:
+	struct iio_dev *dev_info = dev_get_drvdata(dev);
+	ret = strict_strtol(buf, 10, &val);

WARNING:CONSIDER_KSTRTO: strict_strtol is obsolete, use kstrtol instead
#2393: FILE: drivers/industrialio/industrialio-ring.c:605:
+	ret = strict_strtol(buf, 10, &val);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2408: FILE: drivers/industrialio/industrialio-ring.c:620:
+static ssize_t iio_read_ring_bps(struct device *dev,
+					  struct device_attribute *attr,

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'iio_read_ring_length' to 'length_show' 'iio_write_ring_length' to 'length_store'
#2417: FILE: drivers/industrialio/industrialio-ring.c:629:
+}

The function names used in DEVICE_ATTR is unusual.
Typically, the store and show functions are used with <attr>_store and
<attr>_show, where <attr> is a named attribute variable of the device.

Consider the following examples::

  static DEVICE_ATTR(type, 0444, type_show, NULL);
  static DEVICE_ATTR(power, 0644, power_show, power_store);

The function names should preferably follow the above pattern.

See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device.html#attributes

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2419: FILE: drivers/industrialio/industrialio-ring.c:631:
+
+

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#2420: FILE: drivers/industrialio/industrialio-ring.c:632:
+DEVICE_ATTR(length, S_IRUGO | S_IWUSR,

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'iio_read_ring_bps' to 'bps_show'
#2426: FILE: drivers/industrialio/industrialio-ring.c:638:
+DEVICE_ATTR(bps, S_IRUGO,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#2426: FILE: drivers/industrialio/industrialio-ring.c:638:
+DEVICE_ATTR(bps, S_IRUGO,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#2443: FILE: drivers/industrialio/industrialio-ring.c:655:
+			 ? 1: 0;
 			    ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#2456: FILE: drivers/industrialio/industrialio-ring.c:668:
+		if (dev_info->modes & INDIO_RING_DATA_RDY)
[...]
+		else if (dev_info->modes & INDIO_RING_POLLED)
[...]
+		else { /* should never be reached */
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2460: FILE: drivers/industrialio/industrialio-ring.c:672:
+		else { /* should never be reached */

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2496: FILE: drivers/industrialio/industrialio-ring.c:708:
+{
+

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'iio_show_ring_enable' to 'sw_ring_enable_show' 'iio_store_ring_enable' to 'sw_ring_enable_store'
#2506: FILE: drivers/industrialio/industrialio-ring.c:718:
+}

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#2508: FILE: drivers/industrialio/industrialio-ring.c:720:
+DEVICE_ATTR(sw_ring_enable, S_IRUGO | S_IWUSR,

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2558: FILE: drivers/industrialio/industrialio-ring.c:770:
+
+}

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000250541.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 108 warnings, 115 checks, 2441 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000250541.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
