WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#40: 
   git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip.git generic-ipi-for-linus

WARNING:BRACES: braces {} are not necessary for single statement blocks
#500: FILE: arch/alpha/kernel/smp.c:676:
+	if (on_each_cpu(ipi_flush_tlb_all, NULL, 1)) {
 		printk(KERN_CRIT "flush_tlb_all: timed out\n");
 	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#509: FILE: arch/alpha/kernel/smp.c:713:
+	if (smp_call_function(ipi_flush_tlb_mm, mm, 1)) {
 		printk(KERN_CRIT "flush_tlb_mm: timed out\n");
 	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#518: FILE: arch/alpha/kernel/smp.c:766:
+	if (smp_call_function(ipi_flush_tlb_page, &data, 1)) {
 		printk(KERN_CRIT "flush_tlb_page: timed out\n");
 	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#527: FILE: arch/alpha/kernel/smp.c:818:
+	if (smp_call_function(ipi_flush_icache_page, mm, 1)) {
 		printk(KERN_CRIT "flush_icache_page: timed out\n");
 	}

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#929: FILE: arch/ia64/kernel/palinfo.c:924:
+	if ((ret=smp_call_function_single(f->req_cpu, palinfo_smp_call, &ptr, 1))) {
 	        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#929: FILE: arch/ia64/kernel/palinfo.c:924:
+	if ((ret=smp_call_function_single(f->req_cpu, palinfo_smp_call, &ptr, 1))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1076: FILE: arch/ia64/kernel/smp.c:139:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1572: FILE: arch/m32r/kernel/traps.c:43:
+extern void smp_call_function_single_interrupt(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:SPACING: No space is necessary after a cast
#1606: FILE: arch/mips/kernel/irq-rm9000.c:52:
+	on_each_cpu(local_rm9k_perfcounter_irq_startup, (void *) irq, 1);

CHECK:SPACING: No space is necessary after a cast
#1615: FILE: arch/mips/kernel/irq-rm9000.c:69:
+	on_each_cpu(local_rm9k_perfcounter_irq_shutdown, (void *) irq, 1);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1840: FILE: arch/mips/mm/c-r4k.c:46:
+                                   int wait)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1840: FILE: arch/mips/mm/c-r4k.c:46:
+                                   int wait)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1891: FILE: arch/mips/mm/c-r4k.c:538:
+^I^I^I        1);$

CHECK:SPACING: No space is necessary after a cast
#1909: FILE: arch/mips/mm/c-r4k.c:675:
+	r4k_on_each_cpu(local_r4k_flush_cache_sigtramp, (void *) addr, 1);

WARNING:UNNECESSARY_KERN_LEVEL: Possible unnecessary KERN_DEBUG
#2105: FILE: arch/parisc/kernel/smp.c:186:
+				smp_debug(100, KERN_DEBUG "CPU%d IPI_CALL_FUNC_SINGLE\n", this_cpu);

WARNING:TYPO_SPELLING: 'parms' may be misspelled - perhaps 'params'?
#2835: FILE: arch/s390/kernel/smp.c:350:
+	on_each_cpu(smp_ctl_bit_callback, &parms, 1);
 	                                   ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'parms' may be misspelled - perhaps 'params'?
#2844: FILE: arch/s390/kernel/smp.c:364:
+	on_each_cpu(smp_ctl_bit_callback, &parms, 1);
 	                                   ^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3131: FILE: arch/x86/kernel/apic_32.c:1346:
+	set_intr_gate(CALL_FUNCTION_SINGLE_VECTOR,
+				call_function_single_interrupt);

CHECK:SPACING: No space is necessary after a cast
#3921: FILE: arch/x86/mm/pageattr.c:144:
+	on_each_cpu(__cpa_flush_all, (void *) cache, 1);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#4062: FILE: arch/x86/xen/smp.c:122:
+				    IRQF_DISABLED|IRQF_PERCPU|IRQF_NOBALANCING,
 				                 ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#4062: FILE: arch/x86/xen/smp.c:122:
+				    IRQF_DISABLED|IRQF_PERCPU|IRQF_NOBALANCING,
 				                             ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4357: FILE: include/asm-alpha/smp.h:50:
+extern void arch_send_call_function_single_ipi(int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4358: FILE: include/asm-alpha/smp.h:51:
+extern void arch_send_call_function_ipi(cpumask_t mask);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#4364: FILE: include/asm-alpha/smp.h:56:
+#define smp_call_function_on_cpu(func,info,wait,cpu)    ({ 0; })
                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#4364: FILE: include/asm-alpha/smp.h:56:
+#define smp_call_function_on_cpu(func,info,wait,cpu)    ({ 0; })
                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#4364: FILE: include/asm-alpha/smp.h:56:
+#define smp_call_function_on_cpu(func,info,wait,cpu)    ({ 0; })
                                                ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4376: FILE: include/asm-arm/smp.h:104:
+extern void arch_send_call_function_single_ipi(int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4377: FILE: include/asm-arm/smp.h:105:
+extern void arch_send_call_function_ipi(cpumask_t mask);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4405: FILE: include/asm-ia64/smp.h:127:
+extern void arch_send_call_function_single_ipi(int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4406: FILE: include/asm-ia64/smp.h:128:
+extern void arch_send_call_function_ipi(cpumask_t mask);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4419: FILE: include/asm-m32r/smp.h:92:
+extern void arch_send_call_function_single_ipi(int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4420: FILE: include/asm-m32r/smp.h:93:
+extern void arch_send_call_function_ipi(cpumask_t mask);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4429: FILE: include/asm-m32r/smp.h:110:
+#define CALL_FUNC_SINGLE_IPI	(M32R_IRQ_IPI6-M32R_IRQ_IPI0)
                             	              ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4458: FILE: include/asm-mips/smp.h:60:
+extern void arch_send_call_function_single_ipi(int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4459: FILE: include/asm-mips/smp.h:61:
+extern void arch_send_call_function_ipi(cpumask_t mask);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4470: FILE: include/asm-parisc/smp.h:33:
+extern void arch_send_call_function_single_ipi(int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4471: FILE: include/asm-parisc/smp.h:34:
+extern void arch_send_call_function_ipi(cpumask_t mask);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4496: FILE: include/asm-powerpc/smp.h:117:
+extern void arch_send_call_function_single_ipi(int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4497: FILE: include/asm-powerpc/smp.h:118:
+extern void arch_send_call_function_ipi(cpumask_t mask);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4531: FILE: include/asm-sh/smp.h:41:
+extern void arch_send_call_function_single_ipi(int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4532: FILE: include/asm-sh/smp.h:42:
+extern void arch_send_call_function_ipi(cpumask_t mask);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4557: FILE: include/asm-x86/hw_irq.h:51:
+extern void call_function_single_interrupt(void);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#4609: FILE: include/asm-x86/mach-default/entry_arch.h:16:
+BUILD_INTERRUPT(call_function_single_interrupt,CALL_FUNCTION_SINGLE_VECTOR)
                                               ^

WARNING:SPACING: Unnecessary space before function pointer arguments
#4732: FILE: include/linux/smp.h:17:
+	void (*func) (void *info);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4748: FILE: include/linux/smp.h:66:
+int smp_call_function_mask(cpumask_t mask, void(*func)(void *info), void *info,
+				int wait);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#4784: FILE: include/linux/smp.h:121:
 }
+#define smp_call_function(func, info, wait) \

ERROR:SPACING: space required after that ',' (ctx:VxV)
#4787: FILE: include/linux/smp.h:123:
+#define on_each_cpu(func,info,wait)		\
                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#4787: FILE: include/linux/smp.h:123:
+#define on_each_cpu(func,info,wait)		\
                              ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'cpuid' may be better as '(cpuid)' to avoid precedence issues
#4796: FILE: include/linux/smp.h:133:
+#define smp_call_function_single(cpuid, func, info, wait) \
 ({ \
 	WARN_ON(cpuid != 0);	\
 	local_irq_disable();	\

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#4901: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#4906: FILE: kernel/smp.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#4920: FILE: kernel/smp.c:15:
+__cacheline_aligned_in_smp DEFINE_SPINLOCK(call_function_lock);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'call_function_lock' should also have an identifier name
#4920: FILE: kernel/smp.c:15:
+__cacheline_aligned_in_smp DEFINE_SPINLOCK(call_function_lock);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#4929: FILE: kernel/smp.c:24:
+	spinlock_t lock;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#4937: FILE: kernel/smp.c:32:
+	spinlock_t lock;

CHECK:BRACES: braces {} should be used on all arms of this statement
#5033: FILE: kernel/smp.c:128:
+		if (data->csd.flags & CSD_FLAG_WAIT) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#5040: FILE: kernel/smp.c:135:
+		} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5073: FILE: kernel/smp.c:168:
+			data = list_entry(list.next, struct call_single_data,
+						list);

CHECK:BRACES: braces {} should be used on all arms of this statement
#5086: FILE: kernel/smp.c:181:
+			if (data_flags & CSD_FLAG_WAIT) {
[...]
+			} else if (data_flags & CSD_FLAG_ALLOC)
[...]

WARNING:MEMORY_BARRIER: memory barrier without comment
#5087: FILE: kernel/smp.c:182:
+				smp_wmb();

WARNING:TYPO_SPELLING: 'targetted' may be misspelled - perhaps 'targeted'?
#5202: FILE: kernel/smp.c:297:
+	 * into a targetted single call instead since it's faster.
 	          ^^^^^^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#5204: FILE: kernel/smp.c:299:
+	if (!num_cpus)
[...]
+	else if (num_cpus == 1) {
[...]

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000254207.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 10 errors, 17 warnings, 36 checks, 4440 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000254207.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
