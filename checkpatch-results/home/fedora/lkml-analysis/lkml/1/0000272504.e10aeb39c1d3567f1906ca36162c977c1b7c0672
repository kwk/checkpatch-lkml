WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#95: FILE: arch/x86/kernel/tlb_64.c:167:
+	if (is_uv_system() && uv_flush_tlb_others(&cpumask, mm, va))
+			return;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#106: FILE: arch/x86/kernel/tlb_uv.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/mmu_context.h> instead of <asm/mmu_context.h>
#119: FILE: arch/x86/kernel/tlb_uv.c:14:
+#include <asm/mmu_context.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:RETURN_VOID: void function return statements are not generally useful
#163: FILE: arch/x86/kernel/tlb_uv.c:58:
+	return;
+}

WARNING:TYPECAST_INT_CONSTANT: Unnecessary typecast of c90 int constant - '(unsigned long)1' could be '1UL'
#181: FILE: arch/x86/kernel/tlb_uv.c:76:
+	this_cpu_mask = (unsigned long)1 << cpu;

WARNING:RETURN_VOID: void function return statements are not generally useful
#203: FILE: arch/x86/kernel/tlb_uv.c:98:
+	return;
+}

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'msg->sending_cpu == sender'
#230: FILE: arch/x86/kernel/tlb_uv.c:125:
+				if ((msg->sending_cpu == sender) &&
+				    (!msg->replied_to)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!msg->replied_to'
#230: FILE: arch/x86/kernel/tlb_uv.c:125:
+				if ((msg->sending_cpu == sender) &&
+				    (!msg->replied_to)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#233: FILE: arch/x86/kernel/tlb_uv.c:128:
+					printk(KERN_DEBUG

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#240: FILE: arch/x86/kernel/tlb_uv.c:135:
+						if (!((long)1 << k & msp->

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

WARNING:TYPECAST_INT_CONSTANT: Unnecessary typecast of c90 int constant - '(long)1' could be '1L'
#240: FILE: arch/x86/kernel/tlb_uv.c:135:
+						if (!((long)1 << k & msp->

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'msp->seen_by.bits'
#241: FILE: arch/x86/kernel/tlb_uv.c:136:
+						if (!((long)1 << k & msp->
+						      seen_by.bits)) {

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#243: FILE: arch/x86/kernel/tlb_uv.c:138:
+							printk("%d ", k);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#246: FILE: arch/x86/kernel/tlb_uv.c:141:
+					printk("\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#303: FILE: arch/x86/kernel/tlb_uv.c:198:
+			BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#308: FILE: arch/x86/kernel/tlb_uv.c:203:
+		/* leave the bits for the remote cpu's in the mask until
+		   success; on failure we fall back to the IPI method */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#308: FILE: arch/x86/kernel/tlb_uv.c:203:
+		   success; on failure we fall back to the IPI method */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '&bau_desc->distribution'
#351: FILE: arch/x86/kernel/tlb_uv.c:246:
+				if (uv_examine_destinations
+				    (&bau_desc->distribution) == 0) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#358: FILE: arch/x86/kernel/tlb_uv.c:253:
+					printk(KERN_DEBUG

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#360: FILE: arch/x86/kernel/tlb_uv.c:255:
+					printk("giving up on cpu %d\n",

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#365: FILE: arch/x86/kernel/tlb_uv.c:260:
+				/* delays can hang up the simulator
+				   udelay(1000);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#374: FILE: arch/x86/kernel/tlb_uv.c:269:
+	/* on success, clear the remote cpu's from the mask so we don't
+	   use the IPI method of shootdown on them */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#374: FILE: arch/x86/kernel/tlb_uv.c:269:
+	   use the IPI method of shootdown on them */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#391: FILE: arch/x86/kernel/tlb_uv.c:286:
+	/* Cause the caller to do an IPI-style TLB shootdown on
+	   the cpu's still in the mask */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#391: FILE: arch/x86/kernel/tlb_uv.c:286:
+	   the cpu's still in the mask */

WARNING:RETURN_VOID: void function return statements are not generally useful
#457: FILE: arch/x86/kernel/tlb_uv.c:352:
+	return;
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#481: FILE: arch/x86/kernel/tlb_uv.c:376:
+	return;
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#519: FILE: arch/x86/kernel/tlb_uv.c:414:
+		seq_printf(file,
+		"# cpu requestor requestee one all sretry dretry ptc_i ");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#521: FILE: arch/x86/kernel/tlb_uv.c:416:
+		seq_printf(file,
+		"sw_ack sflush_us dflush_us sok dnomsg dmult starget\n");

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#555: FILE: arch/x86/kernel/tlb_uv.c:450:
+	if (strict_strtoul(optstr, 10, &newmode) < 0) {

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#556: FILE: arch/x86/kernel/tlb_uv.c:451:
+		printk(KERN_DEBUG "%s is invalid\n", optstr);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#561: FILE: arch/x86/kernel/tlb_uv.c:456:
+		printk(KERN_DEBUG "# cpu:      cpu number\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#562: FILE: arch/x86/kernel/tlb_uv.c:457:
+		printk(KERN_DEBUG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#564: FILE: arch/x86/kernel/tlb_uv.c:459:
+		printk(KERN_DEBUG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#566: FILE: arch/x86/kernel/tlb_uv.c:461:
+		printk(KERN_DEBUG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#568: FILE: arch/x86/kernel/tlb_uv.c:463:
+		printk(KERN_DEBUG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#570: FILE: arch/x86/kernel/tlb_uv.c:465:
+		printk(KERN_DEBUG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#572: FILE: arch/x86/kernel/tlb_uv.c:467:
+		printk(KERN_DEBUG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#574: FILE: arch/x86/kernel/tlb_uv.c:469:
+		printk(KERN_DEBUG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#576: FILE: arch/x86/kernel/tlb_uv.c:471:
+		printk(KERN_DEBUG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#578: FILE: arch/x86/kernel/tlb_uv.c:473:
+		printk(KERN_DEBUG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#580: FILE: arch/x86/kernel/tlb_uv.c:475:
+		printk(KERN_DEBUG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#582: FILE: arch/x86/kernel/tlb_uv.c:477:
+		printk(KERN_DEBUG "sok:        successes on retry\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#583: FILE: arch/x86/kernel/tlb_uv.c:478:
+		printk(KERN_DEBUG "dnomsg:     interrupts with no message\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#584: FILE: arch/x86/kernel/tlb_uv.c:479:
+		printk(KERN_DEBUG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#586: FILE: arch/x86/kernel/tlb_uv.c:481:
+		printk(KERN_DEBUG "starget:    nodes targeted\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#589: FILE: arch/x86/kernel/tlb_uv.c:484:
+		printk(KERN_DEBUG "timeout retry limit:%d\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#635: FILE: arch/x86/kernel/tlb_uv.c:530:
+		printk(KERN_ERR "unable to create %s proc entry\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#685: FILE: arch/x86/kernel/tlb_uv.c:580:
+		printk(KERN_ERR

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'uv_bau_init', this function's name, in a string
#686: FILE: arch/x86/kernel/tlb_uv.c:581:
+			"uv_bau_init: bau_local_cpumask.bits too small\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#687: FILE: arch/x86/kernel/tlb_uv.c:582:
+		BUG();

WARNING:TYPECAST_INT_CONSTANT: Unnecessary typecast of c90 int constant - '(unsigned long)1' could be '1UL'
#691: FILE: arch/x86/kernel/tlb_uv.c:586:
+	uv_mmask = ((unsigned long)1 << uv_hub_info->n_val) - 1;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#705: FILE: arch/x86/kernel/tlb_uv.c:600:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#718: FILE: arch/x86/kernel/tlb_uv.c:613:
+			BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#724: FILE: arch/x86/kernel/tlb_uv.c:619:
+			BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#735: FILE: arch/x86/kernel/tlb_uv.c:630:
+			BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#746: FILE: arch/x86/kernel/tlb_uv.c:641:
+			BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#751: FILE: arch/x86/kernel/tlb_uv.c:646:
+			BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#753: FILE: arch/x86/kernel/tlb_uv.c:648:
+			BUG();

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#775: FILE: arch/x86/kernel/tlb_uv.c:670:
+			/* all others need to be set to zero:
+			   fairness chaining multilevel count replied_to */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#775: FILE: arch/x86/kernel/tlb_uv.c:670:
+			   fairness chaining multilevel count replied_to */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#783: FILE: arch/x86/kernel/tlb_uv.c:678:
+			BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#785: FILE: arch/x86/kernel/tlb_uv.c:680:
+			BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#788: FILE: arch/x86/kernel/tlb_uv.c:683:
+			BUG();

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'bau_tablesp->va_queue_last'
#806: FILE: arch/x86/kernel/tlb_uv.c:701:
+				      uv_physnodeaddr(bau_tablesp->
+						      va_queue_last));

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#811: FILE: arch/x86/kernel/tlb_uv.c:706:
+		/* this initialization can't be in firmware because the
+		   messaging IRQ will be determined by the OS */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#811: FILE: arch/x86/kernel/tlb_uv.c:706:
+		   messaging IRQ will be determined by the OS */

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#841: FILE: arch/x86/kernel/tlb_uv.c:736:
+__initcall(uv_bau_init);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#847: FILE: include/asm-x86/uv/uv_bau.h:1:
+/*

WARNING:TYPO_SPELLING: 'threshholds' may be misspelled - perhaps 'thresholds'?
#905: FILE: include/asm-x86/uv/uv_bau.h:59:
+/* source side threshholds at which message retries print a warning */
                ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#922: FILE: include/asm-x86/uv/uv_bau.h:76:
+ * destination nodeID associated with that specified bit.  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#929: FILE: include/asm-x86/uv/uv_bau.h:83:
+/* (during initialization we need to check that unsigned long has
+    enough bits for max. cpu's per node) */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#929: FILE: include/asm-x86/uv/uv_bau.h:83:
+    enough bits for max. cpu's per node) */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#951: FILE: include/asm-x86/uv/uv_bau.h:105:
+	unsigned long address;		/* signifies a page or all TLB's
+						of the cpu */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#951: FILE: include/asm-x86/uv/uv_bau.h:105:
+						of the cpu */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#960: FILE: include/asm-x86/uv/uv_bau.h:114:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#982: FILE: include/asm-x86/uv/uv_bau.h:136:
+				/* Address field (96:57) is never used as an
+				   address (these are address bits 42:3) */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#982: FILE: include/asm-x86/uv/uv_bau.h:136:
+				   address (these are address bits 42:3) */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1004: FILE: include/asm-x86/uv/uv_bau.h:158:
+				/* INTD trasactions at destination are to
+				   wait for software acknowledge */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1004: FILE: include/asm-x86/uv/uv_bau.h:158:
+				   wait for software acknowledge */

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1030: FILE: include/asm-x86/uv/uv_bau.h:184:
+};
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1054: FILE: include/asm-x86/uv/uv_bau.h:208:
+	unsigned long address;		/* signifies a page or all TLB's
+						of the cpu */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1054: FILE: include/asm-x86/uv/uv_bau.h:208:
+						of the cpu */

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1128: FILE: include/asm-x86/uv/uv_bau.h:282:
+}
+static inline void bau_node_set(int node, struct bau_target_nodemask *dstp)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1132: FILE: include/asm-x86/uv/uv_bau.h:286:
+}
+static inline void bau_nodes_clear(struct bau_target_nodemask *dstp, int nbits)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'cpumask_t *' should also have an identifier name
#1173: FILE: include/asm-x86/uv/uv_bau.h:327:
+int uv_flush_tlb_others(cpumask_t *, struct mm_struct *, unsigned long);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mm_struct *' should also have an identifier name
#1173: FILE: include/asm-x86/uv/uv_bau.h:327:
+int uv_flush_tlb_others(cpumask_t *, struct mm_struct *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1173: FILE: include/asm-x86/uv/uv_bau.h:327:
+int uv_flush_tlb_others(cpumask_t *, struct mm_struct *, unsigned long);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000272504.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 78 warnings, 10 checks, 1102 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000272504.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
