WARNING:TYPO_SPELLING: 'architecure' may be misspelled - perhaps 'architecture'?
#33: 
In addition, architecture capabilities are saved in an architecure
                                                       ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#101: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#106: FILE: arch/x86/include/asm/checkpoint_hdr.h:1:
+#ifndef __ASM_X86_CKPT_HDR_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#127: FILE: arch/x86/include/asm/checkpoint_hdr.h:22:
+ * __attribute__((aligned (8))) for the entire structure.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/processor.h> instead of <asm/processor.h>
#141: FILE: arch/x86/include/asm/checkpoint_hdr.h:36:
+#include <asm/processor.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#162: FILE: arch/x86/include/asm/checkpoint_hdr.h:57:
+} __attribute__((aligned(8)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#169: FILE: arch/x86/include/asm/checkpoint_hdr.h:64:
+} __attribute__((aligned(8)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#218: FILE: arch/x86/include/asm/checkpoint_hdr.h:113:
+} __attribute__((aligned(8)));

WARNING:REPEATED_WORD: Possible repeated word: 'xxxx'
#224: FILE: arch/x86/include/asm/checkpoint_hdr.h:119:
+#define CKPT_X86_SEG_LDT	0x8000	/* 100x xxxx xxxx xxxx */

WARNING:REPEATED_WORD: Possible repeated word: 'xxxx'
#224: FILE: arch/x86/include/asm/checkpoint_hdr.h:119:
+#define CKPT_X86_SEG_LDT	0x8000	/* 100x xxxx xxxx xxxx */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#235: FILE: arch/x86/include/asm/ptrace.h:245:
+extern int ptrace_check_debugreg(int _32bit,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#278: FILE: arch/x86/mm/checkpoint.c:1:
+/*

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#348: FILE: arch/x86/mm/checkpoint.c:71:
+	BUG_ON((seg & 3) != 3);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#359: FILE: arch/x86/mm/checkpoint.c:82:
+	if (GDT_ENTRY_TLS_MIN <= seg && seg <= GDT_ENTRY_TLS_MAX)

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#362: FILE: arch/x86/mm/checkpoint.c:85:
+	printk(KERN_ERR "c/r: (decode) bad segment %#hx\n", seg);

WARNING:UNNECESSARY_MODIFIER: Integer promotion: Using 'h' in '%#hx' is unnecessary
#362: FILE: arch/x86/mm/checkpoint.c:85:
+	printk(KERN_ERR "c/r: (decode) bad segment %#hx\n", seg);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#363: FILE: arch/x86/mm/checkpoint.c:86:
+	BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#383: FILE: arch/x86/mm/checkpoint.c:106:
+	BUG();

WARNING:TYPO_SPELLING: 'TE' may be misspelled - perhaps 'THE'?
#395: FILE: arch/x86/mm/checkpoint.c:118:
+		ckpt_write_err(ctx, "TE", "task in VM86 mode", -EBUSY);
 		                     ^^

WARNING:TYPO_SPELLING: 'TE' may be misspelled - perhaps 'THE'?
#399: FILE: arch/x86/mm/checkpoint.c:122:
+		ckpt_write_err(ctx, "TE", "bad thread info flags %#lx", -EBUSY);
 		                     ^^

WARNING:TYPO_SPELLING: 'subtitute' may be misspelled - perhaps 'substitute'?
#477: FILE: arch/x86/mm/checkpoint.c:200:
+	 * we (optimistically) subtitute the future return value (0) of
 	                       ^^^^^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#482: FILE: arch/x86/mm/checkpoint.c:205:
+		BUG_ON(h->orig_ax < 0);

CHECK:SPACING: No space is necessary after a cast
#635: FILE: arch/x86/mm/checkpoint.c:358:
+	desc = (struct desc_struct *) (h + 1);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#903: FILE: include/linux/checkpoint.h:65:
+extern int checkpoint_write_header_arch(struct ckpt_ctx *ctx);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#904: FILE: include/linux/checkpoint.h:66:
+extern int checkpoint_thread(struct ckpt_ctx *ctx, struct task_struct *t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#905: FILE: include/linux/checkpoint.h:67:
+extern int checkpoint_cpu(struct ckpt_ctx *ctx, struct task_struct *t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#907: FILE: include/linux/checkpoint.h:69:
+extern int restore_read_header_arch(struct ckpt_ctx *ctx);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#908: FILE: include/linux/checkpoint.h:70:
+extern int restore_thread(struct ckpt_ctx *ctx);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#909: FILE: include/linux/checkpoint.h:71:
+extern int restore_cpu(struct ckpt_ctx *ctx);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#922: FILE: include/linux/checkpoint_hdr.h:43:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#925: FILE: include/linux/checkpoint_hdr.h:46:
+
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000068273.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 20 warnings, 11 checks, 812 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000068273.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
