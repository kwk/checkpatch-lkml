WARNING:TYPO_SPELLING: 'explicity' may be misspelled - perhaps 'explicitly'?
#136: FILE: Documentation/block/biodoc.txt:1054:
+can do it explicity through blk_unplug(bdev). So in the read case,
           ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#319: FILE: block/as-iosched.c:1101:
+		BUG_ON(RB_EMPTY_ROOT(&ad->sort_list[BLK_RW_SYNC]));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#345: FILE: block/as-iosched.c:1125:
+		BUG_ON(RB_EMPTY_ROOT(&ad->sort_list[BLK_RW_ASYNC]));

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#386: FILE: block/as-iosched.c:1239:
+	return list_empty(&ad->fifo_list[BLK_RW_ASYNC])
+		&& list_empty(&ad->fifo_list[BLK_RW_SYNC]);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#396: FILE: block/as-iosched.c:1346:
+	BUG_ON(!list_empty(&ad->fifo_list[BLK_RW_SYNC]));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#397: FILE: block/as-iosched.c:1347:
+	BUG_ON(!list_empty(&ad->fifo_list[BLK_RW_ASYNC]));

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#436: FILE: block/as-iosched.c:1432:
 }
+SHOW_FUNCTION(as_read_expire_show, ad->fifo_expire[BLK_RW_SYNC]);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#452: FILE: block/as-iosched.c:1451:
 }
+STORE_FUNCTION(as_read_expire_store, &ad->fifo_expire[BLK_RW_SYNC], 0, INT_MAX);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#454: FILE: block/as-iosched.c:1453:
+STORE_FUNCTION(as_write_expire_store,
+			&ad->fifo_expire[BLK_RW_ASYNC], 0, INT_MAX);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#655: FILE: block/cfq-iosched.c:610:
+	__cfqq = cfq_prio_tree_lookup(cfqd, cfqq->ioprio, cfqq->next_rq->sector,
+					 &parent, &p);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#656: FILE: block/cfq-iosched.c:611:
+	BUG_ON(__cfqq);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#781: FILE: block/cfq-iosched.c:1005:
+ * ^I      closely cooperating with itself.$

WARNING:REPEATED_WORD: Possible repeated word: 'that'
#783: FILE: block/cfq-iosched.c:1007:
+ * So, basically we're assuming that that cur_cfqq has dispatched at least

CHECK:LINE_SPACING: Please don't use multiple blank lines
#819: FILE: block/cfq-iosched.c:1042:
 
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#912: FILE: block/cfq-iosched.c:1617:
+		new_cfqq = cfq_get_queue(cfqd, BLK_RW_ASYNC, cic->ioc,
+						GFP_ATOMIC);

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#1109: 
deleted file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

CHECK:BRACES: braces {} should be used on all arms of this statement
#1551: FILE: fs/ocfs2/file.c:1963:
+		if (ret < 0)
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1553: FILE: fs/ocfs2/file.c:1965:
+		else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1593: FILE: fs/ocfs2/file.c:1998:
+				err = generic_osync_inode(inode, mapping,
+						  OSYNC_METADATA|OSYNC_DATA);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1593: FILE: fs/ocfs2/file.c:1998:
+						  OSYNC_METADATA|OSYNC_DATA);
 						                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1639: FILE: fs/pipe.c:65:
+	BUG_ON(pipe1 == pipe2);

WARNING:MEMORY_BARRIER: memory barrier without comment
#1697: FILE: fs/splice.c:250:
+		smp_mb();

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#1698: FILE: fs/splice.c:251:
+		if (waitqueue_active(&pipe->wait))

WARNING:MEMORY_BARRIER: memory barrier without comment
#1723: FILE: fs/splice.c:604:
+	smp_mb();

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#1724: FILE: fs/splice.c:605:
+	if (waitqueue_active(&pipe->wait))

WARNING:TYPO_SPELLING: 'managment' may be misspelled - perhaps 'management'?
#2217: FILE: include/linux/bio.h:508:
+ * BIO list managment for use by remapping drivers (e.g. DM or MD).
             ^^^^^^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bl->head"
#2230: FILE: include/linux/bio.h:521:
+	return bl->head == NULL;

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2235: FILE: include/linux/bio.h:526:
+	bl->head = bl->tail = NULL;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bio' - possible side-effects?
#2238: FILE: include/linux/bio.h:529:
+#define bio_list_for_each(bio, bl) \
+	for (bio = (bl)->head; bio; bio = bio->bi_next)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2241: FILE: include/linux/bio.h:532:
+static inline unsigned bio_list_size(const struct bio_list *bl)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2243: FILE: include/linux/bio.h:534:
+	unsigned sz = 0;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2320: FILE: include/linux/bio.h:611:
+	bl->head = bl->tail = NULL;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pipe_inode_info *' should also have an identifier name
#2433: FILE: include/linux/pipe_fs_i.h:138:
+void pipe_lock(struct pipe_inode_info *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pipe_inode_info *' should also have an identifier name
#2434: FILE: include/linux/pipe_fs_i.h:139:
+void pipe_unlock(struct pipe_inode_info *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pipe_inode_info *' should also have an identifier name
#2435: FILE: include/linux/pipe_fs_i.h:140:
+void pipe_double_lock(struct pipe_inode_info *, struct pipe_inode_info *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pipe_inode_info *' should also have an identifier name
#2435: FILE: include/linux/pipe_fs_i.h:140:
+void pipe_double_lock(struct pipe_inode_info *, struct pipe_inode_info *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2457: FILE: include/linux/splice.h:71:
+extern int splice_from_pipe_feed(struct pipe_inode_info *, struct splice_desc *,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pipe_inode_info *' should also have an identifier name
#2457: FILE: include/linux/splice.h:71:
+extern int splice_from_pipe_feed(struct pipe_inode_info *, struct splice_desc *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct splice_desc *' should also have an identifier name
#2457: FILE: include/linux/splice.h:71:
+extern int splice_from_pipe_feed(struct pipe_inode_info *, struct splice_desc *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'splice_actor *' should also have an identifier name
#2457: FILE: include/linux/splice.h:71:
+extern int splice_from_pipe_feed(struct pipe_inode_info *, struct splice_desc *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2459: FILE: include/linux/splice.h:73:
+extern int splice_from_pipe_next(struct pipe_inode_info *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pipe_inode_info *' should also have an identifier name
#2459: FILE: include/linux/splice.h:73:
+extern int splice_from_pipe_next(struct pipe_inode_info *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct splice_desc *' should also have an identifier name
#2459: FILE: include/linux/splice.h:73:
+extern int splice_from_pipe_next(struct pipe_inode_info *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2461: FILE: include/linux/splice.h:75:
+extern void splice_from_pipe_begin(struct splice_desc *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct splice_desc *' should also have an identifier name
#2461: FILE: include/linux/splice.h:75:
+extern void splice_from_pipe_begin(struct splice_desc *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2462: FILE: include/linux/splice.h:76:
+extern void splice_from_pipe_end(struct pipe_inode_info *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pipe_inode_info *' should also have an identifier name
#2462: FILE: include/linux/splice.h:76:
+extern void splice_from_pipe_end(struct pipe_inode_info *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct splice_desc *' should also have an identifier name
#2462: FILE: include/linux/splice.h:76:
+extern void splice_from_pipe_end(struct pipe_inode_info *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2464: FILE: include/linux/splice.h:78:
+extern int pipe_to_file(struct pipe_inode_info *, struct pipe_buffer *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pipe_inode_info *' should also have an identifier name
#2464: FILE: include/linux/splice.h:78:
+extern int pipe_to_file(struct pipe_inode_info *, struct pipe_buffer *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pipe_buffer *' should also have an identifier name
#2464: FILE: include/linux/splice.h:78:
+extern int pipe_to_file(struct pipe_inode_info *, struct pipe_buffer *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct splice_desc *' should also have an identifier name
#2464: FILE: include/linux/splice.h:78:
+extern int pipe_to_file(struct pipe_inode_info *, struct pipe_buffer *,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000139088.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 32 warnings, 20 checks, 2016 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000139088.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
