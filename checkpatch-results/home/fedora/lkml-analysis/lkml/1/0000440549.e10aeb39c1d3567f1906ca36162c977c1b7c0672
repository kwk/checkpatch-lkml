CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#76: FILE: mm/shmem.c:410:
+static int shmem_free_swp(swp_entry_t *dir, swp_entry_t *edir,
+						spinlock_t *punch_lock)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#104: FILE: mm/shmem.c:436:
+static int shmem_map_and_free_swp(struct page *subdir, int offset,
+		int limit, struct page ***dir, spinlock_t *punch_lock)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#113: FILE: mm/shmem.c:446:
+		freed += shmem_free_swp(ptr+offset, ptr+offset+size,
 		                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#113: FILE: mm/shmem.c:446:
+		freed += shmem_free_swp(ptr+offset, ptr+offset+size,
 		                                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#113: FILE: mm/shmem.c:446:
+		freed += shmem_free_swp(ptr+offset, ptr+offset+size,
 		                                              ^

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#122: FILE: mm/shmem.c:498:
+	spinlock_t *needs_lock;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#123: FILE: mm/shmem.c:499:
+	spinlock_t *punch_lock;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#148: FILE: mm/shmem.c:541:
+		nr_swaps_freed = shmem_free_swp(ptr+idx, ptr+size, needs_lock);
 		                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#148: FILE: mm/shmem.c:541:
+		nr_swaps_freed = shmem_free_swp(ptr+idx, ptr+size, needs_lock);
 		                                            ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#177: FILE: mm/shmem.c:585:
+				if (needs_lock) {
[...]
+				} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#182: FILE: mm/shmem.c:590:
+				} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#195: FILE: mm/shmem.c:620:
+				if (needs_lock) {
[...]
+				} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#200: FILE: mm/shmem.c:625:
+				} else

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#212: FILE: mm/shmem.c:637:
+		if (subdir && !offset && upper_limit-idx >= ENTRIES_PER_PAGE) {
 		                                    ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#213: FILE: mm/shmem.c:638:
+			if (needs_lock) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#218: FILE: mm/shmem.c:643:
+			} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#234: FILE: mm/shmem.c:657:
+			if (offset || punch_lock) {
[...]
+					page_private(subdir) - freed);
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#239: FILE: mm/shmem.c:660:
+				set_page_private(subdir,
+					page_private(subdir) - freed);

CHECK:BRACES: Unbalanced braces around else statement
#250: FILE: mm/shmem.c:662:
+			} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#251: FILE: mm/shmem.c:663:
+				BUG_ON(page_private(subdir) != freed);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000440549.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 1 warnings, 19 checks, 183 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000440549.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
