WARNING:TYPO_SPELLING: 'mininum' may be misspelled - perhaps 'minimum'?
#58: 
show 3 values: (mininum/average/maximum)
                ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#61: 
alloc_pages                        297542 189.4ms(96ns/637ns/68.7us) 1.2gb(4.1kb/4.2kb/16.4kb)

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#99: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#104: FILE: include/linux/perf.h:1:
+#ifndef __LINUX_PERF_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '__var' may be better as '(__var)' to avoid precedence issues
#152: FILE: include/linux/perf.h:49:
+#define pc_start(__var) do { } while (!__var)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '__var' may be better as '(__var)' to avoid precedence issues
#153: FILE: include/linux/perf.h:50:
+#define pc_bytes(__var, __b, __i) do { } while (!__var)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '__var' may be better as '(__var)' to avoid precedence issues
#154: FILE: include/linux/perf.h:51:
+#define pc_stop_printk(__var) do { } while (!__var)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#198: FILE: kernel/perf.c:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#203: FILE: kernel/perf.c:6:
+ * ^IChristoph Lameter <clameter@sgi.com>$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#244: FILE: kernel/perf.c:47:
+		printk(KERN_CRIT "pc_bytes: item number "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pc_bytes', this function's name, in a string
#244: FILE: kernel/perf.c:47:
+		printk(KERN_CRIT "pc_bytes: item number "

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#245: FILE: kernel/perf.c:48:
+		printk(KERN_CRIT "pc_bytes: item number "
+			"(%d) out of range\n", nr);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#251: FILE: kernel/perf.c:54:
+	if (unlikely(unsynced_get_cycles &&
+			pc->processor != smp_processor_id())) {

WARNING:RETURN_VOID: void function return statements are not generally useful
#277: FILE: kernel/perf.c:80:
+	return;
+}

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#285: FILE: kernel/perf.c:88:
+static void perfcount_reset(void) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#291: FILE: kernel/perf.c:94:
+			reset_perfcount_item(

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#297: FILE: kernel/perf.c:100:
+	const char * s;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#310: FILE: kernel/perf.c:113:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#335: FILE: kernel/perf.c:138:
+	unsigned n = 0;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#336: FILE: kernel/perf.c:139:
+	unsigned rem = 0;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#337: FILE: kernel/perf.c:140:
+	unsigned last_divisor = 0;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#371: FILE: kernel/perf.c:174:
+	unsigned n = 0;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#372: FILE: kernel/perf.c:175:
+	unsigned rem = 0;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#373: FILE: kernel/perf.c:176:
+	unsigned last_divisor = 0;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#398: FILE: kernel/perf.c:201:
+	printk("%lu", x);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#403: FILE: kernel/perf.c:206:
+		printk(x);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#405: FILE: kernel/perf.c:208:
+	printk(u[n].s);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#410: FILE: kernel/perf.c:213:
+static void pc_print(struct seq_file *s, const struct unit *u,
+	unsigned long count, unsigned long sum,

ERROR:SPACING: space required after that ',' (ctx:VxV)
#414: FILE: kernel/perf.c:217:
+	seq_putc(s,'(');
 	          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#416: FILE: kernel/perf.c:219:
+	seq_putc(s,'/');
 	          ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#418: FILE: kernel/perf.c:221:
+		pval(s, (sum + count / 2 ) / count, u);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#421: FILE: kernel/perf.c:224:
+	seq_putc(s,'/');
 	          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#423: FILE: kernel/perf.c:226:
+	seq_putc(s,')');
 	          ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#426: FILE: kernel/perf.c:229:
+
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#433: FILE: kernel/perf.c:236:
+	if (cpu >= 0)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#435: FILE: kernel/perf.c:238:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#437: FILE: kernel/perf.c:240:
+		memcpy(&summary, &per_cpu(perf_counters, 0)[counter],
+			sizeof(summary));

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 40)
#450: FILE: kernel/perf.c:253:
+			if (summary.mintime == 0 ||
[...]
+					summary.mintime = c->mintime;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#451: FILE: kernel/perf.c:254:
+			if (summary.mintime == 0 ||
+				(c->mintime != 0 &&

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 40)
#458: FILE: kernel/perf.c:261:
+			if (summary.minbytes == 0 ||
[...]
+					summary.minbytes = c->minbytes;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#459: FILE: kernel/perf.c:262:
+			if (summary.minbytes == 0 ||
+				(c->minbytes != 0 &&

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#463: FILE: kernel/perf.c:266:
+
+		}

ERROR:SPACING: space required after that ',' (ctx:VxV)
#472: FILE: kernel/perf.c:275:
+		seq_putc(s,' ');
 		          ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#474: FILE: kernel/perf.c:277:
+		pc_print(s, byte_units, x->events, x->bytes,
+			x->minbytes, x->maxbytes);

CHECK:SPACING: spaces preferred around that '+' (ctx:WxV)
#482: FILE: kernel/perf.c:285:
+	return (*pos < NR_PC_ITEMS) ? (void *)(*pos +1) : NULL;
 	                                            ^

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#495: FILE: kernel/perf.c:298:
+struct seq_operations perf_data_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#514: FILE: kernel/perf.c:317:
+static struct file_operations perf_data_fops = {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#522: FILE: kernel/perf.c:325:
+static int perf_reset_write(struct file *file, const char __user *buffer,
+	unsigned long count, void *data)

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#528: FILE: kernel/perf.c:331:
+static __init int init_perfcounter(void) {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#537: FILE: kernel/perf.c:340:
+	perf_reset = create_proc_entry("reset", S_IWUGO, proc_perf);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#540: FILE: kernel/perf.c:343:
+	perf_all = create_proc_entry("all", S_IRUGO, proc_perf);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#549: FILE: kernel/perf.c:352:
+		p = create_proc_entry(name, S_IRUGO, proc_perf);

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#564: FILE: kernel/perf.c:367:
+__initcall(init_perfcounter);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000397723.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 9 errors, 27 warnings, 17 checks, 467 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000397723.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
