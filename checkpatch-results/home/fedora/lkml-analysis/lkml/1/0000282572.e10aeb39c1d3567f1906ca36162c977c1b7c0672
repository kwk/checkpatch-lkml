ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#58: FILE: Documentation/vm/slabinfo.c:85:
+int show_defragcount = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

WARNING:LONG_LINE_STRING: line length of 107 exceeds 100 columns
#75: FILE: Documentation/vm/slabinfo.c:309:
+		printf("Name                   Objects DefragRQ  Slabs Success   Empty Skipped  Failed\n");

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#90: FILE: Documentation/vm/slabinfo.c:478:
+		printf("CPU Slab  : Flushes=%lu Refills=%lu\n",
+			s->cpuslab_flush, s->alloc_refill);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#106: FILE: Documentation/vm/slabinfo.c:493:
+		printf("Shrink    : Calls=%lu Attempts=%lu Empty=%lu Successful=%lu\n",
+			s->shrink_calls, s->shrink_attempt_defrag,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#110: FILE: Documentation/vm/slabinfo.c:497:
+		printf("Defrag    : Slabs skipped=%lu Object reclaim failed=%lu\n",
+		s->shrink_slab_skipped, s->shrink_object_reclaim_failed);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#119: FILE: Documentation/vm/slabinfo.c:614:
+	} else
+	if (show_defragcount)

CHECK:BRACES: Unbalanced braces around else statement
#119: FILE: Documentation/vm/slabinfo.c:614:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#122: FILE: Documentation/vm/slabinfo.c:617:
+		printf("%-21s %8ld %7d %7d %7d %7d %7d %7d\n",
+			s->name, s->objects, s->shrink_calls, s->shrink_attempt_defrag,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#156: FILE: Documentation/vm/slabinfo.c:1329:
+	while ((c = getopt_long(argc, argv, "aACd::DefFGhil1noprstvzTS",
 						opts, NULL)) != -1)

CHECK:CAMELCASE: Avoid CamelCase: <SlabKickable>
#203: FILE: mm/slub.c:2862:
+	if (!page->inuse || !s->kick || !SlabKickable(page)) {

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:BRACES: braces {} should be used on all arms of this statement
#217: FILE: mm/slub.c:2904:
+	if (leftover) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#221: FILE: mm/slub.c:2908:
+	} else

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000282572.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 2 warnings, 9 checks, 212 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000282572.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
