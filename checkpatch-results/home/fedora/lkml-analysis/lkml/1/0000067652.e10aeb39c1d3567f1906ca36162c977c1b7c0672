WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#27: 
Base jump label patch which creates macros for jump patching. This feature is

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#43: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#48: FILE: arch/x86/include/asm/jump_label.h:1:
+#ifndef _ASM_X86_JUMP_LABEL_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("__jump_strings") over __attribute__((section("__jump_strings")))
#62: FILE: arch/x86/include/asm/jump_label.h:15:
+		__used __attribute__((section("__jump_strings")))  = #tag; \

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#63: FILE: arch/x86/include/asm/jump_label.h:16:
+		asm goto ("1:"						   \

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#64: FILE: arch/x86/include/asm/jump_label.h:17:
+			"jmp %l[" #label "] \n\t"		           \

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#65: FILE: arch/x86/include/asm/jump_label.h:18:
+			".pushsection __jump_table,  \"a\" \n\t"	   \

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#66: FILE: arch/x86/include/asm/jump_label.h:19:
+			_ASM_PTR "1b, %l[" #label "], %c0, 0 \n\t"	   \

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#67: FILE: arch/x86/include/asm/jump_label.h:20:
+			".popsection \n\t"				   \

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#94: FILE: arch/x86/kernel/jump_label.c:1:
+#include <linux/jump_label.h>

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#102: FILE: arch/x86/kernel/jump_label.c:9:
+extern struct jump_entry __stop___jump_table[];

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:UNCOMMENTED_DEFINITION: DEFINE_MUTEX definition without comment
#104: FILE: arch/x86/kernel/jump_label.c:11:
+DEFINE_MUTEX(jump_label_mutex);

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#111: FILE: arch/x86/kernel/jump_label.c:18:
+	} __attribute__((packed));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#123: FILE: arch/x86/kernel/jump_label.c:30:
+			BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#130: FILE: arch/x86/kernel/jump_label.c:37:
+			BUG();

WARNING:BRACES: braces {} are not necessary for single statement blocks
#149: FILE: arch/x86/kernel/jump_label.c:56:
+			if ((jump_length > 127 || jump_length < -128)) {
+				BUG();
+			}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#150: FILE: arch/x86/kernel/jump_label.c:57:
+				BUG();

WARNING:BRACES: braces {} are not necessary for single statement blocks
#155: FILE: arch/x86/kernel/jump_label.c:62:
+			if ((jump_length > INT_MAX || jump_length < INT_MIN)) {
+				BUG();
+			}

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#156: FILE: arch/x86/kernel/jump_label.c:63:
+				BUG();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#172: FILE: arch/x86/kernel/jump_label.c:79:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#177: FILE: arch/x86/kernel/jump_label.c:84:
+			if (!(system_state == SYSTEM_RUNNING &&
+					(init_kernel_text(iter->code))))

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#194: FILE: include/asm-generic/vmlinux.lds.h:216:
+		*(__jump_strings)/* Jump: strings */	\
 		^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#228: FILE: include/linux/jump_label.h:1:
+#ifndef _LINUX_JUMP_LABEL_H

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#253: FILE: include/linux/jump_label.h:26:
+extern int jump_label_update(const char *name, enum jump_label_type type);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#255: FILE: include/linux/jump_label.h:28:
+#define enable_jump_label(name) \
+	jump_label_update(name, JUMP_LABEL_ENABLE);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#258: FILE: include/linux/jump_label.h:31:
+#define disable_jump_label(name) \
+	jump_label_update(name, JUMP_LABEL_DISABLE);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#263: FILE: include/linux/jump_label.h:36:
+#define JUMP_LABEL(tag, label, cond)		\
+	if (likely(!cond))			\
+		goto label;

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'cond' may be better as '(cond)' to avoid precedence issues
#263: FILE: include/linux/jump_label.h:36:
+#define JUMP_LABEL(tag, label, cond)		\
+	if (likely(!cond))			\
+		goto label;

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#263: FILE: include/linux/jump_label.h:36:
+#define JUMP_LABEL(tag, label, cond)		\
+	if (likely(!cond))			\
+		goto label;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#263: FILE: include/linux/jump_label.h:36:
+#define JUMP_LABEL(tag, label, cond)		\
+	if (likely(!cond))			\
+		goto label;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000067652.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 23 warnings, 5 checks, 209 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000067652.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
