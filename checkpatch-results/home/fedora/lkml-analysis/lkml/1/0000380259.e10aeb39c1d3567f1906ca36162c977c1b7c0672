WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#26: 
struct kvm_vcpu has vmx-specific members; remove them to a private structure.

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#210: FILE: drivers/kvm/svm.c:54:
+	return (struct vcpu_svm*)vcpu->_priv;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#286: FILE: drivers/kvm/svm.c:251:
+	vcpu->rip = svm->vmcb->save.rip = svm->next_rip;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:SIZEOF_PARENTHESIS: sizeof *svm should be sizeof(*svm)
#302: FILE: drivers/kvm/svm.c:586:
+	svm = kzalloc(sizeof *svm, GFP_KERNEL);

WARNING:LINE_SPACING: Missing a blank line after declarations
#404: FILE: drivers/kvm/svm.c:680:
+	struct vcpu_svm *svm = to_svm(vcpu);
+	svm->vmcb->save.rax = vcpu->regs[VCPU_REGS_RAX];

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited before semicolon
#447: FILE: drivers/kvm/svm.c:760:
+	svm->vmcb->save.idtr.base = dt->base ;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited before semicolon
#467: FILE: drivers/kvm/svm.c:776:
+	svm->vmcb->save.gdtr.base = dt->base ;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#509: FILE: drivers/kvm/svm.c:814:
+       to_svm(vcpu)->vmcb->save.cr4 = cr4 | X86_CR4_PAE;$

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#526: FILE: drivers/kvm/svm.c:840:
+		svm->vmcb->save.cpl
+			= (svm->vmcb->save.cs.attrib

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#982: FILE: drivers/kvm/svm.c:1403:
+		       __FUNCTION__, svm->vmcb->control.exit_int_info,

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1138: FILE: drivers/kvm/svm.c:1730:
 		kvm_run->fail_entry.hardware_entry_failure_reason
+			= svm->vmcb->control.exit_code;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1166: FILE: drivers/kvm/svm.c:1776:
+	uint32_t exit_int_info = svm->vmcb->control.exit_int_info;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1178: FILE: drivers/kvm/svm.c:1783:
+^I^Isvm->vmcb->control.event_inj = ^ISVM_EVTINJ_VALID |$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1192: FILE: drivers/kvm/svm.c:1791:
+^Isvm->vmcb->control.event_inj = ^ISVM_EVTINJ_VALID |$

ERROR:SPACING: space required after that close brace '}'
#1230: FILE: drivers/kvm/vmx.c:57:
+	}host_state;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1236: FILE: drivers/kvm/vmx.c:63:
+	return (struct vcpu_vmx*)vcpu->_priv;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1275: FILE: drivers/kvm/vmx.c:148:
+	int efer_offset = vmx->msr_offset_efer;
+	return msr_efer_save_restore_bits(vmx->host_msrs[efer_offset]) !=

CHECK:BRACES: braces {} should be used on all arms of this statement
#1373: FILE: drivers/kvm/vmx.c:364:
+	if (!(vmx->host_state.fs_sel & 7))
[...]
 	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#1384: FILE: drivers/kvm/vmx.c:371:
+	if (!(vmx->host_state.gs_sel & 7))
[...]
 	else {
[...]

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#1702: FILE: drivers/kvm/vmx.c:2337:
+	if (vmx->host_msrs)
+		kfree(vmx->host_msrs);

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#1705: FILE: drivers/kvm/vmx.c:2340:
+	if (vmx->guest_msrs)
+		kfree(vmx->guest_msrs);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000380259.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 12 warnings, 6 checks, 1575 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000380259.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
