WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#35: 
Add text_poke_early and text_set_early, for alternatives and paravirt boot-time

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#79: FILE: arch/i386/kernel/alternative.c:40:
+void * text_poke_early(void *addr, const void *opcode,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#80: FILE: arch/i386/kernel/alternative.c:41:
+void * text_poke_early(void *addr, const void *opcode,
+					size_t len)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#87: FILE: arch/i386/kernel/alternative.c:48:
+void * text_set_early(void *addr, int c, size_t len)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#148: FILE: arch/i386/kernel/alternative.c:234:
+	BUG_ON(len > sizeof(long));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#149: FILE: arch/i386/kernel/alternative.c:235:
+	BUG_ON((((long)insns + len - 1) | ~(sizeof(long) - 1))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#154: FILE: arch/i386/kernel/alternative.c:240:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#244: FILE: include/asm-i386/alternative.h:170:
+extern void *text_poke(void *addr, const void *opcode, size_t len);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#245: FILE: include/asm-i386/alternative.h:171:
+extern void *text_set(void *addr, int c, size_t len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#246: FILE: include/asm-i386/alternative.h:172:
+extern void *text_poke_early(void *addr, const void *opcode, size_t len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#247: FILE: include/asm-i386/alternative.h:173:
+extern void *text_set_early(void *addr, int c, size_t len);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cr0' - possible side-effects?
#249: FILE: include/asm-i386/alternative.h:175:
+#define kernel_wp_save(cr0)					\
+	do {							\
+		typecheck(unsigned long, cr0);			\
+		preempt_disable();				\
+		cr0 = read_cr0();				\
+		if (cpu_data[smp_processor_id()].wp_works_ok)	\
+			write_cr0(cr0 & ~X86_CR0_WP);		\
+	} while (0)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#301: FILE: include/asm-x86_64/alternative.h:175:
+extern void *text_poke(void *addr, const void *opcode, size_t len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#302: FILE: include/asm-x86_64/alternative.h:176:
+extern void *text_set(void *addr, int c, size_t len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#303: FILE: include/asm-x86_64/alternative.h:177:
+extern void *text_poke_early(void *addr, const void *opcode, size_t len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#304: FILE: include/asm-x86_64/alternative.h:178:
+extern void *text_set_early(void *addr, int c, size_t len);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cr0' - possible side-effects?
#306: FILE: include/asm-x86_64/alternative.h:180:
+#define kernel_wp_save(cr0)					\
+	do {							\
+		typecheck(unsigned long, cr0);			\
+		preempt_disable();				\
+		cr0 = read_cr0();				\
+		write_cr0(cr0 & ~X86_CR0_WP);			\
+	} while (0)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000388947.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 3 warnings, 12 checks, 257 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000388947.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
