WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#124: FILE: kernel/container.c:99:
+	 * NUL-terminated string */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#136: FILE: kernel/container.c:130:
+	 * but no longer (only if CONT_NOTIFY_ON_RELEASE is set) */

WARNING:LINE_SPACING: Missing a blank line after declarations
#199: FILE: kernel/container.c:238:
+	struct css_group *cg = container_of(k, struct css_group, ref);
+	BUG_ON(!mutex_is_locked(&container_mutex));

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#199: FILE: kernel/container.c:238:
+	BUG_ON(!mutex_is_locked(&container_mutex));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LINE_SPACING: Missing a blank line after declarations
#205: FILE: kernel/container.c:243:
+		struct container *cont = cg->subsys[i]->container;
+		if (atomic_dec_and_test(&cont->count) &&

WARNING:LINE_SPACING: Missing a blank line after declarations
#222: FILE: kernel/container.c:260:
+	struct css_group *cg = container_of(k, struct css_group, ref);
+	unlink_css_group(cg);

WARNING:LINE_SPACING: Missing a blank line after declarations
#225: FILE: kernel/container.c:263:
+		struct container *cont = cg->subsys[i]->container;
+		if (notify_on_release(cont)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#228: FILE: kernel/container.c:266:
+			if (atomic_dec_and_test(&cont->count)) {
+				check_for_release(cont);
+			}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#300: FILE: kernel/container.c:1228:
+		if (simple_strtoul(buffer, NULL, 10) != 0)

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:LINE_SPACING: Missing a blank line after declarations
#308: FILE: kernel/container.c:1236:
+		struct containerfs_root *root = cont->root;
+		if (nbytes < sizeof(root->release_agent_path)) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#312: FILE: kernel/container.c:1240:
+			 * string */

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#338: FILE: kernel/container.c:1297:
+	if (!(page = (char *)__get_free_page(GFP_KERNEL)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#348: FILE: kernel/container.c:1307:
+		size_t n;
+		mutex_lock(&container_mutex);

CHECK:SPACING: No space is necessary after a cast
#352: FILE: kernel/container.c:1311:
+		n = min(n, (size_t) PAGE_SIZE);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:MINMAX: min() should probably be min_t(size_t, n, PAGE_SIZE)
#352: FILE: kernel/container.c:1311:
+		n = min(n, (size_t) PAGE_SIZE);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#436: FILE: kernel/container.c:1761:
+	if ((err = container_add_files(cont, files, ARRAY_SIZE(files)) < 0))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#440: FILE: kernel/container.c:1765:
+		if ((err = container_add_file(cont, &cft_release_agent)) < 0)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#465: FILE: kernel/container.c:1885:
+	 * destroy */

WARNING:LINE_SPACING: Missing a blank line after declarations
#467: FILE: kernel/container.c:1887:
+	struct container_subsys *ss;
+	for_each_subsys(cont->root, ss) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#469: FILE: kernel/container.c:1889:
+		struct container_subsys_state *css;
+		css = cont->subsys[ss->subsys_id];

WARNING:BRACES: braces {} are not necessary for single statement blocks
#470: FILE: kernel/container.c:1890:
+		if (atomic_read(&css->refcnt)) {
+			return 1;
+		}

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#549: FILE: kernel/container.c:2437:
+	BUG_ON(!mutex_is_locked(&container_mutex));

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#551: FILE: kernel/container.c:2439:
+	if (container_is_releasable(cont) && !atomic_read(&cont->count)
+	    && list_empty(&cont->children) && !container_has_css_refs(cont)) {

WARNING:TYPO_SPELLING: 'removeable' may be misspelled - perhaps 'removable'?
#552: FILE: kernel/container.c:2440:
+		/* Container is currently removeable. If it's not
 		                          ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#554: FILE: kernel/container.c:2442:
+		 * it now */

WARNING:LINE_SPACING: Missing a blank line after declarations
#565: FILE: kernel/container.c:2453:
+	struct container *cont = css->container;
+	if (notify_on_release(cont)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#568: FILE: kernel/container.c:2456:
+		if (atomic_dec_and_test(&css->refcnt)) {
+			check_for_release(cont);
+		}

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#612: FILE: kernel/container.c:2500:
+	BUG_ON(work != &release_agent_work);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#645: FILE: kernel/container.c:2533:
+		 * be a slow process */

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#662: FILE: kernel/cpuset.c:279:
+			container_set_release_agent_path(

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000425457.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 24 warnings, 3 checks, 566 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000425457.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
