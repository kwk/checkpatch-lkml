WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#35: 
Gitweb:     http://git.kernel.org/tip/afe61f677866ffc484e69c4ecca2d316d564d78b

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#78: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#83: FILE: tools/perf/util/debugfs.c:1:
+#include "util.h"

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#88: FILE: tools/perf/util/debugfs.c:6:
+static char debugfs_mountpoint[MAX_PATH+1];
                                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:STATIC_CONST_CHAR_ARRAY: static const char * array should probably be static const char * const
#90: FILE: tools/perf/util/debugfs.c:8:
+static const char *debugfs_known_mountpoints[] = {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#116: FILE: tools/perf/util/debugfs.c:34:
+		return len+1;
 		          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#118: FILE: tools/perf/util/debugfs.c:36:
+	snprintf(buffer, size-1, "%s/%s", debugfs_mountpoint, element);
 	                     ^

CHECK:SPACING: No space is necessary after a cast
#132: FILE: tools/perf/util/debugfs.c:50:
+		return (const char *) debugfs_mountpoint;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!fp"
#146: FILE: tools/perf/util/debugfs.c:64:
+	if (fp == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: No space is necessary after a cast
#174: FILE: tools/perf/util/debugfs.c:92:
+	else if (st_fs.f_type != (long) DEBUGFS_MAGIC)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#180: FILE: tools/perf/util/debugfs.c:98:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mountpoint"
#204: FILE: tools/perf/util/debugfs.c:122:
+	if (mountpoint == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mountpoint"
#208: FILE: tools/perf/util/debugfs.c:126:
+		if (mountpoint == NULL)

WARNING:REPEATED_WORD: Possible repeated word: 'debugfs'
#217: FILE: tools/perf/util/debugfs.c:135:
+		 "/bin/mount -t debugfs debugfs %s", mountpoint);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#244: FILE: tools/perf/util/debugfs.c:162:
+	char path[MAX_PATH+1];
 	                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#289: FILE: tools/perf/util/debugfs.c:207:
+	char path[MAX_PATH+1];
 	                  ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#330: FILE: tools/perf/util/debugfs.h:1:
+#ifndef __DEBUGFS_H__

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#344: FILE: tools/perf/util/debugfs.h:15:
+extern const char *debugfs_find_mountpoint(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#345: FILE: tools/perf/util/debugfs.h:16:
+extern int debugfs_valid_mountpoint(const char *debugfs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#346: FILE: tools/perf/util/debugfs.h:17:
+extern int debugfs_valid_entry(const char *path);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#347: FILE: tools/perf/util/debugfs.h:18:
+extern int debugfs_mount(const char *mountpoint);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#348: FILE: tools/perf/util/debugfs.h:19:
+extern int debugfs_umount(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#349: FILE: tools/perf/util/debugfs.h:20:
+extern int debugfs_write(const char *entry, const char *value);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#350: FILE: tools/perf/util/debugfs.h:21:
+extern int debugfs_read(const char *entry, char *buffer, size_t size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#351: FILE: tools/perf/util/debugfs.h:22:
+extern void debugfs_force_cleanup(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#352: FILE: tools/perf/util/debugfs.h:23:
+extern int debugfs_make_path(const char *element, char *buffer, int size);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000050605.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 6 warnings, 20 checks, 280 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000050605.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
