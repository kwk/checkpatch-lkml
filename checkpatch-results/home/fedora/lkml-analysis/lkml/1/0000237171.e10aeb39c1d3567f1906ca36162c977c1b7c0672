WARNING:TYPO_SPELLING: 'syfs' may be misspelled - perhaps 'sysfs'?
#92: 
- Implement ktype.sysfs_tag() which returns the tag of a syfs kobject.
                                                         ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LINE_SPACING: Missing a blank line after declarations
#162: FILE: fs/sysfs/dir.c:40:
+		struct kobject *kobj;
+		switch (sysfs_type(sd)) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#170: FILE: fs/sysfs/dir.c:48:
+			BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#174: FILE: fs/sysfs/dir.c:52:
+		BUG_ON(tag == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tag"
#174: FILE: fs/sysfs/dir.c:52:
+		BUG_ON(tag == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LINE_SPACING: Missing a blank line after declarations
#193: FILE: fs/sysfs/dir.c:134:
+		const void *tag;
+		type = sysfs_tag_type(sd->s_parent);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'old_tag == tag'
#283: FILE: fs/sysfs/dir.c:974:
+	if ((old_tag == tag) && (strcmp(sd->s_name, new_name) == 0))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:LINE_SPACING: Missing a blank line after declarations
#323: FILE: fs/sysfs/dir.c:1018:
+		struct dentry *dentry;
+		list_for_each_entry(sb, &sysfs_fs_type.fs_supers, s_instances) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'type > SYSFS_TAG_TYPE_NONE'
#421: FILE: fs/sysfs/dir.c:1210:
+	if ((type > SYSFS_TAG_TYPE_NONE) && (type < SYSFS_TAG_TYPES) &&
+	    tag_ops[type] && !sysfs_tag_type(sd) &&
+	    (sysfs_type(sd) == SYSFS_DIR) && !sd->s_dir.children) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'type < SYSFS_TAG_TYPES'
#421: FILE: fs/sysfs/dir.c:1210:
+	if ((type > SYSFS_TAG_TYPE_NONE) && (type < SYSFS_TAG_TYPES) &&
+	    tag_ops[type] && !sysfs_tag_type(sd) &&
+	    (sysfs_type(sd) == SYSFS_DIR) && !sd->s_dir.children) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#534: FILE: fs/sysfs/mount.c:46:
+static int sysfs_fill_super(struct super_block *sb, void *data, int silent,
+	const void *tags[SYSFS_TAG_TYPES])

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#545: FILE: fs/sysfs/mount.c:85:
+	memcpy(info->tag, tags, sizeof(info->tag[0])*SYSFS_TAG_TYPES);
 	                                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#596: FILE: fs/sysfs/mount.c:138:
+		error = sysfs_fill_super(sb, data, flags & MS_SILENT ? 1 : 0,
+					tag);

WARNING:LINE_SPACING: Missing a blank line after declarations
#662: FILE: fs/sysfs/mount.c:238:
+	struct super_block *sb;
+	mutex_lock(&sysfs_rename_mutex);

WARNING:LINE_SPACING: Missing a blank line after declarations
#667: FILE: fs/sysfs/mount.c:243:
+		struct sysfs_super_info *info = sysfs_info(sb);
+		if (info->tag[type] != tag)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kobject *' should also have an identifier name
#800: FILE: include/linux/sysfs.h:139:
+int sysfs_make_tagged_dir(struct kobject *, enum sysfs_tag_type tag_type);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#819: FILE: include/linux/sysfs.h:274:
+static inline int sysfs_register_tag_type(enum sysfs_tag_type type,
+					struct sysfs_tag_type_operations *ops)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000237171.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 9 warnings, 8 checks, 619 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000237171.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
