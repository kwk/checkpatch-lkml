WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#69: 
 include/asm-s390/hugetlb.h      |  183 +++++++++++++++++++++++++++++++++++++++

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#532: FILE: arch/s390/kernel/early.c:289:
+	asm volatile(

ERROR:SPACING: space required after that ',' (ctx:VxV)
#537: FILE: arch/s390/kernel/early.c:294:
+		EX_TABLE(0b,1b)
 		           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#549: FILE: arch/s390/kernel/early.c:306:
+	asm volatile(

ERROR:SPACING: space required after that ',' (ctx:VxV)
#553: FILE: arch/s390/kernel/early.c:310:
+		EX_TABLE(0b,1b)
 		           ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#554: FILE: arch/s390/kernel/early.c:311:
+		: "=d" (rc), "=d" (tmp): "0" (-EOPNOTSUPP) : "cc");
 		                       ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#565: FILE: arch/s390/kernel/early.c:322:
+	asm volatile(

ERROR:SPACING: space required after that ',' (ctx:VxV)
#572: FILE: arch/s390/kernel/early.c:329:
+		EX_TABLE(0b,1b)
 		           ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#585: FILE: arch/s390/kernel/early.c:342:
+	asm volatile(

ERROR:SPACING: space required after that ',' (ctx:VxV)
#589: FILE: arch/s390/kernel/early.c:346:
+		EX_TABLE(0b,1b)
 		           ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#600: FILE: arch/s390/kernel/early.c:357:
+	asm volatile(

ERROR:SPACING: space required after that ',' (ctx:VxV)
#604: FILE: arch/s390/kernel/early.c:361:
+		EX_TABLE(0b,1b)
 		           ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1207: FILE: arch/s390/kernel/traps.c:229:
+	printk("CPU: %d %s %s %.*s\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1212: FILE: arch/s390/kernel/traps.c:234:
+	printk("Process %s (pid: %d, task: %p, ksp: %p)\n",

CHECK:SPACING: No space is necessary after a cast
#1214: FILE: arch/s390/kernel/traps.c:236:
+	       (void *) current->thread.ksp);

CHECK:SPACING: No space is necessary after a cast
#1218: FILE: arch/s390/kernel/traps.c:240:
+		show_trace(NULL, (unsigned long *) regs->gprs[15]);

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#1363: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1368: FILE: arch/s390/mm/hugetlbpage.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1378: FILE: arch/s390/mm/hugetlbpage.c:11:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1380: FILE: arch/s390/mm/hugetlbpage.c:13:
+void set_huge_pte_at(struct mm_struct *mm, unsigned long addr,
+				   pte_t *pteptr, pte_t pteval)

CHECK:SPACING: No space is necessary after a cast
#1382: FILE: arch/s390/mm/hugetlbpage.c:15:
+	pmd_t *pmdp = (pmd_t *) pteptr;

CHECK:SPACING: No space is necessary after a cast
#1387: FILE: arch/s390/mm/hugetlbpage.c:20:
+		pteptr = (pte_t *) pte_page(pteval)[1].index;

CHECK:SPACING: No space is necessary after a cast
#1415: FILE: arch/s390/mm/hugetlbpage.c:48:
+	ptep = (pte_t *) pte_alloc_one(&init_mm, address);

CHECK:SPACING: No space is necessary after a cast
#1424: FILE: arch/s390/mm/hugetlbpage.c:57:
+	page[1].index = (unsigned long) ptep;

CHECK:SPACING: No space is necessary after a cast
#1435: FILE: arch/s390/mm/hugetlbpage.c:68:
+	ptep = (pte_t *) page[1].index;

CHECK:SPACING: No space is necessary after a cast
#1452: FILE: arch/s390/mm/hugetlbpage.c:85:
+	return (pte_t *) pmdp;

CHECK:SPACING: No space is necessary after a cast
#1467: FILE: arch/s390/mm/hugetlbpage.c:100:
+	return (pte_t *) pmdp;

CHECK:SPACING: No space is necessary after a cast
#1619: FILE: arch/s390/mm/vmem.c:45:
+	clear_table((unsigned long *) pud, _REGION3_ENTRY_EMPTY, PAGE_SIZE * 4);

CHECK:SPACING: No space is necessary after a cast
#1628: FILE: arch/s390/mm/vmem.c:58:
+	clear_table((unsigned long *) pmd, _SEGMENT_ENTRY_EMPTY, PAGE_SIZE * 4);

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#1648: FILE: arch/s390/mm/vmem.c:111:
+#ifdef __s390x__

Architecture specific defines should be avoided wherever
possible.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'address >= HPAGE_SIZE'
#1649: FILE: arch/s390/mm/vmem.c:112:
+		if (MACHINE_HAS_HPAGE && !(address & ~HPAGE_MASK) &&
+		    (address + HPAGE_SIZE <= start + size) &&
+		    (address >= HPAGE_SIZE)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:SPACING: No space is necessary after a cast
#1704: FILE: arch/s390/mm/vmem.c:185:
+	start_addr = (unsigned long) start;

CHECK:SPACING: No space is necessary after a cast
#1705: FILE: arch/s390/mm/vmem.c:186:
+	end_addr = (unsigned long) (start + nr);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1793: FILE: arch/s390/mm/vmem.c:341:
+		if (start >= ro_end || end <= ro_start)
[...]
+		else if (start >= ro_start && end <= ro_end)
[...]
+		else if (start >= ro_start) {
[...]
+		} else if (end < ro_end) {
[...]
+		} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:INCLUDE_LINUX: Use #include <linux/smp.h> instead of <asm/smp.h>
#1820: FILE: drivers/s390/char/sclp_config.c:13:
+#include <asm/smp.h>

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#1888: FILE: drivers/s390/cio/ccwgroup.c:332:
+	ret = strict_strtoul(buf, 0, &value);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1972: FILE: drivers/s390/cio/cio.h:89:
+extern int cio_enable_subchannel(struct subchannel *, u32);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct subchannel *' should also have an identifier name
#1972: FILE: drivers/s390/cio/cio.h:89:
+extern int cio_enable_subchannel(struct subchannel *, u32);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#1972: FILE: drivers/s390/cio/cio.h:89:
+extern int cio_enable_subchannel(struct subchannel *, u32);

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#1986: FILE: drivers/s390/cio/cmf.c:1224:
+	ret = strict_strtoul(buf, 16, &val);

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#2015: FILE: drivers/s390/cio/css.c:710:
+	ret = strict_strtoul(buf, 16, &val);

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#2053: FILE: drivers/s390/cio/device.c:531:
+		ret = strict_strtoul(buf, 16, &i);

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#2150: FILE: drivers/s390/cio/qdio.c:3669:
+	ret = strict_strtoul(buf, 16, &i);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'i == 0'
#2151: FILE: drivers/s390/cio/qdio.c:3670:
+	if (!ret && ((i == 0) || (i == 1))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'i == 1'
#2151: FILE: drivers/s390/cio/qdio.c:3670:
+	if (!ret && ((i == 0) || (i == 1))) {

CHECK:SPACING: No space is necessary after a cast
#2217: FILE: drivers/s390/kvm/kvm_virtio.c:327:
+	kvm_devices = (void *) PFN_PHYS(max_pfn);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2241: FILE: include/asm-s390/hugetlb.h:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/pgtable.h> instead of <asm/pgtable.h>
#2252: FILE: include/asm-s390/hugetlb.h:12:
+#include <asm/pgtable.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2254: FILE: include/asm-s390/hugetlb.h:14:
+
+

CHECK:SPACING: No space is necessary after a cast
#2323: FILE: include/asm-s390/hugetlb.h:83:
+		ptep = (pte_t *) (pte_val(pte) & _SEGMENT_ENTRY_ORIGIN);

CHECK:SPACING: No space is necessary after a cast
#2339: FILE: include/asm-s390/hugetlb.h:99:
+	pmd_clear((pmd_t *) ptep);

CHECK:SPACING: No space is necessary after a cast
#2348: FILE: include/asm-s390/hugetlb.h:108:
+	register unsigned long reg4 asm("4") = ((unsigned long) pmdp) + 5;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2350: FILE: include/asm-s390/hugetlb.h:110:
+	asm volatile(

CHECK:SPACING: No space is necessary after a cast
#2359: FILE: include/asm-s390/hugetlb.h:119:
+	unsigned long sto = (unsigned long) pmdp -

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2363: FILE: include/asm-s390/hugetlb.h:123:
+		asm volatile(

CHECK:SPACING: No space is necessary after a cast
#2376: FILE: include/asm-s390/hugetlb.h:136:
+	pmd_t *pmdp = (pmd_t *) ptep;

WARNING:RETURN_VOID: void function return statements are not generally useful
#2393: FILE: include/asm-s390/hugetlb.h:153:
+	return;
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__vma' - possible side-effects?
#2395: FILE: include/asm-s390/hugetlb.h:155:
+#define huge_ptep_set_access_flags(__vma, __addr, __ptep, __entry, __dirty) \
+({									    \
+	int __changed = !pte_same(huge_ptep_get(__ptep), __entry);	    \
+	if (__changed) {						    \
+		huge_ptep_invalidate((__vma)->vm_mm, __addr, __ptep);	    \
+		set_huge_pte_at((__vma)->vm_mm, __addr, __ptep, __entry);   \
+	}								    \
+	__changed;							    \
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__addr' - possible side-effects?
#2395: FILE: include/asm-s390/hugetlb.h:155:
+#define huge_ptep_set_access_flags(__vma, __addr, __ptep, __entry, __dirty) \
+({									    \
+	int __changed = !pte_same(huge_ptep_get(__ptep), __entry);	    \
+	if (__changed) {						    \
+		huge_ptep_invalidate((__vma)->vm_mm, __addr, __ptep);	    \
+		set_huge_pte_at((__vma)->vm_mm, __addr, __ptep, __entry);   \
+	}								    \
+	__changed;							    \
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__ptep' - possible side-effects?
#2395: FILE: include/asm-s390/hugetlb.h:155:
+#define huge_ptep_set_access_flags(__vma, __addr, __ptep, __entry, __dirty) \
+({									    \
+	int __changed = !pte_same(huge_ptep_get(__ptep), __entry);	    \
+	if (__changed) {						    \
+		huge_ptep_invalidate((__vma)->vm_mm, __addr, __ptep);	    \
+		set_huge_pte_at((__vma)->vm_mm, __addr, __ptep, __entry);   \
+	}								    \
+	__changed;							    \
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__entry' - possible side-effects?
#2395: FILE: include/asm-s390/hugetlb.h:155:
+#define huge_ptep_set_access_flags(__vma, __addr, __ptep, __entry, __dirty) \
+({									    \
+	int __changed = !pte_same(huge_ptep_get(__ptep), __entry);	    \
+	if (__changed) {						    \
+		huge_ptep_invalidate((__vma)->vm_mm, __addr, __ptep);	    \
+		set_huge_pte_at((__vma)->vm_mm, __addr, __ptep, __entry);   \
+	}								    \
+	__changed;							    \
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__mm' - possible side-effects?
#2405: FILE: include/asm-s390/hugetlb.h:165:
+#define huge_ptep_set_wrprotect(__mm, __addr, __ptep)			\
+({									\
+	pte_t __pte = huge_ptep_get(__ptep);				\
+	if (pte_write(__pte)) {						\
+		if (atomic_read(&(__mm)->mm_users) > 1 ||		\
+		    (__mm) != current->active_mm)			\
+			huge_ptep_invalidate(__mm, __addr, __ptep);	\
+		set_huge_pte_at(__mm, __addr, __ptep,			\
+				huge_pte_wrprotect(__pte));		\
+	}								\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__addr' - possible side-effects?
#2405: FILE: include/asm-s390/hugetlb.h:165:
+#define huge_ptep_set_wrprotect(__mm, __addr, __ptep)			\
+({									\
+	pte_t __pte = huge_ptep_get(__ptep);				\
+	if (pte_write(__pte)) {						\
+		if (atomic_read(&(__mm)->mm_users) > 1 ||		\
+		    (__mm) != current->active_mm)			\
+			huge_ptep_invalidate(__mm, __addr, __ptep);	\
+		set_huge_pte_at(__mm, __addr, __ptep,			\
+				huge_pte_wrprotect(__pte));		\
+	}								\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__ptep' - possible side-effects?
#2405: FILE: include/asm-s390/hugetlb.h:165:
+#define huge_ptep_set_wrprotect(__mm, __addr, __ptep)			\
+({									\
+	pte_t __pte = huge_ptep_get(__ptep);				\
+	if (pte_write(__pte)) {						\
+		if (atomic_read(&(__mm)->mm_users) > 1 ||		\
+		    (__mm) != current->active_mm)			\
+			huge_ptep_invalidate(__mm, __addr, __ptep);	\
+		set_huge_pte_at(__mm, __addr, __ptep,			\
+				huge_pte_wrprotect(__pte));		\
+	}								\
+})

CHECK:BIT_MACRO: Prefer using the BIT macro
#2433: FILE: include/asm-s390/page.h:23:
+#define HPAGE_SIZE	(1UL << HPAGE_SHIFT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

ERROR:DEFINE_ARCH_HAS: #define of 'ARCH_HAS_SETCLEAR_HUGE_PTE' is wrong - use Kconfig variables or standard guards instead
#2437: FILE: include/asm-s390/page.h:27:
+#define ARCH_HAS_SETCLEAR_HUGE_PTE

The ARCH_HAS_xyz and ARCH_HAVE_xyz patterns are wrong.

For big conceptual features use Kconfig symbols instead.  And for
smaller things where we have compatibility fallback functions but
want architectures able to override them with optimized ones, we
should either use weak functions (appropriate for some cases), or
the symbol that protects them should be the same symbol we use.

See: https://lore.kernel.org/lkml/CA+55aFycQ9XJvEOsiM3txHL5bjUc8CeKWJNR_H+MiicaddB42Q@mail.gmail.com/

ERROR:DEFINE_ARCH_HAS: #define of 'ARCH_HAS_HUGE_PTE_TYPE' is wrong - use Kconfig variables or standard guards instead
#2438: FILE: include/asm-s390/page.h:28:
+#define ARCH_HAS_HUGE_PTE_TYPE

ERROR:DEFINE_ARCH_HAS: #define of 'ARCH_HAS_PREPARE_HUGEPAGE' is wrong - use Kconfig variables or standard guards instead
#2439: FILE: include/asm-s390/page.h:29:
+#define ARCH_HAS_PREPARE_HUGEPAGE

ERROR:DEFINE_ARCH_HAS: #define of 'ARCH_HAS_HUGEPAGE_CLEAR_FLUSH' is wrong - use Kconfig variables or standard guards instead
#2440: FILE: include/asm-s390/page.h:30:
+#define ARCH_HAS_HUGEPAGE_CLEAR_FLUSH

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2454: FILE: include/asm-s390/page.h:38:
+		asm volatile(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2461: FILE: include/asm-s390/page.h:45:
+		asm volatile(

CHECK:SPACING: No space is necessary after a cast
#2505: FILE: include/asm-s390/pgtable.h:132:
+#define vmemmap		((struct page *) VMALLOC_END)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2541: FILE: include/asm-s390/pgtable.h:1078:
+extern int vmem_add_mapping(unsigned long start, unsigned long size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2542: FILE: include/asm-s390/pgtable.h:1079:
+extern int vmem_remove_mapping(unsigned long start, unsigned long size);

CHECK:BIT_MACRO: Prefer using the BIT macro
#2604: FILE: include/asm-s390/setup.h:62:
+#define MACHINE_FLAG_VM		(1UL << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2605: FILE: include/asm-s390/setup.h:63:
+#define MACHINE_FLAG_IEEE	(1UL << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2606: FILE: include/asm-s390/setup.h:64:
+#define MACHINE_FLAG_P390	(1UL << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2607: FILE: include/asm-s390/setup.h:65:
+#define MACHINE_FLAG_CSP	(1UL << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2608: FILE: include/asm-s390/setup.h:66:
+#define MACHINE_FLAG_MVPG	(1UL << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2609: FILE: include/asm-s390/setup.h:67:
+#define MACHINE_FLAG_DIAG44	(1UL << 5)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2610: FILE: include/asm-s390/setup.h:68:
+#define MACHINE_FLAG_IDTE	(1UL << 6)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2611: FILE: include/asm-s390/setup.h:69:
+#define MACHINE_FLAG_DIAG9C	(1UL << 7)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2612: FILE: include/asm-s390/setup.h:70:
+#define MACHINE_FLAG_MVCOS	(1UL << 8)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2613: FILE: include/asm-s390/setup.h:71:
+#define MACHINE_FLAG_KVM	(1UL << 9)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2614: FILE: include/asm-s390/setup.h:72:
+#define MACHINE_FLAG_HPAGE	(1UL << 10)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2615: FILE: include/asm-s390/setup.h:73:
+#define MACHINE_FLAG_PFMF	(1UL << 11)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2676: FILE: include/asm-s390/smp.h:110:
+extern int smp_rescan_cpus(void);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2689: FILE: include/asm-s390/sparsemem.h:1:
+#ifndef _ASM_S390_SPARSEMEM_H

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2745: FILE: include/asm-s390/system.h:428:
+	asm volatile(

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2748: FILE: include/asm-s390/system.h:431:
+		EX_TABLE(0b,0b));
 		           ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'stap', this function's name, in a string
#2756: FILE: include/asm-s390/system.h:439:
+	asm volatile("stap %0" : "=m" (cpu_address));

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000287834.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 11 errors, 18 warnings, 62 checks, 2353 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000287834.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
