WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#54: 
- currently against an older kernel with pre-cgroup cpusets, so it uses tasklist_lock and do_each_thread(); a cgroup version would use cgroup iterators as yours does

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#96: FILE: include/linux/prio_heap.h:1:
+#ifndef _LINUX_PRIO_HEAP_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#124: FILE: include/linux/prio_heap.h:29:
+extern int heap_init(struct ptr_heap *heap, size_t size, gfp_t gfp_mask);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#146: FILE: include/linux/prio_heap.h:51:
+extern void *heap_insert(struct ptr_heap *heap, void *p,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#149: FILE: include/linux/prio_heap.h:54:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#167: FILE: kernel/cpuset.c:843:
+static int inline started_after_time(struct task_struct *t1,

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

WARNING:LINE_SPACING: Missing a blank line after declarations
#172: FILE: kernel/cpuset.c:848:
+	int start_diff = timespec_compare(&t1->start_time, time);
+	if (start_diff > 0) {

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#176: FILE: kernel/cpuset.c:852:
+		return 0;
+	} else {

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#190: FILE: kernel/cpuset.c:866:
+static int inline started_after(void *p1, void *p2)

WARNING:LINE_SPACING: Missing a blank line after declarations
#194: FILE: kernel/cpuset.c:870:
+	struct task_struct *t2 = p2;
+	return started_after_time(t1, &t2->start_time, t2);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dropped"
#256: FILE: kernel/cpuset.c:937:
+		if (dropped == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LINE_SPACING: Missing a blank line after declarations
#267: FILE: kernel/cpuset.c:948:
+			struct task_struct *p = heap.ptrs[i];
+			if (i == 0) {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#330: FILE: lib/prio_heap.c:1:
+/*

WARNING:LINE_SPACING: Missing a blank line after declarations
#362: FILE: lib/prio_heap.c:33:
+		int pos = heap->size++;
+		while (pos > 0 && gt(p, ptrs[(pos-1)/2])) {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#362: FILE: lib/prio_heap.c:33:
+		while (pos > 0 && gt(p, ptrs[(pos-1)/2])) {
 		                                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#362: FILE: lib/prio_heap.c:33:
+		while (pos > 0 && gt(p, ptrs[(pos-1)/2])) {
 		                                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#363: FILE: lib/prio_heap.c:34:
+			ptrs[pos] = ptrs[(pos-1)/2];
 			                     ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#363: FILE: lib/prio_heap.c:34:
+			ptrs[pos] = ptrs[(pos-1)/2];
 			                        ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#364: FILE: lib/prio_heap.c:35:
+			pos = (pos-1)/2;
 			          ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#364: FILE: lib/prio_heap.c:35:
+			pos = (pos-1)/2;
 			             ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#385: FILE: lib/prio_heap.c:56:
+		int largest = pos;
+		if (left < heap->size && gt(ptrs[left], p))

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000369765.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 9 warnings, 10 checks, 283 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000369765.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
