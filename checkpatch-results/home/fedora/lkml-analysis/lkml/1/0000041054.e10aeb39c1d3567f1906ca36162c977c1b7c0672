WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'S:' before 'W:'
#84: FILE: MAINTAINERS:5289:
+W:	http://dotat.at/prog/unifdef
+S:	Maintained

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#140: FILE: scripts/unifdef.c:37:
+    "@(#) Copyright (c) 2002 - 2009 Tony Finch <dot@dotat.at>\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#141: FILE: scripts/unifdef.c:38:
+    "$dotat: unifdef/unifdef.c,v 1.190 2009/11/27 17:21:26 fanf2 Exp $",$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#192: FILE: scripts/unifdef.c:189:
+static unsigned         blankcount;		/* count of blank lines */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#193: FILE: scripts/unifdef.c:190:
+static unsigned         blankmax;		/* maximum recent blankcount */

CHECK:CAMELCASE: Avoid CamelCase: <Linetype>
#203: FILE: scripts/unifdef.c:201:
+static Linetype         parseline(void);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c' - possible side-effects?
#219: FILE: scripts/unifdef.c:216:
+#define endsym(c) (!isalnum((unsigned char)c) && c != '_')

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#285: FILE: scripts/unifdef.c:388:
+  print, done,  abort },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#290: FILE: scripts/unifdef.c:392:
+  drop,  Eeof,  abort },$

CHECK:CAMELCASE: Avoid CamelCase: <Eeof>
#290: FILE: scripts/unifdef.c:392:
+  drop,  Eeof,  abort },

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#295: FILE: scripts/unifdef.c:396:
+  print, Eeof,  abort },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#300: FILE: scripts/unifdef.c:400:
+  print, Eeof,  abort },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#305: FILE: scripts/unifdef.c:404:
+  drop,  Eeof,  abort },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#310: FILE: scripts/unifdef.c:408:
+  print, Eeof,  abort },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#315: FILE: scripts/unifdef.c:412:
+  print, Eeof,  abort },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#320: FILE: scripts/unifdef.c:416:
+  drop,  Eeof,  abort },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#325: FILE: scripts/unifdef.c:420:
+  print, Eeof,  abort },$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#330: FILE: scripts/unifdef.c:424:
+  drop,  Eeof,  abort }$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#334: FILE: scripts/unifdef.c:427:
+  PLAIN  EOF    ERROR */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#344: FILE: scripts/unifdef.c:468:
+	if (depth > MAXDEPTH-1)
 	                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#346: FILE: scripts/unifdef.c:470:
+	if (depth == MAXDEPTH-1)
 	                     ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#361: FILE: scripts/unifdef.c:498:
+		bool blankline = tline[strspn(tline, " \t\n")] == '\0';
+		if (blankline && compblank && blankcount != blankmax) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#369: FILE: scripts/unifdef.c:506:
+			blankmax = blankcount = blankline ? blankcount + 1 : 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#385: FILE: scripts/unifdef.c:526:
+	/* When compressing blank lines, act as if the file
+	   is preceded by a large number of blank lines. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#385: FILE: scripts/unifdef.c:526:
+	   is preceded by a large number of blank lines. */

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#386: FILE: scripts/unifdef.c:527:
+	blankmax = blankcount = 1000;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#411: FILE: scripts/unifdef.c:614:
+		/* skipcomment normally changes the state, except
+		   if the last line of the file lacks a newline, or

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#412: FILE: scripts/unifdef.c:615:
+		   if there is too much whitespace in a directive */

WARNING:LINE_SPACING: Missing a blank line after declarations
#415: FILE: scripts/unifdef.c:618:
+			size_t len = cp - tline;
+			if (fgets(tline + len, MAXLINE - len, input) == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!fgets"
#415: FILE: scripts/unifdef.c:618:
+			if (fgets(tline + len, MAXLINE - len, input) == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#417: FILE: scripts/unifdef.c:620:
+				tline[len+0] = '\n';
 				         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#418: FILE: scripts/unifdef.c:621:
+				tline[len+1] = '\0';
 				         ^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#444: FILE: scripts/unifdef.c:642:
+static Linetype op_strict(int *p, int v, Linetype at, Linetype bt) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open parenthesis '('
#445: FILE: scripts/unifdef.c:643:
+	if(at == LT_IF || bt == LT_IF) return (LT_IF);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#445: FILE: scripts/unifdef.c:643:
+	if(at == LT_IF || bt == LT_IF) return (LT_IF);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#448: FILE: scripts/unifdef.c:646:
+}
+static Linetype op_lt(int *p, Linetype at, int a, Linetype bt, int b) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#448: FILE: scripts/unifdef.c:646:
+static Linetype op_lt(int *p, Linetype at, int a, Linetype bt, int b) {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#451: FILE: scripts/unifdef.c:649:
+}
+static Linetype op_gt(int *p, Linetype at, int a, Linetype bt, int b) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#451: FILE: scripts/unifdef.c:649:
+static Linetype op_gt(int *p, Linetype at, int a, Linetype bt, int b) {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#454: FILE: scripts/unifdef.c:652:
+}
+static Linetype op_le(int *p, Linetype at, int a, Linetype bt, int b) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#454: FILE: scripts/unifdef.c:652:
+static Linetype op_le(int *p, Linetype at, int a, Linetype bt, int b) {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#457: FILE: scripts/unifdef.c:655:
+}
+static Linetype op_ge(int *p, Linetype at, int a, Linetype bt, int b) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#457: FILE: scripts/unifdef.c:655:
+static Linetype op_ge(int *p, Linetype at, int a, Linetype bt, int b) {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#460: FILE: scripts/unifdef.c:658:
+}
+static Linetype op_eq(int *p, Linetype at, int a, Linetype bt, int b) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#460: FILE: scripts/unifdef.c:658:
+static Linetype op_eq(int *p, Linetype at, int a, Linetype bt, int b) {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#463: FILE: scripts/unifdef.c:661:
+}
+static Linetype op_ne(int *p, Linetype at, int a, Linetype bt, int b) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#463: FILE: scripts/unifdef.c:661:
+static Linetype op_ne(int *p, Linetype at, int a, Linetype bt, int b) {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#466: FILE: scripts/unifdef.c:664:
+}
+static Linetype op_or(int *p, Linetype at, int a, Linetype bt, int b) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#466: FILE: scripts/unifdef.c:664:
+static Linetype op_or(int *p, Linetype at, int a, Linetype bt, int b) {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#471: FILE: scripts/unifdef.c:669:
+}
+static Linetype op_and(int *p, Linetype at, int a, Linetype bt, int b) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#471: FILE: scripts/unifdef.c:669:
+static Linetype op_and(int *p, Linetype at, int a, Linetype bt, int b) {

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#495: FILE: scripts/unifdef.c:702:
+		Linetype (*fn)(int *, Linetype, int, Linetype, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'Linetype' should also have an identifier name
#495: FILE: scripts/unifdef.c:702:
+		Linetype (*fn)(int *, Linetype, int, Linetype, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#495: FILE: scripts/unifdef.c:702:
+		Linetype (*fn)(int *, Linetype, int, Linetype, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'Linetype' should also have an identifier name
#495: FILE: scripts/unifdef.c:702:
+		Linetype (*fn)(int *, Linetype, int, Linetype, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#495: FILE: scripts/unifdef.c:702:
+		Linetype (*fn)(int *, Linetype, int, Linetype, int);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#558: FILE: scripts/unifdef.c:760:
+			cp = skipcomment(cp+1);
 			                   ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!value[sym]"
#594: FILE: scripts/unifdef.c:784:
+		} else if (value[sym] == NULL) {

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#612: FILE: scripts/unifdef.c:797:
+		return (LT_ERROR);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#618: FILE: scripts/unifdef.c:802:
+	return (lt);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#632: FILE: scripts/unifdef.c:818:
+	lt = ops->inner(ops+1, valp, &cp);
 	                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#661: FILE: scripts/unifdef.c:830:
+		rt = ops->inner(ops+1, &val, &cp);
 		                   ^

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#673: FILE: scripts/unifdef.c:839:
+	return (lt);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#695: FILE: scripts/unifdef.c:857:
+	return (constexpr ? LT_IF : ret == LT_ERROR ? LT_IF : ret);

WARNING:LINE_SPACING: Missing a blank line after declarations
#710: FILE: scripts/unifdef.c:976:
+	int level = 0;
+	cp = skipcomment(cp);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#718: FILE: scripts/unifdef.c:984:
+		cp = skipcomment(cp+1);
 		                   ^

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#722: FILE: scripts/unifdef.c:988:
+		return (cp);
+	else

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000041054.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 15 errors, 29 warnings, 23 checks, 628 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000041054.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
