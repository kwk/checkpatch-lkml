WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#43: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#48: FILE: arch/score/kernel/ptrace.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#49: FILE: arch/score/kernel/ptrace.c:2:
+ * arch/score/kernel/ptrace.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#70: FILE: arch/score/kernel/ptrace.c:23:
+ * 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/uaccess.h> instead of <asm/uaccess.h>
#79: FILE: arch/score/kernel/ptrace.c:32:
+#include <asm/uaccess.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#94: FILE: arch/score/kernel/ptrace.c:47:
+	ret = user_regset_copyout_zero(&pos, &count, &kbuf, &ubuf,
+					0, offsetof(struct pt_regs, regs));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#104: FILE: arch/score/kernel/ptrace.c:57:
+		ret = user_regset_copyout_zero(&pos, &count, &kbuf, &ubuf,
+						sizeof(struct pt_regs), -1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#126: FILE: arch/score/kernel/ptrace.c:79:
+	ret = user_regset_copyin(&pos, &count, &kbuf, &ubuf,
+				  regs->regs,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#177: FILE: arch/score/kernel/ptrace.c:130:
+read_tsk_long(struct task_struct *child,
+		unsigned long addr, unsigned long *res)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#188: FILE: arch/score/kernel/ptrace.c:141:
+read_tsk_short(struct task_struct *child,
+		unsigned long addr, unsigned short *res)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#210: FILE: arch/score/kernel/ptrace.c:163:
+write_tsk_long(struct task_struct *child,
+		unsigned long addr, unsigned long val)

WARNING:LINE_SPACING: Missing a blank line after declarations
#227: FILE: arch/score/kernel/ptrace.c:180:
+	struct pt_regs *regs = task_pt_regs(child);
+	child->thread.single_step = 1;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#234: FILE: arch/score/kernel/ptrace.c:187:
+		if ((epc_insn & J16M) == J16) {
[...]
+		} else if ((epc_insn & B16M) == B16) {
[...]
+		} else if ((epc_insn & BR16M) == BR16) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#241: FILE: arch/score/kernel/ptrace.c:194:
+			tmp = (unsigned int)((int) tmp >> 23);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Unbalanced braces around else statement
#249: FILE: arch/score/kernel/ptrace.c:202:
+		} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#252: FILE: arch/score/kernel/ptrace.c:205:
+		if ((epc_insn & J32M) == J32) {
[...]
+		} else if ((epc_insn & B32M) == B32) {
[...]
+		} else if ((epc_insn & BR32M) == BR32) {
[...]
+		} else
[...]

CHECK:SPACING: No space is necessary after a cast
#263: FILE: arch/score/kernel/ptrace.c:216:
+			tmp = (unsigned int)((int) tmp >> 12);

CHECK:BRACES: Unbalanced braces around else statement
#271: FILE: arch/score/kernel/ptrace.c:224:
+		} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#348: FILE: arch/score/kernel/ptrace.c:301:
+		write_tsk_long(child, child->thread.addr1,
+				child->thread.insn1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#356: FILE: arch/score/kernel/ptrace.c:309:
+			write_tsk_long(child, child->thread.addr1,
+					child->thread.insn1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#362: FILE: arch/score/kernel/ptrace.c:315:
+			write_tsk_long(child, child->thread.addr2,
+					child->thread.insn2);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#383: FILE: arch/score/kernel/ptrace.c:336:
+		ret = copy_regset_to_user(child, &user_score_native_view,
+						REGSET_GENERAL,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#390: FILE: arch/score/kernel/ptrace.c:343:
+		ret = copy_regset_from_user(child, &user_score_native_view,
+						REGSET_GENERAL,

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#416: FILE: arch/score/kernel/ptrace.c:369:
+	/* The 0x80 provides a way for the tracing parent to distinguish
+	   between a syscall stop and SIGTRAP delivery. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#416: FILE: arch/score/kernel/ptrace.c:369:
+	   between a syscall stop and SIGTRAP delivery. */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#436: FILE: arch/score/kernel/signal.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#437: FILE: arch/score/kernel/signal.c:2:
+ * arch/score/kernel/signal.c

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#458: FILE: arch/score/kernel/signal.c:23:
+ * 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#469: FILE: arch/score/kernel/signal.c:34:
+#include <asm/cacheflush.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#489: FILE: arch/score/kernel/signal.c:54:
+
+

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#490: FILE: arch/score/kernel/signal.c:55:
+#define save_gp_reg(i) {				\
+	reg = regs->regs[i];				\
+	err |= __put_user(reg, &sc->sc_regs[i]);	\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#490: FILE: arch/score/kernel/signal.c:55:
+#define save_gp_reg(i) {				\
+	reg = regs->regs[i];				\
+	err |= __put_user(reg, &sc->sc_regs[i]);	\
+} while (0)

CHECK:SPACING: No space is necessary after a cast
#523: FILE: arch/score/kernel/signal.c:88:
+	regs->ceh = (int) reg;

CHECK:SPACING: No space is necessary after a cast
#525: FILE: arch/score/kernel/signal.c:90:
+	regs->cel = (int) reg;

CHECK:SPACING: No space is necessary after a cast
#528: FILE: arch/score/kernel/signal.c:93:
+	regs->cp0_psr = (int) reg;

CHECK:SPACING: No space is necessary after a cast
#530: FILE: arch/score/kernel/signal.c:95:
+	regs->cp0_ecr = (int) reg;

CHECK:SPACING: No space is necessary after a cast
#532: FILE: arch/score/kernel/signal.c:97:
+	regs->cp0_ema = (int) reg;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#534: FILE: arch/score/kernel/signal.c:99:
+#define restore_gp_reg(i) do {				\
+	err |= __get_user(reg, &sc->sc_regs[i]);	\
+	regs->regs[i] = reg;				\
+} while (0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#557: FILE: arch/score/kernel/signal.c:122:
+static void __user *get_sigframe(struct k_sigaction *ka,
+			struct pt_regs *regs, size_t frame_size)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#569: FILE: arch/score/kernel/signal.c:134:
+	return (void __user*)((sp - frame_size) & ~7);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#575: FILE: arch/score/kernel/signal.c:140:
+	const stack_t __user *uss = (const stack_t __user *) regs->regs[4];

CHECK:SPACING: No space is necessary after a cast
#576: FILE: arch/score/kernel/signal.c:141:
+	stack_t __user *uoss = (stack_t __user *) regs->regs[5];

CHECK:SPACING: No space is necessary after a cast
#590: FILE: arch/score/kernel/signal.c:155:
+	frame = (struct rt_sigframe __user *) regs->regs[0];

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#612: FILE: arch/score/kernel/signal.c:177:
+	/* It is more difficult to avoid calling this function than to
+	   call it and ignore errors.  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#612: FILE: arch/score/kernel/signal.c:177:
+	   call it and ignore errors.  */

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#615: FILE: arch/score/kernel/signal.c:180:
+	__asm__ __volatile__(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#628: FILE: arch/score/kernel/signal.c:193:
+static int setup_rt_frame(struct k_sigaction *ka, struct pt_regs *regs,
+		int signr, sigset_t *set, siginfo_t *info)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#643: FILE: arch/score/kernel/signal.c:208:
+	err |= __put_user(0x87788000 + __NR_rt_sigreturn*2,
 	                                                ^

CHECK:SPACING: No space is necessary after a cast
#646: FILE: arch/score/kernel/signal.c:211:
+	flush_cache_sigtramp((unsigned long) frame->rs_code);

CHECK:SPACING: No space is necessary after a cast
#663: FILE: arch/score/kernel/signal.c:228:
+	regs->regs[0] = (unsigned long) frame;

CHECK:SPACING: No space is necessary after a cast
#664: FILE: arch/score/kernel/signal.c:229:
+	regs->regs[3] = (unsigned long) frame->rs_code;

CHECK:SPACING: No space is necessary after a cast
#666: FILE: arch/score/kernel/signal.c:231:
+	regs->regs[5] = (unsigned long) &frame->rs_info;

CHECK:SPACING: No space is necessary after a cast
#667: FILE: arch/score/kernel/signal.c:232:
+	regs->regs[6] = (unsigned long) &frame->rs_uc;

CHECK:SPACING: No space is necessary after a cast
#668: FILE: arch/score/kernel/signal.c:233:
+	regs->regs[29] = (unsigned long) ka->sa.sa_handler;

CHECK:SPACING: No space is necessary after a cast
#669: FILE: arch/score/kernel/signal.c:234:
+	regs->cp0_epc = (unsigned long) ka->sa.sa_handler;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#681: FILE: arch/score/kernel/signal.c:246:
+static int handle_signal(unsigned long sig, siginfo_t *info,
+	struct k_sigaction *ka, sigset_t *oldset, struct pt_regs *regs)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#791: FILE: arch/score/kernel/signal.c:356:
+asmlinkage void do_notify_resume(struct pt_regs *regs, void *unused,
+				__u32 thread_info_flags)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000079754.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 10 warnings, 43 checks, 743 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000079754.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
