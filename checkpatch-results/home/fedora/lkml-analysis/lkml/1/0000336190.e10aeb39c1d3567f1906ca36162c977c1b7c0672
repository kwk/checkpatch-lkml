ERROR:POINTER_LOCATION: "foo *		bar" should be "foo *bar"
#102: FILE: include/linux/kernel.h:179:
+	char *		header;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo *		bar" should be "foo *bar"
#103: FILE: include/linux/kernel.h:180:
+	char *		body;

ERROR:POINTER_LOCATION: "foo *		bar" should be "foo *bar"
#104: FILE: include/linux/kernel.h:181:
+	char *		cur;

ERROR:POINTER_LOCATION: "foo *		bar" should be "foo *bar"
#105: FILE: include/linux/kernel.h:182:
+	char *		prv;

ERROR:POINTER_LOCATION: "foo *		bar" should be "foo *bar"
#106: FILE: include/linux/kernel.h:183:
+	char *		end;

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_buf' - possible side-effects?
#110: FILE: include/linux/kernel.h:187:
+#define MPRINTK_INITIALIZER(_buf, _size)				\
+	{								\
+		.header		= NULL,					\
+		.body		= _buf,					\
+		.cur		= _buf,					\
+		.prv		= NULL,					\
+		.end		= _buf + _size,				\
+		.overflowed	= 0,					\
+	}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_size' may be better as '(_size)' to avoid precedence issues
#110: FILE: include/linux/kernel.h:187:
+#define MPRINTK_INITIALIZER(_buf, _size)				\
+	{								\
+		.header		= NULL,					\
+		.body		= _buf,					\
+		.cur		= _buf,					\
+		.prv		= NULL,					\
+		.end		= _buf + _size,				\
+		.overflowed	= 0,					\
+	}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'size' - possible side-effects?
#120: FILE: include/linux/kernel.h:197:
+#define DEFINE_MPRINTK(name, size)					\
+	char __##name##_buf[size];					\
+	struct mprintk name = MPRINTK_INITIALIZER(__##name##_buf, size)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#136: FILE: include/linux/kernel.h:214:
+}
+extern int vmprintk_push(struct mprintk *mp, const char *fmt, va_list args)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#136: FILE: include/linux/kernel.h:214:
+extern int vmprintk_push(struct mprintk *mp, const char *fmt, va_list args)

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 0) over __attribute__((format(printf, 2, 0)))
#137: FILE: include/linux/kernel.h:215:
+	__attribute__ ((format (printf, 2, 0)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#138: FILE: include/linux/kernel.h:216:
+extern int vmprintk_set_header(struct mprintk *mp, const char *fmt, va_list args)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 0) over __attribute__((format(printf, 2, 0)))
#139: FILE: include/linux/kernel.h:217:
+	__attribute__ ((format (printf, 2, 0)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#140: FILE: include/linux/kernel.h:218:
+extern int vmprintk(struct mprintk *mp, const char *fmt, va_list args)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 0) over __attribute__((format(printf, 2, 0)))
#141: FILE: include/linux/kernel.h:219:
+	__attribute__ ((format (printf, 2, 0)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#142: FILE: include/linux/kernel.h:220:
+extern int mprintk_push(struct mprintk *mp, const char *fmt, ...)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 3) over __attribute__((format(printf, 2, 3)))
#143: FILE: include/linux/kernel.h:221:
+	__attribute__ ((format (printf, 2, 3)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#144: FILE: include/linux/kernel.h:222:
+extern int mprintk_set_header(struct mprintk *mp, const char *fmt, ...)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 3) over __attribute__((format(printf, 2, 3)))
#145: FILE: include/linux/kernel.h:223:
+	__attribute__ ((format (printf, 2, 3)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#146: FILE: include/linux/kernel.h:224:
+extern int mprintk(struct mprintk *mp, const char *fmt, ...)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 3) over __attribute__((format(printf, 2, 3)))
#147: FILE: include/linux/kernel.h:225:
+	__attribute__ ((format (printf, 2, 3)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 0) over __attribute__((format(printf, 2, 0)))
#167: FILE: include/linux/kernel.h:252:
+	__attribute__ ((format (printf, 2, 0)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 0) over __attribute__((format(printf, 2, 0)))
#171: FILE: include/linux/kernel.h:256:
+	__attribute__ ((format (printf, 2, 0)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 0) over __attribute__((format(printf, 2, 0)))
#175: FILE: include/linux/kernel.h:260:
+	__attribute__ ((format (printf, 2, 0)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 3) over __attribute__((format(printf, 2, 3)))
#179: FILE: include/linux/kernel.h:264:
+	__attribute__ ((format (printf, 2, 3)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 3) over __attribute__((format(printf, 2, 3)))
#183: FILE: include/linux/kernel.h:268:
+	__attribute__ ((format (printf, 2, 3)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 3) over __attribute__((format(printf, 2, 3)))
#187: FILE: include/linux/kernel.h:272:
+	__attribute__ ((format (printf, 2, 3)));

WARNING:TYPO_SPELLING: 'intead' may be misspelled - perhaps 'instead'?
#215: FILE: kernel/printk.c:849:
+ * va_list @args intead of argument list.
                  ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'overrided' may be misspelled - perhaps 'overrode'?
#229: FILE: kernel/printk.c:863:
+	 * previous push overrided log level && this push doesn't
 	                 ^^^^^^^^^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#265: FILE: kernel/printk.c:899:
+		printk("\n" KERN_ERR

WARNING:TYPO_SPELLING: 'intead' may be misspelled - perhaps 'instead'?
#282: FILE: kernel/printk.c:916:
+ * takes va_list @args intead of argument list.
                        ^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#292: FILE: kernel/printk.c:926:
+		printk(KERN_WARNING "vmprintk_set_header() called on "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'vmprintk_set_header', this function's name, in a string
#292: FILE: kernel/printk.c:926:
+		printk(KERN_WARNING "vmprintk_set_header() called on "

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#293: FILE: kernel/printk.c:927:
+		printk(KERN_WARNING "vmprintk_set_header() called on "
+		       "dirty mprintk instance\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:TYPO_SPELLING: 'intead' may be misspelled - perhaps 'instead'?
#315: FILE: kernel/printk.c:949:
+ * va_list @args intead of argument list.
                  ^^^^^^

WARNING:TYPO_SPELLING: 'overrided' may be misspelled - perhaps 'overrode'?
#340: FILE: kernel/printk.c:974:
+ * log level if the previous push contained log level overrided and
                                                       ^^^^^^^^^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000336190.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 21 warnings, 10 checks, 314 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000336190.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
