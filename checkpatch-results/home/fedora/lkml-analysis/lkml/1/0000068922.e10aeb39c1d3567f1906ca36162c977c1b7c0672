WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#60: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#65: FILE: fs/ceph/decode.h:1:
+#ifndef __CEPH_DECODE_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#79: FILE: fs/ceph/decode.h:15:
+#define ceph_decode_need(p, end, n, bad)		\
+	do {						\
+		if (unlikely(*(p) + (n) > (end))) 	\
+			goto bad;			\
+	} while (0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#81: FILE: fs/ceph/decode.h:17:
+^I^Iif (unlikely(*(p) + (n) > (end))) ^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#85: FILE: fs/ceph/decode.h:21:
+#define ceph_decode_64(p, v)					\
+	do {							\
+		v = get_unaligned_le64(*(p));			\
+		*(p) += sizeof(u64);				\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#90: FILE: fs/ceph/decode.h:26:
+#define ceph_decode_32(p, v)					\
+	do {							\
+		v = get_unaligned_le32(*(p));			\
+		*(p) += sizeof(u32);				\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#95: FILE: fs/ceph/decode.h:31:
+#define ceph_decode_16(p, v)					\
+	do {							\
+		v = get_unaligned_le16(*(p));			\
+		*(p) += sizeof(u16);				\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#100: FILE: fs/ceph/decode.h:36:
+#define ceph_decode_8(p, v)				\
+	do {						\
+		v = *(u8 *)*(p);			\
+		(*p)++;					\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#106: FILE: fs/ceph/decode.h:42:
+#define ceph_decode_copy(p, pv, n)			\
+	do {						\
+		memcpy(pv, *(p), n);			\
+		*(p) += n;				\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#106: FILE: fs/ceph/decode.h:42:
+#define ceph_decode_copy(p, pv, n)			\
+	do {						\
+		memcpy(pv, *(p), n);			\
+		*(p) += n;				\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#113: FILE: fs/ceph/decode.h:49:
+#define ceph_decode_64_safe(p, end, v, bad)			\
+	do {							\
+		ceph_decode_need(p, end, sizeof(u64), bad);	\
+		ceph_decode_64(p, v);				\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#118: FILE: fs/ceph/decode.h:54:
+#define ceph_decode_32_safe(p, end, v, bad)			\
+	do {							\
+		ceph_decode_need(p, end, sizeof(u32), bad);	\
+		ceph_decode_32(p, v);				\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#123: FILE: fs/ceph/decode.h:59:
+#define ceph_decode_16_safe(p, end, v, bad)			\
+	do {							\
+		ceph_decode_need(p, end, sizeof(u16), bad);	\
+		ceph_decode_16(p, v);				\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#129: FILE: fs/ceph/decode.h:65:
+#define ceph_decode_copy_safe(p, end, pv, n, bad)		\
+	do {							\
+		ceph_decode_need(p, end, n, bad);		\
+		ceph_decode_copy(p, pv, n);			\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#129: FILE: fs/ceph/decode.h:65:
+#define ceph_decode_copy_safe(p, end, pv, n, bad)		\
+	do {							\
+		ceph_decode_need(p, end, n, bad);		\
+		ceph_decode_copy(p, pv, n);			\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ts' - possible side-effects?
#138: FILE: fs/ceph/decode.h:74:
+#define ceph_decode_timespec(ts, tv)					\
+	do {								\
+		(ts)->tv_sec = le32_to_cpu((tv)->tv_sec);		\
+		(ts)->tv_nsec = le32_to_cpu((tv)->tv_nsec);		\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'tv' - possible side-effects?
#138: FILE: fs/ceph/decode.h:74:
+#define ceph_decode_timespec(ts, tv)					\
+	do {								\
+		(ts)->tv_sec = le32_to_cpu((tv)->tv_sec);		\
+		(ts)->tv_nsec = le32_to_cpu((tv)->tv_nsec);		\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'tv' - possible side-effects?
#143: FILE: fs/ceph/decode.h:79:
+#define ceph_encode_timespec(tv, ts)				\
+	do {							\
+		(tv)->tv_sec = cpu_to_le32((ts)->tv_sec);	\
+		(tv)->tv_nsec = cpu_to_le32((ts)->tv_nsec);	\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ts' - possible side-effects?
#143: FILE: fs/ceph/decode.h:79:
+#define ceph_encode_timespec(tv, ts)				\
+	do {							\
+		(tv)->tv_sec = cpu_to_le32((ts)->tv_sec);	\
+		(tv)->tv_nsec = cpu_to_le32((ts)->tv_nsec);	\
+	} while (0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#149: FILE: fs/ceph/decode.h:85:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#153: FILE: fs/ceph/decode.h:89:
+#define ceph_encode_64(p, v)						\
+	do {								\
+		put_unaligned_le64(v, (__le64 *)*(p));			\
+		*(p) += sizeof(u64);					\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#158: FILE: fs/ceph/decode.h:94:
+#define ceph_encode_32(p, v)					\
+	do {							\
+		put_unaligned_le32(v, (__le32 *)*(p));		\
+		*(p) += sizeof(u32);				\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#163: FILE: fs/ceph/decode.h:99:
+#define ceph_encode_16(p, v)					\
+	do {							\
+		put_unaligned_le16(v), (__le16 *)*(p));		\
+	*(p) += sizeof(u16);					\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#168: FILE: fs/ceph/decode.h:104:
+#define ceph_encode_8(p, v)			  \
+	do {					  \
+		*(u8 *)*(p) = v;		  \
+		(*(p))++;			  \
+	} while (0)

WARNING:LINE_SPACING: Missing a blank line after declarations
#181: FILE: fs/ceph/decode.h:117:
+	u32 len = path ? strlen(path) : 0;
+	BUG_ON(*p + sizeof(ino) + sizeof(len) + len > end);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#181: FILE: fs/ceph/decode.h:117:
+	BUG_ON(*p + sizeof(ino) + sizeof(len) + len > end);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#192: FILE: fs/ceph/decode.h:128:
+	BUG_ON(*p + sizeof(len) + len > end);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#199: FILE: fs/ceph/decode.h:135:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#207: FILE: fs/ceph/messenger.c:1:
+#include <linux/crc32c.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#234: FILE: fs/ceph/messenger.c:28:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#239: FILE: fs/ceph/messenger.c:33:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#250: FILE: fs/ceph/messenger.c:44:
+		int ret = PTR_ERR(ceph_msgr_wq);
+		pr_err("ceph_msgr_init failed to create workqueue: %d\n", ret);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ceph_msgr_init', this function's name, in a string
#250: FILE: fs/ceph/messenger.c:44:
+		pr_err("ceph_msgr_init failed to create workqueue: %d\n", ret);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#272: FILE: fs/ceph/messenger.c:66:
+		dout("ceph_data_ready on %p state = %lu, queueing work\n",
 		^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ceph_data_ready', this function's name, in a string
#272: FILE: fs/ceph/messenger.c:66:
+		dout("ceph_data_ready on %p state = %lu, queueing work\n",

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#286: FILE: fs/ceph/messenger.c:80:
+		dout("ceph_write_space %p queueing write work\n", con);
 		^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ceph_write_space', this function's name, in a string
#286: FILE: fs/ceph/messenger.c:80:
+		dout("ceph_write_space %p queueing write work\n", con);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#289: FILE: fs/ceph/messenger.c:83:
+		dout("ceph_write_space %p nothing to write\n", con);
 		^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ceph_write_space', this function's name, in a string
#289: FILE: fs/ceph/messenger.c:83:
+		dout("ceph_write_space %p nothing to write\n", con);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#302: FILE: fs/ceph/messenger.c:96:
+	dout("ceph_state_change %p state = %lu sk_state = %u\n",
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ceph_state_change', this function's name, in a string
#302: FILE: fs/ceph/messenger.c:96:
+	dout("ceph_state_change %p state = %lu sk_state = %u\n",

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#310: FILE: fs/ceph/messenger.c:104:
+		dout("ceph_state_change TCP_CLOSE\n");
 		^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ceph_state_change', this function's name, in a string
#310: FILE: fs/ceph/messenger.c:104:
+		dout("ceph_state_change TCP_CLOSE\n");

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#312: FILE: fs/ceph/messenger.c:106:
+		dout("ceph_state_change TCP_CLOSE_WAIT\n");
 		^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ceph_state_change', this function's name, in a string
#312: FILE: fs/ceph/messenger.c:106:
+		dout("ceph_state_change TCP_CLOSE_WAIT\n");

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#322: FILE: fs/ceph/messenger.c:116:
+		dout("ceph_state_change TCP_ESTABLISHED\n");
 		^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ceph_state_change', this function's name, in a string
#322: FILE: fs/ceph/messenger.c:116:
+		dout("ceph_state_change TCP_ESTABLISHED\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#335: FILE: fs/ceph/messenger.c:129:
+	struct sock *sk = sock->sk;
+	sk->sk_user_data = (void *)con;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#341: FILE: fs/ceph/messenger.c:135:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#355: FILE: fs/ceph/messenger.c:149:
+	BUG_ON(con->sock);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#364: FILE: fs/ceph/messenger.c:158:
+	dout("connect %u.%u.%u.%u:%u\n",
 	^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#370: FILE: fs/ceph/messenger.c:164:
+		dout("connect %u.%u.%u.%u:%u EINPROGRESS sk_state = %u\n",
 		^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#377: FILE: fs/ceph/messenger.c:171:
+		pr_err("ceph connect %u.%u.%u.%u:%u error %d\n",
+			IPQUADPORT(*(struct sockaddr_in *)paddr), ret);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#401: FILE: fs/ceph/messenger.c:195:
+static int ceph_tcp_sendmsg(struct socket *sock, struct kvec *iov,
+		     size_t kvlen, size_t len, int more)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#413: FILE: fs/ceph/messenger.c:207:
+
+

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#421: FILE: fs/ceph/messenger.c:215:
+	dout("con_close_socket on %p sock %p\n", con, con->sock);
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'con_close_socket', this function's name, in a string
#421: FILE: fs/ceph/messenger.c:215:
+	dout("con_close_socket on %p sock %p\n", con, con->sock);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#441: FILE: fs/ceph/messenger.c:235:
+}
+static void ceph_msg_remove_list(struct list_head *head)

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#471: FILE: fs/ceph/messenger.c:265:
+	dout("con_close %p peer %u.%u.%u.%u:%u\n", con,
 	^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#484: FILE: fs/ceph/messenger.c:278:
+	dout("con_shutdown %p\n", con);
 	^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#495: FILE: fs/ceph/messenger.c:289:
+	dout("con_open %p %u.%u.%u.%u:%u\n", con, IPQUADPORT(addr->ipaddr));
 	^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#507: FILE: fs/ceph/messenger.c:301:
+	dout("con_get %p nref = %d -> %d\n", con,
 	^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#516: FILE: fs/ceph/messenger.c:310:
+	dout("con_put %p nref = %d -> %d\n", con,
 	^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#518: FILE: fs/ceph/messenger.c:312:
+	BUG_ON(atomic_read(&con->nref) == 0);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#530: FILE: fs/ceph/messenger.c:324:
+	dout("con_init %p\n", con);
 	^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#540: FILE: fs/ceph/messenger.c:334:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#557: FILE: fs/ceph/messenger.c:351:
+
+

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#566: FILE: fs/ceph/messenger.c:360:
+	dout("prepare_write_message_footer %p\n", con);
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'prepare_write_message_footer', this function's name, in a string
#566: FILE: fs/ceph/messenger.c:360:
+	dout("prepare_write_message_footer %p\n", con);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#588: FILE: fs/ceph/messenger.c:382:
+	 * TCP packet that's a good thing. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#601: FILE: fs/ceph/messenger.c:395:
+	m = list_first_entry(&con->out_queue,
+		       struct ceph_msg, list_head);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#605: FILE: fs/ceph/messenger.c:399:
+	BUG_ON(!con->out_qlen);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#610: FILE: fs/ceph/messenger.c:404:
+	dout("prepare_write_message %p seq %lld type %d len %d+%d+%d %d pgs\n",
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'prepare_write_message', this function's name, in a string
#610: FILE: fs/ceph/messenger.c:404:
+	dout("prepare_write_message %p seq %lld type %d len %d+%d+%d %d pgs\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#615: FILE: fs/ceph/messenger.c:409:
+	BUG_ON(le32_to_cpu(m->hdr.front_len) != m->front.iov_len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#633: FILE: fs/ceph/messenger.c:427:
+		cpu_to_le32(crc32c(0, (void *)&m->hdr,
+				      sizeof(m->hdr) - sizeof(m->hdr.crc)));

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#644: FILE: fs/ceph/messenger.c:438:
+	dout("prepare_write_message front_crc %u data_crc %u\n",
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'prepare_write_message', this function's name, in a string
#644: FILE: fs/ceph/messenger.c:438:
+	dout("prepare_write_message front_crc %u data_crc %u\n",

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#670: FILE: fs/ceph/messenger.c:464:
+	dout("prepare_write_ack %p %llu -> %llu\n", con,
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'prepare_write_ack', this function's name, in a string
#670: FILE: fs/ceph/messenger.c:464:
+	dout("prepare_write_ack %p %llu -> %llu\n", con,

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#691: FILE: fs/ceph/messenger.c:485:
+	dout("prepare_write_keepalive %p\n", con);
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'prepare_write_keepalive', this function's name, in a string
#691: FILE: fs/ceph/messenger.c:485:
+	dout("prepare_write_keepalive %p\n", con);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#711: FILE: fs/ceph/messenger.c:505:
+	unsigned global_seq = get_global_seq(con->msgr, 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#725: FILE: fs/ceph/messenger.c:519:
+		BUG();

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#728: FILE: fs/ceph/messenger.c:522:
+	dout("prepare_write_connect %p cseq=%d gseq=%d proto=%d\n", con,
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'prepare_write_connect', this function's name, in a string
#728: FILE: fs/ceph/messenger.c:522:
+	dout("prepare_write_connect %p cseq=%d gseq=%d proto=%d\n", con,

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#755: FILE: fs/ceph/messenger.c:549:
+	dout("prepare_write_connect_retry %p\n", con);
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'prepare_write_connect_retry', this function's name, in a string
#755: FILE: fs/ceph/messenger.c:549:
+	dout("prepare_write_connect_retry %p\n", con);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#769: FILE: fs/ceph/messenger.c:563:
+
+

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#780: FILE: fs/ceph/messenger.c:574:
+	dout("write_partial_kvec %p %d left\n", con, con->out_kvec_bytes);
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'write_partial_kvec', this function's name, in a string
#780: FILE: fs/ceph/messenger.c:574:
+	dout("write_partial_kvec %p %d left\n", con, con->out_kvec_bytes);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#807: FILE: fs/ceph/messenger.c:601:
+	dout("write_partial_kvec %p %d left in %d kvecs ret = %d\n", con,
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'write_partial_kvec', this function's name, in a string
#807: FILE: fs/ceph/messenger.c:601:
+	dout("write_partial_kvec %p %d left in %d kvecs ret = %d\n", con,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#822: FILE: fs/ceph/messenger.c:616:
+	unsigned data_len = le32_to_cpu(msg->hdr.data_len);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#827: FILE: fs/ceph/messenger.c:621:
+	dout("write_partial_msg_pages %p msg %p page %d/%d offset %d\n",
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'write_partial_msg_pages', this function's name, in a string
#827: FILE: fs/ceph/messenger.c:621:
+	dout("write_partial_msg_pages %p msg %p page %d/%d offset %d\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#855: FILE: fs/ceph/messenger.c:649:
+			BUG_ON(kaddr == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!kaddr"
#855: FILE: fs/ceph/messenger.c:649:
+			BUG_ON(kaddr == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#881: FILE: fs/ceph/messenger.c:675:
+	dout("write_partial_msg_pages %p msg %p done\n", con, msg);
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'write_partial_msg_pages', this function's name, in a string
#881: FILE: fs/ceph/messenger.c:675:
+	dout("write_partial_msg_pages %p msg %p done\n", con, msg);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#923: FILE: fs/ceph/messenger.c:717:
+	dout("prepare_read_connect %p\n", con);
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'prepare_read_connect', this function's name, in a string
#923: FILE: fs/ceph/messenger.c:717:
+	dout("prepare_read_connect %p\n", con);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#929: FILE: fs/ceph/messenger.c:723:
+	dout("prepare_read_ack %p\n", con);
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'prepare_read_ack', this function's name, in a string
#929: FILE: fs/ceph/messenger.c:723:
+	dout("prepare_read_ack %p\n", con);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#935: FILE: fs/ceph/messenger.c:729:
+	dout("prepare_read_tag %p\n", con);
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'prepare_read_tag', this function's name, in a string
#935: FILE: fs/ceph/messenger.c:729:
+	dout("prepare_read_tag %p\n", con);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#945: FILE: fs/ceph/messenger.c:739:
+	dout("prepare_read_message %p\n", con);
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'prepare_read_message', this function's name, in a string
#945: FILE: fs/ceph/messenger.c:739:
+	dout("prepare_read_message %p\n", con);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#946: FILE: fs/ceph/messenger.c:740:
+	BUG_ON(con->in_msg != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "con->in_msg"
#946: FILE: fs/ceph/messenger.c:740:
+	BUG_ON(con->in_msg != NULL);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#948: FILE: fs/ceph/messenger.c:742:
+	con->in_front_crc = con->in_middle_crc = con->in_data_crc = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#952: FILE: fs/ceph/messenger.c:746:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#961: FILE: fs/ceph/messenger.c:755:
+		int ret = ceph_tcp_recvmsg(con->sock, object + have, left);
+		if (ret <= 0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#968: FILE: fs/ceph/messenger.c:762:
+
+

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#976: FILE: fs/ceph/messenger.c:770:
+	dout("read_partial_connect %p at %d\n", con, con->in_base_pos);
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'read_partial_connect', this function's name, in a string
#976: FILE: fs/ceph/messenger.c:770:
+	dout("read_partial_connect %p at %d\n", con, con->in_base_pos);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#994: FILE: fs/ceph/messenger.c:788:
+	dout("read_partial_connect %p connect_seq = %u, global_seq = %u\n",
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'read_partial_connect', this function's name, in a string
#994: FILE: fs/ceph/messenger.c:788:
+	dout("read_partial_connect %p connect_seq = %u, global_seq = %u\n",

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1017: FILE: fs/ceph/messenger.c:811:
+	dout("process_connect on %p tag %d\n", con, (int)con->in_tag);
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'process_connect', this function's name, in a string
#1017: FILE: fs/ceph/messenger.c:811:
+	dout("process_connect on %p tag %d\n", con, (int)con->in_tag);

WARNING:SPLIT_STRING: quoted string split across lines
#1034: FILE: fs/ceph/messenger.c:828:
+		pr_err("ceph wrong peer, want %u.%u.%u.%u:%u/%d, "
+		       "got %u.%u.%u.%u:%u/%d, wtf\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1053: FILE: fs/ceph/messenger.c:847:
+		dout("process_connect learned my addr is %u.%u.%u.%u:%u\n",
 		^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'process_connect', this function's name, in a string
#1053: FILE: fs/ceph/messenger.c:847:
+		dout("process_connect learned my addr is %u.%u.%u.%u:%u\n",

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1059: FILE: fs/ceph/messenger.c:853:
+		dout("process_connect got BADPROTOVER my %d != their %d\n",
 		^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'process_connect', this function's name, in a string
#1059: FILE: fs/ceph/messenger.c:853:
+		dout("process_connect got BADPROTOVER my %d != their %d\n",

WARNING:SPLIT_STRING: quoted string split across lines
#1063: FILE: fs/ceph/messenger.c:857:
+		pr_err("ceph %s%lld %u.%u.%u.%u:%u protocol version mismatch,"
+		       " my %d != server's %d\n",

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1075: FILE: fs/ceph/messenger.c:869:
+
+

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1084: FILE: fs/ceph/messenger.c:878:
+		dout("process_connect got RESET peer seq %u\n",
 		^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'process_connect', this function's name, in a string
#1084: FILE: fs/ceph/messenger.c:878:
+		dout("process_connect got RESET peer seq %u\n",

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1104: FILE: fs/ceph/messenger.c:898:
+		dout("process_connect got RETRY my seq = %u, peer_seq = %u\n",
 		^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'process_connect', this function's name, in a string
#1104: FILE: fs/ceph/messenger.c:898:
+		dout("process_connect got RETRY my seq = %u, peer_seq = %u\n",

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1117: FILE: fs/ceph/messenger.c:911:
+		dout("process_connect got RETRY_GLOBAL my %u, peer_gseq = %u\n",
 		^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'process_connect', this function's name, in a string
#1117: FILE: fs/ceph/messenger.c:911:
+		dout("process_connect got RETRY_GLOBAL my %u, peer_gseq = %u\n",

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1132: FILE: fs/ceph/messenger.c:926:
+		dout("process_connect got READY gseq %d cseq %d (%d)\n",
 		^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'process_connect', this function's name, in a string
#1132: FILE: fs/ceph/messenger.c:926:
+		dout("process_connect got READY gseq %d cseq %d (%d)\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'process_connect', this function's name, in a string
#1150: FILE: fs/ceph/messenger.c:944:
+		pr_err("process_connect peer connecting WAIT\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1160: FILE: fs/ceph/messenger.c:954:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1172: FILE: fs/ceph/messenger.c:966:
+
+

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1189: FILE: fs/ceph/messenger.c:983:
+		dout("got ack for seq %llu type %d at %p\n", seq,
 		^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1197: FILE: fs/ceph/messenger.c:991:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1199: FILE: fs/ceph/messenger.c:993:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1201: FILE: fs/ceph/messenger.c:995:
+
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1211: FILE: fs/ceph/messenger.c:1005:
+	unsigned front_len, middle_len, data_len, data_off;

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1214: FILE: fs/ceph/messenger.c:1008:
+	dout("read_partial_message con %p msg %p\n", con, m);
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'read_partial_message', this function's name, in a string
#1214: FILE: fs/ceph/messenger.c:1008:
+	dout("read_partial_message con %p msg %p\n", con, m);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'read_partial_message', this function's name, in a string
#1229: FILE: fs/ceph/messenger.c:1023:
+				pr_err("ceph read_partial_message bad hdr "

WARNING:SPLIT_STRING: quoted string split across lines
#1230: FILE: fs/ceph/messenger.c:1024:
+				pr_err("ceph read_partial_message bad hdr "
+				       " crc %u != expected %u\n",

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1249: FILE: fs/ceph/messenger.c:1043:
+		dout("got hdr type %d front %d data %d\n", con->in_hdr.type,
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1254: FILE: fs/ceph/messenger.c:1048:
+			dout("alloc_msg returned NULL, skipping message\n");
 			^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1273: FILE: fs/ceph/messenger.c:1067:
+		BUG_ON(m->front.iov_base == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!m->front.iov_base"
#1273: FILE: fs/ceph/messenger.c:1067:
+		BUG_ON(m->front.iov_base == NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1282: FILE: fs/ceph/messenger.c:1076:
+			con->in_front_crc = crc32c(0, m->front.iov_base,
+						      m->front.iov_len);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!m->middle"
#1288: FILE: fs/ceph/messenger.c:1082:
+		if (m->middle == NULL) {

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1293: FILE: fs/ceph/messenger.c:1087:
+				dout("alloc_middle failed, skipping payload\n");
 				^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1312: FILE: fs/ceph/messenger.c:1106:
+			con->in_middle_crc = crc32c(0, m->middle->vec.iov_base,
+						      m->middle->vec.iov_len);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1330: FILE: fs/ceph/messenger.c:1124:
+			dout("%p prepare_pages failed, skipping payload\n", m);
 			^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1337: FILE: fs/ceph/messenger.c:1131:
+		BUG_ON(m->nr_pages < want);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1342: FILE: fs/ceph/messenger.c:1136:
+		BUG_ON(m->pages == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!m->pages"
#1342: FILE: fs/ceph/messenger.c:1136:
+		BUG_ON(m->pages == NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1349: FILE: fs/ceph/messenger.c:1143:
+				crc32c(con->in_data_crc,
+					  p + con->in_msg_pos.page_pos, ret);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1373: FILE: fs/ceph/messenger.c:1167:
+	dout("read_partial_message got msg %p %d (%u) + %d (%u) + %d (%u)\n",
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'read_partial_message', this function's name, in a string
#1373: FILE: fs/ceph/messenger.c:1167:
+	dout("read_partial_message got msg %p %d (%u) + %d (%u) + %d (%u)\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'read_partial_message', this function's name, in a string
#1379: FILE: fs/ceph/messenger.c:1173:
+		pr_err("ceph read_partial_message %p front crc %u != exp. %u\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'read_partial_message', this function's name, in a string
#1384: FILE: fs/ceph/messenger.c:1178:
+		pr_err("ceph read_partial_message %p middle crc %u != exp %u\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'read_partial_message', this function's name, in a string
#1391: FILE: fs/ceph/messenger.c:1185:
+		pr_err("ceph read_partial_message %p data crc %u != exp. %u\n",

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1419: FILE: fs/ceph/messenger.c:1213:
+	dout("===== %p %llu from %s%lld %d=%s len %d+%d (%u %u %u) =====\n",
 	^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1431: FILE: fs/ceph/messenger.c:1225:
+
+

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1441: FILE: fs/ceph/messenger.c:1235:
+	dout("try_write start %p state %lu nref %d\n", con, con->state,
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'try_write', this function's name, in a string
#1441: FILE: fs/ceph/messenger.c:1235:
+	dout("try_write start %p state %lu nref %d\n", con, con->state,

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1446: FILE: fs/ceph/messenger.c:1240:
+	dout("try_write out_kvec_bytes %d\n", con->out_kvec_bytes);
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'try_write', this function's name, in a string
#1446: FILE: fs/ceph/messenger.c:1240:
+	dout("try_write out_kvec_bytes %d\n", con->out_kvec_bytes);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!con->sock"
#1449: FILE: fs/ceph/messenger.c:1243:
+	if (con->sock == NULL) {

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1463: FILE: fs/ceph/messenger.c:1257:
+		dout("try_write initiating connect on %p new state %lu\n",
 		^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'try_write', this function's name, in a string
#1463: FILE: fs/ceph/messenger.c:1257:
+		dout("try_write initiating connect on %p new state %lu\n",

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1481: FILE: fs/ceph/messenger.c:1275:
+			dout("try_write write_partial_skip err %d\n", ret);
 			^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'try_write', this function's name, in a string
#1481: FILE: fs/ceph/messenger.c:1275:
+			dout("try_write write_partial_skip err %d\n", ret);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1490: FILE: fs/ceph/messenger.c:1284:
+			dout("try_write write_partial_kvec err %d\n", ret);
 			^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'try_write', this function's name, in a string
#1490: FILE: fs/ceph/messenger.c:1284:
+			dout("try_write write_partial_kvec err %d\n", ret);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1503: FILE: fs/ceph/messenger.c:1297:
+			dout("try_write write_partial_msg_pages err %d\n",
 			^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'try_write', this function's name, in a string
#1503: FILE: fs/ceph/messenger.c:1297:
+			dout("try_write write_partial_msg_pages err %d\n",

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1527: FILE: fs/ceph/messenger.c:1321:
+	dout("try_write nothing else to write.\n");
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'try_write', this function's name, in a string
#1527: FILE: fs/ceph/messenger.c:1321:
+	dout("try_write nothing else to write.\n");

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1532: FILE: fs/ceph/messenger.c:1326:
+	dout("try_write done on %p\n", con);
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'try_write', this function's name, in a string
#1532: FILE: fs/ceph/messenger.c:1326:
+	dout("try_write done on %p\n", con);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1536: FILE: fs/ceph/messenger.c:1330:
+
+

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1552: FILE: fs/ceph/messenger.c:1346:
+	dout("try_read start on %p\n", con);
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'try_read', this function's name, in a string
#1552: FILE: fs/ceph/messenger.c:1346:
+	dout("try_read start on %p\n", con);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1556: FILE: fs/ceph/messenger.c:1350:
+	dout("try_read tag %d in_base_pos %d\n", (int)con->in_tag,
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'try_read', this function's name, in a string
#1556: FILE: fs/ceph/messenger.c:1350:
+	dout("try_read tag %d in_base_pos %d\n", (int)con->in_tag,

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1559: FILE: fs/ceph/messenger.c:1353:
+		dout("try_read connecting\n");
 		^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'try_read', this function's name, in a string
#1559: FILE: fs/ceph/messenger.c:1353:
+		dout("try_read connecting\n");

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1578: FILE: fs/ceph/messenger.c:1372:
+		dout("skipping %d / %d bytes\n", skip, -con->in_base_pos);
 		^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1578: FILE: fs/ceph/messenger.c:1372:
+		int skip = min(1024, -con->in_base_pos);
+		dout("skipping %d / %d bytes\n", skip, -con->in_base_pos);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1593: FILE: fs/ceph/messenger.c:1387:
+		dout("try_read got tag %d\n", (int)con->in_tag);
 		^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'try_read', this function's name, in a string
#1593: FILE: fs/ceph/messenger.c:1387:
+		dout("try_read got tag %d\n", (int)con->in_tag);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1639: FILE: fs/ceph/messenger.c:1433:
+	dout("try_read done on %p\n", con);
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'try_read', this function's name, in a string
#1639: FILE: fs/ceph/messenger.c:1433:
+	dout("try_read done on %p\n", con);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'try_read', this function's name, in a string
#1643: FILE: fs/ceph/messenger.c:1437:
+	pr_err("ceph try_read bad con->in_tag = %d\n", (int)con->in_tag);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1649: FILE: fs/ceph/messenger.c:1443:
+
+

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1671: FILE: fs/ceph/messenger.c:1465:
+		dout("queue_con %p ignoring: DEAD\n",
 		^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'queue_con', this function's name, in a string
#1671: FILE: fs/ceph/messenger.c:1465:
+		dout("queue_con %p ignoring: DEAD\n",

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1677: FILE: fs/ceph/messenger.c:1471:
+		dout("queue_con %p ref count 0\n", con);
 		^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'queue_con', this function's name, in a string
#1677: FILE: fs/ceph/messenger.c:1471:
+		dout("queue_con %p ref count 0\n", con);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1683: FILE: fs/ceph/messenger.c:1477:
+		dout("queue_con %p - already BUSY\n", con);
 		^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'queue_con', this function's name, in a string
#1683: FILE: fs/ceph/messenger.c:1477:
+		dout("queue_con %p - already BUSY\n", con);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1686: FILE: fs/ceph/messenger.c:1480:
+		dout("queue_con %p - already queued\n", con);
 		^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'queue_con', this function's name, in a string
#1686: FILE: fs/ceph/messenger.c:1480:
+		dout("queue_con %p - already queued\n", con);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1689: FILE: fs/ceph/messenger.c:1483:
+		dout("queue_con %p\n", con);
 		^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'queue_con', this function's name, in a string
#1689: FILE: fs/ceph/messenger.c:1483:
+		dout("queue_con %p\n", con);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1704: FILE: fs/ceph/messenger.c:1498:
+		dout("con_work %p BUSY already set\n", con);
 		^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'con_work', this function's name, in a string
#1704: FILE: fs/ceph/messenger.c:1498:
+		dout("con_work %p BUSY already set\n", con);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1707: FILE: fs/ceph/messenger.c:1501:
+	dout("con_work %p start, clearing QUEUED\n", con);
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'con_work', this function's name, in a string
#1707: FILE: fs/ceph/messenger.c:1501:
+	dout("con_work %p start, clearing QUEUED\n", con);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1711: FILE: fs/ceph/messenger.c:1505:
+		dout("con_work CLOSED\n");
 		^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'con_work', this function's name, in a string
#1711: FILE: fs/ceph/messenger.c:1505:
+		dout("con_work CLOSED\n");

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1717: FILE: fs/ceph/messenger.c:1511:
+		dout("con_work OPENING\n");
 		^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'con_work', this function's name, in a string
#1717: FILE: fs/ceph/messenger.c:1511:
+		dout("con_work OPENING\n");

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1730: FILE: fs/ceph/messenger.c:1524:
+	dout("con->state=%lu\n", con->state);
 	^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1733: FILE: fs/ceph/messenger.c:1527:
+			dout("con_work %p QUEUED reset, looping\n", con);
 			^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'con_work', this function's name, in a string
#1733: FILE: fs/ceph/messenger.c:1527:
+			dout("con_work %p QUEUED reset, looping\n", con);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1736: FILE: fs/ceph/messenger.c:1530:
+		dout("con_work %p QUEUED reset, but just faulted\n", con);
 		^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'con_work', this function's name, in a string
#1736: FILE: fs/ceph/messenger.c:1530:
+		dout("con_work %p QUEUED reset, but just faulted\n", con);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1739: FILE: fs/ceph/messenger.c:1533:
+	dout("con_work %p done\n", con);
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'con_work', this function's name, in a string
#1739: FILE: fs/ceph/messenger.c:1533:
+	dout("con_work %p done\n", con);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1745: FILE: fs/ceph/messenger.c:1539:
+
+

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1754: FILE: fs/ceph/messenger.c:1548:
+	dout("fault %p state %lu to peer %u.%u.%u.%u:%u\n",
 	^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1758: FILE: fs/ceph/messenger.c:1552:
+		dout("fault on LOSSYTX channel\n");
 		^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1768: FILE: fs/ceph/messenger.c:1562:
+	 * in a STANDBY state (i.e., don't try to reconnect just yet). */

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1771: FILE: fs/ceph/messenger.c:1565:
+		dout("fault setting STANDBY\n");
 		^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1778: FILE: fs/ceph/messenger.c:1572:
+	 * delay. */

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1788: FILE: fs/ceph/messenger.c:1582:
+	dout("fault queueing %p delay %lu\n", con, con->delay);
 	^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1799: FILE: fs/ceph/messenger.c:1593:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!msgr"
#1809: FILE: fs/ceph/messenger.c:1603:
+	if (msgr == NULL)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1815: FILE: fs/ceph/messenger.c:1609:
+	 * is being written over the socket */

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1835: FILE: fs/ceph/messenger.c:1629:
+	dout("messenger_create %p\n", msgr);
 	^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1841: FILE: fs/ceph/messenger.c:1635:
+	dout("destroy %p\n", msgr);
 	^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1845: FILE: fs/ceph/messenger.c:1639:
+	dout("destroyed messenger %p\n", msgr);
 	^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1854: FILE: fs/ceph/messenger.c:1648:
+		dout("con_send %p closed, dropping %p\n", con, msg);
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1868: FILE: fs/ceph/messenger.c:1662:
+	dout("----- %p %llu to %s%lld %d=%s len %d+%d+%d -----\n", msg,
 	^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1878: FILE: fs/ceph/messenger.c:1672:
+	 * new work */

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1890: FILE: fs/ceph/messenger.c:1684:
+		dout("con_revoke %p msg %p\n", con, msg);
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1904: FILE: fs/ceph/messenger.c:1698:
+		dout("con_revoke %p msg %p - not queued (sent?)\n", con, msg);
 		^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1919: FILE: fs/ceph/messenger.c:1713:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!m"
#1930: FILE: fs/ceph/messenger.c:1724:
+	if (m == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!m->front.iov_base"
#1958: FILE: fs/ceph/messenger.c:1752:
+		if (m->front.iov_base == NULL) {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ceph_msg_new', this function's name, in a string
#1959: FILE: fs/ceph/messenger.c:1753:
+			pr_err("ceph_msg_new can't allocate %d bytes\n",

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#1959: FILE: fs/ceph/messenger.c:1753:
+		if (m->front.iov_base == NULL) {
+			pr_err("ceph_msg_new can't allocate %d bytes\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1960: FILE: fs/ceph/messenger.c:1754:
+			pr_err("ceph_msg_new can't allocate %d bytes\n",
+			     front_len);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1975: FILE: fs/ceph/messenger.c:1769:
+	dout("ceph_msg_new %p page %d~%d -> %d\n", m, page_off, page_len,
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ceph_msg_new', this function's name, in a string
#1975: FILE: fs/ceph/messenger.c:1769:
+	dout("ceph_msg_new %p page %d~%d -> %d\n", m, page_off, page_len,

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ceph_msg_new', this function's name, in a string
#1982: FILE: fs/ceph/messenger.c:1776:
+	pr_err("ceph_msg_new can't create type %d len %d\n", type, front_len);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#2016: FILE: fs/ceph/messenger.c:1810:
+	dout("alloc_middle %p type %d %s middle_len %d\n", msg, type,
 	^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2018: FILE: fs/ceph/messenger.c:1812:
+	BUG_ON(!middle_len);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2019: FILE: fs/ceph/messenger.c:1813:
+	BUG_ON(msg->middle);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2027: FILE: fs/ceph/messenger.c:1821:
+
+

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#2033: FILE: fs/ceph/messenger.c:1827:
+	dout("msg_kfree %p\n", m);
 	^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#2046: FILE: fs/ceph/messenger.c:1840:
+	dout("ceph_msg_put %p %d -> %d\n", m, atomic_read(&m->nref),
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ceph_msg_put', this function's name, in a string
#2046: FILE: fs/ceph/messenger.c:1840:
+	dout("ceph_msg_put %p %d -> %d\n", m, atomic_read(&m->nref),

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2047: FILE: fs/ceph/messenger.c:1841:
+	     atomic_read(&m->nref)-1);
 	                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ceph_msg_put', this function's name, in a string
#2049: FILE: fs/ceph/messenger.c:1843:
+		pr_err("bad ceph_msg_put on %p %llu %d=%s %d+%d\n",

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#2058: FILE: fs/ceph/messenger.c:1852:
+		dout("ceph_msg_put last one on %p\n", m);
 		^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ceph_msg_put', this function's name, in a string
#2058: FILE: fs/ceph/messenger.c:1852:
+		dout("ceph_msg_put last one on %p\n", m);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2081: FILE: fs/ceph/messenger.h:1:
+#ifndef __FS_CEPH_MESSENGER_H

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2097: FILE: fs/ceph/messenger.h:17:
+#define IPQUADPORT(n)							\
+	(unsigned int)((be32_to_cpu((n).sin_addr.s_addr) >> 24)) & 0xFF, \
+	(unsigned int)((be32_to_cpu((n).sin_addr.s_addr)) >> 16) & 0xFF, \
+	(unsigned int)((be32_to_cpu((n).sin_addr.s_addr))>>8) & 0xFF, \
+	(unsigned int)((be32_to_cpu((n).sin_addr.s_addr))) & 0xFF, \
+	(unsigned int)(ntohs((n).sin_port))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#2097: FILE: fs/ceph/messenger.h:17:
+#define IPQUADPORT(n)							\
+	(unsigned int)((be32_to_cpu((n).sin_addr.s_addr) >> 24)) & 0xFF, \
+	(unsigned int)((be32_to_cpu((n).sin_addr.s_addr)) >> 16) & 0xFF, \
+	(unsigned int)((be32_to_cpu((n).sin_addr.s_addr))>>8) & 0xFF, \
+	(unsigned int)((be32_to_cpu((n).sin_addr.s_addr))) & 0xFF, \
+	(unsigned int)(ntohs((n).sin_port))

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#2100: FILE: fs/ceph/messenger.h:20:
+	(unsigned int)((be32_to_cpu((n).sin_addr.s_addr))>>8) & 0xFF, \
 	                                                 ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2104: FILE: fs/ceph/messenger.h:24:
+
+

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ceph_connection *' should also have an identifier name
#2111: FILE: fs/ceph/messenger.h:31:
+	struct ceph_connection *(*get)(struct ceph_connection *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ceph_connection *' should also have an identifier name
#2112: FILE: fs/ceph/messenger.h:32:
+	void (*put)(struct ceph_connection *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#2115: FILE: fs/ceph/messenger.h:35:
+	void (*dispatch) (struct ceph_connection *con, struct ceph_msg *m);

WARNING:SPACING: Unnecessary space before function pointer arguments
#2118: FILE: fs/ceph/messenger.h:38:
+	void (*bad_proto) (struct ceph_connection *con);

WARNING:SPACING: Unnecessary space before function pointer arguments
#2121: FILE: fs/ceph/messenger.h:41:
+	void (*fault) (struct ceph_connection *con);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2124: FILE: fs/ceph/messenger.h:44:
+	 * we sent (or they tried to send us) may be lost. */

WARNING:SPACING: Unnecessary space before function pointer arguments
#2125: FILE: fs/ceph/messenger.h:45:
+	void (*peer_reset) (struct ceph_connection *con);

WARNING:SPACING: Unnecessary space before function pointer arguments
#2127: FILE: fs/ceph/messenger.h:47:
+	struct ceph_msg * (*alloc_msg) (struct ceph_connection *con,

WARNING:SPACING: Unnecessary space before function pointer arguments
#2129: FILE: fs/ceph/messenger.h:49:
+	int (*alloc_middle) (struct ceph_connection *con,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2132: FILE: fs/ceph/messenger.h:52:
+	 * should read the data into. */

WARNING:SPACING: Unnecessary space before function pointer arguments
#2133: FILE: fs/ceph/messenger.h:53:
+	int (*prepare_pages) (struct ceph_connection *con, struct ceph_msg *m,

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2150: FILE: fs/ceph/messenger.h:70:
+#define ENTITY_NAME(n) ceph_name_type_str((n).type), le64_to_cpu((n).num)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#2150: FILE: fs/ceph/messenger.h:70:
+#define ENTITY_NAME(n) ceph_name_type_str((n).type), le64_to_cpu((n).num)

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#2163: FILE: fs/ceph/messenger.h:83:
+	spinlock_t global_seq_lock;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2177: FILE: fs/ceph/messenger.h:97:
+	unsigned nr_pages;              /* size of page array */

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2194: FILE: fs/ceph/messenger.h:114:
+#define BASE_DELAY_INTERVAL	(HZ/2)
                            	   ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2212: FILE: fs/ceph/messenger.h:132:
+			    * state with the peer. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2241: FILE: fs/ceph/messenger.h:161:
+	u32 connect_seq;      /* identify the most recent connection
+				 attempt for this connection, client */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2241: FILE: fs/ceph/messenger.h:161:
+				 attempt for this connection, client */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2248: FILE: fs/ceph/messenger.h:168:
+	unsigned out_qlen;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2271: FILE: fs/ceph/messenger.h:191:
+	struct ceph_msg *out_msg;        /* sending message (== tail of
+					    out_sent) */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2271: FILE: fs/ceph/messenger.h:191:
+					    out_sent) */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2297: FILE: fs/ceph/messenger.h:217:
+extern int ceph_msgr_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2298: FILE: fs/ceph/messenger.h:218:
+extern void ceph_msgr_exit(void);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2300: FILE: fs/ceph/messenger.h:220:
+extern struct ceph_messenger *ceph_messenger_create(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2300: FILE: fs/ceph/messenger.h:220:
+extern struct ceph_messenger *ceph_messenger_create(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2302: FILE: fs/ceph/messenger.h:222:
+extern void ceph_messenger_destroy(struct ceph_messenger *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ceph_messenger *' should also have an identifier name
#2302: FILE: fs/ceph/messenger.h:222:
+extern void ceph_messenger_destroy(struct ceph_messenger *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2304: FILE: fs/ceph/messenger.h:224:
+extern void ceph_con_init(struct ceph_messenger *msgr,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2306: FILE: fs/ceph/messenger.h:226:
+extern void ceph_con_shutdown(struct ceph_connection *con);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2307: FILE: fs/ceph/messenger.h:227:
+extern void ceph_con_open(struct ceph_connection *con,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2309: FILE: fs/ceph/messenger.h:229:
+extern void ceph_con_close(struct ceph_connection *con);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2310: FILE: fs/ceph/messenger.h:230:
+extern void ceph_con_send(struct ceph_connection *con, struct ceph_msg *msg);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2311: FILE: fs/ceph/messenger.h:231:
+extern void ceph_con_revoke(struct ceph_connection *con, struct ceph_msg *msg);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2312: FILE: fs/ceph/messenger.h:232:
+extern void ceph_con_keepalive(struct ceph_connection *con);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2313: FILE: fs/ceph/messenger.h:233:
+extern struct ceph_connection *ceph_con_get(struct ceph_connection *con);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2314: FILE: fs/ceph/messenger.h:234:
+extern void ceph_con_put(struct ceph_connection *con);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2316: FILE: fs/ceph/messenger.h:236:
+extern struct ceph_msg *ceph_msg_new(int type, int front_len,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2319: FILE: fs/ceph/messenger.h:239:
+extern void ceph_msg_kfree(struct ceph_msg *m);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2321: FILE: fs/ceph/messenger.h:241:
+extern struct ceph_msg *ceph_alloc_msg(struct ceph_connection *con,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2323: FILE: fs/ceph/messenger.h:243:
+extern int ceph_alloc_middle(struct ceph_connection *con, struct ceph_msg *msg);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2325: FILE: fs/ceph/messenger.h:245:
+
+

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#2328: FILE: fs/ceph/messenger.h:248:
+	dout("ceph_msg_get %p %d -> %d\n", msg, atomic_read(&msg->nref),
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ceph_msg_get', this function's name, in a string
#2328: FILE: fs/ceph/messenger.h:248:
+	dout("ceph_msg_get %p %d -> %d\n", msg, atomic_read(&msg->nref),

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2329: FILE: fs/ceph/messenger.h:249:
+	     atomic_read(&msg->nref)+1);
 	                            ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2333: FILE: fs/ceph/messenger.h:253:
+}
+extern void ceph_msg_put(struct ceph_msg *msg);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2333: FILE: fs/ceph/messenger.h:253:
+extern void ceph_msg_put(struct ceph_msg *msg);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000068922.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 221 warnings, 91 checks, 2259 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000068922.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
