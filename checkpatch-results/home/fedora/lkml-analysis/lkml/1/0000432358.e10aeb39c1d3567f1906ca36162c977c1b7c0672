WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
master.kernel.org:/pub/scm/linux/kernel/git/jgarzik/libata-dev.git upstream-linus

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#159: FILE: drivers/ata/Kconfig:5:
+menuconfig ATA
+	tristate "Serial ATA (prod) and Parallel ATA (experimental) drivers"
 	depends on HAS_IOMEM
 	depends on BLOCK
 	depends on BLOCK
 	depends on BLOCK
 	depends on BLOCK
 	depends on !(M32R || M68K) || BROKEN
 	depends on !SUN4 || BROKEN

Kconfig symbols should have a help text which fully describes
it.

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#395: FILE: drivers/ata/libata-acpi.c:317:
+				__FUNCTION__, ata_dev_enabled(dev),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#409: FILE: drivers/ata/libata-acpi.c:329:
+				ata_dev_printk(dev, KERN_DEBUG,
 					"%s: pata_get_dev_handle failed (%d)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#420: FILE: drivers/ata/libata-acpi.c:338:
+				ata_dev_printk(dev, KERN_DEBUG,
 					"%s: sata_get_dev_handle failed (%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#438: FILE: drivers/ata/libata-acpi.c:354:
+				ata_dev_printk(dev, KERN_DEBUG,
 					"%s: chan adr=%d: chan_handle=0x%p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#460: FILE: drivers/ata/libata-acpi.c:372:
+			err = get_sata_adr(gdev, dev_handle, pcidevfn, 0,
+					ap, dev, &dev_adr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#468: FILE: drivers/ata/libata-acpi.c:378:
+				ata_dev_printk(dev, KERN_DEBUG,
 					"%s: get_sata/pata_adr failed: "

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#482: FILE: drivers/ata/libata-acpi.c:393:
+	status = acpi_evaluate_object(dev->obj_handle, "_GTF",
 					NULL, &output);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#487: FILE: drivers/ata/libata-acpi.c:397:
+			ata_dev_printk(dev, KERN_DEBUG,
 				"%s: Run _GTF error: status = 0x%x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#514: FILE: drivers/ata/libata-acpi.c:429:
+			ata_dev_printk(dev, KERN_ERR,
 				"%s: unexpected GTF length (%d) or addr (0x%p)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#573: FILE: drivers/ata/libata-acpi.c:502:
+		ata_dev_printk(dev, KERN_ERR,
 			"%s: ata_exec_internal failed: %u\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#623: FILE: drivers/ata/libata-acpi.c:542:
+			ata_dev_printk(dev, KERN_ERR,
 				"%s: unexpected GTF length (%d)\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#722: FILE: drivers/ata/libata-acpi.c:641:
+			       __FUNCTION__, dev->devno, ap->port_no);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#729: FILE: drivers/ata/libata-acpi.c:647:
+			ata_dev_printk(dev, KERN_DEBUG,
 				"%s: Not a SATA device\n", __FUNCTION__);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#741: FILE: drivers/ata/libata-acpi.c:657:
+			ata_dev_printk(dev, KERN_DEBUG,
 				"%s: sata_get_dev_handle failed (%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#752: FILE: drivers/ata/libata-acpi.c:666:
+		err = get_sata_adr(gdev, handle, pcidevfn, dev->devno, ap, dev,
 					&dev_adr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#759: FILE: drivers/ata/libata-acpi.c:671:
+				ata_dev_printk(dev, KERN_DEBUG,
 					"%s: get_sata_adr failed: "

WARNING:SPLIT_STRING: quoted string split across lines
#804: FILE: drivers/ata/libata-core.c:107:
+MODULE_PARM_DESC(spindown_compat, "Enable backward compatible spindown "
+		 "behavior.  Will be removed.  More info can be found in "

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#805: FILE: drivers/ata/libata-core.c:108:
+		 "behavior.  Will be removed.  More info can be found in "
+		 "Documentation/feature-removal-schedule.txt\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'err_mask == AC_ERR_DEV'
#827: FILE: drivers/ata/libata-core.c:1711:
+		if (may_fallback &&
+		    (err_mask == AC_ERR_DEV) && (tf.feature & ATA_ABORTED)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1451: FILE: drivers/ata/libata-scsi.c:955:
+			static int warned = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1456: FILE: drivers/ata/libata-scsi.c:960:
+				ata_dev_printk(qc->dev, KERN_WARNING,
+					"DISK MIGHT NOT BE SPUN DOWN PROPERLY. "

WARNING:SPLIT_STRING: quoted string split across lines
#1457: FILE: drivers/ata/libata-scsi.c:961:
+					"DISK MIGHT NOT BE SPUN DOWN PROPERLY. "
+					"UPDATE SHUTDOWN UTILITY\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1459: FILE: drivers/ata/libata-scsi.c:963:
+				ata_dev_printk(qc->dev, KERN_WARNING,
+					"For more info, visit "

WARNING:SPLIT_STRING: quoted string split across lines
#1460: FILE: drivers/ata/libata-scsi.c:964:
+					"For more info, visit "
+					"http://linux-ata.org/shutdown.html\n");

WARNING:PREFER_DEV_LEVEL: Prefer dev_warn(... to dev_printk(KERN_WARNING, ...
#1563: FILE: drivers/ata/libata-sff.c:627:
+			dev_printk(KERN_WARNING, gdev,

WARNING:SPLIT_STRING: quoted string split across lines
#1565: FILE: drivers/ata/libata-sff.c:629:
+				   "failed to request/iomap BARs for port %d "
+				   "(errno=%d)\n", i, rc);

WARNING:PREFER_DEV_LEVEL: Prefer dev_err(... to dev_printk(KERN_ERR, ...
#1583: FILE: drivers/ata/libata-sff.c:647:
+		dev_printk(KERN_ERR, gdev, "no available native port\n");

WARNING:PREFER_DEV_LEVEL: Prefer dev_warn(... to dev_printk(KERN_WARNING, ...
#1629: FILE: drivers/ata/libata-sff.c:780:
+		dev_printk(KERN_WARNING, host->dev,

CHECK:BRACES: Unbalanced braces around else statement
#1682: FILE: drivers/ata/libata-sff.c:833:
+		else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_DEV_LEVEL: Prefer dev_err(... to dev_printk(KERN_ERR, ...
#1691: FILE: drivers/ata/libata-sff.c:841:
+		dev_printk(KERN_ERR, gdev, "no available legacy port\n");

ERROR:POINTER_LOCATION: "foo * const * bar" should be "foo * const *bar"
#1724: FILE: drivers/ata/libata-sff.c:951:
+		     const struct ata_port_info * const * ppi)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_DEV_LEVEL: Prefer dev_err(... to dev_printk(KERN_ERR, ...
#1750: FILE: drivers/ata/libata-sff.c:971:
+		dev_printk(KERN_ERR, &pdev->dev,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1841: FILE: drivers/ata/libata.h:102:
+extern int ata_acpi_push_id(struct ata_device *dev);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1848: FILE: drivers/ata/libata.h:108:
 }
+static inline int ata_acpi_push_id(struct ata_device *dev)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#1946: FILE: drivers/ata/pata_ali.c:595:
+        ^Ippi[0] = &info_20;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1946: FILE: drivers/ata/pata_ali.c:595:
+        ^Ippi[0] = &info_20;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1946: FILE: drivers/ata/pata_ali.c:595:
+        ^Ippi[0] = &info_20;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1949: FILE: drivers/ata/pata_ali.c:597:
+        ^Ippi[0] = &info_c2;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1949: FILE: drivers/ata/pata_ali.c:597:
+        ^Ippi[0] = &info_c2;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1949: FILE: drivers/ata/pata_ali.c:597:
+        ^Ippi[0] = &info_c2;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1952: FILE: drivers/ata/pata_ali.c:599:
+        ^Ippi[0] = &info_c3;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1952: FILE: drivers/ata/pata_ali.c:599:
+        ^Ippi[0] = &info_c3;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1952: FILE: drivers/ata/pata_ali.c:599:
+        ^Ippi[0] = &info_c3;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1955: FILE: drivers/ata/pata_ali.c:601:
+        ^Ippi[0] = &info_c4;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1955: FILE: drivers/ata/pata_ali.c:601:
+        ^Ippi[0] = &info_c4;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1955: FILE: drivers/ata/pata_ali.c:601:
+        ^Ippi[0] = &info_c4;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1958: FILE: drivers/ata/pata_ali.c:603:
+        ^Ippi[0] = &info_c5;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1958: FILE: drivers/ata/pata_ali.c:603:
+        ^Ippi[0] = &info_c5;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1958: FILE: drivers/ata/pata_ali.c:603:
+        ^Ippi[0] = &info_c5;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1967: FILE: drivers/ata/pata_ali.c:612:
+^I        ^Ippi[0] = &info_20_udma;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1967: FILE: drivers/ata/pata_ali.c:612:
+^I        ^Ippi[0] = &info_20_udma;$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2095: FILE: drivers/ata/pata_artop.c:485:
+	BUG_ON(ppi[0] == NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ppi[0]"
#2095: FILE: drivers/ata/pata_artop.c:485:
+	BUG_ON(ppi[0] == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LINE_SPACING: Missing a blank line after declarations
#2134: FILE: drivers/ata/pata_atiixp.c:280:
+	const struct ata_port_info *ppi[] = { &info, NULL };
+	return ata_pci_init_one(dev, ppi);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2975: FILE: drivers/ata/pata_ns87410.c:201:
+	const struct ata_port_info *ppi[] = { &info, NULL };
+	return ata_pci_init_one(dev, ppi);

ERROR:CODE_INDENT: code indent should use tabs where possible
#3383: FILE: drivers/ata/pata_serverworks.c:528:
+^I^I ^Ippi[0] = &info[3];$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3383: FILE: drivers/ata/pata_serverworks.c:528:
+^I^I ^Ippi[0] = &info[3];$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#3499: FILE: drivers/ata/pata_sis.c:707:
 };
+static const struct ata_port_info sis_info33 = {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#3508: FILE: drivers/ata/pata_sis.c:715:
 };
+static const struct ata_port_info sis_info66 = {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#3516: FILE: drivers/ata/pata_sis.c:722:
 };
+static const struct ata_port_info sis_info100 = {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#3524: FILE: drivers/ata/pata_sis.c:729:
 };
+static const struct ata_port_info sis_info100_early = {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#3532: FILE: drivers/ata/pata_sis.c:736:
 };
+const struct ata_port_info sis_info133 = {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#3540: FILE: drivers/ata/pata_sis.c:743:
 };
+static const struct ata_port_info sis_info133_early = {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#4074: FILE: include/linux/libata.h:688:
+extern int ata_pci_init_one (struct pci_dev *pdev,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4074: FILE: include/linux/libata.h:688:
+extern int ata_pci_init_one (struct pci_dev *pdev,

ERROR:POINTER_LOCATION: "foo * const * bar" should be "foo * const *bar"
#4075: FILE: include/linux/libata.h:689:
+			     const struct ata_port_info * const * ppi);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4094: FILE: include/linux/libata.h:854:
+extern int ata_pci_init_native_host(struct ata_host *host);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4095: FILE: include/linux/libata.h:855:
+extern int ata_pci_init_bmdma(struct ata_host *host);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000432358.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 10 errors, 30 warnings, 30 checks, 3498 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000432358.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
