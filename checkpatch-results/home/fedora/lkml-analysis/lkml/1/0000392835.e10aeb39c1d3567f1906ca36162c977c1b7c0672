WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
that the kupdate function can avoid having to walk all the dirty inodes on the

WARNING:LINE_SPACING: Missing a blank line after declarations
#83: FILE: fs/fs-writeback.c:36:
+		struct inode *inode = list_entry(cursor, struct inode, i_list);
+		if (print_stuff) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#84: FILE: fs/fs-writeback.c:37:
+			printk("%p:%lu\n", inode, inode->dirtied_when);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#96: FILE: fs/fs-writeback.c:49:
+static void __check_dirty_inode_list(struct super_block *sb,
+			struct inode *inode, const char *file, int line)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#104: FILE: fs/fs-writeback.c:57:
+			printk("%s:%d: s_dirty got screwed up.  inode=%p:%lu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#105: FILE: fs/fs-writeback.c:58:
+			printk("%s:%d: s_dirty got screwed up.  inode=%p:%lu\n",
+					file, line, inode, inode->dirtied_when);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#107: FILE: fs/fs-writeback.c:60:
+			printk("%s:%d: s_dirty got screwed up\n", file, line);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#113: FILE: fs/fs-writeback.c:66:
+			printk("%s:%d: s_io got screwed up.  inode=%p:%lu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#114: FILE: fs/fs-writeback.c:67:
+			printk("%s:%d: s_io got screwed up.  inode=%p:%lu\n",
+					file, line, inode, inode->dirtied_when);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#116: FILE: fs/fs-writeback.c:69:
+			printk("%s:%d: s_io got screwed up\n", file, line);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#122: FILE: fs/fs-writeback.c:75:
+			printk("%s:%d: s_more_io got screwed up.  inode=%p:%lu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#123: FILE: fs/fs-writeback.c:76:
+			printk("%s:%d: s_more_io got screwed up.  inode=%p:%lu\n",
+					file, line, inode, inode->dirtied_when);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#125: FILE: fs/fs-writeback.c:78:
+			printk("%s:%d: s_more_io got screwed up\n", file, line);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#132: FILE: fs/fs-writeback.c:85:
+		if (unlikely(sysctl_inode_debug))			\
+		__check_dirty_inode_list(sb, NULL, __FILE__, __LINE__);	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'inode' - possible side-effects?
#136: FILE: fs/fs-writeback.c:89:
+#define check_dirty_inode(inode)					\
+	do {								\
+		if (unlikely(sysctl_inode_debug))			\
+			__check_dirty_inode_list(inode->i_sb, inode,	\
+						__FILE__, __LINE__);	\
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'inode' may be better as '(inode)' to avoid precedence issues
#136: FILE: fs/fs-writeback.c:89:
+#define check_dirty_inode(inode)					\
+	do {								\
+		if (unlikely(sysctl_inode_debug))			\
+			__check_dirty_inode_list(inode->i_sb, inode,	\
+						__FILE__, __LINE__);	\
+	} while (0)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000392835.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 10 warnings, 6 checks, 138 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000392835.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
