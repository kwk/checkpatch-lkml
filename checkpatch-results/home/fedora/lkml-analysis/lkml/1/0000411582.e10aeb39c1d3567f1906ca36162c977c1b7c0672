CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#49: FILE: fs/ext4/ialloc.c:566:
+	inode->i_mtime = inode->i_atime = inode->i_ctime = ei->i_crtime =

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#84: FILE: fs/ext4/inode.c:2378:
+	inode->i_mtime = inode->i_ctime = ext4_current_time(inode);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#158: FILE: fs/ext4/namei.c:1288:
+	dir->i_mtime = dir->i_ctime = ext4_current_time(dir);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#167: FILE: fs/ext4/namei.c:2049:
+	inode->i_ctime = dir->i_ctime = dir->i_mtime = ext4_current_time(inode);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#176: FILE: fs/ext4/namei.c:2099:
+	dir->i_ctime = dir->i_mtime = ext4_current_time(dir);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#213: FILE: fs/ext4/namei.c:2333:
+	old_dir->i_ctime = old_dir->i_mtime = ext4_current_time(old_dir);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#240: FILE: fs/ext4/super.c:1876:
+		if (EXT4_HAS_RO_COMPAT_FEATURE(sb,
+				       EXT4_FEATURE_RO_COMPAT_EXTRA_ISIZE)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#256: FILE: fs/ext4/super.c:1892:
+		printk(KERN_INFO "EXT4-fs: required extra inode space not"

WARNING:SPLIT_STRING: quoted string split across lines
#257: FILE: fs/ext4/super.c:1893:
+		printk(KERN_INFO "EXT4-fs: required extra inode space not"
+			"available.\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:MISSING_SPACE: break quoted strings at a space character
#257: FILE: fs/ext4/super.c:1893:
+		printk(KERN_INFO "EXT4-fs: required extra inode space not"
+			"available.\n");

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ext4_inode' may be better as '(ext4_inode)' to avoid precedence issues
#306: FILE: include/linux/ext4_fs.h:353:
+#define EXT4_FITS_IN_INODE(ext4_inode, einode, field)	\
+	((offsetof(typeof(*ext4_inode), field) +	\
+	  sizeof((ext4_inode)->field))			\
+	<= (EXT4_GOOD_OLD_INODE_SIZE +			\
+	    (einode)->i_extra_isize))			\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'field' - possible side-effects?
#306: FILE: include/linux/ext4_fs.h:353:
+#define EXT4_FITS_IN_INODE(ext4_inode, einode, field)	\
+	((offsetof(typeof(*ext4_inode), field) +	\
+	  sizeof((ext4_inode)->field))			\
+	<= (EXT4_GOOD_OLD_INODE_SIZE +			\
+	    (einode)->i_extra_isize))			\
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#314: FILE: include/linux/ext4_fs.h:361:
+       return cpu_to_le32((sizeof(time->tv_sec) > 4 ?$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#321: FILE: include/linux/ext4_fs.h:368:
+       if (sizeof(time->tv_sec) > 4)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#321: FILE: include/linux/ext4_fs.h:368:
+       if (sizeof(time->tv_sec) > 4)
+	       time->tv_sec |= (__u64)(le32_to_cpu(extra) & EXT4_EPOCH_MASK)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#324: FILE: include/linux/ext4_fs.h:371:
+       time->tv_nsec = (le32_to_cpu(extra) & EXT4_NSEC_MASK) >> 2;$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'xtime' - possible side-effects?
#327: FILE: include/linux/ext4_fs.h:374:
+#define EXT4_INODE_SET_XTIME(xtime, inode, raw_inode)			       \
+do {									       \
+	(raw_inode)->xtime = cpu_to_le32((inode)->xtime.tv_sec);	       \
+	if (EXT4_FITS_IN_INODE(raw_inode, EXT4_I(inode), xtime ## _extra))     \
+		(raw_inode)->xtime ## _extra =				       \
+				ext4_encode_extra_time(&(inode)->xtime);       \
+} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'xtime' may be better as '(xtime)' to avoid precedence issues
#327: FILE: include/linux/ext4_fs.h:374:
+#define EXT4_INODE_SET_XTIME(xtime, inode, raw_inode)			       \
+do {									       \
+	(raw_inode)->xtime = cpu_to_le32((inode)->xtime.tv_sec);	       \
+	if (EXT4_FITS_IN_INODE(raw_inode, EXT4_I(inode), xtime ## _extra))     \
+		(raw_inode)->xtime ## _extra =				       \
+				ext4_encode_extra_time(&(inode)->xtime);       \
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'inode' - possible side-effects?
#327: FILE: include/linux/ext4_fs.h:374:
+#define EXT4_INODE_SET_XTIME(xtime, inode, raw_inode)			       \
+do {									       \
+	(raw_inode)->xtime = cpu_to_le32((inode)->xtime.tv_sec);	       \
+	if (EXT4_FITS_IN_INODE(raw_inode, EXT4_I(inode), xtime ## _extra))     \
+		(raw_inode)->xtime ## _extra =				       \
+				ext4_encode_extra_time(&(inode)->xtime);       \
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'raw_inode' - possible side-effects?
#327: FILE: include/linux/ext4_fs.h:374:
+#define EXT4_INODE_SET_XTIME(xtime, inode, raw_inode)			       \
+do {									       \
+	(raw_inode)->xtime = cpu_to_le32((inode)->xtime.tv_sec);	       \
+	if (EXT4_FITS_IN_INODE(raw_inode, EXT4_I(inode), xtime ## _extra))     \
+		(raw_inode)->xtime ## _extra =				       \
+				ext4_encode_extra_time(&(inode)->xtime);       \
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'xtime' - possible side-effects?
#335: FILE: include/linux/ext4_fs.h:382:
+#define EXT4_EINODE_SET_XTIME(xtime, einode, raw_inode)			       \
+do {									       \
+	if (EXT4_FITS_IN_INODE(raw_inode, einode, xtime))		       \
+		(raw_inode)->xtime = cpu_to_le32((einode)->xtime.tv_sec);      \
+	if (EXT4_FITS_IN_INODE(raw_inode, einode, xtime ## _extra))	       \
+		(raw_inode)->xtime ## _extra =				       \
+				ext4_encode_extra_time(&(einode)->xtime);      \
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'einode' - possible side-effects?
#335: FILE: include/linux/ext4_fs.h:382:
+#define EXT4_EINODE_SET_XTIME(xtime, einode, raw_inode)			       \
+do {									       \
+	if (EXT4_FITS_IN_INODE(raw_inode, einode, xtime))		       \
+		(raw_inode)->xtime = cpu_to_le32((einode)->xtime.tv_sec);      \
+	if (EXT4_FITS_IN_INODE(raw_inode, einode, xtime ## _extra))	       \
+		(raw_inode)->xtime ## _extra =				       \
+				ext4_encode_extra_time(&(einode)->xtime);      \
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'raw_inode' - possible side-effects?
#335: FILE: include/linux/ext4_fs.h:382:
+#define EXT4_EINODE_SET_XTIME(xtime, einode, raw_inode)			       \
+do {									       \
+	if (EXT4_FITS_IN_INODE(raw_inode, einode, xtime))		       \
+		(raw_inode)->xtime = cpu_to_le32((einode)->xtime.tv_sec);      \
+	if (EXT4_FITS_IN_INODE(raw_inode, einode, xtime ## _extra))	       \
+		(raw_inode)->xtime ## _extra =				       \
+				ext4_encode_extra_time(&(einode)->xtime);      \
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'xtime' - possible side-effects?
#344: FILE: include/linux/ext4_fs.h:391:
+#define EXT4_INODE_GET_XTIME(xtime, inode, raw_inode)			       \
+do {									       \
+	(inode)->xtime.tv_sec = le32_to_cpu((raw_inode)->xtime);	       \
+	if (EXT4_FITS_IN_INODE(raw_inode, EXT4_I(inode), xtime ## _extra))     \
+		ext4_decode_extra_time(&(inode)->xtime,			       \
+				       raw_inode->xtime ## _extra);	       \
+} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'xtime' may be better as '(xtime)' to avoid precedence issues
#344: FILE: include/linux/ext4_fs.h:391:
+#define EXT4_INODE_GET_XTIME(xtime, inode, raw_inode)			       \
+do {									       \
+	(inode)->xtime.tv_sec = le32_to_cpu((raw_inode)->xtime);	       \
+	if (EXT4_FITS_IN_INODE(raw_inode, EXT4_I(inode), xtime ## _extra))     \
+		ext4_decode_extra_time(&(inode)->xtime,			       \
+				       raw_inode->xtime ## _extra);	       \
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'inode' - possible side-effects?
#344: FILE: include/linux/ext4_fs.h:391:
+#define EXT4_INODE_GET_XTIME(xtime, inode, raw_inode)			       \
+do {									       \
+	(inode)->xtime.tv_sec = le32_to_cpu((raw_inode)->xtime);	       \
+	if (EXT4_FITS_IN_INODE(raw_inode, EXT4_I(inode), xtime ## _extra))     \
+		ext4_decode_extra_time(&(inode)->xtime,			       \
+				       raw_inode->xtime ## _extra);	       \
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'raw_inode' - possible side-effects?
#344: FILE: include/linux/ext4_fs.h:391:
+#define EXT4_INODE_GET_XTIME(xtime, inode, raw_inode)			       \
+do {									       \
+	(inode)->xtime.tv_sec = le32_to_cpu((raw_inode)->xtime);	       \
+	if (EXT4_FITS_IN_INODE(raw_inode, EXT4_I(inode), xtime ## _extra))     \
+		ext4_decode_extra_time(&(inode)->xtime,			       \
+				       raw_inode->xtime ## _extra);	       \
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'xtime' - possible side-effects?
#352: FILE: include/linux/ext4_fs.h:399:
+#define EXT4_EINODE_GET_XTIME(xtime, einode, raw_inode)			       \
+do {									       \
+	if (EXT4_FITS_IN_INODE(raw_inode, einode, xtime))		       \
+		(einode)->xtime.tv_sec = le32_to_cpu((raw_inode)->xtime);      \
+	if (EXT4_FITS_IN_INODE(raw_inode, einode, xtime ## _extra))	       \
+		ext4_decode_extra_time(&(einode)->xtime,		       \
+				       raw_inode->xtime ## _extra);	       \
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'einode' - possible side-effects?
#352: FILE: include/linux/ext4_fs.h:399:
+#define EXT4_EINODE_GET_XTIME(xtime, einode, raw_inode)			       \
+do {									       \
+	if (EXT4_FITS_IN_INODE(raw_inode, einode, xtime))		       \
+		(einode)->xtime.tv_sec = le32_to_cpu((raw_inode)->xtime);      \
+	if (EXT4_FITS_IN_INODE(raw_inode, einode, xtime ## _extra))	       \
+		ext4_decode_extra_time(&(einode)->xtime,		       \
+				       raw_inode->xtime ## _extra);	       \
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'raw_inode' - possible side-effects?
#352: FILE: include/linux/ext4_fs.h:399:
+#define EXT4_EINODE_GET_XTIME(xtime, einode, raw_inode)			       \
+do {									       \
+	if (EXT4_FITS_IN_INODE(raw_inode, einode, xtime))		       \
+		(einode)->xtime.tv_sec = le32_to_cpu((raw_inode)->xtime);      \
+	if (EXT4_FITS_IN_INODE(raw_inode, einode, xtime ## _extra))	       \
+		ext4_decode_extra_time(&(einode)->xtime,		       \
+				       raw_inode->xtime ## _extra);	       \
+} while (0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#374: FILE: include/linux/ext4_fs.h:612:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000411582.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 7 warnings, 24 checks, 317 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000411582.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
