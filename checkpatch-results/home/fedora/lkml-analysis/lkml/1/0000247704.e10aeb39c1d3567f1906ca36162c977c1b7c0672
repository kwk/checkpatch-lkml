WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#147: FILE: arch/x86/kernel/io_apic_64.c:160:
+DEFINE_DYN_ARRAY(irq_2_pin, sizeof(struct irq_pin_list), pin_map_size, sizeof(struct irq_pin_list), NULL);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#157: FILE: arch/x86/kernel/io_apic_64.c:244:
+	BUG_ON(irq >= nr_irqs);						\

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#166: FILE: arch/x86/kernel/io_apic_64.c:321:
+	BUG_ON(irq >= nr_irqs);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#181: FILE: arch/x86/kernel/io_apic_64.c:383:
+	BUG_ON(irq >= nr_irqs);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#198: FILE: arch/x86/kernel/io_apic_64.c:654:
+	BUG_ON(best_guess >= nr_irqs);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#207: FILE: arch/x86/kernel/io_apic_64.c:786:
+	BUG_ON(irq >= nr_irqs);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#216: FILE: arch/x86/kernel/io_apic_64.c:808:
+	BUG_ON((unsigned)irq >= nr_irqs);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#216: FILE: arch/x86/kernel/io_apic_64.c:808:
+	BUG_ON((unsigned)irq >= nr_irqs);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#225: FILE: arch/x86/kernel/io_apic_64.c:882:
+	BUG_ON((unsigned)irq >= nr_irqs);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#225: FILE: arch/x86/kernel/io_apic_64.c:882:
+	BUG_ON((unsigned)irq >= nr_irqs);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#359: FILE: arch/x86/kernel/setup.c:865:
+	printk(KERN_INFO "nr_irqs: %d\n", nr_irqs);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!irq_timer_state[irq]"
#400: FILE: drivers/char/random.c:650:
+	if (irq >= nr_irqs || irq_timer_state[irq] == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'new_serial.irq >= nr_irqs'
#546: FILE: drivers/serial/serial_core.c:744:
+	if ((new_serial.irq >= nr_irqs) || (new_serial.irq < 0) ||
 	    (new_serial.baud_base < 9600))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'new_serial.irq < 0'
#546: FILE: drivers/serial/serial_core.c:744:
+	if ((new_serial.irq >= nr_irqs) || (new_serial.irq < 0) ||
 	    (new_serial.baud_base < 9600))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'new_serial.baud_base < 9600'
#546: FILE: drivers/serial/serial_core.c:744:
+	if ((new_serial.irq >= nr_irqs) || (new_serial.irq < 0) ||
 	    (new_serial.baud_base < 9600))

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#606: FILE: fs/proc/proc_misc.c:506:
+	per_irq_sum = kzalloc(sizeof(unsigned int)*nr_irqs, GFP_KERNEL);
 	                                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#606: FILE: fs/proc/proc_misc.c:506:
+	per_irq_sum = kzalloc(sizeof(unsigned int)*nr_irqs, GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

ERROR:CODE_INDENT: code indent should use tabs where possible
#726: FILE: include/linux/init.h:254:
+        void **name;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#726: FILE: include/linux/init.h:254:
+        void **name;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#727: FILE: include/linux/init.h:255:
+        unsigned long size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#727: FILE: include/linux/init.h:255:
+        unsigned long size;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#728: FILE: include/linux/init.h:256:
+        unsigned int *nr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#728: FILE: include/linux/init.h:256:
+        unsigned int *nr;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#729: FILE: include/linux/init.h:257:
+        unsigned long align;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#729: FILE: include/linux/init.h:257:
+        unsigned long align;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#730: FILE: include/linux/init.h:258:
+        void (*init_work)(void *);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#730: FILE: include/linux/init.h:258:
+        void (*init_work)(void *);$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#730: FILE: include/linux/init.h:258:
+        void (*init_work)(void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#732: FILE: include/linux/init.h:260:
+};
+extern struct dyn_array *__dyn_array_start[], *__dyn_array_end[];

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'nameX' may be better as '(nameX)' to avoid precedence issues
#734: FILE: include/linux/init.h:262:
+#define DEFINE_DYN_ARRAY(nameX, sizeX, nrX, alignX, init_workX) \
+		static struct dyn_array __dyn_array_##nameX __initdata = \
+		{	.name = &nameX,\
+			.size = sizeX,\
+			.nr   = &nrX,\
+			.align = alignX,\
+			.init_work = init_workX,\
+		}; \
+		static struct dyn_array *__dyn_array_ptr_##nameX __used \
+		__attribute__((__section__(".dyn_array.init"))) = \
+			&__dyn_array_##nameX

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'nrX' may be better as '(nrX)' to avoid precedence issues
#734: FILE: include/linux/init.h:262:
+#define DEFINE_DYN_ARRAY(nameX, sizeX, nrX, alignX, init_workX) \
+		static struct dyn_array __dyn_array_##nameX __initdata = \
+		{	.name = &nameX,\
+			.size = sizeX,\
+			.nr   = &nrX,\
+			.align = alignX,\
+			.init_work = init_workX,\
+		}; \
+		static struct dyn_array *__dyn_array_ptr_##nameX __used \
+		__attribute__((__section__(".dyn_array.init"))) = \
+			&__dyn_array_##nameX

CHECK:CAMELCASE: Avoid CamelCase: <__dyn_array_##nameX>
#735: FILE: include/linux/init.h:263:
+		static struct dyn_array __dyn_array_##nameX __initdata = \

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <__dyn_array_ptr_##nameX>
#742: FILE: include/linux/init.h:270:
+		static struct dyn_array *__dyn_array_ptr_##nameX __used \

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".dyn_array.init") over __attribute__((__section__(".dyn_array.init")))
#743: FILE: include/linux/init.h:271:
+		__attribute__((__section__(".dyn_array.init"))) = \

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#746: FILE: include/linux/init.h:274:
+extern void pre_alloc_dyn_array(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:TYPO_SPELLING: 'daa' may be misspelled - perhaps 'data'?
#774: FILE: init/main.c:545:
+	struct dyn_array **daa;
 	                   ^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'daa' may be misspelled - perhaps 'data'?
#776: FILE: init/main.c:547:
+	for (daa = __dyn_array_start ; daa < __dyn_array_end; daa++) {
 	     ^^^

WARNING:TYPO_SPELLING: 'daa' may be misspelled - perhaps 'data'?
#776: FILE: init/main.c:547:
+	for (daa = __dyn_array_start ; daa < __dyn_array_end; daa++) {
 	                               ^^^

WARNING:TYPO_SPELLING: 'daa' may be misspelled - perhaps 'data'?
#776: FILE: init/main.c:547:
+	for (daa = __dyn_array_start ; daa < __dyn_array_end; daa++) {
 	                                                      ^^^

WARNING:TYPO_SPELLING: 'daa' may be misspelled - perhaps 'data'?
#777: FILE: init/main.c:548:
+		struct dyn_array *da = *daa;
 		                        ^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#781: FILE: init/main.c:552:
+		printk(KERN_INFO "%p name:%p size:%lx nr:%d align:%lx",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#782: FILE: init/main.c:553:
+		printk(KERN_INFO "%p name:%p size:%lx nr:%d align:%lx",
+			da, da->name, da->size, *da->nr, da->align);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#783: FILE: init/main.c:554:
+		*da->name = __alloc_bootmem_nopanic(size, da->align, 16ULL<<20);
 		                                                          ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#784: FILE: init/main.c:555:
+		printk(KERN_CONT "  *name:%p\n", *da->name);

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#784: FILE: init/main.c:555:
+		printk(KERN_CONT "  *name:%p\n", *da->name);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#803: FILE: kernel/irq/autoprobe.c:41:
+	for (i = nr_irqs-1; i > 0; i--) {
 	                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#812: FILE: kernel/irq/autoprobe.c:71:
+	for (i = nr_irqs-1; i > 0; i--) {
 	                ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#967: FILE: kernel/irq/handle.c:63:
+        struct dyn_array *da = data;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#967: FILE: kernel/irq/handle.c:63:
+        struct dyn_array *da = data;$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000247704.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 28 warnings, 15 checks, 850 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000247704.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
