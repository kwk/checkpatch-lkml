WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#79: FILE: fs/namei.c:1130:
+ * @nd: pointer to nameidata
     ^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#90: FILE: fs/namei.c:1141:
+int vfs_remote_path_lookup(struct dentry *dentry,
+		struct vfsmount *mnt, const char *name,

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#91: FILE: fs/namei.c:1142:
+		unsigned int flags, struct nameidata *nd)
 		                                      ^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_fs"
#99: FILE: fs/namei.c:1150:
+	if (new_fs == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_mnt_ns"
#103: FILE: fs/namei.c:1154:
+	if (new_mnt_ns == NULL)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#128: FILE: fs/namei.c:1179:
+	error = vfs_path_lookup(dentry, mnt, name, flags, nd);
 	                                                  ^^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*new_ns)...) over kmalloc(sizeof(struct mnt_namespace)...)
#162: FILE: fs/namespace.c:1976:
+	new_ns = kmalloc(sizeof(struct mnt_namespace), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#199: FILE: fs/namespace.c:2065:
+struct mnt_namespace *create_private_mnt_ns(struct vfsmount *mnt_root,
+		struct fs_struct *fs)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#239: FILE: include/linux/mnt_namespace.h:25:
+extern struct mnt_namespace *create_private_mnt_ns(struct vfsmount *,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#239: FILE: include/linux/mnt_namespace.h:25:
+extern struct mnt_namespace *create_private_mnt_ns(struct vfsmount *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fs_struct *' should also have an identifier name
#239: FILE: include/linux/mnt_namespace.h:25:
+extern struct mnt_namespace *create_private_mnt_ns(struct vfsmount *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#240: FILE: include/linux/mnt_namespace.h:26:
+extern struct mnt_namespace *create_private_mnt_ns(struct vfsmount *,
+		struct fs_struct *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#252: FILE: include/linux/namei.h:71:
+extern int vfs_remote_path_lookup(struct dentry *, struct vfsmount *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#252: FILE: include/linux/namei.h:71:
+extern int vfs_remote_path_lookup(struct dentry *, struct vfsmount *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#252: FILE: include/linux/namei.h:71:
+extern int vfs_remote_path_lookup(struct dentry *, struct vfsmount *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#252: FILE: include/linux/namei.h:71:
+extern int vfs_remote_path_lookup(struct dentry *, struct vfsmount *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#252: FILE: include/linux/namei.h:71:
+extern int vfs_remote_path_lookup(struct dentry *, struct vfsmount *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#252: FILE: include/linux/namei.h:71:
+extern int vfs_remote_path_lookup(struct dentry *, struct vfsmount *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#253: FILE: include/linux/namei.h:72:
+extern int vfs_remote_path_lookup(struct dentry *, struct vfsmount *,
+		const char *, unsigned int , struct nameidata *);

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#253: FILE: include/linux/namei.h:72:
+		const char *, unsigned int , struct nameidata *);
 		                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000146581.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 10 warnings, 9 checks, 201 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000146581.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
