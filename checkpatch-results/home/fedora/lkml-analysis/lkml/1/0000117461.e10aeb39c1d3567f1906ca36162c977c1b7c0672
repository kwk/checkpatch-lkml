WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'M:' before 'P:'
#57: FILE: MAINTAINERS:6135:
+P:	Florian Fainelli
+M:	florian@openwrt.org

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#67: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#103: FILE: drivers/vlynq/vlynq.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#117: FILE: drivers/vlynq/vlynq.c:15:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#118: FILE: drivers/vlynq/vlynq.c:16:
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#188: FILE: drivers/vlynq/vlynq.c:86:
+	printk(KERN_DEBUG "VLYNQ local=%p remote=%p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#189: FILE: drivers/vlynq/vlynq.c:87:
+	printk(KERN_DEBUG "VLYNQ local=%p remote=%p\n",
+			dev->local, dev->remote);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#191: FILE: drivers/vlynq/vlynq.c:89:
+		printk(KERN_DEBUG "VLYNQ: local %d: %08x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#192: FILE: drivers/vlynq/vlynq.c:90:
+		printk(KERN_DEBUG "VLYNQ: local %d: %08x\n",
+			i + 1, ((u32 *)dev->local)[i]);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#193: FILE: drivers/vlynq/vlynq.c:91:
+		printk(KERN_DEBUG "VLYNQ: remote %d: %08x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#194: FILE: drivers/vlynq/vlynq.c:92:
+		printk(KERN_DEBUG "VLYNQ: remote %d: %08x\n",
+			i + 1, ((u32 *)dev->remote)[i]);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#204: FILE: drivers/vlynq/vlynq.c:102:
+			printk(KERN_DEBUG "\nMEM[0x%04x]:", i * 4);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#205: FILE: drivers/vlynq/vlynq.c:103:
+		printk(KERN_DEBUG " 0x%08x", *(base + i));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#207: FILE: drivers/vlynq/vlynq.c:105:
+	printk(KERN_DEBUG "\n");

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#218: FILE: drivers/vlynq/vlynq.c:116:
+			return 1;
+		else

WARNING:MSLEEP: msleep < 20ms can sleep for up to 20ms; see Documentation/timers/timers-howto.rst
#231: FILE: drivers/vlynq/vlynq.c:129:
+	msleep(5);

WARNING:MSLEEP: msleep < 20ms can sleep for up to 20ms; see Documentation/timers/timers-howto.rst
#239: FILE: drivers/vlynq/vlynq.c:137:
+	msleep(5);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#248: FILE: drivers/vlynq/vlynq.c:146:
+	BUG_ON(!dev);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#261: FILE: drivers/vlynq/vlynq.c:159:
+	BUG_ON(!dev);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#274: FILE: drivers/vlynq/vlynq.c:172:
+	BUG_ON(!dev);

WARNING:PRINTK_RATELIMITED: Prefer printk_ratelimited or pr_<level>_ratelimited to printk_ratelimit
#305: FILE: drivers/vlynq/vlynq.c:203:
+	if (printk_ratelimit())

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#306: FILE: drivers/vlynq/vlynq.c:204:
+		printk(KERN_DEBUG "%s: local status: 0x%08x\n",

WARNING:PRINTK_RATELIMITED: Prefer printk_ratelimited or pr_<level>_ratelimited to printk_ratelimit
#317: FILE: drivers/vlynq/vlynq.c:215:
+	if (printk_ratelimit())

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#318: FILE: drivers/vlynq/vlynq.c:216:
+		printk(KERN_DEBUG "%s: remote status: 0x%08x\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#372: FILE: drivers/vlynq/vlynq.c:270:
+		printk(KERN_ERR

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#416: FILE: drivers/vlynq/vlynq.c:314:
+		printk(KERN_ERR "%s: request_irq failed\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#417: FILE: drivers/vlynq/vlynq.c:315:
+		printk(KERN_ERR "%s: request_irq failed\n",
+					dev_name(&dev->dev));

WARNING:LINE_SPACING: Missing a blank line after declarations
#427: FILE: drivers/vlynq/vlynq.c:325:
+	struct vlynq_device *vdev = to_vlynq_device(dev);
+	kfree(vdev);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#441: FILE: drivers/vlynq/vlynq.c:339:
+			printk(KERN_INFO "Driver found for VLYNQ " \

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#441: FILE: drivers/vlynq/vlynq.c:339:
+			printk(KERN_INFO "Driver found for VLYNQ " \

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#445: FILE: drivers/vlynq/vlynq.c:343:
+		printk(KERN_DEBUG "Not using the %08x VLYNQ device's driver" \

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#445: FILE: drivers/vlynq/vlynq.c:343:
+		printk(KERN_DEBUG "Not using the %08x VLYNQ device's driver" \

WARNING:LINE_SPACING: Missing a blank line after declarations
#470: FILE: drivers/vlynq/vlynq.c:368:
+	struct vlynq_driver *drv = to_vlynq_driver(dev->driver);
+	if (drv && drv->remove)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#498: FILE: drivers/vlynq/vlynq.c:396:
+		dev->dev_id ? i++ : i--) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#514: FILE: drivers/vlynq/vlynq.c:412:
+			printk(KERN_DEBUG

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#519: FILE: drivers/vlynq/vlynq.c:417:
+			return 0;
+		} else {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#536: FILE: drivers/vlynq/vlynq.c:434:
+		dev->dev_id ? i++ : i--) {
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#544: FILE: drivers/vlynq/vlynq.c:442:
+			printk(KERN_DEBUG

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#549: FILE: drivers/vlynq/vlynq.c:447:
+			return 0;
+		} else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#572: FILE: drivers/vlynq/vlynq.c:470:
+		printk(KERN_DEBUG "%s: using external clock\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#573: FILE: drivers/vlynq/vlynq.c:471:
+		printk(KERN_DEBUG "%s: using external clock\n",
+			dev_name(&dev->dev));

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#594: FILE: drivers/vlynq/vlynq.c:492:
+		/* When the device is brought from reset it should have clock
+		generation negotiated by hardware.

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#596: FILE: drivers/vlynq/vlynq.c:494:
+		accordingly */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#600: FILE: drivers/vlynq/vlynq.c:498:
+			if (!__vlynq_try_remote(dev) ||
+				!__vlynq_try_local(dev)  ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#605: FILE: drivers/vlynq/vlynq.c:503:
+			if (!__vlynq_try_external(dev) ||
+				!__vlynq_try_local(dev)    ||

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#618: FILE: drivers/vlynq/vlynq.c:516:
+			printk(KERN_DEBUG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#633: FILE: drivers/vlynq/vlynq.c:531:
+			printk(KERN_DEBUG

CHECK:LINE_SPACING: Please don't use multiple blank lines
#664: FILE: drivers/vlynq/vlynq.c:562:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#686: FILE: drivers/vlynq/vlynq.c:584:
+		vlynq_reg_write(dev->local->rx_mapping[i].offset,
+							mapping[i].offset);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#688: FILE: drivers/vlynq/vlynq.c:586:
+		vlynq_reg_write(dev->local->rx_mapping[i].size,
+							mapping[i].size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#705: FILE: drivers/vlynq/vlynq.c:603:
+		vlynq_reg_write(dev->remote->rx_mapping[i].offset,
+							mapping[i].offset);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#707: FILE: drivers/vlynq/vlynq.c:605:
+		vlynq_reg_write(dev->remote->rx_mapping[i].size,
+							mapping[i].size);

WARNING:LINE_SPACING: Missing a blank line after declarations
#716: FILE: drivers/vlynq/vlynq.c:614:
+	int irq = dev->irq_start + virq;
+	if (dev->enabled)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'irq < dev->irq_start'
#719: FILE: drivers/vlynq/vlynq.c:617:
+	if ((irq < dev->irq_start) || (irq > dev->irq_end))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'irq > dev->irq_end'
#719: FILE: drivers/vlynq/vlynq.c:617:
+	if ((irq < dev->irq_start) || (irq > dev->irq_end))

WARNING:LINE_SPACING: Missing a blank line after declarations
#734: FILE: drivers/vlynq/vlynq.c:632:
+	int irq = dev->irq_start + virq;
+	if (dev->enabled)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'irq < dev->irq_start'
#737: FILE: drivers/vlynq/vlynq.c:635:
+	if ((irq < dev->irq_start) || (irq > dev->irq_end))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'irq > dev->irq_end'
#737: FILE: drivers/vlynq/vlynq.c:635:
+	if ((irq < dev->irq_start) || (irq > dev->irq_end))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#769: FILE: drivers/vlynq/vlynq.c:667:
+		printk(KERN_ERR

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#769: FILE: drivers/vlynq/vlynq.c:667:
+	if (!dev) {
+		printk(KERN_ERR

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#788: FILE: drivers/vlynq/vlynq.c:686:
+		printk(KERN_ERR "%s: Can't request vlynq registers\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#796: FILE: drivers/vlynq/vlynq.c:694:
+		printk(KERN_ERR "%s: Can't remap vlynq registers\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#815: FILE: drivers/vlynq/vlynq.c:713:
+	printk(KERN_INFO "%s: regs 0x%p, irq %d, mem 0x%p\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#827: FILE: drivers/vlynq/vlynq.c:725:
+		printk(KERN_INFO "Found a VLYNQ device: %08x\n", dev->dev_id);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#867: FILE: drivers/vlynq/vlynq.c:765:
+static int __devinit vlynq_init(void)

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#887: FILE: drivers/vlynq/vlynq.c:785:
+static void __devexit vlynq_exit(void)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#901: FILE: include/linux/vlynq.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#915: FILE: include/linux/vlynq.h:15:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#916: FILE: include/linux/vlynq.h:16:
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1001: FILE: include/linux/vlynq.h:101:
+extern int __vlynq_register_driver(struct vlynq_driver *driver,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:LINE_SPACING: Missing a blank line after declarations
#1037: FILE: include/linux/vlynq.h:137:
+	int irq = dev->irq_start + virq;
+	if ((irq < dev->irq_start) || (irq > dev->irq_end))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'irq < dev->irq_start'
#1037: FILE: include/linux/vlynq.h:137:
+	if ((irq < dev->irq_start) || (irq > dev->irq_end))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'irq > dev->irq_end'
#1037: FILE: include/linux/vlynq.h:137:
+	if ((irq < dev->irq_start) || (irq > dev->irq_end))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'irq < dev->irq_start'
#1045: FILE: include/linux/vlynq.h:145:
+	if ((irq < dev->irq_start) || (irq > dev->irq_end))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'irq > dev->irq_end'
#1045: FILE: include/linux/vlynq.h:145:
+	if ((irq < dev->irq_start) || (irq > dev->irq_end))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1051: FILE: include/linux/vlynq.h:151:
+extern void vlynq_unregister_driver(struct vlynq_driver *driver);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1052: FILE: include/linux/vlynq.h:152:
+extern int vlynq_enable_device(struct vlynq_device *dev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1053: FILE: include/linux/vlynq.h:153:
+extern void vlynq_disable_device(struct vlynq_device *dev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1054: FILE: include/linux/vlynq.h:154:
+extern int vlynq_set_local_mapping(struct vlynq_device *dev, u32 tx_offset,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1056: FILE: include/linux/vlynq.h:156:
+extern int vlynq_set_remote_mapping(struct vlynq_device *dev, u32 tx_offset,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1058: FILE: include/linux/vlynq.h:158:
+extern int vlynq_set_local_irq(struct vlynq_device *dev, int virq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1059: FILE: include/linux/vlynq.h:159:
+extern int vlynq_set_remote_irq(struct vlynq_device *dev, int virq);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000117461.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 48 warnings, 30 checks, 986 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000117461.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
