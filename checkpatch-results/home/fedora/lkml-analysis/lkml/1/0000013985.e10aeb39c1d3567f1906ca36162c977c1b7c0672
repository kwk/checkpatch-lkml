WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
Expose example and tool source files in the Documentation/timers/ directory in

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#335: FILE: Documentation/timers/hpet_example.c:1:
+#include <stdio.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#352: FILE: Documentation/timers/hpet_example.c:18:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#354: FILE: Documentation/timers/hpet_example.c:20:
+extern void hpet_info(int, const char **);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#354: FILE: Documentation/timers/hpet_example.c:20:
+extern void hpet_info(int, const char **);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char **' should also have an identifier name
#354: FILE: Documentation/timers/hpet_example.c:20:
+extern void hpet_info(int, const char **);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#355: FILE: Documentation/timers/hpet_example.c:21:
+extern void hpet_poll(int, const char **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#355: FILE: Documentation/timers/hpet_example.c:21:
+extern void hpet_poll(int, const char **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char **' should also have an identifier name
#355: FILE: Documentation/timers/hpet_example.c:21:
+extern void hpet_poll(int, const char **);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#356: FILE: Documentation/timers/hpet_example.c:22:
+extern void hpet_fasync(int, const char **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#356: FILE: Documentation/timers/hpet_example.c:22:
+extern void hpet_fasync(int, const char **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char **' should also have an identifier name
#356: FILE: Documentation/timers/hpet_example.c:22:
+extern void hpet_fasync(int, const char **);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#357: FILE: Documentation/timers/hpet_example.c:23:
+extern void hpet_read(int, const char **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#357: FILE: Documentation/timers/hpet_example.c:23:
+extern void hpet_read(int, const char **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char **' should also have an identifier name
#357: FILE: Documentation/timers/hpet_example.c:23:
+extern void hpet_read(int, const char **);

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#365: FILE: Documentation/timers/hpet_example.c:31:
+	void		(*func)(int argc, const char ** argv);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#386: FILE: Documentation/timers/hpet_example.c:52:
+main(int argc, const char ** argv)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#398: FILE: Documentation/timers/hpet_example.c:64:
+
+

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(hpet_command)
#399: FILE: Documentation/timers/hpet_example.c:65:
+	for (i = 0; i < (sizeof (hpet_command) / sizeof (hpet_command[0])); i++)

The ARRAY_SIZE(foo) macro should be preferred over
sizeof(foo)/sizeof(foo[0]) for finding number of elements in an
array.

The macro is defined in include/linux/kernel.h::

  #define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#399: FILE: Documentation/timers/hpet_example.c:65:
+	for (i = 0; i < (sizeof (hpet_command) / sizeof (hpet_command[0])); i++)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#399: FILE: Documentation/timers/hpet_example.c:65:
+	for (i = 0; i < (sizeof (hpet_command) / sizeof (hpet_command[0])); i++)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'hpet_open_close', this function's name, in a string
#420: FILE: Documentation/timers/hpet_example.c:86:
+		fprintf(stderr, "hpet_open_close: device-name\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'hpet_open_close', this function's name, in a string
#426: FILE: Documentation/timers/hpet_example.c:92:
+		fprintf(stderr, "hpet_open_close: open failed\n");

WARNING:RETURN_VOID: void function return statements are not generally useful
#431: FILE: Documentation/timers/hpet_example.c:97:
+	return;
+}

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'hpet_poll', this function's name, in a string
#450: FILE: Documentation/timers/hpet_example.c:116:
+		fprintf(stderr, "hpet_poll: device-name freq iterations\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'hpet_poll', this function's name, in a string
#460: FILE: Documentation/timers/hpet_example.c:126:
+		fprintf(stderr, "hpet_poll: open of %s failed\n", argv[0]);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'hpet_poll', this function's name, in a string
#465: FILE: Documentation/timers/hpet_example.c:131:
+		fprintf(stderr, "hpet_poll: HPET_IRQFREQ failed\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'hpet_poll', this function's name, in a string
#470: FILE: Documentation/timers/hpet_example.c:136:
+		fprintf(stderr, "hpet_poll: failed to get info\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'hpet_poll', this function's name, in a string
#474: FILE: Documentation/timers/hpet_example.c:140:
+	fprintf(stderr, "hpet_poll: info.hi_flags 0x%lx\n", info.hi_flags);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'hpet_poll', this function's name, in a string
#477: FILE: Documentation/timers/hpet_example.c:143:
+		fprintf(stderr, "hpet_poll: HPET_EPI failed\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'hpet_poll', this function's name, in a string
#482: FILE: Documentation/timers/hpet_example.c:148:
+		fprintf(stderr, "hpet_poll, HPET_IE_ON failed\n");

CHECK:BRACES: braces {} should be used on all arms of this statement
#492: FILE: Documentation/timers/hpet_example.c:158:
+		if (poll(&pfd, 1, -1) < 0)
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'hpet_poll', this function's name, in a string
#493: FILE: Documentation/timers/hpet_example.c:159:
+			fprintf(stderr, "hpet_poll: poll failed\n");

CHECK:BRACES: Unbalanced braces around else statement
#494: FILE: Documentation/timers/hpet_example.c:160:
+		else {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#495: FILE: Documentation/timers/hpet_example.c:161:
+^I^I^Ilong ^Idata;$

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'hpet_poll', this function's name, in a string
#502: FILE: Documentation/timers/hpet_example.c:168:
+				"hpet_poll: expired time = 0x%lx\n", usec);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'hpet_poll', this function's name, in a string
#504: FILE: Documentation/timers/hpet_example.c:170:
+			fprintf(stderr, "hpet_poll: revents = 0x%x\n",

CHECK:BRACES: braces {} should be used on all arms of this statement
#507: FILE: Documentation/timers/hpet_example.c:173:
+			if (read(fd, &data, sizeof(data)) != sizeof(data)) {
[...]
+			else
[...]

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'hpet_poll', this function's name, in a string
#508: FILE: Documentation/timers/hpet_example.c:174:
+				fprintf(stderr, "hpet_poll: read failed\n");

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#510: FILE: Documentation/timers/hpet_example.c:176:
+			}
+			else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'hpet_poll', this function's name, in a string
#511: FILE: Documentation/timers/hpet_example.c:177:
+				fprintf(stderr, "hpet_poll: data 0x%lx\n",

WARNING:RETURN_VOID: void function return statements are not generally useful
#519: FILE: Documentation/timers/hpet_example.c:185:
+	return;
+}

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'hpet_sigio', this function's name, in a string
#526: FILE: Documentation/timers/hpet_example.c:192:
+	fprintf(stderr, "hpet_sigio: called\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#541: FILE: Documentation/timers/hpet_example.c:207:
+	if ((oldsig = signal(SIGIO, hpet_sigio)) == SIG_ERR) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'hpet_fasync', this function's name, in a string
#542: FILE: Documentation/timers/hpet_example.c:208:
+		fprintf(stderr, "hpet_fasync: failed to set signal handler\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'hpet_fasync', this function's name, in a string
#547: FILE: Documentation/timers/hpet_example.c:213:
+		fprintf(stderr, "hpet_fasync: device-name freq iterations\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'hpet_fasync', this function's name, in a string
#554: FILE: Documentation/timers/hpet_example.c:220:
+		fprintf(stderr, "hpet_fasync: failed to open %s\n", argv[0]);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#558: FILE: Documentation/timers/hpet_example.c:224:
+
+

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#559: FILE: Documentation/timers/hpet_example.c:225:
+	if ((fcntl(fd, F_SETOWN, getpid()) == 1) ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#560: FILE: Documentation/timers/hpet_example.c:226:
+	if ((fcntl(fd, F_SETOWN, getpid()) == 1) ||
+		((value = fcntl(fd, F_GETFL)) == 1) ||

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'hpet_fasync', this function's name, in a string
#562: FILE: Documentation/timers/hpet_example.c:228:
+		fprintf(stderr, "hpet_fasync: fcntl failed\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'hpet_fasync', this function's name, in a string
#570: FILE: Documentation/timers/hpet_example.c:236:
+		fprintf(stderr, "hpet_fasync: HPET_IRQFREQ failed\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'hpet_fasync', this function's name, in a string
#575: FILE: Documentation/timers/hpet_example.c:241:
+		fprintf(stderr, "hpet_fasync: failed to get info\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'hpet_fasync', this function's name, in a string
#579: FILE: Documentation/timers/hpet_example.c:245:
+	fprintf(stderr, "hpet_fasync: info.hi_flags 0x%lx\n", info.hi_flags);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'hpet_fasync', this function's name, in a string
#582: FILE: Documentation/timers/hpet_example.c:248:
+		fprintf(stderr, "hpet_fasync: HPET_EPI failed\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'hpet_fasync', this function's name, in a string
#587: FILE: Documentation/timers/hpet_example.c:253:
+		fprintf(stderr, "hpet_fasync, HPET_IE_ON failed\n");

CHECK:SPACING: No space is necessary after a cast
#592: FILE: Documentation/timers/hpet_example.c:258:
+		(void) pause();

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'hpet_fasync', this function's name, in a string
#593: FILE: Documentation/timers/hpet_example.c:259:
+		fprintf(stderr, "hpet_fasync: count = %d\n", hpet_sigio_count);

WARNING:RETURN_VOID: void function return statements are not generally useful
#603: FILE: Documentation/timers/hpet_example.c:269:
+	return;
+}

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000013985.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 46 warnings, 8 checks, 565 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000013985.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
