WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#56: FILE: drivers/mtd/onenand/Kconfig:74:
+config MTD_FLEXONENAND_BOUNDARY
+	bool "Flex-OneNAND Boundary Configuration"
+	depends on MTD_ONENAND
+	default n
+	help
+	  Set SLC and MLC regions of Flex-OneNAND
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#91: FILE: drivers/mtd/onenand/Kconfig:109:
+config MTD_FLEXONENAND_DDP_BOUNDARY
+	bool "Flex-OneNAND DDP Boundary Configuration"
+	depends on MTD_ONENAND && MTD_FLEXONENAND_BOUNDARY
+	default n
+	help
+	  Set SLC and MLC regions of Die 2 of Flex-OneNAND DDP
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#110: FILE: drivers/mtd/onenand/Kconfig:128:
+config MTD_FLEXONENAND_DIE1_ISLOCKED
+	bool "Lock Boundary of Flex-OneNAND Die 2"
+	depends on MTD_ONENAND && MTD_FLEXONENAND_BOUNDARY && MTD_FLEXONENAND_DDP_BOUNDARY
+	default n
+	help
+	  Configure if boundary for Die 2 of DDP Flex-OneNAND should be locked.
+	  Once locked, the boundary cannot be changed.
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#186: FILE: drivers/mtd/onenand/onenand_base.c:212:
+static unsigned flexonenand_get_block(struct onenand_chip *this, loff_t addr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#187: FILE: drivers/mtd/onenand/onenand_base.c:213:
+static unsigned flexonenand_get_block(struct onenand_chip *this, loff_t addr,
+			   unsigned *isblkslc)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#187: FILE: drivers/mtd/onenand/onenand_base.c:213:
+			   unsigned *isblkslc)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#189: FILE: drivers/mtd/onenand/onenand_base.c:215:
+	unsigned boundary, blk, die = 0;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#209: FILE: drivers/mtd/onenand/onenand_base.c:235:
+inline unsigned onenand_get_block(struct onenand_chip *this, loff_t addr,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#210: FILE: drivers/mtd/onenand/onenand_base.c:236:
+					unsigned *isblkslc)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#280: FILE: drivers/mtd/onenand/onenand_base.c:317:
+	unsigned slc = 0;

CHECK:SPACING: No space is necessary after a cast
#312: FILE: drivers/mtd/onenand/onenand_base.c:350:
+		page = (int) (addr - onenand_get_addr(this, block)) >> this->page_shift;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#375: FILE: drivers/mtd/onenand/onenand_base.c:450:
+			return ONENAND_ECC_2BIT_ALL;
+		else

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#399: FILE: drivers/mtd/onenand/onenand_base.c:503:
+				printk(KERN_DEBUG "onenand_wait: correctable ECC error = 0x%04x\n", ecc);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#399: FILE: drivers/mtd/onenand/onenand_base.c:503:
+				printk(KERN_DEBUG "onenand_wait: correctable ECC error = 0x%04x\n", ecc);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'onenand_wait', this function's name, in a string
#399: FILE: drivers/mtd/onenand/onenand_base.c:503:
+				printk(KERN_DEBUG "onenand_wait: correctable ECC error = 0x%04x\n", ecc);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#431: FILE: drivers/mtd/onenand/onenand_base.c:996:
+	unsigned slc = 0;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#449: FILE: drivers/mtd/onenand/onenand_base.c:1014:
+	printk(KERN_INFO "onenand_recover_lsb: Attempting to recover from uncorrectable read\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'onenand_recover_lsb', this function's name, in a string
#449: FILE: drivers/mtd/onenand/onenand_base.c:1014:
+	printk(KERN_INFO "onenand_recover_lsb: Attempting to recover from uncorrectable read\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#467: FILE: drivers/mtd/onenand/onenand_base.c:1032:
+static int onenand_mlc_read_ops_nolock(struct mtd_info *mtd, loff_t from,
+				struct mtd_oob_ops *ops)

WARNING:LONG_LINE: line length of 122 exceeds 100 columns
#480: FILE: drivers/mtd/onenand/onenand_base.c:1045:
+	DEBUG(MTD_DEBUG_LEVEL3, "onenand_mlc_read_ops_nolock: from = 0x%08x, len = %i\n", (unsigned int) from, (int) len);

CHECK:SPACING: No space is necessary after a cast
#480: FILE: drivers/mtd/onenand/onenand_base.c:1045:
+	DEBUG(MTD_DEBUG_LEVEL3, "onenand_mlc_read_ops_nolock: from = 0x%08x, len = %i\n", (unsigned int) from, (int) len);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'onenand_mlc_read_ops_nolock', this function's name, in a string
#480: FILE: drivers/mtd/onenand/onenand_base.c:1045:
+	DEBUG(MTD_DEBUG_LEVEL3, "onenand_mlc_read_ops_nolock: from = 0x%08x, len = %i\n", (unsigned int) from, (int) len);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#491: FILE: drivers/mtd/onenand/onenand_base.c:1056:
+		printk(KERN_ERR "onenand_mlc_read_ops_nolock: Attempt read beyond end of device\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'onenand_mlc_read_ops_nolock', this function's name, in a string
#491: FILE: drivers/mtd/onenand/onenand_base.c:1056:
+		printk(KERN_ERR "onenand_mlc_read_ops_nolock: Attempt read beyond end of device\n");

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#527: FILE: drivers/mtd/onenand/onenand_base.c:1092:
+				this->read_bufferram(mtd, ONENAND_SPARERAM, oobbuf, oobcolumn, thisooblen);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#750: FILE: drivers/mtd/onenand/onenand_base.c:2113:
+		printk(KERN_ERR "onenand_erase: Erase past end of device\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'onenand_erase', this function's name, in a string
#750: FILE: drivers/mtd/onenand/onenand_base.c:2113:
+		printk(KERN_ERR "onenand_erase: Erase past end of device\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#766: FILE: drivers/mtd/onenand/onenand_base.c:2129:
+			printk(KERN_ERR "onenand_erase: Unaligned address\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'onenand_erase', this function's name, in a string
#766: FILE: drivers/mtd/onenand/onenand_base.c:2129:
+			printk(KERN_ERR "onenand_erase: Unaligned address\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#774: FILE: drivers/mtd/onenand/onenand_base.c:2137:
+			printk(KERN_ERR "onenand_erase: Unaligned address\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'onenand_erase', this function's name, in a string
#774: FILE: drivers/mtd/onenand/onenand_base.c:2137:
+			printk(KERN_ERR "onenand_erase: Unaligned address\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#809: FILE: drivers/mtd/onenand/onenand_base.c:2174:
+			printk(KERN_ERR "onenand_erase: Failed erase, block %d\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'onenand_erase', this function's name, in a string
#809: FILE: drivers/mtd/onenand/onenand_base.c:2174:
+			printk(KERN_ERR "onenand_erase: Failed erase, block %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#810: FILE: drivers/mtd/onenand/onenand_base.c:2175:
+			printk(KERN_ERR "onenand_erase: Failed erase, block %d\n",
+			 (unsigned)onenand_get_block(this, addr, NULL));

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#810: FILE: drivers/mtd/onenand/onenand_base.c:2175:
+			 (unsigned)onenand_get_block(this, addr, NULL));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#829: FILE: drivers/mtd/onenand/onenand_base.c:2194:
+				printk(KERN_ERR "onenand_erase: Unaligned address\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'onenand_erase', this function's name, in a string
#829: FILE: drivers/mtd/onenand/onenand_base.c:2194:
+				printk(KERN_ERR "onenand_erase: Unaligned address\n");

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#850: FILE: drivers/mtd/onenand/onenand_base.c:2284:
+^I * ^I   with MLC erasesize? For now, it is not advisable to$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1043: FILE: drivers/mtd/onenand/onenand_base.c:2924:
+	printk(KERN_INFO "%s%sOneNAND%s %dMB %sV 16-bit (0x%02x)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1044: FILE: drivers/mtd/onenand/onenand_base.c:2925:
+	printk(KERN_INFO "%s%sOneNAND%s %dMB %sV 16-bit (0x%02x)\n",
+		demuxed ? "" : "Muxed ",

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1059: FILE: drivers/mtd/onenand/onenand_base.c:2971:
+	unsigned die, bdry;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1081: FILE: drivers/mtd/onenand/onenand_base.c:2993:
+		printk(KERN_INFO "Die %d boundary: %d%s\n", die,

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1092: FILE: drivers/mtd/onenand/onenand_base.c:3004:
+ * ^I^I^I  boundary[], diesize[], mtd->size$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1107: FILE: drivers/mtd/onenand/onenand_base.c:3019:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1112: FILE: drivers/mtd/onenand/onenand_base.c:3024:
+	die = ofs = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1115: FILE: drivers/mtd/onenand/onenand_base.c:3027:
+		if (!die || this->boundary[die-1] != maxbdry) {
 		                              ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1129: FILE: drivers/mtd/onenand/onenand_base.c:3041:
+		if (this->boundary[die] != maxbdry) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1137: FILE: drivers/mtd/onenand/onenand_base.c:3049:
+		} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1145: FILE: drivers/mtd/onenand/onenand_base.c:3057:
+	printk(KERN_INFO "Device has %d eraseregions\n", mtd->numeraseregions);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1147: FILE: drivers/mtd/onenand/onenand_base.c:3059:
+		printk(KERN_INFO "[offset: 0x%08x, erasesize: 0x%05x,"

WARNING:SPLIT_STRING: quoted string split across lines
#1148: FILE: drivers/mtd/onenand/onenand_base.c:3060:
+		printk(KERN_INFO "[offset: 0x%08x, erasesize: 0x%05x,"
+			" numblocks: %04u]\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:SPACING: No space is necessary after a cast
#1149: FILE: drivers/mtd/onenand/onenand_base.c:3061:
+			(unsigned int) mtd->eraseregions[i].offset,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1189: FILE: drivers/mtd/onenand/onenand_base.c:3101:
+	printk(KERN_DEBUG "Check blocks from %d to %d\n", start, end);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1209: FILE: drivers/mtd/onenand/onenand_base.c:3121:
+			printk(KERN_WARNING "Block %d not erased.\n", block);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1222: FILE: drivers/mtd/onenand/onenand_base.c:3134:
+static int flexonenand_set_boundary(struct mtd_info *mtd, int die,
+						int boundary, int lock)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1241: FILE: drivers/mtd/onenand/onenand_base.c:3153:
+		printk(KERN_ERR "flexonenand_set_boundary: Invalid boundary value. "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'flexonenand_set_boundary', this function's name, in a string
#1241: FILE: drivers/mtd/onenand/onenand_base.c:3153:
+		printk(KERN_ERR "flexonenand_set_boundary: Invalid boundary value. "

WARNING:SPLIT_STRING: quoted string split across lines
#1242: FILE: drivers/mtd/onenand/onenand_base.c:3154:
+		printk(KERN_ERR "flexonenand_set_boundary: Invalid boundary value. "
+				"Boundary not changed.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1251: FILE: drivers/mtd/onenand/onenand_base.c:3163:
+		printk(KERN_ERR "flexonenand_set_boundary: Please erase blocks before boundary change\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'flexonenand_set_boundary', this function's name, in a string
#1251: FILE: drivers/mtd/onenand/onenand_base.c:3163:
+		printk(KERN_ERR "flexonenand_set_boundary: Please erase blocks before boundary change\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1255: FILE: drivers/mtd/onenand/onenand_base.c:3167:
+	printk(KERN_INFO "flexonenand_set_boundary: Changing die %d boundary: %d%s\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'flexonenand_set_boundary', this function's name, in a string
#1255: FILE: drivers/mtd/onenand/onenand_base.c:3167:
+	printk(KERN_INFO "flexonenand_set_boundary: Changing die %d boundary: %d%s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1256: FILE: drivers/mtd/onenand/onenand_base.c:3168:
+	printk(KERN_INFO "flexonenand_set_boundary: Changing die %d boundary: %d%s\n",
+			die, boundary, lock ? "(Locked)" : "(Unlocked)");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1269: FILE: drivers/mtd/onenand/onenand_base.c:3181:
+		printk(KERN_ERR "flexonenand_set_boundary: Failed PI erase for Die %d\n", die);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'flexonenand_set_boundary', this function's name, in a string
#1269: FILE: drivers/mtd/onenand/onenand_base.c:3181:
+		printk(KERN_ERR "flexonenand_set_boundary: Failed PI erase for Die %d\n", die);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1277: FILE: drivers/mtd/onenand/onenand_base.c:3189:
+		printk(KERN_ERR "flexonenand_set_boundary: Failed PI write for Die %d\n", die);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'flexonenand_set_boundary', this function's name, in a string
#1277: FILE: drivers/mtd/onenand/onenand_base.c:3189:
+		printk(KERN_ERR "flexonenand_set_boundary: Failed PI write for Die %d\n", die);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*mtd->eraseregions)...) over kzalloc(sizeof(struct mtd_erase_region_info)...)
#1313: FILE: drivers/mtd/onenand/onenand_base.c:3263:
+		mtd->eraseregions = kzalloc(sizeof(struct mtd_erase_region_info)

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1409: FILE: drivers/mtd/onenand/onenand_bbt.c:63:
+	unsigned slc = 0;

CHECK:SPACING: No space is necessary after a cast
#1440: FILE: drivers/mtd/onenand/onenand_bbt.c:151:
+	block = (int) (onenand_get_block(this, offs, NULL) << 1);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mtd->numeraseregions > 1'
#1596: FILE: drivers/mtd/onenand/onenand_sim.c:345:
+		if (slc && (mtd->numeraseregions > 1))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mtd->numeraseregions > 1'
#1601: FILE: drivers/mtd/onenand/onenand_sim.c:350:
+		if (slc && (mtd->numeraseregions > 1))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!CONFIG_FLEXONENAND'
#1630: FILE: drivers/mtd/onenand/onenand_sim.c:473:
+	if (density < 2 && (!CONFIG_FLEXONENAND))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1688: FILE: include/linux/mtd/onenand.h:124:
+	unsigned		dies;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1689: FILE: include/linux/mtd/onenand.h:125:
+	unsigned		boundary[MAX_DIES];

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'this' may be better as '(this)' to avoid precedence issues
#1702: FILE: include/linux/mtd/onenand.h:181:
+#define FLEXONENAND(this)						\
+	(this->device_id & DEVICE_IS_FLEXONENAND)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'this' may be better as '(this)' to avoid precedence issues
#1711: FILE: include/linux/mtd/onenand.h:191:
+#define ONENAND_IS_MLC(this)						\
+	(this->technology & ONENAND_TECHNOLOGY_IS_MLC)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1721: FILE: include/linux/mtd/onenand.h:230:
+unsigned onenand_get_block(struct onenand_chip *this, loff_t addr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1722: FILE: include/linux/mtd/onenand.h:231:
+unsigned onenand_get_block(struct onenand_chip *this, loff_t addr,
+			 unsigned *isblkslc);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#1722: FILE: include/linux/mtd/onenand.h:231:
+			 unsigned *isblkslc);

CHECK:BIT_MACRO: Prefer using the BIT macro
#1734: FILE: include/linux/mtd/onenand_regs.h:70:
+#define DEVICE_IS_FLEXONENAND		(1 << 9)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#1746: FILE: include/linux/mtd/onenand_regs.h:92:
+#define ONENAND_TECHNOLOGY_IS_MLC	(1 << 0)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000160113.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 58 warnings, 24 checks, 1648 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000160113.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
