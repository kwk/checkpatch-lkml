WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#39: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#44: FILE: arch/ia64/kvm/vtlb.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#64: FILE: arch/ia64/kvm/vtlb.c:21:
+ * this program; if not, write to the Free Software Foundation, Inc., 59 Temple$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#82: FILE: arch/ia64/kvm/vtlb.c:39:
+	return ((trp->p) && (trp->rid == rid)
+				&& ((va-trp->vadr) < PSIZE(trp->ps)));

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#82: FILE: arch/ia64/kvm/vtlb.c:39:
+				&& ((va-trp->vadr) < PSIZE(trp->ps)));
 				       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sva > ea1'
#98: FILE: arch/ia64/kvm/vtlb.c:55:
+	if ((sva > ea1) || (sa1 > eva))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sa1 > eva'
#98: FILE: arch/ia64/kvm/vtlb.c:55:
+	if ((sva > ea1) || (sa1 > eva))

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#103: FILE: arch/ia64/kvm/vtlb.c:60:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#154: FILE: arch/ia64/kvm/vtlb.c:111:
+
+		}

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#166: FILE: arch/ia64/kvm/vtlb.c:123:
+	index = ((rid & 0xff) << pfn_bits)|(pfn & ((1UL << pfn_bits) - 1));
 	                                  ^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#175: FILE: arch/ia64/kvm/vtlb.c:132:
+{
+

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#181: FILE: arch/ia64/kvm/vtlb.c:138:
+	rid = rid & RR_RID_MASK;;

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#227: FILE: arch/ia64/kvm/vtlb.c:184:
+	u64 base_gfn = (pte&_PAGE_PPN_MASK) >> PAGE_SHIFT;
 	                   ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#237: FILE: arch/ia64/kvm/vtlb.c:194:
+			set_bit(base_gfn + i , dirty_bitmap);
 			                     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#259: FILE: arch/ia64/kvm/vtlb.c:216:
+	if (!(pte&VTLB_PTE_IO))
 	         ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "data"
#284: FILE: arch/ia64/kvm/vtlb.c:241:
+	if (data != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#286: FILE: arch/ia64/kvm/vtlb.c:243:
+		thash_vhpt_insert(current_vcpu, data->page_flags,
+			data->itir, iha, D_TLB);

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#300: FILE: arch/ia64/kvm/vtlb.c:257:
+			: "=r"(ret) : "r"(iha), "r"(pte):"memory");
 			                                ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#336: FILE: arch/ia64/kvm/vtlb.c:293:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#428: FILE: arch/ia64/kvm/vtlb.c:385:
+	u64 old_va = va;
+	va = REGION_OFFSET(va);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#461: FILE: arch/ia64/kvm/vtlb.c:418:
+int thash_purge_and_insert(struct kvm_vcpu *v, u64 pte, u64 itir,
+						u64 ifa, int type)

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#490: FILE: arch/ia64/kvm/vtlb.c:447:
+		if (!(pte&VTLB_PTE_IO)) {
 		         ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#499: FILE: arch/ia64/kvm/vtlb.c:456:
+		if (!(pte&VTLB_PTE_IO))
 		         ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#503: FILE: arch/ia64/kvm/vtlb.c:460:
+		u64 psr;
+		phy_pte  &= ~PAGE_FLAGS_RV_MASK;

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#508: FILE: arch/ia64/kvm/vtlb.c:465:
+	if (!(pte&VTLB_PTE_IO))
 	         ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#524: FILE: arch/ia64/kvm/vtlb.c:481:
+	struct thash_cb  *vtlb, *vhpt;
+	vtlb = &v->arch.vtlb;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#551: FILE: arch/ia64/kvm/vtlb.c:508:
+
+

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#568: FILE: arch/ia64/kvm/vtlb.c:525:
+	cch = __vtr_lookup(v, va, is_data);;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#589: FILE: arch/ia64/kvm/vtlb.c:546:
+
+

CHECK:SPACING: No space is necessary after a cast
#614: FILE: arch/ia64/kvm/vtlb.c:571:
+	u64 *base = (u64 *) KVM_P2M_BASE;

WARNING:LINE_SPACING: Missing a blank line after declarations
#615: FILE: arch/ia64/kvm/vtlb.c:572:
+	u64 *base = (u64 *) KVM_P2M_BASE;
+	return *(base + gpfn);

WARNING:LINE_SPACING: Missing a blank line after declarations
#621: FILE: arch/ia64/kvm/vtlb.c:578:
+	u64 pte = kvm_lookup_mpa(gpa >> PAGE_SHIFT);
+	return (pte >> PAGE_SHIFT << PAGE_SHIFT) | (gpa & ~PAGE_MASK);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#624: FILE: arch/ia64/kvm/vtlb.c:581:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tlb"
#651: FILE: arch/ia64/kvm/vtlb.c:608:
+		if (tlb == NULL) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#666: FILE: arch/ia64/kvm/vtlb.c:623:
+
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000294396.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 9 warnings, 24 checks, 636 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000294396.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
