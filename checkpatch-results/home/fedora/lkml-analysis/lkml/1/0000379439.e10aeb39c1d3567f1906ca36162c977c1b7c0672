WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
Add text_poke_early, for alternatives and paravirt boot-time and module load

WARNING:REPEATED_WORD: Possible repeated word: 'and'
#45: 
- Fix text_set and text_poke alignment check (mixed up bitwise and and or)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#85: FILE: arch/i386/kernel/alternative.c:46:
+	/* FIXME Could also do a CLFLUSH here to speed up CPU recovery; but
+	   that causes hangs on some VIA CPUs. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#85: FILE: arch/i386/kernel/alternative.c:46:
+	   that causes hangs on some VIA CPUs. */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#93: FILE: arch/i386/kernel/alternative.c:54:
+void * text_poke_early(void *addr, const void *opcode, size_t len)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#110: FILE: arch/i386/kernel/alternative.c:71:
+	BUG_ON(len > sizeof(long));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#111: FILE: arch/i386/kernel/alternative.c:72:
+	BUG_ON((((long)addr + len - 1) & ~(sizeof(long) - 1))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#205: FILE: include/asm-i386/alternative.h:153:
+extern void add_nops(void *insns, unsigned int len);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#224: FILE: include/asm-i386/alternative.h:172:
+extern void *text_poke(void *addr, const void *opcode, size_t len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#225: FILE: include/asm-i386/alternative.h:173:
+extern void *text_poke_early(void *addr, const void *opcode, size_t len);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cr0' - possible side-effects?
#227: FILE: include/asm-i386/alternative.h:175:
+#define kernel_wp_save(cr0)					\
+	do {							\
+		preempt_disable();				\
+		cr0 = read_cr0();				\
+		if (cpu_data[smp_processor_id()].wp_works_ok)	\
+			write_cr0(cr0 & ~X86_CR0_WP);		\
+	} while (0)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#260: FILE: include/asm-x86_64/alternative.h:158:
+extern void add_nops(void *insns, unsigned int len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#279: FILE: include/asm-x86_64/alternative.h:177:
+extern void *text_poke(void *addr, const void *opcode, size_t len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#280: FILE: include/asm-x86_64/alternative.h:178:
+extern void *text_poke_early(void *addr, const void *opcode, size_t len);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cr0' - possible side-effects?
#282: FILE: include/asm-x86_64/alternative.h:180:
+#define kernel_wp_save(cr0)					\
+	do {							\
+		typecheck(unsigned long, cr0);			\
+		preempt_disable();				\
+		cr0 = read_cr0();				\
+		write_cr0(cr0 & ~X86_CR0_WP);			\
+	} while (0)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000379439.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 6 warnings, 8 checks, 199 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000379439.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
