WARNING:TYPO_SPELLING: 'isnt' may be misspelled - perhaps 'isn't'?
#33: 
> implementation is pretty large and ugly, isnt it?
                                           ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'Wouldnt' may be misspelled - perhaps 'Wouldn't'?
#35: 
> Wouldnt it be possible to compress this:
  ^^^^^^^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#38: 
> > +trace_event_syscall_enter(2, setgroups, int, gidsetsize, gid_t __user *, grouplist);

WARNING:TYPO_SPELLING: 'implmentation' may be misspelled - perhaps 'implementation'?
#55: 
ok, I've re-worked the implmentation a bit and I've gotten each syscall
                       ^^^^^^^^^^^^^

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#58: 
#ifdef __NR_setgroups

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#61: 
#endif

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#72: 
#ifdef __NR_clock_settime

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#73: 
#ifdef SYSCALL_OVERRIDE

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#89: 
#else

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#92: 
#endif

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#93: 
#endif

CHECK:LINE_SPACING: Please don't use multiple blank lines
#157: FILE: include/asm-generic/syscall.h:25:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#164: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#169: FILE: include/trace/events/syscalls-core.h:1:
+#ifdef __NR_time

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#318: FILE: include/trace/events/syscalls-core.h:150:
+trace_event_syscall(3, sigprocmask, int, how, old_sigset_t __user *, set, old_sigset_t __user *, oset);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#326: FILE: include/trace/events/syscalls-core.h:158:
+trace_event_syscall(3, setitimer, int, which, struct itimerval __user *, value, struct itimerval __user *, ovalue);

WARNING:LONG_LINE: line length of 141 exceeds 100 columns
#330: FILE: include/trace/events/syscalls-core.h:162:
+trace_event_syscall(3, timer_create, clockid_t, which_clock, struct sigevent __user *, timer_event_spec, timer_t __user *, created_timer_id);

WARNING:LONG_LINE: line length of 157 exceeds 100 columns
#342: FILE: include/trace/events/syscalls-core.h:174:
+trace_event_syscall(4, timer_settime, timer_t, timer_id, int, flags, const struct itimerspec __user *, new_setting, struct itimerspec __user *, old_setting);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#352: FILE: include/trace/events/syscalls-core.h:184:
+TRACE_EVENT(sysenter_clock_settime,
+	TP_PROTO(clockid_t which_clock, struct timespec __user *tp),

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#354: FILE: include/trace/events/syscalls-core.h:186:
+	TP_STRUCT__entry(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#358: FILE: include/trace/events/syscalls-core.h:190:
+	TP_fast_assign(

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#362: FILE: include/trace/events/syscalls-core.h:194:
+	TP_printk("%s %016Lx", clock_id_toname((u64)__entry->which_clock), (u64)__entry->tp)

WARNING:LONG_LINE: line length of 146 exceeds 100 columns
#379: FILE: include/trace/events/syscalls-core.h:211:
+trace_event_syscall(4, clock_nanosleep, clockid_t, which_clock, int, flags, const struct timespec __user *, rqtp, struct timespec __user *, rmtp);

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#387: FILE: include/trace/events/syscalls-core.h:219:
+trace_event_syscall(3, sched_setscheduler, pid_t, pid, int, policy, struct sched_param __user *, param);

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#403: FILE: include/trace/events/syscalls-core.h:235:
+trace_event_syscall(3, sched_setaffinity, pid_t, pid, unsigned int, len, unsigned long __user *, user_mask_ptr);

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#407: FILE: include/trace/events/syscalls-core.h:239:
+trace_event_syscall(3, sched_getaffinity, pid_t, pid, unsigned int, len, unsigned long __user *, user_mask_ptr);

WARNING:LONG_LINE: line length of 144 exceeds 100 columns
#447: FILE: include/trace/events/syscalls-core.h:279:
+trace_event_syscall(4, kexec_load, unsigned long, e, unsigned long, nr_segments, struct kexec_segment __user *, segments, unsigned long, flags);

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#459: FILE: include/trace/events/syscalls-core.h:291:
+trace_event_syscall(4, wait4, pid_t, pid, int __user *, stat_addr, int, options, struct rusage __user *, ru);

WARNING:LONG_LINE: line length of 129 exceeds 100 columns
#463: FILE: include/trace/events/syscalls-core.h:295:
+trace_event_syscall(5, waitid, int, which, pid_t, pid, struct siginfo __user *, infop, int, options, struct rusage __user *, ru);

WARNING:LONG_LINE: line length of 136 exceeds 100 columns
#475: FILE: include/trace/events/syscalls-core.h:307:
+trace_event_syscall(6, futex, u32 __user *, uaddr, int, op, u32, val, struct timespec __user *, utime, u32 __user *, uaddr2, u32, val3);

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#479: FILE: include/trace/events/syscalls-core.h:311:
+trace_event_syscall(3, init_module, void __user *, umod, unsigned long, len, const char __user *, uargs);

WARNING:LONG_LINE: line length of 118 exceeds 100 columns
#487: FILE: include/trace/events/syscalls-core.h:319:
+trace_event_syscall(4, rt_sigprocmask, int, how, sigset_t __user *, set, sigset_t __user *, oset, size_t, sigsetsize);

WARNING:LONG_LINE: line length of 157 exceeds 100 columns
#495: FILE: include/trace/events/syscalls-core.h:327:
+trace_event_syscall(4, rt_sigtimedwait, const sigset_t __user *, uthese, siginfo_t __user *, uinfo, const struct timespec __user *, uts, size_t, sigsetsize);

WARNING:LONG_LINE: line length of 144 exceeds 100 columns
#547: FILE: include/trace/events/syscalls-core.h:379:
+trace_event_syscall(5, mount, char __user *, dev_name, char __user *, dir_name, char __user *, type, unsigned long, flags, void __user *, data);

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#575: FILE: include/trace/events/syscalls-core.h:407:
+trace_event_syscall(3, statfs64, const char __user *, path, size_t, sz, struct statfs64 __user *, buf);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#607: FILE: include/trace/events/syscalls-core.h:439:
+trace_event_syscall(2, ustat, unsigned, dev, struct ustat __user *, ubuf);

WARNING:LONG_LINE: line length of 141 exceeds 100 columns
#631: FILE: include/trace/events/syscalls-core.h:463:
+trace_event_syscall(5, setxattr, const char __user *, path, const char __user *, name, const void __user *, value, size_t, size, int, flags);

WARNING:LONG_LINE: line length of 142 exceeds 100 columns
#635: FILE: include/trace/events/syscalls-core.h:467:
+trace_event_syscall(5, lsetxattr, const char __user *, path, const char __user *, name, const void __user *, value, size_t, size, int, flags);

WARNING:LONG_LINE: line length of 124 exceeds 100 columns
#639: FILE: include/trace/events/syscalls-core.h:471:
+trace_event_syscall(5, fsetxattr, int, fd, const char __user *, name, const void __user *, value, size_t, size, int, flags);

WARNING:LONG_LINE: line length of 123 exceeds 100 columns
#643: FILE: include/trace/events/syscalls-core.h:475:
+trace_event_syscall(4, getxattr, const char __user *, path, const char __user *, name, void __user *, value, size_t, size);

WARNING:LONG_LINE: line length of 124 exceeds 100 columns
#647: FILE: include/trace/events/syscalls-core.h:479:
+trace_event_syscall(4, lgetxattr, const char __user *, path, const char __user *, name, void __user *, value, size_t, size);

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#651: FILE: include/trace/events/syscalls-core.h:483:
+trace_event_syscall(4, fgetxattr, int, fd, const char __user *, name, void __user *, value, size_t, size);

WARNING:LONG_LINE: line length of 147 exceeds 100 columns
#687: FILE: include/trace/events/syscalls-core.h:519:
+trace_event_syscall(5, mremap, unsigned long, addr, unsigned long, old_len, unsigned long, new_len, unsigned long, flags, unsigned long, new_addr);

WARNING:LONG_LINE: line length of 149 exceeds 100 columns
#691: FILE: include/trace/events/syscalls-core.h:523:
+trace_event_syscall(5, remap_file_pages, unsigned long, start, unsigned long, size, unsigned long, prot, unsigned long, pgoff, unsigned long, flags);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#743: FILE: include/trace/events/syscalls-core.h:575:
+trace_event_syscall(3, mknod, const char __user *, filename, int, mode, unsigned, dev);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#803: FILE: include/trace/events/syscalls-core.h:635:
+trace_event_syscall(2, io_setup, unsigned, nr_reqs, aio_context_t __user *, ctx);

WARNING:LONG_LINE: line length of 153 exceeds 100 columns
#811: FILE: include/trace/events/syscalls-core.h:643:
+trace_event_syscall(5, io_getevents, aio_context_t, ctx_id, long, min_nr, long, nr, struct io_event __user *, events, struct timespec __user *, timeout);

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#815: FILE: include/trace/events/syscalls-core.h:647:
+trace_event_syscall(3, io_submit, aio_context_t, ctx, long, nr, struct iocb __user * __user *, iocb);

WARNING:LONG_LINE: line length of 119 exceeds 100 columns
#819: FILE: include/trace/events/syscalls-core.h:651:
+trace_event_syscall(3, io_cancel, aio_context_t, ctx_id, struct iocb __user *, iocb, struct io_event __user *, result);

WARNING:TYPO_SPELLING: 'creat' may be misspelled - perhaps 'create'?
#835: FILE: include/trace/events/syscalls-core.h:667:
+trace_event_syscall(2, creat, const char __user *, pathname, int, mode);
                        ^^^^^

ERROR:SPACING: space prohibited after that open parenthesis '('
#866: FILE: include/trace/events/syscalls-core.h:698:
+#if defined( __NR_chown16) && defined(CONFIG_UID16)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#899: FILE: include/trace/events/syscalls-core.h:731:
+trace_event_syscall(3, getresuid16, old_uid_t __user *, ruid, old_uid_t __user *, euid, old_uid_t __user *, suid);

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#907: FILE: include/trace/events/syscalls-core.h:739:
+trace_event_syscall(3, getresgid16, old_gid_t __user *, rgid, old_gid_t __user *, egid, old_gid_t __user *, sgid);

WARNING:LONG_LINE: line length of 151 exceeds 100 columns
#955: FILE: include/trace/events/syscalls-core.h:787:
+trace_event_syscall(5, llseek, unsigned int, fd, unsigned long, offset_high, unsigned long, offset_low, loff_t __user *, result, unsigned int, origin);

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#967: FILE: include/trace/events/syscalls-core.h:799:
+trace_event_syscall(3, readv, unsigned long, fd, const struct iovec __user *, vec, unsigned long, vlen);

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#975: FILE: include/trace/events/syscalls-core.h:807:
+trace_event_syscall(3, writev, unsigned long, fd, const struct iovec __user *, vec, unsigned long, vlen);

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#983: FILE: include/trace/events/syscalls-core.h:815:
+trace_event_syscall(4, pwrite64, unsigned int, fd, const char __user *, buf, size_t, count, loff_t, pos);

WARNING:LONG_LINE: line length of 149 exceeds 100 columns
#987: FILE: include/trace/events/syscalls-core.h:819:
+trace_event_syscall(5, preadv, unsigned long, fd, const struct iovec __user *, vec, unsigned long, vlen, unsigned long, pos_l, unsigned long, pos_h);

WARNING:LONG_LINE: line length of 150 exceeds 100 columns
#991: FILE: include/trace/events/syscalls-core.h:823:
+trace_event_syscall(5, pwritev, unsigned long, fd, const struct iovec __user *, vec, unsigned long, vlen, unsigned long, pos_l, unsigned long, pos_h);

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#1019: FILE: include/trace/events/syscalls-core.h:851:
+trace_event_syscall(4, quotactl, unsigned int, cmd, const char __user *, special, qid_t, id, void __user *, addr);

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#1023: FILE: include/trace/events/syscalls-core.h:855:
+trace_event_syscall(3, getdents, unsigned int, fd, struct linux_dirent __user *, dirent, unsigned int, count);

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#1027: FILE: include/trace/events/syscalls-core.h:859:
+trace_event_syscall(3, getdents64, unsigned int, fd, struct linux_dirent64 __user *, dirent, unsigned int, count);

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#1031: FILE: include/trace/events/syscalls-core.h:863:
+trace_event_syscall(5, setsockopt, int, fd, int, level, int, optname, char __user *, optval, int, optlen);

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#1035: FILE: include/trace/events/syscalls-core.h:867:
+trace_event_syscall(5, getsockopt, int, fd, int, level, int, optname, char __user *, optval, int __user *, optlen);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1063: FILE: include/trace/events/syscalls-core.h:895:
+trace_event_syscall(4, send, int, a, void __user *, ptr, size_t, size, unsigned, b);

WARNING:LONG_LINE: line length of 127 exceeds 100 columns
#1067: FILE: include/trace/events/syscalls-core.h:899:
+trace_event_syscall(6, sendto, int, a, void __user *, ptr, size_t, size, unsigned, b, struct sockaddr __user *, saddr, int, c);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1067: FILE: include/trace/events/syscalls-core.h:899:
+trace_event_syscall(6, sendto, int, a, void __user *, ptr, size_t, size, unsigned, b, struct sockaddr __user *, saddr, int, c);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1071: FILE: include/trace/events/syscalls-core.h:903:
+trace_event_syscall(3, sendmsg, int, fd, struct msghdr __user *, msg, unsigned, flags);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1075: FILE: include/trace/events/syscalls-core.h:907:
+trace_event_syscall(4, recv, int, a, void __user *, ptr, size_t, size, unsigned, b);

WARNING:LONG_LINE: line length of 141 exceeds 100 columns
#1079: FILE: include/trace/events/syscalls-core.h:911:
+trace_event_syscall(6, recvfrom, int, a, void __user *, ptr, size_t, size, unsigned, b, struct sockaddr __user *, saddr, int __user *, uptr);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1079: FILE: include/trace/events/syscalls-core.h:911:
+trace_event_syscall(6, recvfrom, int, a, void __user *, ptr, size_t, size, unsigned, b, struct sockaddr __user *, saddr, int __user *, uptr);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1083: FILE: include/trace/events/syscalls-core.h:915:
+trace_event_syscall(3, recvmsg, int, fd, struct msghdr __user *, msg, unsigned, flags);

WARNING:LONG_LINE: line length of 137 exceeds 100 columns
#1107: FILE: include/trace/events/syscalls-core.h:939:
+trace_event_syscall(5, select, int, n, fd_set __user *, inp, fd_set __user *, outp,  fd_set __user *, exp, struct timeval __user *, tvp);

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#1123: FILE: include/trace/events/syscalls-core.h:955:
+trace_event_syscall(4, epoll_wait, int, epfd, struct epoll_event __user *, events, int, maxevents, int, timeout);

WARNING:LONG_LINE: line length of 168 exceeds 100 columns
#1127: FILE: include/trace/events/syscalls-core.h:959:
+trace_event_syscall(6, epoll_pwait, int, epfd, struct epoll_event __user *, events, int, maxevents, int, timeout, const sigset_t __user *, sigmask, size_t, sigsetsize);

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1147: FILE: include/trace/events/syscalls-core.h:979:
+trace_event_syscall(2, getrlimit, unsigned int, resource, struct rlimit __user *, rlim );

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#1171: FILE: include/trace/events/syscalls-core.h:1003:
+trace_event_syscall(4, msgsnd, int, msqid, struct msgbuf __user *, msgp, size_t, msgsz, int, msgflg);

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#1175: FILE: include/trace/events/syscalls-core.h:1007:
+trace_event_syscall(5, msgrcv, int, msqid, struct msgbuf __user *, msgp, size_t, msgsz, long, msgtyp, int, msgflg);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1187: FILE: include/trace/events/syscalls-core.h:1019:
+trace_event_syscall(3, semop, int, semid, struct sembuf __user *, sops, unsigned, nsops);

WARNING:LONG_LINE: line length of 135 exceeds 100 columns
#1195: FILE: include/trace/events/syscalls-core.h:1027:
+trace_event_syscall(4, semtimedop, int, semid, struct sembuf __user *, sops, unsigned, nsops, const struct timespec __user *, timeout);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1195: FILE: include/trace/events/syscalls-core.h:1027:
+trace_event_syscall(4, semtimedop, int, semid, struct sembuf __user *, sops, unsigned, nsops, const struct timespec __user *, timeout);

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#1215: FILE: include/trace/events/syscalls-core.h:1047:
+trace_event_syscall(4, mq_open, const char __user *, name, int, oflag, mode_t, mode, struct mq_attr __user *, attr);

WARNING:LONG_LINE: line length of 167 exceeds 100 columns
#1223: FILE: include/trace/events/syscalls-core.h:1055:
+trace_event_syscall(5, mq_timedsend, mqd_t, mqdes, const char __user *, msg_ptr, size_t, msg_len, unsigned int, msg_prio, const struct timespec __user *, abs_timeout);

WARNING:LONG_LINE: line length of 173 exceeds 100 columns
#1227: FILE: include/trace/events/syscalls-core.h:1059:
+trace_event_syscall(5, mq_timedreceive, mqd_t, mqdes, char __user *, msg_ptr, size_t, msg_len, unsigned int __user *, msg_prio, const struct timespec __user *, abs_timeout);

WARNING:LONG_LINE: line length of 125 exceeds 100 columns
#1235: FILE: include/trace/events/syscalls-core.h:1067:
+trace_event_syscall(3, mq_getsetattr, mqd_t, mqdes, const struct mq_attr __user *, mqstat, struct mq_attr __user *, omqstat);

WARNING:LONG_LINE: line length of 133 exceeds 100 columns
#1243: FILE: include/trace/events/syscalls-core.h:1075:
+trace_event_syscall(5, pciconfig_read, unsigned long bus, unsigned long dfn, unsigned long off, unsigned long len, void __user *buf);

WARNING:LONG_LINE: line length of 140 exceeds 100 columns
#1247: FILE: include/trace/events/syscalls-core.h:1079:
+trace_event_syscall(5, pciconfig_write, unsigned long, bus, unsigned long, dfn, unsigned long, off, unsigned long, len, void __user *, buf);

WARNING:LONG_LINE: line length of 127 exceeds 100 columns
#1251: FILE: include/trace/events/syscalls-core.h:1083:
+trace_event_syscall(5, prctl, int, option, unsigned long, arg2, unsigned long, arg3, unsigned long, arg4, unsigned long, arg5);

WARNING:LONG_LINE: line length of 166 exceeds 100 columns
#1295: FILE: include/trace/events/syscalls-core.h:1127:
+trace_event_syscall(5, add_key, const char __user *, _type, const char __user *, _description, const void __user *, _payload, size_t, plen, key_serial_t, destringid);

WARNING:LONG_LINE: line length of 161 exceeds 100 columns
#1299: FILE: include/trace/events/syscalls-core.h:1131:
+trace_event_syscall(4, request_key, const char __user *, _type, const char __user *, _description, const char __user *, _callout_info, key_serial_t, destringid);

WARNING:LONG_LINE: line length of 125 exceeds 100 columns
#1303: FILE: include/trace/events/syscalls-core.h:1135:
+trace_event_syscall(5, keyctl, int, cmd, unsigned long, arg2, unsigned long, arg3, unsigned long, arg4, unsigned long, arg5);

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#1315: FILE: include/trace/events/syscalls-core.h:1147:
+trace_event_syscall(3, set_mempolicy, int, mode, unsigned long __user *, nmask, unsigned long, maxnode);

WARNING:LONG_LINE: line length of 144 exceeds 100 columns
#1319: FILE: include/trace/events/syscalls-core.h:1151:
+trace_event_syscall(4, migrate_pages, pid_t, pid, unsigned long, maxnode, const unsigned long __user *, from, const unsigned long __user *, to);

WARNING:LONG_LINE: line length of 170 exceeds 100 columns
#1323: FILE: include/trace/events/syscalls-core.h:1155:
+trace_event_syscall(6, move_pages, pid_t, pid, unsigned long, nr_pages, const void __user * __user *, pages, const int __user *, nodes, int __user *, status, int, flags);

WARNING:LONG_LINE: line length of 165 exceeds 100 columns
#1327: FILE: include/trace/events/syscalls-core.h:1159:
+trace_event_syscall(6, mbind, unsigned long, start, unsigned long, len, unsigned long, mode, unsigned long __user *, nmask, unsigned long, maxnode, unsigned, flags);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1327: FILE: include/trace/events/syscalls-core.h:1159:
+trace_event_syscall(6, mbind, unsigned long, start, unsigned long, len, unsigned long, mode, unsigned long __user *, nmask, unsigned long, maxnode, unsigned, flags);

WARNING:LONG_LINE: line length of 158 exceeds 100 columns
#1331: FILE: include/trace/events/syscalls-core.h:1163:
+trace_event_syscall(5, get_mempolicy, int __user *, policy, unsigned long __user *, nmask, unsigned long, maxnode, unsigned long, addr, unsigned long, flags);

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#1355: FILE: include/trace/events/syscalls-core.h:1187:
+trace_event_syscall(4, spu_create, const char __user *, name, unsigned int, flags, mode_t, mode, int, fd);

CHECK:CAMELCASE: Avoid CamelCase: <EXITCASEspu_create>
#1356: FILE: include/trace/events/syscalls-core.h:1188:
+#define EXITCASEspu_create

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1360: FILE: include/trace/events/syscalls-core.h:1192:
+trace_event_syscall(4, mknodat, int, dfd, const char __user *, filename, int, mode, unsigned, dev);

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#1372: FILE: include/trace/events/syscalls-core.h:1204:
+trace_event_syscall(3, symlinkat, const char __user *, oldname, int, newdfd, const char __user *, newname);

WARNING:LONG_LINE: line length of 129 exceeds 100 columns
#1376: FILE: include/trace/events/syscalls-core.h:1208:
+trace_event_syscall(5, linkat, int, olddfd, const char __user *, oldname, int, newdfd, const char __user *, newname, int, flags);

WARNING:LONG_LINE: line length of 119 exceeds 100 columns
#1380: FILE: include/trace/events/syscalls-core.h:1212:
+trace_event_syscall(4, renameat, int, olddfd, const char __user *, oldname, int, newdfd, const char __user *, newname);

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#1384: FILE: include/trace/events/syscalls-core.h:1216:
+trace_event_syscall(3, futimesat, int, dfd, char __user *, filename, struct timeval __user *, utimes);

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#1396: FILE: include/trace/events/syscalls-core.h:1228:
+trace_event_syscall(5, fchownat, int, dfd, const char __user *, filename, uid_t, user, gid_t, group, int, flag);

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#1404: FILE: include/trace/events/syscalls-core.h:1236:
+trace_event_syscall(4, newfstatat, int, dfd, char __user *, filename, struct stat __user *, statbuf, int, flag);

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#1408: FILE: include/trace/events/syscalls-core.h:1240:
+trace_event_syscall(4, fstatat64, int dfd, char __user *filename, struct stat64 __user *statbuf, int, flag);

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#1412: FILE: include/trace/events/syscalls-core.h:1244:
+trace_event_syscall(4, readlinkat, int, dfd, const char __user *, path, char __user *, buf, int, bufsiz);

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#1416: FILE: include/trace/events/syscalls-core.h:1248:
+trace_event_syscall(4, utimensat, int, dfd, char __user *, filename, struct timespec __user *, utimes, int, flags);

WARNING:LONG_LINE: line length of 141 exceeds 100 columns
#1424: FILE: include/trace/events/syscalls-core.h:1256:
+trace_event_syscall(6, splice, int, fd_in, loff_t __user *, off_in, int, fd_out, loff_t __user *, off_out, size_t, len, unsigned int, flags);

WARNING:LONG_LINE: line length of 121 exceeds 100 columns
#1428: FILE: include/trace/events/syscalls-core.h:1260:
+trace_event_syscall(4, vmsplice, int, fd, const struct iovec __user *, iov, unsigned long, nr_segs, unsigned int, flags);

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#1436: FILE: include/trace/events/syscalls-core.h:1268:
+trace_event_syscall(4, sync_file_range, int, fd, loff_t, offset, loff_t, nbytes, unsigned int, flags);

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#1440: FILE: include/trace/events/syscalls-core.h:1272:
+trace_event_syscall(4, sync_file_range2, int, fd, unsigned int, flags, loff_t, offset, loff_t, nbytes);

WARNING:LONG_LINE: line length of 129 exceeds 100 columns
#1444: FILE: include/trace/events/syscalls-core.h:1276:
+trace_event_syscall(3, get_robust_list, int, pid, struct robust_list_head __user * __user *, head_ptr, size_t __user *, len_ptr);

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#1452: FILE: include/trace/events/syscalls-core.h:1284:
+trace_event_syscall(3, getcpu, unsigned __user *, cpu, unsigned __user *, node, struct getcpu_cache __user *, cache);

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#1460: FILE: include/trace/events/syscalls-core.h:1292:
+trace_event_syscall(4, signalfd4, int, ufd, sigset_t __user *, user_mask, size_t, sizemask, int, flags);

WARNING:LONG_LINE: line length of 136 exceeds 100 columns
#1468: FILE: include/trace/events/syscalls-core.h:1300:
+trace_event_syscall(4, timerfd_settime, int, ufd, int, flags, const struct itimerspec __user *, utmr, struct itimerspec __user *, otmr);

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#1488: FILE: include/trace/events/syscalls-core.h:1320:
+trace_event_syscall(3, old_readdir, unsigned int, a, struct old_linux_dirent __user *, uptr, unsigned int, b);

WARNING:LONG_LINE: line length of 148 exceeds 100 columns
#1492: FILE: include/trace/events/syscalls-core.h:1324:
+trace_event_syscall(6, pselect6, int, a, fd_set __user *, b, fd_set __user *, c, fd_set __user *, d, struct timespec __user *, e, void __user *, f);

WARNING:LONG_LINE: line length of 142 exceeds 100 columns
#1496: FILE: include/trace/events/syscalls-core.h:1328:
+trace_event_syscall(5, ppoll, struct pollfd __user *, a, unsigned int, b, struct timespec __user *, c, const sigset_t __user *, d, size_t, e);

WARNING:LONG_LINE: line length of 161 exceeds 100 columns
#1508: FILE: include/trace/events/syscalls-core.h:1340:
+trace_event_syscall(5, perf_counter_open, const struct perf_counter_hw_event __user *, hw_event_uptr, pid_t, pid, int, cpu, int, group_fd, unsigned long, flags);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1516: FILE: include/trace/events/syscalls.h:1:
+#if !defined(_TRACE_SYSCALLS_H) || defined(TRACE_HEADER_MULTI_READ)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'id' - possible side-effects?
#1576: FILE: include/trace/events/syscalls.h:61:
+#define clock_id_toname(id) \
+	(id == CLOCK_REALTIME ? "CLOCK_REALTIME" : \
+		id == CLOCK_MONOTONIC ? "CLOCK_MONOTONIC" : \
+		id == CLOCK_PROCESS_CPUTIME_ID ? "CLOCK_PROCESS_CPUTIME_ID" : \
+		id == CLOCK_MONOTONIC_RAW ? "CLOCK_MONOTONIC_RAW" : \
+		id == CLOCK_SGI_CYCLE ? "CLOCK_SGI_CYCLE" : \
+		"UNKNOWN CLOCK")

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'id' may be better as '(id)' to avoid precedence issues
#1576: FILE: include/trace/events/syscalls.h:61:
+#define clock_id_toname(id) \
+	(id == CLOCK_REALTIME ? "CLOCK_REALTIME" : \
+		id == CLOCK_MONOTONIC ? "CLOCK_MONOTONIC" : \
+		id == CLOCK_PROCESS_CPUTIME_ID ? "CLOCK_PROCESS_CPUTIME_ID" : \
+		id == CLOCK_MONOTONIC_RAW ? "CLOCK_MONOTONIC_RAW" : \
+		id == CLOCK_SGI_CYCLE ? "CLOCK_SGI_CYCLE" : \
+		"UNKNOWN CLOCK")

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1589: FILE: include/trace/events/syscalls.h:74:
+#define expand_enter_proto_1(t1, p1) t1 p1

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1590: FILE: include/trace/events/syscalls.h:75:
+#define expand_enter_proto_2(t2, p2, ...) t2 p2, expand_enter_proto_1(__VA_ARGS__)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1591: FILE: include/trace/events/syscalls.h:76:
+#define expand_enter_proto_3(t3, p3, ...) t3 p3, expand_enter_proto_2(__VA_ARGS__)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1592: FILE: include/trace/events/syscalls.h:77:
+#define expand_enter_proto_4(t4, p4, ...) t4 p4, expand_enter_proto_3(__VA_ARGS__)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1593: FILE: include/trace/events/syscalls.h:78:
+#define expand_enter_proto_5(t5, p5, ...) t5 p5, expand_enter_proto_4(__VA_ARGS__)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1594: FILE: include/trace/events/syscalls.h:79:
+#define expand_enter_proto_6(t6, p6, ...) t6 p6, expand_enter_proto_5(__VA_ARGS__)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1598: FILE: include/trace/events/syscalls.h:83:
+#define expand_enter_args_2(t2, p2, ...) p2, expand_enter_args_1(__VA_ARGS__)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1599: FILE: include/trace/events/syscalls.h:84:
+#define expand_enter_args_3(t3, p3, ...) p3, expand_enter_args_2(__VA_ARGS__)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1600: FILE: include/trace/events/syscalls.h:85:
+#define expand_enter_args_4(t4, p4, ...) p4, expand_enter_args_3(__VA_ARGS__)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1601: FILE: include/trace/events/syscalls.h:86:
+#define expand_enter_args_5(t5, p5, ...) p5, expand_enter_args_4(__VA_ARGS__)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1602: FILE: include/trace/events/syscalls.h:87:
+#define expand_enter_args_6(t6, p6, ...) p6, expand_enter_args_5(__VA_ARGS__)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1605: FILE: include/trace/events/syscalls.h:90:
+#define expand_enter_entry_1(t1, p1) __field(t1, p1) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1606: FILE: include/trace/events/syscalls.h:91:
+#define expand_enter_entry_2(t2, p2, ...) __field(t2, p2) expand_enter_entry_1(__VA_ARGS__)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1607: FILE: include/trace/events/syscalls.h:92:
+#define expand_enter_entry_3(t3, p3, ...) __field(t3, p3) expand_enter_entry_2(__VA_ARGS__)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1608: FILE: include/trace/events/syscalls.h:93:
+#define expand_enter_entry_4(t4, p4, ...) __field(t4, p4) expand_enter_entry_3(__VA_ARGS__)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1609: FILE: include/trace/events/syscalls.h:94:
+#define expand_enter_entry_5(t5, p5, ...) __field(t5, p5) expand_enter_entry_4(__VA_ARGS__)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1610: FILE: include/trace/events/syscalls.h:95:
+#define expand_enter_entry_6(t6, p6, ...) __field(t6, p6) expand_enter_entry_5(__VA_ARGS__)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1613: FILE: include/trace/events/syscalls.h:98:
+#define expand_enter_assign_1(t1, p1) __entry->p1 = p1; $

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1613: FILE: include/trace/events/syscalls.h:98:
+#define expand_enter_assign_1(t1, p1) __entry->p1 = p1; 

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p1' - possible side-effects?
#1613: FILE: include/trace/events/syscalls.h:98:
+#define expand_enter_assign_1(t1, p1) __entry->p1 = p1; 

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'p1' may be better as '(p1)' to avoid precedence issues
#1613: FILE: include/trace/events/syscalls.h:98:
+#define expand_enter_assign_1(t1, p1) __entry->p1 = p1; 

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1613: FILE: include/trace/events/syscalls.h:98:
+#define expand_enter_assign_1(t1, p1) __entry->p1 = p1; 

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1614: FILE: include/trace/events/syscalls.h:99:
+#define expand_enter_assign_2(t2, p2, ...) __entry->p2 = p2; expand_enter_assign_1(__VA_ARGS__)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p2' - possible side-effects?
#1614: FILE: include/trace/events/syscalls.h:99:
+#define expand_enter_assign_2(t2, p2, ...) __entry->p2 = p2; expand_enter_assign_1(__VA_ARGS__)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'p2' may be better as '(p2)' to avoid precedence issues
#1614: FILE: include/trace/events/syscalls.h:99:
+#define expand_enter_assign_2(t2, p2, ...) __entry->p2 = p2; expand_enter_assign_1(__VA_ARGS__)

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1615: FILE: include/trace/events/syscalls.h:100:
+#define expand_enter_assign_3(t3, p3, ...) __entry->p3 = p3; expand_enter_assign_2(__VA_ARGS__)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p3' - possible side-effects?
#1615: FILE: include/trace/events/syscalls.h:100:
+#define expand_enter_assign_3(t3, p3, ...) __entry->p3 = p3; expand_enter_assign_2(__VA_ARGS__)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'p3' may be better as '(p3)' to avoid precedence issues
#1615: FILE: include/trace/events/syscalls.h:100:
+#define expand_enter_assign_3(t3, p3, ...) __entry->p3 = p3; expand_enter_assign_2(__VA_ARGS__)

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1616: FILE: include/trace/events/syscalls.h:101:
+#define expand_enter_assign_4(t4, p4, ...) __entry->p4 = p4; expand_enter_assign_3(__VA_ARGS__)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p4' - possible side-effects?
#1616: FILE: include/trace/events/syscalls.h:101:
+#define expand_enter_assign_4(t4, p4, ...) __entry->p4 = p4; expand_enter_assign_3(__VA_ARGS__)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'p4' may be better as '(p4)' to avoid precedence issues
#1616: FILE: include/trace/events/syscalls.h:101:
+#define expand_enter_assign_4(t4, p4, ...) __entry->p4 = p4; expand_enter_assign_3(__VA_ARGS__)

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1617: FILE: include/trace/events/syscalls.h:102:
+#define expand_enter_assign_5(t5, p5, ...) __entry->p5 = p5; expand_enter_assign_4(__VA_ARGS__)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p5' - possible side-effects?
#1617: FILE: include/trace/events/syscalls.h:102:
+#define expand_enter_assign_5(t5, p5, ...) __entry->p5 = p5; expand_enter_assign_4(__VA_ARGS__)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'p5' may be better as '(p5)' to avoid precedence issues
#1617: FILE: include/trace/events/syscalls.h:102:
+#define expand_enter_assign_5(t5, p5, ...) __entry->p5 = p5; expand_enter_assign_4(__VA_ARGS__)

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1618: FILE: include/trace/events/syscalls.h:103:
+#define expand_enter_assign_6(t6, p6, ...) __entry->p6 = p6; expand_enter_assign_5(__VA_ARGS__)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p6' - possible side-effects?
#1618: FILE: include/trace/events/syscalls.h:103:
+#define expand_enter_assign_6(t6, p6, ...) __entry->p6 = p6; expand_enter_assign_5(__VA_ARGS__)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'p6' may be better as '(p6)' to avoid precedence issues
#1618: FILE: include/trace/events/syscalls.h:103:
+#define expand_enter_assign_6(t6, p6, ...) __entry->p6 = p6; expand_enter_assign_5(__VA_ARGS__)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1620: FILE: include/trace/events/syscalls.h:105:
+#define expand_enter_printk_1(t1, p1) (u64)__entry->p1

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'p1' may be better as '(p1)' to avoid precedence issues
#1620: FILE: include/trace/events/syscalls.h:105:
+#define expand_enter_printk_1(t1, p1) (u64)__entry->p1

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1621: FILE: include/trace/events/syscalls.h:106:
+#define expand_enter_printk_2(t2, p2, ...) (u64)__entry->p2, expand_enter_printk_1(__VA_ARGS__)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'p2' may be better as '(p2)' to avoid precedence issues
#1621: FILE: include/trace/events/syscalls.h:106:
+#define expand_enter_printk_2(t2, p2, ...) (u64)__entry->p2, expand_enter_printk_1(__VA_ARGS__)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1622: FILE: include/trace/events/syscalls.h:107:
+#define expand_enter_printk_3(t3, p3, ...) (u64)__entry->p3, expand_enter_printk_2(__VA_ARGS__)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'p3' may be better as '(p3)' to avoid precedence issues
#1622: FILE: include/trace/events/syscalls.h:107:
+#define expand_enter_printk_3(t3, p3, ...) (u64)__entry->p3, expand_enter_printk_2(__VA_ARGS__)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1623: FILE: include/trace/events/syscalls.h:108:
+#define expand_enter_printk_4(t4, p4, ...) (u64)__entry->p4, expand_enter_printk_3(__VA_ARGS__)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'p4' may be better as '(p4)' to avoid precedence issues
#1623: FILE: include/trace/events/syscalls.h:108:
+#define expand_enter_printk_4(t4, p4, ...) (u64)__entry->p4, expand_enter_printk_3(__VA_ARGS__)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1624: FILE: include/trace/events/syscalls.h:109:
+#define expand_enter_printk_5(t5, p5, ...) (u64)__entry->p5, expand_enter_printk_4(__VA_ARGS__)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'p5' may be better as '(p5)' to avoid precedence issues
#1624: FILE: include/trace/events/syscalls.h:109:
+#define expand_enter_printk_5(t5, p5, ...) (u64)__entry->p5, expand_enter_printk_4(__VA_ARGS__)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1625: FILE: include/trace/events/syscalls.h:110:
+#define expand_enter_printk_6(t6, p6, ...) (u64)__entry->p6, expand_enter_printk_5(__VA_ARGS__)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'p6' may be better as '(p6)' to avoid precedence issues
#1625: FILE: include/trace/events/syscalls.h:110:
+#define expand_enter_printk_6(t6, p6, ...) (u64)__entry->p6, expand_enter_printk_5(__VA_ARGS__)

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#1628: FILE: include/trace/events/syscalls.h:113:
+#define TP_printk_1(...) TP_printk("%016Lx", expand_enter_printk_1(__VA_ARGS__))

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#1629: FILE: include/trace/events/syscalls.h:114:
+#define TP_printk_2(...) TP_printk("%016Lx %016Lx", expand_enter_printk_2(__VA_ARGS__))

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#1630: FILE: include/trace/events/syscalls.h:115:
+#define TP_printk_3(...) TP_printk("%016Lx %016Lx %016Lx", expand_enter_printk_3(__VA_ARGS__))

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#1631: FILE: include/trace/events/syscalls.h:116:
+#define TP_printk_4(...) TP_printk("%016Lx %016Lx %016Lx %016Lx", expand_enter_printk_4(__VA_ARGS__))

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#1631: FILE: include/trace/events/syscalls.h:116:
+#define TP_printk_4(...) TP_printk("%016Lx %016Lx %016Lx %016Lx", expand_enter_printk_4(__VA_ARGS__))

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#1632: FILE: include/trace/events/syscalls.h:117:
+#define TP_printk_5(...) TP_printk("%016Lx %016Lx %016Lx %016Lx %016Lx", \

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#1634: FILE: include/trace/events/syscalls.h:119:
+#define TP_printk_6(...) TP_printk("%016Lx %016Lx %016Lx %016Lx %016Lx %016Lx", \

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1637: FILE: include/trace/events/syscalls.h:122:
+#define trace_event_syscall_enter(n, name, ...)			\
+	TRACE_EVENT(sysenter_##name,				\
+		TP_PROTO(expand_enter_proto_##n(__VA_ARGS__)),	\
+		TP_ARGS(expand_enter_args_##n(__VA_ARGS__)),	\
+		TP_STRUCT__entry(expand_enter_entry_##n(__VA_ARGS__)), \
+		TP_fast_assign(expand_enter_assign_##n(__VA_ARGS__)), \
+		TP_printk_##n(__VA_ARGS__) \
+	);							

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1644: FILE: include/trace/events/syscalls.h:129:
+^I);^I^I^I^I^I^I^I$

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1648: FILE: include/trace/events/syscalls.h:133:
+#define trace_event_syscall_exit(name)				\
+	TRACE_EVENT(sysexit_##name,				\
+		TP_PROTO(long ret),				\
+		TP_ARGS(ret),					\
+		TP_STRUCT__entry(				\
+			__field(long, retval)			\
+		),						\
+		TP_fast_assign(					\
+			__entry->retval = ret;			\
+		),						\
+		TP_printk("return value: %ld", __entry->retval) \
+	);							

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1659: FILE: include/trace/events/syscalls.h:144:
+^I);^I^I^I^I^I^I^I$

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1662: FILE: include/trace/events/syscalls.h:147:
+#define trace_event_syscall(n, name, ...)			\
+	trace_event_syscall_enter(n, name, __VA_ARGS__);	\
+	trace_event_syscall_exit(name);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#1662: FILE: include/trace/events/syscalls.h:147:
+#define trace_event_syscall(n, name, ...)			\
+	trace_event_syscall_enter(n, name, __VA_ARGS__);	\
+	trace_event_syscall_exit(name);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1662: FILE: include/trace/events/syscalls.h:147:
+#define trace_event_syscall(n, name, ...)			\
+	trace_event_syscall_enter(n, name, __VA_ARGS__);	\
+	trace_event_syscall_exit(name);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1666: FILE: include/trace/events/syscalls.h:151:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1690: FILE: include/trace/syscall.h:29:
+extern struct syscall_metadata *syscall_nr_to_meta(int nr);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1691: FILE: include/trace/syscall.h:30:
+extern void syscall_tracepoints_enter(struct pt_regs *regs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1692: FILE: include/trace/syscall.h:31:
+extern void syscall_tracepoints_exit(struct pt_regs *regs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1698: FILE: include/trace/syscall.h:37:
+extern struct syscall_metadata *syscall_nr_to_meta(int nr);

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1706: FILE: include/trace/syscall.h:45:
+#define expand_enter_sys_args_1(t1, a1) (t1) sys_args[0]

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1707: FILE: include/trace/syscall.h:46:
+#define expand_enter_sys_args_2(t1, a1, t2, a2) expand_enter_sys_args_1(t1, a1), (t2) sys_args[1]

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#1708: FILE: include/trace/syscall.h:47:
+#define expand_enter_sys_args_3(t1, a1, t2, a2, t3, a3) expand_enter_sys_args_2(t1, a1, t2, a2), (t3) sys_args[2]

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1708: FILE: include/trace/syscall.h:47:
+#define expand_enter_sys_args_3(t1, a1, t2, a2, t3, a3) expand_enter_sys_args_2(t1, a1, t2, a2), (t3) sys_args[2]

WARNING:LONG_LINE: line length of 129 exceeds 100 columns
#1709: FILE: include/trace/syscall.h:48:
+#define expand_enter_sys_args_4(t1, a1, t2, a2, t3, a3, t4, a4) expand_enter_sys_args_3(t1, a1, t2, a2, t3, a3), (t4) sys_args[3]

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1709: FILE: include/trace/syscall.h:48:
+#define expand_enter_sys_args_4(t1, a1, t2, a2, t3, a3, t4, a4) expand_enter_sys_args_3(t1, a1, t2, a2, t3, a3), (t4) sys_args[3]

WARNING:LONG_LINE: line length of 145 exceeds 100 columns
#1710: FILE: include/trace/syscall.h:49:
+#define expand_enter_sys_args_5(t1, a1, t2, a2, t3, a3, t4, a4, t5, a5) expand_enter_sys_args_4(t1, a1, t2, a2, t3, a3, t4, a4), (t5) sys_args[4]

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1710: FILE: include/trace/syscall.h:49:
+#define expand_enter_sys_args_5(t1, a1, t2, a2, t3, a3, t4, a4, t5, a5) expand_enter_sys_args_4(t1, a1, t2, a2, t3, a3, t4, a4), (t5) sys_args[4]

WARNING:LONG_LINE: line length of 161 exceeds 100 columns
#1711: FILE: include/trace/syscall.h:50:
+#define expand_enter_sys_args_6(t1, a1, t2, a2, t3, a3, t4, a4, t5, a5, t6, a6) expand_enter_sys_args_5(t1, a1, t2, a2, t3, a3, t4, a4, t5, a5), (t6) sys_args[5]

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1711: FILE: include/trace/syscall.h:50:
+#define expand_enter_sys_args_6(t1, a1, t2, a2, t3, a3, t4, a4, t5, a5, t6, a6) expand_enter_sys_args_5(t1, a1, t2, a2, t3, a3, t4, a4, t5, a5), (t6) sys_args[5]

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1713: FILE: include/trace/syscall.h:52:
+
+

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1714: FILE: include/trace/syscall.h:53:
+#define create_syscall_enter(n, sysname, ...)           \
+        case __NR_##sysname:                            \
+                syscall_get_arguments(current, regs, 0, n, sys_args); \
+                trace_sysenter_##sysname(expand_enter_sys_args_##n(__VA_ARGS__)); \
+                break;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1714: FILE: include/trace/syscall.h:53:
+#define create_syscall_enter(n, sysname, ...)           \
+        case __NR_##sysname:                            \
+                syscall_get_arguments(current, regs, 0, n, sys_args); \
+                trace_sysenter_##sysname(expand_enter_sys_args_##n(__VA_ARGS__)); \
+                break;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1715: FILE: include/trace/syscall.h:54:
+        case __NR_##sysname:                            \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1715: FILE: include/trace/syscall.h:54:
+        case __NR_##sysname:                            \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1716: FILE: include/trace/syscall.h:55:
+                syscall_get_arguments(current, regs, 0, n, sys_args); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1716: FILE: include/trace/syscall.h:55:
+                syscall_get_arguments(current, regs, 0, n, sys_args); \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1717: FILE: include/trace/syscall.h:56:
+                trace_sysenter_##sysname(expand_enter_sys_args_##n(__VA_ARGS__)); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1717: FILE: include/trace/syscall.h:56:
+                trace_sysenter_##sysname(expand_enter_sys_args_##n(__VA_ARGS__)); \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1718: FILE: include/trace/syscall.h:57:
+                break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1718: FILE: include/trace/syscall.h:57:
+                break;$

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1720: FILE: include/trace/syscall.h:59:
+#define create_syscall_exit(sysname)                            \
+        case __NR_##sysname:                                    \
+                trace_sysexit_##sysname(ret);                   \
+                break;                                          \
+

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1720: FILE: include/trace/syscall.h:59:
+#define create_syscall_exit(sysname)                            \
+        case __NR_##sysname:                                    \
+                trace_sysexit_##sysname(ret);                   \
+                break;                                          \
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#1721: FILE: include/trace/syscall.h:60:
+        case __NR_##sysname:                                    \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1721: FILE: include/trace/syscall.h:60:
+        case __NR_##sysname:                                    \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1722: FILE: include/trace/syscall.h:61:
+                trace_sysexit_##sysname(ret);                   \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1722: FILE: include/trace/syscall.h:61:
+                trace_sysexit_##sysname(ret);                   \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1723: FILE: include/trace/syscall.h:62:
+                break;                                          \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1723: FILE: include/trace/syscall.h:62:
+                break;                                          \$

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1726: FILE: include/trace/syscall.h:65:
+#define trace_event_syscall(n, name, ...)			\
+	create_syscall_enter(n, name, __VA_ARGS__);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1737: FILE: include/trace/syscall.h:76:
+^Iswitch (syscall_nr) {^I$

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1743: FILE: include/trace/syscall.h:82:
+#define trace_event_syscall(n, name, ...)			\
+	create_syscall_exit(name);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1746: FILE: include/trace/syscall.h:85:
+static inline void __syscall_tracepoints_exit(struct pt_regs * regs)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#1748: FILE: include/trace/syscall.h:87:
+        int syscall_nr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1748: FILE: include/trace/syscall.h:87:
+        int syscall_nr;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1749: FILE: include/trace/syscall.h:88:
+        long ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1749: FILE: include/trace/syscall.h:88:
+        long ret;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1751: FILE: include/trace/syscall.h:90:
+        syscall_nr = syscall_get_nr(current, regs);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1751: FILE: include/trace/syscall.h:90:
+        syscall_nr = syscall_get_nr(current, regs);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1752: FILE: include/trace/syscall.h:91:
+        ret = syscall_get_return_value(current, regs);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1752: FILE: include/trace/syscall.h:91:
+        ret = syscall_get_return_value(current, regs);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1753: FILE: include/trace/syscall.h:92:
+        switch (syscall_nr) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1753: FILE: include/trace/syscall.h:92:
+        switch (syscall_nr) {$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1758: FILE: include/trace/syscall.h:97:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#1843: FILE: kernel/trace/trace.c:3370:
+                                                size_t count, loff_t *ppos)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1843: FILE: kernel/trace/trace.c:3370:
+static ssize_t write_tracesys(struct file *file, const char __user *user_buf,
+                                                size_t count, loff_t *ppos)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1843: FILE: kernel/trace/trace.c:3370:
+                                                size_t count, loff_t *ppos)$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1848: FILE: kernel/trace/trace.c:3375:
+	buf_size = min(count, (sizeof(buf)-1));
 	                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1864: FILE: kernel/trace/trace.c:3391:
+               char __user *user_buf, size_t count, loff_t *ppos)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1864: FILE: kernel/trace/trace.c:3391:
+static ssize_t read_tracesys(struct file *file,
+               char __user *user_buf, size_t count, loff_t *ppos)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1864: FILE: kernel/trace/trace.c:3391:
+               char __user *user_buf, size_t count, loff_t *ppos)$

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1877: FILE: kernel/trace/trace.c:3404:
+static struct file_operations tracing_syscall_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1893: FILE: kernel/trace/trace.c:4196:
+	trace_create_file("trace_syscalls", 0644, d_tracer,
+			NULL, &tracing_syscall_fops);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000113743.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 59 errors, 149 warnings, 37 checks, 1740 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000113743.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
