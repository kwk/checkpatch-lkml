WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#38: FILE: Makefile:4:
+EXTRAVERSION = .12
 ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around c->cfgtable->CmdsOutMax
#203: FILE: drivers/block/cciss.c:3092:
+	c->max_commands = readl(&(c->cfgtable->CmdsOutMax));

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:CAMELCASE: Avoid CamelCase: <CmdsOutMax>
#203: FILE: drivers/block/cciss.c:3092:
+	c->max_commands = readl(&(c->cfgtable->CmdsOutMax));

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#327: FILE: drivers/md/md.c:3810:
+			printk(KERN_ERR

CHECK:CAMELCASE: Avoid CamelCase: <R5_Insync>
#358: FILE: drivers/md/raid5.c:2002:
+		} else if (test_bit(R5_Insync, &dev->flags)) {

CHECK:BRACES: Unbalanced braces around else statement
#384: FILE: drivers/md/raid5.c:4164:
+		} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#473: FILE: drivers/message/fusion/mptspi.c:1274:
+	 * if we get an ioc fault on bringup, ioc->sh will be NULL */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:BRACES: Unbalanced braces around else statement
#660: FILE: drivers/rapidio/rio-driver.c:104:
+		} else

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#804: FILE: drivers/usb/core/hcd.c:1875:
 	if (hcd->driver->irq) {
+

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#827: FILE: drivers/usb/host/ehci.h:184:
+	if (timer_pending(&ehci->watchdog)
+			&& ((BIT(TIMER_ASYNC_SHRINK) | BIT(TIMER_ASYNC_OFF))

CHECK:CAMELCASE: Avoid CamelCase: <tdINFO>
#909: FILE: drivers/usb/host/ohci-q.c:955:
+			u32		tdINFO;

CHECK:CAMELCASE: Avoid CamelCase: <hwINFO>
#922: FILE: drivers/usb/host/ohci-q.c:975:
+			tdINFO = hc32_to_cpup(ohci, &td->hwINFO);

CHECK:CAMELCASE: Avoid CamelCase: <hwHeadP>
#924: FILE: drivers/usb/host/ohci-q.c:977:
+				ed->hwHeadP &= ~cpu_to_hc32(ohci, ED_C);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#963: FILE: drivers/video/fb_defio.c:89:
+	/* we loop through the pagelist before adding in order
+	to keep the pagelist sorted */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#963: FILE: drivers/video/fb_defio.c:89:
+	to keep the pagelist sorted */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#966: FILE: drivers/video/fb_defio.c:92:
+		/* this check is to catch the case where a new
+		process could start writing to the same page

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#969: FILE: drivers/video/fb_defio.c:95:
+		writable */

WARNING:CONSTANT_CONVERSION: __constant_cpu_to_le32 should be cpu_to_le32
#1040: FILE: fs/cifs/cifsacl.c:37:
+	{{1, 1, {0, 0, 0, 0, 0, 5}, {__constant_cpu_to_le32(11), 0, 0, 0, 0} }, "net-users"},

Use of __constant_<foo> form is discouraged for the following functions::

  __constant_cpu_to_be[x]
  __constant_cpu_to_le[x]
  __constant_be[x]_to_cpu
  __constant_le[x]_to_cpu
  __constant_htons
  __constant_ntohs

Using any of these outside of include/uapi/ is not preferred as using the
function without __constant_ is identical when the argument is a
constant.

In big endian systems, the macros like __constant_cpu_to_be32(x) and
cpu_to_be32(x) expand to the same expression::

  #define __constant_cpu_to_be32(x) ((__force __be32)(__u32)(x))
  #define __cpu_to_be32(x)          ((__force __be32)(__u32)(x))

In little endian systems, the macros __constant_cpu_to_be32(x) and
cpu_to_be32(x) expand to __constant_swab32 and __swab32.  __swab32
has a __builtin_constant_p check::

  #define __swab32(x)				\
    (__builtin_constant_p((__u32)(x)) ?	\
    ___constant_swab32(x) :			\
    __fswab32(x))

So ultimately they have a special case for constants.
Similar is the case with all of the macros in the list.  Thus
using the __constant_... forms are unnecessarily verbose and
not preferred outside of include/uapi.

See: https://lore.kernel.org/lkml/1400106425.12666.6.camel@joe-AO725/

WARNING:CONSTANT_CONVERSION: __constant_cpu_to_le32 should be cpu_to_le32
#1041: FILE: fs/cifs/cifsacl.c:38:
+	{{1, 1, {0, 0, 0, 0, 0, 5}, {__constant_cpu_to_le32(18), 0, 0, 0, 0} }, "sys"},

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#1042: FILE: fs/cifs/cifsacl.c:39:
+	{{1, 2, {0, 0, 0, 0, 0, 5}, {__constant_cpu_to_le32(32), __constant_cpu_to_le32(544), 0, 0, 0} }, "root"},

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:CONSTANT_CONVERSION: __constant_cpu_to_le32 should be cpu_to_le32
#1042: FILE: fs/cifs/cifsacl.c:39:
+	{{1, 2, {0, 0, 0, 0, 0, 5}, {__constant_cpu_to_le32(32), __constant_cpu_to_le32(544), 0, 0, 0} }, "root"},

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#1043: FILE: fs/cifs/cifsacl.c:40:
+	{{1, 2, {0, 0, 0, 0, 0, 5}, {__constant_cpu_to_le32(32), __constant_cpu_to_le32(545), 0, 0, 0} }, "users"},

WARNING:CONSTANT_CONVERSION: __constant_cpu_to_le32 should be cpu_to_le32
#1043: FILE: fs/cifs/cifsacl.c:40:
+	{{1, 2, {0, 0, 0, 0, 0, 5}, {__constant_cpu_to_le32(32), __constant_cpu_to_le32(545), 0, 0, 0} }, "users"},

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#1044: FILE: fs/cifs/cifsacl.c:41:
+	{{1, 2, {0, 0, 0, 0, 0, 5}, {__constant_cpu_to_le32(32), __constant_cpu_to_le32(546), 0, 0, 0} }, "guest"} }

WARNING:CONSTANT_CONVERSION: __constant_cpu_to_le32 should be cpu_to_le32
#1044: FILE: fs/cifs/cifsacl.c:41:
+	{{1, 2, {0, 0, 0, 0, 0, 5}, {__constant_cpu_to_le32(32), __constant_cpu_to_le32(546), 0, 0, 0} }, "guest"} }

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1183: FILE: net/can/af_can.c:623:
+	BUG_ON(skb->len != sizeof(struct can_frame) || cf->can_dlc > 8);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'msg_head.nframes != 1'
#1255: FILE: net/can/bcm.c:1275:
+		if ((msg_head.nframes != 1) || (size != CFSIZ + MHSIZ))

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1292: FILE: net/mac80211/tx.c:1186:
+			/*
+			 * Driver bug, it's rejecting packets but

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000250012.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 18 warnings, 11 checks, 1021 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000250012.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
