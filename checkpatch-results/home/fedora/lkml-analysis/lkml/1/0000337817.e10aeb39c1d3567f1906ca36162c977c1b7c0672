WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
According to HT spec, to get message interrupt from devices mapped to HT interrupt message, 

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#52: FILE: drivers/pci/quirks.c:1709:
+ *  Force enable MSI mapping capability on HT bridges  */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#62: FILE: drivers/pci/quirks.c:1719:
+			printk(KERN_INFO "PCI: Enabling HT MSI Mapping on %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#63: FILE: drivers/pci/quirks.c:1720:
+			printk(KERN_INFO "PCI: Enabling HT MSI Mapping on %s\n",
+						dev->dev.bus_id);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#73: FILE: drivers/pci/quirks.c:1730:
+static void __devinit nv_msi_ht_cap_quirk(struct pci_dev *dev) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#73: FILE: drivers/pci/quirks.c:1730:
+static void __devinit nv_msi_ht_cap_quirk(struct pci_dev *dev) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#74: FILE: drivers/pci/quirks.c:1731:
+static void __devinit nv_msi_ht_cap_quirk(struct pci_dev *dev) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#77: FILE: drivers/pci/quirks.c:1734:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#80: FILE: drivers/pci/quirks.c:1737:
+ ^I */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#80: FILE: drivers/pci/quirks.c:1737:
+ ^I */$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#82: FILE: drivers/pci/quirks.c:1739:
+	if ((host_bridge = pci_get_bus_and_slot(0, PCI_DEVFN(0,0))) == NULL) {
 	                                                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#82: FILE: drivers/pci/quirks.c:1739:
+	if ((host_bridge = pci_get_bus_and_slot(0, PCI_DEVFN(0,0))) == NULL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#83: FILE: drivers/pci/quirks.c:1740:
+		printk(KERN_WARNING

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'nv_msi_ht_cap_quirk', this function's name, in a string
#84: FILE: drivers/pci/quirks.c:1741:
+			"PCI: nv_msi_ht_cap_quirk didn't locate host bridge\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#88: FILE: drivers/pci/quirks.c:1745:
+	if ((pos = pci_find_ht_capability(host_bridge, HT_CAPTYPE_SLAVE)) != 0) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#101: FILE: drivers/pci/quirks.c:1758:
+			printk(KERN_INFO "PCI: Quirk disabling HT MSI mapping on %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#113: FILE: drivers/pci/quirks.c:1770:
+DECLARE_PCI_FIXUP_FINAL(PCI_VENDOR_ID_NVIDIA, PCI_ANY_ID,
+							nv_msi_ht_cap_quirk);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#115: FILE: drivers/pci/quirks.c:1772:
 static void __devinit quirk_msi_intx_disable_bug(struct pci_dev *dev)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000337817.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 9 warnings, 3 checks, 70 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000337817.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
