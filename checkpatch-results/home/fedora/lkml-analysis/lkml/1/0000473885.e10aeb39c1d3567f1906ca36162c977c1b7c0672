WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#26: 
Provide support for concurrent write side operations without changing the API

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#84: FILE: include/linux/radix-tree.h:65:
+	spinlock_t		lock;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#131: FILE: include/linux/radix-tree.h:106:
+	spinlock_t		*locked;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#142: FILE: include/linux/radix-tree.h:117:
+#define DECLARE_RADIX_TREE_CONTEXT(context, tree) ^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#143: FILE: include/linux/radix-tree.h:118:
+^Istruct radix_tree_context context = { ^I^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#144: FILE: include/linux/radix-tree.h:119:
+^I^I.root = (tree), ^I^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#146: FILE: include/linux/radix-tree.h:121:
+       ^I}$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#146: FILE: include/linux/radix-tree.h:121:
+       ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#146: FILE: include/linux/radix-tree.h:121:
+       ^I}$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#150: FILE: include/linux/radix-tree.h:125:
+init_radix_tree_context(struct radix_tree_context *wctx,
+		struct radix_tree_root *root)

WARNING:LINE_SPACING: Missing a blank line after declarations
#167: FILE: include/linux/radix-tree.h:211:
+	struct radix_tree_root *root = context->root;
+	rcu_read_lock();

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#170: FILE: include/linux/radix-tree.h:214:
+	BUG_ON(context->locked);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#180: FILE: include/linux/radix-tree.h:224:
+	BUG_ON(!context->locked);

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#209: FILE: lib/radix-tree.c:57:
+	spinlock_t	lock;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#217: FILE: lib/radix-tree.c:65:
+	spinlock_t *locked;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#259: FILE: lib/radix-tree.c:225:
+static inline int any_tag_set_but(struct radix_tree_node *node,
+		unsigned int tag, int offset)

WARNING:LINE_SPACING: Missing a blank line after declarations
#264: FILE: lib/radix-tree.c:230:
+	unsigned long offset_mask = ~(1UL << (offset % BITS_PER_LONG));
+	for (idx = 0; idx < RADIX_TREE_TAG_LONGS; idx++) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#266: FILE: lib/radix-tree.c:232:
+		unsigned long mask = ~0UL;
+		if (idx == offset_idx)

WARNING:LINE_SPACING: Missing a blank line after declarations
#284: FILE: lib/radix-tree.c:270:
+		unsigned int newheight = root->height + 1;
+		if (!(node = radix_tree_node_alloc(root, newheight)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#284: FILE: lib/radix-tree.c:270:
+		if (!(node = radix_tree_node_alloc(root, newheight)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'context' may be better as '(context)' to avoid precedence issues
#314: FILE: lib/radix-tree.c:304:
+#define RADIX_TREE_CONTEXT(context, root) \
+	struct radix_tree_context *context = radix_tree_get_context(root)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#318: FILE: lib/radix-tree.c:308:
+static inline spinlock_t *radix_node_lock(struct radix_tree_root *root,
+		struct radix_tree_node *node)

WARNING:LINE_SPACING: Missing a blank line after declarations
#321: FILE: lib/radix-tree.c:311:
+	spinlock_t *locked = &node->lock;
+	spin_lock(locked);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#326: FILE: lib/radix-tree.c:316:
+static inline void radix_ladder_lock(struct radix_tree_context *context,
+		struct radix_tree_node *node)

WARNING:LINE_SPACING: Missing a blank line after declarations
#331: FILE: lib/radix-tree.c:321:
+		spinlock_t *locked = radix_node_lock(root, node);
+		if (locked) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#339: FILE: lib/radix-tree.c:329:
+static inline void radix_path_init(struct radix_tree_context *context,
+		struct radix_tree_path *pathp)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#345: FILE: lib/radix-tree.c:335:
+static inline void radix_path_lock(struct radix_tree_context *context,
+		struct radix_tree_path *pathp, struct radix_tree_node *node)

CHECK:BRACES: braces {} should be used on all arms of this statement
#347: FILE: lib/radix-tree.c:337:
+	if (context) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#350: FILE: lib/radix-tree.c:340:
+		spinlock_t *locked = radix_node_lock(root, node);
+		if (locked)

CHECK:BRACES: Unbalanced braces around else statement
#353: FILE: lib/radix-tree.c:343:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#358: FILE: lib/radix-tree.c:348:
+static inline void radix_path_unlock(struct radix_tree_context *context,
+		struct radix_tree_path *punlock)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#361: FILE: lib/radix-tree.c:351:
+	if (context && punlock->locked &&
+			context->locked != punlock->locked)

WARNING:LINE_SPACING: Missing a blank line after declarations
#380: FILE: lib/radix-tree.c:378:
+	int tag;
+	RADIX_TREE_CONTEXT(context, root);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#389: FILE: lib/radix-tree.c:398:
+			if (!(slot = radix_tree_node_alloc(root, height)))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#412: FILE: lib/radix-tree.c:426:
+			BUG_ON(tag_get(node, tag, offset));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#418: FILE: lib/radix-tree.c:430:
+			BUG_ON(root_tag_get(root, tag));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#479: FILE: lib/radix-tree.c:591:
+static inline int radix_tree_unlock_tag(struct radix_tree_root *root,
+		struct radix_tree_path *pathp, int tag)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#600: FILE: lib/radix-tree.c:1167:
+static inline int radix_tree_unlock_all(struct radix_tree_root *root,
+		struct radix_tree_path *pathp)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#706: FILE: lib/radix-tree.c:1272:
+	BUG_ON(piter->node);

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#732: FILE: init/Kconfig:319:
+config RADIX_TREE_CONCURRENT
+	bool "Enable concurrent radix tree operations (EXPERIMENTAL)"
+	default y if SMP
+

Kconfig symbols should have a help text which fully describes
it.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000473885.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 20 warnings, 17 checks, 620 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000473885.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
