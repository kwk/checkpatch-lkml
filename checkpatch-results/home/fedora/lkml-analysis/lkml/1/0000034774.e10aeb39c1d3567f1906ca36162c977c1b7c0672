WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#65: FILE: Makefile:4:
+EXTRAVERSION = .8
 ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:CAMELCASE: Avoid CamelCase: <Scsi_Host>
#91: FILE: drivers/scsi/hosts.c:195:
+int scsi_add_host_with_dma(struct Scsi_Host *shost, struct device *dev,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:SPACING: No space is necessary after a cast
#144: FILE: drivers/scsi/megaraid/megaraid_sas.c:3112:
+		(unsigned long *) ((unsigned long)cmd->frame + ioc->sense_off);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#154: FILE: drivers/scsi/megaraid/megaraid_sas.c:3143:
+		sense_ptr = (unsigned long *) ((unsigned long)ioc->frame.raw +

ERROR:SPACING: space required after that ',' (ctx:VxV)
#207: FILE: fs/ext4/balloc.c:767:
+	if (EXT4_HAS_INCOMPAT_FEATURE(sb,EXT4_FEATURE_INCOMPAT_META_BG))
 	                                ^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#245: FILE: fs/ext4/ext4.h:117:
+typedef struct ext4_io_end {

WARNING:TYPO_SPELLING: 'unitialized' may be misspelled - perhaps 'uninitialized'?
#297: FILE: fs/ext4/ext4.h:364:
+	unitialized extents if not allocated, split the uninitialized
 	^^^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#297: FILE: fs/ext4/ext4.h:364:
+	/* caller is from the direct IO path, request to creation of an
+	unitialized extents if not allocated, split the uninitialized

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#298: FILE: fs/ext4/ext4.h:365:
+	extent if blocks has been preallocated already*/

CHECK:SPACING: spaces preferred around that '|' (ctx:VxE)
#301: FILE: fs/ext4/ext4.h:368:
+#define EXT4_GET_BLOCKS_DIO_CREATE_EXT		(EXT4_GET_BLOCKS_DIO|\
                                       		                    ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxE)
#304: FILE: fs/ext4/ext4.h:371:
+#define EXT4_GET_BLOCKS_DIO_CONVERT_EXT		(EXT4_GET_BLOCKS_CONVERT|\
                                        		                        ^

WARNING:TYPO_SPELLING: 'addres' may be misspelled - perhaps 'address'?
#313: FILE: fs/ext4/ext4.h:428:
+/* Max physical block we can addres w/o extents */
                              ^^^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#326: FILE: fs/ext4/ext4.h:527:
+                          ((time->tv_nsec << EXT4_EPOCH_BITS) & EXT4_NSEC_MASK));$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#326: FILE: fs/ext4/ext4.h:527:
+                          ((time->tv_nsec << EXT4_EPOCH_BITS) & EXT4_NSEC_MASK));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#335: FILE: fs/ext4/ext4.h:535:
+       time->tv_nsec = (le32_to_cpu(extra) & EXT4_NSEC_MASK) >> EXT4_EPOCH_BITS;$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#404: FILE: fs/ext4/ext4.h:1431:
+extern int ext4_truncate_restart_trans(handle_t *, struct inode *, int nblocks);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'handle_t *' should also have an identifier name
#404: FILE: fs/ext4/ext4.h:1431:
+extern int ext4_truncate_restart_trans(handle_t *, struct inode *, int nblocks);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#404: FILE: fs/ext4/ext4.h:1431:
+extern int ext4_truncate_restart_trans(handle_t *, struct inode *, int nblocks);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#413: FILE: fs/ext4/ext4.h:1443:
+extern int flush_aio_dio_completed_IO(struct inode *inode);

WARNING:LINE_SPACING: Missing a blank line after declarations
#443: FILE: fs/ext4/ext4.h:1677:
+	spinlock_t *lock = ext4_group_lock_ptr(sb, group);
+	if (spin_trylock(lock))

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Unbalanced braces around else statement
#449: FILE: fs/ext4/ext4.h:1683:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#465: FILE: fs/ext4/ext4.h:1742:
+extern int ext4_convert_unwritten_extents(struct inode *inode, loff_t offset,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#466: FILE: fs/ext4/ext4.h:1743:
+extern int ext4_convert_unwritten_extents(struct inode *inode, loff_t offset,
+			  loff_t len);

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#491: FILE: fs/ext4/ext4_extents.h:243:
+extern int ext4_ext_insert_extent(handle_t *, struct inode *, struct ext4_ext_path *, struct ext4_extent *, int);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#491: FILE: fs/ext4/ext4_extents.h:243:
+extern int ext4_ext_insert_extent(handle_t *, struct inode *, struct ext4_ext_path *, struct ext4_extent *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'handle_t *' should also have an identifier name
#491: FILE: fs/ext4/ext4_extents.h:243:
+extern int ext4_ext_insert_extent(handle_t *, struct inode *, struct ext4_ext_path *, struct ext4_extent *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#491: FILE: fs/ext4/ext4_extents.h:243:
+extern int ext4_ext_insert_extent(handle_t *, struct inode *, struct ext4_ext_path *, struct ext4_extent *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ext4_ext_path *' should also have an identifier name
#491: FILE: fs/ext4/ext4_extents.h:243:
+extern int ext4_ext_insert_extent(handle_t *, struct inode *, struct ext4_ext_path *, struct ext4_extent *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ext4_extent *' should also have an identifier name
#491: FILE: fs/ext4/ext4_extents.h:243:
+extern int ext4_ext_insert_extent(handle_t *, struct inode *, struct ext4_ext_path *, struct ext4_extent *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#491: FILE: fs/ext4/ext4_extents.h:243:
+extern int ext4_ext_insert_extent(handle_t *, struct inode *, struct ext4_ext_path *, struct ext4_extent *, int);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#563: FILE: fs/ext4/ext4_jbd2.h:103:
+#define EXT4_MAXQUOTAS_TRANS_BLOCKS(sb) (MAXQUOTAS*EXT4_QUOTA_TRANS_BLOCKS(sb))
                                                   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#564: FILE: fs/ext4/ext4_jbd2.h:104:
+#define EXT4_MAXQUOTAS_INIT_BLOCKS(sb) (MAXQUOTAS*EXT4_QUOTA_INIT_BLOCKS(sb))
                                                  ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#565: FILE: fs/ext4/ext4_jbd2.h:105:
+#define EXT4_MAXQUOTAS_DEL_BLOCKS(sb) (MAXQUOTAS*EXT4_QUOTA_DEL_BLOCKS(sb))
                                                 ^

CHECK:SPACING: No space is necessary after a cast
#574: FILE: fs/ext4/ext4_jbd2.h:168:
+#define EXT4_NOJOURNAL_MAX_REF_COUNT ((unsigned long) 4096)

WARNING:TYPECAST_INT_CONSTANT: Unnecessary typecast of c90 int constant - '(unsigned long) 4096' could be '4096UL'
#574: FILE: fs/ext4/ext4_jbd2.h:168:
+#define EXT4_NOJOURNAL_MAX_REF_COUNT ((unsigned long) 4096)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#577: FILE: fs/ext4/ext4_jbd2.h:171:
+ * a properly allocated handle is using a journal or not. */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#642: FILE: fs/ext4/extents.c:714:
+int ext4_ext_insert_index(handle_t *handle, struct inode *inode,
 				struct ext4_ext_path *curp,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'flag != EXT4_GET_BLOCKS_DIO_CREATE_EXT'
#659: FILE: fs/ext4/extents.c:1591:
+	if (ex && (flag != EXT4_GET_BLOCKS_DIO_CREATE_EXT)
+		&& ext4_can_extents_be_merged(inode, ex, newext)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#660: FILE: fs/ext4/extents.c:1592:
+	if (ex && (flag != EXT4_GET_BLOCKS_DIO_CREATE_EXT)
+		&& ext4_can_extents_be_merged(inode, ex, newext)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#719: FILE: fs/ext4/extents.c:2570:
+			err = ext4_ext_insert_extent(handle, inode, path,
+							ex3, 0);

CHECK:BRACES: braces {} should be used on all arms of this statement
#738: FILE: fs/ext4/extents.c:2745:
+	if (err == -ENOSPC) {
[...]
+	} else if (err)
[...]

WARNING:TYPO_SPELLING: 'intialized' may be misspelled - perhaps 'initialized'?
#769: FILE: fs/ext4/extents.c:2776:
+ * extent into multiple /intialized unintialized extents (up to three)
                          ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'unintialized' may be misspelled - perhaps 'uninitialized'?
#776: FILE: fs/ext4/extents.c:2783:
+ * the unintialized extent split. To prevent ENOSPC occur at the IO
        ^^^^^^^^^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ext4_split_unwritten_extents', this function's name, in a string
#802: FILE: fs/ext4/extents.c:2809:
+	ext_debug("ext4_split_unwritten_extents: inode %lu,"

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#803: FILE: fs/ext4/extents.c:2810:
+	ext_debug("ext4_split_unwritten_extents: inode %lu,"
+		  "iblock %llu, max_blocks %u\n", inode->i_ino,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:CODE_INDENT: code indent should use tabs where possible
#818: FILE: fs/ext4/extents.c:2825:
+ ^I * If the uninitialized extent begins at the same logical$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#818: FILE: fs/ext4/extents.c:2825:
+ ^I * If the uninitialized extent begins at the same logical$

ERROR:CODE_INDENT: code indent should use tabs where possible
#819: FILE: fs/ext4/extents.c:2826:
+ ^I * block where the write begins, and the write completely$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#819: FILE: fs/ext4/extents.c:2826:
+ ^I * block where the write begins, and the write completely$

ERROR:CODE_INDENT: code indent should use tabs where possible
#820: FILE: fs/ext4/extents.c:2827:
+ ^I * covers the extent, then we don't need to split it.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#820: FILE: fs/ext4/extents.c:2827:
+ ^I * covers the extent, then we don't need to split it.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#821: FILE: fs/ext4/extents.c:2828:
+ ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#821: FILE: fs/ext4/extents.c:2828:
+ ^I */$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'iblock == ee_block'
#822: FILE: fs/ext4/extents.c:2829:
+	if ((iblock == ee_block) && (allocated <= max_blocks))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'allocated <= max_blocks'
#822: FILE: fs/ext4/extents.c:2829:
+	if ((iblock == ee_block) && (allocated <= max_blocks))

WARNING:LINE_SPACING: Missing a blank line after declarations
#845: FILE: fs/ext4/extents.c:2852:
+		unsigned int newdepth;
+		ex3 = &newex;

CHECK:BRACES: braces {} should be used on all arms of this statement
#851: FILE: fs/ext4/extents.c:2858:
+		if (err == -ENOSPC) {
[...]
+		} else if (err)
[...]

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#937: FILE: fs/ext4/extents.c:2954:
 }
+static int ext4_convert_unwritten_extents_dio(handle_t *handle,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#994: FILE: fs/ext4/extents.c:3011:
+ext4_ext_handle_uninitialized_extents(handle_t *handle, struct inode *inode,
+			ext4_lblk_t iblock, unsigned int max_blocks,

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ext4_ext_handle_uninitialized_extents', this function's name, in a string
#1003: FILE: fs/ext4/extents.c:3020:
+	ext_debug("ext4_ext_handle_uninitialized_extents: inode %lu, logical"

WARNING:SPLIT_STRING: quoted string split across lines
#1004: FILE: fs/ext4/extents.c:3021:
+	ext_debug("ext4_ext_handle_uninitialized_extents: inode %lu, logical"
+		  "block %llu, max_blocks %u, flags %d, allocated %u",

WARNING:MISSING_SPACE: break quoted strings at a space character
#1004: FILE: fs/ext4/extents.c:3021:
+	ext_debug("ext4_ext_handle_uninitialized_extents: inode %lu, logical"
+		  "block %llu, max_blocks %u, flags %d, allocated %u",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1012: FILE: fs/ext4/extents.c:3029:
+		ret = ext4_split_unwritten_extents(handle,
+						inode, path, iblock,

WARNING:TYPO_SPELLING: 'convertion' may be misspelled - perhaps 'conversion'?
#1016: FILE: fs/ext4/extents.c:3033:
+		 * that this IO needs to convertion to written when IO is
 		                         ^^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1028: FILE: fs/ext4/extents.c:3045:
+		ret = ext4_convert_unwritten_extents_dio(handle, inode,
+							path);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1056: FILE: fs/ext4/extents.c:3073:
+	ret = ext4_ext_convert_to_initialized(handle, inode,
+						path, iblock,

CHECK:BRACES: braces {} should be used on all arms of this statement
#1061: FILE: fs/ext4/extents.c:3078:
+	if (ret <= 0) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1064: FILE: fs/ext4/extents.c:3081:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1125: FILE: fs/ext4/extents.c:3206:
+			ret = ext4_ext_handle_uninitialized_extents(handle,
+					inode, iblock, max_blocks, path,

ERROR:SPACING: space required before the open brace '{'
#1137: FILE: fs/ext4/extents.c:3280:
+	if (flags & EXT4_GET_BLOCKS_UNINIT_EXT){

WARNING:TYPO_SPELLING: 'unecessary' may be misspelled - perhaps 'unnecessary'?
#1143: FILE: fs/ext4/extents.c:3285:
+		 * To avoid unecessary convertion for every aio dio rewrite
 		            ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'convertion' may be misspelled - perhaps 'conversion'?
#1145: FILE: fs/ext4/extents.c:3287:
+		 * need the convertion.
 		            ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'asycn' may be misspelled - perhaps 'async'?
#1146: FILE: fs/ext4/extents.c:3288:
+		 * For non asycn direct IO case, flag the inode state
 		           ^^^^^

WARNING:TYPO_SPELLING: 'convertion' may be misspelled - perhaps 'conversion'?
#1147: FILE: fs/ext4/extents.c:3289:
+		 * that we need to perform convertion when IO is done.
 		                           ^^^^^^^^^^

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#1154: FILE: fs/ext4/extents.c:3296:
+					EXT4_STATE_DIO_UNWRITTEN;;

CHECK:BRACES: braces {} should be used on all arms of this statement
#1174: FILE: fs/ext4/extents.c:3319:
+	if ((flags & EXT4_GET_BLOCKS_UNINIT_EXT) == 0) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1178: FILE: fs/ext4/extents.c:3323:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1197: FILE: fs/ext4/extents.c:3527:
+int ext4_convert_unwritten_extents(struct inode *inode, loff_t offset,
+				    loff_t len)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1232: FILE: fs/ext4/extents.c:3562:
+			printk(KERN_ERR "%s: ext4_ext_get_blocks "

WARNING:SPLIT_STRING: quoted string split across lines
#1233: FILE: fs/ext4/extents.c:3563:
+			printk(KERN_ERR "%s: ext4_ext_get_blocks "
+				    "returned error inode#%lu, block=%u, "

WARNING:SPLIT_STRING: quoted string split across lines
#1234: FILE: fs/ext4/extents.c:3564:
+				    "returned error inode#%lu, block=%u, "
+				    "max_blocks=%u", __func__,

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1239: FILE: fs/ext4/extents.c:3569:
+		if (ret <= 0 || ret2 )

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1244: FILE: fs/ext4/extents.c:3574:
+}
+/*

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1362: FILE: fs/ext4/inode.c:197:
+int ext4_truncate_restart_trans(handle_t *handle, struct inode *inode,
+				 int nblocks)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1411: FILE: fs/ext4/inode.c:664:
+		BUG_ON(current_block + count > EXT4_MAX_BLOCK_FILE_PHYS);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1420: FILE: fs/ext4/inode.c:700:
+	BUG_ON(current_block + ar.len > EXT4_MAX_BLOCK_FILE_PHYS);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1506: FILE: fs/ext4/inode.c:1189:
+				bh = head = page_buffers(page);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ext4_get_blocks', this function's name, in a string
#1535: FILE: fs/ext4/inode.c:1241:
+	ext_debug("ext4_get_blocks(): inode %lu, flag %d, max_blocks %u,"

WARNING:SPLIT_STRING: quoted string split across lines
#1536: FILE: fs/ext4/inode.c:1242:
+	ext_debug("ext4_get_blocks(): inode %lu, flag %d, max_blocks %u,"
+		  "logical block %lu\n", inode->i_ino, flags, max_blocks,

WARNING:SPLIT_STRING: quoted string split across lines
#1569: FILE: fs/ext4/inode.c:1341:
+		int ret = check_block_validity(inode, "file system "
+					       "corruption after allocation",

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'max_blocks > EXT4_MAX_TRANS_DATA'
#1668: FILE: fs/ext4/inode.c:2800:
+	if (!(EXT4_I(inode)->i_flags & EXT4_EXTENTS_FL) &&
 	    (max_blocks > EXT4_MAX_TRANS_DATA))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1774: FILE: fs/ext4/inode.c:3378:
+static ssize_t ext4_ind_direct_IO(int rw, struct kiocb *iocb,
 			      const struct iovec *iov, loff_t offset,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1803: FILE: fs/ext4/inode.c:3456:
+static int ext4_get_block_dio_write(struct inode *inode, sector_t iblock,
+		   struct buffer_head *bh_result, int create)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1807: FILE: fs/ext4/inode.c:3460:
+	unsigned max_blocks = bh_result->b_size >> inode->i_blkbits;

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ext4_get_block_dio_write', this function's name, in a string
#1810: FILE: fs/ext4/inode.c:3463:
+	ext4_debug("ext4_get_block_dio_write: inode %lu, create flag %d\n",

WARNING:REPEATED_WORD: Possible repeated word: 'to'
#1828: FILE: fs/ext4/inode.c:3481:
+	 * when we come here, we know it's a direct IO write to
+	 * to the middle of file (<i_size)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1854: FILE: fs/ext4/inode.c:3507:
+	BUG_ON(!io);

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1855: FILE: fs/ext4/inode.c:3508:
+	iput(io->inode);
 	^^^^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1858: FILE: fs/ext4/inode.c:3511:
+}
+static void dump_aio_dio_list(struct inode * inode)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1858: FILE: fs/ext4/inode.c:3511:
+static void dump_aio_dio_list(struct inode * inode)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open brace '{'
#1864: FILE: fs/ext4/inode.c:3517:
+	if (list_empty(&EXT4_I(inode)->i_aio_dio_complete_list)){

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1869: FILE: fs/ext4/inode.c:3522:
+	ext4_debug("Dump inode %lu aio_dio_completed_IO list \n", inode->i_ino);

ERROR:SPACING: space required before the open brace '{'
#1870: FILE: fs/ext4/inode.c:3523:
+	list_for_each_entry(io, &EXT4_I(inode)->i_aio_dio_complete_list, list){

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1878: FILE: fs/ext4/inode.c:3531:
+		ext4_debug("io 0x%p from inode %lu,prev 0x%p,next 0x%p\n",
+			    io, inode->i_ino, io0, io1);

WARNING:SPLIT_STRING: quoted string split across lines
#1894: FILE: fs/ext4/inode.c:3547:
+	ext4_debug("end_aio_dio_onlock: io 0x%p from inode %lu,list->next 0x%p,"
+		   "list->prev 0x%p\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#1895: FILE: fs/ext4/inode.c:3548:
+^I           io, inode->i_ino, io->list.next, io->list.prev);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#1907: FILE: fs/ext4/inode.c:3560:
+		printk(KERN_EMERG "%s: failed to convert unwritten"

WARNING:SPLIT_STRING: quoted string split across lines
#1908: FILE: fs/ext4/inode.c:3561:
+		printk(KERN_EMERG "%s: failed to convert unwritten"
+			"extents to written extents, error is %d"

WARNING:MISSING_SPACE: break quoted strings at a space character
#1908: FILE: fs/ext4/inode.c:3561:
+		printk(KERN_EMERG "%s: failed to convert unwritten"
+			"extents to written extents, error is %d"

WARNING:SPLIT_STRING: quoted string split across lines
#1909: FILE: fs/ext4/inode.c:3562:
+			"extents to written extents, error is %d"
+			" io is still on inode %lu aio dio list\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#1910: FILE: fs/ext4/inode.c:3563:
+                       __func__, ret, inode->i_ino);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1910: FILE: fs/ext4/inode.c:3563:
+                       __func__, ret, inode->i_ino);$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1918: FILE: fs/ext4/inode.c:3571:
+}
+/*

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1936: FILE: fs/ext4/inode.c:3589:
+}
+/*

ERROR:SPACING: space required before the open brace '{'
#1957: FILE: fs/ext4/inode.c:3610:
+	while (!list_empty(&EXT4_I(inode)->i_aio_dio_complete_list)){

WARNING:TYPO_SPELLING: 'convertion' may be misspelled - perhaps 'conversion'?
#1970: FILE: fs/ext4/inode.c:3623:
+		 * convertion finished. The io structure has a flag to
 		   ^^^^^^^^^^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1983: FILE: fs/ext4/inode.c:3636:
+static ext4_io_end_t *ext4_init_io_end (struct inode *inode)

ERROR:CODE_INDENT: code indent should use tabs where possible
#2006: FILE: fs/ext4/inode.c:3659:
+        ext4_io_end_t *io_end = iocb->private;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2006: FILE: fs/ext4/inode.c:3659:
+        ext4_io_end_t *io_end = iocb->private;$

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ext4_end_io_dio', this function's name, in a string
#2013: FILE: fs/ext4/inode.c:3666:
+	ext_debug("ext4_end_io_dio(): io_end 0x%p"

WARNING:SPLIT_STRING: quoted string split across lines
#2014: FILE: fs/ext4/inode.c:3667:
+	ext_debug("ext4_end_io_dio(): io_end 0x%p"
+		  "for inode %lu, iocb 0x%p, offset %llu, size %llu\n",

WARNING:MISSING_SPACE: break quoted strings at a space character
#2014: FILE: fs/ext4/inode.c:3667:
+	ext_debug("ext4_end_io_dio(): io_end 0x%p"
+		  "for inode %lu, iocb 0x%p, offset %llu, size %llu\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#2015: FILE: fs/ext4/inode.c:3668:
+ ^I^I  iocb->private, io_end->inode->i_ino, iocb, offset,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2015: FILE: fs/ext4/inode.c:3668:
+ ^I^I  iocb->private, io_end->inode->i_ino, iocb, offset,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2015: FILE: fs/ext4/inode.c:3668:
+ ^I^I  iocb->private, io_end->inode->i_ino, iocb, offset,$

ERROR:SPACING: space required before the open brace '{'
#2019: FILE: fs/ext4/inode.c:3672:
+	if (io_end->flag != DIO_AIO_UNWRITTEN){

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2034: FILE: fs/ext4/inode.c:3687:
+	list_add_tail(&io_end->list,
+		 &EXT4_I(io_end->inode)->i_aio_dio_complete_list);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2037: FILE: fs/ext4/inode.c:3690:
+}
+/*

WARNING:TYPO_SPELLING: 'unintialized' may be misspelled - perhaps 'uninitialized'?
#2042: FILE: fs/ext4/inode.c:3695:
+ * For holes, we fallocate those blocks, mark them as unintialized
                                                       ^^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'unintialized' may be misspelled - perhaps 'uninitialized'?
#2044: FILE: fs/ext4/inode.c:3697:
+ * still keep the range to write as unintialized.
                                     ^^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'unwrritten' may be misspelled - perhaps 'unwritten'?
#2046: FILE: fs/ext4/inode.c:3699:
+ * The unwrritten extents will be converted to written when DIO is completed.
        ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'convertion' may be misspelled - perhaps 'conversion'?
#2048: FILE: fs/ext4/inode.c:3701:
+ * set up an end_io call back function, which will do the convertion
                                                           ^^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2057: FILE: fs/ext4/inode.c:3710:
+static ssize_t ext4_ext_direct_IO(int rw, struct kiocb *iocb,
+			      const struct iovec *iov, loff_t offset,

WARNING:LINE_SPACING: Missing a blank line after declarations
#2066: FILE: fs/ext4/inode.c:3719:
+	loff_t final_size = offset + count;
+	if (rw == WRITE && final_size <= inode->i_size) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#2068: FILE: fs/ext4/inode.c:3721:
+ ^I^I * We could direct write to holes and fallocate.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2068: FILE: fs/ext4/inode.c:3721:
+ ^I^I * We could direct write to holes and fallocate.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2070: FILE: fs/ext4/inode.c:3723:
+ ^I^I * Allocated blocks to fill the hole are marked as uninitialized$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2070: FILE: fs/ext4/inode.c:3723:
+ ^I^I * Allocated blocks to fill the hole are marked as uninitialized$

WARNING:TYPO_SPELLING: 'paralel' may be misspelled - perhaps 'parallel'?
#2071: FILE: fs/ext4/inode.c:3724:
+ 		 * to prevent paralel buffered read to expose the stale data
  		              ^^^^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2071: FILE: fs/ext4/inode.c:3724:
+ ^I^I * to prevent paralel buffered read to expose the stale data$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2071: FILE: fs/ext4/inode.c:3724:
+ ^I^I * to prevent paralel buffered read to expose the stale data$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2072: FILE: fs/ext4/inode.c:3725:
+ ^I^I * before DIO complete the data IO.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2072: FILE: fs/ext4/inode.c:3725:
+ ^I^I * before DIO complete the data IO.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2074: FILE: fs/ext4/inode.c:3727:
+ ^I^I * As to previously fallocated extents, ext4 get_block$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2074: FILE: fs/ext4/inode.c:3727:
+ ^I^I * As to previously fallocated extents, ext4 get_block$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2075: FILE: fs/ext4/inode.c:3728:
+ ^I^I * will just simply mark the buffer mapped but still$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2075: FILE: fs/ext4/inode.c:3728:
+ ^I^I * will just simply mark the buffer mapped but still$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2076: FILE: fs/ext4/inode.c:3729:
+ ^I^I * keep the extents uninitialized.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2076: FILE: fs/ext4/inode.c:3729:
+ ^I^I * keep the extents uninitialized.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2077: FILE: fs/ext4/inode.c:3730:
+ ^I^I *$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2077: FILE: fs/ext4/inode.c:3730:
+ ^I^I *$

WARNING:TYPO_SPELLING: 'defered' may be misspelled - perhaps 'deferred'?
#2081: FILE: fs/ext4/inode.c:3734:
+		 * for async DIO, the conversion needs to be defered when
 		                                             ^^^^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2086: FILE: fs/ext4/inode.c:3739:
+ ^I^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2086: FILE: fs/ext4/inode.c:3739:
+ ^I^I */$

WARNING:TYPO_SPELLING: 'convertion' may be misspelled - perhaps 'conversion'?
#2132: FILE: fs/ext4/inode.c:3785:
+			 * completed, we could do the convertion right here
 			                              ^^^^^^^^^^

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#2143: FILE: fs/ext4/inode.c:3796:
+	/* for write the the end of file case, we fall back to old way */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2201: FILE: fs/ext4/inode.c:4346:
+				ext4_truncate_restart_trans(handle, inode,
+					    blocks_for_truncate(inode));

WARNING:SPLIT_STRING: quoted string split across lines
#2380: FILE: fs/ext4/inode.c:5204:
+				   "IO error syncing inode, "
+				   "inode=%lu, block=%llu",

CHECK:SPACING: space preferred before that '+' (ctx:VxE)
#2396: FILE: fs/ext4/inode.c:5253:
+		handle = ext4_journal_start(inode, (EXT4_MAXQUOTAS_INIT_BLOCKS(inode->i_sb)+
 		                                                                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2397: FILE: fs/ext4/inode.c:5254:
+					EXT4_MAXQUOTAS_DEL_BLOCKS(inode->i_sb))+3);
 					                                       ^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2521: FILE: fs/ext4/mballoc.c:914:
+{
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2558: FILE: fs/ext4/mballoc.c:951:
+		BUG_ON(page->mapping != inode->i_mapping);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page"
#2566: FILE: fs/ext4/mballoc.c:959:
+	if (page == NULL || !PageUptodate(page)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2587: FILE: fs/ext4/mballoc.c:980:
+		BUG_ON(page->mapping != inode->i_mapping);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page"
#2595: FILE: fs/ext4/mballoc.c:988:
+	if (page == NULL || !PageUptodate(page)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2887: FILE: fs/ext4/mballoc.c:2851:
+			trace_ext4_discard_blocks(sb,
+					(unsigned long long)discard_block,

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2913: FILE: fs/ext4/mballoc.c:3276:
+
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2925: FILE: fs/ext4/mballoc.c:3387:
+		if (!(EXT4_I(ac->ac_inode)->i_flags & EXT4_EXTENTS_FL) &&
+			pa->pa_pstart + pa->pa_len > EXT4_MAX_BLOCK_FILE_PHYS)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'size == isize'
#2946: FILE: fs/ext4/mballoc.c:4189:
+	if ((size == isize) &&
+	    !ext4_fs_is_busy(sbi) &&
+	    (atomic_read(&ac->ac_inode->i_writecount) == 0)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#3003: FILE: fs/ext4/migrate.c:360:
+	if (!(EXT4_I(inode)->i_state & EXT4_STATE_EXT_MIGRATE)) {
[...]
 	} else
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3082: FILE: fs/ext4/move_extent.c:34:
+get_ext_path(struct inode *inode, ext4_lblk_t lblock,
+		struct ext4_ext_path **path)

CHECK:BRACES: braces {} should be used on all arms of this statement
#3087: FILE: fs/ext4/move_extent.c:39:
+	if (IS_ERR(*path)) {
[...]
+	} else if ((*path)[ext_depth(inode)].p_ext == NULL)
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p_ext"
#3090: FILE: fs/ext4/move_extent.c:42:
+	} else if ((*path)[ext_depth(inode)].p_ext == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3148: FILE: fs/ext4/move_extent.c:150:
+mext_check_null_inode(struct inode *inode1, struct inode *inode2,
+		const char *function)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!inode1"
#3164: FILE: fs/ext4/move_extent.c:154:
+	if (inode1 == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3166: FILE: fs/ext4/move_extent.c:156:
+		ext4_error(inode2->i_sb, function,
+			"Both inodes should not be NULL: "

WARNING:SPLIT_STRING: quoted string split across lines
#3167: FILE: fs/ext4/move_extent.c:157:
+			"Both inodes should not be NULL: "
+			"inode1 NULL inode2 %lu", inode2->i_ino);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!inode2"
#3169: FILE: fs/ext4/move_extent.c:159:
+	} else if (inode2 == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3171: FILE: fs/ext4/move_extent.c:161:
+		ext4_error(inode1->i_sb, function,
+			"Both inodes should not be NULL: "

WARNING:SPLIT_STRING: quoted string split across lines
#3172: FILE: fs/ext4/move_extent.c:162:
+			"Both inodes should not be NULL: "
+			"inode1 %lu inode2 NULL", inode1->i_ino);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3265: FILE: fs/ext4/move_extent.c:303:
+		err = get_ext_path(orig_inode,
+				le32_to_cpu(end_ext->ee_block) - 1, &orig_path);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3282: FILE: fs/ext4/move_extent.c:530:
+		ext4_error(orig_inode->i_sb, __func__,
+			"new_ext_end(%u) should be less than or equal to "

WARNING:SPLIT_STRING: quoted string split across lines
#3283: FILE: fs/ext4/move_extent.c:531:
+			"new_ext_end(%u) should be less than or equal to "
+			"oext->ee_block(%u) + oext_alen(%d) - 1",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3316: FILE: fs/ext4/move_extent.c:584:
+	BUG_ON(orig_off != donor_off);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3412: FILE: fs/ext4/move_extent.c:698:
+			ext4_error(donor_inode->i_sb, __func__,
+				"Donor offset(%u) and the first block of donor "

WARNING:SPLIT_STRING: quoted string split across lines
#3413: FILE: fs/ext4/move_extent.c:699:
+				"Donor offset(%u) and the first block of donor "
+				"extent(%u) should be equal",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3423: FILE: fs/ext4/move_extent.c:708:
+		*err = mext_leaf_block(handle, orig_inode,
 					   orig_path, &tmp_dext, &orig_off);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3431: FILE: fs/ext4/move_extent.c:714:
+		*err = mext_leaf_block(handle, donor_inode,
 					   donor_path, &tmp_oext, &donor_off);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3476: FILE: fs/ext4/move_extent.c:746:
+		*err = mext_calc_swap_extents(&tmp_dext, &tmp_oext, orig_off,
+					   donor_off, count - replaced_count);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3513: FILE: fs/ext4/move_extent.c:787:
+move_extent_per_page(struct file *o_filp, struct inode *donor_inode,
 		  pgoff_t orig_page_offset, int data_offset_in_page,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3556: FILE: fs/ext4/move_extent.c:832:
+		replaced_count = mext_replace_branches(handle, orig_inode,
+						donor_inode, orig_blk_offset,

CHECK:BRACES: Unbalanced braces around else statement
#3586: FILE: fs/ext4/move_extent.c:853:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3612: FILE: fs/ext4/move_extent.c:882:
+	replaced_count = mext_replace_branches(handle, orig_inode, donor_inode,
+					orig_blk_offset, block_len_in_page,

CHECK:BRACES: braces {} should be used on all arms of this statement
#3615: FILE: fs/ext4/move_extent.c:885:
+		if (replaced_count) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#3619: FILE: fs/ext4/move_extent.c:889:
+		} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3631: FILE: fs/ext4/move_extent.c:902:
+		*err = ext4_get_block(orig_inode,
 				(sector_t)(orig_blk_offset + i), bh, 0);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#3690: FILE: fs/ext4/move_extent.c:960:
+	if (donor_inode->i_mode & (S_ISUID|S_ISGID)) {
 	                                  ^

WARNING:SPLIT_STRING: quoted string split across lines
#3692: FILE: fs/ext4/move_extent.c:962:
+		ext4_debug("ext4 move extent: suid or sgid is set"
+			   " to donor file [ino:orig %lu, donor %lu]\n",

WARNING:SPLIT_STRING: quoted string split across lines
#3741: FILE: fs/ext4/move_extent.c:1022:
 			ext4_debug("ext4 move extent: orig start offset "
+			"[%llu] should be less than donor file blocks "

WARNING:SPLIT_STRING: quoted string split across lines
#3742: FILE: fs/ext4/move_extent.c:1023:
+			"[%llu] should be less than donor file blocks "
+			"[%u] [ino:orig %lu, donor %lu]\n",

WARNING:SPLIT_STRING: quoted string split across lines
#3754: FILE: fs/ext4/move_extent.c:1032:
 			ext4_debug("ext4 move extent: End offset [%llu] should "
+				"be less than donor file blocks [%u]."

WARNING:SPLIT_STRING: quoted string split across lines
#3755: FILE: fs/ext4/move_extent.c:1033:
+				"be less than donor file blocks [%u]."
+				"So adjust length from %llu to %llu "

WARNING:SPLIT_STRING: quoted string split across lines
#3773: FILE: fs/ext4/move_extent.c:1044:
 			ext4_debug("ext4 move extent: start offset [%llu] "
+				"should be less than original file blocks "

WARNING:SPLIT_STRING: quoted string split across lines
#3774: FILE: fs/ext4/move_extent.c:1045:
+				"should be less than original file blocks "
+				"[%u] [ino:orig %lu, donor %lu]\n",

WARNING:SPLIT_STRING: quoted string split across lines
#3785: FILE: fs/ext4/move_extent.c:1053:
 			ext4_debug("ext4 move extent: Adjust length "
+				"from %llu to %llu. Because it should be "

WARNING:SPLIT_STRING: quoted string split across lines
#3786: FILE: fs/ext4/move_extent.c:1054:
+				"from %llu to %llu. Because it should be "
+				"less than original file blocks "

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3817: FILE: fs/ext4/move_extent.c:1086:
+	BUG_ON(inode1 == NULL && inode2 == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!inode1"
#3817: FILE: fs/ext4/move_extent.c:1086:
+	BUG_ON(inode1 == NULL && inode2 == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!inode2"
#3817: FILE: fs/ext4/move_extent.c:1086:
+	BUG_ON(inode1 == NULL && inode2 == NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3853: FILE: fs/ext4/move_extent.c:1123:
+	BUG_ON(inode1 == NULL && inode2 == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!inode1"
#3853: FILE: fs/ext4/move_extent.c:1123:
+	BUG_ON(inode1 == NULL && inode2 == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!inode2"
#3853: FILE: fs/ext4/move_extent.c:1123:
+	BUG_ON(inode1 == NULL && inode2 == NULL);

WARNING:SPLIT_STRING: quoted string split across lines
#3886: FILE: fs/ext4/move_extent.c:1202:
+		ext4_debug("ext4 move extent: The argument files should not "
+			"be same file [ino:orig %lu, donor %lu]\n",

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#4014: FILE: fs/ext4/move_extent.c:1342:
+			block_len_in_page = move_extent_per_page(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4032: FILE: fs/ext4/move_extent.c:1355:
+				ext4_error(orig_inode->i_sb, __func__,
+					"We replaced blocks too much! "

WARNING:SPLIT_STRING: quoted string split across lines
#4033: FILE: fs/ext4/move_extent.c:1356:
+					"We replaced blocks too much! "
+					"sum of replaced: %llu requested: %llu",

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4310: FILE: fs/ext4/super.c:192:
 
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4317: FILE: fs/ext4/super.c:199:
+	BUG_ON(ref_cnt >= EXT4_NOJOURNAL_MAX_REF_COUNT);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4326: FILE: fs/ext4/super.c:208:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4332: FILE: fs/ext4/super.c:214:
+	BUG_ON(ref_cnt == 0);

CHECK:CAMELCASE: Avoid CamelCase: <Opt_inode_readahead_blks>
#4440: FILE: fs/ext4/super.c:1099:
+	Opt_inode_readahead_blks, Opt_journal_ioprio,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_journal_ioprio>
#4440: FILE: fs/ext4/super.c:1099:
+	Opt_inode_readahead_blks, Opt_journal_ioprio,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_discard>
#4441: FILE: fs/ext4/super.c:1100:
+	Opt_discard, Opt_nodiscard,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_nodiscard>
#4441: FILE: fs/ext4/super.c:1100:
+	Opt_discard, Opt_nodiscard,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_noload>
#4449: FILE: fs/ext4/super.c:1125:
+	{Opt_noload, "norecovery"},

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4543: FILE: fs/ext4/super.c:2317:
+		ext4_msg(sb, KERN_ERR,
+			"Couldn't mount because of "

WARNING:SPLIT_STRING: quoted string split across lines
#4544: FILE: fs/ext4/super.c:2318:
+			"Couldn't mount because of "
+			"unsupported optional features (%x)",

WARNING:SPLIT_STRING: quoted string split across lines
#4556: FILE: fs/ext4/super.c:2330:
+		ext4_msg(sb, KERN_ERR, "couldn't mount RDWR because of "
+			 "unsupported optional features (%x)",

WARNING:SPLIT_STRING: quoted string split across lines
#4568: FILE: fs/ext4/super.c:2342:
+			ext4_msg(sb, KERN_ERR, "Filesystem with huge files "
+				 "cannot be mounted RDWR without "

WARNING:SPLIT_STRING: quoted string split across lines
#4569: FILE: fs/ext4/super.c:2343:
+				 "cannot be mounted RDWR without "
+				 "CONFIG_LBDAF");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4634: FILE: fs/ext4/super.c:2536:
+	has_huge_files = EXT4_HAS_RO_COMPAT_FEATURE(sb,
+				EXT4_FEATURE_RO_COMPAT_HUGE_FILE);

WARNING:SPLIT_STRING: quoted string split across lines
#4654: FILE: fs/ext4/super.c:2626:
 		ext4_msg(sb, KERN_ERR, "filesystem"
+			 " too large to mount safely on this system");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4666: FILE: fs/ext4/super.c:2671:
+	sbi->s_blockfile_groups = min_t(ext4_group_t, sbi->s_groups_count,
+			(EXT4_MAX_BLOCK_FILE_PHYS / EXT4_BLOCKS_PER_GROUP(sb)));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#4684: FILE: fs/ext4/super.c:2861:
+		printk(KERN_ERR "EXT4-fs: failed to create DIO workqueue\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4783: FILE: fs/ext4/xattr.c:816:
+			goal = ext4_group_first_block_no(sb,
 						EXT4_I(inode)->i_block_group);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4791: FILE: fs/ext4/xattr.c:823:
+			block = ext4_new_meta_blocks(handle, inode,
 						  goal, NULL, &error);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4796: FILE: fs/ext4/xattr.c:828:
+				BUG_ON(block > EXT4_MAX_BLOCK_FILE_PHYS);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#4865: FILE: fs/jbd2/journal.c:1196:
+		printk(KERN_ERR "JBD: Journal too short (blocks %llu-%llu).\n",

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4972: FILE: include/scsi/scsi_host.h:729:
+extern int __must_check scsi_add_host_with_dma(struct Scsi_Host *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct Scsi_Host *' should also have an identifier name
#4972: FILE: include/scsi/scsi_host.h:729:
+extern int __must_check scsi_add_host_with_dma(struct Scsi_Host *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#4972: FILE: include/scsi/scsi_host.h:729:
+extern int __must_check scsi_add_host_with_dma(struct Scsi_Host *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#4972: FILE: include/scsi/scsi_host.h:729:
+extern int __must_check scsi_add_host_with_dma(struct Scsi_Host *,

ERROR:SPACING: space prohibited after that open parenthesis '('
#5014: FILE: include/trace/events/ext4.h:234:
+		__field(       pgoff_t,	writeback_index		)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5014: FILE: include/trace/events/ext4.h:234:
+		__field(       pgoff_t,	writeback_index		)

CHECK:SPACING: No space is necessary after a cast
#5029: FILE: include/trace/events/ext4.h:254:
+		  (unsigned long) __entry->ino, __entry->nr_to_write,

CHECK:SPACING: No space is necessary after a cast
#5035: FILE: include/trace/events/ext4.h:259:
+		  (unsigned long) __entry->writeback_index)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5039: FILE: include/trace/events/ext4.h:263:
+TRACE_EVENT(ext4_da_write_pages,
+	TP_PROTO(struct inode *inode, struct mpage_da_data *mpd),

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5043: FILE: include/trace/events/ext4.h:267:
+	TP_STRUCT__entry(

ERROR:SPACING: space prohibited after that open parenthesis '('
#5044: FILE: include/trace/events/ext4.h:268:
+		__field(	dev_t,	dev			)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5044: FILE: include/trace/events/ext4.h:268:
+		__field(	dev_t,	dev			)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5045: FILE: include/trace/events/ext4.h:269:
+		__field(	ino_t,	ino			)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5045: FILE: include/trace/events/ext4.h:269:
+		__field(	ino_t,	ino			)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5046: FILE: include/trace/events/ext4.h:270:
+		__field(	__u64,	b_blocknr		)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5046: FILE: include/trace/events/ext4.h:270:
+		__field(	__u64,	b_blocknr		)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5047: FILE: include/trace/events/ext4.h:271:
+		__field(	__u32,	b_size			)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5047: FILE: include/trace/events/ext4.h:271:
+		__field(	__u32,	b_size			)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5048: FILE: include/trace/events/ext4.h:272:
+		__field(	__u32,	b_state			)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5048: FILE: include/trace/events/ext4.h:272:
+		__field(	__u32,	b_state			)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5049: FILE: include/trace/events/ext4.h:273:
+		__field(	unsigned long,	first_page	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5049: FILE: include/trace/events/ext4.h:273:
+		__field(	unsigned long,	first_page	)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5050: FILE: include/trace/events/ext4.h:274:
+		__field(	int,	io_done			)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5050: FILE: include/trace/events/ext4.h:274:
+		__field(	int,	io_done			)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5051: FILE: include/trace/events/ext4.h:275:
+		__field(	int,	pages_written		)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5051: FILE: include/trace/events/ext4.h:275:
+		__field(	int,	pages_written		)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5054: FILE: include/trace/events/ext4.h:278:
+	TP_fast_assign(

CHECK:SPACING: No space is necessary after a cast
#5066: FILE: include/trace/events/ext4.h:290:
+		  jbd2_dev_to_name(__entry->dev), (unsigned long) __entry->ino,

ERROR:SPACING: space prohibited after that open parenthesis '('
#5077: FILE: include/trace/events/ext4.h:311:
+		__field(       pgoff_t,	writeback_index		)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5077: FILE: include/trace/events/ext4.h:311:
+		__field(       pgoff_t,	writeback_index		)

CHECK:SPACING: No space is necessary after a cast
#5092: FILE: include/trace/events/ext4.h:328:
+		  (unsigned long) __entry->ino, __entry->ret,

CHECK:SPACING: No space is necessary after a cast
#5097: FILE: include/trace/events/ext4.h:332:
+		  (unsigned long) __entry->writeback_index)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000034774.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 46 errors, 118 warnings, 107 checks, 4704 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000034774.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
