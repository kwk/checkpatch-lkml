WARNING:LEADING_SPACE: please, no spaces at the start of a line
#51: FILE: drivers/kvm/kvm.h:531:
+ } while (0)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#61: FILE: drivers/kvm/kvm.h:602:
+int kvm_emulate_pio(struct kvm_vcpu *vcpu, struct kvm_run *run, int in,
 		     int size, unsigned port);

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#211: FILE: drivers/kvm/kvm_main.c:143:
+		v |= ((unsigned long) \

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#231: FILE: drivers/kvm/kvm_main.c:908:
+		memcpy(&chip->chip.pic,
 			&pic_irqchip(kvm)->pics[0],

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#237: FILE: drivers/kvm/kvm_main.c:913:
+		memcpy(&chip->chip.pic,
 			&pic_irqchip(kvm)->pics[1],

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#243: FILE: drivers/kvm/kvm_main.c:918:
+		memcpy(&chip->chip.ioapic,
 			ioapic_irqchip(kvm),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#252: FILE: drivers/kvm/kvm_main.c:936:
+		memcpy(&pic_irqchip(kvm)->pics[0],
 			&chip->chip.pic,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#258: FILE: drivers/kvm/kvm_main.c:941:
+		memcpy(&pic_irqchip(kvm)->pics[1],
 			&chip->chip.pic,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#264: FILE: drivers/kvm/kvm_main.c:946:
+		memcpy(ioapic_irqchip(kvm),
 			&chip->chip.ioapic,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#282: FILE: drivers/kvm/kvm_main.c:1938:
+int kvm_emulate_pio(struct kvm_vcpu *vcpu, struct kvm_run *run, int in,
 		  int size, unsigned port)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#291: FILE: drivers/kvm/kvm_main.c:2093:
+		pr_debug("vcpu %d received sipi with vector # %x\n",
 		       vcpu->vcpu_id, vcpu->sipi_vector);

CHECK:BRACES: Unbalanced braces around else statement
#320: FILE: drivers/kvm/kvm_main.c:3160:
+		} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#338: FILE: drivers/kvm/kvm_main.c:3659:
+		printk(KERN_ERR "kvm: misc device register failed\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bad_page"
#365: FILE: drivers/kvm/kvm_main.c:3718:
+	if (bad_page == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#386: FILE: drivers/kvm/lapic.c:909:
+	if (waitqueue_active(q)) {

WARNING:TABSTOP: Statements should start on a tabstop
#517: FILE: drivers/kvm/svm.c:1437:
+	 else

CHECK:BIT_MACRO: Prefer using the BIT macro
#569: FILE: drivers/kvm/svm.h:314:
+#define SVM_CR0_SELECTIVE_MASK (1 << 3 | 1) /* TS and MP */

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#613: FILE: drivers/kvm/vmx.c:848:
+			printk(KERN_DEBUG "pending exception: not handled yet\n");

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#687: FILE: drivers/kvm/vmx.c:1667:
+	if (emulator_write_emulated(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#689: FILE: drivers/kvm/vmx.c:1669:
+	    emulator_write_emulated(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#691: FILE: drivers/kvm/vmx.c:1671:
+	    emulator_write_emulated(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#741: FILE: drivers/kvm/vmx.c:2145:
+	if ((vectoring_info & VECTORING_INFO_VALID_MASK) &&
+				exit_reason != EXIT_REASON_EXCEPTION_NMI)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#750: FILE: drivers/kvm/vmx.c:2244:
+	asm(

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#820: FILE: drivers/kvm/x86_emulate.c:26:
+#define DPRINTF(_f, _a ...) printf(_f , ## _a)
                                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#836: FILE: drivers/kvm/x86_emulate.c:293:
+				: _wy ((_src).val), "i" (EFLAGS_MASK));     \

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#848: FILE: drivers/kvm/x86_emulate.c:302:
+				: _ly ((_src).val), "i" (EFLAGS_MASK));     \

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#869: FILE: drivers/kvm/x86_emulate.c:322:
+				: _by ((_src).val), "i" (EFLAGS_MASK));      \

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#929: FILE: drivers/kvm/x86_emulate.c:394:
+			: _qy ((_src).val), "i" (EFLAGS_MASK));		\

WARNING:INDENTED_LABEL: labels should not be indented
#975: FILE: drivers/kvm/x86_emulate.c:831:
+	srcmem_common:

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000343691.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 11 warnings, 17 checks, 842 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000343691.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
