CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#98: FILE: include/asm-x86/bitops.h:316:
+unsigned long __find_next_bit(const unsigned long *addr,
 		unsigned long size, unsigned long offset);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#101: FILE: include/asm-x86/bitops.h:318:
+unsigned long __find_next_zero_bit(const unsigned long *addr,
 		unsigned long size, unsigned long offset);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#141: FILE: include/linux/bitops.h:78:
+unsigned long __find_next_bit(const unsigned long *addr,
+		unsigned long size, unsigned long offset);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#145: FILE: include/linux/bitops.h:82:
+find_next_bit(const unsigned long *addr, unsigned long size,
+		unsigned long offset)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'size == BITS_PER_LONG'
#151: FILE: include/linux/bitops.h:88:
+	if (__builtin_constant_p(size) && (size == BITS_PER_LONG)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'size < BITS_PER_LONG'
#158: FILE: include/linux/bitops.h:95:
+	if (__builtin_constant_p(size) && (size < BITS_PER_LONG)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#169: FILE: include/linux/bitops.h:106:
+unsigned long __find_next_zero_bit(const unsigned long *addr,
+		unsigned long size, unsigned long offset);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#173: FILE: include/linux/bitops.h:110:
+find_next_zero_bit(const unsigned long *addr, unsigned long size,
+		unsigned long offset)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'size == BITS_PER_LONG'
#179: FILE: include/linux/bitops.h:116:
+	if (__builtin_constant_p(size) && (size == BITS_PER_LONG)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'size < BITS_PER_LONG'
#186: FILE: include/linux/bitops.h:123:
+	if (__builtin_constant_p(size) && (size < BITS_PER_LONG)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#219: FILE: lib/find_next_bit.c:26:
+unsigned long __find_next_bit(const unsigned long *addr,
+		unsigned long size, unsigned long offset)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#230: FILE: lib/find_next_bit.c:71:
+unsigned long __find_next_zero_bit(const unsigned long *addr,
+		unsigned long size, unsigned long offset)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000309037.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 0 warnings, 12 checks, 124 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000309037.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
