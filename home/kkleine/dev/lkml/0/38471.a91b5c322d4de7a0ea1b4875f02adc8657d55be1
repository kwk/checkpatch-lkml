WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#44: 
OpenPGP public key:              http://krystal.dyndns.org:8080/key/compudj.gpg

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#55: FILE: include/linux/ltt-core.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#56: FILE: include/linux/ltt-core.h:2:
+ * linux/include/linux/ltt-core.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#79: FILE: include/linux/ltt-core.h:25:
+#include <asm/atomic.h>

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#89: FILE: include/linux/ltt-core.h:35:
+static inline unsigned int ltt_align(size_t align_drift,
+		 size_t size_of_type)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#91: FILE: include/linux/ltt-core.h:37:
+	size_t alignment = min(sizeof(void*), size_of_type);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#92: FILE: include/linux/ltt-core.h:38:
+	size_t alignment = min(sizeof(void*), size_of_type);
+	return ((alignment - align_drift) & (alignment-1));

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#92: FILE: include/linux/ltt-core.h:38:
+	return ((alignment - align_drift) & (alignment-1));
 	                                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#94: FILE: include/linux/ltt-core.h:40:
+}
+/* Default arch alignment */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#99: FILE: include/linux/ltt-core.h:45:
+static inline unsigned int ltt_align(size_t align_drift,
+		 size_t size_of_type)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#104: FILE: include/linux/ltt-core.h:50:
+#define LTT_ALIGN __attribute__((packed))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#110: FILE: include/linux/ltt-core.h:56:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#111: FILE: include/linux/ltt-core.h:57:
+extern void ltt_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#115: FILE: include/linux/ltt-core.h:61:
+ * RCU mechanism : the preemption must be disabled while reading the list. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#123: FILE: include/linux/ltt-core.h:69:
+extern volatile unsigned int ltt_nesting[];

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#137: FILE: include/linux/ltt-core.h:83:
+					 * synchronisation with reader. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#142: FILE: include/linux/ltt-core.h:88:
+					 * writers */

WARNING:SPACING: Unnecessary space before function pointer arguments
#157: FILE: include/linux/ltt-core.h:103:
+	void (*buffer_begin) (struct rchan_buf *buf,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#158: FILE: include/linux/ltt-core.h:104:
+	void (*buffer_begin) (struct rchan_buf *buf,
+			u64 tsc, unsigned int subbuf_idx);

WARNING:SPACING: Unnecessary space before function pointer arguments
#163: FILE: include/linux/ltt-core.h:109:
+	void (*buffer_end) (struct rchan_buf *buf,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#164: FILE: include/linux/ltt-core.h:110:
+	void (*buffer_end) (struct rchan_buf *buf,
+			u64 tsc, unsigned int offset, unsigned int subbuf_idx);

WARNING:SPACING: Unnecessary space before function pointer arguments
#174: FILE: include/linux/ltt-core.h:120:
+	int (*create_dirs) (struct ltt_trace_struct *new_trace);

WARNING:SPACING: Unnecessary space before function pointer arguments
#175: FILE: include/linux/ltt-core.h:121:
+	void (*remove_dirs) (struct ltt_trace_struct *new_trace);

WARNING:SPACING: Unnecessary space before function pointer arguments
#176: FILE: include/linux/ltt-core.h:122:
+	int (*create_channel) (char *trace_name, struct ltt_trace_struct *trace,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#177: FILE: include/linux/ltt-core.h:123:
+	int (*create_channel) (char *trace_name, struct ltt_trace_struct *trace,
+				struct dentry *dir, char *channel_name,

WARNING:SPACING: Unnecessary space before function pointer arguments
#181: FILE: include/linux/ltt-core.h:127:
+	void (*wakeup_channel) (struct ltt_channel_struct *ltt_channel);

WARNING:SPACING: Unnecessary space before function pointer arguments
#182: FILE: include/linux/ltt-core.h:128:
+	void (*finish_channel) (struct ltt_channel_struct *channel);

WARNING:SPACING: Unnecessary space before function pointer arguments
#183: FILE: include/linux/ltt-core.h:129:
+	void (*remove_channel) (struct ltt_channel_struct *channel);

WARNING:SPACING: Unnecessary space before function pointer arguments
#184: FILE: include/linux/ltt-core.h:130:
+	void *(*reserve_slot) (struct ltt_trace_struct *trace,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#185: FILE: include/linux/ltt-core.h:131:
+	void *(*reserve_slot) (struct ltt_trace_struct *trace,
+				struct ltt_channel_struct *channel,

WARNING:SPACING: Unnecessary space before function pointer arguments
#190: FILE: include/linux/ltt-core.h:136:
+	void (*commit_slot) (struct ltt_channel_struct *channel,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#191: FILE: include/linux/ltt-core.h:137:
+	void (*commit_slot) (struct ltt_channel_struct *channel,
+				void **transport_data, void *reserved,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#194: FILE: include/linux/ltt-core.h:140:
+	void (*print_errors)(struct ltt_trace_struct *trace,
+				struct ltt_channel_struct *ltt_chan, int cpu);

WARNING:SPACING: Unnecessary space before function pointer arguments
#195: FILE: include/linux/ltt-core.h:141:
+	int (*user_blocking) (struct ltt_trace_struct *trace,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#196: FILE: include/linux/ltt-core.h:142:
+	int (*user_blocking) (struct ltt_trace_struct *trace,
+				unsigned int index, size_t data_size,

WARNING:SPACING: Unnecessary space before function pointer arguments
#198: FILE: include/linux/ltt-core.h:144:
+	void (*user_errors) (struct ltt_trace_struct *trace,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#199: FILE: include/linux/ltt-core.h:145:
+	void (*user_errors) (struct ltt_trace_struct *trace,
+				unsigned int index, size_t data_size,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#210: FILE: include/linux/ltt-core.h:156:
+
+

WARNING:TYPO_SPELLING: 'Remeber' may be misspelled - perhaps 'Remember'?
#255: FILE: include/linux/ltt-core.h:201:
+ * Remeber that the C compiler does align each member on the boundary equivalent
    ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#261: FILE: include/linux/ltt-core.h:207:
+ * Event headers are aligned depending on the trace alignment option. */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#264: FILE: include/linux/ltt-core.h:210:
+	uint32_t timestamp;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#267: FILE: include/linux/ltt-core.h:213:
+	uint16_t event_size;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#271: FILE: include/linux/ltt-core.h:217:
+	uint64_t timestamp;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#274: FILE: include/linux/ltt-core.h:220:
+	uint16_t event_size;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#278: FILE: include/linux/ltt-core.h:224:
+	uint32_t magic_number;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#279: FILE: include/linux/ltt-core.h:225:
+	uint32_t arch_type;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#280: FILE: include/linux/ltt-core.h:226:
+	uint32_t arch_variant;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#281: FILE: include/linux/ltt-core.h:227:
+	uint32_t float_word_order;	 /* Only useful for user space traces */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#282: FILE: include/linux/ltt-core.h:228:
+	uint8_t arch_size;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#283: FILE: include/linux/ltt-core.h:229:
+	uint8_t major_version;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#284: FILE: include/linux/ltt-core.h:230:
+	uint8_t minor_version;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#285: FILE: include/linux/ltt-core.h:231:
+	uint8_t flight_recorder;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#286: FILE: include/linux/ltt-core.h:232:
+	uint8_t has_heartbeat;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#287: FILE: include/linux/ltt-core.h:233:
+	uint8_t has_alignment;		/* Event header alignment */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#288: FILE: include/linux/ltt-core.h:234:
+	uint32_t freq_scale;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#289: FILE: include/linux/ltt-core.h:235:
+	uint64_t start_freq;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#290: FILE: include/linux/ltt-core.h:236:
+	uint64_t start_tsc;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#291: FILE: include/linux/ltt-core.h:237:
+	uint64_t start_monotonic;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#292: FILE: include/linux/ltt-core.h:238:
+	uint64_t start_time_sec;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#293: FILE: include/linux/ltt-core.h:239:
+	uint64_t start_time_usec;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#296: FILE: include/linux/ltt-core.h:242:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#301: FILE: include/linux/ltt-core.h:247:
+ * of a buffer that would be before a frequency change. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#303: FILE: include/linux/ltt-core.h:249:
+^Istruct { $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#304: FILE: include/linux/ltt-core.h:250:
+		uint64_t cycle_count;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#305: FILE: include/linux/ltt-core.h:251:
+		uint64_t freq; /* khz */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#307: FILE: include/linux/ltt-core.h:253:
+^Istruct { $

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#308: FILE: include/linux/ltt-core.h:254:
+		uint64_t cycle_count;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#309: FILE: include/linux/ltt-core.h:255:
+		uint64_t freq; /* khz */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#311: FILE: include/linux/ltt-core.h:257:
+	uint32_t lost_size;	/* Size unused at the end of the buffer */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#312: FILE: include/linux/ltt-core.h:258:
+	uint32_t buf_size;	/* The size of this sub-buffer */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#327: FILE: include/linux/ltt-core.h:273:
+#define GET_CHANNEL_INDEX(chan)	\
+	(unsigned int)&((struct ltt_trace_struct*)NULL)->channel.chan

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#328: FILE: include/linux/ltt-core.h:274:
+	(unsigned int)&((struct ltt_trace_struct*)NULL)->channel.chan

ERROR:TRAILING_WHITESPACE: trailing whitespace
#333: FILE: include/linux/ltt-core.h:279:
+ * $

CHECK:CAMELCASE: Avoid CamelCase: <fID>
#342: FILE: include/linux/ltt-core.h:288:
+static inline unsigned int ltt_get_index_from_facility(ltt_facility_t fID,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#343: FILE: include/linux/ltt-core.h:289:
+static inline unsigned int ltt_get_index_from_facility(ltt_facility_t fID,
+		u8 eID)

CHECK:CAMELCASE: Avoid CamelCase: <eID>
#343: FILE: include/linux/ltt-core.h:289:
+		u8 eID)

ERROR:SPACING: space required before the open parenthesis '('
#345: FILE: include/linux/ltt-core.h:291:
+	if(fID == ltt_facility_core) {

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#346: FILE: include/linux/ltt-core.h:292:
+		switch(eID) {
+			case event_core_facility_load:
+			case event_core_facility_unload:
+			case event_core_state_dump_facility_load:
[...]
+			default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: space required before the open parenthesis '('
#346: FILE: include/linux/ltt-core.h:292:
+		switch(eID) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#355: FILE: include/linux/ltt-core.h:301:
+^I$

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#360: FILE: include/linux/ltt-core.h:306:
+static inline struct ltt_channel_struct *ltt_get_channel_from_index(

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#363: FILE: include/linux/ltt-core.h:309:
+	return *(struct ltt_channel_struct **)((void*)trace+index);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#363: FILE: include/linux/ltt-core.h:309:
+	return *(struct ltt_channel_struct **)((void*)trace+index);
 	                                                   ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#366: FILE: include/linux/ltt-core.h:312:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#381: FILE: include/linux/ltt-core.h:327:
+ * */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#383: FILE: include/linux/ltt-core.h:329:
+static inline unsigned char ltt_get_header_size(struct ltt_trace_struct *trace,
+		void *address,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#390: FILE: include/linux/ltt-core.h:336:
+^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#402: FILE: include/linux/ltt-core.h:348:
+	 * Calculated statically if header size if known. */

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#403: FILE: include/linux/ltt-core.h:349:
+	*after_hdr_pad = ltt_align(header, sizeof(void*));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#408: FILE: include/linux/ltt-core.h:354:
+	return header+padding;
 	             ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#411: FILE: include/linux/ltt-core.h:357:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#426: FILE: include/linux/ltt-core.h:372:
+static inline void ltt_write_event_header(struct ltt_trace_struct *trace,
+		struct ltt_channel_struct *channel,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#428: FILE: include/linux/ltt-core.h:374:
+		uint32_t eID, size_t event_size,

WARNING:MINMAX: min() should probably be min_t(size_t, event_size, 0xFFFFU)
#434: FILE: include/linux/ltt-core.h:380:
+	event_size = min(event_size, (size_t)0xFFFFU);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#435: FILE: include/linux/ltt-core.h:381:
+	hb = (struct ltt_event_header_hb *)(ptr+offset);
 	                                       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#442: FILE: include/linux/ltt-core.h:388:
+^I$

WARNING:MINMAX: min() should probably be min_t(size_t, event_size, 0xFFFFU)
#443: FILE: include/linux/ltt-core.h:389:
+	event_size = min(event_size, (size_t)0xFFFFU);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#444: FILE: include/linux/ltt-core.h:390:
+	nohb = (struct ltt_event_header_nohb *)(ptr+offset);
 	                                           ^

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#455: FILE: include/linux/ltt-core.h:401:
+ * which occured at the wrong moment).
          ^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#458: FILE: include/linux/ltt-core.h:404:
+ * This function does nothing if trace is in normal mode. */

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#459: FILE: include/linux/ltt-core.h:405:
+#if 0

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#461: FILE: include/linux/ltt-core.h:407:
+static inline void ltt_write_commit_counter(struct rchan_buf *buf,
+		void *reserved)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#463: FILE: include/linux/ltt-core.h:409:
+^Istruct ltt_channel_struct *channel = $

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#464: FILE: include/linux/ltt-core.h:410:
+		(struct ltt_channel_struct*)buf->chan->client_data;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#466: FILE: include/linux/ltt-core.h:412:
+		(struct ltt_block_start_header*)buf->data;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#467: FILE: include/linux/ltt-core.h:413:
+	unsigned offset, subbuf_idx;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#468: FILE: include/linux/ltt-core.h:414:
+^I$

ERROR:SPACING: space required before the open parenthesis '('
#472: FILE: include/linux/ltt-core.h:418:
+	if(channel->trace->mode == LTT_TRACE_FLIGHT)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#473: FILE: include/linux/ltt-core.h:419:
+^I^Iheader->lost_size = buf->chan->subbuf_size - $

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#476: FILE: include/linux/ltt-core.h:422:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#483: FILE: include/linux/ltt-core.h:429:
+#define BUFFER_OFFSET(offset, chan) (offset & (chan->alloc_size-1))
                                                                ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'offset' may be better as '(offset)' to avoid precedence issues
#483: FILE: include/linux/ltt-core.h:429:
+#define BUFFER_OFFSET(offset, chan) (offset & (chan->alloc_size-1))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'chan' may be better as '(chan)' to avoid precedence issues
#483: FILE: include/linux/ltt-core.h:429:
+#define BUFFER_OFFSET(offset, chan) (offset & (chan->alloc_size-1))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#484: FILE: include/linux/ltt-core.h:430:
+#define SUBBUF_OFFSET(offset, chan) (offset & (chan->subbuf_size-1))
                                                                 ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'offset' may be better as '(offset)' to avoid precedence issues
#484: FILE: include/linux/ltt-core.h:430:
+#define SUBBUF_OFFSET(offset, chan) (offset & (chan->subbuf_size-1))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'chan' may be better as '(chan)' to avoid precedence issues
#484: FILE: include/linux/ltt-core.h:430:
+#define SUBBUF_OFFSET(offset, chan) (offset & (chan->subbuf_size-1))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'chan' - possible side-effects?
#485: FILE: include/linux/ltt-core.h:431:
+#define SUBBUF_ALIGN(offset, chan) \
+	(((offset) + chan->subbuf_size) & (~(chan->subbuf_size-1)))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'chan' may be better as '(chan)' to avoid precedence issues
#485: FILE: include/linux/ltt-core.h:431:
+#define SUBBUF_ALIGN(offset, chan) \
+	(((offset) + chan->subbuf_size) & (~(chan->subbuf_size-1)))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#486: FILE: include/linux/ltt-core.h:432:
+	(((offset) + chan->subbuf_size) & (~(chan->subbuf_size-1)))
 	                                                      ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'chan' may be better as '(chan)' to avoid precedence issues
#487: FILE: include/linux/ltt-core.h:433:
+#define SUBBUF_TRUNC(offset, chan) \
+	((offset) & (~(chan->subbuf_size-1)))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#488: FILE: include/linux/ltt-core.h:434:
+	((offset) & (~(chan->subbuf_size-1)))
 	                                ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'chan' - possible side-effects?
#489: FILE: include/linux/ltt-core.h:435:
+#define SUBBUF_INDEX(offset, chan) \
+	(BUFFER_OFFSET(offset,chan)/chan->subbuf_size)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#490: FILE: include/linux/ltt-core.h:436:
+	(BUFFER_OFFSET(offset,chan)/chan->subbuf_size)
 	                     ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#490: FILE: include/linux/ltt-core.h:436:
+	(BUFFER_OFFSET(offset,chan)/chan->subbuf_size)
 	                           ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#508: FILE: include/linux/ltt-core.h:454:
+ * ^I^I^I^I^Ito the beginning of the reserved slot. */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#508: FILE: include/linux/ltt-core.h:454:
+ * 					to the beginning of the reserved slot. */

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#509: FILE: include/linux/ltt-core.h:455:
+static inline void *ltt_reserve_slot(

ERROR:TRAILING_WHITESPACE: trailing whitespace
#524: FILE: include/linux/ltt-core.h:470:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#525: FILE: include/linux/ltt-core.h:471:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#525: FILE: include/linux/ltt-core.h:471:
+	
+	

WARNING:TYPO_SPELLING: 'beginnig' may be misspelled - perhaps 'beginning'?
#534: FILE: include/linux/ltt-core.h:480:
+ * @reserved : address of the beginnig of the reserved slot.
                               ^^^^^^^^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#538: FILE: include/linux/ltt-core.h:484:
+static inline void ltt_commit_slot(

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#552: FILE: include/linux/ltt-core.h:498:
+#if defined(CONFIG_LTT_TRACER) || defined(CONFIG_LTT_TRACER_MODULE)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#605: FILE: include/linux/ltt-core.h:551:
+ * written by this user space event. */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#616: FILE: include/linux/ltt-core.h:562:
+extern int ltt_module_register(enum ltt_module_function name, void *function,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#617: FILE: include/linux/ltt-core.h:563:
+extern int ltt_module_register(enum ltt_module_function name, void *function,
+		struct module *owner);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#618: FILE: include/linux/ltt-core.h:564:
+extern void ltt_module_unregister(enum ltt_module_function name);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#637: FILE: include/linux/ltt-core.h:583:
+		unsigned subbuf_size_low;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#638: FILE: include/linux/ltt-core.h:584:
+		unsigned n_subbufs_low;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#639: FILE: include/linux/ltt-core.h:585:
+		unsigned subbuf_size_med;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#640: FILE: include/linux/ltt-core.h:586:
+		unsigned n_subbufs_med;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#641: FILE: include/linux/ltt-core.h:587:
+		unsigned subbuf_size_high;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#642: FILE: include/linux/ltt-core.h:588:
+		unsigned n_subbufs_high;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#646: FILE: include/linux/ltt-core.h:592:
+extern int ltt_control(enum ltt_control_msg msg, char *trace_name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#647: FILE: include/linux/ltt-core.h:593:
+extern int ltt_control(enum ltt_control_msg msg, char *trace_name,
+		char *trace_type, union ltt_control_args args);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#649: FILE: include/linux/ltt-core.h:595:
+enum ltt_filter_control_msg { $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#653: FILE: include/linux/ltt-core.h:599:
+extern int ltt_filter_control(enum ltt_filter_control_msg msg,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#654: FILE: include/linux/ltt-core.h:600:
+extern int ltt_filter_control(enum ltt_filter_control_msg msg,
+		char *trace_name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#657: FILE: include/linux/ltt-core.h:603:
+void ltt_write_trace_header(struct ltt_trace_struct *trace,
+		struct ltt_trace_header *header);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#658: FILE: include/linux/ltt-core.h:604:
+extern void ltt_channel_destroy(void *object);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#659: FILE: include/linux/ltt-core.h:605:
+extern void ltt_wakeup_writers(void *private);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#672: FILE: include/linux/ltt-core.h:618:
+#define RELAYFS_GET_SUBBUF		_IOR(0xF4, 0x00,__u32)
                           		               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#674: FILE: include/linux/ltt-core.h:620:
+#define RELAYFS_PUT_SUBBUF		_IOW(0xF4, 0x01,__u32)
                           		               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#676: FILE: include/linux/ltt-core.h:622:
+#define RELAYFS_GET_N_SUBBUFS		_IOR(0xF4, 0x02,__u32)
                              		               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#678: FILE: include/linux/ltt-core.h:624:
+#define RELAYFS_GET_SUBBUF_SIZE		_IOR(0xF4, 0x03,__u32)
                                		               ^

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.38471.commit.a91b5c322d4de7a0ea1b4875f02adc8657d55be1 total: 28 errors, 44 warnings, 83 checks, 627 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.38471.commit.a91b5c322d4de7a0ea1b4875f02adc8657d55be1 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
