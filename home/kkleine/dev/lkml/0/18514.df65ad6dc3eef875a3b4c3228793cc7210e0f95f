WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#32: 
Signed-Off-By: David Howells <dhowells@redhat.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#74: FILE: fs/Kconfig:2089:
+config AFS_FSCACHE
+	bool "Provide AFS client caching support (EXPERIMENTAL)"
+	depends on EXPERIMENTAL
+	depends on AFS_FS=m && FSCACHE || AFS_FS=y && FSCACHE=y
+	help
+	  Say Y here if you want AFS data to be cached locally on disk through
+	  the generic filesystem cache manager
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#86: 
deleted file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#201: FILE: fs/afs/cell.c:538:
+	uint16_t klen;

WARNING:TYPO_SPELLING: 'auxilliary' may be misspelled - perhaps 'auxiliary'?
#226: FILE: fs/afs/cell.c:554:
+ * provide new auxilliary cache data
                ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#237: FILE: fs/afs/cell.c:561:
+	uint16_t dlen;

WARNING:TYPO_SPELLING: 'auxilliary' may be misspelled - perhaps 'auxiliary'?
#259: FILE: fs/afs/cell.c:578:
+ * check that the auxilliary data indicates that the entry is still valid
                   ^^^^^^^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#410: FILE: fs/afs/file.c:34:
+static int afs_file_mmap(struct file * file, struct vm_area_struct * vma);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#410: FILE: fs/afs/file.c:34:
+static int afs_file_mmap(struct file * file, struct vm_area_struct * vma);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#413: FILE: fs/afs/file.c:37:
+static int afs_file_readpages(struct file *filp, struct address_space *mapping,
                                            ^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#414: FILE: fs/afs/file.c:38:
+			      struct list_head *pages, unsigned nr_pages);

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#438: FILE: fs/afs/file.c:62:
+static struct vm_operations_struct afs_fs_vm_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#480: FILE: fs/afs/file.c:97:
+	 * the VM reissue the readpage */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#508: FILE: fs/afs/file.c:116:
+	 * modified */

WARNING:INDENTED_LABEL: labels should not be indented
#571: FILE: fs/afs/file.c:169:
+	go_on:

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#612: FILE: fs/afs/file.c:203:
+				BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#648: FILE: fs/afs/file.c:235:
+static int afs_file_readpages(struct file *filp, struct address_space *mapping,
                                            ^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#649: FILE: fs/afs/file.c:236:
+			      struct list_head *pages, unsigned nr_pages)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#678: FILE: fs/afs/file.c:261:
+		BUG_ON(!list_empty(pages));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#679: FILE: fs/afs/file.c:262:
+		BUG_ON(nr_pages != 0);

CHECK:SPACING: No space is necessary after a cast
#696: FILE: fs/afs/file.c:279:
+			       (void *) afs_file_readpage, NULL);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#726: FILE: fs/afs/file.c:303:
+			fscache_uncache_page(

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#869: FILE: fs/afs/inode.c:122:
+				printk("Negative\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#944: FILE: fs/afs/internal.h:24:
+#define __kdbg(FMT, a...)	printk("[%05d] "FMT"\n", current->pid , ## a)

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#944: FILE: fs/afs/internal.h:24:
+#define __kdbg(FMT, a...)	printk("[%05d] "FMT"\n", current->pid , ## a)
                          	                                      ^

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#944: FILE: fs/afs/internal.h:24:
+#define __kdbg(FMT, a...)	printk("[%05d] "FMT"\n", current->pid , ## a)

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#945: FILE: fs/afs/internal.h:25:
+#define kenter(FMT, a...)	__kdbg("==> %s("FMT")", __FUNCTION__ , ## a)
                          	                                     ^

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#945: FILE: fs/afs/internal.h:25:
+#define kenter(FMT, a...)	__kdbg("==> %s("FMT")", __FUNCTION__ , ## a)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#945: FILE: fs/afs/internal.h:25:
+#define kenter(FMT, a...)	__kdbg("==> %s("FMT")", __FUNCTION__ , ## a)

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#946: FILE: fs/afs/internal.h:26:
+#define kleave(FMT, a...)	__kdbg("<== %s()"FMT, __FUNCTION__ , ## a)
                          	                                   ^

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#946: FILE: fs/afs/internal.h:26:
+#define kleave(FMT, a...)	__kdbg("<== %s()"FMT, __FUNCTION__ , ## a)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#946: FILE: fs/afs/internal.h:26:
+#define kleave(FMT, a...)	__kdbg("<== %s()"FMT, __FUNCTION__ , ## a)

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#947: FILE: fs/afs/internal.h:27:
+#define kdebug(FMT, a...)	__kdbg(FMT , ## a)
                          	           ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#948: FILE: fs/afs/internal.h:28:
+#define kproto(FMT, a...)	__kdbg("### "FMT , ## a)
                          	                 ^

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#948: FILE: fs/afs/internal.h:28:
+#define kproto(FMT, a...)	__kdbg("### "FMT , ## a)

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#949: FILE: fs/afs/internal.h:29:
+#define knet(FMT, a...)		__kdbg(FMT , ## a)
                        		           ^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#1263: FILE: fs/afs/vlocation.c:900:
+	uint16_t klen;

WARNING:TYPO_SPELLING: 'auxilliary' may be misspelled - perhaps 'auxiliary'?
#1313: FILE: fs/afs/vlocation.c:918:
+ * provide new auxilliary cache data
                ^^^^^^^^^^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#1324: FILE: fs/afs/vlocation.c:925:
+	uint16_t dlen;

WARNING:TYPO_SPELLING: 'auxilliary' may be misspelled - perhaps 'auxiliary'?
#1344: FILE: fs/afs/vlocation.c:944:
+ * check that the auxilliary data indicates that the entry is still valid
                   ^^^^^^^^^^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#1353: FILE: fs/afs/vlocation.c:953:
+	uint16_t dlen;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1366: FILE: fs/afs/vlocation.c:966:
+	 * VL record from the cache */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#1475: FILE: fs/afs/vnode.c:367:
+	uint16_t klen;

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#1488: FILE: fs/afs/vnode.c:369:
+	_enter("{%x,%x,%Lx},%p,%u",

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#1514: FILE: fs/afs/vnode.c:395:
+	_enter("{%x,%x,%Lx},",

CHECK:SPACING: No space is necessary after a cast
#1517: FILE: fs/afs/vnode.c:398:
+	*size = i_size_read((struct inode *) &vnode->vfs_inode);

WARNING:TYPO_SPELLING: 'auxilliary' may be misspelled - perhaps 'auxiliary'?
#1524: FILE: fs/afs/vnode.c:405:
+ * provide new auxilliary cache data
                ^^^^^^^^^^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#1531: FILE: fs/afs/vnode.c:412:
+	uint16_t dlen;

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#1533: FILE: fs/afs/vnode.c:414:
+	_enter("{%x,%x,%Lx},%p,%u",

WARNING:TYPO_SPELLING: 'auxilliary' may be misspelled - perhaps 'auxiliary'?
#1553: FILE: fs/afs/vnode.c:434:
+ * check that the auxilliary data indicates that the entry is still valid
                   ^^^^^^^^^^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#1561: FILE: fs/afs/vnode.c:442:
+	uint16_t dlen;

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#1563: FILE: fs/afs/vnode.c:444:
+	_enter("{%x,%x,%Lx},%p,%u",

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1583: FILE: fs/afs/vnode.c:460:
+		unsigned unique;

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#1663: FILE: fs/afs/vnode.c:529:
+	_enter("{%x,%x,%Lx}",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1811: FILE: fs/afs/volume.c:482:
+static uint16_t afs_volume_cache_get_key(const void *cookie_netfs_data,
+					void *buffer, uint16_t bufmax)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#1818: FILE: fs/afs/volume.c:485:
+	uint16_t klen;

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.18514.commit.df65ad6dc3eef875a3b4c3228793cc7210e0f95f total: 8 errors, 31 warnings, 17 checks, 1685 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.18514.commit.df65ad6dc3eef875a3b4c3228793cc7210e0f95f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
