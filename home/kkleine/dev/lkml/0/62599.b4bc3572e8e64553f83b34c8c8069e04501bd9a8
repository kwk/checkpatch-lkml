WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
using the 4 onboard SATA ports. We have applied the following two  patches  

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#74: FILE: drivers/scsi/libata-core.c:43:
#include <scsi/scsi_host.h>

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#94: FILE: drivers/scsi/libata-core.c:1136:
+ /* Necessary if we had an LBA48 drive in, we pulled it out, and put in
+ * a non-LBA48 drive to replace it.

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#96: FILE: drivers/scsi/libata-core.c:1138:
+ dev->flags &= ~ATA_DFLAG_LBA48;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#107: FILE: drivers/scsi/libata-core.c:3643:
+ struct ata_queued_cmd *qc = ata_qc_from_tag(ap, ap->active_tag);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#109: FILE: drivers/scsi/libata-core.c:3645:
+ if (unlikely(qc)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#109: FILE: drivers/scsi/libata-core.c:3645:
+ if (unlikely(qc)) {
[...]
+ ata_scsi_prepare_qc_abort(qc);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#111: FILE: drivers/scsi/libata-core.c:3647:
+ /* This is SO bad. But we can't just run
+ * ata_qc_complete without doing this, because

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#116: FILE: drivers/scsi/libata-core.c:3652:
+ ata_scsi_prepare_qc_abort(qc);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#117: FILE: drivers/scsi/libata-core.c:3653:
+ ata_qc_complete(qc, ATA_ERR);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#118: FILE: drivers/scsi/libata-core.c:3654:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#124: FILE: drivers/scsi/libata-core.c:3660:
+ struct ata_port *ap = (struct ata_port *)_data;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#125: FILE: drivers/scsi/libata-core.c:3661:
+ struct ata_port *ap = (struct ata_port *)_data;
+ DPRINTK("Got an unplug request on port %d\n", ap->id);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#125: FILE: drivers/scsi/libata-core.c:3661:
+ DPRINTK("Got an unplug request on port %d\n", ap->id);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#127: FILE: drivers/scsi/libata-core.c:3663:
+ down(&ap->hotplug_mutex);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#129: FILE: drivers/scsi/libata-core.c:3665:
+ ata_scsi_handle_unplug(ap);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#131: FILE: drivers/scsi/libata-core.c:3667:
+ up(&ap->hotplug_mutex);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#136: FILE: drivers/scsi/libata-core.c:3672:
+ struct ata_port *ap = (struct ata_port *)_data;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#137: FILE: drivers/scsi/libata-core.c:3673:
+ struct ata_port *ap = (struct ata_port *)_data;
+ DPRINTK("Got a plug request on port %d\n", ap->id);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#137: FILE: drivers/scsi/libata-core.c:3673:
+ DPRINTK("Got a plug request on port %d\n", ap->id);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#139: FILE: drivers/scsi/libata-core.c:3675:
+ down(&ap->hotplug_mutex);$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#141: FILE: drivers/scsi/libata-core.c:3677:
+ /* Pure evil. Suppose that you have an 'unplug' waiting on your
+ * queue, and this function executes while it's there (because

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#150: FILE: drivers/scsi/libata-core.c:3686:
+ ata_check_kill_qc(ap);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#152: FILE: drivers/scsi/libata-core.c:3688:
+ ap->flags |= ATA_FLAG_SATA_RESET;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#153: FILE: drivers/scsi/libata-core.c:3689:
+ ap->udma_mask = ap->orig_udma_mask;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#155: FILE: drivers/scsi/libata-core.c:3691:
+ if (ata_bus_probe(ap) /* Does its own locking */)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#155: FILE: drivers/scsi/libata-core.c:3691:
+ if (ata_bus_probe(ap) /* Does its own locking */)
+ ata_scsi_handle_unplug(ap); //might be necessary on SMP

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#156: FILE: drivers/scsi/libata-core.c:3692:
+ ata_scsi_handle_unplug(ap); //might be necessary on SMP$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#157: FILE: drivers/scsi/libata-core.c:3693:
+ else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#157: FILE: drivers/scsi/libata-core.c:3693:
+ else
+ ata_scsi_handle_plug(ap);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#158: FILE: drivers/scsi/libata-core.c:3694:
+ ata_scsi_handle_plug(ap);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#159: FILE: drivers/scsi/libata-core.c:3695:
+ up(&ap->hotplug_mutex);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#165: FILE: drivers/scsi/libata-core.c:3701:
+ ata_port_disable(ap); //disable this NOW, device is gone$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#166: FILE: drivers/scsi/libata-core.c:3702:
+ queue_work(ata_irq_wq, &ap->hotplug_unplug_task);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#172: FILE: drivers/scsi/libata-core.c:3708:
+ queue_work(ata_irq_wq, &ap->hotplug_plug_task);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#182: FILE: drivers/scsi/libata-core.c:3932:
+ ap->orig_udma_mask = ent->udma_mask;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#184: FILE: drivers/scsi/libata-core.c:3934:
+ init_MUTEX(&ap->hotplug_mutex);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#185: FILE: drivers/scsi/libata-core.c:3935:
+ INIT_WORK(&ap->hotplug_plug_task, ata_hotplug_plug_func, ap);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#186: FILE: drivers/scsi/libata-core.c:3936:
+ INIT_WORK(&ap->hotplug_unplug_task, ata_hotplug_unplug_func, ap);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#194: FILE: drivers/scsi/libata-core.c:4544:
+ ata_irq_wq = create_workqueue("ata_irq");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#195: FILE: drivers/scsi/libata-core.c:4545:
+ if (!ata_irq_wq) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#195: FILE: drivers/scsi/libata-core.c:4545:
+ if (!ata_irq_wq) {
+ destroy_workqueue(ata_wq);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#196: FILE: drivers/scsi/libata-core.c:4546:
+ destroy_workqueue(ata_wq);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#197: FILE: drivers/scsi/libata-core.c:4547:
+ return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#198: FILE: drivers/scsi/libata-core.c:4548:
+ }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#206: FILE: drivers/scsi/libata-core.c:4557:
+ destroy_workqueue(ata_irq_wq);$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#215: FILE: drivers/scsi/libata-core.c:4614:
+EXPORT_SYMBOL_GPL(ata_hotplug_plug);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#227: FILE: drivers/scsi/libata-scsi.c:1014:
+ struct scsi_cmnd *cmd = qc->scsicmd;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#229: FILE: drivers/scsi/libata-scsi.c:1016:
+ cmd->result = SAM_STAT_TASK_ABORTED; //FIXME: Is this what we want?$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#231: FILE: drivers/scsi/libata-scsi.c:1018:
+ qc->scsidone(cmd);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#233: FILE: drivers/scsi/libata-scsi.c:1020:
+ return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#239: FILE: drivers/scsi/libata-scsi.c:1026:
+ if (qc->complete_fn == ata_scsi_qc_complete);$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#239: FILE: drivers/scsi/libata-scsi.c:1026:
+ if (qc->complete_fn == ata_scsi_qc_complete);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#240: FILE: drivers/scsi/libata-scsi.c:1027:
+ qc->complete_fn = ata_scsi_qc_abort;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#246: FILE: drivers/scsi/libata-scsi.c:1033:
+ scsi_add_device(ap->host, 0, 0, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#252: FILE: drivers/scsi/libata-scsi.c:1039:
+ struct scsi_device *scd = scsi_device_lookup(ap->host, 0, 0, 0);$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#254: FILE: drivers/scsi/libata-scsi.c:1041:
+ /* scd might not exist; someone did 'echo "scsi remove-single-device
+ * ... " > /proc/scsi/scsi' or somebody was turning the key in the

WARNING:REPEATED_WORD: Possible repeated word: 'really'
#255: FILE: drivers/scsi/libata-scsi.c:1042:
+ * hotswap bay between on and off really really fast.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#257: FILE: drivers/scsi/libata-scsi.c:1044:
+ if (scd) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#257: FILE: drivers/scsi/libata-scsi.c:1044:
+ if (scd) {
+ scsi_device_set_state(scd, SDEV_CANCEL);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#258: FILE: drivers/scsi/libata-scsi.c:1045:
+ scsi_device_set_state(scd, SDEV_CANCEL);$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#260: FILE: drivers/scsi/libata-scsi.c:1047:
+ /* We might have a pending qc on I/O to a removed device,
+ * however, I argue it's impossible unless we have an 'scd'

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#266: FILE: drivers/scsi/libata-scsi.c:1053:
+ ata_check_kill_qc(ap);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#267: FILE: drivers/scsi/libata-scsi.c:1054:
+ scsi_remove_device(scd);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#268: FILE: drivers/scsi/libata-scsi.c:1055:
+ scsi_device_put(scd);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#269: FILE: drivers/scsi/libata-scsi.c:1056:
+ }$

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#297: FILE: linux/libata.h:367:
+^Iunsigned int ^I^Iorig_udma_mask;$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#305: FILE: linux/libata.h:460:
+extern void ata_hotplug_unplug(struct ata_port *ap);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#306: FILE: linux/libata.h:461:
+extern void ata_hotplug_plug(struct ata_port *ap);

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#315: FILE: linux/libata.h:641:
+		udelay(100);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#352: FILE: linux/libata.h:367:
+^Iunsigned int ^I^Iorig_udma_mask;$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#360: FILE: linux/libata.h:460:
+extern void ata_hotplug_unplug(struct ata_port *ap);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#361: FILE: linux/libata.h:461:
+extern void ata_hotplug_plug(struct ata_port *ap);

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#370: FILE: linux/libata.h:641:
+		udelay(100);

WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#391: FILE: scsi/libata-scsi.c:2629:
+ struct scsi_cmnd *cmd = qc->scsicmd;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#393: FILE: scsi/libata-scsi.c:2631:
+ cmd->result = SAM_STAT_TASK_ABORTED; //FIXME: Is this what we want?$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#395: FILE: scsi/libata-scsi.c:2633:
+ qc->scsidone(cmd);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#397: FILE: scsi/libata-scsi.c:2635:
+ return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#403: FILE: scsi/libata-scsi.c:2641:
+ if (qc->complete_fn == ata_scsi_qc_complete);$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#403: FILE: scsi/libata-scsi.c:2641:
+ if (qc->complete_fn == ata_scsi_qc_complete);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#404: FILE: scsi/libata-scsi.c:2642:
+ qc->complete_fn = ata_scsi_qc_abort;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#410: FILE: scsi/libata-scsi.c:2648:
+ scsi_add_device(ap->host, 0, 0, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#416: FILE: scsi/libata-scsi.c:2654:
+ struct scsi_device *scd = scsi_device_lookup(ap->host, 0, 0, 0);$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#418: FILE: scsi/libata-scsi.c:2656:
+ /* scd might not exist; someone did 'echo "scsi remove-single-device
+ * ... " > /proc/scsi/scsi' or somebody was turning the key in the

WARNING:REPEATED_WORD: Possible repeated word: 'really'
#419: FILE: scsi/libata-scsi.c:2657:
+ * hotswap bay between on and off really really fast.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#421: FILE: scsi/libata-scsi.c:2659:
+ if (scd) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (1, 1)
#421: FILE: scsi/libata-scsi.c:2659:
+ if (scd) {
+ scsi_device_set_state(scd, SDEV_CANCEL);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#422: FILE: scsi/libata-scsi.c:2660:
+ scsi_device_set_state(scd, SDEV_CANCEL);$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#424: FILE: scsi/libata-scsi.c:2662:
+ /* We might have a pending qc on I/O to a removed device,
+ * however, I argue it's impossible unless we have an 'scd'

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#430: FILE: scsi/libata-scsi.c:2668:
+ ata_check_kill_qc(ap);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#431: FILE: scsi/libata-scsi.c:2669:
+ scsi_remove_device(scd);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#432: FILE: scsi/libata-scsi.c:2670:
+ scsi_device_put(scd);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#433: FILE: scsi/libata-scsi.c:2671:
+ }$

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.62599.commit.b4bc3572e8e64553f83b34c8c8069e04501bd9a8 total: 3 errors, 87 warnings, 6 checks, 335 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.62599.commit.b4bc3572e8e64553f83b34c8c8069e04501bd9a8 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
