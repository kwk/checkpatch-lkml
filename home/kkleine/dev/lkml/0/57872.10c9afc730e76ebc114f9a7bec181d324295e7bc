CHECK:SPACING: No space is necessary after a cast
#127: FILE: arch/s390/kernel/compat_linux.c:412:
+	ret = sys_sysinfo((struct sysinfo __user *) &s);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#136: FILE: arch/s390/kernel/compat_linux.c:441:
+	ret = sys_sched_rr_get_interval(pid, (struct timespec __user *) &t);

CHECK:SPACING: No space is necessary after a cast
#146: FILE: arch/s390/kernel/compat_linux.c:468:
+				 set ? (sigset_t __user *) &s : NULL,

CHECK:SPACING: No space is necessary after a cast
#147: FILE: arch/s390/kernel/compat_linux.c:469:
+				 oset ? (sigset_t __user *) &s : NULL,

CHECK:SPACING: No space is necessary after a cast
#157: FILE: arch/s390/kernel/compat_linux.c:495:
+	ret = sys_rt_sigpending((sigset_t __user *) &s, sigsetsize);

CHECK:SPACING: No space is necessary after a cast
#166: FILE: arch/s390/kernel/compat_linux.c:520:
+	ret = sys_rt_sigqueueinfo(pid, sig, (siginfo_t __user *) &info);

CHECK:SPACING: No space is necessary after a cast
#176: FILE: arch/s390/kernel/compat_linux.c:681:
+			   offset ? (off_t __user *) &of : NULL, count);

CHECK:SPACING: No space is necessary after a cast
#186: FILE: arch/s390/kernel/compat_linux.c:702:
+			     offset ? (loff_t __user *) &lof : NULL, count);

CHECK:SPACING: No space is necessary after a cast
#224: FILE: arch/s390/kernel/process.c:175:
+		show_trace(NULL, (unsigned long *) regs->gprs[15]);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#288: FILE: arch/s390/kernel/traps.c:336:
+	return (void __user *)((regs->psw.addr-S390_lowcore.pgm_ilc) & PSW_ADDR_INSN);
 	                                      ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#345: FILE: arch/s390/lib/string.c:236:
+       return NULL;$

CHECK:SPACING: No space is necessary after a cast
#380: FILE: arch/s390/mm/fault.c:147:
+	si.si_addr = (void __user *) address;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#437: FILE: drivers/s390/block/dasd_eckd.c:68:
+	{ CCW_DEVICE_DEVTYPE (0x3990, 0, 0x3390, 0), .driver_info = 0x1},

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#438: FILE: drivers/s390/block/dasd_eckd.c:69:
+	{ CCW_DEVICE_DEVTYPE (0x2105, 0, 0x3390, 0), .driver_info = 0x2},

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#439: FILE: drivers/s390/block/dasd_eckd.c:70:
+	{ CCW_DEVICE_DEVTYPE (0x3880, 0, 0x3390, 0), .driver_info = 0x3},

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#440: FILE: drivers/s390/block/dasd_eckd.c:71:
+	{ CCW_DEVICE_DEVTYPE (0x3990, 0, 0x3380, 0), .driver_info = 0x4},

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#441: FILE: drivers/s390/block/dasd_eckd.c:72:
+	{ CCW_DEVICE_DEVTYPE (0x2105, 0, 0x3380, 0), .driver_info = 0x5},

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#442: FILE: drivers/s390/block/dasd_eckd.c:73:
+	{ CCW_DEVICE_DEVTYPE (0x9343, 0, 0x9345, 0), .driver_info = 0x6},

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#443: FILE: drivers/s390/block/dasd_eckd.c:74:
+	{ CCW_DEVICE_DEVTYPE (0x2107, 0, 0x3390, 0), .driver_info = 0x7},

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#444: FILE: drivers/s390/block/dasd_eckd.c:75:
+	{ CCW_DEVICE_DEVTYPE (0x2107, 0, 0x3380, 0), .driver_info = 0x8},

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#445: FILE: drivers/s390/block/dasd_eckd.c:76:
+	{ CCW_DEVICE_DEVTYPE (0x1750, 0, 0x3390, 0), .driver_info = 0x9},

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#446: FILE: drivers/s390/block/dasd_eckd.c:77:
+	{ CCW_DEVICE_DEVTYPE (0x1750, 0, 0x3380, 0), .driver_info = 0xa},

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#460: FILE: drivers/s390/block/dasd_fba.c:47:
+	{ CCW_DEVICE_DEVTYPE (0x6310, 0, 0x9336, 0), .driver_info = 0x1},

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#461: FILE: drivers/s390/block/dasd_fba.c:48:
+	{ CCW_DEVICE_DEVTYPE (0x3880, 0, 0x3370, 0), .driver_info = 0x2},

CHECK:SPACING: No space is necessary after a cast
#495: FILE: drivers/s390/block/dasd_genhd.c:148:
+	barg.data = (void __user *) &bpart;

WARNING:MISPLACED_INIT: __initdata should be placed after devs
#522: FILE: drivers/s390/block/xpram.c:74:
+static int __initdata devs = XPRAM_DEVS;

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#661: FILE: drivers/s390/char/fs3270.c:239:
+fs3270_read(struct file *filp, char __user *data, size_t count, loff_t *off)
                          ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#670: FILE: drivers/s390/char/fs3270.c:284:
+fs3270_write(struct file *filp, const char __user *data, size_t count, loff_t *off)
                           ^^^^

CHECK:SPACING: No space is necessary after a cast
#679: FILE: drivers/s390/char/fs3270.c:341:
+		rc = put_user(fp->read_command, (char __user *) arg);

CHECK:SPACING: No space is necessary after a cast
#683: FILE: drivers/s390/char/fs3270.c:344:
+		rc = put_user(fp->write_command,(char __user *) arg);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#683: FILE: drivers/s390/char/fs3270.c:344:
+		rc = put_user(fp->write_command,(char __user *) arg);
 		                               ^

CHECK:SPACING: No space is necessary after a cast
#692: FILE: drivers/s390/char/fs3270.c:353:
+		if (copy_to_user((char __user *) arg, &iocb,

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 28)
#730: FILE: drivers/s390/char/keyboard.c:365:
 			if (key_map) {
+			    kbd->key_maps[tmp.kb_table] = NULL;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#948: FILE: drivers/s390/char/tty3270.c:812:
+		tp->tty = tp->kbd->tty = NULL;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#959: FILE: drivers/s390/char/tty3270.c:952:
+		tp->tty = tp->kbd->tty = NULL;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1000: FILE: drivers/s390/char/vmlogrdr.c:89:
+static ssize_t vmlogrdr_read (struct file *filp, char __user *data,
                                            ^^^^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1000: FILE: drivers/s390/char/vmlogrdr.c:89:
+static ssize_t vmlogrdr_read (struct file *filp, char __user *data,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1001: FILE: drivers/s390/char/vmlogrdr.c:90:
+			      size_t count, loff_t * ppos);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1010: FILE: drivers/s390/char/vmlogrdr.c:518:
+vmlogrdr_read(struct file *filp, char __user *data, size_t count, loff_t * ppos)
                            ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1010: FILE: drivers/s390/char/vmlogrdr.c:518:
+vmlogrdr_read(struct file *filp, char __user *data, size_t count, loff_t * ppos)

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#1036: FILE: drivers/s390/cio/ccwgroup.c:322:
+	value = simple_strtoul(buf, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#1130: FILE: drivers/s390/cio/cio.h:91:
+	struct mutex reg_mutex;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1164: FILE: drivers/s390/cio/css.c:111:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1255: FILE: drivers/s390/cio/css.h:139:
+extern int css_sch_device_register(struct subchannel *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct subchannel *' should also have an identifier name
#1255: FILE: drivers/s390/cio/css.h:139:
+extern int css_sch_device_register(struct subchannel *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1256: FILE: drivers/s390/cio/css.h:140:
+extern void css_sch_device_unregister(struct subchannel *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct subchannel *' should also have an identifier name
#1256: FILE: drivers/s390/cio/css.h:140:
+extern void css_sch_device_unregister(struct subchannel *);

WARNING:SPLIT_STRING: quoted string split across lines
#1369: FILE: drivers/s390/cio/device_fsm.c:415:
+		CIO_MSG_EVENT(0, "SNID - pgid mismatch for device "
+			      "0.%x.%04x, can't pathgroup\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:SPACING: No space is necessary after a cast
#1492: FILE: drivers/s390/cio/device_pgid.c:56:
+		ccw->cda = (__u32) __pa (&cdev->private->pgid[i]);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1492: FILE: drivers/s390/cio/device_pgid.c:56:
+		ccw->cda = (__u32) __pa (&cdev->private->pgid[i]);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1511: FILE: drivers/s390/cio/device_pgid.c:87:
+	memset (&cdev->private->pgid, 0, sizeof (cdev->private->pgid));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1511: FILE: drivers/s390/cio/device_pgid.c:87:
+	memset (&cdev->private->pgid, 0, sizeof (cdev->private->pgid));

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1550: FILE: drivers/s390/cio/device_pgid.c:183:
+		/* Fall through. */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

CHECK:SPACING: No space is necessary after a cast
#1584: FILE: drivers/s390/cio/device_pgid.c:225:
+	ccw->cda = (__u32) __pa (&cdev->private->pgid[0]);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1584: FILE: drivers/s390/cio/device_pgid.c:225:
+	ccw->cda = (__u32) __pa (&cdev->private->pgid[0]);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1616: FILE: drivers/s390/cio/device_pgid.c:277:
+		ret = cio_start (sch, cdev->private->iccws,

WARNING:SPLIT_STRING: quoted string split across lines
#1626: FILE: drivers/s390/cio/device_pgid.c:287:
+	CIO_MSG_EVENT(2, "NOP - Device %04x on Subchannel "
+		      "0.%x.%04x, lpm %02X, became 'not operational'\n",

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1632: FILE: drivers/s390/cio/device_pgid.c:293:
+
+

WARNING:SPLIT_STRING: quoted string split across lines
#1656: FILE: drivers/s390/cio/device_pgid.c:348:
+		CIO_MSG_EVENT(2, "NOP - Device %04x on Subchannel 0.%x.%04x,"
+			      " lpm %02X, became 'not operational'\n",

CHECK:BRACES: braces {} should be used on all arms of this statement
#1674: FILE: drivers/s390/cio/device_pgid.c:370:
+		if (cdev->private->options.pgroup) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1678: FILE: drivers/s390/cio/device_pgid.c:374:
+		} else

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1897: FILE: drivers/s390/net/smsgiucv.c:171:
+	rc = iucv_connect (&smsg_pathid, 255, NULL, "*MSG    ", NULL, 0,

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1922: FILE: drivers/s390/s390mach.c:120:
+				DBG(KERN_INFO"solicited machine check for "

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

WARNING:SPLIT_STRING: quoted string split across lines
#1923: FILE: drivers/s390/s390mach.c:121:
+				DBG(KERN_INFO"solicited machine check for "
+				    "channel path %02X\n", crw[0].rsid);

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __noreturn over __attribute__((noreturn))
#2008: FILE: include/asm-s390/bug.h:8:
+static inline __attribute__((noreturn)) void __do_illegal_op(void)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2045: FILE: include/asm-s390/cio.h:279:
+extern void cio_reset_channel_paths(void);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#2080: FILE: include/asm-s390/irqflags.h:28:
+#define raw_local_save_flags(x)							\
+do {										\
+	typecheck(unsigned long, x);						\
+	__asm__ __volatile__("stosm 0(%1),0" : "=m" (x) : "a" (&x), "m" (x) );	\
+} while (0)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2083: FILE: include/asm-s390/irqflags.h:31:
+	__asm__ __volatile__("stosm 0(%1),0" : "=m" (x) : "a" (&x), "m" (x) );	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#2086: FILE: include/asm-s390/irqflags.h:34:
+#define raw_local_irq_restore(x)						\
+do {										\
+	typecheck(unsigned long, x);						\
+	__asm__ __volatile__("ssm   0(%0)" : : "a" (&x), "m" (x) : "memory");	\
+} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#2086: FILE: include/asm-s390/irqflags.h:34:
+#define raw_local_irq_restore(x)						\
+do {										\
+	typecheck(unsigned long, x);						\
+	__asm__ __volatile__("ssm   0(%0)" : : "a" (&x), "m" (x) : "memory");	\
+} while (0)

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.57872.commit.10c9afc730e76ebc114f9a7bec181d324295e7bc total: 4 errors, 35 warnings, 31 checks, 1686 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.57872.commit.10c9afc730e76ebc114f9a7bec181d324295e7bc has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
