WARNING:TYPO_SPELLING: 'thats' may be misspelled - perhaps 'that's'?
#55: 
thats just silly and should be fixed inside the Makefile.
^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'completly' may be misspelled - perhaps 'completely'?
#78: 
configurations which can just be wasted completly from most builds.
                                        ^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#122: FILE: Makefile:606:
+# Find undefined symbols inside modules, and add them to the linker $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#138: FILE: Makefile:622:
+^I;fi^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#167: FILE: Makefile:847:
+^I)^I^I^I^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#242: FILE: arch/i386/kernel/vmlinux.lds.S:41:
+  /* Kernel symbol table: Normal symbols */^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#243: FILE: arch/i386/kernel/vmlinux.lds.S:42:
+  __ksymtab         : AT(ADDR(__ksymtab) - LOAD_OFFSET) {^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#249: FILE: arch/i386/kernel/vmlinux.lds.S:48:
+  /* Kernel symbol table: GPL-only symbols */^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#387: FILE: include/linux/module.h:198:
+/* For garbage collection, each symbol has its own $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#388: FILE: include/linux/module.h:199:
+   __ksymtab and __kstrtab section, which are later merged into $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#388: FILE: include/linux/module.h:199:
+/* For garbage collection, each symbol has its own 
+   __ksymtab and __kstrtab section, which are later merged into 

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sym' - possible side-effects?
#391: FILE: include/linux/module.h:202:
+#define __EXPORT_SYMBOL(sym, sec)				\
+	extern typeof(sym) sym;					\
+	__CRC_SYMBOL(sym, sec)					\
+	static const char __kstrtab_##sym[]			\
+	__attribute__((section("__ksymtab_strings_" #sym)))	\
+	= MODULE_SYMBOL_PREFIX #sym;                    	\
+	static const struct kernel_symbol __ksymtab_##sym	\
+	__attribute_used__					\
+	__attribute__((section("___ksymtab_" #sym sec), unused))\
+	= { (unsigned long)&sym, __kstrtab_##sym }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sec' - possible side-effects?
#391: FILE: include/linux/module.h:202:
+#define __EXPORT_SYMBOL(sym, sec)				\
+	extern typeof(sym) sym;					\
+	__CRC_SYMBOL(sym, sec)					\
+	static const char __kstrtab_##sym[]			\
+	__attribute__((section("__ksymtab_strings_" #sym)))	\
+	= MODULE_SYMBOL_PREFIX #sym;                    	\
+	static const struct kernel_symbol __ksymtab_##sym	\
+	__attribute_used__					\
+	__attribute__((section("___ksymtab_" #sym sec), unused))\
+	= { (unsigned long)&sym, __kstrtab_##sym }

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("__ksymtab_strings_" #sym) over __attribute__((section("__ksymtab_strings_" #sym)))
#395: FILE: include/linux/module.h:206:
+	__attribute__((section("__ksymtab_strings_" #sym)))	\

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#396: FILE: include/linux/module.h:207:
+^I= MODULE_SYMBOL_PREFIX #sym;                    ^I\$

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#396: FILE: include/linux/module.h:207:
+	__attribute__((section("__ksymtab_strings_" #sym)))	\
+	= MODULE_SYMBOL_PREFIX #sym;                    	\

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("___ksymtab_" #sym sec) over __attribute__((section("___ksymtab_" #sym sec)))
#399: FILE: include/linux/module.h:210:
+	__attribute__((section("___ksymtab_" #sym sec), unused))\

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#400: FILE: include/linux/module.h:211:
+	__attribute__((section("___ksymtab_" #sym sec), unused))\
+	= { (unsigned long)&sym, __kstrtab_##sym }

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#408: 
new file mode 100755

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 2
#414: FILE: scripts/ksymbols-gen-keep.sh:2:
+#

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#416: FILE: scripts/ksymbols-gen-keep.sh:4:
+# which we do not want to be discarded into one linker script per $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#445: FILE: scripts/ksymbols-gen-keep.sh:33:
+cat keep.ksymstrings | while read line ; do ^I^I^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#446: FILE: scripts/ksymbols-gen-keep.sh:34:
+^Iecho KEEP\(*\("__ksymtab_strings_$line"\)\) ^I^I^I^I$

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#486: FILE: ld/ldmain.c:319:
+  link_info.print_gc_sections = FALSE;$

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#496: FILE: ld/lexsup.c:127:
+  OPTION_PRINT_GC_SECTIONS,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#504: FILE: ld/lexsup.c:374:
+  { {"print-gc-sections", no_argument, NULL, OPTION_PRINT_GC_SECTIONS},$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#505: FILE: ld/lexsup.c:375:
+    '\0', NULL, N_("Print removed unused sections"),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#506: FILE: ld/lexsup.c:376:
+    TWO_DASHES },$

WARNING:TABSTOP: Statements should start on a tabstop
#516: FILE: ld/lexsup.c:821:
+	  break;

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#527: FILE: include/bfdlink.h:328:
+  unsigned int print_gc_sections: 1;$

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:TABSTOP: Statements should start on a tabstop
#538: FILE: bfd/elflink.c:8981:
+	  if (info->print_gc_sections == TRUE)

CHECK:BOOL_COMPARISON: Using comparison to TRUE is error prone
#538: FILE: bfd/elflink.c:8981:
+	  if (info->print_gc_sections == TRUE)

Comparisons of A to true and false are better written
as A and !A.

See: https://lore.kernel.org/lkml/1365563834.27174.12.camel@joe-AO722/

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.62260.commit.c4724d5fa2d0e77b822c19189a8357023f1e80b2 total: 11 errors, 20 warnings, 5 checks, 383 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.62260.commit.c4724d5fa2d0e77b822c19189a8357023f1e80b2 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
