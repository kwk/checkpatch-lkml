ERROR:BAD_SIGN_OFF: Unrecognized email address: 'Takashi Sato sho@tnes.nec.co.jp'
#29: 
Signed-off-by: Takashi Sato sho@tnes.nec.co.jp

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#45: FILE: fs/ext3/dir.c:105:
+	unsigned tail = sb->s_blocksize;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#67: FILE: fs/ext3/dir.c:187:
 		while (!error && filp->f_pos < inode->i_size 
+		       && offset < tail) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#86: FILE: fs/ext3/namei.c:265:
+	unsigned tail = size;

CHECK:SPACING: No space is necessary after a cast
#93: FILE: fs/ext3/namei.c:271:
+	while ((char *) de < base + tail)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#101: FILE: fs/ext3/namei.c:675:
+	unsigned tail = size;

CHECK:SPACING: No space is necessary after a cast
#107: FILE: fs/ext3/namei.c:680:
+	while ((char *) de < base + tail)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#115: FILE: fs/ext3/namei.c:777:
+	unsigned tail = dir->i_sb->s_blocksize;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#119: FILE: fs/ext3/namei.c:780:
+	if (tail > EXT3_DIR_MAX_REC_LEN) {
+		tail = EXT3_DIR_MAX_REC_LEN;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#143: FILE: fs/ext3/namei.c:1184:
+		de->rec_len = cpu_to_le16(data1 + blocksize - (char *) de);

CHECK:SPACING: No space is necessary after a cast
#144: FILE: fs/ext3/namei.c:1185:
+		de2->rec_len = cpu_to_le16(data2 + blocksize - (char *) de2);

CHECK:SPACING: No space is necessary after a cast
#147: FILE: fs/ext3/namei.c:1188:
+							(char *) de);

CHECK:SPACING: No space is necessary after a cast
#149: FILE: fs/ext3/namei.c:1190:
+							(char *) de2);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#158: FILE: fs/ext3/namei.c:1238:
+	unsigned	tail = dir->i_sb->s_blocksize;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#160: FILE: fs/ext3/namei.c:1240:
+	if (tail > EXT3_DIR_MAX_REC_LEN) {
+		tail = EXT3_DIR_MAX_REC_LEN;
+	}

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#176: FILE: fs/ext3/namei.c:1360:
+	if (blocksize < EXT3_DIR_MAX_REC_LEN) {
[...]
+	} else {
[...]

CHECK:SPACING: No space is necessary after a cast
#177: FILE: fs/ext3/namei.c:1361:
+		len = ((char *) root) + blocksize - (char *) de;

CHECK:SPACING: No space is necessary after a cast
#179: FILE: fs/ext3/namei.c:1363:
+		len = ((char *) root) + EXT3_DIR_MAX_REC_LEN - (char *) de;

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#187: FILE: fs/ext3/namei.c:1370:
+	if (blocksize < EXT3_DIR_MAX_REC_LEN) {
[...]
+	} else {
[...]

CHECK:SPACING: No space is necessary after a cast
#188: FILE: fs/ext3/namei.c:1371:
+		de->rec_len = cpu_to_le16(data1 + blocksize - (char *) de);

CHECK:SPACING: No space is necessary after a cast
#190: FILE: fs/ext3/namei.c:1373:
+		de->rec_len = cpu_to_le16(data1 + EXT3_DIR_MAX_REC_LEN - (char *) de);

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#200: FILE: fs/ext3/namei.c:1464:
+	if (blocksize < EXT3_DIR_MAX_REC_LEN) {
[...]
+	} else {
[...]

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#226: FILE: fs/ext3/namei.c:1625:
+	unsigned tail = bh->b_size;

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#244: FILE: fs/ext3/namei.c:1808:
+	if (inode->i_sb->s_blocksize < EXT3_DIR_MAX_REC_LEN) {
[...]
+	} else {
[...]

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#245: FILE: fs/ext3/namei.c:1809:
+		de->rec_len = cpu_to_le16(inode->i_sb->s_blocksize-EXT3_DIR_REC_LEN(1));
 		                                                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#247: FILE: fs/ext3/namei.c:1811:
+		de->rec_len = cpu_to_le16(EXT3_DIR_MAX_REC_LEN-EXT3_DIR_REC_LEN(1));
 		                                              ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#257: FILE: fs/ext3/namei.c:1847:
+	struct super_block * sb = inode->i_sb;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#259: FILE: fs/ext3/namei.c:1849:
+	unsigned tail = sb->s_blocksize;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#269: FILE: fs/ext3/namei.c:1877:
+	if (offset == EXT3_DIR_MAX_REC_LEN) {
+		offset += sb->s_blocksize - EXT3_DIR_MAX_REC_LEN;
+	}

CHECK:SPACING: No space is necessary after a cast
#280: FILE: fs/ext3/namei.c:1887:
+			(void *) de >= (void *) (bh->b_data + tail)) {

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'offs' - possible side-effects?
#304: FILE: include/linux/ext3_fs.h:655:
+#define EXT3_DIR_ADJUST_TAIL_OFFS(offs, bsize) \
+	((((offs) & ((bsize) -1)) == EXT3_DIR_MAX_REC_LEN) ? \
+	((offs) + (bsize) - EXT3_DIR_MAX_REC_LEN):(offs))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bsize' - possible side-effects?
#304: FILE: include/linux/ext3_fs.h:655:
+#define EXT3_DIR_ADJUST_TAIL_OFFS(offs, bsize) \
+	((((offs) & ((bsize) -1)) == EXT3_DIR_MAX_REC_LEN) ? \
+	((offs) + (bsize) - EXT3_DIR_MAX_REC_LEN):(offs))

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#305: FILE: include/linux/ext3_fs.h:656:
+	((((offs) & ((bsize) -1)) == EXT3_DIR_MAX_REC_LEN) ? \
 	                     ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#306: FILE: include/linux/ext3_fs.h:657:
+	((offs) + (bsize) - EXT3_DIR_MAX_REC_LEN):(offs))
 	                                         ^

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.40127.commit.c5d2aef72083a728be500b058ac3e27fc31031ce total: 2 errors, 14 warnings, 18 checks, 252 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.40127.commit.c5d2aef72083a728be500b058ac3e27fc31031ce has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
