WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#41: FILE: mm/slabulator.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:SPACING: space required before the open parenthesis '('
#70: FILE: mm/slabulator.c:30:
+	for(order = max(0, fls(size - 1) - PAGE_SHIFT);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#82: FILE: mm/slabulator.c:42:
+
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#97: FILE: mm/slabulator.c:57:
+static struct page *rac_alloc(const struct page_allocator *a, int order,
+			gfp_t flags, int node)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#106: FILE: mm/slabulator.c:66:
+static void rac_free(const struct page_allocator *a, struct page *page,
+							int order)

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#121: FILE: mm/slabulator.c:81:
+int slabulator_up = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#123: FILE: mm/slabulator.c:83:
+int slab_is_available(void) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#136: FILE: mm/slabulator.c:96:
+struct slab_cache *kmem_cache_create(const char *name, size_t size,
+		size_t align, unsigned long flags,

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#149: FILE: mm/slabulator.c:109:
+	if (flags & (SLAB_MUST_HWCACHE_ALIGN|SLAB_HWCACHE_ALIGN))
 	                                    ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#194: FILE: mm/slabulator.c:154:
+	if (((realsize & (realsize - 1))==0) && !ctor && !dtor &&
 	                                ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#195: FILE: mm/slabulator.c:155:
+	if (((realsize & (realsize - 1))==0) && !ctor && !dtor &&
+		   !(flags & (SLAB_DESTROY_BY_RCU|SLAB_RECLAIM_ACCOUNT))) {

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#195: FILE: mm/slabulator.c:155:
+		   !(flags & (SLAB_DESTROY_BY_RCU|SLAB_RECLAIM_ACCOUNT))) {
 		                                 ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#198: FILE: mm/slabulator.c:158:
+		printk(KERN_CRIT "Merging slab %s size %d to kmalloc\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#199: FILE: mm/slabulator.c:159:
+		printk(KERN_CRIT "Merging slab %s size %d to kmalloc\n",
+				name, realsize);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#207: FILE: mm/slabulator.c:167:
+	printk(KERN_CRIT "Creating slab %s size=%ld realsize=%d "

WARNING:SPLIT_STRING: quoted string split across lines
#208: FILE: mm/slabulator.c:168:
+	printk(KERN_CRIT "Creating slab %s size=%ld realsize=%d "
+			"order=%d offset=%d flags=%lx\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:TYPO_SPELLING: 'constuctors' may be misspelled - perhaps 'constructors'?
#215: FILE: mm/slabulator.c:175:
+	 * Now deal with constuctors and destructors. We need to know the
 	                 ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#222: FILE: mm/slabulator.c:182:
+			ctor_and_dtor_for_page_allocator(s->page_alloc,
+				realsize, s,

WARNING:SPLIT_STRING: quoted string split across lines
#231: FILE: mm/slabulator.c:191:
+		panic("Cannot create slab %s size=%ld realsize=%d "
+			"order=%d offset=%d flags=%lx\n",

CHECK:LINE_SPACING: Please don't use multiple blank lines
#234: FILE: mm/slabulator.c:194:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#254: FILE: include/linux/slabulator.h:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#289: FILE: include/linux/slabulator.h:36:
+#define SLAB_RECLAIM_ACCOUNT	0x00020000UL	/* track pages allocated to indicate
+						   what is reclaimable later*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#289: FILE: include/linux/slabulator.h:36:
+						   what is reclaimable later*/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#299: FILE: include/linux/slabulator.h:46:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#304: FILE: include/linux/slabulator.h:51:
+extern int slab_is_available(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#305: FILE: include/linux/slabulator.h:52:
+extern void kmem_cache_init(void);

WARNING:REPEATED_WORD: Possible repeated word: 'be'
#316: FILE: include/linux/slabulator.h:63:
+/* And this really would be be placed with the reclaim code ? */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#319: FILE: include/linux/slabulator.h:66:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#320: FILE: include/linux/slabulator.h:67:
+extern struct slab_cache *kmem_cache_create(const char *name, size_t size, size_t align,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#321: FILE: include/linux/slabulator.h:68:
+extern struct slab_cache *kmem_cache_create(const char *name, size_t size, size_t align,
+	unsigned long flags,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#341: FILE: include/linux/slabulator.h:88:
+static inline void *kmem_cache_alloc_node(struct slab_cache *s,
+					gfp_t flags, int node)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#346: FILE: include/linux/slabulator.h:93:
+extern void *kmem_cache_zalloc(struct slab_cache *s, gfp_t flags);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#381: FILE: include/linux/slabulator.h:128:
+
+

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.47438.commit.558c71ff8e5d121c5af494541d28f4f8fb34b050 total: 4 errors, 10 warnings, 19 checks, 385 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.47438.commit.558c71ff8e5d121c5af494541d28f4f8fb34b050 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
