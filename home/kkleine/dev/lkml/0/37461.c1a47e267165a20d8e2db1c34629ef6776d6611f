WARNING:SPACING: space prohibited between function name and open parenthesis '('
#62: FILE: drivers/base/dmapool.c:129:
+	if (!(retval = kzalloc (sizeof *retval, SLAB_KERNEL)))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#62: FILE: drivers/base/dmapool.c:129:
+	if (!(retval = kzalloc (sizeof *retval, SLAB_KERNEL)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:SIZEOF_PARENTHESIS: sizeof *retval should be sizeof(*retval)
#62: FILE: drivers/base/dmapool.c:129:
+	if (!(retval = kzalloc (sizeof *retval, SLAB_KERNEL)))

CHECK:SPACING: No space is necessary after a cast
#71: FILE: drivers/base/dmapool.c:167:
+	page = (struct dma_page *) kzalloc (mapsize + sizeof *page, mem_flags);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#71: FILE: drivers/base/dmapool.c:167:
+	page = (struct dma_page *) kzalloc (mapsize + sizeof *page, mem_flags);

WARNING:SIZEOF_PARENTHESIS: sizeof *page should be sizeof(*page)
#71: FILE: drivers/base/dmapool.c:167:
+	page = (struct dma_page *) kzalloc (mapsize + sizeof *page, mem_flags);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#71: FILE: drivers/base/dmapool.c:167:
+	page = (struct dma_page *) kzalloc (mapsize + sizeof *page, mem_flags);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#84: FILE: drivers/base/firmware_class.c:549:
+	struct firmware_work *fw_work = kzalloc(sizeof (struct firmware_work),

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*fw_work)...) over kzalloc(sizeof (struct firmware_work)...)
#84: FILE: drivers/base/firmware_class.c:549:
+	struct firmware_work *fw_work = kzalloc(sizeof (struct firmware_work),

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*p)...) over kzalloc(sizeof(struct probe)...)
#97: FILE: drivers/base/map.c:44:
+	p = kzalloc(sizeof(struct probe) * n, GFP_KERNEL);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#97: FILE: drivers/base/map.c:44:
+	p = kzalloc(sizeof(struct probe) * n, GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*p)...) over kzalloc(sizeof(struct kobj_map)...)
#106: FILE: drivers/base/map.c:138:
+	struct kobj_map *p = kzalloc(sizeof(struct kobj_map), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*r)...) over kzalloc(sizeof(struct resource)...)
#119: FILE: drivers/base/platform.c:195:
+	r = kzalloc(sizeof(struct resource) * num, GFP_KERNEL);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#119: FILE: drivers/base/platform.c:195:
+	r = kzalloc(sizeof(struct resource) * num, GFP_KERNEL);

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.37461.commit.c1a47e267165a20d8e2db1c34629ef6776d6611f total: 1 errors, 8 warnings, 5 checks, 64 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.37461.commit.c1a47e267165a20d8e2db1c34629ef6776d6611f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
