WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#50: FILE: fs/gfs2/bmap.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#91: FILE: fs/gfs2/bmap.c:42:
+			     uint64_t *bottom, unsigned int height,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#110: FILE: fs/gfs2/bmap.c:61:
+			       uint64_t block, struct page *page)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sdp->sd_args.ar_data == GFS2_DATA_ORDERED'
#146: FILE: fs/gfs2/bmap.c:97:
+	if ((sdp->sd_args.ar_data == GFS2_DATA_ORDERED) || gfs2_is_jdata(ip))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#173: FILE: fs/gfs2/bmap.c:124:
+	uint64_t block = 0;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#182: FILE: fs/gfs2/bmap.c:133:
+^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#185: FILE: fs/gfs2/bmap.c:136:
+		/* Get a free block, fill it with the stuffed data,
+		   and write it out to disk */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#185: FILE: fs/gfs2/bmap.c:136:
+		   and write it out to disk */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#247: FILE: fs/gfs2/bmap.c:198:
+	uint64_t *arr;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#277: FILE: fs/gfs2/bmap.c:228:
+static int build_height(struct inode *inode, unsigned height)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#280: FILE: fs/gfs2/bmap.c:231:
+	unsigned new_height = height - ip->i_di.di_height;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#286: FILE: fs/gfs2/bmap.c:237:
+	unsigned n;

ERROR:SPACING: space required before the open parenthesis '('
#295: FILE: fs/gfs2/bmap.c:246:
+	for(n = 0; n < new_height; n++) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#300: FILE: fs/gfs2/bmap.c:251:
+^I$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#304: FILE: fs/gfs2/bmap.c:255:
+		for(; n < new_height-1; n++) {
 		                    ^

ERROR:SPACING: space required before the open parenthesis '('
#304: FILE: fs/gfs2/bmap.c:255:
+		for(; n < new_height-1; n++) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#311: FILE: fs/gfs2/bmap.c:262:
+			*bp = cpu_to_be64(blocks[n+1]->b_blocknr);
 			                          ^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#394: FILE: fs/gfs2/bmap.c:345:
+	uint64_t b = block;

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#400: FILE: fs/gfs2/bmap.c:351:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#421: FILE: fs/gfs2/bmap.c:372:
+	if (ptr + 1 == (u64*)(bh->b_data + bh->b_size))

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#447: FILE: fs/gfs2/bmap.c:398:
+	uint64_t *ptr = metapointer(bh, &boundary, height, mp);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#533: FILE: fs/gfs2/bmap.c:484:
+		error = gfs2_meta_indirect_buffer(ip, x+1, *dblock, *new, &bh);
 		                                       ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#541: FILE: fs/gfs2/bmap.c:492:
+		struct buffer_head *dibh;
+		error = gfs2_meta_inode_buffer(ip, &dibh);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#553: FILE: fs/gfs2/bmap.c:504:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#557: FILE: fs/gfs2/bmap.c:508:
+	struct gfs2_inode *ip = GFS2_I(inode);
+	if (create)

WARNING:LINE_SPACING: Missing a blank line after declarations
#566: FILE: fs/gfs2/bmap.c:517:
+	struct gfs2_inode *ip = GFS2_I(inode);
+	if (create)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#589: FILE: fs/gfs2/bmap.c:540:
+int gfs2_extent_map(struct inode *inode, u64 lblock, int *new, u64 *dblock, unsigned *extlen)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#598: FILE: fs/gfs2/bmap.c:549:
+	BUG_ON(!extlen);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#599: FILE: fs/gfs2/bmap.c:550:
+	BUG_ON(!dblock);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#600: FILE: fs/gfs2/bmap.c:551:
+	BUG_ON(!new);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#610: FILE: fs/gfs2/bmap.c:561:
+		unsigned end_of_metadata = ip->i_di.di_height - 1;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#611: FILE: fs/gfs2/bmap.c:562:
+^I^I$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#648: FILE: fs/gfs2/bmap.c:599:
+			  uint64_t block, int first, block_call_t bc,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#653: FILE: fs/gfs2/bmap.c:604:
+	uint64_t *top, *bottom;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#654: FILE: fs/gfs2/bmap.c:605:
+	uint64_t bn;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#722: FILE: fs/gfs2/bmap.c:673:
+	uint64_t bn, bstart;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#723: FILE: fs/gfs2/bmap.c:674:
+	uint32_t blen;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#724: FILE: fs/gfs2/bmap.c:675:
+	uint64_t *p;

CHECK:BRACES: braces {} should be used on all arms of this statement
#760: FILE: fs/gfs2/bmap.c:711:
+		if (bstart + blen == bn)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#762: FILE: fs/gfs2/bmap.c:713:
+		else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#780: FILE: fs/gfs2/bmap.c:731:
+		struct gfs2_rgrpd *rgd;
+		rgd = rlist.rl_ghs[x].gh_gl->gl_object;

CHECK:BRACES: braces {} should be used on all arms of this statement
#808: FILE: fs/gfs2/bmap.c:759:
+		if (bstart + blen == bn)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#810: FILE: fs/gfs2/bmap.c:761:
+		else {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#834: FILE: fs/gfs2/bmap.c:785:
+	ip->i_di.di_mtime = ip->i_di.di_ctime = get_seconds();

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#889: FILE: fs/gfs2/bmap.c:840:
+	error = gfs2_trans_begin(sdp,
+			sdp->sd_max_height + al->al_rgd->rd_ri.ri_length +

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#912: FILE: fs/gfs2/bmap.c:863:
+	ip->i_di.di_mtime = ip->i_di.di_ctime = get_seconds();

CHECK:LINE_SPACING: Please don't use multiple blank lines
#937: FILE: fs/gfs2/bmap.c:888:
+
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#950: FILE: fs/gfs2/bmap.c:901:
+	unsigned offset = from & (PAGE_CACHE_SIZE-1);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#950: FILE: fs/gfs2/bmap.c:901:
+	unsigned offset = from & (PAGE_CACHE_SIZE-1);
 	                                         ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#951: FILE: fs/gfs2/bmap.c:902:
+	unsigned blocksize, iblock, length, pos;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1031: FILE: fs/gfs2/bmap.c:982:
+		ip->i_di.di_mtime = ip->i_di.di_ctime = get_seconds();

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1043: FILE: fs/gfs2/bmap.c:994:
+			ip->i_di.di_mtime = ip->i_di.di_ctime = get_seconds();

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1061: FILE: fs/gfs2/bmap.c:1012:
+	uint64_t lblock;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1079: FILE: fs/gfs2/bmap.c:1030:
+		struct strip_mine sm;
+		sm.sm_first = !!size;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1117: FILE: fs/gfs2/bmap.c:1068:
+	ip->i_di.di_mtime = ip->i_di.di_ctime = get_seconds();

WARNING:LINE_SPACING: Missing a blank line after declarations
#1189: FILE: fs/gfs2/bmap.c:1140:
+	int error;
+	error = trunc_dealloc(ip, ip->i_di.di_size);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1243: FILE: fs/gfs2/bmap.c:1194:
+	uint64_t lblock, lblock_stop, dblock;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1244: FILE: fs/gfs2/bmap.c:1195:
+	uint32_t extlen;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1262: FILE: fs/gfs2/bmap.c:1213:
+		unsigned int bsize = sdp->sd_jbsize;
+		lblock = offset;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1268: FILE: fs/gfs2/bmap.c:1219:
+		unsigned int shift = sdp->sd_sb.sb_bsize_shift;
+		lblock = offset >> shift;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1289: FILE: fs/gfs2/bmap.h:1:
+/*

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#1303: FILE: fs/gfs2/bmap.h:15:
+int gfs2_extent_map(struct inode *inode, u64 lblock, int *new, u64 *dblock, unsigned *extlen);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1319: FILE: fs/gfs2/format.h:1:
+/*

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1331: FILE: fs/gfs2/format.h:13:
+static const uint32_t gfs2_old_fs_formats[] = {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1335: FILE: fs/gfs2/format.h:17:
+static const uint32_t gfs2_old_multihost_formats[] = {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1343: FILE: fs/gfs2/glops.c:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1372: FILE: fs/gfs2/glops.c:30:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1450: FILE: fs/gfs2/glops.c:108:
+	/* Put back any errors cleared by filemap_fdatawait()
+	   so they can be caught by someone who can pass them

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1451: FILE: fs/gfs2/glops.c:109:
+	   up to user space. */

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1458: FILE: fs/gfs2/glops.c:116:
+
+}

WARNING:REPEATED_WORD: Possible repeated word: 'not'
#1467: FILE: fs/gfs2/glops.c:125:
+ * to disk all dirty buffers/pages relating to this glock, and must not
+ * not return to caller to demote/unlock the glock until I/O is complete.

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1482: FILE: fs/gfs2/glops.c:140:
+
+}

CHECK:BRACES: braces {} should be used on all arms of this statement
#1565: FILE: fs/gfs2/glops.c:223:
+		if (meta && data) {
[...]
+		} else if (meta) {
[...]
+		} else if (data)
[...]

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1580: FILE: fs/gfs2/glops.c:238:
+
+}

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'gl->gl_state == LM_ST_EXCLUSIVE'
#1648: FILE: fs/gfs2/glops.c:306:
+	if ((ip->i_di.di_flags & GFS2_DIF_TRUNC_IN_PROG) &&
+	    (gl->gl_state == LM_ST_EXCLUSIVE) &&
+	    (gh->gh_flags & GL_LOCAL_EXCL))

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1707: FILE: fs/gfs2/glops.c:365:
+	iput(&ip->i_inode);
 	^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1908: FILE: fs/gfs2/glops.h:1:
+/*

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1934: FILE: fs/gfs2/inode.c:1:
+/*

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2035: FILE: fs/gfs2/inode.c:102:
+	gfs2_assert_withdraw(GFS2_SB(inode),
+		(ip->i_di.di_mode & S_IFMT) == (inode->i_mode & S_IFMT));

WARNING:LINE_SPACING: Missing a blank line after declarations
#2095: FILE: fs/gfs2/inode.c:162:
+		umode_t mode = DT2IF(type);
+		inode->u.generic_ip = ip;

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#2136: FILE: fs/gfs2/inode.c:203:
+	iput(inode);
 	^^^^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2247: FILE: fs/gfs2/inode.c:314:
+	uint32_t nlink;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2250: FILE: fs/gfs2/inode.c:317:
+	BUG_ON(ip->i_di.di_nlink != ip->i_inode.i_nlink);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2254: FILE: fs/gfs2/inode.c:321:
+	/* If we are reducing the nlink count, but the new value ends up being
+	   bigger than the old one, we must have underflowed. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2254: FILE: fs/gfs2/inode.c:321:
+	   bigger than the old one, we must have underflowed. */

WARNING:LINE_SPACING: Missing a blank line after declarations
#2301: FILE: fs/gfs2/inode.c:368:
+	struct qstr qstr;
+	gfs2_str2qstr(&qstr, name);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2305: FILE: fs/gfs2/inode.c:372:
+
+

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#2320: FILE: fs/gfs2/inode.c:387:
+			   int is_root, struct nameidata *nd)
 			                                  ^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2321: FILE: fs/gfs2/inode.c:388:
+^I^I $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2426: FILE: fs/gfs2/inode.c:493:
+^I$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#2431: FILE: fs/gfs2/inode.c:498:
+		uint64_t x, y;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2438: FILE: fs/gfs2/inode.c:505:
+		x = y = be64_to_cpu(x);

CHECK:BRACES: braces {} should be used on all arms of this statement
#2524: FILE: fs/gfs2/inode.c:591:
+	if (GFS2_SB(&dip->i_inode)->sd_args.ar_suiddir &&
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2531: FILE: fs/gfs2/inode.c:598:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#2534: FILE: fs/gfs2/inode.c:601:
+	if (dip->i_di.di_mode & S_ISGID) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2538: FILE: fs/gfs2/inode.c:605:
+	} else

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2604: FILE: fs/gfs2/inode.c:671:
+	di->di_atime = di->di_mtime = di->di_ctime = cpu_to_be64(get_seconds());

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2605: FILE: fs/gfs2/inode.c:672:
+	di->di_major = di->di_minor = cpu_to_be32(0);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2606: FILE: fs/gfs2/inode.c:673:
+	di->di_goal_meta = di->di_goal_data = cpu_to_be64(inum->no_addr);

CHECK:SPACING: spaces preferred around that '+' (ctx:WxV)
#2662: FILE: fs/gfs2/inode.c:729:
+	gfs2_quota_change(dip, +1, uid, gid);
 	                       ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2687: FILE: fs/gfs2/inode.c:754:
+	error = alloc_required = gfs2_diradd_alloc_required(&dip->i_inode, name);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2704: FILE: fs/gfs2/inode.c:771:
+^I^I^I^I^I 2 * RES_DINODE + $

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2795: FILE: fs/gfs2/inode.c:862:
+		if (error) {
+			return ERR_PTR(error);
+		}

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#2842: FILE: fs/gfs2/inode.c:909:
+	iput(inode);
 	^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#2986: FILE: fs/gfs2/inode.c:1053:
+		iput(dir);
 		^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#2990: FILE: fs/gfs2/inode.c:1057:
+	iput(dir);
 	^^^^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's64' over 'int64_t'
#3067: FILE: fs/gfs2/inode.c:1134:
+	int64_t curtime, quantum = gfs2_tune_get(sdp, gt_atime_quantum);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3098: FILE: fs/gfs2/inode.c:1165:
+		/* Verify that atime hasn't been updated while we were
+		   trying to get exclusive lock. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3098: FILE: fs/gfs2/inode.c:1165:
+		   trying to get exclusive lock. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3124: FILE: fs/gfs2/inode.c:1191:
+		/* If someone else has asked for the glock,
+		   unlock and let them have it. Then reacquire

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3125: FILE: fs/gfs2/inode.c:1192:
+		   in the original state. */

CHECK:BRACES: braces {} should be used on all arms of this statement
#3160: FILE: fs/gfs2/inode.c:1227:
+	if (a->ln_number > b->ln_number)
[...]
+	else if (a->ln_number < b->ln_number)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#3164: FILE: fs/gfs2/inode.c:1231:
+	else {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#3211: FILE: fs/gfs2/inode.c:1278:
+	sort(p, num_gh, sizeof(struct gfs2_holder *), glock_compare_atime,NULL);
 	                                                                 ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3232: FILE: fs/gfs2/inode.c:1299:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3281: FILE: fs/gfs2/inode.h:1:
+/*

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3310: FILE: fs/gfs2/inode.h:30:
+struct inode *gfs2_inode_lookup(struct super_block *sb, struct gfs2_inum *inum, unsigned type);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3317: FILE: fs/gfs2/inode.h:37:
+struct inode *gfs2_lookupi(struct inode *dir, const struct qstr *name, $

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#3318: FILE: fs/gfs2/inode.h:38:
+			   int is_root, struct nameidata *nd);
 			                                  ^^

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.42290.commit.073bcb6f88bbde4a71b0728c4dabcc64b1a3504a total: 11 errors, 49 warnings, 59 checks, 3269 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.42290.commit.073bcb6f88bbde4a71b0728c4dabcc64b1a3504a has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
