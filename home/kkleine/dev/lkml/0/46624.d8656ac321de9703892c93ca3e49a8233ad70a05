WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#38: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#43: FILE: drivers/infiniband/hw/ehca/ehca_iverbs.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#94: FILE: drivers/infiniband/hw/ehca/ehca_iverbs.h:52:
+int ehca_query_pkey(struct ib_device *ibdev, u8 port, u16 index, u16 * pkey);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#167: FILE: drivers/infiniband/hw/ehca/ehca_iverbs.h:125:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#215: FILE: drivers/infiniband/hw/ehca/ehca_iverbs.h:173:
+int ehca_mmap_nopage(u64 foffset,u64 length,void **mapped,
                                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#215: FILE: drivers/infiniband/hw/ehca/ehca_iverbs.h:173:
+int ehca_mmap_nopage(u64 foffset,u64 length,void **mapped,
                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#218: FILE: drivers/infiniband/hw/ehca/ehca_iverbs.h:176:
+int ehca_mmap_register(u64 physical,void **mapped,
                                    ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#230: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#272: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:43:
+
+

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#292: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:63:
+#include <asm/io.h>

WARNING:INCLUDE_LINUX: Use #include <linux/pgtable.h> instead of <asm/pgtable.h>
#293: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:64:
+#include <asm/pgtable.h>

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'str4' - possible side-effects?
#297: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:68:
+#define EDEB_ID_TO_U32(str4) (str4[3] | (str4[2] << 8) | (str4[1] << 16) | \
+			      (str4[0] << 24))

WARNING:BRACES: braces {} are not necessary for single statement blocks
#384: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:155:
+	if ((filenr - 1) > sizeof(ehca_edeb_mask)) {
+		filenr = 0;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#388: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:159:
+	if (filenr == 0) {
+		filter_level = 9;
+	} /* default */

WARNING:BRACES: braces {} are not necessary for single statement blocks
#392: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:163:
+	if (filter_level <= level) {
+		return ret | 0x100000000L; /* this is the flag to not trace */
+	}

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#412: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:183:
+  0x100000000L) == 0)$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#414: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:185:
+#define EDEB_P_GENERIC(level,idstring,format,args...) \
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#414: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:185:
+#define EDEB_P_GENERIC(level,idstring,format,args...) \
                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#414: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:185:
+#define EDEB_P_GENERIC(level,idstring,format,args...) \
                                             ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#419: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:190:
+		printk("PU%04x %08x:%s " idstring " "format "\n",	\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#426: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:197:
+#define EDEB_P_GENERIC(level,idstring,format,args...) \
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#426: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:197:
+#define EDEB_P_GENERIC(level,idstring,format,args...) \
                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#426: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:197:
+#define EDEB_P_GENERIC(level,idstring,format,args...) \
                                             ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#431: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:202:
+		printk("%08x:%s " idstring " "format "\n",	\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#441: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:212:
+#define EDEB_P_GENERIC(level,idstring,format,args...) \
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#441: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:212:
+#define EDEB_P_GENERIC(level,idstring,format,args...) \
                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#441: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:212:
+#define EDEB_P_GENERIC(level,idstring,format,args...) \
                                             ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#443: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:214:
+	printk("%s " idstring " "format "\n",	\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#455: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:226:
+#define EDEB(level,format,args...) \
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#455: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:226:
+#define EDEB(level,format,args...) \
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#456: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:227:
+	EDEB_P_GENERIC(level,"",format,##args)
 	                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#456: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:227:
+	EDEB_P_GENERIC(level,"",format,##args)
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#456: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:227:
+	EDEB_P_GENERIC(level,"",format,##args)
 	                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#457: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:228:
+#define EDEB_ERR(level,format,args...) \
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#457: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:228:
+#define EDEB_ERR(level,format,args...) \
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#458: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:229:
+	EDEB_P_GENERIC(level,"HCAD_ERROR ",format,##args)
 	                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#458: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:229:
+	EDEB_P_GENERIC(level,"HCAD_ERROR ",format,##args)
 	                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#458: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:229:
+	EDEB_P_GENERIC(level,"HCAD_ERROR ",format,##args)
 	                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#459: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:230:
+#define EDEB_EN(level,format,args...) \
                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#459: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:230:
+#define EDEB_EN(level,format,args...) \
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#460: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:231:
+	EDEB_P_GENERIC(level,">>>",format,##args)
 	                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#460: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:231:
+	EDEB_P_GENERIC(level,">>>",format,##args)
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#460: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:231:
+	EDEB_P_GENERIC(level,">>>",format,##args)
 	                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#461: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:232:
+#define EDEB_EX(level,format,args...) \
                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#461: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:232:
+#define EDEB_EX(level,format,args...) \
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#462: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:233:
+	EDEB_P_GENERIC(level,"<<<",format,##args)
 	                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#462: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:233:
+	EDEB_P_GENERIC(level,"<<<",format,##args)
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#462: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:233:
+	EDEB_P_GENERIC(level,"<<<",format,##args)
 	                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#469: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:240:
+#define EDEB_DMP(level,adr,len,format,args...) \
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#469: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:240:
+#define EDEB_DMP(level,adr,len,format,args...) \
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#469: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:240:
+#define EDEB_DMP(level,adr,len,format,args...) \
                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#469: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:240:
+#define EDEB_DMP(level,adr,len,format,args...) \
                                      ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#473: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:244:
+		unsigned char *deb = (unsigned char*)(adr);	\

ERROR:CODE_INDENT: code indent should use tabs where possible
#475: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:246:
+^I^I        EDEB(level, format " adr=%p ofs=%04x %016lx %016lx", \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: space required after that ',' (ctx:VxV)
#483: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:254:
+#define EHCA_BMASK(pos,length) (((pos)<<16)+(length))
                       ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#483: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:254:
+#define EHCA_BMASK(pos,length) (((pos)<<16)+(length))
                                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#483: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:254:
+#define EHCA_BMASK(pos,length) (((pos)<<16)+(length))
                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#486: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:257:
+#define EHCA_BMASK_IBM(from,to) (((63-to)<<16)+((to)-(from)+1))
                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#486: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:257:
+#define EHCA_BMASK_IBM(from,to) (((63-to)<<16)+((to)-(from)+1))
                                      ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#486: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:257:
+#define EHCA_BMASK_IBM(from,to) (((63-to)<<16)+((to)-(from)+1))
                                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#486: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:257:
+#define EHCA_BMASK_IBM(from,to) (((63-to)<<16)+((to)-(from)+1))
                                               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#486: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:257:
+#define EHCA_BMASK_IBM(from,to) (((63-to)<<16)+((to)-(from)+1))
                                                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#486: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:257:
+#define EHCA_BMASK_IBM(from,to) (((63-to)<<16)+((to)-(from)+1))
                                                            ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'to' - possible side-effects?
#486: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:257:
+#define EHCA_BMASK_IBM(from,to) (((63-to)<<16)+((to)-(from)+1))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'to' may be better as '(to)' to avoid precedence issues
#486: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:257:
+#define EHCA_BMASK_IBM(from,to) (((63-to)<<16)+((to)-(from)+1))

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#489: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:260:
+#define EHCA_BMASK_SHIFTPOS(mask) (((mask)>>16)&0xffff)
                                           ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#489: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:260:
+#define EHCA_BMASK_SHIFTPOS(mask) (((mask)>>16)&0xffff)
                                                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#492: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:263:
+#define EHCA_BMASK_MASK(mask) (0xffffffffffffffffULL >> ((64-(mask))&0xffff))
                                                             ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#492: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:263:
+#define EHCA_BMASK_MASK(mask) (0xffffffffffffffffULL >> ((64-(mask))&0xffff))
                                                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#500: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:271:
+#define EHCA_BMASK_SET(mask,value) \
                            ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mask' - possible side-effects?
#500: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:271:
+#define EHCA_BMASK_SET(mask,value) \
+	((EHCA_BMASK_MASK(mask) & ((u64)(value)))<<EHCA_BMASK_SHIFTPOS(mask))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#501: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:272:
+	((EHCA_BMASK_MASK(mask) & ((u64)(value)))<<EHCA_BMASK_SHIFTPOS(mask))
 	                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#506: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:277:
+#define EHCA_BMASK_GET(mask,value) \
                            ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mask' - possible side-effects?
#506: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:277:
+#define EHCA_BMASK_GET(mask,value) \
+	( EHCA_BMASK_MASK(mask)& (((u64)(value))>>EHCA_BMASK_SHIFTPOS(mask)))

CHECK:SPACING: spaces preferred around that '&' (ctx:VxW)
#507: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:278:
+	( EHCA_BMASK_MASK(mask)& (((u64)(value))>>EHCA_BMASK_SHIFTPOS(mask)))
 	                       ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#507: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:278:
+	( EHCA_BMASK_MASK(mask)& (((u64)(value))>>EHCA_BMASK_SHIFTPOS(mask)))
 	                                        ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#507: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:278:
+	( EHCA_BMASK_MASK(mask)& (((u64)(value))>>EHCA_BMASK_SHIFTPOS(mask)))

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#512: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:283:
+#define EHCA_CHECK_ADR_P(adr)					\
+	if (unlikely(adr == 0)) {				\
+		EDEB_ERR(4, "adr=%p check failed line %i", adr,	\
+			 __LINE__);				\
+		return ERR_PTR(-EFAULT); }

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'adr' - possible side-effects?
#512: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:283:
+#define EHCA_CHECK_ADR_P(adr)					\
+	if (unlikely(adr == 0)) {				\
+		EDEB_ERR(4, "adr=%p check failed line %i", adr,	\
+			 __LINE__);				\
+		return ERR_PTR(-EFAULT); }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'adr' may be better as '(adr)' to avoid precedence issues
#512: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:283:
+#define EHCA_CHECK_ADR_P(adr)					\
+	if (unlikely(adr == 0)) {				\
+		EDEB_ERR(4, "adr=%p check failed line %i", adr,	\
+			 __LINE__);				\
+		return ERR_PTR(-EFAULT); }

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#512: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:283:
+#define EHCA_CHECK_ADR_P(adr)					\
+	if (unlikely(adr == 0)) {				\
+		EDEB_ERR(4, "adr=%p check failed line %i", adr,	\
+			 __LINE__);				\
+		return ERR_PTR(-EFAULT); }

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#518: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:289:
+#define EHCA_CHECK_ADR(adr)					\
+	if (unlikely(adr == 0)) {				\
+		EDEB_ERR(4, "adr=%p check failed line %i", adr,	\
+			 __LINE__);				\
+		return -EFAULT; }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'adr' - possible side-effects?
#518: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:289:
+#define EHCA_CHECK_ADR(adr)					\
+	if (unlikely(adr == 0)) {				\
+		EDEB_ERR(4, "adr=%p check failed line %i", adr,	\
+			 __LINE__);				\
+		return -EFAULT; }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'adr' may be better as '(adr)' to avoid precedence issues
#518: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:289:
+#define EHCA_CHECK_ADR(adr)					\
+	if (unlikely(adr == 0)) {				\
+		EDEB_ERR(4, "adr=%p check failed line %i", adr,	\
+			 __LINE__);				\
+		return -EFAULT; }

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#518: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:289:
+#define EHCA_CHECK_ADR(adr)					\
+	if (unlikely(adr == 0)) {				\
+		EDEB_ERR(4, "adr=%p check failed line %i", adr,	\
+			 __LINE__);				\
+		return -EFAULT; }

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#524: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:295:
+#define EHCA_CHECK_DEVICE_P(device)				\
+	if (unlikely(device == 0)) {				\
+		EDEB_ERR(4, "device=%p check failed", device);	\
+		return ERR_PTR(-EFAULT); }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'device' - possible side-effects?
#524: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:295:
+#define EHCA_CHECK_DEVICE_P(device)				\
+	if (unlikely(device == 0)) {				\
+		EDEB_ERR(4, "device=%p check failed", device);	\
+		return ERR_PTR(-EFAULT); }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'device' may be better as '(device)' to avoid precedence issues
#524: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:295:
+#define EHCA_CHECK_DEVICE_P(device)				\
+	if (unlikely(device == 0)) {				\
+		EDEB_ERR(4, "device=%p check failed", device);	\
+		return ERR_PTR(-EFAULT); }

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#524: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:295:
+#define EHCA_CHECK_DEVICE_P(device)				\
+	if (unlikely(device == 0)) {				\
+		EDEB_ERR(4, "device=%p check failed", device);	\
+		return ERR_PTR(-EFAULT); }

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#529: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:300:
+#define EHCA_CHECK_DEVICE(device)				\
+	if (unlikely(device == 0)) {				\
+		EDEB_ERR(4, "device=%p check failed", device);	\
+		return -EFAULT; }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'device' - possible side-effects?
#529: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:300:
+#define EHCA_CHECK_DEVICE(device)				\
+	if (unlikely(device == 0)) {				\
+		EDEB_ERR(4, "device=%p check failed", device);	\
+		return -EFAULT; }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'device' may be better as '(device)' to avoid precedence issues
#529: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:300:
+#define EHCA_CHECK_DEVICE(device)				\
+	if (unlikely(device == 0)) {				\
+		EDEB_ERR(4, "device=%p check failed", device);	\
+		return -EFAULT; }

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#529: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:300:
+#define EHCA_CHECK_DEVICE(device)				\
+	if (unlikely(device == 0)) {				\
+		EDEB_ERR(4, "device=%p check failed", device);	\
+		return -EFAULT; }

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#534: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:305:
+#define EHCA_CHECK_PD(pd)				\
+	if (unlikely(pd == 0)) {			\
+		EDEB_ERR(4, "pd=%p check failed", pd);	\
+		return -EFAULT; }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pd' - possible side-effects?
#534: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:305:
+#define EHCA_CHECK_PD(pd)				\
+	if (unlikely(pd == 0)) {			\
+		EDEB_ERR(4, "pd=%p check failed", pd);	\
+		return -EFAULT; }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pd' may be better as '(pd)' to avoid precedence issues
#534: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:305:
+#define EHCA_CHECK_PD(pd)				\
+	if (unlikely(pd == 0)) {			\
+		EDEB_ERR(4, "pd=%p check failed", pd);	\
+		return -EFAULT; }

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#534: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:305:
+#define EHCA_CHECK_PD(pd)				\
+	if (unlikely(pd == 0)) {			\
+		EDEB_ERR(4, "pd=%p check failed", pd);	\
+		return -EFAULT; }

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#539: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:310:
+#define EHCA_CHECK_PD_P(pd)				\
+	if (unlikely(pd == 0)) {			\
+		EDEB_ERR(4, "pd=%p check failed", pd);	\
+		return ERR_PTR(-EFAULT); }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pd' - possible side-effects?
#539: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:310:
+#define EHCA_CHECK_PD_P(pd)				\
+	if (unlikely(pd == 0)) {			\
+		EDEB_ERR(4, "pd=%p check failed", pd);	\
+		return ERR_PTR(-EFAULT); }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pd' may be better as '(pd)' to avoid precedence issues
#539: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:310:
+#define EHCA_CHECK_PD_P(pd)				\
+	if (unlikely(pd == 0)) {			\
+		EDEB_ERR(4, "pd=%p check failed", pd);	\
+		return ERR_PTR(-EFAULT); }

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#539: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:310:
+#define EHCA_CHECK_PD_P(pd)				\
+	if (unlikely(pd == 0)) {			\
+		EDEB_ERR(4, "pd=%p check failed", pd);	\
+		return ERR_PTR(-EFAULT); }

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#544: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:315:
+#define EHCA_CHECK_AV(av)				\
+	if (unlikely(av == 0)) {			\
+		EDEB_ERR(4, "av=%p check failed", av);	\
+		return -EFAULT; }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'av' - possible side-effects?
#544: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:315:
+#define EHCA_CHECK_AV(av)				\
+	if (unlikely(av == 0)) {			\
+		EDEB_ERR(4, "av=%p check failed", av);	\
+		return -EFAULT; }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'av' may be better as '(av)' to avoid precedence issues
#544: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:315:
+#define EHCA_CHECK_AV(av)				\
+	if (unlikely(av == 0)) {			\
+		EDEB_ERR(4, "av=%p check failed", av);	\
+		return -EFAULT; }

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#544: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:315:
+#define EHCA_CHECK_AV(av)				\
+	if (unlikely(av == 0)) {			\
+		EDEB_ERR(4, "av=%p check failed", av);	\
+		return -EFAULT; }

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#549: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:320:
+#define EHCA_CHECK_AV_P(av)				\
+	if (unlikely(av == 0)) {			\
+		EDEB_ERR(4, "av=%p check failed", av);	\
+		return ERR_PTR(-EFAULT); }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'av' - possible side-effects?
#549: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:320:
+#define EHCA_CHECK_AV_P(av)				\
+	if (unlikely(av == 0)) {			\
+		EDEB_ERR(4, "av=%p check failed", av);	\
+		return ERR_PTR(-EFAULT); }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'av' may be better as '(av)' to avoid precedence issues
#549: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:320:
+#define EHCA_CHECK_AV_P(av)				\
+	if (unlikely(av == 0)) {			\
+		EDEB_ERR(4, "av=%p check failed", av);	\
+		return ERR_PTR(-EFAULT); }

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#549: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:320:
+#define EHCA_CHECK_AV_P(av)				\
+	if (unlikely(av == 0)) {			\
+		EDEB_ERR(4, "av=%p check failed", av);	\
+		return ERR_PTR(-EFAULT); }

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#554: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:325:
+#define EHCA_CHECK_CQ(cq)				\
+	if (unlikely(cq == 0)) {			\
+		EDEB_ERR(4, "cq=%p check failed", cq);	\
+		return -EFAULT; }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cq' - possible side-effects?
#554: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:325:
+#define EHCA_CHECK_CQ(cq)				\
+	if (unlikely(cq == 0)) {			\
+		EDEB_ERR(4, "cq=%p check failed", cq);	\
+		return -EFAULT; }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'cq' may be better as '(cq)' to avoid precedence issues
#554: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:325:
+#define EHCA_CHECK_CQ(cq)				\
+	if (unlikely(cq == 0)) {			\
+		EDEB_ERR(4, "cq=%p check failed", cq);	\
+		return -EFAULT; }

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#554: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:325:
+#define EHCA_CHECK_CQ(cq)				\
+	if (unlikely(cq == 0)) {			\
+		EDEB_ERR(4, "cq=%p check failed", cq);	\
+		return -EFAULT; }

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#559: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:330:
+#define EHCA_CHECK_CQ_P(cq)				\
+	if (unlikely(cq == 0)) {			\
+		EDEB_ERR(4, "cq=%p check failed", cq);	\
+		return ERR_PTR(-EFAULT); }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cq' - possible side-effects?
#559: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:330:
+#define EHCA_CHECK_CQ_P(cq)				\
+	if (unlikely(cq == 0)) {			\
+		EDEB_ERR(4, "cq=%p check failed", cq);	\
+		return ERR_PTR(-EFAULT); }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'cq' may be better as '(cq)' to avoid precedence issues
#559: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:330:
+#define EHCA_CHECK_CQ_P(cq)				\
+	if (unlikely(cq == 0)) {			\
+		EDEB_ERR(4, "cq=%p check failed", cq);	\
+		return ERR_PTR(-EFAULT); }

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#559: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:330:
+#define EHCA_CHECK_CQ_P(cq)				\
+	if (unlikely(cq == 0)) {			\
+		EDEB_ERR(4, "cq=%p check failed", cq);	\
+		return ERR_PTR(-EFAULT); }

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#564: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:335:
+#define EHCA_CHECK_EQ(eq)				\
+	if (unlikely(eq == 0)) {			\
+		EDEB_ERR(4, "eq=%p check failed", eq);	\
+		return -EFAULT; }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'eq' - possible side-effects?
#564: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:335:
+#define EHCA_CHECK_EQ(eq)				\
+	if (unlikely(eq == 0)) {			\
+		EDEB_ERR(4, "eq=%p check failed", eq);	\
+		return -EFAULT; }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'eq' may be better as '(eq)' to avoid precedence issues
#564: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:335:
+#define EHCA_CHECK_EQ(eq)				\
+	if (unlikely(eq == 0)) {			\
+		EDEB_ERR(4, "eq=%p check failed", eq);	\
+		return -EFAULT; }

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#564: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:335:
+#define EHCA_CHECK_EQ(eq)				\
+	if (unlikely(eq == 0)) {			\
+		EDEB_ERR(4, "eq=%p check failed", eq);	\
+		return -EFAULT; }

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#569: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:340:
+#define EHCA_CHECK_EQ_P(eq)				\
+	if (unlikely(eq == 0)) {			\
+		EDEB_ERR(4, "eq=%p check failed", eq);	\
+		return ERR_PTR(-EFAULT); }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'eq' - possible side-effects?
#569: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:340:
+#define EHCA_CHECK_EQ_P(eq)				\
+	if (unlikely(eq == 0)) {			\
+		EDEB_ERR(4, "eq=%p check failed", eq);	\
+		return ERR_PTR(-EFAULT); }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'eq' may be better as '(eq)' to avoid precedence issues
#569: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:340:
+#define EHCA_CHECK_EQ_P(eq)				\
+	if (unlikely(eq == 0)) {			\
+		EDEB_ERR(4, "eq=%p check failed", eq);	\
+		return ERR_PTR(-EFAULT); }

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#569: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:340:
+#define EHCA_CHECK_EQ_P(eq)				\
+	if (unlikely(eq == 0)) {			\
+		EDEB_ERR(4, "eq=%p check failed", eq);	\
+		return ERR_PTR(-EFAULT); }

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#574: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:345:
+#define EHCA_CHECK_QP(qp)				\
+	if (unlikely(qp == 0)) {			\
+		EDEB_ERR(4, "qp=%p check failed", qp);	\
+		return -EFAULT; }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'qp' - possible side-effects?
#574: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:345:
+#define EHCA_CHECK_QP(qp)				\
+	if (unlikely(qp == 0)) {			\
+		EDEB_ERR(4, "qp=%p check failed", qp);	\
+		return -EFAULT; }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'qp' may be better as '(qp)' to avoid precedence issues
#574: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:345:
+#define EHCA_CHECK_QP(qp)				\
+	if (unlikely(qp == 0)) {			\
+		EDEB_ERR(4, "qp=%p check failed", qp);	\
+		return -EFAULT; }

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#574: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:345:
+#define EHCA_CHECK_QP(qp)				\
+	if (unlikely(qp == 0)) {			\
+		EDEB_ERR(4, "qp=%p check failed", qp);	\
+		return -EFAULT; }

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#579: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:350:
+#define EHCA_CHECK_QP_P(qp)				\
+	if (unlikely(qp == 0)) {			\
+		EDEB_ERR(4, "qp=%p check failed", qp);	\
+		return ERR_PTR(-EFAULT); }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'qp' - possible side-effects?
#579: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:350:
+#define EHCA_CHECK_QP_P(qp)				\
+	if (unlikely(qp == 0)) {			\
+		EDEB_ERR(4, "qp=%p check failed", qp);	\
+		return ERR_PTR(-EFAULT); }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'qp' may be better as '(qp)' to avoid precedence issues
#579: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:350:
+#define EHCA_CHECK_QP_P(qp)				\
+	if (unlikely(qp == 0)) {			\
+		EDEB_ERR(4, "qp=%p check failed", qp);	\
+		return ERR_PTR(-EFAULT); }

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#579: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:350:
+#define EHCA_CHECK_QP_P(qp)				\
+	if (unlikely(qp == 0)) {			\
+		EDEB_ERR(4, "qp=%p check failed", qp);	\
+		return ERR_PTR(-EFAULT); }

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#584: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:355:
+#define EHCA_CHECK_MR(mr)				\
+	if (unlikely(mr == 0)) {			\
+		EDEB_ERR(4, "mr=%p check failed", mr);	\
+		return -EFAULT; }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mr' - possible side-effects?
#584: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:355:
+#define EHCA_CHECK_MR(mr)				\
+	if (unlikely(mr == 0)) {			\
+		EDEB_ERR(4, "mr=%p check failed", mr);	\
+		return -EFAULT; }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'mr' may be better as '(mr)' to avoid precedence issues
#584: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:355:
+#define EHCA_CHECK_MR(mr)				\
+	if (unlikely(mr == 0)) {			\
+		EDEB_ERR(4, "mr=%p check failed", mr);	\
+		return -EFAULT; }

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#584: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:355:
+#define EHCA_CHECK_MR(mr)				\
+	if (unlikely(mr == 0)) {			\
+		EDEB_ERR(4, "mr=%p check failed", mr);	\
+		return -EFAULT; }

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#589: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:360:
+#define EHCA_CHECK_MR_P(mr)				\
+	if (unlikely(mr == 0)) {			\
+		EDEB_ERR(4, "mr=%p check failed", mr);	\
+		return ERR_PTR(-EFAULT); }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mr' - possible side-effects?
#589: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:360:
+#define EHCA_CHECK_MR_P(mr)				\
+	if (unlikely(mr == 0)) {			\
+		EDEB_ERR(4, "mr=%p check failed", mr);	\
+		return ERR_PTR(-EFAULT); }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'mr' may be better as '(mr)' to avoid precedence issues
#589: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:360:
+#define EHCA_CHECK_MR_P(mr)				\
+	if (unlikely(mr == 0)) {			\
+		EDEB_ERR(4, "mr=%p check failed", mr);	\
+		return ERR_PTR(-EFAULT); }

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#589: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:360:
+#define EHCA_CHECK_MR_P(mr)				\
+	if (unlikely(mr == 0)) {			\
+		EDEB_ERR(4, "mr=%p check failed", mr);	\
+		return ERR_PTR(-EFAULT); }

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#594: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:365:
+#define EHCA_CHECK_MW(mw)				\
+	if (unlikely(mw == 0)) {			\
+		EDEB_ERR(4, "mw=%p check failed", mw);	\
+		return -EFAULT; }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mw' - possible side-effects?
#594: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:365:
+#define EHCA_CHECK_MW(mw)				\
+	if (unlikely(mw == 0)) {			\
+		EDEB_ERR(4, "mw=%p check failed", mw);	\
+		return -EFAULT; }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'mw' may be better as '(mw)' to avoid precedence issues
#594: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:365:
+#define EHCA_CHECK_MW(mw)				\
+	if (unlikely(mw == 0)) {			\
+		EDEB_ERR(4, "mw=%p check failed", mw);	\
+		return -EFAULT; }

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#594: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:365:
+#define EHCA_CHECK_MW(mw)				\
+	if (unlikely(mw == 0)) {			\
+		EDEB_ERR(4, "mw=%p check failed", mw);	\
+		return -EFAULT; }

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#599: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:370:
+#define EHCA_CHECK_MW_P(mw)				\
+	if (unlikely(mw == 0)) {			\
+		EDEB_ERR(4, "mw=%p check failed", mw);	\
+		return ERR_PTR(-EFAULT); }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mw' - possible side-effects?
#599: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:370:
+#define EHCA_CHECK_MW_P(mw)				\
+	if (unlikely(mw == 0)) {			\
+		EDEB_ERR(4, "mw=%p check failed", mw);	\
+		return ERR_PTR(-EFAULT); }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'mw' may be better as '(mw)' to avoid precedence issues
#599: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:370:
+#define EHCA_CHECK_MW_P(mw)				\
+	if (unlikely(mw == 0)) {			\
+		EDEB_ERR(4, "mw=%p check failed", mw);	\
+		return ERR_PTR(-EFAULT); }

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#599: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:370:
+#define EHCA_CHECK_MW_P(mw)				\
+	if (unlikely(mw == 0)) {			\
+		EDEB_ERR(4, "mw=%p check failed", mw);	\
+		return ERR_PTR(-EFAULT); }

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#604: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:375:
+#define EHCA_CHECK_FMR(fmr)					\
+	if (unlikely(fmr == 0)) {				\
+		EDEB_ERR(4, "fmr=%p check failed", fmr);	\
+		return -EFAULT; }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'fmr' - possible side-effects?
#604: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:375:
+#define EHCA_CHECK_FMR(fmr)					\
+	if (unlikely(fmr == 0)) {				\
+		EDEB_ERR(4, "fmr=%p check failed", fmr);	\
+		return -EFAULT; }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'fmr' may be better as '(fmr)' to avoid precedence issues
#604: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:375:
+#define EHCA_CHECK_FMR(fmr)					\
+	if (unlikely(fmr == 0)) {				\
+		EDEB_ERR(4, "fmr=%p check failed", fmr);	\
+		return -EFAULT; }

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#604: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:375:
+#define EHCA_CHECK_FMR(fmr)					\
+	if (unlikely(fmr == 0)) {				\
+		EDEB_ERR(4, "fmr=%p check failed", fmr);	\
+		return -EFAULT; }

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#609: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:380:
+#define EHCA_CHECK_FMR_P(fmr)					\
+	if (unlikely(fmr == 0)) {				\
+		EDEB_ERR(4, "fmr=%p check failed", fmr);	\
+		return ERR_PTR(-EFAULT); }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'fmr' - possible side-effects?
#609: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:380:
+#define EHCA_CHECK_FMR_P(fmr)					\
+	if (unlikely(fmr == 0)) {				\
+		EDEB_ERR(4, "fmr=%p check failed", fmr);	\
+		return ERR_PTR(-EFAULT); }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'fmr' may be better as '(fmr)' to avoid precedence issues
#609: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:380:
+#define EHCA_CHECK_FMR_P(fmr)					\
+	if (unlikely(fmr == 0)) {				\
+		EDEB_ERR(4, "fmr=%p check failed", fmr);	\
+		return ERR_PTR(-EFAULT); }

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#609: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:380:
+#define EHCA_CHECK_FMR_P(fmr)					\
+	if (unlikely(fmr == 0)) {				\
+		EDEB_ERR(4, "fmr=%p check failed", fmr);	\
+		return ERR_PTR(-EFAULT); }

ERROR:SPACING: space required after that ',' (ctx:VxV)
#614: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:385:
+#define EHCA_REGISTER_PD(device,pd)
                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#615: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:386:
+#define EHCA_REGISTER_AV(pd,av)
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#622: FILE: drivers/infiniband/hw/ehca/ehca_tools.h:393:
+#define EHCA_REGISTER_PD(device,pd)
                                ^

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.46624.commit.d8656ac321de9703892c93ca3e49a8233ad70a05 total: 67 errors, 32 warnings, 61 checks, 598 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.46624.commit.d8656ac321de9703892c93ca3e49a8233ad70a05 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
