WARNING:TYPO_SPELLING: 'dependant' may be misspelled - perhaps 'dependent'?
#40: 
11- LTTng architecture dependant instrumentation : MIPS
                       ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#43: 
OpenPGP public key:              http://krystal.dyndns.org:8080/key/compudj.gpg

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#51: 
--- a/arch/mips/kernel/irq.c

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#100: FILE: arch/mips/kernel/process.c:277:
+	pid = do_fork(flags | CLONE_VM | CLONE_UNTRACED,
+			0, &regs, 0, NULL, NULL);

ERROR:SPACING: space required before the open parenthesis '('
#102: FILE: arch/mips/kernel/process.c:279:
+	if(pid >= 0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#143: FILE: arch/mips/kernel/traps.c:576:
+	trace_kernel_trap_entry(CAUSE_EXCCODE(regs->cp0_cause), (void*)regs->cp0_epc);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#151: FILE: arch/mips/kernel/traps.c:734:
+	trace_kernel_trap_entry(CAUSE_EXCCODE(regs->cp0_cause), (void*)regs->cp0_epc);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#194: FILE: arch/mips/kernel/traps.c:1527:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#199: FILE: arch/mips/kernel/traps.c:1532:
+	trace_kernel_arch_syscall_entry(

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#201: FILE: arch/mips/kernel/traps.c:1534:
+			(void*)regs->cp0_epc);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#211: FILE: arch/mips/kernel/traps.c:1544:
+
+

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#212: FILE: arch/mips/kernel/traps.c:1545:
+#if 0

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#213: FILE: arch/mips/kernel/traps.c:1546:
+asmlinkage void trace_real_syscall_entry(struct pt_regs * regs)

CHECK:SPACING: No space is necessary after a cast
#231: FILE: arch/mips/kernel/traps.c:1564:
+	trace_syscall_event.syscall_id = (uint8_t) (regs->regs[2] - __NR_Linux);

CHECK:CAMELCASE: Avoid CamelCase: <__NR_Linux>
#231: FILE: arch/mips/kernel/traps.c:1564:
+	trace_syscall_event.syscall_id = (uint8_t) (regs->regs[2] - __NR_Linux);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#239: FILE: arch/mips/kernel/traps.c:1572:
+				 (void*)&lower_bound, (void*)&upper_bound) < 0)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#239: FILE: arch/mips/kernel/traps.c:1572:
+				 (void*)&lower_bound, (void*)&upper_bound) < 0)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'use_depth == 1'
#250: FILE: arch/mips/kernel/traps.c:1583:
+	if ((use_depth == 1) || (use_bounds == 1)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'use_bounds == 1'
#250: FILE: arch/mips/kernel/traps.c:1583:
+	if ((use_depth == 1) || (use_bounds == 1)) {

CHECK:SPACING: No space is necessary after a cast
#251: FILE: arch/mips/kernel/traps.c:1584:
+		stack       = (unsigned long*) regs->regs[29];

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#251: FILE: arch/mips/kernel/traps.c:1584:
+		stack       = (unsigned long*) regs->regs[29];

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr > start_code'
#257: FILE: arch/mips/kernel/traps.c:1590:
+			if ((addr > start_code) && (addr < end_code)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr < end_code'
#257: FILE: arch/mips/kernel/traps.c:1590:
+			if ((addr > start_code) && (addr < end_code)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'use_depth  == 1'
#258: FILE: arch/mips/kernel/traps.c:1591:
+				if (((use_depth  == 1) && (depth == seek_depth)) ||
+				    ((use_bounds == 1) && (addr > lower_bound) && (addr < upper_bound))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'depth == seek_depth'
#258: FILE: arch/mips/kernel/traps.c:1591:
+				if (((use_depth  == 1) && (depth == seek_depth)) ||
+				    ((use_bounds == 1) && (addr > lower_bound) && (addr < upper_bound))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'use_bounds == 1'
#258: FILE: arch/mips/kernel/traps.c:1591:
+				if (((use_depth  == 1) && (depth == seek_depth)) ||
+				    ((use_bounds == 1) && (addr > lower_bound) && (addr < upper_bound))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr > lower_bound'
#258: FILE: arch/mips/kernel/traps.c:1591:
+				if (((use_depth  == 1) && (depth == seek_depth)) ||
+				    ((use_bounds == 1) && (addr > lower_bound) && (addr < upper_bound))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr < upper_bound'
#258: FILE: arch/mips/kernel/traps.c:1591:
+				if (((use_depth  == 1) && (depth == seek_depth)) ||
+				    ((use_bounds == 1) && (addr > lower_bound) && (addr < upper_bound))) {

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#259: FILE: arch/mips/kernel/traps.c:1592:
+				    ((use_bounds == 1) && (addr > lower_bound) && (addr < upper_bound))) {

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#296: FILE: arch/mips/kernel/unaligned.c:501:
+	trace_kernel_trap_entry(CAUSE_EXCCODE(regs->cp0_cause), (void*)regs->cp0_epc);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#344: FILE: arch/mips/kernel/syscall.c:312:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#545: FILE: arch/mips/mm/fault.c:65:
+	trace_kernel_trap_entry(CAUSE_EXCCODE(regs->cp0_cause), (void*)regs->cp0_epc);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#578: FILE: arch/mips/mm/fault.c:254:
+		trace_kernel_trap_entry(CAUSE_EXCCODE(regs->cp0_cause), (void*)regs->cp0_epc);

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.42454.commit.b1f91c886a74dd01b00ecc744ee913680f1afa31 total: 13 errors, 4 warnings, 16 checks, 458 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.42454.commit.b1f91c886a74dd01b00ecc744ee913680f1afa31 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
