WARNING:TYPO_SPELLING: 'proces' may be misspelled - perhaps 'process'?
#40: 
The core dump proces will run with the privileges and in the name space
              ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#49: 
One small incompatibility is that if someone had a core pattern previously that

ERROR:CODE_INDENT: code indent should use tabs where possible
#81: FILE: fs/exec.c:1520:
+ ^Iif (corename[0] == '|') {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#81: FILE: fs/exec.c:1520:
+ ^Iif (corename[0] == '|') {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#81: FILE: fs/exec.c:1520:
+ ^Iif (corename[0] == '|') {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#83: FILE: fs/exec.c:1522:
+ ^I^Iif(call_usermodehelper_pipe(corename+1, NULL, NULL, &file)) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#83: FILE: fs/exec.c:1522:
+ ^I^Iif(call_usermodehelper_pipe(corename+1, NULL, NULL, &file)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#83: FILE: fs/exec.c:1522:
+ ^I^Iif(call_usermodehelper_pipe(corename+1, NULL, NULL, &file)) {$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#83: FILE: fs/exec.c:1522:
+ 		if(call_usermodehelper_pipe(corename+1, NULL, NULL, &file)) {
  		                                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#83: FILE: fs/exec.c:1522:
+ 		if(call_usermodehelper_pipe(corename+1, NULL, NULL, &file)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#84: FILE: fs/exec.c:1523:
+ ^I^I^Iprintk(KERN_INFO "Core dump to %s pipe failed\n",$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#84: FILE: fs/exec.c:1523:
+ ^I^I^Iprintk(KERN_INFO "Core dump to %s pipe failed\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#84: FILE: fs/exec.c:1523:
+ ^I^I^Iprintk(KERN_INFO "Core dump to %s pipe failed\n",$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#84: FILE: fs/exec.c:1523:
+ 			printk(KERN_INFO "Core dump to %s pipe failed\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#86: FILE: fs/exec.c:1525:
+ ^I^I^Igoto fail_unlock;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#86: FILE: fs/exec.c:1525:
+ ^I^I^Igoto fail_unlock;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#86: FILE: fs/exec.c:1525:
+ ^I^I^Igoto fail_unlock;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#87: FILE: fs/exec.c:1526:
+ ^I^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#87: FILE: fs/exec.c:1526:
+ ^I^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#87: FILE: fs/exec.c:1526:
+ ^I^I}$

ERROR:CODE_INDENT: code indent should use tabs where possible
#89: FILE: fs/exec.c:1528:
+ ^I} else$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#89: FILE: fs/exec.c:1528:
+ ^I} else$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#89: FILE: fs/exec.c:1528:
+ ^I} else$

CHECK:BRACES: Unbalanced braces around else statement
#89: FILE: fs/exec.c:1528:
+ 	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#90: FILE: fs/exec.c:1529:
+ ^I^Ifile = filp_open(corename,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#90: FILE: fs/exec.c:1529:
+ ^I^Ifile = filp_open(corename,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#90: FILE: fs/exec.c:1529:
+ ^I^Ifile = filp_open(corename,$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#103: FILE: fs/exec.c:1540:
+	/* AK: actually i see no reason to not allow this for named pipes etc.,
+	   but keep the previous behaviour for now. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#103: FILE: fs/exec.c:1540:
+	   but keep the previous behaviour for now. */

WARNING:LINE_SPACING: Missing a blank line after declarations
#132: FILE: fs/binfmt_elf.c:1161:
+		char *buf = (char *)get_zeroed_page(GFP_KERNEL);
+		if (!buf)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#136: FILE: fs/binfmt_elf.c:1165:
+			unsigned long n = off;
+			if (n > PAGE_SIZE)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'nr' - possible side-effects?
#155: FILE: fs/binfmt_elf.c:1220:
+#define DUMP_WRITE(addr, nr, foffset)	\
+	do { if (!dump_write(file, (addr), (nr))) return 0; *foffset += (nr); } while(0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'foffset' may be better as '(foffset)' to avoid precedence issues
#155: FILE: fs/binfmt_elf.c:1220:
+#define DUMP_WRITE(addr, nr, foffset)	\
+	do { if (!dump_write(file, (addr), (nr))) return 0; *foffset += (nr); } while(0)

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#155: FILE: fs/binfmt_elf.c:1220:
+#define DUMP_WRITE(addr, nr, foffset)	\
+	do { if (!dump_write(file, (addr), (nr))) return 0; *foffset += (nr); } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#156: FILE: fs/binfmt_elf.c:1221:
+	do { if (!dump_write(file, (addr), (nr))) return 0; *foffset += (nr); } while(0)

WARNING:LINE_SPACING: Missing a blank line after declarations
#163: FILE: fs/binfmt_elf.c:1226:
+	char buf[4] = { 0, };
+	DUMP_WRITE(buf, roundup(*foffset, 4) - *foffset, foffset);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#182: FILE: fs/binfmt_elf.c:1239:
+	if (!alignfile(file, foffset)) return 0;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#184: FILE: fs/binfmt_elf.c:1241:
+	if (!alignfile(file, foffset)) return 0;

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.48107.commit.5ad3556600ac535faf7a54d789014a6ed97f1336 total: 11 errors, 23 warnings, 4 checks, 205 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.48107.commit.5ad3556600ac535faf7a54d789014a6ed97f1336 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
