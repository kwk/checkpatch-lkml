CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#36: 
  Sébastien.
   ^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#52: 
application using those sigevent parameters. If SIGEV_NONE has been specified,

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#107: 
Signed-off-by: Sébastien Dugué <sebastien.dugue@bull.net>
                ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#147: FILE: fs/aio.c:957:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#151: FILE: fs/aio.c:961:
+		printk(KERN_DEBUG "aio_send_signal: failed to send signal %d to %d\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'aio_send_signal', this function's name, in a string
#151: FILE: fs/aio.c:961:
+		printk(KERN_DEBUG "aio_send_signal: failed to send signal %d to %d\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#157: FILE: fs/aio.c:967:
+static struct task_struct * good_sigevent(sigevent_t * event)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#157: FILE: fs/aio.c:967:
+static struct task_struct * good_sigevent(sigevent_t * event)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#161: FILE: fs/aio.c:971:
+	if ((event->sigev_notify & SIGEV_THREAD_ID ) &&

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#161: FILE: fs/aio.c:971:
+	if ((event->sigev_notify & SIGEV_THREAD_ID ) &&

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#162: FILE: fs/aio.c:972:
+	if ((event->sigev_notify & SIGEV_THREAD_ID ) &&
+		(!(target = find_task_by_pid(event->sigev_notify_thread_id)) ||

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'event->sigev_signo <= 0'
#167: FILE: fs/aio.c:977:
+	if (((event->sigev_notify & ~SIGEV_THREAD_ID) != SIGEV_NONE) &&
+	    ((event->sigev_signo <= 0) || (event->sigev_signo > SIGRTMAX)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'event->sigev_signo > SIGRTMAX'
#167: FILE: fs/aio.c:977:
+	if (((event->sigev_notify & ~SIGEV_THREAD_ID) != SIGEV_NONE) &&
+	    ((event->sigev_signo <= 0) || (event->sigev_signo > SIGRTMAX)))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#184: FILE: fs/aio.c:994:
+	if (copy_from_user(&event, user_event, sizeof (event)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#199: FILE: fs/aio.c:1009:
+	if ((target = good_sigevent(&event)))

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#234: FILE: fs/aio.c:1044:
+	dprintk("aio_write_evt: %p[%lu]: %Lx %Lx %Lx %Lx\n",

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#422: FILE: include/linux/signal.h:236:
+extern int specific_send_sig_info(int sig, struct siginfo *info, struct task_struct *t);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.39078.commit.6b1e7e094e95fc385900572948db09e3ff4a4240 total: 5 errors, 5 warnings, 7 checks, 296 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.39078.commit.6b1e7e094e95fc385900572948db09e3ff4a4240 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
