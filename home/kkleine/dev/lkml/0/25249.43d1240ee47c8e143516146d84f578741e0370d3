WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#30: 
This is a fairly naive implementation that uses the tlb management instructions

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#54: FILE: drivers/kvm/mmu.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#81: FILE: drivers/kvm/mmu.c:28:
+#define ASSERT(x)  ^I^I^I^I^I^I^I     \$

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#81: FILE: drivers/kvm/mmu.c:28:
+#define ASSERT(x)  							     \
+	if (!(x)) { 							     \
+		printk("assertion failed %s:%d: %s\n", __FILE__, __LINE__, #x);\
+	}

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#82: FILE: drivers/kvm/mmu.c:29:
+^Iif (!(x)) { ^I^I^I^I^I^I^I     \$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#83: FILE: drivers/kvm/mmu.c:30:
+		printk("assertion failed %s:%d: %s\n", __FILE__, __LINE__, #x);\

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#91: FILE: drivers/kvm/mmu.c:38:
+#define PT_PRESENT_MASK (1ULL << 0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#92: FILE: drivers/kvm/mmu.c:39:
+#define PT_WRITABLE_MASK (1ULL << PT_WRITABLE_SHIFT)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#93: FILE: drivers/kvm/mmu.c:40:
+#define PT_USER_MASK (1ULL << 2)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#94: FILE: drivers/kvm/mmu.c:41:
+#define PT_PWT_MASK (1ULL << 3)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#95: FILE: drivers/kvm/mmu.c:42:
+#define PT_PCD_MASK (1ULL << 4)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#96: FILE: drivers/kvm/mmu.c:43:
+#define PT_ACCESSED_MASK (1ULL << 5)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#97: FILE: drivers/kvm/mmu.c:44:
+#define PT_DIRTY_MASK (1ULL << 6)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#98: FILE: drivers/kvm/mmu.c:45:
+#define PT_PAGE_SIZE_MASK (1ULL << 7)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#99: FILE: drivers/kvm/mmu.c:46:
+#define PT_PAT_MASK (1ULL << 7)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#100: FILE: drivers/kvm/mmu.c:47:
+#define PT_GLOBAL_MASK (1ULL << 8)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#101: FILE: drivers/kvm/mmu.c:48:
+#define PT64_NX_MASK (1ULL << 63)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#105: FILE: drivers/kvm/mmu.c:52:
+#define PT_DIR_PAT_MASK (1ULL << PT_DIR_PAT_SHIFT)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#111: FILE: drivers/kvm/mmu.c:58:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that close parenthesis ')'
#115: FILE: drivers/kvm/mmu.c:62:
+	PT_GLOBAL_MASK )

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#121: FILE: drivers/kvm/mmu.c:68:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#128: FILE: drivers/kvm/mmu.c:75:
+
+

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#133: FILE: drivers/kvm/mmu.c:80:
+#define PT_SHADOW_PS_MARK (1ULL << PT_FIRST_AVAIL_BITS_SHIFT)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#134: FILE: drivers/kvm/mmu.c:81:
+#define PT_SHADOW_IO_MARK (1ULL << PT_FIRST_AVAIL_BITS_SHIFT)

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#137: FILE: drivers/kvm/mmu.c:84:
+#define PT_SHADOW_WRITABLE_MASK (1ULL << PT_SHADOW_WRITABLE_SHIFT)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'level' may be better as '(level)' to avoid precedence issues
#148: FILE: drivers/kvm/mmu.c:95:
+#define PT64_LEVEL_SHIFT(level) \
+		( PAGE_SHIFT + (level - 1) * PT64_LEVEL_BITS )

ERROR:SPACING: space prohibited after that open parenthesis '('
#149: FILE: drivers/kvm/mmu.c:96:
+		( PAGE_SHIFT + (level - 1) * PT64_LEVEL_BITS )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#149: FILE: drivers/kvm/mmu.c:96:
+		( PAGE_SHIFT + (level - 1) * PT64_LEVEL_BITS )

CHECK:LINE_SPACING: Please don't use multiple blank lines
#157: FILE: drivers/kvm/mmu.c:104:
+
+

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'level' may be better as '(level)' to avoid precedence issues
#160: FILE: drivers/kvm/mmu.c:107:
+#define PT32_LEVEL_SHIFT(level) \
+		( PAGE_SHIFT + (level - 1) * PT32_LEVEL_BITS )

ERROR:SPACING: space prohibited after that open parenthesis '('
#161: FILE: drivers/kvm/mmu.c:108:
+		( PAGE_SHIFT + (level - 1) * PT32_LEVEL_BITS )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#161: FILE: drivers/kvm/mmu.c:108:
+		( PAGE_SHIFT + (level - 1) * PT32_LEVEL_BITS )

CHECK:LINE_SPACING: Please don't use multiple blank lines
#169: FILE: drivers/kvm/mmu.c:116:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#178: FILE: drivers/kvm/mmu.c:125:
+
+

CHECK:BIT_MACRO: Prefer using the BIT macro
#179: FILE: drivers/kvm/mmu.c:126:
+#define PFERR_PRESENT_MASK (1U << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#180: FILE: drivers/kvm/mmu.c:127:
+#define PFERR_WRITE_MASK (1U << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#181: FILE: drivers/kvm/mmu.c:128:
+#define PFERR_USER_MASK (1U << 2)

WARNING:LINE_SPACING: Missing a blank line after declarations
#228: FILE: drivers/kvm/mmu.c:175:
+	u32 *end;
+	for (pos = __va(page_hpa), end = pos + PAGE_SIZE / sizeof(u32);

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#264: FILE: drivers/kvm/mmu.c:211:
+	return is_error_hpa(hpa) ? bad_page_address | (gpa & ~PAGE_MASK): hpa;
 	                                                                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#278: FILE: drivers/kvm/mmu.c:225:
+		| (gpa & (PAGE_SIZE-1));
 		                   ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#290: FILE: drivers/kvm/mmu.c:237:
+
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#298: FILE: drivers/kvm/mmu.c:245:
+	if (level == 1)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#300: FILE: drivers/kvm/mmu.c:247:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#311: FILE: drivers/kvm/mmu.c:258:
+				release_pt_page_64(vcpu,
+						  current_ent &

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'nonpaging_map', this function's name, in a string
#348: FILE: drivers/kvm/mmu.c:295:
+				pgprintk("nonpaging_map: ENOMEM\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'nonpaging_flush', this function's name, in a string
#367: FILE: drivers/kvm/mmu.c:314:
+	pgprintk("nonpaging_flush\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#384: FILE: drivers/kvm/mmu.c:331:
+static int nonpaging_page_fault(struct kvm_vcpu *vcpu, gva_t gva,
+			       u32 error_code)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 13)
#392: FILE: drivers/kvm/mmu.c:339:
+	for (;;) {
+	     hpa_t paddr;

WARNING:TABSTOP: Statements should start on a tabstop
#393: FILE: drivers/kvm/mmu.c:340:
+	     hpa_t paddr;

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#395: FILE: drivers/kvm/mmu.c:342:
+	     paddr = gpa_to_hpa(vcpu , addr & PT64_BASE_ADDR_MASK);
 	                             ^

WARNING:TABSTOP: Statements should start on a tabstop
#397: FILE: drivers/kvm/mmu.c:344:
+	     if (is_error_hpa(paddr))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (13, 21)
#397: FILE: drivers/kvm/mmu.c:344:
+	     if (is_error_hpa(paddr))
+		     return 1;

WARNING:TABSTOP: Statements should start on a tabstop
#398: FILE: drivers/kvm/mmu.c:345:
+		     return 1;

WARNING:TABSTOP: Statements should start on a tabstop
#401: FILE: drivers/kvm/mmu.c:348:
+	     if (ret) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (13, 21)
#401: FILE: drivers/kvm/mmu.c:348:
+	     if (ret) {
+		     nonpaging_flush(vcpu);

WARNING:TABSTOP: Statements should start on a tabstop
#403: FILE: drivers/kvm/mmu.c:350:
+		     continue;

WARNING:TABSTOP: Statements should start on a tabstop
#404: FILE: drivers/kvm/mmu.c:351:
+	     }

WARNING:TABSTOP: Statements should start on a tabstop
#405: FILE: drivers/kvm/mmu.c:352:
+	     break;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#442: FILE: drivers/kvm/mmu.c:389:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#472: FILE: drivers/kvm/mmu.c:419:
+static inline void set_pte_common(struct kvm_vcpu *vcpu,
+			     u64 *shadow_pte,

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'inject_page_fault', this function's name, in a string
#509: FILE: drivers/kvm/mmu.c:456:
+	pgprintk("inject_page_fault: 0x%llx err 0x%x\n", addr, err_code);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#514: FILE: drivers/kvm/mmu.c:461:
+		printk("inject_page_fault: double fault 0x%llx @ 0x%lx\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'inject_page_fault', this function's name, in a string
#514: FILE: drivers/kvm/mmu.c:461:
+		printk("inject_page_fault: double fault 0x%llx @ 0x%lx\n",

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#532: FILE: drivers/kvm/mmu.c:479:
+
+}

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#547: FILE: drivers/kvm/mmu.c:494:
+
+	}

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#553: FILE: drivers/kvm/mmu.c:500:
+{
+

ERROR:SPACING: space prohibited before that close parenthesis ')'
#575: FILE: drivers/kvm/mmu.c:522:
+		if (level == PT_PAGE_TABLE_LEVEL ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#586: FILE: drivers/kvm/mmu.c:533:
+		if (level == PT_DIRECTORY_LEVEL &&
+			  (table[index] & PT_SHADOW_PS_MARK)) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#652: FILE: drivers/kvm/mmu.c:599:
+	if ((ret = paging64_init_context(vcpu)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#714: FILE: drivers/kvm/mmu.c:661:
+		if ((page = alloc_page(GFP_KVM_MMU)) == NULL)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#736: FILE: drivers/kvm/mmu.c:683:
+	if ((r = alloc_mmu_pages(vcpu)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#739: FILE: drivers/kvm/mmu.c:686:
+	if ((r = init_kvm_mmu(vcpu))) {

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#771: FILE: drivers/kvm/mmu.c:718:
+
+	}

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#778: FILE: drivers/kvm/paging_tmpl.h:1:
+/*

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#786: FILE: drivers/kvm/paging_tmpl.h:9:
+	#define FNAME(name) paging##64_##name

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#797: FILE: drivers/kvm/paging_tmpl.h:20:
+	#define FNAME(name) paging##32_##name

ERROR:SPACING: space prohibited after that open parenthesis '('
#834: FILE: drivers/kvm/paging_tmpl.h:57:
+	walker->table = (pt_element_t *)( (unsigned long)walker->table |

ERROR:SPACING: space prohibited before that close parenthesis ')'
#835: FILE: drivers/kvm/paging_tmpl.h:58:
+		(unsigned long)(vcpu->cr3 & ~(PAGE_MASK | CR3_FLAGS_MASK)) );

ERROR:CODE_INDENT: code indent should use tabs where possible
#867: FILE: drivers/kvm/paging_tmpl.h:90:
+^I^I          ((guest_pde & PT_DIR_PAT_MASK) >>$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#868: FILE: drivers/kvm/paging_tmpl.h:91:
+^I^I^I            (PT_DIR_PAT_SHIFT - PT_PAT_SHIFT));$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#881: FILE: drivers/kvm/paging_tmpl.h:104:
+{
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#910: FILE: drivers/kvm/paging_tmpl.h:133:
+static u64 *FNAME(fetch)(struct kvm_vcpu *vcpu, gva_t addr,
+			      struct guest_walker *walker)

CHECK:BRACES: Unbalanced braces around else statement
#936: FILE: drivers/kvm/paging_tmpl.h:159:
+		} else

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#948: FILE: drivers/kvm/paging_tmpl.h:171:
+		if (level == PT_PAGE_TABLE_LEVEL) {
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#954: FILE: drivers/kvm/paging_tmpl.h:177:
+^I^I^I^I          PT_INDEX(addr, PT_PAGE_TABLE_LEVEL));$

CHECK:BRACES: Unbalanced braces around else statement
#968: FILE: drivers/kvm/paging_tmpl.h:191:
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#1006: FILE: drivers/kvm/paging_tmpl.h:229:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1046: FILE: drivers/kvm/paging_tmpl.h:269:
+static int FNAME(page_fault)(struct kvm_vcpu *vcpu, gva_t addr,
+			       u32 error_code)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1095: FILE: drivers/kvm/paging_tmpl.h:318:
+		pgprintk("%s: io work, no access\n", __FUNCTION__);

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.25249.commit.43d1240ee47c8e143516146d84f578741e0370d3 total: 20 errors, 23 warnings, 46 checks, 1116 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.25249.commit.43d1240ee47c8e143516146d84f578741e0370d3 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
