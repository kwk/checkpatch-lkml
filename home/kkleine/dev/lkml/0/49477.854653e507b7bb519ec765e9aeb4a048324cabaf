WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#26: 
One particular design issue with the current slab is that it is build on the

WARNING:TYPO_SPELLING: 'manupulation' may be misspelled - perhaps 'manipulation'?
#55: 
   the slab and is only taken during list manipulation. List manupulation
                                                             ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#115: FILE: include/linux/sslab.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#158: FILE: include/linux/sslab.h:44:
+extern int sslab_create(struct sslab *s, size_t size, int order, gfp_t flags);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#160: FILE: include/linux/sslab.h:46:
+extern void *sslab_alloc(struct sslab *, gfp_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sslab *' should also have an identifier name
#160: FILE: include/linux/sslab.h:46:
+extern void *sslab_alloc(struct sslab *, gfp_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gfp_t' should also have an identifier name
#160: FILE: include/linux/sslab.h:46:
+extern void *sslab_alloc(struct sslab *, gfp_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#161: FILE: include/linux/sslab.h:47:
+extern void *sslab_zalloc(struct sslab *, gfp_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sslab *' should also have an identifier name
#161: FILE: include/linux/sslab.h:47:
+extern void *sslab_zalloc(struct sslab *, gfp_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gfp_t' should also have an identifier name
#161: FILE: include/linux/sslab.h:47:
+extern void *sslab_zalloc(struct sslab *, gfp_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#168: FILE: include/linux/sslab.h:54:
+extern void sslab_free(struct sslab *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sslab *' should also have an identifier name
#168: FILE: include/linux/sslab.h:54:
+extern void sslab_free(struct sslab *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#168: FILE: include/linux/sslab.h:54:
+extern void sslab_free(struct sslab *, void *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#176: FILE: include/linux/sslab.h:62:
+extern void sslab_preload(struct sslab *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sslab *' should also have an identifier name
#176: FILE: include/linux/sslab.h:62:
+extern void sslab_preload(struct sslab *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#176: FILE: include/linux/sslab.h:62:
+extern void sslab_preload(struct sslab *, unsigned long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#178: FILE: include/linux/sslab.h:64:
+extern void sslab_destroy(struct sslab *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sslab *' should also have an identifier name
#178: FILE: include/linux/sslab.h:64:
+extern void sslab_destroy(struct sslab *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#187: FILE: include/linux/sslab.h:73:
+extern void sslab_shrink(struct sslab *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sslab *' should also have an identifier name
#187: FILE: include/linux/sslab.h:73:
+extern void sslab_shrink(struct sslab *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#189: FILE: include/linux/sslab.h:75:
+extern int sslab_pointer_valid(struct sslab *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sslab *' should also have an identifier name
#189: FILE: include/linux/sslab.h:75:
+extern int sslab_pointer_valid(struct sslab *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#189: FILE: include/linux/sslab.h:75:
+extern int sslab_pointer_valid(struct sslab *, void *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#191: FILE: include/linux/sslab.h:77:
+extern unsigned long sslab_objects(struct sslab *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sslab *' should also have an identifier name
#191: FILE: include/linux/sslab.h:77:
+extern unsigned long sslab_objects(struct sslab *);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#193: FILE: include/linux/sslab.h:79:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#199: FILE: mm/sslab.c:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#214: FILE: mm/sslab.c:16:
+ * ^Ilru^I -> used to a slab on the lists$

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#279: FILE: mm/sslab.c:81:
+	(*object_counter(page))= counter;
 	                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#284: FILE: mm/sslab.c:86:
+	return (*object_counter(page));

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#301: FILE: mm/sslab.c:103:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:CAMELCASE: Avoid CamelCase: <__ClearPageSlab>
#315: FILE: mm/sslab.c:117:
+	__ClearPageSlab(page);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <__SetPageSlab>
#341: FILE: mm/sslab.c:143:
+	__SetPageSlab(page);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#346: FILE: mm/sslab.c:148:
+}
+/*

CHECK:BRACES: braces {} should be used on all arms of this statement
#399: FILE: mm/sslab.c:201:
+	if (PageReferenced(page)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#402: FILE: mm/sslab.c:204:
+	} else

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#420: FILE: mm/sslab.c:222:
+	} else {
+

WARNING:TYPO_SPELLING: 'objets' may be misspelled - perhaps 'objects'?
#421: FILE: mm/sslab.c:223:
+		/* No slabs with free objets */
 		                      ^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#440: FILE: mm/sslab.c:242:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#444: FILE: mm/sslab.c:246:
+	BUG_ON(!PageSlab(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#445: FILE: mm/sslab.c:247:
+	BUG_ON(object < page_address(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#446: FILE: mm/sslab.c:248:
+	BUG_ON(object >= page_address(page) + s->objects * s->size);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#447: FILE: mm/sslab.c:249:
+	BUG_ON((object - page_address(page)) % s->size);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#457: FILE: mm/sslab.c:259:
+	BUG_ON(!PageSlab(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#464: FILE: mm/sslab.c:266:
+	BUG_ON(nr > s->objects);

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#546: FILE: mm/sslab.c:348:
+void sslab_free(struct sslab *s, void *object) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#547: FILE: mm/sslab.c:349:
+	struct page * page;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#559: FILE: mm/sslab.c:361:
+		BUG_ON(s != get_sslab(page));

CHECK:SPACING: No space is necessary after a cast
#565: FILE: mm/sslab.c:367:
+	* (void **) object = prior;

ERROR:SPACING: space prohibited after that '*' (ctx:ExW)
#565: FILE: mm/sslab.c:367:
+	* (void **) object = prior;
 	^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#601: FILE: mm/sslab.c:403:
+int sslab_pointer_valid(struct sslab *s, void *object) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#602: FILE: mm/sslab.c:404:
+	struct page * page;

WARNING:REPEATED_WORD: Possible repeated word: 'we'
#624: FILE: mm/sslab.c:426:
+ * Preload the cache with enough slabs so that we we not need to

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#631: FILE: mm/sslab.c:433:
+	struct page * page = s->cpuslab[cpu];

CHECK:LINE_SPACING: Please don't use multiple blank lines
#649: FILE: mm/sslab.c:451:
+
+

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#662: FILE: mm/sslab.c:464:
+void sslab_shrink(struct sslab *s) {

ERROR:SPACING: space required after that ',' (ctx:VxO)
#663: FILE: mm/sslab.c:465:
+	struct list_head *h1,*h2;
 	                    ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#663: FILE: mm/sslab.c:465:
+	struct list_head *h1,*h2;
 	                     ^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#685: FILE: mm/sslab.c:487:
+
+}

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#702: FILE: mm/sslab.c:504:
+	BUG_ON(s->slabs);

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.49477.commit.854653e507b7bb519ec765e9aeb4a048324cabaf total: 11 errors, 29 warnings, 20 checks, 617 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.49477.commit.854653e507b7bb519ec765e9aeb4a048324cabaf has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
