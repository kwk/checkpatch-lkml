WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#68: 
	- create or change an event sets. By default a context is created with only one

WARNING:TYPO_SPELLING: 'explicitely' may be misspelled - perhaps 'explicitly'?
#72: 
	- delete any explicitely created event set
	             ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#87: FILE: perfmon/perfmon_syscalls.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#108: FILE: perfmon/perfmon_syscalls.c:22:
+ * ^Ihttp://www.hpl.hp.com/research/linux/perfmon$

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#113: FILE: perfmon/perfmon_syscalls.c:27:
+#include <asm/uaccess.h>

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#115: FILE: perfmon/perfmon_syscalls.c:29:
+struct pfm_context * pfm_get_ctx(int fd)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#117: FILE: perfmon/perfmon_syscalls.c:31:
+	struct file *filp;
 	             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#120: FILE: perfmon/perfmon_syscalls.c:34:
+	filp = fget(fd);
 	^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#121: FILE: perfmon/perfmon_syscalls.c:35:
+	if (unlikely(filp == NULL)) {
 	             ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!filp"
#121: FILE: perfmon/perfmon_syscalls.c:35:
+	if (unlikely(filp == NULL)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#128: FILE: perfmon/perfmon_syscalls.c:42:
+		fput(filp);
 		     ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#136: FILE: perfmon/perfmon_syscalls.c:50:
+	if (filp != ctx->filp && ctx->filp) {
 	    ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#136: FILE: perfmon/perfmon_syscalls.c:50:
+	if (filp != ctx->filp && ctx->filp) {
 	                 ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#136: FILE: perfmon/perfmon_syscalls.c:50:
+	if (filp != ctx->filp && ctx->filp) {
 	                              ^^^^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#136: FILE: perfmon/perfmon_syscalls.c:50:
+	if (filp != ctx->filp && ctx->filp) {
+		PFM_DBG("filp is different");
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#137: FILE: perfmon/perfmon_syscalls.c:51:
+		PFM_DBG("filp is different");
 		         ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#141: FILE: perfmon/perfmon_syscalls.c:55:
+	 * update filp
 	          ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#143: FILE: perfmon/perfmon_syscalls.c:57:
+	ctx->filp = filp;
 	     ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#143: FILE: perfmon/perfmon_syscalls.c:57:
+	ctx->filp = filp;
 	            ^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'task->state != TASK_STOPPED'
#221: FILE: perfmon/perfmon_syscalls.c:135:
+		if ((task->state != TASK_STOPPED)
+		     && (task->state != TASK_TRACED)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'task->state != TASK_TRACED'
#221: FILE: perfmon/perfmon_syscalls.c:135:
+		if ((task->state != TASK_STOPPED)
+		     && (task->state != TASK_TRACED)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#222: FILE: perfmon/perfmon_syscalls.c:136:
+		if ((task->state != TASK_STOPPED)
+		     && (task->state != TASK_TRACED)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!addr"
#289: FILE: perfmon/perfmon_syscalls.c:203:
+	if (unlikely(addr == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!f"
#316: FILE: perfmon/perfmon_syscalls.c:230:
+	if (f == NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#332: FILE: perfmon/perfmon_syscalls.c:246:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!addr"
#335: FILE: perfmon/perfmon_syscalls.c:249:
+	if (addr == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#437: FILE: perfmon/perfmon_syscalls.c:351:
+	if (unlikely(ctx == NULL))

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#440: FILE: perfmon/perfmon_syscalls.c:354:
+	sz = count*sizeof(*ureq);
 	          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#478: FILE: perfmon/perfmon_syscalls.c:392:
+	if (unlikely(ctx == NULL))

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#481: FILE: perfmon/perfmon_syscalls.c:395:
+	sz = count*sizeof(*ureq);
 	          ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#519: FILE: perfmon/perfmon_syscalls.c:433:
+	if (unlikely(ctx == NULL))

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#522: FILE: perfmon/perfmon_syscalls.c:436:
+	sz = count*sizeof(*ureq);
 	          ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#554: FILE: perfmon/perfmon_syscalls.c:468:
+	if (unlikely(ctx == NULL))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#570: FILE: perfmon/perfmon_syscalls.c:484:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#578: FILE: perfmon/perfmon_syscalls.c:492:
+	if (unlikely(ctx == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#602: FILE: perfmon/perfmon_syscalls.c:516:
+	if (ctx == NULL)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#624: FILE: perfmon/perfmon_syscalls.c:538:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#634: FILE: perfmon/perfmon_syscalls.c:548:
+	if (ctx == NULL)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#657: FILE: perfmon/perfmon_syscalls.c:571:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#665: FILE: perfmon/perfmon_syscalls.c:579:
+	if (ctx == NULL)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#670: FILE: perfmon/perfmon_syscalls.c:584:
+	ret = pfm_check_task_state(ctx, PFM_CMD_STOPPED|PFM_CMD_UNLOAD, &flags);
 	                                               ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#693: FILE: perfmon/perfmon_syscalls.c:607:
+	if (ctx == NULL)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#696: FILE: perfmon/perfmon_syscalls.c:610:
+	sz = count*sizeof(*ureq);
 	          ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#733: FILE: perfmon/perfmon_syscalls.c:647:
+	if (ctx == NULL)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#736: FILE: perfmon/perfmon_syscalls.c:650:
+	sz = count*sizeof(*ureq);
 	          ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#773: FILE: perfmon/perfmon_syscalls.c:687:
+	if (ctx == NULL)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#776: FILE: perfmon/perfmon_syscalls.c:690:
+	sz = count*sizeof(*ureq);
 	          ^

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.44971.commit.28ed4a1df170caec094f1c8cc9cf9a09e097bce8 total: 2 errors, 17 warnings, 28 checks, 712 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.44971.commit.28ed4a1df170caec094f1c8cc9cf9a09e097bce8 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
