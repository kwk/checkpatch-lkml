WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
This patch adds abstraction so that the file can be used by environments other

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#41: FILE: include/asm-ia64/swiotlb.h:1:
+#ifndef _ASM_SWIOTLB_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:NEW_TYPEDEFS: do not add new typedefs
#91: FILE: lib/swiotlb.c:108:
+typedef char *io_tlb_addr_t;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'bytes' may be better as '(bytes)' to avoid precedence issues
#129: FILE: lib/swiotlb.c:153:
+#define swiotlb_print_info(bytes) \
+	printk(KERN_INFO "Placing %luMB software IO TLB between 0x%lx - " \
+	       "0x%lx\n", bytes >> 20, \
+	       virt_to_bus(io_tlb_start), virt_to_bus(io_tlb_end))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#130: FILE: lib/swiotlb.c:154:
+	printk(KERN_INFO "Placing %luMB software IO TLB between 0x%lx - " \

ERROR:SPACING: space prohibited after that open parenthesis '('
#153: FILE: lib/swiotlb.c:192:
+		if ( !(i % IO_TLB_SEGSIZE) )

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that close parenthesis ')'
#153: FILE: lib/swiotlb.c:192:
+		if ( !(i % IO_TLB_SEGSIZE) )

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#155: FILE: lib/swiotlb.c:194:
+			swiotlb_adjust_seg(io_tlb_start + (i << IO_TLB_SHIFT),
+				IO_TLB_SEGSIZE << IO_TLB_SHIFT);

ERROR:CODE_INDENT: code indent should use tabs where possible
#157: FILE: lib/swiotlb.c:196:
+ ^I}$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#157: FILE: lib/swiotlb.c:196:
+ ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#157: FILE: lib/swiotlb.c:196:
+ ^I}$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#174: FILE: lib/swiotlb.c:210:
 }
+#ifndef __swiotlb_init_with_default_size

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#182: FILE: lib/swiotlb.c:217:
+	__swiotlb_init_with_default_size(64 * (1<<20)); /* default to 64MB */
 	                                        ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#196: FILE: lib/swiotlb.c:279:
+^I                           get_order(io_tlb_nslabs * sizeof(io_tlb_addr_t)));$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dir == DMA_FROM_DEVICE'
#297: FILE: lib/swiotlb.c:446:
+	if (!swiotlb_orig_addr_null(buffer)
+	    && ((dir == DMA_FROM_DEVICE) || (dir == DMA_BIDIRECTIONAL)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dir == DMA_BIDIRECTIONAL'
#297: FILE: lib/swiotlb.c:446:
+	if (!swiotlb_orig_addr_null(buffer)
+	    && ((dir == DMA_FROM_DEVICE) || (dir == DMA_BIDIRECTIONAL)))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#298: FILE: lib/swiotlb.c:447:
+	if (!swiotlb_orig_addr_null(buffer)
+	    && ((dir == DMA_FROM_DEVICE) || (dir == DMA_BIDIRECTIONAL)))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#375: FILE: lib/swiotlb.c:621:
+	if (!range_needs_mapping(ptr, size)
+	    && !address_needs_mapping(hwdev, dev_addr))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#403: FILE: lib/swiotlb.c:763:
+		if (range_needs_mapping(SG_ENT_VIRT_ADDRESS(sg), sg->length)
+		    || address_needs_mapping(hwdev, dev_addr)) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#441: FILE: lib/swiotlb.c:867:
+	BUG_ON(direction == DMA_NONE);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.05185.commit.da35b27b5a6af9b91ac925d2d7d5dce75819ccb4 total: 4 errors, 7 warnings, 9 checks, 402 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.05185.commit.da35b27b5a6af9b91ac925d2d7d5dce75819ccb4 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
