WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#42: 
The glibc part has also been updated and the x86_64 version is now implemented too.

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#157: FILE: kernel/futex.c:272:
+		uaddr = (void*)((key->shared.pgoff << PAGE_SHIFT)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#161: FILE: kernel/futex.c:276:
+		uaddr = (void*)(key->private.address + key->private.offset);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#325: FILE: kernel/futex.c:740:
+	if (!(curval & FUTEX_TID_MASK)
+	    || lookup_pi_state(curval, hb, key, pi_state)) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#327: FILE: kernel/futex.c:742:
+		/* the futex has no owner (yet) or the lookup failed:
+		   allocate one pi_state without owner */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#327: FILE: kernel/futex.c:742:
+		   allocate one pi_state without owner */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cmpval"
#380: FILE: kernel/futex.c:795:
+	if (likely(cmpval != NULL)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#411: FILE: kernel/futex.c:826:
+		if (!match_futex (&this->key, &key1))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#419: FILE: kernel/futex.c:834:
+			if (!pi_state2) {
[...]
+			} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#435: FILE: kernel/futex.c:850:
+			} else

CHECK:LINE_SPACING: Please don't use multiple blank lines
#438: FILE: kernel/futex.c:853:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#458: FILE: kernel/futex.c:873:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#478: FILE: kernel/futex.c:893:
+	/* If we've requeued some tasks and the top_waiter of the rt_mutex
+	   has changed, we must adjust the priority of the owner, if any */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#478: FILE: kernel/futex.c:893:
+	   has changed, we must adjust the priority of the owner, if any */

WARNING:LINE_SPACING: Missing a blank line after declarations
#481: FILE: kernel/futex.c:896:
+		struct task_struct *owner = rt_mutex_owner(lock2);
+		if (owner &&

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#481: FILE: kernel/futex.c:896:
+		if (owner &&

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#542: FILE: kernel/futex.c:1288:
+static void unqueue_me_pi(struct futex_q *q)
  {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#572: FILE: kernel/futex.c:1318:
+	if (pi_state->owner != NULL) {
[...]
+	} else
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pi_state->owner"
#572: FILE: kernel/futex.c:1318:
+	if (pi_state->owner != NULL) {

CHECK:BRACES: Unbalanced braces around else statement
#577: FILE: kernel/futex.c:1323:
+	} else

ERROR:CODE_INDENT: code indent should use tabs where possible
#602: FILE: kernel/futex.c:1348:
+ ^I^I^Iret = -EFAULT;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#602: FILE: kernel/futex.c:1348:
+ ^I^I^Iret = -EFAULT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#602: FILE: kernel/futex.c:1348:
+ ^I^I^Iret = -EFAULT;$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#661: FILE: kernel/futex.c:1502:
+		if (unlikely(q.waiter.task)) {
+			remove_waiter(lock, &q.waiter, flags);
+		}

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#687: FILE: kernel/futex.c:1528:
+			/* mmap_sem and hash_bucket lock are unlocked at
+			   return of this function */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#687: FILE: kernel/futex.c:1528:
+			   return of this function */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#732: FILE: kernel/futex.c:1585:
+		if (match_futex (&this->key, key)) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#738: FILE: kernel/futex.c:1591:
+	BUG_ON(!pi_state);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:BRACES: Unbalanced braces around else statement
#816: FILE: kernel/futex.c:1703:
+	} else

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#818: FILE: kernel/futex.c:1705:
+		/* Set the WAITERS flag, so the owner will know it has someone
+		   to wake at next unlock */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#818: FILE: kernel/futex.c:1705:
+		   to wake at next unlock */

CHECK:BRACES: Unbalanced braces around else statement
#887: FILE: kernel/futex.c:1792:
+	else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#939: FILE: kernel/futex.c:2342:
+	if (pi_state->owner != NULL) {
[...]
+	} else
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pi_state->owner"
#939: FILE: kernel/futex.c:2342:
+	if (pi_state->owner != NULL) {

CHECK:BRACES: Unbalanced braces around else statement
#944: FILE: kernel/futex.c:2347:
+	} else

ERROR:CODE_INDENT: code indent should use tabs where possible
#969: FILE: kernel/futex.c:2372:
+ ^I^I^Iret = -EFAULT;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#969: FILE: kernel/futex.c:2372:
+ ^I^I^Iret = -EFAULT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#969: FILE: kernel/futex.c:2372:
+ ^I^I^Iret = -EFAULT;$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1087: FILE: kernel/futex.c:2755:
+	if (!(curval & FUTEX_TID_MASK)
+	    || lookup_pi_state(curval, hb, key, pi_state)) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1089: FILE: kernel/futex.c:2757:
+		/* the futex has no owner (yet) or the lookup failed:
+		   allocate one pi_state without owner */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1089: FILE: kernel/futex.c:2757:
+		   allocate one pi_state without owner */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1109: FILE: kernel/futex.c:2777:
+static int futex_requeue_pi64(u64 __user *uaddr1, u64 __user *uaddr2,
+			    int nr_wake, int nr_requeue, u64 *cmpval)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cmpval"
#1142: FILE: kernel/futex.c:2810:
+	if (likely(cmpval != NULL)) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1173: FILE: kernel/futex.c:2841:
+		if (!match_futex (&this->key, &key1))

CHECK:BRACES: braces {} should be used on all arms of this statement
#1181: FILE: kernel/futex.c:2849:
+			if (!pi_state2) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1198: FILE: kernel/futex.c:2866:
+			} else

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1201: FILE: kernel/futex.c:2869:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1221: FILE: kernel/futex.c:2889:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1241: FILE: kernel/futex.c:2909:
+	/* If we've requeued some tasks and the top_waiter of the rt_mutex
+	   has changed, we must adjust the priority of the owner, if any */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1241: FILE: kernel/futex.c:2909:
+	   has changed, we must adjust the priority of the owner, if any */

WARNING:LINE_SPACING: Missing a blank line after declarations
#1244: FILE: kernel/futex.c:2912:
+		struct task_struct *owner = rt_mutex_owner(lock2);
+		if (owner &&

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1244: FILE: kernel/futex.c:2912:
+		if (owner &&

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1343: FILE: kernel/futex.c:3106:
+		if (unlikely(q.waiter.task)) {
+			remove_waiter(lock, &q.waiter, flags);
+		}

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1369: FILE: kernel/futex.c:3132:
+			/* mmap_sem and hash_bucket lock are unlocked at
+			   return of this function */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1369: FILE: kernel/futex.c:3132:
+			   return of this function */

CHECK:BRACES: Unbalanced braces around else statement
#1445: FILE: kernel/futex.c:3256:
+	} else

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1447: FILE: kernel/futex.c:3258:
+		/* Set the WAITERS flag, so the owner will know it has someone
+		   to wake at next unlock */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1447: FILE: kernel/futex.c:3258:
+		   to wake at next unlock */

CHECK:BRACES: Unbalanced braces around else statement
#1516: FILE: kernel/futex.c:3345:
+	else {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1545: FILE: kernel/futex.c:3563:
+	if (op == FUTEX_REQUEUE || op == FUTEX_CMP_REQUEUE
+	    || op == FUTEX_CMP_REQUEUE_PI)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1555: FILE: kernel/futex.c:3588:
+	if (op == FUTEX_REQUEUE || op == FUTEX_CMP_REQUEUE
+	    || op == FUTEX_CMP_REQUEUE_PI)

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1568: FILE: kernel/rtmutex.c:59:
+void
  rt_mutex_set_owner(struct rt_mutex *lock, struct task_struct *owner,
  		   unsigned long mask)
  {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1607: FILE: kernel/rtmutex.c:120:
+void __rt_mutex_adjust_prio(struct task_struct *task)
  {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1620: FILE: kernel/rtmutex.c:156:
+int rt_mutex_adjust_prio_chain(struct task_struct *task,
+			       int deadlock_detect,
+			       struct rt_mutex *orig_lock,
+			       struct rt_mutex_waiter *orig_waiter,
+			       struct task_struct *top_task)
  {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1635: FILE: kernel/rtmutex.c:521:
+void remove_waiter(struct rt_mutex *lock,
+		   struct rt_mutex_waiter *waiter,
+		   unsigned long flags)
  {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1653: FILE: kernel/rtmutex_common.h:120:
+# define rt_mutex_cmpxchg(l,c,n)	(cmpxchg(&l->owner, c, n) == c)
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1653: FILE: kernel/rtmutex_common.h:120:
+# define rt_mutex_cmpxchg(l,c,n)	(cmpxchg(&l->owner, c, n) == c)
                              ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'l' may be better as '(l)' to avoid precedence issues
#1653: FILE: kernel/rtmutex_common.h:120:
+# define rt_mutex_cmpxchg(l,c,n)	(cmpxchg(&l->owner, c, n) == c)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c' - possible side-effects?
#1653: FILE: kernel/rtmutex_common.h:120:
+# define rt_mutex_cmpxchg(l,c,n)	(cmpxchg(&l->owner, c, n) == c)

CHECK:SPACING: No space is necessary after a cast
#1656: FILE: kernel/rtmutex_common.h:123:
+	unsigned long owner, *p = (unsigned long *) &lock->owner;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1664: FILE: kernel/rtmutex_common.h:131:
+# define rt_mutex_cmpxchg(l,c,n)	(0)
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1664: FILE: kernel/rtmutex_common.h:131:
+# define rt_mutex_cmpxchg(l,c,n)	(0)
                              ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1681: FILE: kernel/rtmutex_common.h:148:
+extern void rt_mutex_set_owner(struct rt_mutex *lock, struct task_struct *owner,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1683: FILE: kernel/rtmutex_common.h:150:
+extern void __rt_mutex_adjust_prio(struct task_struct *task);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1684: FILE: kernel/rtmutex_common.h:151:
+extern int rt_mutex_adjust_prio_chain(struct task_struct *task,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1689: FILE: kernel/rtmutex_common.h:156:
+extern void remove_waiter(struct rt_mutex *lock,

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1703: FILE: kernel/futex_compat.c:154:
+	if (op == FUTEX_REQUEUE || op == FUTEX_CMP_REQUEUE
+	    || op == FUTEX_CMP_REQUEUE_PI)

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.04879.commit.71dd233a1f3817da8f5a2aa6660c93a90502ed1c total: 15 errors, 29 warnings, 33 checks, 1546 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.04879.commit.71dd233a1f3817da8f5a2aa6660c93a90502ed1c has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
