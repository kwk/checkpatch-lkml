ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#102: FILE: include/linux/sysctl.h:153:
+	KERN_ISO_CPU=75,	/* percent cpu SCHED_ISO tasks run SCHED_RR */
 	            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'alloted' may be misspelled - perhaps 'allotted'?
#157: FILE: kernel/sched.c:2653:
+ * Test if SCHED_ISO tasks have run longer than their alloted period as RT
                                                       ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:BRACES: Unbalanced braces around else statement
#166: FILE: kernel/sched.c:2662:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#185: FILE: kernel/sched.c:2698:
+	if (unlikely((rt_task(p) || (iso_task(p) && !rq->iso_refractory)) &&
[...]
+			if (rq->iso_ticks <= (ISO_PERIOD * 100) - 100)

CHECK:BRACES: braces {} should be used on all arms of this statement
#185: FILE: kernel/sched.c:2698:
+	if (unlikely((rt_task(p) || (iso_task(p) && !rq->iso_refractory)) &&
[...]
+	} else
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#186: FILE: kernel/sched.c:2699:
+	if (unlikely((rt_task(p) || (iso_task(p) && !rq->iso_refractory)) &&
+	    p->mm)) {

CHECK:BRACES: Unbalanced braces around else statement
#189: FILE: kernel/sched.c:2702:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#193: FILE: kernel/sched.c:2706:
+		if (unlikely(test_ret_isorefractory(rq))) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#198: FILE: kernel/sched.c:2711:
+		} else

CHECK:BRACES: Unbalanced braces around else statement
#200: FILE: kernel/sched.c:2713:
+	} else

CHECK:LINE_SPACING: Please don't use multiple blank lines
#205: FILE: kernel/sched.c:2718:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#268: FILE: kernel/sched.c:6059:
+		rq->nr_running = rq->cache_ticks = rq->preempted =

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#282: FILE: kernel/sysctl.c:233:
+/* Constants for minimum and maximum testing.
+   We use these as one-element integer vectors. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#282: FILE: kernel/sysctl.c:233:
+   We use these as one-element integer vectors. */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#297: FILE: kernel/sysctl.c:651:
+		.maxlen		= sizeof (int),

WARNING:DUPLICATED_SYSCTL_CONST: duplicated sysctl range checking value 'zero', consider using the shared one in include/linux/sysctl.h
#301: FILE: kernel/sysctl.c:655:
+		.extra1		= &zero,

Commit d91bff3011cf ("proc/sysctl: add shared variables for range
check") added some shared const variables to be used instead of a local
copy in each source file.

Consider replacing the sysctl range checking value with the shared
one in include/linux/sysctl.h.  The following conversion scheme may
be used::

  &zero     ->  SYSCTL_ZERO
  &one      ->  SYSCTL_ONE
  &int_max  ->  SYSCTL_INT_MAX

See:

  1. https://lore.kernel.org/lkml/20190430180111.10688-1-mcroce@redhat.com/
  2. https://lore.kernel.org/lkml/20190531131422.14970-1-mcroce@redhat.com/

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.68260.commit.93532c7eb4c03b6329a638c637792eb55ffb440f total: 1 errors, 6 warnings, 9 checks, 261 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.68260.commit.93532c7eb4c03b6329a638c637792eb55ffb440f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
