WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#76: FILE: lib/radix-tree.c:106:
+	BUG_ON(radix_tree_is_direct_ptr(ret));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#113: FILE: lib/radix-tree.c:249:
+		newheight = root->height+1;
 		                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#127: FILE: lib/radix-tree.c:275:
+	BUG_ON(radix_tree_is_direct_ptr(item));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!node"
#188: FILE: lib/radix-tree.c:345:
+	if (node == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#209: FILE: lib/radix-tree.c:362:
+			(node->slots + ((index>>shift) & RADIX_TREE_MAP_MASK));
 			                      ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!node"
#211: FILE: lib/radix-tree.c:364:
+		if (node == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!node"
#257: FILE: lib/radix-tree.c:393:
+	if (node == NULL)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#272: FILE: lib/radix-tree.c:406:
+	shift = (height-1) * RADIX_TREE_MAP_SHIFT;
 	               ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#276: FILE: lib/radix-tree.c:410:
+			(node->slots + ((index>>shift) & RADIX_TREE_MAP_MASK));
 			                      ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!node"
#278: FILE: lib/radix-tree.c:412:
+		if (node == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#295: FILE: lib/radix-tree.c:597:
+__lookup(struct radix_tree_node *slot, void **results, unsigned long index,
 	unsigned int max_items, unsigned long *next_index)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "__s"
#321: FILE: lib/radix-tree.c:614:
+			if (__s != NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#390: FILE: lib/radix-tree.c:694:
+		nr_found = __lookup(node, results + ret, cur_index,
 					max_items - ret, &next_index);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#409: FILE: lib/radix-tree.c:714:
+__lookup_tag(struct radix_tree_node *slot, void **results, unsigned long index,
 	unsigned int max_items, unsigned long *next_index, unsigned int tag)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#587: FILE: include/linux/radix-tree.h:79:
+	BUG_ON(radix_tree_is_direct_ptr(item));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#589: FILE: include/linux/radix-tree.h:81:
+	rcu_assign_pointer(*slot,
+		(void *)((unsigned long)item | ((unsigned long)*slot & RADIX_TREE_DIRECT_PTR)));

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.67355.commit.856148442da7d522b68cdee6a7a80571a99465bc total: 0 errors, 3 warnings, 13 checks, 529 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.67355.commit.856148442da7d522b68cdee6a7a80571a99465bc has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
