CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#33: 
Jörn
 ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#158: FILE: fs/logfs/logfs.h:1:
+#ifndef logfs_h

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'stricly' may be misspelled - perhaps 'strictly'?
#166: FILE: fs/logfs/logfs.h:9:
+ * various positions or offsets.  To remove confusion, we stricly
                                                           ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'seperate' may be misspelled - perhaps 'separate'?
#193: FILE: fs/logfs/logfs.h:36:
+ * Levels 5-15 are necessary for robust gc operations and help seperate
                                                                ^^^^^^^^

WARNING:TYPO_SPELLING: 'seperated' may be misspelled - perhaps 'separated'?
#195: FILE: fs/logfs/logfs.h:38:
+ * is seperated into several segments based on simple heuristics.  Old
       ^^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#201: FILE: fs/logfs/logfs.h:44:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#210: FILE: fs/logfs/logfs.h:53:
+	return (__force pos_t) be64_to_cpu(p);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#215: FILE: fs/logfs/logfs.h:58:
+	return cpu_to_be64((__force u64) p);

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((__packed__))
#218: FILE: fs/logfs/logfs.h:61:
+#define packed __attribute__((__packed__))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#220: FILE: fs/logfs/logfs.h:63:
+
+

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#222: FILE: fs/logfs/logfs.h:65:
+#if 0

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#229: FILE: fs/logfs/logfs.h:72:
+	printk("trace: %s:%d: ", __FILE__, __LINE__);		\

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#231: FILE: fs/logfs/logfs.h:74:
+	printk("->%s\n", __func__);				\

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#231: FILE: fs/logfs/logfs.h:74:
+	printk("->%s\n", __func__);				\

ERROR:SPACING: space required before the open parenthesis '('
#232: FILE: fs/logfs/logfs.h:75:
+} while(0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#234: FILE: fs/logfs/logfs.h:77:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#238: FILE: fs/logfs/logfs.h:81:
+
+

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#243: FILE: fs/logfs/logfs.h:86:
+#define LOGFS_BLOCK_MASK (LOGFS_BLOCK_FACTOR-1)
                                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#245: FILE: fs/logfs/logfs.h:88:
+#define I0_BLOCKS	(4+16)
                  	  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#252: FILE: fs/logfs/logfs.h:95:
+#define I1_INDEX	(4+16)
                 	  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#253: FILE: fs/logfs/logfs.h:96:
+#define I2_INDEX	(5+16)
                 	  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#254: FILE: fs/logfs/logfs.h:97:
+#define I3_INDEX	(6+16)
                 	  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#255: FILE: fs/logfs/logfs.h:98:
+#define I4_INDEX	(7+16)
                 	  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#256: FILE: fs/logfs/logfs.h:99:
+#define I5_INDEX	(8+16)
                 	  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#258: FILE: fs/logfs/logfs.h:101:
+#define LOGFS_EMBEDDED_FIELDS	(9+16)
                              	  ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#273: FILE: fs/logfs/logfs.h:116:
+
+

ERROR:SPACING: space required after that close brace '}'
#296: FILE: fs/logfs/logfs.h:139:
+}packed;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#298: FILE: fs/logfs/logfs.h:141:
+
+

ERROR:SPACING: space required after that close brace '}'
#318: FILE: fs/logfs/logfs.h:161:
+}packed;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#320: FILE: fs/logfs/logfs.h:163:
+
+

ERROR:SPACING: space required after that close brace '}'
#327: FILE: fs/logfs/logfs.h:170:
+}packed;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#329: FILE: fs/logfs/logfs.h:172:
+
+

ERROR:SPACING: space required after that close brace '}'
#333: FILE: fs/logfs/logfs.h:176:
+}packed;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#335: FILE: fs/logfs/logfs.h:178:
+
+

ERROR:SPACING: space required after that close brace '}'
#346: FILE: fs/logfs/logfs.h:189:
+}packed;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#348: FILE: fs/logfs/logfs.h:191:
+
+

ERROR:SPACING: space required after that close brace '}'
#358: FILE: fs/logfs/logfs.h:201:
+}packed;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#360: FILE: fs/logfs/logfs.h:203:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#366: FILE: fs/logfs/logfs.h:209:
+
+

ERROR:SPACING: space required after that close brace '}'
#375: FILE: fs/logfs/logfs.h:218:
+}packed;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#377: FILE: fs/logfs/logfs.h:220:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#381: FILE: fs/logfs/logfs.h:224:
+
+

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#382: FILE: fs/logfs/logfs.h:225:
+#define LOGFS_SUPER(sb) ((struct logfs_super*)(sb->s_fs_info))

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'sb' may be better as '(sb)' to avoid precedence issues
#382: FILE: fs/logfs/logfs.h:225:
+#define LOGFS_SUPER(sb) ((struct logfs_super*)(sb->s_fs_info))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#385: FILE: fs/logfs/logfs.h:228:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#396: FILE: fs/logfs/logfs.h:239:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#402: FILE: fs/logfs/logfs.h:245:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#415: FILE: fs/logfs/logfs.h:258:
+
+

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#454: FILE: fs/logfs/logfs.h:297:
+	struct mutex s_w_sem;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#456: FILE: fs/logfs/logfs.h:299:
+	be64	*s_wblock[LOGFS_MAX_INDIRECT+1];
 	    	                            ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#462: FILE: fs/logfs/logfs.h:305:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#470: FILE: fs/logfs/logfs.h:313:
+
+

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#475: FILE: fs/logfs/logfs.h:318:
+}
+static inline size_t logfs_segstruct_size(struct logfs_super *super)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#480: FILE: fs/logfs/logfs.h:323:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#486: FILE: fs/logfs/logfs.h:329:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#490: FILE: fs/logfs/logfs.h:333:
+	struct logfs_super *super = LOGFS_SUPER(sb);
+	if (ino == LOGFS_INO_MASTER) /* never iget this "inode"! */

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#494: FILE: fs/logfs/logfs.h:337:
+}
+static inline void logfs_iput(struct inode *inode)

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#496: FILE: fs/logfs/logfs.h:339:
+	if (inode->i_ino == LOGFS_INO_MASTER) /* never iput it either! */
 	                                               ^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#498: FILE: fs/logfs/logfs.h:341:
+	iput(inode);
 	^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#501: FILE: fs/logfs/logfs.h:344:
+
+

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#506: FILE: fs/logfs/logfs.h:349:
+}
+static inline void free_disk_sum(struct logfs_disk_sum *sum)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#511: FILE: fs/logfs/logfs.h:354:
+
+

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#513: FILE: fs/logfs/logfs.h:356:
+extern struct inode_operations logfs_dir_iops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#514: FILE: fs/logfs/logfs.h:357:
+extern struct file_operations logfs_dir_fops;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#516: FILE: fs/logfs/logfs.h:359:
+
+

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#518: FILE: fs/logfs/logfs.h:361:
+extern struct inode_operations logfs_reg_iops;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#519: FILE: fs/logfs/logfs.h:362:
+extern struct file_operations logfs_reg_fops;

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#520: FILE: fs/logfs/logfs.h:363:
+extern struct address_space_operations logfs_reg_aops;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#524: FILE: fs/logfs/logfs.h:367:
+
+

ERROR:POINTER_LOCATION: "foo*bar" should be "foo *bar"
#527: FILE: fs/logfs/logfs.h:370:
+s64 logfs_get_free_block(struct logfs_super*super, int level, u64 ino, pos_t pos);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#534: FILE: fs/logfs/logfs.h:377:
+void logfs_disk_to_sum(struct logfs_super *super, struct logfs_segment *seg,
+		struct logfs_disk_sum *sum);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#536: FILE: fs/logfs/logfs.h:379:
+void logfs_sum_to_disk(struct logfs_super *super, struct logfs_segment *seg,
+		struct logfs_disk_sum *sum);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#540: FILE: fs/logfs/logfs.h:383:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#549: FILE: fs/logfs/logfs.h:392:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#555: FILE: fs/logfs/logfs.h:398:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#559: FILE: fs/logfs/logfs.h:402:
+int logfs_inode_write_nolock(struct inode *inode, const void *buf, size_t n,
+		loff_t _pos);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#561: FILE: fs/logfs/logfs.h:404:
+int logfs_inode_write(struct inode *inode, const void *buf, size_t n,
+		loff_t pos);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#563: FILE: fs/logfs/logfs.h:406:
+int logfs_inode_write_loop(struct inode *inode, const void *buf, size_t n,
+		loff_t _pos);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#581: FILE: fs/logfs/logfs.h:424:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#584: FILE: fs/logfs/logfs.h:427:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#587: FILE: fs/logfs/logfs.h:430:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#592: FILE: fs/logfs/dir.c:1:
+#include <linux/fs.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#602: FILE: fs/logfs/dir.c:11:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#609: FILE: fs/logfs/dir.c:18:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#616: FILE: fs/logfs/dir.c:25:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#620: FILE: fs/logfs/dir.c:29:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#622: FILE: fs/logfs/dir.c:31:
+static int __logfs_dir_walk(struct inode *dir, struct dentry *dentry,
+		dir_callback handler, struct logfs_disk_dentry *dd, loff_t *pos)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#628: FILE: fs/logfs/dir.c:37:
+	BUG_ON(sizeof(*dd) != 256);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#629: FILE: fs/logfs/dir.c:38:
+	BUG_ON(i_size_read(dir) % sizeof(*dd));

ERROR:SPACING: space required after that ',' (ctx:VxV)
#631: FILE: fs/logfs/dir.c:40:
+		ret = logfs_inode_read(dir, dd, sizeof(*dd),(*pos)*sizeof(*dd));
 		                                           ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#631: FILE: fs/logfs/dir.c:40:
+		ret = logfs_inode_read(dir, dd, sizeof(*dd),(*pos)*sizeof(*dd));
 		                                                  ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#651: FILE: fs/logfs/dir.c:60:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#653: FILE: fs/logfs/dir.c:62:
+static int logfs_dir_walk(struct inode *dir, struct dentry *dentry,
+		dir_callback handler)

WARNING:LINE_SPACING: Missing a blank line after declarations
#657: FILE: fs/logfs/dir.c:66:
+	loff_t pos = 0;
+	return __logfs_dir_walk(dir, dentry, handler, &dd, &pos);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#660: FILE: fs/logfs/dir.c:69:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#662: FILE: fs/logfs/dir.c:71:
+static int logfs_lookup_handler(struct inode *dir, struct dentry *dentry,
+		struct logfs_disk_dentry *dd, loff_t pos)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#673: FILE: fs/logfs/dir.c:82:
+
+

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#675: FILE: fs/logfs/dir.c:84:
+		struct nameidata *nd)
 		                  ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#675: FILE: fs/logfs/dir.c:84:
+static struct dentry *logfs_lookup(struct inode *dir, struct dentry *dentry,
+		struct nameidata *nd)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#684: FILE: fs/logfs/dir.c:93:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#687: FILE: fs/logfs/dir.c:96:
+static int logfs_unlink_handler(struct inode *dir, struct dentry *dentry,
+		struct logfs_disk_dentry *dd, loff_t pos)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#691: FILE: fs/logfs/dir.c:100:
+	return logfs_inode_write(dir, dd, sizeof(*dd), pos*sizeof(*dd));
 	                                                  ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#694: FILE: fs/logfs/dir.c:103:
+
+

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#697: FILE: fs/logfs/dir.c:106:
+	inode->i_ctime = dir->i_ctime = dir->i_mtime = CURRENT_TIME;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#699: FILE: fs/logfs/dir.c:108:
+	printk("unlink: %lx, %x\n", inode->i_ino, inode->i_nlink);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#703: FILE: fs/logfs/dir.c:112:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#718: FILE: fs/logfs/dir.c:127:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#720: FILE: fs/logfs/dir.c:129:
+static int logfs_empty_handler(struct inode *dir, struct dentry *dentry,
+		struct logfs_disk_dentry *dd, loff_t pos)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#725: FILE: fs/logfs/dir.c:134:
+}
+static inline int logfs_empty_dir(struct inode *dir)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#730: FILE: fs/logfs/dir.c:139:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#738: FILE: fs/logfs/dir.c:147:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#756: FILE: fs/logfs/dir.c:165:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#758: FILE: fs/logfs/dir.c:167:
+ * way to combine the two copies */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#767: FILE: fs/logfs/dir.c:176:
+	BUG_ON(pos<0);

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#767: FILE: fs/logfs/dir.c:176:
+	BUG_ON(pos<0);
 	          ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#770: FILE: fs/logfs/dir.c:179:
+		struct inode *dir = file->f_dentry->d_inode;
+		err = logfs_inode_read(dir, &dd, sizeof(dd), pos*sizeof(dd));

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#770: FILE: fs/logfs/dir.c:179:
+		err = logfs_inode_read(dir, &dd, sizeof(dd), pos*sizeof(dd));
 		                                                ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#781: FILE: fs/logfs/dir.c:190:
+		if (filldir(buf, dd.name, be16_to_cpu(dd.namelen), pos,
+					be64_to_cpu(dd.ino), dd.type))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#789: FILE: fs/logfs/dir.c:198:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#805: FILE: fs/logfs/dir.c:214:
+		ino_t pino = parent_ino(file->f_dentry);
+		if (filldir(buf, "..", 2, 2, pino, DT_DIR) < 0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#813: FILE: fs/logfs/dir.c:222:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#815: FILE: fs/logfs/dir.c:224:
+static int logfs_write_dir(struct inode *dir, struct dentry *dentry,
+		struct inode *inode)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#823: FILE: fs/logfs/dir.c:232:
+	BUG_ON(dentry->d_name.len > LOGFS_MAX_NAMELEN);

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#829: FILE: fs/logfs/dir.c:238:
+		iput(inode);
 		^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#836: FILE: fs/logfs/dir.c:245:
+
+

CHECK:SPACING: spaces preferred around that '^' (ctx:VxV)
#838: FILE: fs/logfs/dir.c:247:
+#define LOGFS_LINK_MAX (2^30)
                          ^

WARNING:TYPO_SPELLING: 'creat' may be misspelled - perhaps 'create'?
#851: FILE: fs/logfs/dir.c:260:
+	 * correct for mknod, creat, etc.?
 	                      ^^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#868: FILE: fs/logfs/dir.c:277:
+		iput(inode);
 		^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#874: FILE: fs/logfs/dir.c:283:
+
+

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#876: FILE: fs/logfs/dir.c:285:
+		struct nameidata *nd)
 		                  ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#876: FILE: fs/logfs/dir.c:285:
+static int logfs_create(struct inode *dir, struct dentry *dentry, int mode,
+		struct nameidata *nd)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#893: FILE: fs/logfs/dir.c:302:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#895: FILE: fs/logfs/dir.c:304:
+static int logfs_mknod(struct inode *dir, struct dentry *dentry, int mode,
+		dev_t rdev)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#901: FILE: fs/logfs/dir.c:310:
+	BUG_ON(dentry->d_name.len > LOGFS_MAX_NAMELEN);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#916: FILE: fs/logfs/dir.c:325:
+
+

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#917: FILE: fs/logfs/dir.c:326:
+static struct inode_operations ext2_symlink_iops = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#922: FILE: fs/logfs/dir.c:331:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#924: FILE: fs/logfs/dir.c:333:
+static int logfs_symlink(struct inode *dir, struct dentry *dentry,
+		const char *target)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#930: FILE: fs/logfs/dir.c:339:
+	inode = logfs_new_inode(dir, S_IFLNK | S_IRWXUGO);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#940: FILE: fs/logfs/dir.c:349:
+		iput(inode);
 		^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#946: FILE: fs/logfs/dir.c:355:
+
+

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#947: FILE: fs/logfs/dir.c:356:
+static int logfs_permission(struct inode *inode, int mask, struct nameidata *nd)
                                                                              ^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#952: FILE: fs/logfs/dir.c:361:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#954: FILE: fs/logfs/dir.c:363:
+static int logfs_link(struct dentry *old_dentry, struct inode *dir,
+		struct dentry *dentry)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#962: FILE: fs/logfs/dir.c:371:
+	inode->i_ctime = dir->i_ctime = dir->i_mtime = CURRENT_TIME;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#969: FILE: fs/logfs/dir.c:378:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#971: FILE: fs/logfs/dir.c:380:
+static int logfs_nop_handler(struct inode *dir, struct dentry *dentry,
+		struct logfs_disk_dentry *dd, loff_t pos)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#975: FILE: fs/logfs/dir.c:384:
+}
+static inline int logfs_get_dd(struct inode *dir, struct dentry *dentry,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#976: FILE: fs/logfs/dir.c:385:
+static inline int logfs_get_dd(struct inode *dir, struct dentry *dentry,
+		struct logfs_disk_dentry *dd, loff_t *pos)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#981: FILE: fs/logfs/dir.c:390:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#983: FILE: fs/logfs/dir.c:392:
+static int logfs_rename(struct inode *old_dir, struct dentry *old_dentry,
+		struct inode *new_dir, struct dentry *new_dentry)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#996: FILE: fs/logfs/dir.c:405:
+		BUG_ON(isdir && !S_ISDIR(new_inode->i_mode));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1003: FILE: fs/logfs/dir.c:412:
+		BUG_ON(err); /* target should exist */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1009: FILE: fs/logfs/dir.c:418:
+		err = logfs_inode_write(new_dir, &new_dd, sizeof(new_dd),
+				new_pos*sizeof(new_dd));

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1009: FILE: fs/logfs/dir.c:418:
+				new_pos*sizeof(new_dd));
 				       ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1017: FILE: fs/logfs/dir.c:426:
+		BUG_ON(err); /* FUCK!  we need to clean things up instead */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1020: FILE: fs/logfs/dir.c:429:
+		 * new_dir, so this is correct */

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1025: FILE: fs/logfs/dir.c:434:
+		return err;
+	} else { /* just a move */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1039: FILE: fs/logfs/dir.c:448:
+
+

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#1040: FILE: fs/logfs/dir.c:449:
+struct inode_operations logfs_dir_iops = {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1052: FILE: fs/logfs/dir.c:461:
+};
+struct file_operations logfs_dir_fops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1052: FILE: fs/logfs/dir.c:461:
+struct file_operations logfs_dir_fops = {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1059: FILE: fs/logfs/file.c:1:
+#include <linux/mtd/mtd.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1064: FILE: fs/logfs/file.c:6:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#1066: FILE: fs/logfs/file.c:8:
+               unsigned start, unsigned end)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1066: FILE: fs/logfs/file.c:8:
+static int logfs_prepare_write(struct file *file, struct page *page,
+               unsigned start, unsigned end)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1066: FILE: fs/logfs/file.c:8:
+               unsigned start, unsigned end)$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1066: FILE: fs/logfs/file.c:8:
+               unsigned start, unsigned end)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1066: FILE: fs/logfs/file.c:8:
+               unsigned start, unsigned end)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1068: FILE: fs/logfs/file.c:10:
+       void *buf;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1070: FILE: fs/logfs/file.c:12:
+       TRACE();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1071: FILE: fs/logfs/file.c:13:
+       buf = kmap(page);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1072: FILE: fs/logfs/file.c:14:
+       if (!PageUptodate(page)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#1072: FILE: fs/logfs/file.c:14:
+       if (!PageUptodate(page)) {
[...]
+               memset(buf, 0, PAGE_CACHE_SIZE);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1074: FILE: fs/logfs/file.c:16:
+               memset(buf, 0, PAGE_CACHE_SIZE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1074: FILE: fs/logfs/file.c:16:
+               memset(buf, 0, PAGE_CACHE_SIZE);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1075: FILE: fs/logfs/file.c:17:
+               SetPageUptodate(page);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1075: FILE: fs/logfs/file.c:17:
+               SetPageUptodate(page);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1076: FILE: fs/logfs/file.c:18:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1079: FILE: fs/logfs/file.c:21:
+       kunmap(page);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1081: FILE: fs/logfs/file.c:23:
+       return 0;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1084: FILE: fs/logfs/file.c:26:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1086: FILE: fs/logfs/file.c:28:
+static int logfs_commit_write(struct file *file, struct page *page,
+		unsigned start, unsigned end)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1086: FILE: fs/logfs/file.c:28:
+		unsigned start, unsigned end)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1086: FILE: fs/logfs/file.c:28:
+		unsigned start, unsigned end)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1095: FILE: fs/logfs/file.c:37:
+	pr_debug("ino: %lu, page:%lu, start: %d, len:%d\n", inode->i_ino,
+			page->index, start, end-start);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1095: FILE: fs/logfs/file.c:37:
+			page->index, start, end-start);
 			                       ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1096: FILE: fs/logfs/file.c:38:
+	BUG_ON(PAGE_CACHE_SIZE != LOGFS_BLOCKSIZE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1097: FILE: fs/logfs/file.c:39:
+	BUG_ON(page->index > I3_BLOCKS);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1113: FILE: fs/logfs/file.c:55:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1116: FILE: fs/logfs/file.c:58:
+	BUG();

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1120: FILE: fs/logfs/file.c:62:
+
+

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#1121: FILE: fs/logfs/file.c:63:
+struct inode_operations logfs_reg_iops = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1125: FILE: fs/logfs/file.c:67:
+
+

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1126: FILE: fs/logfs/file.c:68:
+struct file_operations logfs_reg_fops = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1133: FILE: fs/logfs/file.c:75:
+
+

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#1134: FILE: fs/logfs/file.c:76:
+struct address_space_operations logfs_reg_aops = {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1144: FILE: fs/logfs/gc.c:1:
+#include <linux/fs.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1149: FILE: fs/logfs/gc.c:6:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1151: FILE: fs/logfs/gc.c:8:
+static int logfs_is_valid_block_gc(struct super_block *sb, u64 ofs, u64 ino,
+		pos_t pos)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1154: FILE: fs/logfs/gc.c:11:
+	 * blocks are by definition invalid. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1159: FILE: fs/logfs/gc.c:16:
+	 * erased from journal.c sooner or later. */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1166: FILE: fs/logfs/gc.c:23:
+
+

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1171: FILE: fs/logfs/gc.c:28:
+	int end = super->s_no_blocks-1;
 	                            ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'seg_offset >= super->s_log_ofs'
#1180: FILE: fs/logfs/gc.c:37:
+	if ((seg_offset >= super->s_log_ofs)
+			&& (seg_offset - super->s_log_ofs < super->s_log_len))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1181: FILE: fs/logfs/gc.c:38:
+	if ((seg_offset >= super->s_log_ofs)
+			&& (seg_offset - super->s_log_ofs < super->s_log_len))

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1185: FILE: fs/logfs/gc.c:42:
+	for (i=0; i<LOGFS_SEGMENTS; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1185: FILE: fs/logfs/gc.c:42:
+	for (i=0; i<LOGFS_SEGMENTS; i++) {
 	           ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1187: FILE: fs/logfs/gc.c:44:
+		struct logfs_segment *seg = super->s_segs[i];
+		if (seg->active && (seg->ofs == seg_offset))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'seg->ofs == seg_offset'
#1187: FILE: fs/logfs/gc.c:44:
+		if (seg->active && (seg->ofs == seg_offset))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1193: FILE: fs/logfs/gc.c:50:
+	BUG_ON(err);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1195: FILE: fs/logfs/gc.c:52:
+	for (i=0; i<end; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1195: FILE: fs/logfs/gc.c:52:
+	for (i=0; i<end; i++) {
 	           ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1197: FILE: fs/logfs/gc.c:54:
+		u64 ofs = seg_offset + i*super->s_blocksize;
 		                        ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1199: FILE: fs/logfs/gc.c:56:
+		pos_t pos = be64_to_pos(sum->blocks[i].pos);
+		if (logfs_is_valid_block_gc(super->s_sb, ofs, ino, pos))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1207: FILE: fs/logfs/gc.c:64:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1224: FILE: fs/logfs/gc.c:81:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1231: FILE: fs/logfs/gc.c:88:
+	for (i=0; i<super->s_no_segs; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1231: FILE: fs/logfs/gc.c:88:
+	for (i=0; i<super->s_no_segs; i++) {
 	           ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1241: FILE: fs/logfs/gc.c:98:
+
+

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1246: FILE: fs/logfs/gc.c:103:
+	int end = super->s_no_blocks-1;
 	                            ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1251: FILE: fs/logfs/gc.c:108:
+	for (i=0; i<LOGFS_SEGMENTS; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1251: FILE: fs/logfs/gc.c:108:
+	for (i=0; i<LOGFS_SEGMENTS; i++) {
 	           ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1253: FILE: fs/logfs/gc.c:110:
+		struct logfs_segment *seg = super->s_segs[i];
+		if (seg->active && (seg->ofs == seg_offset))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'seg->ofs == seg_offset'
#1253: FILE: fs/logfs/gc.c:110:
+		if (seg->active && (seg->ofs == seg_offset))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1259: FILE: fs/logfs/gc.c:116:
+	BUG_ON(err);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1266: FILE: fs/logfs/gc.c:123:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1273: FILE: fs/logfs/gc.c:130:
+	for (i=0; i<super->s_no_segs; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1273: FILE: fs/logfs/gc.c:130:
+	for (i=0; i<super->s_no_segs; i++) {
 	           ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1277: FILE: fs/logfs/gc.c:134:
+		printk("%5llx, %3d, %2d, %2d ", ofs, logfs_level(super, ofs),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1278: FILE: fs/logfs/gc.c:135:
+		printk("%5llx, %3d, %2d, %2d ", ofs, logfs_level(super, ofs),
+				super->s_valid_count[i], valid);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1280: FILE: fs/logfs/gc.c:137:
+			printk("\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1284: FILE: fs/logfs/gc.c:141:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1286: FILE: fs/logfs/gc.c:143:
+static void logfs_cleanse_block(struct logfs_super *super, u64 ofs, u64 ino,
+		pos_t pos)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1293: FILE: fs/logfs/gc.c:150:
+	BUG_ON(!inode);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1295: FILE: fs/logfs/gc.c:152:
+	BUG_ON(err);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1299: FILE: fs/logfs/gc.c:156:
+
+

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1304: FILE: fs/logfs/gc.c:161:
+	int end = super->s_no_blocks-1;
 	                            ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1310: FILE: fs/logfs/gc.c:167:
+	BUG_ON(err);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1312: FILE: fs/logfs/gc.c:169:
+	for (i=0; i<end; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1312: FILE: fs/logfs/gc.c:169:
+	for (i=0; i<end; i++) {
 	           ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1314: FILE: fs/logfs/gc.c:171:
+		u64 ofs = seg_ofs + i*super->s_blocksize;
 		                     ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1316: FILE: fs/logfs/gc.c:173:
+		pos_t pos = be64_to_pos(sum->blocks[i].pos);
+		if (! logfs_is_valid_block_gc(super->s_sb, ofs, ino, pos))

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#1316: FILE: fs/logfs/gc.c:173:
+		if (! logfs_is_valid_block_gc(super->s_sb, ofs, ino, pos))
 		    ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1324: FILE: fs/logfs/gc.c:181:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1330: FILE: fs/logfs/gc.c:187:
+	BUG_ON(seg_ofs == 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1332: FILE: fs/logfs/gc.c:189:
+	BUG_ON((seg_ofs >= super->s_log_ofs)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1333: FILE: fs/logfs/gc.c:190:
+	BUG_ON((seg_ofs >= super->s_log_ofs)
+			&& (seg_ofs - super->s_log_ofs < super->s_log_len));

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1336: FILE: fs/logfs/gc.c:193:
+	for (i=0; i<LOGFS_SEGMENTS; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1336: FILE: fs/logfs/gc.c:193:
+	for (i=0; i<LOGFS_SEGMENTS; i++) {
 	           ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1338: FILE: fs/logfs/gc.c:195:
+		struct logfs_segment *seg = super->s_segs[i];
+		BUG_ON(seg->active && (seg->ofs == seg_ofs));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1338: FILE: fs/logfs/gc.c:195:
+		BUG_ON(seg->active && (seg->ofs == seg_ofs));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1343: FILE: fs/logfs/gc.c:200:
+
+

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1346: FILE: fs/logfs/gc.c:203:
+	int end = super->s_no_blocks-1;
 	                            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1349: FILE: fs/logfs/gc.c:206:
+	for (i = super->s_sweeper+1; 1 != super->s_sweeper; i++) {
 	                         ^

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1349: FILE: fs/logfs/gc.c:206:
+	for (i = super->s_sweeper+1; 1 != super->s_sweeper; i++) {

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1354: FILE: fs/logfs/gc.c:211:
+			i=1;	/* skip superblock */
 			 ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1361: FILE: fs/logfs/gc.c:218:
+		if (valid > end-1)
 		               ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1363: FILE: fs/logfs/gc.c:220:
+		printk("candidate: %5llx\n", ofs);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1370: FILE: fs/logfs/gc.c:227:
+	BUG();

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1373: FILE: fs/logfs/gc.c:230:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1380: FILE: fs/logfs/gc.c:237:
+		BUG_ON(passes++ > 100);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1397: FILE: fs/logfs/gc.c:254:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1402: FILE: fs/logfs/gc.c:259:
+	for (i=0; i<super->s_no_segs; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1402: FILE: fs/logfs/gc.c:259:
+	for (i=0; i<super->s_no_segs; i++) {
 	           ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1408: FILE: fs/logfs/gc.c:265:
+		BUG_ON(logfs_valid_count(super, ofs) != 0);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1410: FILE: fs/logfs/gc.c:267:
+		super->s_valid_count[i] = super->s_no_blocks-1;
 		                                            ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1415: FILE: fs/logfs/gc.c:272:
+	BUG();

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1419: FILE: fs/logfs/gc.c:276:
+
+

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1425: FILE: fs/logfs/gc.c:282:
+	int end = super->s_no_blocks-1;
 	                            ^

WARNING:MINMAX: max() should probably be max_t(u64, super->s_maxec, seg->erase_count)
#1440: FILE: fs/logfs/gc.c:297:
+	super->s_maxec = max(super->s_maxec, (u64)seg->erase_count);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1443: FILE: fs/logfs/gc.c:300:
+	BUG_ON(err); /* FIXME */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1455: FILE: fs/logfs/gc.c:312:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1457: FILE: fs/logfs/gc.c:314:
+void logfs_disk_to_sum(struct logfs_super *super, struct logfs_segment *seg,
+		struct logfs_disk_sum *sum)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1459: FILE: fs/logfs/gc.c:316:
+	int end = super->s_no_blocks-1;
 	                            ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1473: FILE: fs/logfs/gc.c:330:
+	for (i=0; i<end; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1473: FILE: fs/logfs/gc.c:330:
+	for (i=0; i<end; i++) {
 	           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1477: FILE: fs/logfs/gc.c:334:
+			seg->cur_block = i+1;
 			                  ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1481: FILE: fs/logfs/gc.c:338:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1483: FILE: fs/logfs/gc.c:340:
+void logfs_sum_to_disk(struct logfs_super *super, struct logfs_segment *seg,
+		struct logfs_disk_sum *sum)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1485: FILE: fs/logfs/gc.c:342:
+	int end = super->s_no_blocks-1;
 	                            ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1493: FILE: fs/logfs/gc.c:350:
+	for (i=0; i<end; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1493: FILE: fs/logfs/gc.c:350:
+	for (i=0; i<end; i++) {
 	           ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1505: FILE: fs/logfs/gc.c:362:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1507: FILE: fs/logfs/gc.c:364:
+static int logfs_finish_segment(struct logfs_super *super,
+		struct logfs_segment *seg)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1511: FILE: fs/logfs/gc.c:368:
+	int end = super->s_no_blocks-1;
 	                            ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1525: FILE: fs/logfs/gc.c:382:
+	BUG_ON(err); /* lacking any better means */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1529: FILE: fs/logfs/gc.c:386:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1540: FILE: fs/logfs/gc.c:397:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1550: FILE: fs/logfs/gc.c:407:
+	BUG_ON(ret>0);

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#1550: FILE: fs/logfs/gc.c:407:
+	BUG_ON(ret>0);
 	          ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1561: FILE: fs/logfs/gc.c:418:
+	BUG_ON(ofs >= super->s_size);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1565: FILE: fs/logfs/gc.c:422:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1571: FILE: fs/logfs/gc.c:428:
+	BUG_ON(level >= LOGFS_MAX_LEVELS);

WARNING:TYPO_SPELLING: 'seperate' may be misspelled - perhaps 'separate'?
#1573: FILE: fs/logfs/gc.c:430:
+	if (ino == LOGFS_INO_MASTER)	/* ifile has seperate segments */
 	                            	             ^^^^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1577: FILE: fs/logfs/gc.c:434:
+	BUG_ON(ret <= 0); /* not sure, but it's safer to BUG than to accept */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1581: FILE: fs/logfs/gc.c:438:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1588: FILE: fs/logfs/gc.c:445:
+	for (i=0; i<super->s_no_segs; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1588: FILE: fs/logfs/gc.c:445:
+	for (i=0; i<super->s_no_segs; i++) {
 	           ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1590: FILE: fs/logfs/gc.c:447:
+		int valid = super->s_valid_count[i];
+		free += super->s_segsize/LOGFS_BLOCKSIZE - 1 - valid;

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1590: FILE: fs/logfs/gc.c:447:
+		free += super->s_segsize/LOGFS_BLOCKSIZE - 1 - valid;
 		                        ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1593: FILE: fs/logfs/gc.c:450:
+	printk("free: %lld\n", free);

WARNING:RETURN_VOID: void function return statements are not generally useful
#1595: FILE: fs/logfs/gc.c:452:
+	return;
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1597: FILE: fs/logfs/gc.c:454:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1604: FILE: fs/logfs/gc.c:461:
+	segs = kzalloc(LOGFS_SEGMENTS * logfs_segstruct_size(super),
+			GFP_KERNEL);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1607: FILE: fs/logfs/gc.c:464:
+	for (i=0; i<LOGFS_SEGMENTS; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1607: FILE: fs/logfs/gc.c:464:
+	for (i=0; i<LOGFS_SEGMENTS; i++) {
 	           ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1608: FILE: fs/logfs/gc.c:465:
+		super->s_segs[i] = (void*)segs + i*logfs_segstruct_size(super);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1608: FILE: fs/logfs/gc.c:465:
+		super->s_segs[i] = (void*)segs + i*logfs_segstruct_size(super);
 		                                  ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1615: FILE: fs/logfs/gc.c:472:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1644: FILE: fs/logfs/gc.c:501:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#1648: FILE: fs/logfs/gc.c:505:
+	int i;
+	for (i=0; i<LOGFS_SEGMENTS; i++) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1648: FILE: fs/logfs/gc.c:505:
+	for (i=0; i<LOGFS_SEGMENTS; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1648: FILE: fs/logfs/gc.c:505:
+	for (i=0; i<LOGFS_SEGMENTS; i++) {
 	           ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1655: FILE: fs/logfs/gc.c:512:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1664: FILE: fs/logfs/inode.c:1:
+#include <linux/fs.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1670: FILE: fs/logfs/inode.c:7:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1673: FILE: fs/logfs/inode.c:10:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1685: FILE: fs/logfs/inode.c:22:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1702: FILE: fs/logfs/inode.c:39:
+	for (i=0; i<LOGFS_EMBEDDED_FIELDS; i++)
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1702: FILE: fs/logfs/inode.c:39:
+	for (i=0; i<LOGFS_EMBEDDED_FIELDS; i++)
 	           ^

WARNING:RETURN_VOID: void function return statements are not generally useful
#1706: FILE: fs/logfs/inode.c:43:
+	return;
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1708: FILE: fs/logfs/inode.c:45:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1725: FILE: fs/logfs/inode.c:62:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#1730: FILE: fs/logfs/inode.c:67:
+	struct timespec tsp;
+	tsp.tv_sec = time >> 32;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1735: FILE: fs/logfs/inode.c:72:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#1739: FILE: fs/logfs/inode.c:76:
+	u64 time = ((u64)tsp.tv_sec << 32) + (tsp.tv_nsec & 0xffffffff);
+	return cpu_to_be64(time);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1742: FILE: fs/logfs/inode.c:79:
+
+

ERROR:POINTER_LOCATION: "foo*bar" should be "foo *bar"
#1743: FILE: fs/logfs/inode.c:80:
+static void logfs_disk_to_inode(struct logfs_disk_inode *di, struct inode*inode)

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1761: FILE: fs/logfs/inode.c:98:
+	case S_IFCHR: /* fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1762: FILE: fs/logfs/inode.c:99:
+	case S_IFBLK: /* fall through */

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1767: FILE: fs/logfs/inode.c:104:
+		for (i=0; i<LOGFS_EMBEDDED_FIELDS; i++)
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1767: FILE: fs/logfs/inode.c:104:
+		for (i=0; i<LOGFS_EMBEDDED_FIELDS; i++)
 		           ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1773: FILE: fs/logfs/inode.c:110:
+
+

ERROR:POINTER_LOCATION: "foo*bar" should be "foo *bar"
#1774: FILE: fs/logfs/inode.c:111:
+static void logfs_inode_to_disk(struct inode *inode, struct logfs_disk_inode*di)

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1793: FILE: fs/logfs/inode.c:130:
+	case S_IFCHR: /* fall through */

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1794: FILE: fs/logfs/inode.c:131:
+	case S_IFBLK: /* fall through */

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1799: FILE: fs/logfs/inode.c:136:
+		for (i=0; i<LOGFS_EMBEDDED_FIELDS; i++)
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1799: FILE: fs/logfs/inode.c:136:
+		for (i=0; i<LOGFS_EMBEDDED_FIELDS; i++)
 		           ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1805: FILE: fs/logfs/inode.c:142:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#1809: FILE: fs/logfs/inode.c:146:
+	int i, k;
+	return;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1810: FILE: fs/logfs/inode.c:147:
+	for (i=0; i<sizeof(struct logfs_disk_inode); i+=32) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1810: FILE: fs/logfs/inode.c:147:
+	for (i=0; i<sizeof(struct logfs_disk_inode); i+=32) {
 	           ^

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#1810: FILE: fs/logfs/inode.c:147:
+	for (i=0; i<sizeof(struct logfs_disk_inode); i+=32) {
 	                                              ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1811: FILE: fs/logfs/inode.c:148:
+		for (k=0; k<32; k+=4) {
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1811: FILE: fs/logfs/inode.c:148:
+		for (k=0; k<32; k+=4) {
 		           ^

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#1811: FILE: fs/logfs/inode.c:148:
+		for (k=0; k<32; k+=4) {
 		                 ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1812: FILE: fs/logfs/inode.c:149:
+			be32 *x = ((void*)di) + i + k;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1813: FILE: fs/logfs/inode.c:150:
+			be32 *x = ((void*)di) + i + k;
+			printk("%08x ", be32_to_cpu(*x));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1813: FILE: fs/logfs/inode.c:150:
+			printk("%08x ", be32_to_cpu(*x));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1815: FILE: fs/logfs/inode.c:152:
+		printk("\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1819: FILE: fs/logfs/inode.c:156:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1821: FILE: fs/logfs/inode.c:158:
+static int logfs_read_disk_inode(struct logfs_disk_inode *di,
+		struct inode *inode)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1829: FILE: fs/logfs/inode.c:166:
+	BUG_ON(!super->s_master_inode);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1831: FILE: fs/logfs/inode.c:168:
+	ret = logfs_inode_read(super->s_master_inode, di, sizeof(*di),
+			ino * sizeof(*di));

ERROR:SPACING: space prohibited after that open parenthesis '('
#1836: FILE: fs/logfs/inode.c:173:
+	if ( !(be32_to_cpu(di->di_flags) & LOGFS_IF_VALID))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1845: FILE: fs/logfs/inode.c:182:
+
+

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1858: FILE: fs/logfs/inode.c:195:
+	if ( !(li->li_flags&LOGFS_IF_VALID) || (li->li_flags&LOGFS_IF_INVALID))
 	                   ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1858: FILE: fs/logfs/inode.c:195:
+	if ( !(li->li_flags&LOGFS_IF_VALID) || (li->li_flags&LOGFS_IF_INVALID))
 	                                                    ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#1858: FILE: fs/logfs/inode.c:195:
+	if ( !(li->li_flags&LOGFS_IF_VALID) || (li->li_flags&LOGFS_IF_INVALID))

WARNING:DEFAULT_NO_BREAK: switch default: should use break
#1871: FILE: fs/logfs/inode.c:208:
+	default:
+		;

switch default case is sometimes written as "default:;".  This can
cause new cases added below default to be defective.

A "break;" should be added after empty default statement to avoid
unwanted fallthrough.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1878: FILE: fs/logfs/inode.c:215:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1884: FILE: fs/logfs/inode.c:221:
+	BUG_ON(inode->i_ino == LOGFS_INO_MASTER);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1888: FILE: fs/logfs/inode.c:225:
+		printk("%lx\n", inode->i_ino);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1889: FILE: fs/logfs/inode.c:226:
+		BUG();

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1893: FILE: fs/logfs/inode.c:230:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1895: FILE: fs/logfs/inode.c:232:
+static int logfs_write_disk_inode(struct logfs_disk_inode *di,
+		struct inode *inode)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1901: FILE: fs/logfs/inode.c:238:
+	BUG_ON(!super->s_master_inode);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1903: FILE: fs/logfs/inode.c:240:
+	ret = logfs_inode_write_nolock(super->s_master_inode, di, sizeof(*di),
+			inode->i_ino * sizeof(*di));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1908: FILE: fs/logfs/inode.c:245:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1915: FILE: fs/logfs/inode.c:252:
+	BUG_ON(inode->i_ino == LOGFS_INO_MASTER);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1931: FILE: fs/logfs/inode.c:268:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1944: FILE: fs/logfs/inode.c:281:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1951: FILE: fs/logfs/inode.c:288:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1968: FILE: fs/logfs/inode.c:305:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1999: FILE: fs/logfs/inode.c:336:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2001: FILE: fs/logfs/inode.c:338:
+static void logfs_init_once(void *_li, kmem_cache_t *cachep,
+		unsigned long flags)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2008: FILE: fs/logfs/inode.c:345:
+	if ((flags & (SLAB_CTOR_VERIFY|SLAB_CTOR_CONSTRUCTOR)) ==
 	                              ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2012: FILE: fs/logfs/inode.c:349:
+		for (i=0; i<LOGFS_EMBEDDED_FIELDS; i++)
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#2012: FILE: fs/logfs/inode.c:349:
+		for (i=0; i<LOGFS_EMBEDDED_FIELDS; i++)
 		           ^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2019: FILE: fs/logfs/inode.c:356:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2021: FILE: fs/logfs/inode.c:358:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2031: FILE: fs/logfs/inode.c:368:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2036: FILE: fs/logfs/inode.c:373:
+	logfs_inode_cache = kmem_cache_create("logfs_inode_cache",
+			sizeof(struct logfs_inode), 0, SLAB_RECLAIM_ACCOUNT,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2043: FILE: fs/logfs/inode.c:380:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2052: FILE: fs/logfs/journal.c:1:
+#include <linux/fs.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2057: FILE: fs/logfs/journal.c:6:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2063: FILE: fs/logfs/journal.c:12:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2073: FILE: fs/logfs/journal.c:22:
+
+

ERROR:SPACING: space prohibited after that open parenthesis '('
#2081: FILE: fs/logfs/journal.c:30:
+	if ( !seg_offset(super, ofs)) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2085: FILE: fs/logfs/journal.c:34:
+	BUG_ON((s64)ofs < 0);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2089: FILE: fs/logfs/journal.c:38:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2101: FILE: fs/logfs/journal.c:50:
+	BUG_ON(ret <= 0); /* not sure, but it's safer to BUG than to accept */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2105: FILE: fs/logfs/journal.c:54:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2107: FILE: fs/logfs/journal.c:56:
+static s64 logfs_find_anchor(struct logfs_super *super,
+		struct logfs_journal_entry *je)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2131: FILE: fs/logfs/journal.c:80:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2137: FILE: fs/logfs/journal.c:86:
+	for (i=0; i<LOGFS_SEGMENTS; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#2137: FILE: fs/logfs/journal.c:86:
+	for (i=0; i<LOGFS_SEGMENTS; i++) {
 	           ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2139: FILE: fs/logfs/journal.c:88:
+		void *sum = (void*)je + super->s_sum_start;

WARNING:LINE_SPACING: Missing a blank line after declarations
#2140: FILE: fs/logfs/journal.c:89:
+		void *sum = (void*)je + super->s_sum_start;
+		sum += i * logfs_summary_size(super);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2145: FILE: fs/logfs/journal.c:94:
+
+

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2160: FILE: fs/logfs/journal.c:109:
+	printk("%x\n", super->s_anchor_size);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2167: FILE: fs/logfs/journal.c:116:
+	BUG_ON(je->je_type != cpu_to_be16(JE_ANCHOR));

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#2172: FILE: fs/logfs/journal.c:121:
+	super->s_sweeper= be64_to_cpu(je->da.da_sweeper);
 	                ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2177: FILE: fs/logfs/journal.c:126:
+	for (i=0; i<LOGFS_EMBEDDED_FIELDS; i++)
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#2177: FILE: fs/logfs/journal.c:126:
+	for (i=0; i<LOGFS_EMBEDDED_FIELDS; i++)
 	           ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2183: FILE: fs/logfs/journal.c:132:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2189: FILE: fs/logfs/journal.c:138:
+	for (i=0; i<LOGFS_SEGMENTS; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#2189: FILE: fs/logfs/journal.c:138:
+	for (i=0; i<LOGFS_SEGMENTS; i++) {
 	           ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2191: FILE: fs/logfs/journal.c:140:
+		void *sum = (void*)je + super->s_sum_start;

WARNING:LINE_SPACING: Missing a blank line after declarations
#2192: FILE: fs/logfs/journal.c:141:
+		void *sum = (void*)je + super->s_sum_start;
+		sum += i * logfs_summary_size(super);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2197: FILE: fs/logfs/journal.c:146:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2209: FILE: fs/logfs/journal.c:158:
+	BUG_ON(ofs >= super->s_size);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2220: FILE: fs/logfs/journal.c:169:
+	for (i=0; i<LOGFS_EMBEDDED_FIELDS; i++)
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#2220: FILE: fs/logfs/journal.c:169:
+	for (i=0; i<LOGFS_EMBEDDED_FIELDS; i++)
 	           ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2232: FILE: fs/logfs/journal.c:181:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2247: FILE: fs/logfs/journal.c:196:
+	BUG_ON(!inode);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2257: FILE: fs/logfs/journal.c:206:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2271: FILE: fs/logfs/readwrite.c:1:
+#include <linux/fs.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2277: FILE: fs/logfs/readwrite.c:7:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2285: FILE: fs/logfs/readwrite.c:15:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2295: FILE: fs/logfs/readwrite.c:25:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2310: FILE: fs/logfs/readwrite.c:40:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2318: FILE: fs/logfs/readwrite.c:48:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2324: FILE: fs/logfs/readwrite.c:54:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2333: FILE: fs/logfs/readwrite.c:63:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2340: FILE: fs/logfs/readwrite.c:70:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#2344: FILE: fs/logfs/readwrite.c:74:
+	u64 ret = val;
+	ret >>= skip;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2347: FILE: fs/logfs/readwrite.c:77:
+	BUG_ON((unsigned long)ret != ret);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2351: FILE: fs/logfs/readwrite.c:81:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2353: FILE: fs/logfs/readwrite.c:83:
+static int logfs_read_loop(struct inode *inode, pgoff_t index, void *buf,
+		int count)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2370: FILE: fs/logfs/readwrite.c:100:
+	for (i=count*bits; i>=0; i-=bits) {
 	      ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2370: FILE: fs/logfs/readwrite.c:100:
+	for (i=count*bits; i>=0; i-=bits) {
 	            ^

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#2370: FILE: fs/logfs/readwrite.c:100:
+	for (i=count*bits; i>=0; i-=bits) {
 	                    ^

ERROR:SPACING: spaces required around that '-=' (ctx:VxV)
#2370: FILE: fs/logfs/readwrite.c:100:
+	for (i=count*bits; i>=0; i-=bits) {
 	                          ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2388: FILE: fs/logfs/readwrite.c:118:
+
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#2394: FILE: fs/logfs/readwrite.c:124:
+	if (li->li_flags & LOGFS_IF_EMBEDDED) {
[...]
+	} else if (index < I0_BLOCKS)
[...]
+	else if (index < I1_BLOCKS)
[...]
+	else if (index < I2_BLOCKS)
[...]
+	else if (index < I3_BLOCKS)
[...]

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2408: FILE: fs/logfs/readwrite.c:138:
+	BUG();

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2412: FILE: fs/logfs/readwrite.c:142:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2419: FILE: fs/logfs/readwrite.c:149:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2421: FILE: fs/logfs/readwrite.c:151:
+static int logfs_is_valid_loop(struct inode *inode, pgoff_t index,
+		int count, u64 ofs)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2438: FILE: fs/logfs/readwrite.c:168:
+	for (i=count*bits; i>=0; i-=bits) {
 	      ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2438: FILE: fs/logfs/readwrite.c:168:
+	for (i=count*bits; i>=0; i-=bits) {
 	            ^

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#2438: FILE: fs/logfs/readwrite.c:168:
+	for (i=count*bits; i>=0; i-=bits) {
 	                    ^

ERROR:SPACING: spaces required around that '-=' (ctx:VxV)
#2438: FILE: fs/logfs/readwrite.c:168:
+	for (i=count*bits; i>=0; i-=bits) {
 	                          ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2460: FILE: fs/logfs/readwrite.c:190:
+
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'inode->i_nlink == 0'
#2466: FILE: fs/logfs/readwrite.c:196:
+	if ((inode->i_nlink == 0) && atomic_read(&inode->i_count) == 1)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2481: FILE: fs/logfs/readwrite.c:211:
+	BUG();

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2485: FILE: fs/logfs/readwrite.c:215:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2496: FILE: fs/logfs/readwrite.c:226:
+	BUG_ON((u64)(u_long)ino != ino);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2506: FILE: fs/logfs/readwrite.c:236:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2531: FILE: fs/logfs/readwrite.c:261:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2536: FILE: fs/logfs/readwrite.c:266:
+static ssize_t __logfs_inode_read(struct inode *inode, char *buf, size_t count,
+		loff_t *ppos)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2550: FILE: fs/logfs/readwrite.c:280:
+	BUG_ON(logfs_index(*ppos) != logfs_index(*ppos + count - 1));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2569: FILE: fs/logfs/readwrite.c:299:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2571: FILE: fs/logfs/readwrite.c:301:
+static s64 __logfs_write_block(struct logfs_super *super, void *buf, int level,
+		u64 inode, u64 pos)

CHECK:SPACING: No space is necessary after a cast
#2578: FILE: fs/logfs/readwrite.c:308:
+	block = logfs_get_free_block(super, level, inode, (__force pos_t) pos);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2580: FILE: fs/logfs/readwrite.c:310:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2586: FILE: fs/logfs/readwrite.c:316:
+		BUG();

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2592: FILE: fs/logfs/readwrite.c:322:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2594: FILE: fs/logfs/readwrite.c:324:
+static s64 logfs_write_block(struct logfs_super *super, void *buf, int level,
+		u64 inode, pgoff_t index)

WARNING:LINE_SPACING: Missing a blank line after declarations
#2597: FILE: fs/logfs/readwrite.c:327:
+	u64 pos = (u64)index * super->s_blocksize;
+	return __logfs_write_block(super, buf, level, inode, pos);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2600: FILE: fs/logfs/readwrite.c:330:
+
+

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2606: FILE: fs/logfs/readwrite.c:336:
+	if (li->li_blocks<<3 < ULONG_MAX)
 	                 ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2607: FILE: fs/logfs/readwrite.c:337:
+		inode->i_blocks = li->li_blocks<<3;
 		                               ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2610: FILE: fs/logfs/readwrite.c:340:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2619: FILE: fs/logfs/readwrite.c:349:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2624: FILE: fs/logfs/readwrite.c:354:
+	BUG_ON(li->li_blocks + no < no); /* wraps are bad, mkay */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2629: FILE: fs/logfs/readwrite.c:359:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2635: FILE: fs/logfs/readwrite.c:365:
+	BUG_ON(li->li_blocks < no);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2641: FILE: fs/logfs/readwrite.c:371:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2659: FILE: fs/logfs/readwrite.c:389:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2670: FILE: fs/logfs/readwrite.c:400:
+
+

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#2684: FILE: fs/logfs/readwrite.c:414:
+	if (! (li->li_flags & LOGFS_IF_EMBEDDED))
 	    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2700: FILE: fs/logfs/readwrite.c:430:
+	for (i=1; i<LOGFS_EMBEDDED_FIELDS; i++)
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#2700: FILE: fs/logfs/readwrite.c:430:
+	for (i=1; i<LOGFS_EMBEDDED_FIELDS; i++)
 	           ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2706: FILE: fs/logfs/readwrite.c:436:
+
+

WARNING:MINMAX: max() should probably be max_t(long long, LOGFS_EMBEDDED_SIZE, i_size_read(inode))
#2714: FILE: fs/logfs/readwrite.c:444:
+	memcpy(dst, buf, max((long long)LOGFS_EMBEDDED_SIZE, i_size_read(inode)));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2722: FILE: fs/logfs/readwrite.c:452:
+
+

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#2730: FILE: fs/logfs/readwrite.c:460:
+	if (! li->li_data[index])
 	    ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2743: FILE: fs/logfs/readwrite.c:473:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2745: FILE: fs/logfs/readwrite.c:475:
+static int logfs_write_loop(struct inode *inode, pgoff_t index, void *buf,
+		be64 **wblocks, int count)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2756: FILE: fs/logfs/readwrite.c:486:
+	for (i=count; i>=0; i--) {
 	      ^

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#2756: FILE: fs/logfs/readwrite.c:486:
+	for (i=count; i>=0; i--) {
 	               ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2765: FILE: fs/logfs/readwrite.c:495:
+		bofs = be64_to_cpu(wblocks[i][get_bits(index, i*bits, bits)]);
 		                                               ^

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#2768: FILE: fs/logfs/readwrite.c:498:
+	if (! wblocks[0][get_bits(index, 0, bits)])
 	    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2777: FILE: fs/logfs/readwrite.c:507:
+	for (i=0; i<=count; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<=' (ctx:VxV)
#2777: FILE: fs/logfs/readwrite.c:507:
+	for (i=0; i<=count; i++) {
 	           ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2778: FILE: fs/logfs/readwrite.c:508:
+		wblocks[i][get_bits(index, i*bits, bits)] = cpu_to_be64(block);
 		                            ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2780: FILE: fs/logfs/readwrite.c:510:
+		block = logfs_write_block(super, wblocks[i], 1, inode->i_ino,
+				index);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2790: FILE: fs/logfs/readwrite.c:520:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2792: FILE: fs/logfs/readwrite.c:522:
+static int __logfs_write_buf(struct inode *inode, pgoff_t index, void *buf,
+		be64 **wblocks)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2799: FILE: fs/logfs/readwrite.c:529:
+	inode->i_ctime.tv_sec = inode->i_mtime.tv_sec = get_seconds();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2817: FILE: fs/logfs/readwrite.c:547:
+	BUG();

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2821: FILE: fs/logfs/readwrite.c:551:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2834: FILE: fs/logfs/readwrite.c:564:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2845: FILE: fs/logfs/readwrite.c:575:
+	BUG_ON(! block);

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#2845: FILE: fs/logfs/readwrite.c:575:
+	BUG_ON(! block);
 	       ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2860: FILE: fs/logfs/readwrite.c:590:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2862: FILE: fs/logfs/readwrite.c:592:
+static int logfs_rewrite_loop(struct inode *inode, pgoff_t index, void *buf,
+		be64 **wblocks, int count)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2872: FILE: fs/logfs/readwrite.c:602:
+	for (i=count; i>=0; i--) {
 	      ^

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#2872: FILE: fs/logfs/readwrite.c:602:
+	for (i=count; i>=0; i--) {
 	               ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2878: FILE: fs/logfs/readwrite.c:608:
+			BUG();

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2880: FILE: fs/logfs/readwrite.c:610:
+		bofs = be64_to_cpu(wblocks[i][get_bits(index, i*bits, bits)]);
 		                                               ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2884: FILE: fs/logfs/readwrite.c:614:
+	BUG_ON(! block);

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#2884: FILE: fs/logfs/readwrite.c:614:
+	BUG_ON(! block);
 	       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2894: FILE: fs/logfs/readwrite.c:624:
+	for (i=0; i<=count; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<=' (ctx:VxV)
#2894: FILE: fs/logfs/readwrite.c:624:
+	for (i=0; i<=count; i++) {
 	           ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2895: FILE: fs/logfs/readwrite.c:625:
+		wblocks[i][get_bits(index, i*bits, bits)] = cpu_to_be64(block);
 		                            ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2897: FILE: fs/logfs/readwrite.c:627:
+		block = logfs_write_block(super, wblocks[i], 1, inode->i_ino,
+				index);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2907: FILE: fs/logfs/readwrite.c:637:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2909: FILE: fs/logfs/readwrite.c:639:
+static int __logfs_rewrite_block(struct inode *inode, pgoff_t index, void *buf,
+		be64 **wblocks)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2922: FILE: fs/logfs/readwrite.c:652:
+	BUG();

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2926: FILE: fs/logfs/readwrite.c:656:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2939: FILE: fs/logfs/readwrite.c:669:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2947: FILE: fs/logfs/readwrite.c:677:
+static s64 __logfs_truncate_i0(struct inode *inode, u64 size, u64 bofs,
+		u64 pos, be64 **wblocks)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2969: FILE: fs/logfs/readwrite.c:699:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2978: FILE: fs/logfs/readwrite.c:708:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2986: FILE: fs/logfs/readwrite.c:716:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2991: FILE: fs/logfs/readwrite.c:721:
+static s64 __logfs_truncate_loop(struct inode *inode, u64 size, u64 old_bofs,
+		u64 pos, be64 **wblocks, int i)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3002: FILE: fs/logfs/readwrite.c:732:
+	for (e = LOGFS_BLOCK_FACTOR-1; e>=0; e--) {
 	                           ^

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#3002: FILE: fs/logfs/readwrite.c:732:
+	for (e = LOGFS_BLOCK_FACTOR-1; e>=0; e--) {
 	                                ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#3004: FILE: fs/logfs/readwrite.c:734:
+		u64 new_pos = pos + e*logfs_factor[i];
 		                     ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3013: FILE: fs/logfs/readwrite.c:743:
+		BUG_ON(bofs > super->s_size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3017: FILE: fs/logfs/readwrite.c:747:
+			ofs = __logfs_truncate_loop(inode, size, bofs, new_pos,
+					wblocks, i-1);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3017: FILE: fs/logfs/readwrite.c:747:
+					wblocks, i-1);
 					          ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3020: FILE: fs/logfs/readwrite.c:750:
+			ofs = __logfs_truncate_i0(inode, size, bofs, new_pos,
+					wblocks);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3037: FILE: fs/logfs/readwrite.c:767:
+
+

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3044: FILE: fs/logfs/readwrite.c:774:
+	for (e = I1_INDEX-1; e>=0; e--) {
 	                 ^

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#3044: FILE: fs/logfs/readwrite.c:774:
+	for (e = I1_INDEX-1; e>=0; e--) {
 	                      ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#3045: FILE: fs/logfs/readwrite.c:775:
+		u64 new_pos = e*logfs_factor[0];
 		               ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#3047: FILE: fs/logfs/readwrite.c:777:
+		if (size > e*logfs_factor[0])
 		            ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3063: FILE: fs/logfs/readwrite.c:793:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3065: FILE: fs/logfs/readwrite.c:795:
+static int logfs_truncate_loop(struct inode *inode, u64 size, be64 **wblocks,
+		int i)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3082: FILE: fs/logfs/readwrite.c:812:
+
+

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#3086: FILE: fs/logfs/readwrite.c:816:
+	void *buf = (void*)li->li_data + size;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3095: FILE: fs/logfs/readwrite.c:825:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3109: FILE: fs/logfs/readwrite.c:839:
+	BUG_ON(ret);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3114: FILE: fs/logfs/readwrite.c:844:
+	BUG_ON(ret);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3119: FILE: fs/logfs/readwrite.c:849:
+	BUG_ON(ret);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3122: FILE: fs/logfs/readwrite.c:852:
+	BUG_ON(ret);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3125: FILE: fs/logfs/readwrite.c:855:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3137: FILE: fs/logfs/readwrite.c:867:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3139: FILE: fs/logfs/readwrite.c:869:
+static ssize_t __logfs_inode_write(struct inode *inode, const char *buf,
+		size_t count, loff_t *ppos)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3147: FILE: fs/logfs/readwrite.c:877:
+	BUG_ON(logfs_index(*ppos) != logfs_index(*ppos + count - 1));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3175: FILE: fs/logfs/readwrite.c:905:
+
+

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#3185: FILE: fs/logfs/readwrite.c:915:
+	ret = ret==n ? 0 : -EIO;
 	         ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3189: FILE: fs/logfs/readwrite.c:919:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3191: FILE: fs/logfs/readwrite.c:921:
+int logfs_inode_write_nolock(struct inode *inode, const void *buf, size_t n,
+		loff_t _pos)

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#3198: FILE: fs/logfs/readwrite.c:928:
+	ret = ret==n ? 0 : -EIO;
 	         ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3202: FILE: fs/logfs/readwrite.c:932:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3204: FILE: fs/logfs/readwrite.c:934:
+int logfs_inode_write(struct inode *inode, const void *buf, size_t n,
+		loff_t pos)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3215: FILE: fs/logfs/readwrite.c:945:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3217: FILE: fs/logfs/readwrite.c:947:
+int logfs_inode_write_loop(struct inode *inode, const void *buf, size_t n,
+		loff_t _pos)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3233: FILE: fs/logfs/readwrite.c:963:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#3243: FILE: fs/logfs/readwrite.c:973:
+	for (i=0; i<=LOGFS_MAX_INDIRECT; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<=' (ctx:VxV)
#3243: FILE: fs/logfs/readwrite.c:973:
+	for (i=0; i<=LOGFS_MAX_INDIRECT; i++) {
 	           ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3254: FILE: fs/logfs/readwrite.c:984:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#3259: FILE: fs/logfs/readwrite.c:989:
+	for (i=0; i<=LOGFS_MAX_INDIRECT; i++)
 	      ^

ERROR:SPACING: spaces required around that '<=' (ctx:VxV)
#3259: FILE: fs/logfs/readwrite.c:989:
+	for (i=0; i<=LOGFS_MAX_INDIRECT; i++)
 	           ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3266: FILE: fs/logfs/super.c:1:
+#include <linux/fs.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3273: FILE: fs/logfs/super.c:8:
+
+

ERROR:SPACING: space required before the open parenthesis '('
#3274: FILE: fs/logfs/super.c:9:
+#define FAIL_ON(cond) do { if (unlikely((cond))) return -EINVAL; } while(0)

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#3274: FILE: fs/logfs/super.c:9:
+#define FAIL_ON(cond) do { if (unlikely((cond))) return -EINVAL; } while(0)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'retlen != len'
#3283: FILE: fs/logfs/super.c:18:
+	if (ret || (retlen != len)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3284: FILE: fs/logfs/super.c:19:
+		printk("ret: %d\n", ret);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3285: FILE: fs/logfs/super.c:20:
+		printk("retlen: %d, len: %d\n", retlen, len);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3286: FILE: fs/logfs/super.c:21:
+		printk("ofs: %lld, mtd->size: %d\n", ofs, mtd->size);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3294: FILE: fs/logfs/super.c:29:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3302: FILE: fs/logfs/super.c:37:
+	BUG_ON((ofs >= mtd->size) || (len > mtd->size - ofs));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'retlen != len'
#3304: FILE: fs/logfs/super.c:39:
+	if (ret || (retlen != len))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3310: FILE: fs/logfs/super.c:45:
+
+

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#3316: FILE: fs/logfs/super.c:51:
+}
+int mtderase(struct mtd_info *mtd, loff_t ofs, size_t len)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3322: FILE: fs/logfs/super.c:57:
+	BUG_ON(len % mtd->erasesize);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3336: FILE: fs/logfs/super.c:71:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#3348: FILE: fs/logfs/super.c:83:
+	stats->f_namelen= LOGFS_MAX_NAMELEN;
 	                ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3352: FILE: fs/logfs/super.c:87:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3364: FILE: fs/logfs/super.c:99:
+
+

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#3386: FILE: fs/logfs/super.c:121:
+	iput(inode);
 	^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#3388: FILE: fs/logfs/super.c:123:
+	iput(LOGFS_SUPER(sb)->s_master_inode);
 	^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3392: FILE: fs/logfs/super.c:127:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3394: FILE: fs/logfs/super.c:129:
+static int logfs_mkfs_rootdir(struct logfs_super *super,
+		struct logfs_disk_super *ds, u32 seg_size)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#3407: FILE: fs/logfs/super.c:142:
+	root_ofs = 3*seg_size + LOGFS_INO_ROOT*sizeof(*di);
 	            ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#3407: FILE: fs/logfs/super.c:142:
+	root_ofs = 3*seg_size + LOGFS_INO_ROOT*sizeof(*di);
 	                                      ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3413: FILE: fs/logfs/super.c:148:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3415: FILE: fs/logfs/super.c:150:
+static int logfs_mkfs_summary(struct logfs_super *super,
+		struct logfs_disk_super *ds, u32 seg_size)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#3428: FILE: fs/logfs/super.c:163:
+	sum_ofs = 4*seg_size - LOGFS_BLOCKSIZE;
 	           ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3435: FILE: fs/logfs/super.c:170:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3437: FILE: fs/logfs/super.c:172:
+static int logfs_mkfs_anchor(struct logfs_super *super,
+		struct logfs_disk_super *ds, u32 seg_size)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3452: FILE: fs/logfs/super.c:187:
+	je->da.da_size = cpu_to_be64((LOGFS_INO_ROOT+1)
 	                                            ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#3454: FILE: fs/logfs/super.c:189:
+	je->da.da_data[0] = cpu_to_be64(3*seg_size);
 	                                 ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3460: FILE: fs/logfs/super.c:195:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3462: FILE: fs/logfs/super.c:197:
+static int logfs_mkfs_super(struct logfs_super *super,
+		struct logfs_disk_super *ds, u32 seg_size, u32 block_size)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#3475: FILE: fs/logfs/super.c:210:
+	ds->ds_journal_len = cpu_to_be64(2*seg_size);
 	                                  ^

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#3485: FILE: fs/logfs/super.c:220:
+#if 0	/* sane defaults */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3499: FILE: fs/logfs/super.c:234:
+	BUG_ON(sum_start < 2048);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3504: FILE: fs/logfs/super.c:239:
+
+

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3507: FILE: fs/logfs/super.c:242:
+	u32 seg_size = 1<<15;
 	                ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3508: FILE: fs/logfs/super.c:243:
+	u32 block_size = 1<<12;
 	                  ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3532: FILE: fs/logfs/super.c:267:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3560: FILE: fs/logfs/super.c:295:
+
+

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#3566: FILE: fs/logfs/super.c:301:
+	super->s_gc_reserve = super->s_total_levels * (2*super->s_no_blocks -1);
 	                                                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#3566: FILE: fs/logfs/super.c:301:
+	super->s_gc_reserve = super->s_total_levels * (2*super->s_no_blocks -1);
 	                                                                    ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3591: FILE: fs/logfs/super.c:326:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3606: FILE: fs/logfs/super.c:341:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3608: FILE: fs/logfs/super.c:343:
+static int logfs_get_sb_mtd(struct file_system_type *type, int flags,
+		struct mtd_info *mtd, struct vfsmount *mnt)

ERROR:SPACING: space required before that '*' (ctx:VxV)
#3615: FILE: fs/logfs/super.c:350:
+	super = kzalloc(sizeof*super, GFP_KERNEL);
 	                      ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3643: FILE: fs/logfs/super.c:378:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3645: FILE: fs/logfs/super.c:380:
+static int logfs_get_sb(struct file_system_type *type, int flags,
+		const char *devname, void *data, struct vfsmount *mnt)

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#3651: FILE: fs/logfs/super.c:386:
+#if 0

WARNING:LINE_SPACING: Missing a blank line after declarations
#3659: FILE: fs/logfs/super.c:394:
+		char *garbage;
+		mtdnr = simple_strtoul(devname+3, &garbage, 0);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3659: FILE: fs/logfs/super.c:394:
+		mtdnr = simple_strtoul(devname+3, &garbage, 0);
 		                              ^

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#3659: FILE: fs/logfs/super.c:394:
+		mtdnr = simple_strtoul(devname+3, &garbage, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3674: FILE: fs/logfs/super.c:409:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3682: FILE: fs/logfs/super.c:417:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#3686: FILE: fs/logfs/super.c:421:
+	int ret = logfs_init_inode_cache();
+	if (ret)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3691: FILE: fs/logfs/super.c:426:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3698: FILE: fs/logfs/super.c:433:
+
+

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.44465.commit.dc8c035c287bbd4a76b2cfeb934d45d4e20fe9ce total: 109 errors, 169 warnings, 340 checks, 3607 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.44465.commit.dc8c035c287bbd4a76b2cfeb934d45d4e20fe9ce has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
