WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#46: FILE: include/linux/container.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#47: FILE: include/linux/container.h:2:
+ * include/linux/container.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#48: FILE: include/linux/container.h:3:
+ * ^Icontainer header definitions for containers.$

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#68: FILE: include/linux/container.h:23:
+#include <asm/atomic.h>

ERROR:TRAILING_WHITESPACE: trailing whitespace
#75: FILE: include/linux/container.h:30:
+ * num_files is just a number indicating how many files are currently opened by $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#122: FILE: include/linux/container.h:77:
+extern int setup_container(struct container_struct *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct container_struct *' should also have an identifier name
#122: FILE: include/linux/container.h:77:
+extern int setup_container(struct container_struct *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#123: FILE: include/linux/container.h:78:
+extern int free_container(struct container_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct container_struct *' should also have an identifier name
#123: FILE: include/linux/container.h:78:
+extern int free_container(struct container_struct *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#124: FILE: include/linux/container.h:79:
+extern int container_add_task(struct task_struct *, struct task_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#124: FILE: include/linux/container.h:79:
+extern int container_add_task(struct task_struct *, struct task_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#124: FILE: include/linux/container.h:79:
+extern int container_add_task(struct task_struct *, struct task_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct container_struct *' should also have an identifier name
#124: FILE: include/linux/container.h:79:
+extern int container_add_task(struct task_struct *, struct task_struct *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#125: FILE: include/linux/container.h:80:
+extern int container_add_task(struct task_struct *, struct task_struct *,
+		struct container_struct *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#126: FILE: include/linux/container.h:81:
+extern int container_add_file(struct address_space *, struct container_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct address_space *' should also have an identifier name
#126: FILE: include/linux/container.h:81:
+extern int container_add_file(struct address_space *, struct container_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct container_struct *' should also have an identifier name
#126: FILE: include/linux/container.h:81:
+extern int container_add_file(struct address_space *, struct container_struct *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#127: FILE: include/linux/container.h:82:
+extern ssize_t set_container_page_limit(struct container_struct *, ssize_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct container_struct *' should also have an identifier name
#127: FILE: include/linux/container.h:82:
+extern ssize_t set_container_page_limit(struct container_struct *, ssize_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ssize_t' should also have an identifier name
#127: FILE: include/linux/container.h:82:
+extern ssize_t set_container_page_limit(struct container_struct *, ssize_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#128: FILE: include/linux/container.h:83:
+extern ssize_t set_container_task_limit(struct container_struct *, ssize_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct container_struct *' should also have an identifier name
#128: FILE: include/linux/container.h:83:
+extern ssize_t set_container_task_limit(struct container_struct *, ssize_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ssize_t' should also have an identifier name
#128: FILE: include/linux/container.h:83:
+extern ssize_t set_container_task_limit(struct container_struct *, ssize_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#129: FILE: include/linux/container.h:84:
+extern void container_remove_task(struct task_struct *, struct container_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#129: FILE: include/linux/container.h:84:
+extern void container_remove_task(struct task_struct *, struct container_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct container_struct *' should also have an identifier name
#129: FILE: include/linux/container.h:84:
+extern void container_remove_task(struct task_struct *, struct container_struct *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#130: FILE: include/linux/container.h:85:
+extern void container_remove_file(struct address_space *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct address_space *' should also have an identifier name
#130: FILE: include/linux/container.h:85:
+extern void container_remove_file(struct address_space *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#131: FILE: include/linux/container.h:86:
+extern void container_inc_page_count(struct page *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#131: FILE: include/linux/container.h:86:
+extern void container_inc_page_count(struct page *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#132: FILE: include/linux/container.h:87:
+extern void container_dec_page_count(struct page *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#132: FILE: include/linux/container.h:87:
+extern void container_dec_page_count(struct page *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#133: FILE: include/linux/container.h:88:
+extern void container_inc_filepage_count(struct address_space *, struct page *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct address_space *' should also have an identifier name
#133: FILE: include/linux/container.h:88:
+extern void container_inc_filepage_count(struct address_space *, struct page *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#133: FILE: include/linux/container.h:88:
+extern void container_inc_filepage_count(struct address_space *, struct page *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#134: FILE: include/linux/container.h:89:
+extern void container_dec_filepage_count(struct page *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#134: FILE: include/linux/container.h:89:
+extern void container_dec_filepage_count(struct page *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#135: FILE: include/linux/container.h:90:
+extern void container_inc_activepage_count(struct page *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#135: FILE: include/linux/container.h:90:
+extern void container_inc_activepage_count(struct page *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#136: FILE: include/linux/container.h:91:
+extern void container_dec_activepage_count(struct page *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#136: FILE: include/linux/container.h:91:
+extern void container_dec_activepage_count(struct page *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#137: FILE: include/linux/container.h:92:
+extern int freeing_container(struct container_struct  *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct container_struct  *' should also have an identifier name
#137: FILE: include/linux/container.h:92:
+extern int freeing_container(struct container_struct  *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#138: FILE: include/linux/container.h:93:
+extern void container_over_pagelimit(struct container_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct container_struct *' should also have an identifier name
#138: FILE: include/linux/container.h:93:
+extern void container_over_pagelimit(struct container_struct *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#139: FILE: include/linux/container.h:94:
+extern void container_overlimit_handler(void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#139: FILE: include/linux/container.h:94:
+extern void container_overlimit_handler(void *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#140: FILE: include/linux/container.h:95:
+extern long filepages_to_new_container(struct address_space *, struct container_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct address_space *' should also have an identifier name
#140: FILE: include/linux/container.h:95:
+extern long filepages_to_new_container(struct address_space *, struct container_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct container_struct *' should also have an identifier name
#140: FILE: include/linux/container.h:95:
+extern long filepages_to_new_container(struct address_space *, struct container_struct *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#141: FILE: include/linux/container.h:96:
+extern long anonpages_sub(struct task_struct *, struct container_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#141: FILE: include/linux/container.h:96:
+extern long anonpages_sub(struct task_struct *, struct container_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct container_struct *' should also have an identifier name
#141: FILE: include/linux/container.h:96:
+extern long anonpages_sub(struct task_struct *, struct container_struct *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#142: FILE: include/linux/container.h:97:
+extern ssize_t container_show_tasks(struct container_struct *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct container_struct *' should also have an identifier name
#142: FILE: include/linux/container.h:97:
+extern ssize_t container_show_tasks(struct container_struct *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#142: FILE: include/linux/container.h:97:
+extern ssize_t container_show_tasks(struct container_struct *, char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#143: FILE: include/linux/container.h:98:
+extern void writeback_container_file_pages(struct container_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct container_struct *' should also have an identifier name
#143: FILE: include/linux/container.h:98:
+extern void writeback_container_file_pages(struct container_struct *);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#145: FILE: include/linux/container.h:100:
+static inline void container_init_page_ptr(struct page *page, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#146: FILE: include/linux/container.h:101:
+static inline void container_init_page_ptr(struct page *page, 
+		struct task_struct *task)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!task"
#148: FILE: include/linux/container.h:103:
+	if (task == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#175: FILE: include/linux/container.h:130:
+#define CONFIGFS_CTN_ATTR_ID ^I^I^I1$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#176: FILE: include/linux/container.h:131:
+#define CONFIGFS_CTN_ATTR_NUM_TASKS ^I^I2$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#177: FILE: include/linux/container.h:132:
+#define CONFIGFS_CTN_ATTR_NUM_FILES ^I^I3$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#178: FILE: include/linux/container.h:133:
+#define CONFIGFS_CTN_ATTR_NUM_ANON_PAGES ^I4$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#180: FILE: include/linux/container.h:135:
+#define CONFIGFS_CTN_ATTR_NUM_FILE_PAGES ^I6$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#181: FILE: include/linux/container.h:136:
+#define CONFIGFS_CTN_ATTR_NUM_ACTIVE_PAGES ^I7$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#182: FILE: include/linux/container.h:137:
+#define CONFIGFS_CTN_ATTR_PAGE_LIMIT ^I^I8$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#183: FILE: include/linux/container.h:138:
+#define CONFIGFS_CTN_ATTR_TASK_LIMIT ^I^I9$

ERROR:SPACING: space required before the open parenthesis '('
#198: FILE: include/linux/container.h:153:
+#define container_add_file(mapping, container)	do { } while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#199: FILE: include/linux/container.h:154:
+#define container_remove_task(task, container)	do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#200: FILE: include/linux/container.h:155:
+#define container_remove_file(address_space)	do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#201: FILE: include/linux/container.h:156:
+#define container_inc_page_count(page)	do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#202: FILE: include/linux/container.h:157:
+#define container_dec_page_count(page)	do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#203: FILE: include/linux/container.h:158:
+#define container_inc_filepage_count(address_space, page)	do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#204: FILE: include/linux/container.h:159:
+#define container_dec_filepage_count(page)	do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#205: FILE: include/linux/container.h:160:
+#define container_inc_activepage_count(page)	do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#206: FILE: include/linux/container.h:161:
+#define container_dec_activepage_count(page)	do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#207: FILE: include/linux/container.h:162:
+#define container_init_page_ptr(page, task)	do { } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#208: FILE: include/linux/container.h:163:
+#define container_init_task_ptr(task)	do { } while(0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#216: FILE: mm/container.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#218: FILE: mm/container.c:3:
+ * ^I$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#218: FILE: mm/container.c:3:
+ * ^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#233: FILE: mm/container.c:18:
+ * Maximum number of contatiners allowed in a system.  Later $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#245: FILE: mm/container.c:30:
+ * Protects container list updates.  This is only used $

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#251: FILE: mm/container.c:36:
+void wakeup_container_mm(struct container_struct *ctn);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#255: FILE: mm/container.c:40:
+ * mkdir command is executed.  Container is already allocated as part $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#256: FILE: mm/container.c:41:
+ * of initialization in configfs directory.  Look at $

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#265: FILE: mm/container.c:50:
+	if (num_containers == (MAX_CONTAINERS -1)) {
 	                                      ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#275: FILE: mm/container.c:60:
+^I$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#278: FILE: mm/container.c:63:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#281: FILE: mm/container.c:66:
+ * This function is reached when user executes $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#283: FILE: mm/container.c:68:
+ * called at fork time.  If a task is  not already a part of another $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#284: FILE: mm/container.c:69:
+ * container, it is allowed to move into this container.  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#290: FILE: mm/container.c:75:
+ * pointer and ctn is NULL.  $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#295: FILE: mm/container.c:80:
+int container_add_task(struct task_struct *task, struct task_struct *parent,
+		struct container_struct *container)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'parent->ctn == NULL'
#302: FILE: mm/container.c:87:
+	if (parent && (parent->ctn == NULL))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!parent->ctn"
#302: FILE: mm/container.c:87:
+	if (parent && (parent->ctn == NULL))

CHECK:BRACES: braces {} should be used on all arms of this statement
#305: FILE: mm/container.c:90:
+	if (ctn == NULL) {
[...]
+	} else
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctn"
#305: FILE: mm/container.c:90:
+	if (ctn == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctn"
#321: FILE: mm/container.c:106:
+		if (ctn == NULL)

CHECK:BRACES: Unbalanced braces around else statement
#323: FILE: mm/container.c:108:
+	} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#346: FILE: mm/container.c:131:
+^I^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#364: FILE: mm/container.c:149:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#392: FILE: mm/container.c:177:
+^Iif ((count > limit) && $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'count > limit'
#392: FILE: mm/container.c:177:
+	if ((count > limit) && 
+			(atomic_long_read(&ctn->num_active_pages) > limit)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#393: FILE: mm/container.c:178:
+	if ((count > limit) && 
+			(atomic_long_read(&ctn->num_active_pages) > limit)) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#394: FILE: mm/container.c:179:
+			(atomic_long_read(&ctn->num_active_pages) > limit)) {
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#404: FILE: mm/container.c:189:
+^I^I ^I* multiple processes are banging too hard.$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#404: FILE: mm/container.c:189:
+^I^I ^I* multiple processes are banging too hard.$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#404: FILE: mm/container.c:189:
+			/* No lock here and only one process may wait longer in case
+		 	* multiple processes are banging too hard.

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:CODE_INDENT: code indent should use tabs where possible
#405: FILE: mm/container.c:190:
+^I^I ^I*/$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#405: FILE: mm/container.c:190:
+^I^I ^I*/$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#410: FILE: mm/container.c:195:
+^I^I^Iwait_event_interruptible_timeout(ctn->mm_waitq, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#411: FILE: mm/container.c:196:
+			wait_event_interruptible_timeout(ctn->mm_waitq, 
+					(ctn->flags & CTN_OVER_MM_LIM) == 0, wait);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#423: FILE: mm/container.c:208:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#431: FILE: mm/container.c:216:
+ */ $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctn"
#437: FILE: mm/container.c:222:
+	if (ctn == NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#462: FILE: mm/container.c:247:
+ */ $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctn"
#467: FILE: mm/container.c:252:
+	if (ctn == NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#472: FILE: mm/container.c:257:
+^I^Ielse $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#473: FILE: mm/container.c:258:
+			printk(KERN_WARNING"Container: Wrong Anon page count\n");

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#473: FILE: mm/container.c:258:
+			printk(KERN_WARNING"Container: Wrong Anon page count\n");

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#477: FILE: mm/container.c:262:
+^I^Ielse $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#478: FILE: mm/container.c:263:
+			printk(KERN_WARNING"Container: Wrong Mapped page count\n");

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#478: FILE: mm/container.c:263:
+			printk(KERN_WARNING"Container: Wrong Mapped page count\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#483: FILE: mm/container.c:268:
+ * This function is called whenever a pagecache page is allocated to $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#484: FILE: mm/container.c:269:
+ * address space.  This function  updates $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#485: FILE: mm/container.c:270:
+ * 1- the per page container field and $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#492: FILE: mm/container.c:277:
+ */ $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctn"
#498: FILE: mm/container.c:283:
+	if (ctn == NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#508: FILE: mm/container.c:293:
+^Iif (atomic_long_read(&ctn->num_file_pages) > $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#518: FILE: mm/container.c:303:
+ * pagecache.  This function decrements the number of pagecache pages $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#520: FILE: mm/container.c:305:
+ */ $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctn"
#525: FILE: mm/container.c:310:
+	if (ctn == NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#535: FILE: mm/container.c:320:
+ * on inactive list. This function updates increments the number of active $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#538: FILE: mm/container.c:323:
+ */ $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctn"
#543: FILE: mm/container.c:328:
+	if (ctn == NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#552: FILE: mm/container.c:337:
+ * zone's active list.  $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctn"
#572: FILE: mm/container.c:357:
+	if (ctn == NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#582: FILE: mm/container.c:367:
+ * This function is reached when user executes $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#585: FILE: mm/container.c:370:
+ * result of some filesystem related operation.  $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#591: FILE: mm/container.c:376:
+ * 2- ctn_mapping_list: address_space is added to the head of address_space $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctn"
#602: FILE: mm/container.c:387:
+	if (ctn == NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#626: FILE: mm/container.c:411:
+^Ireturn ret; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#630: FILE: mm/container.c:415:
+ * This function is reached when user executes $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#640: FILE: mm/container.c:425:
+^I$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#640: FILE: mm/container.c:425:
+{
+	

ERROR:TRAILING_WHITESPACE: trailing whitespace
#641: FILE: mm/container.c:426:
+^Ictn->page_limit =  count; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#642: FILE: mm/container.c:427:
+^Iif (count < (atomic_long_read(&ctn->num_anon_pages) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#651: FILE: mm/container.c:436:
+ * This function is reached when user executes $

WARNING:BRACES: braces {} are not necessary for single statement blocks
#661: FILE: mm/container.c:446:
+	if (count < atomic_read(&ctn->num_tasks)) {
+		atomic_long_inc(&ctn->task_limit_hits);
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#674: FILE: mm/container.c:459:
+ * 2- If PF_EXITIING is not set then move the anon pages belonging to $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#677: FILE: mm/container.c:462:
+void container_remove_task(struct task_struct *task, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#678: FILE: mm/container.c:463:
+void container_remove_task(struct task_struct *task, 
+		struct container_struct *ctn)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#683: FILE: mm/container.c:468:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#684: FILE: mm/container.c:469:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#685: FILE: mm/container.c:470:
+^I * This quick check for cases where task does not belong to any $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!task->ctn"
#689: FILE: mm/container.c:474:
+	if (task->ctn == NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#694: FILE: mm/container.c:479:
+^I * going on at this time on task's container.  We want this operation $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!temp"
#703: FILE: mm/container.c:488:
+	if (temp == NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#711: FILE: mm/container.c:496:
+^I * ctn will be NULL for the exit cases only.  We inc the $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ctn == NULL'
#715: FILE: mm/container.c:500:
+	if ((ctn == NULL) || (temp == ctn))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'temp == ctn'
#715: FILE: mm/container.c:500:
+	if ((ctn == NULL) || (temp == ctn))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctn"
#715: FILE: mm/container.c:500:
+	if ((ctn == NULL) || (temp == ctn))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#717: FILE: mm/container.c:502:
+^Ielse $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#731: FILE: mm/container.c:516:
+^Itask->ctn = NULL; $

WARNING:RETURN_VOID: void function return statements are not generally useful
#746: FILE: mm/container.c:531:
+	return;
+}

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#770: FILE: mm/container.c:555:
+		ret += sprintf(buf+ret, "%d ", tsk->pid);
 		                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#773: FILE: mm/container.c:558:
+			ret += sprintf(buf+ret, "\n");
 			                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#779: FILE: mm/container.c:564:
+		ret += sprintf(buf+ret, "\n");
 		                  ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#797: FILE: mm/container.c:582:
+ * rmdir command is executed in configfs.  Container is already $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#824: FILE: mm/container.c:609:
+	if (atomic_read(&ctn->num_tasks) || ctn->flags ||
+			(atomic_read(&ctn->wait_on_mutex)) ||

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#850: FILE: mm/container.c:635:
+	if (test_and_set_bit(CTN_OVER_MM_LIM, &ctn->flags))
+			return;

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.36836.commit.2ce93d22ccc87f37778e60bd34634e0b89b7879f total: 62 errors, 54 warnings, 58 checks, 825 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.36836.commit.2ce93d22ccc87f37778e60bd34634e0b89b7879f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
