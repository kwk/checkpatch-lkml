WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#44: 
> Send it over, and please cc Alessandro and others that can test it. Things 

WARNING:UNKNOWN_COMMIT_ID: Unknown commit id '368c73d4f689dae0807d0a2aa74c61fd2b9b075f', maybe rebased or not pulled?
#62: 
This reverts commit 368c73d4f689dae0807d0a2aa74c61fd2b9b075f.

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#89: FILE: arch/i386/pci/fixup.c:77:
+static void __devinit pci_fixup_ide_bases(struct pci_dev *d)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#99: FILE: arch/i386/pci/fixup.c:87:
+	for(i=0; i<4; i++) {
 	     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#99: FILE: arch/i386/pci/fixup.c:87:
+	for(i=0; i<4; i++) {
 	          ^

ERROR:SPACING: space required before the open parenthesis '('
#99: FILE: arch/i386/pci/fixup.c:87:
+	for(i=0; i<4; i++) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#101: FILE: arch/i386/pci/fixup.c:89:
+		struct resource *r = &d->resource[i];
+		if ((r->start & ~0x80) == 0x374) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#109: FILE: arch/i386/pci/fixup.c:97:
+static void __devinit  pci_fixup_ide_trash(struct pci_dev *d)

ERROR:POINTER_LOCATION: "foo __devinit  bar" should be "foo __devinit bar"
#109: FILE: arch/i386/pci/fixup.c:97:
+static void __devinit  pci_fixup_ide_trash(struct pci_dev *d)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#117: FILE: arch/i386/pci/fixup.c:105:
+	static int called = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:LINE_SPACING: Missing a blank line after declarations
#118: FILE: arch/i386/pci/fixup.c:106:
+	static int called = 0;
+	if (called)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#127: FILE: arch/i386/pci/fixup.c:115:
+	for(i=0; i<4; i++)
 	     ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#127: FILE: arch/i386/pci/fixup.c:115:
+	for(i=0; i<4; i++)
 	          ^

ERROR:SPACING: space required before the open parenthesis '('
#127: FILE: arch/i386/pci/fixup.c:115:
+	for(i=0; i<4; i++)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#128: FILE: arch/i386/pci/fixup.c:116:
+		d->resource[i].start = d->resource[i].end = d->resource[i].flags = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#135: FILE: arch/i386/pci/fixup.c:123:
 static void __devinit  pci_fixup_latency(struct pci_dev *d)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#199: FILE: drivers/pci/quirks.c:845:
+ */ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#200: FILE: drivers/pci/quirks.c:846:
+static void __devinit quirk_ide_bases(struct pci_dev *dev)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#202: FILE: drivers/pci/quirks.c:848:
+       struct resource *res;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#203: FILE: drivers/pci/quirks.c:849:
+       int first_bar = 2, last_bar = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#205: FILE: drivers/pci/quirks.c:851:
+       if ((dev->class >> 8) != PCI_CLASS_STORAGE_IDE)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#205: FILE: drivers/pci/quirks.c:851:
+       if ((dev->class >> 8) != PCI_CLASS_STORAGE_IDE)
+               return;

ERROR:CODE_INDENT: code indent should use tabs where possible
#206: FILE: drivers/pci/quirks.c:852:
+               return;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#206: FILE: drivers/pci/quirks.c:852:
+               return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#208: FILE: drivers/pci/quirks.c:854:
+       res = &dev->resource[0];$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#211: FILE: drivers/pci/quirks.c:857:
+       if (!(dev->class & 1) && (res[0].flags || res[1].flags)) { $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#211: FILE: drivers/pci/quirks.c:857:
+       if (!(dev->class & 1) && (res[0].flags || res[1].flags)) { $

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#211: FILE: drivers/pci/quirks.c:857:
+       if (!(dev->class & 1) && (res[0].flags || res[1].flags)) { 
+               res[0].start = res[0].end = res[0].flags = 0;

ERROR:CODE_INDENT: code indent should use tabs where possible
#212: FILE: drivers/pci/quirks.c:858:
+               res[0].start = res[0].end = res[0].flags = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#212: FILE: drivers/pci/quirks.c:858:
+               res[0].start = res[0].end = res[0].flags = 0;$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#212: FILE: drivers/pci/quirks.c:858:
+               res[0].start = res[0].end = res[0].flags = 0;

ERROR:CODE_INDENT: code indent should use tabs where possible
#213: FILE: drivers/pci/quirks.c:859:
+               res[1].start = res[1].end = res[1].flags = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#213: FILE: drivers/pci/quirks.c:859:
+               res[1].start = res[1].end = res[1].flags = 0;$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#213: FILE: drivers/pci/quirks.c:859:
+               res[1].start = res[1].end = res[1].flags = 0;

ERROR:CODE_INDENT: code indent should use tabs where possible
#214: FILE: drivers/pci/quirks.c:860:
+               first_bar = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#214: FILE: drivers/pci/quirks.c:860:
+               first_bar = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#215: FILE: drivers/pci/quirks.c:861:
+               last_bar = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#215: FILE: drivers/pci/quirks.c:861:
+               last_bar = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#216: FILE: drivers/pci/quirks.c:862:
+       }$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#219: FILE: drivers/pci/quirks.c:865:
+       if (!(dev->class & 4) && (res[2].flags || res[3].flags)) { $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#219: FILE: drivers/pci/quirks.c:865:
+       if (!(dev->class & 4) && (res[2].flags || res[3].flags)) { $

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#219: FILE: drivers/pci/quirks.c:865:
+       if (!(dev->class & 4) && (res[2].flags || res[3].flags)) { 
+               res[2].start = res[2].end = res[2].flags = 0;

ERROR:CODE_INDENT: code indent should use tabs where possible
#220: FILE: drivers/pci/quirks.c:866:
+               res[2].start = res[2].end = res[2].flags = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#220: FILE: drivers/pci/quirks.c:866:
+               res[2].start = res[2].end = res[2].flags = 0;$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#220: FILE: drivers/pci/quirks.c:866:
+               res[2].start = res[2].end = res[2].flags = 0;

ERROR:CODE_INDENT: code indent should use tabs where possible
#221: FILE: drivers/pci/quirks.c:867:
+               res[3].start = res[3].end = res[3].flags = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#221: FILE: drivers/pci/quirks.c:867:
+               res[3].start = res[3].end = res[3].flags = 0;$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#221: FILE: drivers/pci/quirks.c:867:
+               res[3].start = res[3].end = res[3].flags = 0;

ERROR:CODE_INDENT: code indent should use tabs where possible
#222: FILE: drivers/pci/quirks.c:868:
+               last_bar = 3;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#222: FILE: drivers/pci/quirks.c:868:
+               last_bar = 3;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#223: FILE: drivers/pci/quirks.c:869:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#225: FILE: drivers/pci/quirks.c:871:
+       if (!last_bar)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#225: FILE: drivers/pci/quirks.c:871:
+       if (!last_bar)
+               return;

ERROR:CODE_INDENT: code indent should use tabs where possible
#226: FILE: drivers/pci/quirks.c:872:
+               return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#226: FILE: drivers/pci/quirks.c:872:
+               return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#228: FILE: drivers/pci/quirks.c:874:
+       printk(KERN_INFO "PCI: Ignoring BAR%d-%d of IDE controller %s\n",$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#228: FILE: drivers/pci/quirks.c:874:
+       printk(KERN_INFO "PCI: Ignoring BAR%d-%d of IDE controller %s\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#229: FILE: drivers/pci/quirks.c:875:
+              first_bar, last_bar, pci_name(dev));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#229: FILE: drivers/pci/quirks.c:875:
+              first_bar, last_bar, pci_name(dev));$

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#247: FILE: drivers/pci/quirks.c:935:
+DECLARE_PCI_FIXUP_HEADER(PCI_VENDOR_ID_SERVERWORKS, PCI_DEVICE_ID_SERVERWORKS_CSB5IDE, quirk_svwks_csb5ide );

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: space prohibited before that close parenthesis ')'
#247: FILE: drivers/pci/quirks.c:935:
+DECLARE_PCI_FIXUP_HEADER(PCI_VENDOR_ID_SERVERWORKS, PCI_DEVICE_ID_SERVERWORKS_CSB5IDE, quirk_svwks_csb5ide );

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.05338.commit.a342795220806e97710d0bc67fd2741eddcaf147 total: 22 errors, 34 warnings, 5 checks, 166 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.05338.commit.a342795220806e97710d0bc67fd2741eddcaf147 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
