WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

ERROR:SPACING: space required after that ',' (ctx:VxV)
#71: FILE: linux/mutex.h:61:
+#define __mutex_init(l,n)		__rt_mutex_init(&(l)->mutex,	\
                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#120: FILE: linux/rt_lock.h:143:
+extern void fastcall __sema_init(struct semaphore *sem, int val, char *name

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#128: FILE: linux/rt_lock.h:149:
+extern void fastcall __init_MUTEX(struct semaphore *sem, char *name

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#179: FILE: linux/rtmutex.h:61:
+# define rt_mutex_init(mutex)		__rt_mutex_init(mutex, __FUNCTION__ \

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#203: FILE: linux/rtmutex.h:92:
+extern void __rt_mutex_init(struct rt_mutex *lock,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#204: FILE: linux/rtmutex.h:93:
+extern void __rt_mutex_init(struct rt_mutex *lock,
+				const char *name

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#207: FILE: linux/rtmutex.h:96:
+extern void __rt_mutex_init_annotated(struct rt_mutex *lock, const char *name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#208: FILE: linux/rtmutex.h:97:
+extern void __rt_mutex_init_annotated(struct rt_mutex *lock, const char *name,
+					LOCK_STAT_NOTE_PARAM_DECL,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#224: FILE: linux/rtmutex.h:116:
+extern void rt_mutex_lock_with_ip(struct rt_mutex *lock,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#225: FILE: linux/rtmutex.h:117:
+extern void rt_mutex_lock_with_ip(struct rt_mutex *lock,
+					unsigned long ip);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#226: FILE: linux/rtmutex.h:118:
+extern int rt_mutex_lock_interruptible_with_ip(struct rt_mutex *lock,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#227: FILE: linux/rtmutex.h:119:
+extern int rt_mutex_lock_interruptible_with_ip(struct rt_mutex *lock,
+						int detect_deadlock,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#229: FILE: linux/rtmutex.h:121:
+extern int rt_mutex_timed_lock_with_ip(struct rt_mutex *lock,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#230: FILE: linux/rtmutex.h:122:
+extern int rt_mutex_timed_lock_with_ip(struct rt_mutex *lock,
+					struct hrtimer_sleeper *timeout,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#233: FILE: linux/rtmutex.h:125:
+extern int rt_mutex_trylock_with_ip(struct rt_mutex *lock,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#234: FILE: linux/rtmutex.h:126:
+extern int rt_mutex_trylock_with_ip(struct rt_mutex *lock,
+					unsigned long ip);

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#262: FILE: linux/spinlock.h:162:
+__rt_spin_lock_init_annotated(spinlock_t *lock, char *name,
+				struct lock_class_key *key,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#275: FILE: linux/spinlock.h:184:
+extern void __lockfunc __rt_spin_lock_with_ip(struct rt_mutex *lock, unsigned long _ip);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#320: FILE: linux/spinlock.h:338:
+__rt_rwlock_init_annotated(rwlock_t *rwlock, char *name,
+				struct lock_class_key *key,

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#340: FILE: linux/spinlock.h:468:
+#define PICK_OP_INIT_ANNOTATED(op, lock, lsobj)				\
+do {									\
+	if (TYPE_EQUAL((lock), raw_spinlock_t))				\
+		_raw_spin##op((raw_spinlock_t *)(lock));		\
+	else if (TYPE_EQUAL(lock, spinlock_t))				\
+		_spin##op##_annotated((spinlock_t *)(lock), #lock, __FILE__, __LINE__, lsobj); \
+	else __bad_spinlock_type();					\
+} while (0)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#346: FILE: linux/spinlock.h:474:
+	else __bad_spinlock_type();					\

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'init' exists, appears to be a -p0 patch

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.12873.commit.bb1e9ae6fbb5d42795ad5abbbbfef66725def7aa total: 2 errors, 7 warnings, 18 checks, 292 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.12873.commit.bb1e9ae6fbb5d42795ad5abbbbfef66725def7aa has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
