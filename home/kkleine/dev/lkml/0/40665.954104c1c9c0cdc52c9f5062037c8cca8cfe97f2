WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#58: FILE: include/linux/nfs4acl.h:1:
+#ifndef __NFS4ACL_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_ace' - possible side-effects?
#79: FILE: include/linux/nfs4acl.h:22:
+#define nfs4acl_for_each_entry(_ace, _acl) \
+	for (_ace = _acl->a_entries; \
+	     _ace != _acl->a_entries + _acl->a_count; \
+	     _ace++)

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_acl' - possible side-effects?
#79: FILE: include/linux/nfs4acl.h:22:
+#define nfs4acl_for_each_entry(_ace, _acl) \
+	for (_ace = _acl->a_entries; \
+	     _ace != _acl->a_entries + _acl->a_count; \
+	     _ace++)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_acl' may be better as '(_acl)' to avoid precedence issues
#79: FILE: include/linux/nfs4acl.h:22:
+#define nfs4acl_for_each_entry(_ace, _acl) \
+	for (_ace = _acl->a_entries; \
+	     _ace != _acl->a_entries + _acl->a_count; \
+	     _ace++)

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_ace' - possible side-effects?
#84: FILE: include/linux/nfs4acl.h:27:
+#define nfs4acl_for_each_entry_reverse(_ace, _acl) \
+	for (_ace = _acl->a_entries + _acl->a_count - 1; \
+	     _ace != _acl->a_entries - 1; \
+	     _ace--)

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_acl' - possible side-effects?
#84: FILE: include/linux/nfs4acl.h:27:
+#define nfs4acl_for_each_entry_reverse(_ace, _acl) \
+	for (_ace = _acl->a_entries + _acl->a_count - 1; \
+	     _ace != _acl->a_entries - 1; \
+	     _ace--)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_acl' may be better as '(_acl)' to avoid precedence issues
#84: FILE: include/linux/nfs4acl.h:27:
+#define nfs4acl_for_each_entry_reverse(_ace, _acl) \
+	for (_ace = _acl->a_entries + _acl->a_count - 1; \
+	     _ace != _acl->a_entries - 1; \
+	     _ace--)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#110: FILE: include/linux/nfs4acl.h:53:
+	ACE4_IDENTIFIER_GROUP )

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that close parenthesis ')'
#148: FILE: include/linux/nfs4acl.h:91:
+	ACE4_SYNCHRONIZE )

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#151: FILE: include/linux/nfs4acl.h:94:
+/* Special e_who identifiers: we use these pointer values in comparisons
+   instead of strcmp for efficiency. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#151: FILE: include/linux/nfs4acl.h:94:
+   instead of strcmp for efficiency. */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#218: FILE: include/linux/nfs4acl.h:161:
+extern int nfs4ace_dup(struct nfs4ace *, struct nfs4ace *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#219: FILE: include/linux/nfs4acl.h:162:
+extern void nfs4ace_free(struct nfs4ace *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nfs4ace *' should also have an identifier name
#219: FILE: include/linux/nfs4acl.h:162:
+extern void nfs4ace_free(struct nfs4ace *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#221: FILE: include/linux/nfs4acl.h:164:
+extern struct nfs4acl *nfs4acl_alloc(int count);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#222: FILE: include/linux/nfs4acl.h:165:
+extern struct nfs4acl *nfs4acl_clone(struct nfs4acl *acl);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#223: FILE: include/linux/nfs4acl.h:166:
+extern void __nfs4acl_free(struct nfs4acl *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nfs4acl *' should also have an identifier name
#223: FILE: include/linux/nfs4acl.h:166:
+extern void __nfs4acl_free(struct nfs4acl *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#231: FILE: include/linux/nfs4acl.h:174:
+extern int nfs4acl_permission(struct inode *, const struct nfs4acl *, int, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#232: FILE: include/linux/nfs4acl.h:175:
+extern int nfs4ace_is_same_who(struct nfs4ace *, struct nfs4ace *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nfs4ace *' should also have an identifier name
#232: FILE: include/linux/nfs4acl.h:175:
+extern int nfs4ace_is_same_who(struct nfs4ace *, struct nfs4ace *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nfs4ace *' should also have an identifier name
#232: FILE: include/linux/nfs4acl.h:175:
+extern int nfs4ace_is_same_who(struct nfs4ace *, struct nfs4ace *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#233: FILE: include/linux/nfs4acl.h:176:
+extern struct nfs4acl *nfs4acl_inherit(struct nfs4acl *, mode_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nfs4acl *' should also have an identifier name
#233: FILE: include/linux/nfs4acl.h:176:
+extern struct nfs4acl *nfs4acl_inherit(struct nfs4acl *, mode_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'mode_t' should also have an identifier name
#233: FILE: include/linux/nfs4acl.h:176:
+extern struct nfs4acl *nfs4acl_inherit(struct nfs4acl *, mode_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#233: FILE: include/linux/nfs4acl.h:176:
+extern struct nfs4acl *nfs4acl_inherit(struct nfs4acl *, mode_t, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#234: FILE: include/linux/nfs4acl.h:177:
+extern int nfs4acl_masks_to_mode(struct nfs4acl *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nfs4acl *' should also have an identifier name
#234: FILE: include/linux/nfs4acl.h:177:
+extern int nfs4acl_masks_to_mode(struct nfs4acl *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#235: FILE: include/linux/nfs4acl.h:178:
+extern void nfs4acl_chmod(struct nfs4acl *, mode_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nfs4acl *' should also have an identifier name
#235: FILE: include/linux/nfs4acl.h:178:
+extern void nfs4acl_chmod(struct nfs4acl *, mode_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'mode_t' should also have an identifier name
#235: FILE: include/linux/nfs4acl.h:178:
+extern void nfs4acl_chmod(struct nfs4acl *, mode_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#236: FILE: include/linux/nfs4acl.h:179:
+extern int nfs4acl_apply_masks(struct nfs4acl **acl, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#236: FILE: include/linux/nfs4acl.h:179:
+extern int nfs4acl_apply_masks(struct nfs4acl **acl, int);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#244: FILE: include/linux/nfs4acl_xattr.h:1:
+#ifndef __NFS4ACL_XATTR_H

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#271: FILE: include/linux/nfs4acl_xattr.h:28:
+extern struct nfs4acl *nfs4acl_from_xattr(const void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const void *' should also have an identifier name
#271: FILE: include/linux/nfs4acl_xattr.h:28:
+extern struct nfs4acl *nfs4acl_from_xattr(const void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#271: FILE: include/linux/nfs4acl_xattr.h:28:
+extern struct nfs4acl *nfs4acl_from_xattr(const void *, size_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#272: FILE: include/linux/nfs4acl_xattr.h:29:
+extern void *nfs4acl_to_xattr(const struct nfs4acl *, size_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct nfs4acl *' should also have an identifier name
#272: FILE: include/linux/nfs4acl_xattr.h:29:
+extern void *nfs4acl_to_xattr(const struct nfs4acl *, size_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t *' should also have an identifier name
#272: FILE: include/linux/nfs4acl_xattr.h:29:
+extern void *nfs4acl_to_xattr(const struct nfs4acl *, size_t *);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#280: FILE: fs/nfs4acl_xattr.c:1:
+/*

CHECK:BRACES: braces {} should be used on all arms of this statement
#357: FILE: fs/nfs4acl_xattr.c:78:
+		if (who == end) {
[...]
+		} else if (!strcmp(who, nfs4ace_owner_who)) {
[...]
+		} else if (!strcmp(who, nfs4ace_group_who)) {
[...]
+		} else if (!strcmp(who, nfs4ace_everyone_who)) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#369: FILE: fs/nfs4acl_xattr.c:90:
+		} else

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#533: FILE: fs/ext3/namei.c:2365:
+int ext3_permission(struct inode *inode, int mask, struct nameidata *nd)
                                                                      ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#538: FILE: fs/ext3/namei.c:2370:
+		return ext3_nfs4acl_permission(inode, mask);
+	else

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#538: FILE: fs/ext3/namei.c:2370:
+	else
[...]
+        return generic_permission(inode, mask, ext3_check_acl);

ERROR:CODE_INDENT: code indent should use tabs where possible
#540: FILE: fs/ext3/namei.c:2372:
+        return generic_permission(inode, mask, ext3_check_acl);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#540: FILE: fs/ext3/namei.c:2372:
+        return generic_permission(inode, mask, ext3_check_acl);$

CHECK:CAMELCASE: Avoid CamelCase: <Opt_user_xattr>
#555: FILE: fs/ext3/super.c:631:
+	Opt_user_xattr, Opt_nouser_xattr, Opt_acl, Opt_acl_flavor, Opt_noacl,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Opt_nouser_xattr>
#555: FILE: fs/ext3/super.c:631:
+	Opt_user_xattr, Opt_nouser_xattr, Opt_acl, Opt_acl_flavor, Opt_noacl,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_acl>
#555: FILE: fs/ext3/super.c:631:
+	Opt_user_xattr, Opt_nouser_xattr, Opt_acl, Opt_acl_flavor, Opt_noacl,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_acl_flavor>
#555: FILE: fs/ext3/super.c:631:
+	Opt_user_xattr, Opt_nouser_xattr, Opt_acl, Opt_acl_flavor, Opt_noacl,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_noacl>
#555: FILE: fs/ext3/super.c:631:
+	Opt_user_xattr, Opt_nouser_xattr, Opt_acl, Opt_acl_flavor, Opt_noacl,

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#575: FILE: fs/ext3/super.c:809:
+			/* fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 24)
#582: FILE: fs/ext3/super.c:816:
+			} else
[...]
+			if (match_string(&args[0], "nfs4")) {

CHECK:BRACES: Unbalanced braces around else statement
#582: FILE: fs/ext3/super.c:816:
+			} else

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 24)
#589: FILE: fs/ext3/super.c:823:
+			} else
+			if (match_string(&args[0], "nfs4+max")) {

CHECK:BRACES: Unbalanced braces around else statement
#589: FILE: fs/ext3/super.c:823:
+			} else

CHECK:BRACES: Unbalanced braces around else statement
#594: FILE: fs/ext3/super.c:828:
+			} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#597: FILE: fs/ext3/super.c:831:
+				printk(KERN_ERR "EXT3-fs: unsupported acl "

WARNING:SPLIT_STRING: quoted string split across lines
#598: FILE: fs/ext3/super.c:832:
+				printk(KERN_ERR "EXT3-fs: unsupported acl "
+				       "flavor\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:DEPRECATED_VARIABLE: Use of EXTRA_CFLAGS is deprecated, please use `ccflags-y instead.
#715: FILE: fs/ext3/Makefile:5:
+EXTRA_CFLAGS := -DNFS4ACL_DEBUG

EXTRA_{A,C,CPP,LD}FLAGS are deprecated and should be replaced by the new
flags added via commit f77bf01425b1 ("kbuild: introduce ccflags-y,
asflags-y and ldflags-y").

The following conversion scheme maybe used::

  EXTRA_AFLAGS    ->  asflags-y
  EXTRA_CFLAGS    ->  ccflags-y
  EXTRA_CPPFLAGS  ->  cppflags-y
  EXTRA_LDFLAGS   ->  ldflags-y

See:

  1. https://lore.kernel.org/lkml/20070930191054.GA15876@uranus.ravnborg.org/
  2. https://lore.kernel.org/lkml/1313384834-24433-12-git-send-email-lacombar@gmail.com/
  3. https://www.kernel.org/doc/html/latest/kbuild/makefiles.html#compilation-flags

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#754: FILE: fs/ext3/nfs4acl.c:1:
+/*

CHECK:BRACES: braces {} should be used on all arms of this statement
#791: FILE: fs/ext3/nfs4acl.c:38:
+	if (retval > 0) {
[...]
+	} else if (retval == -ENODATA || retval == -ENOSYS)
[...]
+	else
[...]

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#795: FILE: fs/ext3/nfs4acl.c:42:
+	} else if (retval == -ENODATA || retval == -ENOSYS)

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#830: FILE: fs/ext3/nfs4acl.c:77:
+	BUG_ON(!test_opt(inode->i_sb, NFS4ACL));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:BRACES: braces {} should be used on all arms of this statement
#832: FILE: fs/ext3/nfs4acl.c:79:
+	if (!acl)
[...]
+	else if (IS_ERR(acl))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#836: FILE: fs/ext3/nfs4acl.c:83:
+	else {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#851: FILE: fs/ext3/nfs4acl.c:98:
+	BUG_ON(!test_opt(inode->i_sb, NFS4ACL));

CHECK:BRACES: braces {} should be used on all arms of this statement
#861: FILE: fs/ext3/nfs4acl.c:108:
+	if (IS_ERR(acl))
[...]
+	else if (acl) {
[...]

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#865: FILE: fs/ext3/nfs4acl.c:112:
+		inode->i_mode = (inode->i_mode & ~S_IRWXUGO) |

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#884: FILE: fs/ext3/nfs4acl.c:131:
+	BUG_ON(!test_opt(inode->i_sb, NFS4ACL));

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#1009: FILE: fs/ext3/nfs4acl.c:256:
+		retval = ext3_set_mode(inode, (inode->i_mode & ~S_IRWXUGO) |

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1040: FILE: fs/ext3/nfs4acl.h:1:
+#ifndef __FS_EXT3_NFS4ACL_H

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1045: FILE: fs/ext3/nfs4acl.h:6:
+extern int ext3_nfs4acl_permission(struct inode *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1046: FILE: fs/ext3/nfs4acl.h:7:
+extern int ext3_nfs4acl_init(handle_t *, struct inode *, struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'handle_t *' should also have an identifier name
#1046: FILE: fs/ext3/nfs4acl.h:7:
+extern int ext3_nfs4acl_init(handle_t *, struct inode *, struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1046: FILE: fs/ext3/nfs4acl.h:7:
+extern int ext3_nfs4acl_init(handle_t *, struct inode *, struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1046: FILE: fs/ext3/nfs4acl.h:7:
+extern int ext3_nfs4acl_init(handle_t *, struct inode *, struct inode *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1047: FILE: fs/ext3/nfs4acl.h:8:
+extern int ext3_nfs4acl_chmod(struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1047: FILE: fs/ext3/nfs4acl.h:8:
+extern int ext3_nfs4acl_chmod(struct inode *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1101: FILE: fs/ext3/acl.h:61:
+extern int ext3_check_acl(struct inode *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1101: FILE: fs/ext3/acl.h:61:
+extern int ext3_check_acl(struct inode *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1101: FILE: fs/ext3/acl.h:61:
+extern int ext3_check_acl(struct inode *, int);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1120: FILE: fs/ext3/namei.h:8:
+extern int ext3_permission (struct inode *, int, struct nameidata *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1120: FILE: fs/ext3/namei.h:8:
+extern int ext3_permission (struct inode *, int, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1120: FILE: fs/ext3/namei.h:8:
+extern int ext3_permission (struct inode *, int, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1120: FILE: fs/ext3/namei.h:8:
+extern int ext3_permission (struct inode *, int, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#1120: FILE: fs/ext3/namei.h:8:
+extern int ext3_permission (struct inode *, int, struct nameidata *);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1127: FILE: fs/nfs4acl_base.c:1:
+/*

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1157: FILE: fs/nfs4acl_base.c:31:
+EXPORT_SYMBOL_GPL(nfs4ace_owner_who);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1158: FILE: fs/nfs4acl_base.c:32:
+EXPORT_SYMBOL_GPL(nfs4ace_group_who);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1159: FILE: fs/nfs4acl_base.c:33:
+EXPORT_SYMBOL_GPL(nfs4ace_everyone_who);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1178: FILE: fs/nfs4acl_base.c:52:
+#if 0

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1215: FILE: fs/nfs4acl_base.c:89:
+	ACE4_READ_ACL )

CHECK:BRACES: braces {} should be used on all arms of this statement
#1346: FILE: fs/nfs4acl_base.c:220:
+		if (nfs4ace_is_owner(ace)) {
[...]
+		} else if (nfs4ace_is_group(ace)) {
[...]
+		} else if (nfs4ace_is_unix_id(ace)) {
[...]
+		} else if (!nfs4ace_is_everyone(ace))
[...]

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1371: FILE: fs/nfs4acl_base.c:245:
+				/* Everybody who is allowed ACE4_WRITE_DATA is
+				   also allowed ACE4_APPEND_DATA. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1371: FILE: fs/nfs4acl_base.c:245:
+				   also allowed ACE4_APPEND_DATA. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1385: FILE: fs/nfs4acl_base.c:259:
+				/* Everybody who is denied ACE4_APPEND_DATA is
+				   also denied ACE4_WRITE_DATA. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1385: FILE: fs/nfs4acl_base.c:259:
+				   also denied ACE4_WRITE_DATA. */

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IXUGO' are not preferred. Consider using octal permissions '0111'.
#1463: FILE: fs/nfs4acl_base.c:337:
+	    (inode->i_mode & S_IXUGO) || S_ISDIR(inode->i_mode))

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1475: FILE: fs/nfs4acl_base.c:349:
+
+}

WARNING:TYPO_SPELLING: 'direcory' may be misspelled - perhaps 'directory'?
#1575: FILE: fs/nfs4acl_base.c:449:
+ * @dir_acl:	acl of the containing direcory
             	                      ^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1641: FILE: fs/nfs4acl_base.c:515:
+	/* The maximum max flags that the owner, group, and other classes
+	   are allowed. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1641: FILE: fs/nfs4acl_base.c:515:
+	   are allowed. */

CHECK:BRACES: braces {} should be used on all arms of this statement
#1642: FILE: fs/nfs4acl_base.c:516:
+	if (write_through) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1648: FILE: fs/nfs4acl_base.c:522:
+	} else

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1664: FILE: fs/nfs4acl_compat.c:1:
+/*

WARNING:TYPO_SPELLING: 'non-existant' may be misspelled - perhaps 'non-existent'?
#1703: FILE: fs/nfs4acl_compat.c:40:
+ * (non-existant) entry before the first entry). This behavior is the
     ^^^^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1775: FILE: fs/nfs4acl_compat.c:112:
+nfs4ace_change_mask(struct nfs4acl_alloc *x, struct nfs4ace **ace,
+			   unsigned int mask)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1870: FILE: fs/nfs4acl_compat.c:207:
+__nfs4acl_propagate_everyone(struct nfs4acl_alloc *x, struct nfs4ace *who,
+			  unsigned int allow)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1875: FILE: fs/nfs4acl_compat.c:212:
+	/* Remove the mask flags from allow that are already determined for
+	   this who value, and figure out if there is an ALLOW entry for

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1877: FILE: fs/nfs4acl_compat.c:214:
+	   ALLOW ACE. */

CHECK:BRACES: Unbalanced braces around else statement
#1898: FILE: fs/nfs4acl_compat.c:235:
+		else {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2014: FILE: fs/nfs4acl_compat.c:351:
+		/* Start from the entry before the trailing EVERYONE@ ALLOW
+		   entry. We will not hit EVERYONE@ entries in the loop. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2014: FILE: fs/nfs4acl_compat.c:351:
+		   entry. We will not hit EVERYONE@ entries in the loop. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2024: FILE: fs/nfs4acl_compat.c:361:
+				/* Any inserted entry will end up below the
+				   current entry. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2024: FILE: fs/nfs4acl_compat.c:361:
+				   current entry. */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2026: FILE: fs/nfs4acl_compat.c:363:
+				error = __nfs4acl_propagate_everyone(x, ace,
+								   group_allow);

CHECK:BRACES: braces {} should be used on all arms of this statement
#2077: FILE: fs/nfs4acl_compat.c:414:
+		if (nfs4ace_is_allow(ace))
[...]
+		else if (nfs4ace_is_deny(ace)) {
[...]

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2167: FILE: fs/nfs4acl_compat.c:504:
+	/* Figure out if we can update an existig DENY entry.  Start
+	   from the entry before the trailing EVERYONE@ ALLOW entry. We

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2168: FILE: fs/nfs4acl_compat.c:505:
+	   will not hit EVERYONE@ entries in the loop. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2187: FILE: fs/nfs4acl_compat.c:524:
+		/* Insert a eny entry before the trailing EVERYONE@ DENY
+		   entry. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2187: FILE: fs/nfs4acl_compat.c:524:
+		   entry. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2234: FILE: fs/nfs4acl_compat.c:571:
+		/* Start from the entry before the trailing EVERYONE@ ALLOW
+		   entry. We will not hit EVERYONE@ entries in the loop. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2234: FILE: fs/nfs4acl_compat.c:571:
+		   entry. We will not hit EVERYONE@ entries in the loop. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2263: FILE: fs/nfs4acl_compat.c:600:
+	/* Remove all owner@ and group@ ACEs: we re-insert them at the
+	   top. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2263: FILE: fs/nfs4acl_compat.c:600:
+	   top. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2273: FILE: fs/nfs4acl_compat.c:610:
+	/* Insert the everyone@ allow entry at the end, or update the
+	   existing entry. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2273: FILE: fs/nfs4acl_compat.c:610:
+	   existing entry. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2293: FILE: fs/nfs4acl_compat.c:630:
+	/* Compute the permissions that owner@ and group@ are already granted
+	   though the everyone@ allow entry at the end. Note that the acl

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2294: FILE: fs/nfs4acl_compat.c:631:
+	   contains no owner@ or group@ entries at this point. */

CHECK:BRACES: braces {} should be used on all arms of this statement
#2299: FILE: fs/nfs4acl_compat.c:636:
+		if (nfs4ace_is_allow(ace)) {
[...]
+		} else if (nfs4ace_is_deny(ace))
[...]

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#2302: FILE: fs/nfs4acl_compat.c:639:
+		} else if (nfs4ace_is_deny(ace))
+				allowed &= ~ace->e_mask;

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.40665.commit.954104c1c9c0cdc52c9f5062037c8cca8cfe97f2 total: 4 errors, 82 warnings, 48 checks, 2237 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.40665.commit.954104c1c9c0cdc52c9f5062037c8cca8cfe97f2 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
