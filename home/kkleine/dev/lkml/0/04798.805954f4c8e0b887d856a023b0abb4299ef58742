WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
1. Implemented regular expression querying. The GUI includes an option for a 

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#355: FILE: scripts/kconfig/qconf.cc:1694:
+	// Update to the the new branch

CHECK:CAMELCASE: Avoid CamelCase: <findEntries>
#437: FILE: scripts/kconfig/qconf.h:311:
+	void findEntries(void);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:NEW_TYPEDEFS: do not add new typedefs
#446: FILE: scripts/kconfig/qconf.h:341:
+typedef QValueList<struct menu *> MenuList;

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#446: FILE: scripts/kconfig/qconf.h:341:
+typedef QValueList<struct menu *> MenuList;
                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:WxO)
#446: FILE: scripts/kconfig/qconf.h:341:
+typedef QValueList<struct menu *> MenuList;
                                ^

ERROR:SPACING: spaces required around that '>' (ctx:OxW)
#446: FILE: scripts/kconfig/qconf.h:341:
+typedef QValueList<struct menu *> MenuList;
                                 ^

CHECK:CAMELCASE: Avoid CamelCase: <QValueList>
#446: FILE: scripts/kconfig/qconf.h:341:
+typedef QValueList<struct menu *> MenuList;

CHECK:CAMELCASE: Avoid CamelCase: <MenuList>
#446: FILE: scripts/kconfig/qconf.h:341:
+typedef QValueList<struct menu *> MenuList;

CHECK:CAMELCASE: Avoid CamelCase: <ListViewBranch>
#448: FILE: scripts/kconfig/qconf.h:343:
+struct ListViewBranch

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#449: FILE: scripts/kconfig/qconf.h:344:
+struct ListViewBranch
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: open brace '{' following union go on the same line
#452: FILE: scripts/kconfig/qconf.h:347:
+	union
+	{

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#453: FILE: scripts/kconfig/qconf.h:348:
+		QListViewItem * item;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <QListViewItem>
#453: FILE: scripts/kconfig/qconf.h:348:
+		QListViewItem * item;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#454: FILE: scripts/kconfig/qconf.h:349:
+		QListView * view;

CHECK:CAMELCASE: Avoid CamelCase: <QListView>
#454: FILE: scripts/kconfig/qconf.h:349:
+		QListView * view;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#457: FILE: scripts/kconfig/qconf.h:352:
+	ListViewBranch(QListView * v) { view = v; which = VIEW; }

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#458: FILE: scripts/kconfig/qconf.h:353:
+	ListViewBranch(QListViewItem * i) { item = i; which = ITEM; }

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#459: FILE: scripts/kconfig/qconf.h:354:
+	QListViewItem * newItem(QString & s);

CHECK:CAMELCASE: Avoid CamelCase: <newItem>
#459: FILE: scripts/kconfig/qconf.h:354:
+	QListViewItem * newItem(QString & s);

CHECK:CAMELCASE: Avoid CamelCase: <QString>
#459: FILE: scripts/kconfig/qconf.h:354:
+	QListViewItem * newItem(QString & s);

CHECK:CAMELCASE: Avoid CamelCase: <insertItem>
#460: FILE: scripts/kconfig/qconf.h:355:
+	ListViewBranch insertItem(QString & s);

CHECK:CAMELCASE: Avoid CamelCase: <ListViewMenuItem>
#463: FILE: scripts/kconfig/qconf.h:358:
+struct ListViewMenuItem

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#464: FILE: scripts/kconfig/qconf.h:359:
+struct ListViewMenuItem
+{

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#466: FILE: scripts/kconfig/qconf.h:361:
+	struct menu * menu;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#469: FILE: scripts/kconfig/qconf.h:364:
+typedef QValueList<struct ListViewMenuItem> ListViewMenuList;

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#469: FILE: scripts/kconfig/qconf.h:364:
+typedef QValueList<struct ListViewMenuItem> ListViewMenuList;
                   ^

ERROR:SPACING: spaces required around that '>' (ctx:VxW)
#469: FILE: scripts/kconfig/qconf.h:364:
+typedef QValueList<struct ListViewMenuItem> ListViewMenuList;
                                           ^

CHECK:CAMELCASE: Avoid CamelCase: <ListViewMenuList>
#469: FILE: scripts/kconfig/qconf.h:364:
+typedef QValueList<struct ListViewMenuItem> ListViewMenuList;

CHECK:CAMELCASE: Avoid CamelCase: <FindQuery>
#472: FILE: scripts/kconfig/qconf.h:367:
+class FindQuery

WARNING:INDENTED_LABEL: labels should not be indented
#474: FILE: scripts/kconfig/qconf.h:369:
+	public:

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#478: FILE: scripts/kconfig/qconf.h:373:
+	QRegExp * compiled_regex;

CHECK:CAMELCASE: Avoid CamelCase: <QRegExp>
#478: FILE: scripts/kconfig/qconf.h:373:
+	QRegExp * compiled_regex;

WARNING:INDENTED_LABEL: labels should not be indented
#480: FILE: scripts/kconfig/qconf.h:375:
+	public:

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#484: FILE: scripts/kconfig/qconf.h:379:
+	bool string_matches(const char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:CAMELCASE: Avoid CamelCase: <FindDialog>
#487: FILE: scripts/kconfig/qconf.h:382:
+class FindDialog : public QDialog

CHECK:CAMELCASE: Avoid CamelCase: <QDialog>
#487: FILE: scripts/kconfig/qconf.h:382:
+class FindDialog : public QDialog

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#490: FILE: scripts/kconfig/qconf.h:385:
+	public:
 	      ^

WARNING:INDENTED_LABEL: labels should not be indented
#490: FILE: scripts/kconfig/qconf.h:385:
+	public:

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#491: FILE: scripts/kconfig/qconf.h:386:
+	FindDialog( QWidget* parent = 0, const char* name = 0, bool modal = FALSE, WFlags fl = 0 );

CHECK:SPACING: spaces preferred around that '*' (ctx:VxW)
#491: FILE: scripts/kconfig/qconf.h:386:
+	FindDialog( QWidget* parent = 0, const char* name = 0, bool modal = FALSE, WFlags fl = 0 );
 	                   ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#491: FILE: scripts/kconfig/qconf.h:386:
+	FindDialog( QWidget* parent = 0, const char* name = 0, bool modal = FALSE, WFlags fl = 0 );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#491: FILE: scripts/kconfig/qconf.h:386:
+	FindDialog( QWidget* parent = 0, const char* name = 0, bool modal = FALSE, WFlags fl = 0 );

CHECK:CAMELCASE: Avoid CamelCase: <QWidget>
#491: FILE: scripts/kconfig/qconf.h:386:
+	FindDialog( QWidget* parent = 0, const char* name = 0, bool modal = FALSE, WFlags fl = 0 );

CHECK:CAMELCASE: Avoid CamelCase: <WFlags>
#491: FILE: scripts/kconfig/qconf.h:386:
+	FindDialog( QWidget* parent = 0, const char* name = 0, bool modal = FALSE, WFlags fl = 0 );

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#493: FILE: scripts/kconfig/qconf.h:388:
+	QVBoxLayout * main_layout;

CHECK:CAMELCASE: Avoid CamelCase: <QVBoxLayout>
#493: FILE: scripts/kconfig/qconf.h:388:
+	QVBoxLayout * main_layout;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#494: FILE: scripts/kconfig/qconf.h:389:
+	QLineEdit * queryLineEdit;

CHECK:CAMELCASE: Avoid CamelCase: <QLineEdit>
#494: FILE: scripts/kconfig/qconf.h:389:
+	QLineEdit * queryLineEdit;

CHECK:CAMELCASE: Avoid CamelCase: <queryLineEdit>
#494: FILE: scripts/kconfig/qconf.h:389:
+	QLineEdit * queryLineEdit;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#495: FILE: scripts/kconfig/qconf.h:390:
+	QPushButton * findButton;

CHECK:CAMELCASE: Avoid CamelCase: <QPushButton>
#495: FILE: scripts/kconfig/qconf.h:390:
+	QPushButton * findButton;

CHECK:CAMELCASE: Avoid CamelCase: <findButton>
#495: FILE: scripts/kconfig/qconf.h:390:
+	QPushButton * findButton;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#496: FILE: scripts/kconfig/qconf.h:391:
+	QListView * results;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#497: FILE: scripts/kconfig/qconf.h:392:
+	QButtonGroup * search_type;

CHECK:CAMELCASE: Avoid CamelCase: <QButtonGroup>
#497: FILE: scripts/kconfig/qconf.h:392:
+	QButtonGroup * search_type;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#498: FILE: scripts/kconfig/qconf.h:393:
+	QRadioButton * substring, * keywords, * regex;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#498: FILE: scripts/kconfig/qconf.h:393:
+	QRadioButton * substring, * keywords, * regex;
 	                          ^

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#498: FILE: scripts/kconfig/qconf.h:393:
+	QRadioButton * substring, * keywords, * regex;
 	                                      ^

CHECK:CAMELCASE: Avoid CamelCase: <QRadioButton>
#498: FILE: scripts/kconfig/qconf.h:393:
+	QRadioButton * substring, * keywords, * regex;

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - void performQuery() should probably be void performQuery(void)
#500: FILE: scripts/kconfig/qconf.h:395:
+	void performQuery();

Function declarations without arguments like::

  int foo()

should be::

  int foo(void)

CHECK:CAMELCASE: Avoid CamelCase: <performQuery>
#500: FILE: scripts/kconfig/qconf.h:395:
+	void performQuery();

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#502: FILE: scripts/kconfig/qconf.h:397:
+	bool matches(struct menu * mymenu, FindQuery & query);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#503: FILE: scripts/kconfig/qconf.h:398:
+	void search(FindQuery & query, MenuList * parents,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#504: FILE: scripts/kconfig/qconf.h:399:
+	void search(FindQuery & query, MenuList * parents,
+			ListViewMenuList * * last_branch);

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#504: FILE: scripts/kconfig/qconf.h:399:
+			ListViewMenuList * * last_branch);
 			                   ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#505: FILE: scripts/kconfig/qconf.h:400:
+	void handle_match(MenuList * parents,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#506: FILE: scripts/kconfig/qconf.h:401:
+	void handle_match(MenuList * parents,
+			ListViewMenuList * * last_branch);

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#506: FILE: scripts/kconfig/qconf.h:401:
+			ListViewMenuList * * last_branch);
 			                   ^

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - SEARCH_TYPE getSearchType() should probably be SEARCH_TYPE getSearchType(void)
#507: FILE: scripts/kconfig/qconf.h:402:
+	SEARCH_TYPE getSearchType();

CHECK:CAMELCASE: Avoid CamelCase: <getSearchType>
#507: FILE: scripts/kconfig/qconf.h:402:
+	SEARCH_TYPE getSearchType();

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.04798.commit.805954f4c8e0b887d856a023b0abb4299ef58742 total: 33 errors, 8 warnings, 30 checks, 417 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.04798.commit.805954f4c8e0b887d856a023b0abb4299ef58742 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
