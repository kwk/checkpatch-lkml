ERROR:CODE_INDENT: code indent should use tabs where possible
#116: FILE: arch/powerpc/oprofile/common.c:88:
+        if (model->global_stop)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#116: FILE: arch/powerpc/oprofile/common.c:88:
+        if (model->global_stop)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#117: FILE: arch/powerpc/oprofile/common.c:89:
+                model->global_stop();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#117: FILE: arch/powerpc/oprofile/common.c:89:
+                model->global_stop();$

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#123: FILE: arch/powerpc/oprofile/common.c:148:
 	switch (cur_cpu_spec->oprofile_type) {
[...]
+		case PPC_OPROFILE_CELL:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#150: FILE: arch/powerpc/oprofile/op_model_cell.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#179: FILE: arch/powerpc/oprofile/op_model_cell.c:30:
+#include <asm/io.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/processor.h> instead of <asm/processor.h>
#181: FILE: arch/powerpc/oprofile/op_model_cell.c:32:
+#include <asm/processor.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#245: FILE: arch/powerpc/oprofile/op_model_cell.c:96:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#246: FILE: arch/powerpc/oprofile/op_model_cell.c:97:
+#define GET_SUB_UNIT(x) ((x & 0x0000f000) >> 12)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#247: FILE: arch/powerpc/oprofile/op_model_cell.c:98:
+#define GET_BUS_WORD(x) ((x & 0x000000f0) >> 4)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#248: FILE: arch/powerpc/oprofile/op_model_cell.c:99:
+#define GET_BUS_TYPE(x) ((x & 0x00000300) >> 8)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#249: FILE: arch/powerpc/oprofile/op_model_cell.c:100:
+#define GET_POLARITY(x) ((x & 0x00000002) >> 1)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#250: FILE: arch/powerpc/oprofile/op_model_cell.c:101:
+#define GET_COUNT_CYCLES(x) (x & 0x00000001)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#251: FILE: arch/powerpc/oprofile/op_model_cell.c:102:
+#define GET_INPUT_CONTROL(x) ((x & 0x00000004) >> 2)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#253: FILE: arch/powerpc/oprofile/op_model_cell.c:104:
+
+

WARNING:TYPO_SPELLING: 'Interpetation' may be misspelled - perhaps 'Interpretation'?
#258: FILE: arch/powerpc/oprofile/op_model_cell.c:109:
+/* Interpetation of hdw_thread:
    ^^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'atleast' may be misspelled - perhaps 'at least'?
#303: FILE: arch/powerpc/oprofile/op_model_cell.c:154:
+	 *  However, the FW still expects atleast one legal signal routing
 	                                  ^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#322: FILE: arch/powerpc/oprofile/op_model_cell.c:173:
+		printk(KERN_WARNING "%s: rtas returned: %d\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#323: FILE: arch/powerpc/oprofile/op_model_cell.c:174:
+		       __FUNCTION__, ret);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#346: FILE: arch/powerpc/oprofile/op_model_cell.c:197:
+		printk(KERN_WARNING "%s: rtas returned: %d\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#347: FILE: arch/powerpc/oprofile/op_model_cell.c:198:
+		       __FUNCTION__, ret);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around pm_signal[ctr]
#363: FILE: arch/powerpc/oprofile/op_model_cell.c:214:
+		p = &(pm_signal[ctr]);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around pm_signal[ctr]
#380: FILE: arch/powerpc/oprofile/op_model_cell.c:231:
+	p = &(pm_signal[ctr]);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bus_type == 0'
#400: FILE: arch/powerpc/oprofile/op_model_cell.c:251:
+		if ((bus_type == 0) && p->signal_group >= 60)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bus_type == 1'
#402: FILE: arch/powerpc/oprofile/op_model_cell.c:253:
+		if ((bus_type == 1) && p->signal_group >= 50)

WARNING:LINE_SPACING: Missing a blank line after declarations
#434: FILE: arch/powerpc/oprofile/op_model_cell.c:285:
+	u32 val = 0;
+	if (pm_cntrl->enable == 1)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#472: FILE: arch/powerpc/oprofile/op_model_cell.c:323:
+static inline void enable_ctr(u32 cpu, u32 ctr, u32 * pm07_cntrl)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#474: FILE: arch/powerpc/oprofile/op_model_cell.c:325:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#531: FILE: arch/powerpc/oprofile/op_model_cell.c:382:
+			per_cpu(pmc_values, cpu + prev_hdw_thread)[i]
+			    = cbe_read_ctr(cpu, i);

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#563: FILE: arch/powerpc/oprofile/op_model_cell.c:414:
+				set_pm_event(i,
+				     pmc_cntrl[next_hdw_thread][i].evnts,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#601: FILE: arch/powerpc/oprofile/op_model_cell.c:452:
+		printk(KERN_WARNING "%s: RTAS_UNKNOWN_SERVICE\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#602: FILE: arch/powerpc/oprofile/op_model_cell.c:453:
+		       __FUNCTION__);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#622: FILE: arch/powerpc/oprofile/op_model_cell.c:473:
+	for (i = 0; i < num_ctrs; ++i) {
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ctr[i].event >= 2100'
#636: FILE: arch/powerpc/oprofile/op_model_cell.c:487:
+		if ((ctr[i].event >= 2100) && (ctr[i].event <= 2111))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ctr[i].event <= 2111'
#636: FILE: arch/powerpc/oprofile/op_model_cell.c:487:
+		if ((ctr[i].event >= 2100) && (ctr[i].event <= 2111))

WARNING:BRACES: braces {} are not necessary for single statement blocks
#678: FILE: arch/powerpc/oprofile/op_model_cell.c:529:
+		for (i = 0; i < num_counters; ++i) {
+			per_cpu(pmc_values, cpu)[i] = reset_value[i];
+		}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#699: FILE: arch/powerpc/oprofile/op_model_cell.c:550:
+		printk(KERN_WARNING "%s: RTAS_UNKNOWN_SERVICE\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#700: FILE: arch/powerpc/oprofile/op_model_cell.c:551:
+		       __FUNCTION__);

WARNING:MEMORY_BARRIER: memory barrier without comment
#761: FILE: arch/powerpc/oprofile/op_model_cell.c:612:
+	smp_wmb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#781: FILE: arch/powerpc/oprofile/op_model_cell.c:632:
+	smp_wmb();

WARNING:TYPO_SPELLING: 'reenable' may be misspelled - perhaps 're-enable'?
#817: FILE: arch/powerpc/oprofile/op_model_cell.c:668:
+	/* Need to disable and reenable the performance counters
 	                       ^^^^^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'oprofile_running == 1'
#832: FILE: arch/powerpc/oprofile/op_model_cell.c:683:
+	if ((oprofile_running == 1) && (interrupt_mask != 0)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'interrupt_mask != 0'
#832: FILE: arch/powerpc/oprofile/op_model_cell.c:683:
+	if ((oprofile_running == 1) && (interrupt_mask != 0)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#838: FILE: arch/powerpc/oprofile/op_model_cell.c:689:
+			if ((interrupt_mask & CBE_PM_CTR_OVERFLOW_INTR(i))
+			    && ctr[i].enabled) {

WARNING:TYPO_SPELLING: 'Reenable' may be misspelled - perhaps 'Re-enable'?
#845: FILE: arch/powerpc/oprofile/op_model_cell.c:696:
+		 * Reenable the interrupt and restart the counters.
 		   ^^^^^^^^

WARNING:TYPO_SPELLING: 'virutal' may be misspelled - perhaps 'virtual'?
#847: FILE: arch/powerpc/oprofile/op_model_cell.c:698:
+		 * the virtual counter routine.  The virutal counter
 		                                     ^^^^^^^

WARNING:TYPO_SPELLING: 'permormance' may be misspelled - perhaps 'performance'?
#858: FILE: arch/powerpc/oprofile/op_model_cell.c:709:
+		 * this to work as desired, the permormance monitor needs to
 		                                ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'writting' may be misspelled - perhaps 'writing'?
#859: FILE: arch/powerpc/oprofile/op_model_cell.c:710:
+		 * be disabled while writting to the latches.  This is a
 		                     ^^^^^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#905: FILE: include/asm-powerpc/cell-pmu.h:94:
+extern void cbe_sync_irq(int node);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#908: FILE: include/asm-powerpc/cell-pmu.h:97:
+extern u32 cbe_get_hw_thread_id(int cpu);

ERROR:CODE_INDENT: code indent should use tabs where possible
#945: FILE: include/asm-powerpc/oprofile_impl.h:47:
+        void (*global_start) (struct op_counter_config *);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#945: FILE: include/asm-powerpc/oprofile_impl.h:47:
+        void (*global_start) (struct op_counter_config *);$

WARNING:SPACING: Unnecessary space before function pointer arguments
#945: FILE: include/asm-powerpc/oprofile_impl.h:47:
+        void (*global_start) (struct op_counter_config *);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct op_counter_config *' should also have an identifier name
#945: FILE: include/asm-powerpc/oprofile_impl.h:47:
+        void (*global_start) (struct op_counter_config *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:SPACING: Unnecessary space before function pointer arguments
#947: FILE: include/asm-powerpc/oprofile_impl.h:49:
+	void (*global_stop) (void);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#996: FILE: arch/powerpc/platforms/cell/pmu.c:421:
+		printk(KERN_WARNING "ERROR, unable to get existing irq %d " \

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#996: FILE: arch/powerpc/platforms/cell/pmu.c:421:
+		printk(KERN_WARNING "ERROR, unable to get existing irq %d " \

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.16615.commit.e9b83d51d2180a84240c8acccd99f04d9d56f794 total: 5 errors, 28 warnings, 25 checks, 885 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.16615.commit.e9b83d51d2180a84240c8acccd99f04d9d56f794 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
