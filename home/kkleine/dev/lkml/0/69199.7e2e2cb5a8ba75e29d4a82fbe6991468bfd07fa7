WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#26: 
Create vmstat.c/vmstat.h by separating the counter code and the proc functions.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#222: FILE: include/linux/vmstat.h:1:
+#ifndef _LINUX_VMSTAT_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#247: FILE: include/linux/vmstat.h:26:
+					 * only modified from process context */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#303: FILE: include/linux/vmstat.h:82:
+extern void get_page_state(struct page_state *ret);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#304: FILE: include/linux/vmstat.h:83:
+extern void get_page_state_node(struct page_state *ret, int node);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#305: FILE: include/linux/vmstat.h:84:
+extern void get_full_page_state(struct page_state *ret);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#306: FILE: include/linux/vmstat.h:85:
+extern unsigned long read_page_state_offset(unsigned long offset);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#307: FILE: include/linux/vmstat.h:86:
+extern void mod_page_state_offset(unsigned long offset, unsigned long delta);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#308: FILE: include/linux/vmstat.h:87:
+extern void __mod_page_state_offset(unsigned long offset, unsigned long delta);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#321: FILE: include/linux/vmstat.h:100:
+#define add_page_state(member,delta)	mod_page_state(member, (delta))
                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#322: FILE: include/linux/vmstat.h:101:
+#define sub_page_state(member,delta)	mod_page_state(member, 0UL - (delta))
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#326: FILE: include/linux/vmstat.h:105:
+#define __add_page_state(member,delta)	__mod_page_state(member, (delta))
                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#327: FILE: include/linux/vmstat.h:106:
+#define __sub_page_state(member,delta)	__mod_page_state(member, 0UL - (delta))
                                ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'zone' - possible side-effects?
#331: FILE: include/linux/vmstat.h:110:
+#define state_zone_offset(zone, member)					\
+({									\
+	unsigned offset;						\
+	if (is_highmem(zone))						\
+		offset = offsetof(struct page_state, member##_high);	\
+	else if (is_normal(zone))					\
+		offset = offsetof(struct page_state, member##_normal);	\
+	else if (is_dma32(zone))					\
+		offset = offsetof(struct page_state, member##_dma32);	\
+	else								\
+		offset = offsetof(struct page_state, member##_dma);	\
+	offset;								\
+})

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#333: FILE: include/linux/vmstat.h:112:
+	unsigned offset;						\

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#345: FILE: include/linux/vmstat.h:124:
+#define __mod_page_state_zone(zone, member, delta)			\
+ do {									\
+	__mod_page_state_offset(state_zone_offset(zone, member), (delta)); \
+ } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#346: FILE: include/linux/vmstat.h:125:
+ do {^I^I^I^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#348: FILE: include/linux/vmstat.h:127:
+ } while (0)$

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#350: FILE: include/linux/vmstat.h:129:
+#define mod_page_state_zone(zone, member, delta)			\
+ do {									\
+	mod_page_state_offset(state_zone_offset(zone, member), (delta)); \
+ } while (0)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#351: FILE: include/linux/vmstat.h:130:
+ do {^I^I^I^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#353: FILE: include/linux/vmstat.h:132:
+ } while (0)$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#362: FILE: mm/vmstat.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#363: FILE: mm/vmstat.c:2:
+ *  linux/mm/vmstat.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#387: FILE: mm/vmstat.c:26:
+	unsigned cpu;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#395: FILE: mm/vmstat.c:34:
+		unsigned off;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#396: FILE: mm/vmstat.c:35:
+		unsigned next_cpu;

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#401: FILE: mm/vmstat.c:40:
+		if (likely(next_cpu < NR_CPUS))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#418: FILE: mm/vmstat.c:57:
+	__get_page_state(ret, nr+1, &mask);
 	                        ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#475: FILE: mm/vmstat.c:114:
+void __get_zone_counts(unsigned long *active, unsigned long *inactive,
+			unsigned long *free, struct pglist_data *pgdat)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#491: FILE: mm/vmstat.c:130:
+void get_zone_counts(unsigned long *active,
+		unsigned long *inactive, unsigned long *free)

WARNING:LINE_SPACING: Missing a blank line after declarations
#500: FILE: mm/vmstat.c:139:
+		unsigned long l, m, n;
+		__get_zone_counts(&l, &m, &n, pgdat);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#515: FILE: mm/vmstat.c:154:
+	loff_t node = *pos;
+	for (pgdat = first_online_pgdat();

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#560: FILE: mm/vmstat.c:199:
+struct seq_operations fragmentation_op = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:SPLIT_STRING: quoted string split across lines
#643: FILE: mm/vmstat.c:282:
+			   "\n  pages free     %lu"
+			   "\n        min      %lu"

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#644: FILE: mm/vmstat.c:283:
+			   "\n        min      %lu"
+			   "\n        low      %lu"

WARNING:SPLIT_STRING: quoted string split across lines
#645: FILE: mm/vmstat.c:284:
+			   "\n        low      %lu"
+			   "\n        high     %lu"

WARNING:SPLIT_STRING: quoted string split across lines
#646: FILE: mm/vmstat.c:285:
+			   "\n        high     %lu"
+			   "\n        active   %lu"

WARNING:SPLIT_STRING: quoted string split across lines
#647: FILE: mm/vmstat.c:286:
+			   "\n        active   %lu"
+			   "\n        inactive %lu"

WARNING:SPLIT_STRING: quoted string split across lines
#648: FILE: mm/vmstat.c:287:
+			   "\n        inactive %lu"
+			   "\n        scanned  %lu (a: %lu i: %lu)"

WARNING:SPLIT_STRING: quoted string split across lines
#649: FILE: mm/vmstat.c:288:
+			   "\n        scanned  %lu (a: %lu i: %lu)"
+			   "\n        spanned  %lu"

WARNING:SPLIT_STRING: quoted string split across lines
#650: FILE: mm/vmstat.c:289:
+			   "\n        spanned  %lu"
+			   "\n        present  %lu",

WARNING:SPLIT_STRING: quoted string split across lines
#668: FILE: mm/vmstat.c:307:
+			   ")"
+			   "\n  pagesets");

WARNING:SPLIT_STRING: quoted string split across lines
#683: FILE: mm/vmstat.c:322:
+					   "\n    cpu: %i pcp: %i"
+					   "\n              count: %i"

WARNING:SPLIT_STRING: quoted string split across lines
#684: FILE: mm/vmstat.c:323:
+					   "\n              count: %i"
+					   "\n              high:  %i"

WARNING:SPLIT_STRING: quoted string split across lines
#685: FILE: mm/vmstat.c:324:
+					   "\n              high:  %i"
+					   "\n              batch: %i",

WARNING:SPLIT_STRING: quoted string split across lines
#694: FILE: mm/vmstat.c:333:
+				   "\n            numa_hit:       %lu"
+				   "\n            numa_miss:      %lu"

WARNING:SPLIT_STRING: quoted string split across lines
#695: FILE: mm/vmstat.c:334:
+				   "\n            numa_miss:      %lu"
+				   "\n            numa_foreign:   %lu"

WARNING:SPLIT_STRING: quoted string split across lines
#696: FILE: mm/vmstat.c:335:
+				   "\n            numa_foreign:   %lu"
+				   "\n            interleave_hit: %lu"

WARNING:SPLIT_STRING: quoted string split across lines
#697: FILE: mm/vmstat.c:336:
+				   "\n            interleave_hit: %lu"
+				   "\n            local_node:     %lu"

WARNING:SPLIT_STRING: quoted string split across lines
#698: FILE: mm/vmstat.c:337:
+				   "\n            local_node:     %lu"
+				   "\n            other_node:     %lu",

WARNING:SPLIT_STRING: quoted string split across lines
#709: FILE: mm/vmstat.c:348:
+			   "\n  all_unreclaimable: %u"
+			   "\n  prev_priority:     %i"

WARNING:SPLIT_STRING: quoted string split across lines
#710: FILE: mm/vmstat.c:349:
+			   "\n  prev_priority:     %i"
+			   "\n  temp_priority:     %i"

WARNING:SPLIT_STRING: quoted string split across lines
#711: FILE: mm/vmstat.c:350:
+			   "\n  temp_priority:     %i"
+			   "\n  start_pfn:         %lu",

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#722: FILE: mm/vmstat.c:361:
+struct seq_operations zoneinfo_op = {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#724: FILE: mm/vmstat.c:363:
+			       * fragmentation. */

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#770: FILE: mm/vmstat.c:409:
+struct seq_operations vmstat_op = {

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.69199.commit.7e2e2cb5a8ba75e29d4a82fbe6991468bfd07fa7 total: 4 errors, 42 warnings, 10 checks, 1139 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.69199.commit.7e2e2cb5a8ba75e29d4a82fbe6991468bfd07fa7 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
