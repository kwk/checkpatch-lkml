CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#133: FILE: include/linux/rcupdate.h:231:
+extern void init_rcu_boost_late(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#134: FILE: include/linux/rcupdate.h:232:
+extern void rcu_exit_wait(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#135: FILE: include/linux/rcupdate.h:233:
+extern void __rcu_preempt_boost(void);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#365: FILE: kernel/rcupreempt.c:126:
+};
+#define RCU_BOOST_ELEMENTS 4

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#369: FILE: kernel/rcupreempt.c:130:
+static struct task_struct *rcu_boost_task = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'rbdp' - possible side-effects?
#396: FILE: kernel/rcupreempt.c:157:
+#define rcu_boost_dat_stat_exit(rbdp, oldstate) \
+	do { \
+		if (rbdp != NULL) \
+			rcu_boost_dat_stat(rbdp, RCU_BOOST_DAT_EXIT, oldstate); \
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'rbdp' may be better as '(rbdp)' to avoid precedence issues
#396: FILE: kernel/rcupreempt.c:157:
+#define rcu_boost_dat_stat_exit(rbdp, oldstate) \
+	do { \
+		if (rbdp != NULL) \
+			rcu_boost_dat_stat(rbdp, RCU_BOOST_DAT_EXIT, oldstate); \
+	} while (0)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rbdp"
#398: FILE: kernel/rcupreempt.c:159:
+		if (rbdp != NULL) \

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#436: FILE: kernel/rcupreempt.c:197:
+	static time_t lastprint = 0;

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '+=' should be on the previous line
#480: FILE: kernel/rcupreempt.c:241:
+					sum.rbs_stats[event][state]
+					    += per_cpu(rcu_boost_dat,

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#488: FILE: kernel/rcupreempt.c:249:
+	printk(KERN_ALERT

WARNING:SPLIT_STRING: quoted string split across lines
#490: FILE: kernel/rcupreempt.c:251:
+	       "rcu_boost_dat: idx=%d "
+	       "b=%ld ul=%ld ub=%ld "

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#491: FILE: kernel/rcupreempt.c:252:
+	       "b=%ld ul=%ld ub=%ld "
+	       "boost: a=%ld ws=%ld cf=%ld s=%ld e=%ld\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#504: FILE: kernel/rcupreempt.c:265:
+		printk(KERN_ALERT "rcu_boost_dat %s %s\n",

WARNING:MEMORY_BARRIER: memory barrier without comment
#562: FILE: kernel/rcupreempt.c:323:
+		smp_wmb();

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#668: FILE: kernel/rcupreempt.c:429:
+	while (!list_empty(&list)) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#691: FILE: kernel/rcupreempt.c:452:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#703: FILE: kernel/rcupreempt.c:464:
+		if ((oldstate = taskp->rcub_state) != RCU_BOOST_BLOCKED) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#740: FILE: kernel/rcupreempt.c:501:
+^I^I$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#747: FILE: kernel/rcupreempt.c:508:
+		} else {
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#775: FILE: kernel/rcupreempt.c:536:
+^I^I^I ^I^I  oldstate, newstate) != oldstate);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#775: FILE: kernel/rcupreempt.c:536:
+^I^I^I ^I^I  oldstate, newstate) != oldstate);$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#805: FILE: kernel/rcupreempt.c:566:
+	do {
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#810: FILE: kernel/rcupreempt.c:571:
+^I^I$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#810: FILE: kernel/rcupreempt.c:571:
+		for_each_possible_cpu(cpu) {
+		

WARNING:TYPO_SPELLING: 'unstalled' may be misspelled - perhaps 'installed'?
#830: FILE: kernel/rcupreempt.c:591:
+		 * Sleep to allow any unstalled RCU read-side critical
 		                      ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#856: FILE: kernel/rcupreempt.c:617:
+	printk(KERN_ALERT "Starting RCU priority booster\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#860: FILE: kernel/rcupreempt.c:621:
+		printk(KERN_ALERT

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rbdp"
#890: FILE: kernel/rcupreempt.c:651:
+	if (rbdp == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#892: FILE: kernel/rcupreempt.c:653:
+		printk("Preempted RCU read-side critical section too early.\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#999: FILE: kernel/rcupreempt.c:760:
+^I$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1008: FILE: kernel/rcupreempt.c:769:
+	if (newstate == RCU_BOOST_IDLE) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1031: FILE: kernel/rcupreempt.c:792:
+{
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#1048: FILE: kernel/rcupreempt.c:809:
+/*&&&&*/printk(KERN_ALERT "rcu_boost_exit: pid=%d rcub_state=%d rcub_rbdp_wq=%p\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#1067: FILE: kernel/rcupreempt.c:828:
+			printk(KERN_ALERT "rcu_exit_wait pid %d: bad state\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rcu_exit_wait', this function's name, in a string
#1067: FILE: kernel/rcupreempt.c:828:
+			printk(KERN_ALERT "rcu_exit_wait pid %d: bad state\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#1070: FILE: kernel/rcupreempt.c:831:
+			printk(KERN_ALERT "rcu_exit_wait pid %d exiting "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rcu_exit_wait', this function's name, in a string
#1070: FILE: kernel/rcupreempt.c:831:
+			printk(KERN_ALERT "rcu_exit_wait pid %d exiting "

WARNING:SPLIT_STRING: quoted string split across lines
#1071: FILE: kernel/rcupreempt.c:832:
+			printk(KERN_ALERT "rcu_exit_wait pid %d exiting "
+					  "with rcu_read_lock() held\n",

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->rcub_state != RCU_BOOST_IDLE'
#1075: FILE: kernel/rcupreempt.c:836:
+		if ((current->rcub_state != RCU_BOOST_IDLE) &&
+		    (current->rcub_state != RCU_UNBOOST_IDLE)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->rcub_state != RCU_UNBOOST_IDLE'
#1075: FILE: kernel/rcupreempt.c:836:
+		if ((current->rcub_state != RCU_BOOST_IDLE) &&
+		    (current->rcub_state != RCU_UNBOOST_IDLE)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#1084: FILE: kernel/rcupreempt.c:845:
+			printk(KERN_ALERT "rcu_exit_wait() pid %d waiting "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rcu_exit_wait', this function's name, in a string
#1084: FILE: kernel/rcupreempt.c:845:
+			printk(KERN_ALERT "rcu_exit_wait() pid %d waiting "

WARNING:SPLIT_STRING: quoted string split across lines
#1085: FILE: kernel/rcupreempt.c:846:
+			printk(KERN_ALERT "rcu_exit_wait() pid %d waiting "
+					  "forever due to invalid state\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#1111: FILE: kernel/rcupreempt.c:872:
+^I^I^I         oldstate, newstate) != oldstate);$

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.04973.commit.7440ac915bc4f6355d66a8a40648c9ff610d7b52 total: 9 errors, 19 warnings, 17 checks, 1080 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.04973.commit.7440ac915bc4f6355d66a8a40648c9ff610d7b52 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
