WARNING:TYPO_SPELLING: 'dependant' may be misspelled - perhaps 'dependent'?
#40: 
16- LTTng architecture dependant instrumentation : x86_64
                       ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#43: 
OpenPGP public key:              http://krystal.dyndns.org:8080/key/compudj.gpg

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#51: 
--- a/arch/x86_64/ia32/ia32entry.S

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#324: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#329: FILE: arch/x86_64/kernel/ltt.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#341: FILE: arch/x86_64/kernel/ltt.c:13:
+void _trace_locking_irq_save(const void * lttng_param_RIP,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#347: FILE: arch/x86_64/kernel/ltt.c:19:
+void _trace_locking_irq_restore(const void * lttng_param_RIP,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#353: FILE: arch/x86_64/kernel/ltt.c:25:
+void _trace_locking_irq_disable(const void * lttng_param_RIP)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#358: FILE: arch/x86_64/kernel/ltt.c:30:
+void _trace_locking_irq_enable(const void * lttng_param_RIP)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#363: FILE: arch/x86_64/kernel/ltt.c:35:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#364: FILE: arch/x86_64/kernel/ltt.c:36:
+EXPORT_SYMBOL(_trace_locking_irq_save);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#365: FILE: arch/x86_64/kernel/ltt.c:37:
+EXPORT_SYMBOL(_trace_locking_irq_restore);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#366: FILE: arch/x86_64/kernel/ltt.c:38:
+EXPORT_SYMBOL(_trace_locking_irq_disable);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#367: FILE: arch/x86_64/kernel/ltt.c:39:
+EXPORT_SYMBOL(_trace_locking_irq_enable);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#439: FILE: arch/x86_64/kernel/traps.c:395:
+/* Trace related code.  These functions are defined as simple wrappers
+   around the macros so that tracing code can be called from

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#440: FILE: arch/x86_64/kernel/traps.c:396:
+   assembly. */

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#446: FILE: arch/x86_64/kernel/traps.c:402:
+	trace_kernel_arch_syscall_entry(

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#448: FILE: arch/x86_64/kernel/traps.c:404:
+			(void*)regs->rip);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#450: FILE: arch/x86_64/kernel/traps.c:406:
+}
+asmlinkage void trace_real_syscall32_entry(struct pt_regs *regs)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#455: FILE: arch/x86_64/kernel/traps.c:411:
+	trace_kernel_arch_syscall_entry(

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#457: FILE: arch/x86_64/kernel/traps.c:413:
+			(void*)regs->rip);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#460: FILE: arch/x86_64/kernel/traps.c:416:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#466: FILE: arch/x86_64/kernel/traps.c:422:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#467: FILE: arch/x86_64/kernel/traps.c:423:
+asmlinkage void trace_process_kernel_thread__(uint32_t pid, void * function)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#467: FILE: arch/x86_64/kernel/traps.c:423:
+asmlinkage void trace_process_kernel_thread__(uint32_t pid, void * function)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#473: FILE: arch/x86_64/kernel/traps.c:429:
+
+

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#481: FILE: arch/x86_64/kernel/traps.c:533:
+	trace_kernel_trap_entry(trapnr, (void*)regs->rip);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#509: FILE: arch/x86_64/kernel/traps.c:646:
+		trace_kernel_trap_entry(13, (void*)regs->rip);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#520: FILE: arch/x86_64/kernel/traps.c:707:
+	/* On machines with APIC enabled, NMIs are used to implement a watchdog
+	   and will hang the machine if traced. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#520: FILE: arch/x86_64/kernel/traps.c:707:
+	   and will hang the machine if traced. */

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#521: FILE: arch/x86_64/kernel/traps.c:708:
+	trace_kernel_trap_entry(2, (void*)regs->rip);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#574: FILE: arch/x86_64/kernel/traps.c:842:
+	trace_kernel_trap_entry(1, (void*)regs->rip);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#584: FILE: arch/x86_64/kernel/traps.c:1002:
+	trace_kernel_trap_entry(16, (void*)regs->rip);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#608: FILE: arch/x86_64/mm/fault.c:350:
+				trace_kernel_trap_entry(14, (void*)regs->rip);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#619: FILE: arch/x86_64/mm/fault.c:386:
+	trace_kernel_trap_entry(14, (void*)regs->rip);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#628: FILE: arch/x86_64/mm/fault.c:411:
+	if (!vma) {
 		goto bad_area;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#634: FILE: arch/x86_64/mm/fault.c:416:
+	if (!(vma->vm_flags & VM_GROWSDOWN)) {
 		goto bad_area;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#643: FILE: arch/x86_64/mm/fault.c:424:
+	if (expand_stack(vma, address)) {
 		goto bad_area;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#654: FILE: arch/x86_64/mm/fault.c:438:
+			if (!(vma->vm_flags & VM_WRITE)) {
 				goto bad_area;
+			}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#663: FILE: arch/x86_64/mm/fault.c:446:
+			if (!(vma->vm_flags & (VM_READ | VM_EXEC))) {
 				goto bad_area;
+			}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#701: FILE: arch/x86_64/mm/fault.c:581:
+	if (!(error_code & PF_USER)) {
 		goto no_context;
+	}

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#712: FILE: arch/x86_64/mm/fault.c:594:
+	/* No need to test for kernel page fault, we know we are not
+	   in one or else we would have jumped to no_context */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#712: FILE: arch/x86_64/mm/fault.c:594:
+	   in one or else we would have jumped to no_context */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#726: FILE: include/asm-x86_64/ia32_unistd.h:321:
+/* A few defines seem to have been forgotten by kernel developers.
+   See arch/x86_64/ia32/ia32entry.S and include/asm-i386/unistd.h */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#726: FILE: include/asm-x86_64/ia32_unistd.h:321:
+   See arch/x86_64/ia32/ia32entry.S and include/asm-i386/unistd.h */

WARNING:LONG_LINE: line length of 134 exceeds 100 columns
#760: FILE: include/asm-x86_64/system.h:331:
+#define _local_irq_restore(x) 	__asm__ __volatile__("# restore_flags \n\t pushq %0 ; popfq": /* no output */ :"g" (x):"memory", "cc")

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#760: FILE: include/asm-x86_64/system.h:331:
+#define _local_irq_restore(x) ^I__asm__ __volatile__("# restore_flags \n\t pushq %0 ; popfq": /* no output */ :"g" (x):"memory", "cc")$

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#760: FILE: include/asm-x86_64/system.h:331:
+#define _local_irq_restore(x) 	__asm__ __volatile__("# restore_flags \n\t pushq %0 ; popfq": /* no output */ :"g" (x):"memory", "cc")
                               	                                                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#760: FILE: include/asm-x86_64/system.h:331:
+#define _local_irq_restore(x) 	__asm__ __volatile__("# restore_flags \n\t pushq %0 ; popfq": /* no output */ :"g" (x):"memory", "cc")
                               	                                                                              ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#760: FILE: include/asm-x86_64/system.h:331:
+#define _local_irq_restore(x) 	__asm__ __volatile__("# restore_flags \n\t pushq %0 ; popfq": /* no output */ :"g" (x):"memory", "cc")
                               	                                                                                      ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#760: FILE: include/asm-x86_64/system.h:331:
+#define _local_irq_restore(x) 	__asm__ __volatile__("# restore_flags \n\t pushq %0 ; popfq": /* no output */ :"g" (x):"memory", "cc")

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#760: FILE: include/asm-x86_64/system.h:331:
+#define _local_irq_restore(x) 	__asm__ __volatile__("# restore_flags \n\t pushq %0 ; popfq": /* no output */ :"g" (x):"memory", "cc")

WARNING:LONG_LINE: line length of 146 exceeds 100 columns
#766: FILE: include/asm-x86_64/system.h:335:
+#define _local_irq_disable()	do { unsigned long flags; local_save_flags(flags); local_irq_restore((flags & ~(1 << 9)) | (1 << 18)); } while (0)

WARNING:LONG_LINE: line length of 146 exceeds 100 columns
#767: FILE: include/asm-x86_64/system.h:336:
+#define _local_irq_enable()	do { unsigned long flags; local_save_flags(flags); local_irq_restore((flags | (1 << 9)) & ~(1 << 18)); } while (0)

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#776: FILE: include/asm-x86_64/system.h:346:
+#define _local_irq_save(x)	do { local_save_flags(x); local_irq_restore((x & ~(1 << 9)) | (1 << 18)); } while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#776: FILE: include/asm-x86_64/system.h:346:
+#define _local_irq_save(x)	do { local_save_flags(x); local_irq_restore((x & ~(1 << 9)) | (1 << 18)); } while (0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#780: FILE: include/asm-x86_64/system.h:348:
+#define _local_irq_disable() ^I__asm__ __volatile__("cli": : :"memory")$

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#780: FILE: include/asm-x86_64/system.h:348:
+#define _local_irq_disable() 	__asm__ __volatile__("cli": : :"memory")
                              	                          ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#780: FILE: include/asm-x86_64/system.h:348:
+#define _local_irq_disable() 	__asm__ __volatile__("cli": : :"memory")
                              	                              ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#780: FILE: include/asm-x86_64/system.h:348:
+#define _local_irq_disable() 	__asm__ __volatile__("cli": : :"memory")

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#781: FILE: include/asm-x86_64/system.h:349:
+#define _local_irq_enable()	__asm__ __volatile__("sti": : :"memory")
                            	                          ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#781: FILE: include/asm-x86_64/system.h:349:
+#define _local_irq_enable()	__asm__ __volatile__("sti": : :"memory")
                            	                              ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#781: FILE: include/asm-x86_64/system.h:349:
+#define _local_irq_enable()	__asm__ __volatile__("sti": : :"memory")

WARNING:LONG_LINE: line length of 175 exceeds 100 columns
#790: FILE: include/asm-x86_64/system.h:359:
+#define _local_irq_save(x) 	do { warn_if_not_ulong(x); __asm__ __volatile__("# local_irq_save \n\t pushfq ; popq %0 ; cli":"=g" (x): /* no input */ :"memory"); } while (0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#790: FILE: include/asm-x86_64/system.h:359:
+#define _local_irq_save(x) ^Ido { warn_if_not_ulong(x); __asm__ __volatile__("# local_irq_save \n\t pushfq ; popq %0 ; cli":"=g" (x): /* no input */ :"memory"); } while (0)$

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#790: FILE: include/asm-x86_64/system.h:359:
+#define _local_irq_save(x) 	do { warn_if_not_ulong(x); __asm__ __volatile__("# local_irq_save \n\t pushfq ; popq %0 ; cli":"=g" (x): /* no input */ :"memory"); } while (0)
                            	                                                                                              ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#790: FILE: include/asm-x86_64/system.h:359:
+#define _local_irq_save(x) 	do { warn_if_not_ulong(x); __asm__ __volatile__("# local_irq_save \n\t pushfq ; popq %0 ; cli":"=g" (x): /* no input */ :"memory"); } while (0)
                            	                                                                                                       ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#790: FILE: include/asm-x86_64/system.h:359:
+#define _local_irq_save(x) 	do { warn_if_not_ulong(x); __asm__ __volatile__("# local_irq_save \n\t pushfq ; popq %0 ; cli":"=g" (x): /* no input */ :"memory"); } while (0)
                            	                                                                                                                        ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#790: FILE: include/asm-x86_64/system.h:359:
+#define _local_irq_save(x) 	do { warn_if_not_ulong(x); __asm__ __volatile__("# local_irq_save \n\t pushfq ; popq %0 ; cli":"=g" (x): /* no input */ :"memory"); } while (0)

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#790: FILE: include/asm-x86_64/system.h:359:
+#define _local_irq_save(x) 	do { warn_if_not_ulong(x); __asm__ __volatile__("# local_irq_save \n\t pushfq ; popq %0 ; cli":"=g" (x): /* no input */ :"memory"); } while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#794: FILE: include/asm-x86_64/system.h:363:
+#define local_irq_restore(x) do { \
+	__label__ address;\
+address: \
+	_trace_locking_irq_restore(&&address,x); \
+	_local_irq_restore(x); \
+} while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#797: FILE: include/asm-x86_64/system.h:366:
+	_trace_locking_irq_restore(&&address,x); \
 	                                    ^

ERROR:SPACING: space required before the open parenthesis '('
#799: FILE: include/asm-x86_64/system.h:368:
+} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#805: FILE: include/asm-x86_64/system.h:374:
+} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#811: FILE: include/asm-x86_64/system.h:380:
+} while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#812: FILE: include/asm-x86_64/system.h:381:
+#define local_irq_save(x) do { \
+	__label__ address;\
+address: \
+	_local_irq_save(x); \
+	_trace_locking_irq_save(&&address,x); \
+} while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#816: FILE: include/asm-x86_64/system.h:385:
+	_trace_locking_irq_save(&&address,x); \
 	                                 ^

ERROR:SPACING: space required before the open parenthesis '('
#817: FILE: include/asm-x86_64/system.h:386:
+} while(0)

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.42449.commit.9a9d09bde8ac5f2e18a8447671d3e1c10380e473 total: 32 errors, 32 warnings, 14 checks, 686 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.42449.commit.9a9d09bde8ac5f2e18a8447671d3e1c10380e473 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
