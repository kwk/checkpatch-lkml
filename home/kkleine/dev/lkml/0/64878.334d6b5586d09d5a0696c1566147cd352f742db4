WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#44: FILE: crypto/Kconfig:319:
+config CRYPTO_LZF
+	tristate "LZF compression algorithm"
+	depends on CRYPTO
+	help
+	  This is the LZF algorithm. It is especially useful for Suspend2,
+	  because it achieves good compression quickly.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#66: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#71: FILE: crypto/lzf.c:1:
+/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#71: FILE: crypto/lzf.c:1:
+/* 

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#77: FILE: crypto/lzf.c:7:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#79: FILE: crypto/lzf.c:9:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#85: FILE: crypto/lzf.c:15:
+ * Software Foundation; either version 2 of the License, or (at your option) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#88: FILE: crypto/lzf.c:18:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#91: FILE: crypto/lzf.c:21:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#94: FILE: crypto/lzf.c:24:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#98: FILE: crypto/lzf.c:28:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#101: FILE: crypto/lzf.c:31:
+ * $

WARNING:INCLUDE_LINUX: Use #include <linux/string.h> instead of <asm/string.h>
#131: FILE: crypto/lzf.c:61:
+#include <asm/string.h>

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#166: FILE: crypto/lzf.c:96:
+	return (((h ^ (h << 5)) >> (3*8 - hlog)) + h*3) & ((1 << hlog) - 1);
 	                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#166: FILE: crypto/lzf.c:96:
+	return (((h ^ (h << 5)) >> (3*8 - hlog)) + h*3) & ((1 << hlog) - 1);
 	                                            ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#206: FILE: crypto/lzf.c:136:
+		printk(KERN_WARNING

CHECK:SPACING: No space is necessary after a cast
#208: FILE: crypto/lzf.c:138:
+		       (long) ((1 << hlog) * sizeof(char *)));

CHECK:BRACES: braces {} should be used on all arms of this statement
#233: FILE: crypto/lzf.c:163:
+		if (ip < in_end - 2) {
[...]
+		} else if (ip == in_end)
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#239: FILE: crypto/lzf.c:169:
+			if ((off = ip - ref - 1) < max_off

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#240: FILE: crypto/lzf.c:170:
+			if ((off = ip - ref - 1) < max_off
+			    && ip + 4 < in_end && ref > in_data

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#241: FILE: crypto/lzf.c:171:
+			    && ip + 4 < in_end && ref > in_data
+			    && *(u16 *) ref == *(u16 *) ip && ref[2] == ip[2]

CHECK:SPACING: No space is necessary after a cast
#241: FILE: crypto/lzf.c:171:
+			    && *(u16 *) ref == *(u16 *) ip && ref[2] == ip[2]

WARNING:LINE_SPACING: Missing a blank line after declarations
#246: FILE: crypto/lzf.c:176:
+				unsigned int maxlen = in_end - ip - len;
+				maxlen = maxlen > max_ref ? max_ref : maxlen;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#261: FILE: crypto/lzf.c:191:
+						*op++ = ip[lit];
 						^

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#313: FILE: crypto/lzf.c:243:
+			*op++ = ip[lit];
 			^

CHECK:SPACING: No space is necessary after a cast
#358: FILE: crypto/lzf.c:288:
+			if (ref < (u8 *) dst) {

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#367: FILE: crypto/lzf.c:297:
+				*op++ = *ref++;
 				^

ERROR:WHILE_AFTER_BRACE: while should follow close brace '}'
#371: FILE: crypto/lzf.c:301:
+	}
+	while (op < out_end && ip < in_end);

while should follow the closing bracket on the same line::

  do {
          ...
  } while(something);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#373: FILE: crypto/lzf.c:303:
+	*dlen = op - (u8 *) dst;

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.64878.commit.334d6b5586d09d5a0696c1566147cd352f742db4 total: 11 errors, 6 warnings, 12 checks, 354 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.64878.commit.334d6b5586d09d5a0696c1566147cd352f742db4 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
