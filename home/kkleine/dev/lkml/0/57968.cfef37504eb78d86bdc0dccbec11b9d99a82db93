WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#186: FILE: block/as-iosched.c:380:
+	BUG_ON(RB_EMPTY_NODE(&last->rb_node));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#229: FILE: block/as-iosched.c:954:
+	BUG_ON(RB_EMPTY_NODE(&rq->rb_node));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#399: FILE: block/cfq-iosched.c:378:
+	BUG_ON(RB_EMPTY_NODE(&last->rb_node));

CHECK:BRACES: braces {} should be used on all arms of this statement
#413: FILE: block/cfq-iosched.c:383:
+	if (rbnext)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#415: FILE: block/cfq-iosched.c:385:
+	else {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#552: FILE: block/cfq-iosched.c:563:
+		printk("foo\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#601: FILE: block/cfq-iosched.c:1640:
+	BUG_ON(!cfqq->next_crq);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#828: FILE: block/deadline-iosched.c:155:
+			BUG_ON(sector != __rq->sector);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#997: FILE: block/elevator.c:329:
+	BUG_ON(RB_EMPTY_NODE(&rq->rb_node));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1143: FILE: include/linux/elevator.h:99:
+extern void elv_merged_request(request_queue_t *, struct request *, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'request_queue_t *' should also have an identifier name
#1143: FILE: include/linux/elevator.h:99:
+extern void elv_merged_request(request_queue_t *, struct request *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request *' should also have an identifier name
#1143: FILE: include/linux/elevator.h:99:
+extern void elv_merged_request(request_queue_t *, struct request *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1143: FILE: include/linux/elevator.h:99:
+extern void elv_merged_request(request_queue_t *, struct request *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1153: FILE: include/linux/elevator.h:132:
+extern struct request *elv_rb_former_request(request_queue_t *, struct request *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'request_queue_t *' should also have an identifier name
#1153: FILE: include/linux/elevator.h:132:
+extern struct request *elv_rb_former_request(request_queue_t *, struct request *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request *' should also have an identifier name
#1153: FILE: include/linux/elevator.h:132:
+extern struct request *elv_rb_former_request(request_queue_t *, struct request *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1154: FILE: include/linux/elevator.h:133:
+extern struct request *elv_rb_latter_request(request_queue_t *, struct request *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'request_queue_t *' should also have an identifier name
#1154: FILE: include/linux/elevator.h:133:
+extern struct request *elv_rb_latter_request(request_queue_t *, struct request *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request *' should also have an identifier name
#1154: FILE: include/linux/elevator.h:133:
+extern struct request *elv_rb_latter_request(request_queue_t *, struct request *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1159: FILE: include/linux/elevator.h:138:
+extern struct request *elv_rb_add(struct rb_root *, struct request *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rb_root *' should also have an identifier name
#1159: FILE: include/linux/elevator.h:138:
+extern struct request *elv_rb_add(struct rb_root *, struct request *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request *' should also have an identifier name
#1159: FILE: include/linux/elevator.h:138:
+extern struct request *elv_rb_add(struct rb_root *, struct request *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1160: FILE: include/linux/elevator.h:139:
+extern void elv_rb_del(struct rb_root *, struct request *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rb_root *' should also have an identifier name
#1160: FILE: include/linux/elevator.h:139:
+extern void elv_rb_del(struct rb_root *, struct request *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request *' should also have an identifier name
#1160: FILE: include/linux/elevator.h:139:
+extern void elv_rb_del(struct rb_root *, struct request *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1161: FILE: include/linux/elevator.h:140:
+extern struct request *elv_rb_find(struct rb_root *, sector_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rb_root *' should also have an identifier name
#1161: FILE: include/linux/elevator.h:140:
+extern struct request *elv_rb_find(struct rb_root *, sector_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'sector_t' should also have an identifier name
#1161: FILE: include/linux/elevator.h:140:
+extern struct request *elv_rb_find(struct rb_root *, sector_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1162: FILE: include/linux/elevator.h:141:
+extern void elv_rb_reposition(struct rb_root *, struct request *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rb_root *' should also have an identifier name
#1162: FILE: include/linux/elevator.h:141:
+extern void elv_rb_reposition(struct rb_root *, struct request *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request *' should also have an identifier name
#1162: FILE: include/linux/elevator.h:141:
+extern void elv_rb_reposition(struct rb_root *, struct request *);

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.57968.commit.cfef37504eb78d86bdc0dccbec11b9d99a82db93 total: 0 errors, 22 warnings, 9 checks, 1054 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.57968.commit.cfef37504eb78d86bdc0dccbec11b9d99a82db93 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
