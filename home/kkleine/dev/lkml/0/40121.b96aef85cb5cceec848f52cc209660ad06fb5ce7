CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#62: FILE: include/linux/security.h:54:
+extern int cap_task_kill(struct task_struct *p, struct siginfo *info, int sig, u32 secid);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#63: FILE: include/linux/security.h:55:
+extern int cap_task_setscheduler (struct task_struct *p, int policy, struct sched_param *lp);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#63: FILE: include/linux/security.h:55:
+extern int cap_task_setscheduler (struct task_struct *p, int policy, struct sched_param *lp);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#64: FILE: include/linux/security.h:56:
+extern int cap_task_setioprio (struct task_struct *p, int ioprio);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#64: FILE: include/linux/security.h:56:
+extern int cap_task_setioprio (struct task_struct *p, int ioprio);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#65: FILE: include/linux/security.h:57:
+extern int cap_task_setnice (struct task_struct *p, int nice);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#65: FILE: include/linux/security.h:57:
+extern int cap_task_setnice (struct task_struct *p, int nice);

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#146: FILE: security/commoncap.c:116:
+#define XATTR_NAME_CAPS XATTR_SECURITY_PREFIX XATTR_CAPS_SUFFIX

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#169: FILE: security/commoncap.c:139:
+	for (i=CAP_NUMCAPS_SYS; i<sizeof(cap->effective); i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#169: FILE: security/commoncap.c:139:
+	for (i=CAP_NUMCAPS_SYS; i<sizeof(cap->effective); i++) {
 	                         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#173: FILE: security/commoncap.c:143:
+	for (i=CAP_NUMCAPS_SYS; i<sizeof(cap->permitted); i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#173: FILE: security/commoncap.c:143:
+	for (i=CAP_NUMCAPS_SYS; i<sizeof(cap->permitted); i++) {
 	                         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#177: FILE: security/commoncap.c:147:
+	for (i=CAP_NUMCAPS_SYS; i<sizeof(cap->inheritable); i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#177: FILE: security/commoncap.c:147:
+	for (i=CAP_NUMCAPS_SYS; i<sizeof(cap->inheritable); i++) {
 	                         ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#221: FILE: security/commoncap.c:198:
+		printk(KERN_NOTICE "%s: Error (%ld) getting xattr\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#222: FILE: security/commoncap.c:199:
+		printk(KERN_NOTICE "%s: Error (%ld) getting xattr\n",
+				__FUNCTION__, (long int)rc);

WARNING:UNNECESSARY_INT: Prefer 'long' over 'long int' as the int is unnecessary
#222: FILE: security/commoncap.c:199:
+				__FUNCTION__, (long int)rc);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#222: FILE: security/commoncap.c:199:
+				__FUNCTION__, (long int)rc);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#227: FILE: security/commoncap.c:204:
+		printk(KERN_NOTICE "%s: got wrong size for getxattr (%ld)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#228: FILE: security/commoncap.c:205:
+		printk(KERN_NOTICE "%s: got wrong size for getxattr (%ld)\n",
+					__FUNCTION__, (long int)rc);

WARNING:UNNECESSARY_INT: Prefer 'long' over 'long int' as the int is unnecessary
#228: FILE: security/commoncap.c:205:
+					__FUNCTION__, (long int)rc);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#228: FILE: security/commoncap.c:205:
+					__FUNCTION__, (long int)rc);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#231: FILE: security/commoncap.c:208:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#236: FILE: security/commoncap.c:213:
+	bprm->cap_effective = cap_combine (cap_intersect (bprm->cap_effective,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#236: FILE: security/commoncap.c:213:
+	bprm->cap_effective = cap_combine (cap_intersect (bprm->cap_effective,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#239: FILE: security/commoncap.c:216:
+	bprm->cap_permitted = cap_combine (cap_intersect (bprm->cap_permitted,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#239: FILE: security/commoncap.c:216:
+	bprm->cap_permitted = cap_combine (cap_intersect (bprm->cap_permitted,

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#243: FILE: security/commoncap.c:220:
+	if (!(bprm->file->f_vfsmnt->mnt_flags & MNT_NOSUID)
+	    || !capable(CAP_REG_SXID)) /* Don't allow to gain privileges! */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#244: FILE: security/commoncap.c:221:
+		cap_clear (bprm->cap_permitted);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#245: FILE: security/commoncap.c:222:
+	bprm->cap_inheritable = cap_combine (cap_intersect (bprm->cap_inheritable,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#245: FILE: security/commoncap.c:222:
+	bprm->cap_inheritable = cap_combine (cap_intersect (bprm->cap_inheritable,

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#262: FILE: security/commoncap.c:420:
+ *   ^Ithen those actions should be allowed$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#275: FILE: security/commoncap.c:433:
+int cap_task_setscheduler (struct task_struct *p, int policy,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#281: FILE: security/commoncap.c:439:
+int cap_task_setioprio (struct task_struct *p, int ioprio)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#286: FILE: security/commoncap.c:444:
+int cap_task_setnice (struct task_struct *p, int nice)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#292: FILE: security/commoncap.c:450:
+int cap_task_kill(struct task_struct *p, struct siginfo *info,
+				int sig, u32 secid)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#321: FILE: security/commoncap.c:509:
+EXPORT_SYMBOL(cap_task_setscheduler);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#322: FILE: security/commoncap.c:510:
+EXPORT_SYMBOL(cap_task_setioprio);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#323: FILE: security/commoncap.c:511:
+EXPORT_SYMBOL(cap_task_setnice);

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.40121.commit.b96aef85cb5cceec848f52cc209660ad06fb5ce7 total: 8 errors, 23 warnings, 8 checks, 256 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.40121.commit.b96aef85cb5cceec848f52cc209660ad06fb5ce7 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
