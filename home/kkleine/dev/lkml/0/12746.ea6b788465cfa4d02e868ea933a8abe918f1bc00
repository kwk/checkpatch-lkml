WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#38: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#43: FILE: fs/unionfs/lookup.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#66: FILE: fs/unionfs/lookup.c:24:
+struct dentry *unionfs_lookup_backend(struct dentry *dentry, struct nameidata *nd,
                                                                                ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#89: FILE: fs/unionfs/lookup.c:47:
+	 * new_dentry_private_data already locked.  */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:BRACES: Unbalanced braces around else statement
#93: FILE: fs/unionfs/lookup.c:51:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#94: FILE: fs/unionfs/lookup.c:52:
+		BUG_ON(UNIONFS_D(dentry) != NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "UNIONFS_D"
#94: FILE: fs/unionfs/lookup.c:52:
+		BUG_ON(UNIONFS_D(dentry) != NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#98: FILE: fs/unionfs/lookup.c:56:
+		if ((err = new_dentry_private_data(dentry)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#127: FILE: fs/unionfs/lookup.c:85:
+	BUG_ON(bstart < 0);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#131: FILE: fs/unionfs/lookup.c:89:
+	 * performance quite a bit, and maybe simplify the rest of the code. */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bopaque < bend'
#134: FILE: fs/unionfs/lookup.c:92:
+		if ((bopaque != -1) && (bopaque < bend))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#142: FILE: fs/unionfs/lookup.c:100:
+		BUG_ON(hidden_dentry != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "hidden_dentry"
#142: FILE: fs/unionfs/lookup.c:100:
+		BUG_ON(hidden_dentry != NULL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#182: FILE: fs/unionfs/lookup.c:140:
+			printk(KERN_NOTICE "EIO: Invalid whiteout entry type"

WARNING:SPLIT_STRING: quoted string split across lines
#183: FILE: fs/unionfs/lookup.c:141:
+			printk(KERN_NOTICE "EIO: Invalid whiteout entry type"
+			       " %d.\n", wh_hidden_dentry->d_inode->i_mode);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#199: FILE: fs/unionfs/lookup.c:157:
+					       namelen, nd);
 					                ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#199: FILE: fs/unionfs/lookup.c:157:
+		hidden_dentry = lookup_one_len_nd(name, hidden_dir_dentry,
+					       namelen, nd);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#208: FILE: fs/unionfs/lookup.c:166:
+		 * are all negative we need this for future creates. */

CHECK:BRACES: braces {} should be used on all arms of this statement
#210: FILE: fs/unionfs/lookup.c:168:
+			if (!first_hidden_dentry && (dbstart(dentry) == -1)) {
[...]
+			} else
[...]

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#213: FILE: fs/unionfs/lookup.c:171:
+				 * to allow mountpoint crossing */

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#214: FILE: fs/unionfs/lookup.c:172:
+				first_hidden_mnt = mntget(unionfs_lower_mnt_idx(parent_dentry, bindex));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:BRACES: Unbalanced braces around else statement
#216: FILE: fs/unionfs/lookup.c:174:
+			} else

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#230: FILE: fs/unionfs/lookup.c:188:
+		 * mountpoint crossing */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#232: FILE: fs/unionfs/lookup.c:190:
+		unionfs_set_lower_mnt_idx(dentry, bindex,
+			mntget(unionfs_lower_mnt_idx(parent_dentry, bindex)));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#237: FILE: fs/unionfs/lookup.c:195:
+		fsstack_copy_attr_atime(parent_dentry->d_inode,
+				     hidden_dir_dentry->d_inode);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#246: FILE: fs/unionfs/lookup.c:204:
+			BUG_ON(!S_ISDIR(unionfs_lower_dentry(dentry)->d_inode->i_mode));

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#286: FILE: fs/unionfs/lookup.c:244:
+						     namelen, nd);
 						              ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#286: FILE: fs/unionfs/lookup.c:244:
+		first_hidden_dentry = lookup_one_len_nd(name, hidden_dir_dentry,
+						     namelen, nd);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#292: FILE: fs/unionfs/lookup.c:250:
+^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#294: FILE: fs/unionfs/lookup.c:252:
+		 * mountpoint crossing */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#303: FILE: fs/unionfs/lookup.c:261:
+		BUG_ON(dentry->d_inode != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "dentry->d_inode"
#303: FILE: fs/unionfs/lookup.c:261:
+		BUG_ON(dentry->d_inode != NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#310: FILE: fs/unionfs/lookup.c:268:
+	BUG_ON(dentry_count <= 0);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#313: FILE: fs/unionfs/lookup.c:271:
+	 * vfsmount - throw it out. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#325: FILE: fs/unionfs/lookup.c:283:
+		 * negative revalidation.  */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#359: FILE: fs/unionfs/lookup.c:317:
+		BUG_ON(dbend(dentry) > UNIONFS_D(dentry)->bcount);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#360: FILE: fs/unionfs/lookup.c:318:
+		BUG_ON(dbend(dentry) > sbmax(dentry->d_sb));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#361: FILE: fs/unionfs/lookup.c:319:
+		BUG_ON(dbstart(dentry) < 0);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#376: FILE: fs/unionfs/lookup.c:334:
+	struct nameidata nd = { .flags = 0 };
 	                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#378: FILE: fs/unionfs/lookup.c:336:
+	tmp = unionfs_lookup_backend(dentry, &nd, INTERPOSE_PARTIAL);
 	                                      ^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#384: FILE: fs/unionfs/lookup.c:342:
+	BUG_ON(tmp != dentry);

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#385: FILE: fs/unionfs/lookup.c:343:
+	return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#400: FILE: fs/unionfs/lookup.c:358:
+	BUG_ON(!S_ISDIR(hidden_inode->i_mode));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#406: FILE: fs/unionfs/lookup.c:364:
+		wh_hidden_dentry = lookup_one_len(UNIONFS_DIR_OPAQUE, hidden_dentry,
+					sizeof(UNIONFS_DIR_OPAQUE) - 1);

CHECK:BRACES: Unbalanced braces around else statement
#407: FILE: fs/unionfs/lookup.c:365:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#444: FILE: fs/unionfs/lookup.c:402:
+	unionfs_dentry_cachep = kmem_cache_create("unionfs_dentry",
+					sizeof(struct unionfs_dentry_info), 0,

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#447: FILE: fs/unionfs/lookup.c:405:
+	return (unionfs_dentry_cachep ? 0 : -ENOMEM);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

WARNING:NEEDLESS_IF: kmem_cache_destroy(NULL) is safe and this check is probably not required
#453: FILE: fs/unionfs/lookup.c:411:
+	if (unionfs_dentry_cachep)
+		kmem_cache_destroy(unionfs_dentry_cachep);

CHECK:BRACES: braces {} should be used on all arms of this statement
#471: FILE: fs/unionfs/lookup.c:429:
+	if (!info) {
[...]
+	} else
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#473: FILE: fs/unionfs/lookup.c:431:
+		dentry->d_fsdata = kmem_cache_alloc(unionfs_dentry_cachep,
+						SLAB_ATOMIC);

CHECK:BRACES: Unbalanced braces around else statement
#481: FILE: fs/unionfs/lookup.c:439:
+	} else

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'oldsize < newsize'
#499: FILE: fs/unionfs/lookup.c:457:
+		if (!newsize || ((oldsize < newsize) && (newsize > minsize))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'newsize > minsize'
#499: FILE: fs/unionfs/lookup.c:457:
+		if (!newsize || ((oldsize < newsize) && (newsize > minsize))) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#528: FILE: fs/unionfs/lookup.c:486:
+ * starting branch */

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.12746.commit.ea6b788465cfa4d02e868ea933a8abe918f1bc00 total: 3 errors, 32 warnings, 19 checks, 506 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.12746.commit.ea6b788465cfa4d02e868ea933a8abe918f1bc00 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
