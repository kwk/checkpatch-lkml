WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
information tracked in the mm_struct to add/delete RSS from the container as

WARNING:INCLUDE_LINUX: Use #include <linux/pgtable.h> instead of <asm/pgtable.h>
#59: FILE: kernel/res_group/memctlr.c:35:
+#include <asm/pgtable.h>

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#72: FILE: kernel/res_group/memctlr.c:57:
+	spinlock_t lock;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#107: FILE: kernel/res_group/memctlr.c:131:
+		printk(KERN_INFO "inc_rss no res set *---*\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#128: FILE: kernel/res_group/memctlr.c:148:
+		printk(KERN_INFO "inc_rss no res set *---*\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#147: FILE: kernel/res_group/memctlr.c:165:
+		printk(KERN_INFO "dec_rss no res set *---*\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#172: FILE: kernel/res_group/memctlr.c:219:
+static long count_pte_rss(struct vm_area_struct *vma, pmd_t *pmd,
+				unsigned long addr, unsigned long end)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#189: FILE: kernel/res_group/memctlr.c:236:
+static long count_pmd_rss(struct vm_area_struct *vma, pud_t *pud,
+				unsigned long addr, unsigned long end)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#207: FILE: kernel/res_group/memctlr.c:254:
+static long count_pud_rss(struct vm_area_struct *vma, pgd_t *pgd,
+				unsigned long addr, unsigned long end)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#275: FILE: kernel/res_group/memctlr.c:322:
+	i = sprintf(buf, "rss pages %ld\n",
+			atomic_long_read(&mm->counter->rss));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#296: FILE: kernel/res_group/memctlr.c:354:
+	BUG_ON(old == new);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#308: FILE: kernel/res_group/memctlr.c:366:
+	BUG_ON(old == new);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#319: FILE: kernel/res_group/memctlr.c:377:
+static void memctlr_move_task(struct task_struct *p, struct res_shares *old,
+				struct res_shares *new)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#377: FILE: fs/proc/base.c:1764:
+	INF("memacct",	  S_IRUGO, memacct),

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#390: FILE: include/linux/memctlr.h:33:
+extern void memctlr_inc_rss_mm(struct page *page, struct mm_struct *mm);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#391: FILE: include/linux/memctlr.h:34:
+extern void memctlr_dec_rss(struct page *page, struct mm_struct *mm);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#393: FILE: include/linux/memctlr.h:36:
+extern int  proc_memacct(struct task_struct *task, char *buffer);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#500: FILE: include/linux/rmap.h:76:
+void page_remove_rmap(struct page *, struct mm_struct *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mm_struct *' should also have an identifier name
#500: FILE: include/linux/rmap.h:76:
+void page_remove_rmap(struct page *, struct mm_struct *);

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.19842.commit.5e36219ef635f69d7fb34c76b198b9f02ec47264 total: 0 errors, 10 warnings, 9 checks, 421 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.19842.commit.5e36219ef635f69d7fb34c76b198b9f02ec47264 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
