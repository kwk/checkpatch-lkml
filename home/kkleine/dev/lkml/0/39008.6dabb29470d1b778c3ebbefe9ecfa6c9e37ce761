WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#526: FILE: arch/s390/lib/uaccess_std.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#527: FILE: arch/s390/lib/uaccess_std.c:2:
+ *  arch/s390/lib/uaccess_std.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/uaccess.h> instead of <asm/uaccess.h>
#539: FILE: arch/s390/lib/uaccess_std.c:14:
+#include <asm/uaccess.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#542: FILE: arch/s390/lib/uaccess_std.c:17:
+#ifndef __s390x__

Architecture specific defines should be avoided wherever
possible.

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#561: FILE: arch/s390/lib/uaccess_std.c:36:
+	asm volatile(

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#564: FILE: arch/s390/lib/uaccess_std.c:39:
+		"1:"ALR"  %0,%3\n"

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#571: FILE: arch/s390/lib/uaccess_std.c:46:
+		"  "LHI"  %3,-4096\n"

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#573: FILE: arch/s390/lib/uaccess_std.c:48:
+		"  "SLR"  %4,%1\n"

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#574: FILE: arch/s390/lib/uaccess_std.c:49:
+		"  "CLR"  %0,%4\n"	/* copy crosses next page boundary? */

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#577: FILE: arch/s390/lib/uaccess_std.c:52:
+		"  "SLR"  %0,%4\n"

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#579: FILE: arch/s390/lib/uaccess_std.c:54:
+		"5:"SLR"  %0,%0\n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#580: FILE: arch/s390/lib/uaccess_std.c:55:
+		"6: \n"

ERROR:SPACING: space required after that ',' (ctx:VxV)
#581: FILE: arch/s390/lib/uaccess_std.c:56:
+		EX_TABLE(0b,3b) EX_TABLE(2b,3b) EX_TABLE(4b,6b)
 		           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#581: FILE: arch/s390/lib/uaccess_std.c:56:
+		EX_TABLE(0b,3b) EX_TABLE(2b,3b) EX_TABLE(4b,6b)
 		                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#581: FILE: arch/s390/lib/uaccess_std.c:56:
+		EX_TABLE(0b,3b) EX_TABLE(2b,3b) EX_TABLE(4b,6b)
 		                                           ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#592: FILE: arch/s390/lib/uaccess_std.c:67:
+	asm volatile(

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#594: FILE: arch/s390/lib/uaccess_std.c:69:
+		"  "SLR"  %0,%0\n"

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#597: FILE: arch/s390/lib/uaccess_std.c:72:
+		"  "LHI"  %3,-4096\n"

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#599: FILE: arch/s390/lib/uaccess_std.c:74:
+		"  "SLR"  %4,%1\n"

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#600: FILE: arch/s390/lib/uaccess_std.c:75:
+		"  "CLR"  %0,%4\n"	/* copy crosses next page boundary? */

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#603: FILE: arch/s390/lib/uaccess_std.c:78:
+		"  "SLR"  %0,%4\n"

ERROR:SPACING: space required after that ',' (ctx:VxV)
#605: FILE: arch/s390/lib/uaccess_std.c:80:
+		EX_TABLE(0b,1b) EX_TABLE(2b,3b)
 		           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#605: FILE: arch/s390/lib/uaccess_std.c:80:
+		EX_TABLE(0b,1b) EX_TABLE(2b,3b)
 		                           ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#616: FILE: arch/s390/lib/uaccess_std.c:91:
+	asm volatile(

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#619: FILE: arch/s390/lib/uaccess_std.c:94:
+		"1:"ALR"  %0,%3\n"

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#626: FILE: arch/s390/lib/uaccess_std.c:101:
+		"  "LHI"  %3,-4096\n"

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#628: FILE: arch/s390/lib/uaccess_std.c:103:
+		"  "SLR"  %4,%1\n"

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#629: FILE: arch/s390/lib/uaccess_std.c:104:
+		"  "CLR"  %0,%4\n"	/* copy crosses next page boundary? */

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#632: FILE: arch/s390/lib/uaccess_std.c:107:
+		"  "SLR"  %0,%4\n"

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#634: FILE: arch/s390/lib/uaccess_std.c:109:
+		"5:"SLR"  %0,%0\n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#635: FILE: arch/s390/lib/uaccess_std.c:110:
+		"6: \n"

ERROR:SPACING: space required after that ',' (ctx:VxV)
#636: FILE: arch/s390/lib/uaccess_std.c:111:
+		EX_TABLE(0b,3b) EX_TABLE(2b,3b) EX_TABLE(4b,6b)
 		           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#636: FILE: arch/s390/lib/uaccess_std.c:111:
+		EX_TABLE(0b,3b) EX_TABLE(2b,3b) EX_TABLE(4b,6b)
 		                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#636: FILE: arch/s390/lib/uaccess_std.c:111:
+		EX_TABLE(0b,3b) EX_TABLE(2b,3b) EX_TABLE(4b,6b)
 		                                           ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#647: FILE: arch/s390/lib/uaccess_std.c:122:
+	asm volatile(

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#649: FILE: arch/s390/lib/uaccess_std.c:124:
+		"  "SLR"  %0,%0\n"

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#652: FILE: arch/s390/lib/uaccess_std.c:127:
+		"  "LHI"  %3,-4096\n"

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#654: FILE: arch/s390/lib/uaccess_std.c:129:
+		"  "SLR"  %4,%1\n"

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#655: FILE: arch/s390/lib/uaccess_std.c:130:
+		"  "CLR"  %0,%4\n"	/* copy crosses next page boundary? */

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#658: FILE: arch/s390/lib/uaccess_std.c:133:
+		"  "SLR"  %0,%4\n"

ERROR:SPACING: space required after that ',' (ctx:VxV)
#660: FILE: arch/s390/lib/uaccess_std.c:135:
+		EX_TABLE(0b,1b) EX_TABLE(2b,3b)
 		           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#660: FILE: arch/s390/lib/uaccess_std.c:135:
+		EX_TABLE(0b,1b) EX_TABLE(2b,3b)
 		                           ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#670: FILE: arch/s390/lib/uaccess_std.c:145:
+	asm volatile(

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#671: FILE: arch/s390/lib/uaccess_std.c:146:
+		"  "AHI"  %0,-1\n"

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#675: FILE: arch/s390/lib/uaccess_std.c:150:
+		"0:"AHI"  %0,257\n"

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#679: FILE: arch/s390/lib/uaccess_std.c:154:
+		"  "AHI"  %0,-1\n"

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#685: FILE: arch/s390/lib/uaccess_std.c:160:
+		"3:"AHI"  %0,-256\n"

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#689: FILE: arch/s390/lib/uaccess_std.c:164:
+		"5: "SLR"  %0,%0\n"

ERROR:SPACING: space required after that ',' (ctx:VxV)
#691: FILE: arch/s390/lib/uaccess_std.c:166:
+		EX_TABLE(1b,6b) EX_TABLE(2b,0b) EX_TABLE(4b,0b)
 		           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#691: FILE: arch/s390/lib/uaccess_std.c:166:
+		EX_TABLE(1b,6b) EX_TABLE(2b,0b) EX_TABLE(4b,0b)
 		                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#691: FILE: arch/s390/lib/uaccess_std.c:166:
+		EX_TABLE(1b,6b) EX_TABLE(2b,0b) EX_TABLE(4b,0b)
 		                                           ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#701: FILE: arch/s390/lib/uaccess_std.c:176:
+	asm volatile(

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#702: FILE: arch/s390/lib/uaccess_std.c:177:
+		"  "AHI"  %0,-1\n"

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#707: FILE: arch/s390/lib/uaccess_std.c:182:
+		"0:"AHI"  %0,257\n"

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#711: FILE: arch/s390/lib/uaccess_std.c:186:
+		"  "SLR"  %2,%1\n"

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#712: FILE: arch/s390/lib/uaccess_std.c:187:
+		"  "CLR"  %0,%2\n"	/* clear crosses next page boundary? */

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#714: FILE: arch/s390/lib/uaccess_std.c:189:
+		"  "AHI"  %2,-1\n"

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#716: FILE: arch/s390/lib/uaccess_std.c:191:
+		"  "AHI"  %2,1\n"

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#717: FILE: arch/s390/lib/uaccess_std.c:192:
+		"  "SLR"  %0,%2\n"

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#721: FILE: arch/s390/lib/uaccess_std.c:196:
+		"3:"AHI"  %0,-256\n"

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#725: FILE: arch/s390/lib/uaccess_std.c:200:
+		"5: "SLR"  %0,%0\n"

ERROR:SPACING: space required after that ',' (ctx:VxV)
#727: FILE: arch/s390/lib/uaccess_std.c:202:
+		EX_TABLE(1b,6b) EX_TABLE(2b,0b) EX_TABLE(4b,0b)
 		           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#727: FILE: arch/s390/lib/uaccess_std.c:202:
+		EX_TABLE(1b,6b) EX_TABLE(2b,0b) EX_TABLE(4b,0b)
 		                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#727: FILE: arch/s390/lib/uaccess_std.c:202:
+		EX_TABLE(1b,6b) EX_TABLE(2b,0b) EX_TABLE(4b,0b)
 		                                           ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#738: FILE: arch/s390/lib/uaccess_std.c:213:
+	asm volatile(

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#741: FILE: arch/s390/lib/uaccess_std.c:216:
+		"  "SLR"  %0,%0\n"

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#746: FILE: arch/s390/lib/uaccess_std.c:221:
+		"  "SLR"  %0,%1\n"

ERROR:SPACING: space required after that ',' (ctx:VxV)
#748: FILE: arch/s390/lib/uaccess_std.c:223:
+		EX_TABLE(0b,1b)
 		           ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#759: FILE: arch/s390/lib/uaccess_std.c:234:
+	asm volatile(

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#768: FILE: arch/s390/lib/uaccess_std.c:243:
+		"  "AHI"  %4,1\n"	/* include \0 in copy */

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#769: FILE: arch/s390/lib/uaccess_std.c:244:
+		"1:"SLR"  %0,%1\n"	/* %0 = return length (without \0) */

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#770: FILE: arch/s390/lib/uaccess_std.c:245:
+		"  "SLR"  %4,%1\n"	/* %4 = copy length (including \0) */

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#773: FILE: arch/s390/lib/uaccess_std.c:248:
+		"3:"AHI"  %4,-256\n"

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#780: FILE: arch/s390/lib/uaccess_std.c:255:
+		"8:"LHI"  %0,%6\n"

ERROR:SPACING: space required after that ',' (ctx:VxV)
#782: FILE: arch/s390/lib/uaccess_std.c:257:
+		EX_TABLE(0b,7b) EX_TABLE(2b,8b) EX_TABLE(4b,8b)
 		           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#782: FILE: arch/s390/lib/uaccess_std.c:257:
+		EX_TABLE(0b,7b) EX_TABLE(2b,8b) EX_TABLE(4b,8b)
 		                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#782: FILE: arch/s390/lib/uaccess_std.c:257:
+		EX_TABLE(0b,7b) EX_TABLE(2b,8b) EX_TABLE(4b,8b)
 		                                           ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#788: FILE: arch/s390/lib/uaccess_std.c:263:
+#define __futex_atomic_op(insn, ret, oldval, newval, uaddr, oparg)	\
+	asm volatile(							\
+		"   sacf  256\n"					\
+		"0: l     %1,0(%6)\n"					\
+		"1:"insn						\
+		"2: cs    %1,%2,0(%6)\n"				\
+		"3: jl    1b\n"						\
+		"   lhi   %0,0\n"					\
+		"4: sacf  0\n"						\
+		EX_TABLE(0b,4b) EX_TABLE(2b,4b) EX_TABLE(3b,4b)		\
+		: "=d" (ret), "=&d" (oldval), "=&d" (newval),		\
+		  "=m" (*uaddr)						\
+		: "0" (-EFAULT), "d" (oparg), "a" (uaddr),		\
+		  "m" (*uaddr) : "cc");

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'uaddr' - possible side-effects?
#788: FILE: arch/s390/lib/uaccess_std.c:263:
+#define __futex_atomic_op(insn, ret, oldval, newval, uaddr, oparg)	\
+	asm volatile(							\
+		"   sacf  256\n"					\
+		"0: l     %1,0(%6)\n"					\
+		"1:"insn						\
+		"2: cs    %1,%2,0(%6)\n"				\
+		"3: jl    1b\n"						\
+		"   lhi   %0,0\n"					\
+		"4: sacf  0\n"						\
+		EX_TABLE(0b,4b) EX_TABLE(2b,4b) EX_TABLE(3b,4b)		\
+		: "=d" (ret), "=&d" (oldval), "=&d" (newval),		\
+		  "=m" (*uaddr)						\
+		: "0" (-EFAULT), "d" (oparg), "a" (uaddr),		\
+		  "m" (*uaddr) : "cc");

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'uaddr' may be better as '(uaddr)' to avoid precedence issues
#788: FILE: arch/s390/lib/uaccess_std.c:263:
+#define __futex_atomic_op(insn, ret, oldval, newval, uaddr, oparg)	\
+	asm volatile(							\
+		"   sacf  256\n"					\
+		"0: l     %1,0(%6)\n"					\
+		"1:"insn						\
+		"2: cs    %1,%2,0(%6)\n"				\
+		"3: jl    1b\n"						\
+		"   lhi   %0,0\n"					\
+		"4: sacf  0\n"						\
+		EX_TABLE(0b,4b) EX_TABLE(2b,4b) EX_TABLE(3b,4b)		\
+		: "=d" (ret), "=&d" (oldval), "=&d" (newval),		\
+		  "=m" (*uaddr)						\
+		: "0" (-EFAULT), "d" (oparg), "a" (uaddr),		\
+		  "m" (*uaddr) : "cc");

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#788: FILE: arch/s390/lib/uaccess_std.c:263:
+#define __futex_atomic_op(insn, ret, oldval, newval, uaddr, oparg)	\
+	asm volatile(							\
+		"   sacf  256\n"					\
+		"0: l     %1,0(%6)\n"					\
+		"1:"insn						\
+		"2: cs    %1,%2,0(%6)\n"				\
+		"3: jl    1b\n"						\
+		"   lhi   %0,0\n"					\
+		"4: sacf  0\n"						\
+		EX_TABLE(0b,4b) EX_TABLE(2b,4b) EX_TABLE(3b,4b)		\
+		: "=d" (ret), "=&d" (oldval), "=&d" (newval),		\
+		  "=m" (*uaddr)						\
+		: "0" (-EFAULT), "d" (oparg), "a" (uaddr),		\
+		  "m" (*uaddr) : "cc");

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:SPACING: space required after that ',' (ctx:VxV)
#797: FILE: arch/s390/lib/uaccess_std.c:272:
+		EX_TABLE(0b,4b) EX_TABLE(2b,4b) EX_TABLE(3b,4b)		\
 		           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#797: FILE: arch/s390/lib/uaccess_std.c:272:
+		EX_TABLE(0b,4b) EX_TABLE(2b,4b) EX_TABLE(3b,4b)		\
 		                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#797: FILE: arch/s390/lib/uaccess_std.c:272:
+		EX_TABLE(0b,4b) EX_TABLE(2b,4b) EX_TABLE(3b,4b)		\
 		                                           ^

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#831: FILE: arch/s390/lib/uaccess_std.c:306:
+		ret = -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#842: FILE: arch/s390/lib/uaccess_std.c:317:
+	asm volatile(

ERROR:SPACING: space required after that ',' (ctx:VxV)
#847: FILE: arch/s390/lib/uaccess_std.c:322:
+		EX_TABLE(0b,1b)
 		           ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#850: FILE: arch/s390/lib/uaccess_std.c:325:
+		: "cc", "memory" );

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#1037: FILE: include/asm-s390/uaccess.h:89:
+	size_t (*copy_from_user)(size_t, const void __user *, void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const void __user *' should also have an identifier name
#1037: FILE: include/asm-s390/uaccess.h:89:
+	size_t (*copy_from_user)(size_t, const void __user *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1037: FILE: include/asm-s390/uaccess.h:89:
+	size_t (*copy_from_user)(size_t, const void __user *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#1038: FILE: include/asm-s390/uaccess.h:90:
+	size_t (*copy_from_user_small)(size_t, const void __user *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const void __user *' should also have an identifier name
#1038: FILE: include/asm-s390/uaccess.h:90:
+	size_t (*copy_from_user_small)(size_t, const void __user *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1038: FILE: include/asm-s390/uaccess.h:90:
+	size_t (*copy_from_user_small)(size_t, const void __user *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#1039: FILE: include/asm-s390/uaccess.h:91:
+	size_t (*copy_to_user)(size_t, void __user *, const void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void __user *' should also have an identifier name
#1039: FILE: include/asm-s390/uaccess.h:91:
+	size_t (*copy_to_user)(size_t, void __user *, const void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const void *' should also have an identifier name
#1039: FILE: include/asm-s390/uaccess.h:91:
+	size_t (*copy_to_user)(size_t, void __user *, const void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#1040: FILE: include/asm-s390/uaccess.h:92:
+	size_t (*copy_to_user_small)(size_t, void __user *, const void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void __user *' should also have an identifier name
#1040: FILE: include/asm-s390/uaccess.h:92:
+	size_t (*copy_to_user_small)(size_t, void __user *, const void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const void *' should also have an identifier name
#1040: FILE: include/asm-s390/uaccess.h:92:
+	size_t (*copy_to_user_small)(size_t, void __user *, const void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#1041: FILE: include/asm-s390/uaccess.h:93:
+	size_t (*copy_in_user)(size_t, void __user *, const void __user *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void __user *' should also have an identifier name
#1041: FILE: include/asm-s390/uaccess.h:93:
+	size_t (*copy_in_user)(size_t, void __user *, const void __user *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const void __user *' should also have an identifier name
#1041: FILE: include/asm-s390/uaccess.h:93:
+	size_t (*copy_in_user)(size_t, void __user *, const void __user *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#1042: FILE: include/asm-s390/uaccess.h:94:
+	size_t (*clear_user)(size_t, void __user *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void __user *' should also have an identifier name
#1042: FILE: include/asm-s390/uaccess.h:94:
+	size_t (*clear_user)(size_t, void __user *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#1043: FILE: include/asm-s390/uaccess.h:95:
+	size_t (*strnlen_user)(size_t, const char __user *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char __user *' should also have an identifier name
#1043: FILE: include/asm-s390/uaccess.h:95:
+	size_t (*strnlen_user)(size_t, const char __user *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#1044: FILE: include/asm-s390/uaccess.h:96:
+	size_t (*strncpy_from_user)(size_t, const char __user *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char __user *' should also have an identifier name
#1044: FILE: include/asm-s390/uaccess.h:96:
+	size_t (*strncpy_from_user)(size_t, const char __user *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#1044: FILE: include/asm-s390/uaccess.h:96:
+	size_t (*strncpy_from_user)(size_t, const char __user *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int __user *' should also have an identifier name
#1045: FILE: include/asm-s390/uaccess.h:97:
+	int (*futex_atomic_op)(int op, int __user *, int oparg, int *old);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int __user *' should also have an identifier name
#1046: FILE: include/asm-s390/uaccess.h:98:
+	int (*futex_atomic_cmpxchg)(int __user *, int old, int new);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1108: FILE: include/asm-s390/uaccess.h:130:
+		__pu_err = __put_user_fn(sizeof (*(ptr)),	\

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1155: FILE: include/asm-s390/uaccess.h:156:
+		__gu_err = __get_user_fn(sizeof (*(ptr)),	\

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1163: FILE: include/asm-s390/uaccess.h:163:
+		__gu_err = __get_user_fn(sizeof (*(ptr)),	\

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1171: FILE: include/asm-s390/uaccess.h:170:
+		__gu_err = __get_user_fn(sizeof (*(ptr)),	\

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1179: FILE: include/asm-s390/uaccess.h:177:
+		__gu_err = __get_user_fn(sizeof (*(ptr)),	\

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'n <= 256'
#1198: FILE: include/asm-s390/uaccess.h:217:
+	if (__builtin_constant_p(n) && (n <= 256))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'n <= 256'
#1219: FILE: include/asm-s390/uaccess.h:268:
+	if (__builtin_constant_p(n) && (n <= 256))

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.39008.commit.6dabb29470d1b778c3ebbefe9ecfa6c9e37ce761 total: 26 errors, 35 warnings, 58 checks, 794 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.39008.commit.6dabb29470d1b778c3ebbefe9ecfa6c9e37ce761 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
