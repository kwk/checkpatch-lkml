WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
--- linux-2.6.17.9.base/include/linux/perfmon.h	1969-12-31 16:00:00.000000000 -0800

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#42: FILE: include/linux/perfmon.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#64: FILE: include/linux/perfmon.h:23:
+#define PFM_MAX_PMCS	(PFM_MAX_HW_PMCS+PFM_MAX_XTRA_PMCS)
                     	                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#65: FILE: include/linux/perfmon.h:24:
+#define PFM_MAX_PMDS	(PFM_MAX_HW_PMDS+PFM_MAX_XTRA_PMDS)
                     	                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#71: FILE: include/linux/perfmon.h:30:
+#define PFM_BVSIZE(x)	(((x)+(sizeof(u64)<<3)-1) / (sizeof(u64)<<3))
                      	     ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#71: FILE: include/linux/perfmon.h:30:
+#define PFM_BVSIZE(x)	(((x)+(sizeof(u64)<<3)-1) / (sizeof(u64)<<3))
                      	                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#71: FILE: include/linux/perfmon.h:30:
+#define PFM_BVSIZE(x)	(((x)+(sizeof(u64)<<3)-1) / (sizeof(u64)<<3))
                      	                      ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#71: FILE: include/linux/perfmon.h:30:
+#define PFM_BVSIZE(x)	(((x)+(sizeof(u64)<<3)-1) / (sizeof(u64)<<3))
                      	                                        ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#115: FILE: include/linux/perfmon.h:74:
+#define PFM_REG_RETFL_NOTAVAIL	(1<<31) /* implemented but not available */
                               	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#115: FILE: include/linux/perfmon.h:74:
+#define PFM_REG_RETFL_NOTAVAIL	(1<<31) /* implemented but not available */

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#116: FILE: include/linux/perfmon.h:75:
+#define PFM_REG_RETFL_EINVAL	(1<<30) /* entry is invalid */
                             	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#116: FILE: include/linux/perfmon.h:75:
+#define PFM_REG_RETFL_EINVAL	(1<<30) /* entry is invalid */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#117: FILE: include/linux/perfmon.h:76:
+#define PFM_REG_RETFL_NOSET	(1<<29) /* event set does not exist */
                            	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#117: FILE: include/linux/perfmon.h:76:
+#define PFM_REG_RETFL_NOSET	(1<<29) /* event set does not exist */

CHECK:SPACING: spaces preferred around that '|' (ctx:VxE)
#118: FILE: include/linux/perfmon.h:77:
+#define PFM_REG_RETFL_MASK	(PFM_REG_RETFL_NOTAVAIL|\
                           	                       ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxE)
#119: FILE: include/linux/perfmon.h:78:
+				 PFM_REG_RETFL_EINVAL|\
 				                     ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#135: FILE: include/linux/perfmon.h:94:
+};
+/*

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#139: FILE: include/linux/perfmon.h:98:
+#define PFM_FL_NOTIFY_BLOCK    ^I 0x01^I/* block task on user notifications */$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#144: FILE: include/linux/perfmon.h:103:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#160: FILE: include/linux/perfmon.h:119:
+^I__u16 reg_num;^I   ^I/* which register */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#161: FILE: include/linux/perfmon.h:120:
+^I__u16 reg_set;^I   ^I/* event set for this register */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#162: FILE: include/linux/perfmon.h:121:
+^Ipfm_flags_t reg_flags; ^I/* input: flags, return: reg error */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#171: FILE: include/linux/perfmon.h:130:
+^I__u64 reg_random_mask; ^I/* bitmask used to limit random value */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#204: FILE: include/linux/perfmon.h:163:
+^Ipfm_flags_t set_flags; ^I  /* input: flags, return: err flag  */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#218: FILE: include/linux/perfmon.h:177:
+^I__u64 ^Iset_ovfl_pmds[PFM_PMD_BV]; /* out: last ovfl PMDs */$

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#246: FILE: include/linux/perfmon.h:205:
+	volatile unsigned long	set_seq;   /* sequence number of updates */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#255: FILE: include/linux/perfmon.h:214:
+^I__u32 ^I^Imsg_type;^I/* generic message header */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#258: FILE: include/linux/perfmon.h:217:
+^I__u16 ^I^Imsg_active_set;^I/* active set at overflow */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#259: FILE: include/linux/perfmon.h:218:
+^I__u16 ^I^Imsg_ovfl_cpu;^I/* cpu of PMU interrupt */$

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#277: FILE: include/linux/perfmon.h:236:
+#define PFM_VERSION		 (((PFM_VERSION_MAJ&0xffff)<<16)|\
                    		                   ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#277: FILE: include/linux/perfmon.h:236:
+#define PFM_VERSION		 (((PFM_VERSION_MAJ&0xffff)<<16)|\
                    		                           ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxE)
#277: FILE: include/linux/perfmon.h:236:
+#define PFM_VERSION		 (((PFM_VERSION_MAJ&0xffff)<<16)|\
                    		                                ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#279: FILE: include/linux/perfmon.h:238:
+#define PFM_VERSION_MAJOR(x)	 (((x)>>16) & 0xffff)
                             	      ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#282: FILE: include/linux/perfmon.h:241:
+
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'g' - possible side-effects?
#306: FILE: include/linux/perfmon.h:265:
+#define PFM_CTXQ_EMPTY(g)	((g)->msgq_head == (g)->msgq_tail)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#339: FILE: include/linux/perfmon.h:298:
+#define PFM_ERR(f, x...)  printk(KERN_ERR     "perfmon: " f "\n", ## x)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#340: FILE: include/linux/perfmon.h:299:
+#define PFM_WARN(f, x...) printk(KERN_WARNING "perfmon: " f "\n", ## x)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#341: FILE: include/linux/perfmon.h:300:
+#define PFM_LOG(f, x...)  printk(KERN_NOTICE  "perfmon: " f "\n", ## x)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#342: FILE: include/linux/perfmon.h:301:
+#define PFM_INFO(f, x...) printk(KERN_INFO    "perfmon: " f "\n", ## x)

ERROR:SPACING: exactly one space required after that #ifdef
#348: FILE: include/linux/perfmon.h:307:
+#ifdef  PFM_DEBUGGING

ERROR:SPACING: spaces required around that '>' (ctx:WxV)
#351: FILE: include/linux/perfmon.h:310:
+		if (unlikely(pfm_controls.debug >0)) { \
 		                                ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#352: FILE: include/linux/perfmon.h:311:
+			printk("perfmon: %s.%d: CPU%d [%d]: " f "\n", \

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#353: FILE: include/linux/perfmon.h:312:
+			       __FUNCTION__, __LINE__, \

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#354: FILE: include/linux/perfmon.h:313:
+			       smp_processor_id(), current->pid , ## x); \
 			                                        ^

ERROR:SPACING: spaces required around that '>' (ctx:WxV)
#360: FILE: include/linux/perfmon.h:319:
+		if (unlikely(pfm_controls.debug_ovfl >0)) { \
 		                                     ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#361: FILE: include/linux/perfmon.h:320:
+			printk("perfmon: %s.%d: CPU%d [%d]: " f "\n", \

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#362: FILE: include/linux/perfmon.h:321:
+			       __FUNCTION__, __LINE__, \

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#363: FILE: include/linux/perfmon.h:322:
+			       smp_processor_id(), current->pid , ## x); \
 			                                        ^

ERROR:SPACING: space required before the open parenthesis '('
#367: FILE: include/linux/perfmon.h:326:
+#define PFM_DBG(f, x...)	do {} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#368: FILE: include/linux/perfmon.h:327:
+#define PFM_DBG_ovfl(f, x...)	do {} while(0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#390: FILE: include/linux/perfmon.h:349:
+^Iu64 short_reset;    ^I/* reset value on overflow */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#397: FILE: include/linux/perfmon.h:356:
+^Iu64 eventid;^I ^I /* overflow event identifier */$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#491: FILE: include/linux/perfmon.h:450:
+	struct file		*filp;	/* filp */
 	           		 ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#491: FILE: include/linux/perfmon.h:450:
+	struct file		*filp;	/* filp */
 	           		      	   ^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#495: FILE: include/linux/perfmon.h:454:
+^Istruct task_struct ^I*task;^I/* attached task */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#500: FILE: include/linux/perfmon.h:459:
+^Iu64 ^I^I^Ilast_act;^I/* last activation */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#501: FILE: include/linux/perfmon.h:460:
+^Iu32^I^I^Ilast_cpu;   ^I/* last CPU used (SMP only) */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#507: FILE: include/linux/perfmon.h:466:
+^Iwait_queue_head_t ^Imsgq_wait;^I/* used when flags.kapi=0 */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#522: FILE: include/linux/perfmon.h:481:
+^Istruct pfm_ovfl_arg ^Iovfl_arg;$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#526: FILE: include/linux/perfmon.h:485:
+#define pfm_ctx_arch(c)	((struct pfm_arch_context *)((c)+1))
                        	                                ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#531: FILE: include/linux/perfmon.h:490:
+	BUG_ON(task && task->pid == 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void __user *' should also have an identifier name
#570: FILE: include/linux/perfmon.h:529:
+int  pfm_get_args(void __user *, size_t, size_t, void *, void **);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#570: FILE: include/linux/perfmon.h:529:
+int  pfm_get_args(void __user *, size_t, size_t, void *, void **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#570: FILE: include/linux/perfmon.h:529:
+int  pfm_get_args(void __user *, size_t, size_t, void *, void **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#570: FILE: include/linux/perfmon.h:529:
+int  pfm_get_args(void __user *, size_t, size_t, void *, void **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void **' should also have an identifier name
#570: FILE: include/linux/perfmon.h:529:
+int  pfm_get_args(void __user *, size_t, size_t, void *, void **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'pfm_uuid_t' should also have an identifier name
#571: FILE: include/linux/perfmon.h:530:
+int  pfm_get_smpl_arg(pfm_uuid_t, void __user *, size_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void __user *' should also have an identifier name
#571: FILE: include/linux/perfmon.h:530:
+int  pfm_get_smpl_arg(pfm_uuid_t, void __user *, size_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#571: FILE: include/linux/perfmon.h:530:
+int  pfm_get_smpl_arg(pfm_uuid_t, void __user *, size_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void **' should also have an identifier name
#571: FILE: include/linux/perfmon.h:530:
+int  pfm_get_smpl_arg(pfm_uuid_t, void __user *, size_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pfm_smpl_fmt **' should also have an identifier name
#571: FILE: include/linux/perfmon.h:530:
+int  pfm_get_smpl_arg(pfm_uuid_t, void __user *, size_t,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#572: FILE: include/linux/perfmon.h:531:
+int  pfm_get_smpl_arg(pfm_uuid_t, void __user *, size_t,
+		     void **, struct pfm_smpl_fmt **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file **' should also have an identifier name
#574: FILE: include/linux/perfmon.h:533:
+int  pfm_alloc_fd(struct file **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pfm_context *' should also have an identifier name
#576: FILE: include/linux/perfmon.h:535:
+int  __pfm_write_pmcs(struct pfm_context *, struct pfarg_pmc *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pfarg_pmc *' should also have an identifier name
#576: FILE: include/linux/perfmon.h:535:
+int  __pfm_write_pmcs(struct pfm_context *, struct pfarg_pmc *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#576: FILE: include/linux/perfmon.h:535:
+int  __pfm_write_pmcs(struct pfm_context *, struct pfarg_pmc *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pfm_context *' should also have an identifier name
#577: FILE: include/linux/perfmon.h:536:
+int  __pfm_write_pmds(struct pfm_context *, struct pfarg_pmd *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pfarg_pmd *' should also have an identifier name
#577: FILE: include/linux/perfmon.h:536:
+int  __pfm_write_pmds(struct pfm_context *, struct pfarg_pmd *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#577: FILE: include/linux/perfmon.h:536:
+int  __pfm_write_pmds(struct pfm_context *, struct pfarg_pmd *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#577: FILE: include/linux/perfmon.h:536:
+int  __pfm_write_pmds(struct pfm_context *, struct pfarg_pmd *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pfm_context *' should also have an identifier name
#578: FILE: include/linux/perfmon.h:537:
+int  __pfm_read_pmds(struct pfm_context *, struct pfarg_pmd *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pfarg_pmd *' should also have an identifier name
#578: FILE: include/linux/perfmon.h:537:
+int  __pfm_read_pmds(struct pfm_context *, struct pfarg_pmd *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#578: FILE: include/linux/perfmon.h:537:
+int  __pfm_read_pmds(struct pfm_context *, struct pfarg_pmd *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pfm_context *' should also have an identifier name
#580: FILE: include/linux/perfmon.h:539:
+int  __pfm_load_context(struct pfm_context *, struct pfarg_load *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pfarg_load *' should also have an identifier name
#580: FILE: include/linux/perfmon.h:539:
+int  __pfm_load_context(struct pfm_context *, struct pfarg_load *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pfm_context *' should also have an identifier name
#581: FILE: include/linux/perfmon.h:540:
+int  __pfm_unload_context(struct pfm_context *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#581: FILE: include/linux/perfmon.h:540:
+int  __pfm_unload_context(struct pfm_context *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pfm_context *' should also have an identifier name
#582: FILE: include/linux/perfmon.h:541:
+int  __pfm_stop(struct pfm_context *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pfm_context *' should also have an identifier name
#583: FILE: include/linux/perfmon.h:542:
+int  __pfm_restart(struct pfm_context *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pfm_context *' should also have an identifier name
#584: FILE: include/linux/perfmon.h:543:
+int  __pfm_start(struct pfm_context *, struct pfarg_start *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pfarg_start *' should also have an identifier name
#584: FILE: include/linux/perfmon.h:543:
+int  __pfm_start(struct pfm_context *, struct pfarg_start *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pfm_context *' should also have an identifier name
#585: FILE: include/linux/perfmon.h:544:
+int  __pfm_delete_evtsets(struct pfm_context *, void *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#585: FILE: include/linux/perfmon.h:544:
+int  __pfm_delete_evtsets(struct pfm_context *, void *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#585: FILE: include/linux/perfmon.h:544:
+int  __pfm_delete_evtsets(struct pfm_context *, void *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pfm_context *' should also have an identifier name
#586: FILE: include/linux/perfmon.h:545:
+int  __pfm_getinfo_evtsets(struct pfm_context *, struct pfarg_setinfo *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pfarg_setinfo *' should also have an identifier name
#586: FILE: include/linux/perfmon.h:545:
+int  __pfm_getinfo_evtsets(struct pfm_context *, struct pfarg_setinfo *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#586: FILE: include/linux/perfmon.h:545:
+int  __pfm_getinfo_evtsets(struct pfm_context *, struct pfarg_setinfo *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pfm_context *' should also have an identifier name
#587: FILE: include/linux/perfmon.h:546:
+int __pfm_create_evtsets(struct pfm_context *, struct pfarg_setdesc *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pfarg_setdesc *' should also have an identifier name
#587: FILE: include/linux/perfmon.h:546:
+int __pfm_create_evtsets(struct pfm_context *, struct pfarg_setdesc *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#587: FILE: include/linux/perfmon.h:546:
+int __pfm_create_evtsets(struct pfm_context *, struct pfarg_setdesc *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pfarg_ctx *' should also have an identifier name
#588: FILE: include/linux/perfmon.h:547:
+int  __pfm_create_context(struct pfarg_ctx *, struct pfm_smpl_fmt *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pfm_smpl_fmt *' should also have an identifier name
#588: FILE: include/linux/perfmon.h:547:
+int  __pfm_create_context(struct pfarg_ctx *, struct pfm_smpl_fmt *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#588: FILE: include/linux/perfmon.h:547:
+int  __pfm_create_context(struct pfarg_ctx *, struct pfm_smpl_fmt *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#588: FILE: include/linux/perfmon.h:547:
+int  __pfm_create_context(struct pfarg_ctx *, struct pfm_smpl_fmt *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct completion *' should also have an identifier name
#588: FILE: include/linux/perfmon.h:547:
+int  __pfm_create_context(struct pfarg_ctx *, struct pfm_smpl_fmt *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pfm_context **' should also have an identifier name
#588: FILE: include/linux/perfmon.h:547:
+int  __pfm_create_context(struct pfarg_ctx *, struct pfm_smpl_fmt *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pfm_context *' should also have an identifier name
#593: FILE: include/linux/perfmon.h:552:
+int  pfm_check_task_state(struct pfm_context *, int, unsigned long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#593: FILE: include/linux/perfmon.h:552:
+int  pfm_check_task_state(struct pfm_context *, int, unsigned long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long *' should also have an identifier name
#593: FILE: include/linux/perfmon.h:552:
+int  pfm_check_task_state(struct pfm_context *, int, unsigned long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pfm_context *' should also have an identifier name
#595: FILE: include/linux/perfmon.h:554:
+struct pfm_event_set *pfm_find_set(struct pfm_context *, u16, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u16' should also have an identifier name
#595: FILE: include/linux/perfmon.h:554:
+struct pfm_event_set *pfm_find_set(struct pfm_context *, u16, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#595: FILE: include/linux/perfmon.h:554:
+struct pfm_event_set *pfm_find_set(struct pfm_context *, u16, int);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#596: FILE: include/linux/perfmon.h:555:
+struct pfm_context * pfm_get_ctx(int);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#596: FILE: include/linux/perfmon.h:555:
+struct pfm_context * pfm_get_ctx(int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pfm_context *' should also have an identifier name
#598: FILE: include/linux/perfmon.h:557:
+void pfm_context_free(struct pfm_context *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#600: FILE: include/linux/perfmon.h:559:
+int  pfm_pmu_conf_get(int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pfm_context *' should also have an identifier name
#603: FILE: include/linux/perfmon.h:562:
+int pfm_reserve_session(struct pfm_context *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#603: FILE: include/linux/perfmon.h:562:
+int pfm_reserve_session(struct pfm_context *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pfm_context *' should also have an identifier name
#604: FILE: include/linux/perfmon.h:563:
+int pfm_release_session(struct pfm_context *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#604: FILE: include/linux/perfmon.h:563:
+int pfm_release_session(struct pfm_context *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pfm_context *' should also have an identifier name
#606: FILE: include/linux/perfmon.h:565:
+int  pfm_smpl_buffer_alloc(struct pfm_context *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#606: FILE: include/linux/perfmon.h:565:
+int  pfm_smpl_buffer_alloc(struct pfm_context *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#607: FILE: include/linux/perfmon.h:566:
+int pfm_reserve_buf_space(size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#608: FILE: include/linux/perfmon.h:567:
+void pfm_release_buf_space(size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'pfm_uuid_t' should also have an identifier name
#610: FILE: include/linux/perfmon.h:569:
+struct pfm_smpl_fmt *pfm_smpl_fmt_get(pfm_uuid_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pfm_smpl_fmt *' should also have an identifier name
#611: FILE: include/linux/perfmon.h:570:
+void pfm_smpl_fmt_put(struct pfm_smpl_fmt *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'pfm_uuid_t' should also have an identifier name
#612: FILE: include/linux/perfmon.h:571:
+int pfm_use_smpl_fmt(pfm_uuid_t);

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#615: FILE: include/linux/perfmon.h:574:
+ssize_t pfm_sysfs_session_show(char *, size_t , int);
                                               ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#615: FILE: include/linux/perfmon.h:574:
+ssize_t pfm_sysfs_session_show(char *, size_t , int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#615: FILE: include/linux/perfmon.h:574:
+ssize_t pfm_sysfs_session_show(char *, size_t , int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#615: FILE: include/linux/perfmon.h:574:
+ssize_t pfm_sysfs_session_show(char *, size_t , int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct _pfm_pmu_config *' should also have an identifier name
#616: FILE: include/linux/perfmon.h:575:
+int pfm_sysfs_remove_pmu(struct _pfm_pmu_config *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct _pfm_pmu_config *' should also have an identifier name
#617: FILE: include/linux/perfmon.h:576:
+int pfm_sysfs_add_pmu(struct _pfm_pmu_config *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pfm_smpl_fmt *' should also have an identifier name
#619: FILE: include/linux/perfmon.h:578:
+int pfm_sysfs_remove_fmt(struct pfm_smpl_fmt *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pfm_smpl_fmt *' should also have an identifier name
#620: FILE: include/linux/perfmon.h:579:
+int pfm_sysfs_add_fmt(struct pfm_smpl_fmt *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#622: FILE: include/linux/perfmon.h:581:
+irqreturn_t pfm_interrupt_handler(int, void *, struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#622: FILE: include/linux/perfmon.h:581:
+irqreturn_t pfm_interrupt_handler(int, void *, struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#622: FILE: include/linux/perfmon.h:581:
+irqreturn_t pfm_interrupt_handler(int, void *, struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pfm_context *' should also have an identifier name
#623: FILE: include/linux/perfmon.h:582:
+void pfm_save_pmds_release(struct pfm_context *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pfm_context *' should also have an identifier name
#625: FILE: include/linux/perfmon.h:584:
+void pfm_reset_pmds(struct pfm_context *, struct pfm_event_set *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pfm_event_set *' should also have an identifier name
#625: FILE: include/linux/perfmon.h:584:
+void pfm_reset_pmds(struct pfm_context *, struct pfm_event_set *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#625: FILE: include/linux/perfmon.h:584:
+void pfm_reset_pmds(struct pfm_context *, struct pfm_event_set *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pfm_context *' should also have an identifier name
#628: FILE: include/linux/perfmon.h:587:
+int pfm_prepare_sets(struct pfm_context *, struct pfm_event_set *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pfm_event_set *' should also have an identifier name
#628: FILE: include/linux/perfmon.h:587:
+int pfm_prepare_sets(struct pfm_context *, struct pfm_event_set *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pfm_context *' should also have an identifier name
#630: FILE: include/linux/perfmon.h:589:
+int pfm_mmap_set(struct pfm_context *, struct vm_area_struct *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vm_area_struct *' should also have an identifier name
#630: FILE: include/linux/perfmon.h:589:
+int pfm_mmap_set(struct pfm_context *, struct vm_area_struct *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#630: FILE: include/linux/perfmon.h:589:
+int pfm_mmap_set(struct pfm_context *, struct vm_area_struct *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pfm_context *' should also have an identifier name
#631: FILE: include/linux/perfmon.h:590:
+void pfm_free_sets(struct pfm_context *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pfm_event_set *' should also have an identifier name
#632: FILE: include/linux/perfmon.h:591:
+void pfm_init_evtset(struct pfm_event_set *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pfm_context *' should also have an identifier name
#633: FILE: include/linux/perfmon.h:592:
+void pfm_switch_sets(struct pfm_context *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pfm_event_set *' should also have an identifier name
#633: FILE: include/linux/perfmon.h:592:
+void pfm_switch_sets(struct pfm_context *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#633: FILE: include/linux/perfmon.h:592:
+void pfm_switch_sets(struct pfm_context *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#633: FILE: include/linux/perfmon.h:592:
+void pfm_switch_sets(struct pfm_context *,

ERROR:CODE_INDENT: code indent should use tabs where possible
#634: FILE: include/linux/perfmon.h:593:
+^I    ^I    struct pfm_event_set *,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#634: FILE: include/linux/perfmon.h:593:
+^I    ^I    struct pfm_event_set *,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#634: FILE: include/linux/perfmon.h:593:
+void pfm_switch_sets(struct pfm_context *,
+	    	    struct pfm_event_set *,

ERROR:CODE_INDENT: code indent should use tabs where possible
#635: FILE: include/linux/perfmon.h:594:
+^I            int,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#636: FILE: include/linux/perfmon.h:595:
+^I            int);$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pfm_context *' should also have an identifier name
#638: FILE: include/linux/perfmon.h:597:
+void pfm_save_pmds(struct pfm_context *, struct pfm_event_set *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pfm_event_set *' should also have an identifier name
#638: FILE: include/linux/perfmon.h:597:
+void pfm_save_pmds(struct pfm_context *, struct pfm_event_set *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pfm_context *' should also have an identifier name
#639: FILE: include/linux/perfmon.h:598:
+void pfm_mask_monitoring(struct pfm_context *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pfm_context *' should also have an identifier name
#640: FILE: include/linux/perfmon.h:599:
+int pfm_ovfl_notify_user(struct pfm_context *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pfm_event_set *' should also have an identifier name
#640: FILE: include/linux/perfmon.h:599:
+int pfm_ovfl_notify_user(struct pfm_context *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#640: FILE: include/linux/perfmon.h:599:
+int pfm_ovfl_notify_user(struct pfm_context *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#641: FILE: include/linux/perfmon.h:600:
+int pfm_ovfl_notify_user(struct pfm_context *,
+				struct pfm_event_set *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#645: FILE: include/linux/perfmon.h:604:
+int pfm_is_fd(struct file *);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#647: FILE: include/linux/perfmon.h:606:
+u64 carta_random32 (u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#647: FILE: include/linux/perfmon.h:606:
+u64 carta_random32 (u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pfm_context *' should also have an identifier name
#649: FILE: include/linux/perfmon.h:608:
+int __pfm_close(struct pfm_context *, struct file *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#649: FILE: include/linux/perfmon.h:608:
+int __pfm_close(struct pfm_context *, struct file *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pfm_context *' should also have an identifier name
#650: FILE: include/linux/perfmon.h:609:
+ssize_t __pfmk_read(struct pfm_context *, union pfm_msg *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'union pfm_msg *' should also have an identifier name
#650: FILE: include/linux/perfmon.h:609:
+ssize_t __pfmk_read(struct pfm_context *, union pfm_msg *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#650: FILE: include/linux/perfmon.h:609:
+ssize_t __pfmk_read(struct pfm_context *, union pfm_msg *, int);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#654: FILE: include/linux/perfmon.h:613:
+	fput(ctx->filp);
 	          ^^^^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#660: FILE: include/linux/perfmon.h:619:
+#define PFM_SET_REMAP_BASE		(PFM_SET_REMAP_OFFS*PAGE_SIZE)
                           		                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxE)
#661: FILE: include/linux/perfmon.h:620:
+#define PFM_SET_REMAP_OFFS_MAX		(PFM_SET_REMAP_OFFS+\
                               		                   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#662: FILE: include/linux/perfmon.h:621:
+					 PFM_MAX_NUM_SETS*PFM_SET_REMAP_SCALAR)
 					                 ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#669: FILE: include/linux/perfmon.h:628:
+^Iu64 pfm_ovfl_intr_all_count; ^I/* total ovfl interrupts */$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#683: FILE: include/linux/perfmon.h:642:
+};
+#define to_stats(n) container_of(n, struct pfm_stats, kobj)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#685: FILE: include/linux/perfmon.h:644:
+
+

WARNING:CONST_STRUCT: struct file_operations should normally be const
#688: FILE: include/linux/perfmon.h:647:
+extern struct file_operations pfm_file_ops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#717: FILE: include/linux/perfmon.h:676:
+	bv[rnum>>PFM_LBPL] |= PFM_ONE_64 << (rnum&(PFM_BPL-1));
 	       ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#717: FILE: include/linux/perfmon.h:676:
+	bv[rnum>>PFM_LBPL] |= PFM_ONE_64 << (rnum&(PFM_BPL-1));
 	                                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#717: FILE: include/linux/perfmon.h:676:
+	bv[rnum>>PFM_LBPL] |= PFM_ONE_64 << (rnum&(PFM_BPL-1));
 	                                                  ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#722: FILE: include/linux/perfmon.h:681:
+	return bv[rnum>>PFM_LBPL] & (PFM_ONE_64 <<(rnum&(PFM_BPL-1))) ? 1 : 0;
 	              ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:WxV)
#722: FILE: include/linux/perfmon.h:681:
+	return bv[rnum>>PFM_LBPL] & (PFM_ONE_64 <<(rnum&(PFM_BPL-1))) ? 1 : 0;
 	                                        ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#722: FILE: include/linux/perfmon.h:681:
+	return bv[rnum>>PFM_LBPL] & (PFM_ONE_64 <<(rnum&(PFM_BPL-1))) ? 1 : 0;
 	                                               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#722: FILE: include/linux/perfmon.h:681:
+	return bv[rnum>>PFM_LBPL] & (PFM_ONE_64 <<(rnum&(PFM_BPL-1))) ? 1 : 0;
 	                                                        ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#727: FILE: include/linux/perfmon.h:686:
+	bv[rnum>>PFM_LBPL] &= ~(PFM_ONE_64 << (rnum&(PFM_BPL-1)));
 	       ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#727: FILE: include/linux/perfmon.h:686:
+	bv[rnum>>PFM_LBPL] &= ~(PFM_ONE_64 << (rnum&(PFM_BPL-1)));
 	                                           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#727: FILE: include/linux/perfmon.h:686:
+	bv[rnum>>PFM_LBPL] &= ~(PFM_ONE_64 << (rnum&(PFM_BPL-1)));
 	                                                    ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pfarg_ctx *' should also have an identifier name
#767: FILE: include/linux/perfmon.h:726:
+int pfmk_create_context(struct pfarg_ctx *, void *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#767: FILE: include/linux/perfmon.h:726:
+int pfmk_create_context(struct pfarg_ctx *, void *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#767: FILE: include/linux/perfmon.h:726:
+int pfmk_create_context(struct pfarg_ctx *, void *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct completion *' should also have an identifier name
#767: FILE: include/linux/perfmon.h:726:
+int pfmk_create_context(struct pfarg_ctx *, void *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void **' should also have an identifier name
#767: FILE: include/linux/perfmon.h:726:
+int pfmk_create_context(struct pfarg_ctx *, void *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void **' should also have an identifier name
#767: FILE: include/linux/perfmon.h:726:
+int pfmk_create_context(struct pfarg_ctx *, void *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#772: FILE: include/linux/perfmon.h:731:
+int pfmk_write_pmcs(void *, struct pfarg_pmc *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pfarg_pmc *' should also have an identifier name
#772: FILE: include/linux/perfmon.h:731:
+int pfmk_write_pmcs(void *, struct pfarg_pmc *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#772: FILE: include/linux/perfmon.h:731:
+int pfmk_write_pmcs(void *, struct pfarg_pmc *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#773: FILE: include/linux/perfmon.h:732:
+int pfmk_write_pmds(void *, struct pfarg_pmd *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pfarg_pmd *' should also have an identifier name
#773: FILE: include/linux/perfmon.h:732:
+int pfmk_write_pmds(void *, struct pfarg_pmd *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#773: FILE: include/linux/perfmon.h:732:
+int pfmk_write_pmds(void *, struct pfarg_pmd *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#774: FILE: include/linux/perfmon.h:733:
+int pfmk_read_pmds(void *, struct pfarg_pmd *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pfarg_pmd *' should also have an identifier name
#774: FILE: include/linux/perfmon.h:733:
+int pfmk_read_pmds(void *, struct pfarg_pmd *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#774: FILE: include/linux/perfmon.h:733:
+int pfmk_read_pmds(void *, struct pfarg_pmd *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#775: FILE: include/linux/perfmon.h:734:
+int pfmk_restart(void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#776: FILE: include/linux/perfmon.h:735:
+int pfmk_stop(void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#777: FILE: include/linux/perfmon.h:736:
+int pfmk_start(void *, struct pfarg_start *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pfarg_start *' should also have an identifier name
#777: FILE: include/linux/perfmon.h:736:
+int pfmk_start(void *, struct pfarg_start *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#778: FILE: include/linux/perfmon.h:737:
+int pfmk_load_context(void *, struct pfarg_load *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pfarg_load *' should also have an identifier name
#778: FILE: include/linux/perfmon.h:737:
+int pfmk_load_context(void *, struct pfarg_load *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#779: FILE: include/linux/perfmon.h:738:
+int pfmk_unload_context(void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#780: FILE: include/linux/perfmon.h:739:
+int pfmk_delete_evtsets(void *, struct pfarg_setinfo *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pfarg_setinfo *' should also have an identifier name
#780: FILE: include/linux/perfmon.h:739:
+int pfmk_delete_evtsets(void *, struct pfarg_setinfo *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#780: FILE: include/linux/perfmon.h:739:
+int pfmk_delete_evtsets(void *, struct pfarg_setinfo *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#781: FILE: include/linux/perfmon.h:740:
+int pfmk_create_evtsets(void *, struct pfarg_setdesc  *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pfarg_setdesc  *' should also have an identifier name
#781: FILE: include/linux/perfmon.h:740:
+int pfmk_create_evtsets(void *, struct pfarg_setdesc  *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#781: FILE: include/linux/perfmon.h:740:
+int pfmk_create_evtsets(void *, struct pfarg_setdesc  *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#782: FILE: include/linux/perfmon.h:741:
+int pfmk_getinfo_evtsets(void *, struct pfarg_setinfo *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pfarg_setinfo *' should also have an identifier name
#782: FILE: include/linux/perfmon.h:741:
+int pfmk_getinfo_evtsets(void *, struct pfarg_setinfo *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#782: FILE: include/linux/perfmon.h:741:
+int pfmk_getinfo_evtsets(void *, struct pfarg_setinfo *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#783: FILE: include/linux/perfmon.h:742:
+int pfmk_close(void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#784: FILE: include/linux/perfmon.h:743:
+ssize_t pfmk_read(void *, union pfm_msg *, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'union pfm_msg *' should also have an identifier name
#784: FILE: include/linux/perfmon.h:743:
+ssize_t pfmk_read(void *, union pfm_msg *, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#784: FILE: include/linux/perfmon.h:743:
+ssize_t pfmk_read(void *, union pfm_msg *, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#784: FILE: include/linux/perfmon.h:743:
+ssize_t pfmk_read(void *, union pfm_msg *, size_t, int);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#794: FILE: include/linux/perfmon_kernel.h:1:
+/*

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#808: FILE: include/linux/perfmon_kernel.h:15:
+void __pfm_copy_thread(struct task_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#809: FILE: include/linux/perfmon_kernel.h:16:
+void __pfm_ctxsw(struct task_struct *, struct task_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#809: FILE: include/linux/perfmon_kernel.h:16:
+void __pfm_ctxsw(struct task_struct *, struct task_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#810: FILE: include/linux/perfmon_kernel.h:17:
+void __pfm_handle_work(struct task_struct *);

WARNING:LINE_SPACING: Missing a blank line after declarations
#844: FILE: include/linux/perfmon_kernel.h:51:
+	unsigned long info;
+	info = __get_cpu_var(pfm_syst_info);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#851: FILE: include/linux/perfmon_kernel.h:58:
+	(test_tsk_thread_flag(prev, TIF_PERFMON) \
+	 ||test_tsk_thread_flag(next, TIF_PERFMON))

ERROR:SPACING: spaces required around that '||' (ctx:ExV)
#851: FILE: include/linux/perfmon_kernel.h:58:
+	 ||test_tsk_thread_flag(next, TIF_PERFMON))
 	 ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#856: FILE: include/linux/perfmon_kernel.h:63:
+#define pfm_exit_thread(_t)  ^I^Ido { } while (0)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#857: FILE: include/linux/perfmon_kernel.h:64:
+#define pfm_handle_work(_t)    ^I^Ido { } while (0)$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#858: FILE: include/linux/perfmon_kernel.h:65:
+#define pfm_copy_thread(_t,_r)		do { } while (0)
                           ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#859: FILE: include/linux/perfmon_kernel.h:66:
+#define pfm_ctxsw(_p, _t)     ^I^Ido { } while (0)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#860: FILE: include/linux/perfmon_kernel.h:67:
+#define pfm_handle_switch_timeout()  ^Ido { } while (0)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#861: FILE: include/linux/perfmon_kernel.h:68:
+#define pfm_vector_init()  ^I^Ido { } while (0)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#862: FILE: include/linux/perfmon_kernel.h:69:
+#define pfm_release_dbregs(_t) ^I^Ido { } while (0)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#863: FILE: include/linux/perfmon_kernel.h:70:
+#define pfm_use_dbregs(_t)     ^I^I(0)$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#873: FILE: perfmon/perfmon.c:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#894: FILE: perfmon/perfmon.c:22:
+ * ^Ihttp://www.hpl.hp.com/research/linux/perfmon$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#912: FILE: perfmon/perfmon.c:40:
+
+

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#936: FILE: perfmon/perfmon.c:64:
+	next = (ctx->msgq_tail+1) % PFM_MAX_MSGS;
 	                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#950: FILE: perfmon/perfmon.c:78:
+	return ctx->msgq+idx;
 	                ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#955: FILE: perfmon/perfmon.c:83:
+	ctx->msgq_head = ctx->msgq_tail = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#985: FILE: perfmon/perfmon.c:113:
+^I * ^I- PMU description table$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#986: FILE: perfmon/perfmon.c:114:
+^I * ^I- sampling format$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#996: FILE: perfmon/perfmon.c:124:
+static int pfm_setup_smpl_fmt(struct pfm_smpl_fmt *fmt, void *fmt_arg,
+				struct pfm_context *ctx, u32 ctx_flags,

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#997: FILE: perfmon/perfmon.c:125:
+				int mode, struct file *filp)
 				                       ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1029: FILE: perfmon/perfmon.c:157:
+			ret = pfm_smpl_buffer_alloc_old(ctx, size, filp);
 			                                           ^^^^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1038: FILE: perfmon/perfmon.c:166:
+
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1060: FILE: perfmon/perfmon.c:188:
+
+

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1146: FILE: perfmon/perfmon.c:274:
+		memset(ctx, 0, sizeof(*ctx)+PFM_ARCH_CTX_SIZE);
 		                           ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1171: FILE: perfmon/perfmon.c:299:
+		if (ret) return ret;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!addr"
#1175: FILE: perfmon/perfmon.c:303:
+	if (addr == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1194: FILE: perfmon/perfmon.c:322:
+static inline u64 pfm_new_pmd_value (struct pfm_pmd *reg, int reset_mode)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1240: FILE: perfmon/perfmon.c:368:
+	for (i = 0; i < max_pmd; i++) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1242: FILE: perfmon/perfmon.c:370:
+		if (pfm_bv_isset(reset_pmds, i)) {
+

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#1246: FILE: perfmon/perfmon.c:374:
+			set->view->set_pmds[i]= val;
 			                      ^

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1249: FILE: perfmon/perfmon.c:377:
+				if (pfm_bv_isset(cnt_mask, i)) {
[...]
+				} else {
[...]

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1277: FILE: perfmon/perfmon.c:405:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1279: FILE: perfmon/perfmon.c:407:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#1304: FILE: perfmon/perfmon.c:432:
+^I^I^I^I^I  ^I  &rst_ctrl, hdr);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1304: FILE: perfmon/perfmon.c:432:
+^I^I^I^I^I  ^I  &rst_ctrl, hdr);$

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#1306: FILE: perfmon/perfmon.c:434:
+		rst_ctrl= PFM_OVFL_CTRL_RESET;
 		        ^

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1330: FILE: perfmon/perfmon.c:458:
+		if (!(rst_ctrl & PFM_OVFL_CTRL_MASK)) {
[...]
+		} else {
[...]

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1359: FILE: perfmon/perfmon.c:487:
+^I * ^Iif not current task and due to lazy, state may$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1360: FILE: perfmon/perfmon.c:488:
+^I * ^Istill be live$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1400: FILE: perfmon/perfmon.c:528:
+ ^I^I^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1400: FILE: perfmon/perfmon.c:528:
+ ^I^I^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1400: FILE: perfmon/perfmon.c:528:
+ ^I^I^I}$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#1430: FILE: perfmon/perfmon.c:558:
+	if (ctx == NULL) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1435: FILE: perfmon/perfmon.c:563:
+	BUG_ON(ctx->flags.system);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1555: FILE: perfmon/perfmon.c:683:
+	kill_fasync (&ctx->async_queue, SIGIO, POLL_IN);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1561: FILE: perfmon/perfmon.c:689:
+int pfm_ovfl_notify_user(struct pfm_context *ctx,
+			struct pfm_event_set *set,

ERROR:CODE_INDENT: code indent should use tabs where possible
#1562: FILE: perfmon/perfmon.c:690:
+^I     ^I^Iunsigned long ip)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1562: FILE: perfmon/perfmon.c:690:
+^I     ^I^Iunsigned long ip)$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!msg"
#1572: FILE: perfmon/perfmon.c:700:
+		if (msg == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!msg"
#1610: FILE: perfmon/perfmon.c:738:
+	if (msg == NULL) {

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1611: FILE: perfmon/perfmon.c:739:
+		PFM_ERR("%s no more msgs", __FUNCTION__);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1639: FILE: perfmon/perfmon.c:767:
+	BUG_ON(ctx->flags.system);

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1649: FILE: perfmon/perfmon.c:777:
+	switch(ctx->state) {
+		case PFM_CTX_LOADED:
+		case PFM_CTX_MASKED:
[...]
+		case PFM_CTX_ZOMBIE:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: space required before the open parenthesis '('
#1649: FILE: perfmon/perfmon.c:777:
+	switch(ctx->state) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1660: FILE: perfmon/perfmon.c:788:
+			BUG_ON(ctx->state != PFM_CTX_LOADED);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1677: FILE: perfmon/perfmon.c:805:
+void __cpuinit pfm_init_percpu (void *dummy)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1692: FILE: perfmon/perfmon.c:820:
+	pfm_ctx_cachep = kmem_cache_create("pfm_context",
+				   sizeof(struct pfm_context)+PFM_ARCH_CTX_SIZE,

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1692: FILE: perfmon/perfmon.c:820:
+				   sizeof(struct pfm_context)+PFM_ARCH_CTX_SIZE,
 				                             ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pfm_ctx_cachep"
#1694: FILE: perfmon/perfmon.c:822:
+	if (pfm_ctx_cachep == NULL) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1702: FILE: perfmon/perfmon.c:830:
+
+

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1723: FILE: perfmon/perfmon.c:851:
+}
+/*

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1747: FILE: perfmon/perfmon.c:875:
+	old_set = new_set = ctx->active_set;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!task"
#1752: FILE: perfmon/perfmon.c:880:
+	if (task == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_set"
#1765: FILE: perfmon/perfmon.c:893:
+		if (new_set == NULL) {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1816: FILE: perfmon/perfmon.c:944:
+^I * ^I- stopped if we switched set (self-monitoring)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1817: FILE: perfmon/perfmon.c:945:
+^I * ^I- stopped if never started$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1818: FILE: perfmon/perfmon.c:946:
+^I * ^I- started if calling pfm_start() in sequence$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1825: FILE: perfmon/perfmon.c:953:
+		unsigned long info;
+		if (flags & PFM_SETFL_TIME_SWITCH)

WARNING:TYPO_SPELLING: 'overriden' may be misspelled - perhaps 'overridden'?
#1854: FILE: perfmon/perfmon.c:982:
+	 * will be overriden in pfm_unmask_monitoring()
 	           ^^^^^^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!task"
#1889: FILE: perfmon/perfmon.c:1017:
+	if (task == NULL)

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1920: FILE: perfmon/perfmon.c:1048:
+	switch(state) {
+		case PFM_CTX_MASKED:
[...]
+		case PFM_CTX_LOADED:
[...]
+		case PFM_CTX_UNLOADED:
+		case PFM_CTX_ZOMBIE:
[...]
+		default:

ERROR:SPACING: space required before the open parenthesis '('
#1920: FILE: perfmon/perfmon.c:1048:
+	switch(state) {

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1926: FILE: perfmon/perfmon.c:1054:
+			/* fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:TYPO_SPELLING: 'explicitely' may be misspelled - perhaps 'explicitly'?
#1977: FILE: perfmon/perfmon.c:1105:
+	 * We cannot explicitely reset another task, it MUST always
 	             ^^^^^^^^^^^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2032: FILE: perfmon/perfmon.c:1160:
+		can_access_pmu = __get_cpu_var(pmu_owner) == ctx->task
+			       || ctx->flags.system;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2044: FILE: perfmon/perfmon.c:1172:
+	for (i = 0; i < count; i++, req++) {
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!set"
#2058: FILE: perfmon/perfmon.c:1186:
+			if (set == NULL) {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2067: FILE: perfmon/perfmon.c:1195:
+^I^I * ^I- explicitly written via pfm_write_pmds()$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2068: FILE: perfmon/perfmon.c:1196:
+^I^I * ^I- provided as a reg_smpl_pmds[] to another PMD during$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2069: FILE: perfmon/perfmon.c:1197:
+^I^I * ^I  pfm_write_pmds()$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2072: FILE: perfmon/perfmon.c:1200:
+^I^I * ^I- on context switch restore, we can restore only what we$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2073: FILE: perfmon/perfmon.c:1201:
+^I^I * ^I  use (except when regs directly readable at user level,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2074: FILE: perfmon/perfmon.c:1202:
+^I^I * ^I  e.g., IA-64 self-monitoring, I386 RDTSC).$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2075: FILE: perfmon/perfmon.c:1203:
+^I^I * ^I- do not need to maintain PMC -> PMD dependencies$

WARNING:SPLIT_STRING: quoted string split across lines
#2079: FILE: perfmon/perfmon.c:1207:
+			PFM_DBG("pmd%u cannot be read, because never "
+				"requested", cnum);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:TYPO_SPELLING: 'explicitely' may be misspelled - perhaps 'explicitly'?
#2085: FILE: perfmon/perfmon.c:1213:
+		 * explicitely been written by the application. In this case
 		   ^^^^^^^^^^^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxE)
#2133: FILE: perfmon/perfmon.c:1261:
+				 PFM_REGFL_OVFL_NOTIFY| \
 				                      ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2163: FILE: perfmon/perfmon.c:1291:
+		can_access_pmu = __get_cpu_var(pmu_owner) == ctx->task
+			       || ctx->flags.system;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2169: FILE: perfmon/perfmon.c:1297:
+	for (i = 0; i < count; i++, req++) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2205: FILE: perfmon/perfmon.c:1333:
+				if (unlikely(!bitmap_subset(ulp(smpl_pmds),
+							   ulp(impl_pmds),

WARNING:SPLIT_STRING: quoted string split across lines
#2208: FILE: perfmon/perfmon.c:1336:
+					PFM_DBG("invalid smpl_pmds=0x%llx "
+						"for pmd%u",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2217: FILE: perfmon/perfmon.c:1345:
+				if (unlikely(!bitmap_subset(ulp(reset_pmds),
+							   ulp(impl_pmds),

WARNING:SPLIT_STRING: quoted string split across lines
#2220: FILE: perfmon/perfmon.c:1348:
+					PFM_DBG("invalid reset_pmds=0x%llx "
+						"for pmd%u",

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!set"
#2233: FILE: perfmon/perfmon.c:1361:
+			if (set == NULL) {

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2249: FILE: perfmon/perfmon.c:1377:
+
+		}

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2250: FILE: perfmon/perfmon.c:1378:
+		hw_val = value = req->reg_value;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2259: FILE: perfmon/perfmon.c:1387:
+			if (likely(!compat)) {
+

WARNING:SPLIT_STRING: quoted string split across lines
#2356: FILE: perfmon/perfmon.c:1484:
+		PFM_DBG("set%u pmd%u=0x%llx flags=0x%x a_pmu=%d "
+			"hw_pmd=0x%llx ctx_pmd=0x%llx s_reset=0x%llx "

WARNING:SPLIT_STRING: quoted string split across lines
#2357: FILE: perfmon/perfmon.c:1485:
+			"hw_pmd=0x%llx ctx_pmd=0x%llx s_reset=0x%llx "
+			"l_reset=0x%llx u_pmds=0x%llx nu_pmds=%u "

WARNING:SPLIT_STRING: quoted string split across lines
#2358: FILE: perfmon/perfmon.c:1486:
+			"l_reset=0x%llx u_pmds=0x%llx nu_pmds=%u "
+			"s_pmds=0x%llx r_pmds=0x%llx o_pmds=0x%llx "

WARNING:SPLIT_STRING: quoted string split across lines
#2359: FILE: perfmon/perfmon.c:1487:
+			"s_pmds=0x%llx r_pmds=0x%llx o_pmds=0x%llx "
+			"o_thres=%llu compat=%d eventid=%llx",

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2397: FILE: perfmon/perfmon.c:1525:
+#define PFM_REGFL_PMC_ALL	(PFM_REGFL_NO_EMUL64|PFM_REG_RETFL_MASK)
                          	                    ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2423: FILE: perfmon/perfmon.c:1551:
+^I^I^I        || ctx->flags.system;$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2423: FILE: perfmon/perfmon.c:1551:
+		can_access_pmu = __get_cpu_var(pmu_owner) == ctx->task
+			        || ctx->flags.system;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2428: FILE: perfmon/perfmon.c:1556:
+	for (i = 0; i < count; i++, req++) {
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!set"
#2462: FILE: perfmon/perfmon.c:1590:
+			if (set == NULL) {

WARNING:SPLIT_STRING: quoted string split across lines
#2478: FILE: perfmon/perfmon.c:1606:
+				PFM_DBG("pmc%u no support "
+					"PFM_REGFL_NO_EMUL64", cnum);

WARNING:SPLIT_STRING: quoted string split across lines
#2528: FILE: perfmon/perfmon.c:1656:
+		PFM_DBG("set%u pmc%u=0x%llx a_pmu=%d "
+			"u_pmcs=0x%llx nu_pmcs=%u",

WARNING:SPLIT_STRING: quoted string split across lines
#2555: FILE: perfmon/perfmon.c:1683:
+	PFM_DBG("cur: euid=%d uid=%d gid=%d task: euid=%d "
+		"suid=%d uid=%d egid=%d cap:%d sgid=%d",

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2566: FILE: perfmon/perfmon.c:1694:
+	return ((current->uid != task->euid)
+	    || (current->uid != task->suid)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2567: FILE: perfmon/perfmon.c:1695:
+	    || (current->uid != task->suid)
+	    || (current->uid != task->uid)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2568: FILE: perfmon/perfmon.c:1696:
+	    || (current->uid != task->uid)
+	    || (current->gid != task->egid)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2569: FILE: perfmon/perfmon.c:1697:
+	    || (current->gid != task->egid)
+	    || (current->gid != task->sgid)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2570: FILE: perfmon/perfmon.c:1698:
+	    || (current->gid != task->sgid)
+	    || (current->gid != task->gid)) && !capable(CAP_SYS_PTRACE);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2573: FILE: perfmon/perfmon.c:1701:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2576: FILE: perfmon/perfmon.c:1704:
+ * ^I- kernel task$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2577: FILE: perfmon/perfmon.c:1705:
+ * ^I- task not owned by caller$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2578: FILE: perfmon/perfmon.c:1706:
+ * ^I- task incompatible with context mode$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'task->state != TASK_STOPPED'
#2616: FILE: perfmon/perfmon.c:1744:
+	if ((task->state != TASK_STOPPED) && (task->state != TASK_TRACED)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'task->state != TASK_TRACED'
#2616: FILE: perfmon/perfmon.c:1744:
+	if ((task->state != TASK_STOPPED) && (task->state != TASK_TRACED)) {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2634: FILE: perfmon/perfmon.c:1762:
+}
+static int pfm_get_task(struct pfm_context *ctx, pid_t pid,

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2645: FILE: perfmon/perfmon.c:1773:
+	if (pid != current->pid) {
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p"
#2656: FILE: perfmon/perfmon.c:1784:
+		if (p == NULL)

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#2661: FILE: perfmon/perfmon.c:1789:
+	if (!ret) {
[...]
+	} else if (p != current) {
[...]

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2676: FILE: perfmon/perfmon.c:1804:
+	do_each_thread (g, t) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2681: FILE: perfmon/perfmon.c:1809:
+	} while_each_thread (g, t);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2690: FILE: perfmon/perfmon.c:1818:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "old"
#2747: FILE: perfmon/perfmon.c:1875:
+	if (old != NULL) {

WARNING:SPLIT_STRING: quoted string split across lines
#2749: FILE: perfmon/perfmon.c:1877:
+		PFM_DBG("load_pid [%d] has already a context "
+			"old=%p new=%p cur=%p",

WARNING:LINE_SPACING: Missing a blank line after declarations
#2790: FILE: perfmon/perfmon.c:1918:
+			struct pfm_event_set *setp;
+			setp = ctxp->active_set;

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#2828: FILE: perfmon/perfmon.c:1956:
+		PFM_DBG("context loaded on PMU for [%d] TIF=%d", task->pid, test_tsk_thread_flag(task, TIF_PERFMON));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2830: FILE: perfmon/perfmon.c:1958:
+	} else {
+

WARNING:TYPO_SPELLING: 'registes' may be misspelled - perhaps 'registers'?
#2907: FILE: perfmon/perfmon.c:2035:
+	 * load all registes from ctx to PMU
 	            ^^^^^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!set"
#2942: FILE: perfmon/perfmon.c:2070:
+	if (set == NULL) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#3041: FILE: perfmon/perfmon.c:2169:
+	if (task) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#3045: FILE: perfmon/perfmon.c:2173:
+	} else

ERROR:SPACING: space prohibited after that open parenthesis '('
#3068: FILE: perfmon/perfmon.c:2196:
+	if (  (ctx_flags & PFM_FL_SYSTEM_WIDE)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3069: FILE: perfmon/perfmon.c:2197:
+	if (  (ctx_flags & PFM_FL_SYSTEM_WIDE)
+	   && pfm_controls.sys_group != PFM_GROUP_PERM_ANY

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3070: FILE: perfmon/perfmon.c:2198:
+	   && pfm_controls.sys_group != PFM_GROUP_PERM_ANY
+	   && !in_group_p(pfm_controls.sys_group)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3074: FILE: perfmon/perfmon.c:2202:
+	} else if (pfm_controls.task_group != PFM_GROUP_PERM_ANY
+		   && !in_group_p(pfm_controls.task_group)) {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#3090: FILE: perfmon/perfmon.c:2218:
+	struct file *filp = NULL;
 	             ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!c"
#3096: FILE: perfmon/perfmon.c:2224:
+	if (mode == PFM_KAPI && c == NULL)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#3125: FILE: perfmon/perfmon.c:2253:
+		fd = pfm_alloc_fd(&filp);
 		                   ^^^^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#3140: FILE: perfmon/perfmon.c:2268:
+	ctx->flags.system = (ctx_flags & PFM_FL_SYSTEM_WIDE) ? 1: 0;
 	                                                        ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#3141: FILE: perfmon/perfmon.c:2269:
+	ctx->flags.no_msg = (ctx_flags & PFM_FL_OVFL_NO_MSG) ? 1: 0;
 	                                                        ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#3142: FILE: perfmon/perfmon.c:2270:
+	ctx->flags.mapset = (ctx_flags & PFM_FL_MAP_SETS) ? 1: 0;
 	                                                     ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pfm_find_set"
#3162: FILE: perfmon/perfmon.c:2290:
+	if (pfm_find_set(ctx, 0, 1) == NULL)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#3174: FILE: perfmon/perfmon.c:2302:
+					 mode, filp);
 					       ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#3184: FILE: perfmon/perfmon.c:2312:
+	if (filp)
 	    ^^^^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#3196: FILE: perfmon/perfmon.c:2324:
+	ctx->msgq_head = ctx->msgq_tail = 0;

WARNING:SPLIT_STRING: quoted string split across lines
#3201: FILE: perfmon/perfmon.c:2329:
+	PFM_DBG("ctx=%p flags=0x%x system=%d notify_block=%d no_msg=%d"
+		" use_fmt=%d remap=%d ctx_fd=%d mode=%d",

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "fmt"
#3207: FILE: perfmon/perfmon.c:2335:
+		fmt != NULL,

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#3219: FILE: perfmon/perfmon.c:2347:
+		fd_install(fd, filp);
 		               ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#3227: FILE: perfmon/perfmon.c:2355:
+		put_filp(filp);
 		         ^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3242: FILE: perfmon/perfmon.c:2370:
+
+

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.44979.commit.b3ac0b638a68b58c6f283b1c9679870e60dc2925 total: 29 errors, 250 warnings, 109 checks, 3202 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.44979.commit.b3ac0b638a68b58c6f283b1c9679870e60dc2925 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
