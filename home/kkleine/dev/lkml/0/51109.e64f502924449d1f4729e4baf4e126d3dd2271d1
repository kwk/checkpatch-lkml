ERROR:TRAILING_WHITESPACE: trailing whitespace
#55: FILE: drivers/usb/serial/usbserial.c:412:
+    const char *function) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#55: FILE: drivers/usb/serial/usbserial.c:412:
+struct usb_serial *usb_serial_get_serial(struct usb_serial_port *port,
+    const char *function) 

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#55: FILE: drivers/usb/serial/usbserial.c:412:
+    const char *function) $

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#57: FILE: drivers/usb/serial/usbserial.c:414:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#59: FILE: drivers/usb/serial/usbserial.c:416:
+^Iif (!port || $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#60: FILE: drivers/usb/serial/usbserial.c:417:
+	    port_paranoia_check (port, function) ||

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#61: FILE: drivers/usb/serial/usbserial.c:418:
+	    serial_paranoia_check (port->serial, function)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!port->serial->dev"
#66: FILE: drivers/usb/serial/usbserial.c:423:
+	if (port->serial->dev == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:LINE_SPACING: Please don't use multiple blank lines
#72: FILE: drivers/usb/serial/usbserial.c:429:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "serial->dev"
#114: FILE: drivers/usb/serial/usbserial.c:547:
+		if (serial->dev != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!serial->dev"
#138: FILE: drivers/usb/serial/usbserial.c:633:
+	if (serial_paranoia_check(serial, __FUNCTION__) || serial->dev == NULL) {

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#138: FILE: drivers/usb/serial/usbserial.c:633:
+	if (serial_paranoia_check(serial, __FUNCTION__) || serial->dev == NULL) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#167: FILE: drivers/usb/serial/usbserial.c:676:
 {
+

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#170: FILE: drivers/usb/serial/usbserial.c:678:
+		err("%s - port %d: not open", __FUNCTION__, port->number);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#184: FILE: drivers/usb/serial/usbserial.c:706:
+	if ((port = tty->driver_data) == NULL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#190: FILE: drivers/usb/serial/usbserial.c:710:
+	if ((serial = port->serial) == NULL) {

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#191: FILE: drivers/usb/serial/usbserial.c:711:
+		err("%s - port %d: not open (count %d)", __FUNCTION__, port->number, port->open_count);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#191: FILE: drivers/usb/serial/usbserial.c:711:
+		err("%s - port %d: not open (count %d)", __FUNCTION__, port->number, port->open_count);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "serial->dev"
#215: FILE: drivers/usb/serial/usbserial.c:718:
+	if (serial->dev != NULL) {

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#218: FILE: drivers/usb/serial/usbserial.c:721:
+		tty_wait_until_sent(tty, /** info->closing_wait **/ 30*HZ);
 		                                                      ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#221: FILE: drivers/usb/serial/usbserial.c:724:
+	down (&port->sem);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#222: FILE: drivers/usb/serial/usbserial.c:725:
+	__serial_close(port, filp);
 	                     ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#235: FILE: drivers/usb/serial/usbserial.c:743:
+		dbg("%s - port not open", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#264: FILE: drivers/usb/serial/usbserial.c:1296:
+		err("%s - null serial pointer, exiting", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#271: FILE: drivers/usb/serial/usbserial.c:1302:
+		    __FUNCTION__, urb->status, urb->pipe);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#275: FILE: drivers/usb/serial/usbserial.c:1306:
+	dbg("%s - port %d", __FUNCTION__, port->number);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!serial->dev"
#284: FILE: drivers/usb/serial/usbserial.c:1323:
+	if (serial->dev == NULL)

WARNING:MEMORY_BARRIER: memory barrier without comment
#336: FILE: drivers/usb/serial/usbserial.c:1721:
+		wmb();

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#348: FILE: drivers/usb/serial/usbserial.c:1760:
+		serial_put (serial);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#358: FILE: drivers/usb/serial/usbserial.c:1856:
+		err("%s - module is in use, hanging...", __FUNCTION__);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#395: FILE: drivers/usb/serial/usb-serial.h:312:
+extern struct usb_serial *usb_serial_get_serial(struct usb_serial_port *port,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#396: FILE: drivers/usb/serial/usb-serial.h:313:
+extern struct usb_serial *usb_serial_get_serial(struct usb_serial_port *port,
+    const char *function_name);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#396: FILE: drivers/usb/serial/usb-serial.h:313:
+    const char *function_name);$

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.51109.commit.e64f502924449d1f4729e4baf4e126d3dd2271d1 total: 4 errors, 17 warnings, 12 checks, 329 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.51109.commit.e64f502924449d1f4729e4baf4e126d3dd2271d1 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
