WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#58: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:TYPO_SPELLING: 'pertrubation' may be misspelled - perhaps 'perturbation'?
#326: FILE: Documentation/utrace.txt:264:
+effects are possible.)  Even when you explicitly want the pertrubation of
                                                           ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:MEMORY_BARRIER: memory barrier without comment
#622: FILE: include/linux/tracehook.h:208:
+	smp_mb();

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p->utrace"
#623: FILE: include/linux/tracehook.h:209:
+	if (p->utrace != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p->utrace"
#634: FILE: include/linux/tracehook.h:223:
+	return unlikely(p->utrace != NULL);

WARNING:LINE_SPACING: Missing a blank line after declarations
#857: FILE: include/linux/tracehook.h:560:
+	struct task_struct *tsk = current;
+	if ((tsk->utrace_flags & UTRACE_EVENT_SIGNAL_ALL)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#858: FILE: include/linux/tracehook.h:561:
+	if ((tsk->utrace_flags & UTRACE_EVENT_SIGNAL_ALL)
+	    && (tsk->utrace_flags & (UTRACE_ACTION_SINGLESTEP

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#871: FILE: include/linux/utrace.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#917: FILE: include/linux/utrace.h:47:
+
+

CHECK:SPACING: spaces preferred around that '&' (ctx:WxO)
#926: FILE: include/linux/utrace.h:56:
+#define UTRACE_EVENT_MASK	(-1UL &~ UTRACE_ACTION_STATE_MASK)
                          	      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited after that '~' (ctx:OxW)
#926: FILE: include/linux/utrace.h:56:
+#define UTRACE_EVENT_MASK	(-1UL &~ UTRACE_ACTION_STATE_MASK)
                          	       ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#930: FILE: include/linux/utrace.h:60:
+^I_UTRACE_EVENT_REAP,  ^I/* Zombie reaped, no more tracing possible.  */$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#946: FILE: include/linux/utrace.h:76:
+};
+#define UTRACE_EVENT_BIT(type)	(UTRACE_FIRST_EVENT + _UTRACE_EVENT_##type)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#964: FILE: include/linux/utrace.h:94:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1025: FILE: include/linux/utrace.h:155:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1039: FILE: include/linux/utrace.h:169:
+
+

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1055: FILE: include/linux/utrace.h:185:
+struct utrace
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1068: FILE: include/linux/utrace.h:198:
+	spinlock_t lock;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1070: FILE: include/linux/utrace.h:200:
+};
+#define utrace_lock(utrace)	spin_lock(&(utrace)->lock)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1073: FILE: include/linux/utrace.h:203:
+
+

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1083: FILE: include/linux/utrace.h:213:
+struct utrace_attached_engine
+{

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1093: FILE: include/linux/utrace.h:223:
+
+

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1095: FILE: include/linux/utrace.h:225:
+struct utrace_engine_ops
+{

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1242: FILE: include/linux/utrace.h:372:
+
+

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct utrace_engine_ops *' should also have an identifier name
#1252: FILE: include/linux/utrace.h:382:
+struct utrace_attached_engine *utrace_attach(struct task_struct *target,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct utrace_attached_engine *' should also have an identifier name
#1304: FILE: include/linux/utrace.h:434:
+const struct utrace_regset *utrace_regset(struct task_struct *target,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct utrace_regset_view *' should also have an identifier name
#1304: FILE: include/linux/utrace.h:434:
+const struct utrace_regset *utrace_regset(struct task_struct *target,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1309: FILE: include/linux/utrace.h:439:
+
+

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#1313: FILE: include/linux/utrace.h:443:
+void utrace_quiescent(struct task_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#1314: FILE: include/linux/utrace.h:444:
+void utrace_release_task(struct task_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#1315: FILE: include/linux/utrace.h:445:
+int utrace_get_signal(struct task_struct *, struct pt_regs *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#1315: FILE: include/linux/utrace.h:445:
+int utrace_get_signal(struct task_struct *, struct pt_regs *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'siginfo_t *' should also have an identifier name
#1315: FILE: include/linux/utrace.h:445:
+int utrace_get_signal(struct task_struct *, struct pt_regs *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct k_sigaction *' should also have an identifier name
#1315: FILE: include/linux/utrace.h:445:
+int utrace_get_signal(struct task_struct *, struct pt_regs *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#1320: FILE: include/linux/utrace.h:450:
+void utrace_report_death(struct task_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#1324: FILE: include/linux/utrace.h:454:
+pid_t utrace_tracer_pid(struct task_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#1325: FILE: include/linux/utrace.h:455:
+int utrace_allow_access_process_vm(struct task_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#1326: FILE: include/linux/utrace.h:456:
+void utrace_signal_handler_singlestep(struct task_struct *, struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#1326: FILE: include/linux/utrace.h:456:
+void utrace_signal_handler_singlestep(struct task_struct *, struct pt_regs *);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1328: FILE: include/linux/utrace.h:458:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1376: FILE: kernel/utrace.c:1:
+#include <linux/utrace.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1385: FILE: kernel/utrace.c:10:
+
+

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1395: FILE: kernel/utrace.c:20:
+				  SLAB_HWCACHE_ALIGN|SLAB_PANIC, NULL, NULL);
 				                    ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1399: FILE: kernel/utrace.c:24:
+				  SLAB_HWCACHE_ALIGN|SLAB_PANIC, NULL, NULL);
 				                    ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1404: FILE: kernel/utrace.c:29:
+
+

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1424: FILE: kernel/utrace.c:49:
+	if ((target->flags & PF_STARTING)
+	    && (current->utrace == NULL

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!current->utrace"
#1424: FILE: kernel/utrace.c:49:
+	    && (current->utrace == NULL

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1425: FILE: kernel/utrace.c:50:
+	    && (current->utrace == NULL
+		|| current->utrace->u.live.cloning != target)) {

WARNING:YIELD: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#1426: FILE: kernel/utrace.c:51:
+		yield();

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!utrace"
#1432: FILE: kernel/utrace.c:57:
+	if (unlikely(utrace == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!target->utrace"
#1444: FILE: kernel/utrace.c:69:
+	if (likely(target->utrace == NULL)) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1474: FILE: kernel/utrace.c:99:
+	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1474: FILE: kernel/utrace.c:99:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:INDENTED_LABEL: labels should not be indented
#1479: FILE: kernel/utrace.c:104:
+	cannot_attach:

WARNING:LINE_SPACING: Missing a blank line after declarations
#1493: FILE: kernel/utrace.c:118:
+	struct utrace *utrace = container_of(rhead, struct utrace, u.dead);
+	kmem_cache_free(utrace_cachep, utrace);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "tsk->utrace"
#1523: FILE: kernel/utrace.c:148:
+		if (likely(tsk->utrace != NULL)) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1532: FILE: kernel/utrace.c:157:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1541: FILE: kernel/utrace.c:166:
+check_dead_utrace(struct task_struct *tsk, struct utrace *utrace,
+		 unsigned long flags)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1554: FILE: kernel/utrace.c:179:
+
+

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1571: FILE: kernel/utrace.c:196:
+	quiescent = (target->exit_state
+		     || target->state & (TASK_TRACED | TASK_STOPPED));

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1576: FILE: kernel/utrace.c:201:
+		quiescent = (unlikely(target->exit_state)
+			     || unlikely(target->state

CHECK:BRACES: braces {} should be used on all arms of this statement
#1579: FILE: kernel/utrace.c:204:
+			if (interrupt)
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1581: FILE: kernel/utrace.c:206:
+			else {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1592: FILE: kernel/utrace.c:217:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#1598: FILE: kernel/utrace.c:223:
+	struct utrace_attached_engine *engine;
+	list_for_each_entry_rcu(engine, &utrace->engines, entry) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1600: FILE: kernel/utrace.c:225:
+		if ((flags & UTRACE_ATTACH_MATCH_OPS)
+		    && engine->ops != ops)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1603: FILE: kernel/utrace.c:228:
+		if ((flags & UTRACE_ATTACH_MATCH_DATA)
+		    && engine->data != data)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1613: FILE: kernel/utrace.c:238:
+/*
+  option to stop it?

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1618: FILE: kernel/utrace.c:243:
+utrace_attach(struct task_struct *target, int flags,
+	     const struct utrace_engine_ops *ops, unsigned long data)

WARNING:MEMORY_BARRIER: memory barrier without comment
#1626: FILE: kernel/utrace.c:251:
+	smp_rmb();

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!utrace"
#1627: FILE: kernel/utrace.c:252:
+	if (utrace == NULL) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1630: FILE: kernel/utrace.c:255:
+		if (!(flags & UTRACE_ATTACH_CREATE)) {
+			return ERR_PTR(-ENOENT);
+		}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!engine"
#1635: FILE: kernel/utrace.c:260:
+		if (unlikely(engine == NULL))

WARNING:INDENTED_LABEL: labels should not be indented
#1639: FILE: kernel/utrace.c:264:
+	first:

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!utrace"
#1645: FILE: kernel/utrace.c:270:
+		if (unlikely(utrace == NULL)) /* Race condition.  */

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1648: FILE: kernel/utrace.c:273:
+	}
+	else if (unlikely(target->flags & PF_REAPED)) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1655: FILE: kernel/utrace.c:280:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#1655: FILE: kernel/utrace.c:280:
+	else {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!engine"
#1663: FILE: kernel/utrace.c:288:
+		if (unlikely(engine == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!utrace"
#1669: FILE: kernel/utrace.c:294:
+		if (unlikely(utrace == NULL)) { /* Race with detach.  */

WARNING:LINE_SPACING: Missing a blank line after declarations
#1677: FILE: kernel/utrace.c:302:
+			struct utrace_attached_engine *old;
+			old = matching_engine(utrace, flags, ops, data);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "old"
#1678: FILE: kernel/utrace.c:303:
+			if (old != NULL) {

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1722: FILE: kernel/utrace.c:347:
+static const struct utrace_engine_ops dead_engine_ops =
+{

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1726: FILE: kernel/utrace.c:351:
+
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#1741: FILE: kernel/utrace.c:366:
+	if (target->exit_signal == -1)
[...]
+	else if (thread_group_empty(target)) {
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#1799: FILE: kernel/utrace.c:424:
+			int stop_count = target->signal->group_stop_count;
+			target->state = TASK_STOPPED;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1807: FILE: kernel/utrace.c:432:
+			if (stop_count == 0
+			    && 0

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1812: FILE: kernel/utrace.c:437:
+		}
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#1812: FILE: kernel/utrace.c:437:
+		else {

WARNING:MEMORY_BARRIER: memory barrier without comment
#1833: FILE: kernel/utrace.c:458:
+	smp_rmb();

CHECK:BRACES: braces {} should be used on all arms of this statement
#1850: FILE: kernel/utrace.c:475:
+	if (quiesce(target, 1)) {
[...]
+	else
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1854: FILE: kernel/utrace.c:479:
+	}
+	else

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1859: FILE: kernel/utrace.c:484:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!utrace"
#1875: FILE: kernel/utrace.c:500:
+	if (unlikely(utrace == NULL))

CHECK:BRACES: braces {} should be used on all arms of this statement
#1886: FILE: kernel/utrace.c:511:
+		if (engine->flags & UTRACE_EVENT(REAP)) {
[...]
+		else
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1893: FILE: kernel/utrace.c:518:
+		}
+		else

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1901: FILE: kernel/utrace.c:526:
+
+

WARNING:MEMORY_BARRIER: memory barrier without comment
#1913: FILE: kernel/utrace.c:538:
+	smp_rmb();

CHECK:BRACES: braces {} should be used on all arms of this statement
#1931: FILE: kernel/utrace.c:556:
+		if (flags & UTRACE_ACTION_QUIESCE) {
[...]
+		else
[...]

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1933: FILE: kernel/utrace.c:558:
+			report = (quiesce(target, 1)
+				  && (flags & UTRACE_EVENT(QUIESCE)));

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1936: FILE: kernel/utrace.c:561:
+		}
+		else

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1939: FILE: kernel/utrace.c:564:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#1939: FILE: kernel/utrace.c:564:
+	else {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1947: FILE: kernel/utrace.c:572:
+		if (!(target->utrace_flags & UTRACE_ACTION_QUIESCE)
+		    && ((flags &~ old_utrace_flags)

CHECK:SPACING: spaces preferred around that '&' (ctx:WxO)
#1947: FILE: kernel/utrace.c:572:
+		    && ((flags &~ old_utrace_flags)
 		               ^

ERROR:SPACING: space prohibited after that '~' (ctx:OxW)
#1947: FILE: kernel/utrace.c:572:
+		    && ((flags &~ old_utrace_flags)
 		                ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#1958: FILE: kernel/utrace.c:583:
+
 ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1958: FILE: kernel/utrace.c:583:
+^L$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#1969: FILE: kernel/utrace.c:594:
+	if (ret & UTRACE_ACTION_DETACH)
[...]
+	else if ((ret & UTRACE_ACTION_NEWSTATE)
[...]
+	else
[...]

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1972: FILE: kernel/utrace.c:597:
+	else if ((ret & UTRACE_ACTION_NEWSTATE)
+		 && ((ret ^ engine->flags) & UTRACE_ACTION_STATE_MASK)) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1989: FILE: kernel/utrace.c:614:
+	}
+	else

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'callback' may be better as '(callback)' to avoid precedence issues
#1994: FILE: kernel/utrace.c:619:
+#define REPORT(callback, ...) do { \
+	u32 ret = (*rcu_dereference(engine->ops)->callback) \
+		(engine, tsk, ##__VA_ARGS__); \
+	action = update_action(tsk, utrace, engine, ret); \
+	} while (0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2000: FILE: kernel/utrace.c:625:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2137: FILE: kernel/utrace.c:762:
+
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#2167: FILE: kernel/utrace.c:792:
+		if ((tsk->utrace_flags & UTRACE_ACTION_QUIESCE)
[...]
+		else
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#2179: FILE: kernel/utrace.c:804:
+		}
+		else

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#2194: FILE: kernel/utrace.c:819:
+	}
+	else if (tsk->utrace_flags & UTRACE_ACTION_QUIESCE) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#2202: FILE: kernel/utrace.c:827:
+		unsigned long flags = 0;
+		utrace = rcu_dereference(tsk->utrace);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2218: FILE: kernel/utrace.c:843:
+	if ((action & (UTRACE_ACTION_BLOCKSTEP|UTRACE_ACTION_SINGLESTEP))
 	                                      ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2230: FILE: kernel/utrace.c:855:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2266: FILE: kernel/utrace.c:891:
+	BUG_ON(!tsk->exit_state);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2352: FILE: kernel/utrace.c:977:
+/*
+  XXX pass syscall # to engine hook directly, let it return inhibit-action

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2376: FILE: kernel/utrace.c:1001:
+
+

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#2382: FILE: kernel/utrace.c:1007:
+struct utrace_signal
+{

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2388: FILE: kernel/utrace.c:1013:
+
+

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2397: FILE: kernel/utrace.c:1022:
+#define M(sig) (1ULL << ((sig)-1))
                               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2399: FILE: kernel/utrace.c:1024:
+#define M(sig) (1UL << ((sig)-1))
                              ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2404: FILE: kernel/utrace.c:1029:
+	M(SIGKILL)   |  M(SIGSTOP)                                   )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2407: FILE: kernel/utrace.c:1032:
+	M(SIGSTOP)   |  M(SIGTSTP)   |  M(SIGTTIN)   |  M(SIGTTOU)   )

ERROR:CODE_INDENT: code indent should use tabs where possible
#2410: FILE: kernel/utrace.c:1035:
+        M(SIGQUIT)   |  M(SIGILL)    |  M(SIGTRAP)   |  M(SIGABRT)   | \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2410: FILE: kernel/utrace.c:1035:
+        M(SIGQUIT)   |  M(SIGILL)    |  M(SIGTRAP)   |  M(SIGABRT)   | \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2411: FILE: kernel/utrace.c:1036:
+        M(SIGFPE)    |  M(SIGSEGV)   |  M(SIGBUS)    |  M(SIGSYS)    | \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2411: FILE: kernel/utrace.c:1036:
+        M(SIGFPE)    |  M(SIGSEGV)   |  M(SIGBUS)    |  M(SIGSYS)    | \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2412: FILE: kernel/utrace.c:1037:
+        M(SIGXCPU)   |  M(SIGXFSZ)   |  M_SIGEMT                     )$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2412: FILE: kernel/utrace.c:1037:
+        M(SIGXCPU)   |  M(SIGXFSZ)   |  M_SIGEMT                     )$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2412: FILE: kernel/utrace.c:1037:
+        M(SIGXCPU)   |  M(SIGXFSZ)   |  M_SIGEMT                     )

ERROR:CODE_INDENT: code indent should use tabs where possible
#2415: FILE: kernel/utrace.c:1040:
+        M(SIGCONT)   |  M(SIGCHLD)   |  M(SIGWINCH)  |  M(SIGURG)    )$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2415: FILE: kernel/utrace.c:1040:
+        M(SIGCONT)   |  M(SIGCHLD)   |  M(SIGWINCH)  |  M(SIGURG)    )$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2415: FILE: kernel/utrace.c:1040:
+        M(SIGCONT)   |  M(SIGCHLD)   |  M(SIGWINCH)  |  M(SIGURG)    )

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sig' - possible side-effects?
#2417: FILE: kernel/utrace.c:1042:
+#define sig_kernel_only(sig) \
+		(((sig) < SIGRTMIN)  && T(sig, SIG_KERNEL_ONLY_MASK))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sig' - possible side-effects?
#2419: FILE: kernel/utrace.c:1044:
+#define sig_kernel_coredump(sig) \
+		(((sig) < SIGRTMIN)  && T(sig, SIG_KERNEL_COREDUMP_MASK))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sig' - possible side-effects?
#2421: FILE: kernel/utrace.c:1046:
+#define sig_kernel_ignore(sig) \
+		(((sig) < SIGRTMIN)  && T(sig, SIG_KERNEL_IGNORE_MASK))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sig' - possible side-effects?
#2423: FILE: kernel/utrace.c:1048:
+#define sig_kernel_stop(sig) \
+		(((sig) < SIGRTMIN)  && T(sig, SIG_KERNEL_STOP_MASK))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2426: FILE: kernel/utrace.c:1051:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#2444: FILE: kernel/utrace.c:1069:
+			u32 disp = action & UTRACE_ACTION_OP_MASK;
+			action &= ~UTRACE_ACTION_OP_MASK;

WARNING:LINE_SPACING: Missing a blank line after declarations
#2460: FILE: kernel/utrace.c:1085:
+	u32 action;
+	action = report_signal(tsk, regs, tsk->utrace, UTRACE_SIGNAL_HANDLER,

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2462: FILE: kernel/utrace.c:1087:
+			       UTRACE_ACTION_SINGLESTEP|UTRACE_ACTION_BLOCKSTEP,
 			                               ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2468: FILE: kernel/utrace.c:1093:
+
+

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#2482: FILE: kernel/utrace.c:1107:
+#if 0				/* XXX */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!utrace->u.live.signal"
#2492: FILE: kernel/utrace.c:1117:
+	if (utrace->u.live.signal == NULL)

CHECK:BRACES: braces {} should be used on all arms of this statement
#2528: FILE: kernel/utrace.c:1153:
+		if (signal.return_ka == NULL) {
[...]
+		else
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!signal.return_ka"
#2528: FILE: kernel/utrace.c:1153:
+		if (signal.return_ka == NULL) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#2534: FILE: kernel/utrace.c:1159:
+		}
+		else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2535: FILE: kernel/utrace.c:1160:
+			BUG_ON(signal.return_ka != return_ka);

WARNING:TYPO_SPELLING: 'noone' may be misspelled - perhaps 'no one'?
#2540: FILE: kernel/utrace.c:1165:
+	 * If noone is interested in intercepting signals, let the caller
 	      ^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2556: FILE: kernel/utrace.c:1181:
+	BUG_ON(signal.signr != info->si_signo);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#2565: FILE: kernel/utrace.c:1190:
+	}
+	else if (ka->sa.sa_handler != SIG_DFL) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#2569: FILE: kernel/utrace.c:1194:
+	}
+	else if (sig_kernel_coredump(signal.signr)) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#2573: FILE: kernel/utrace.c:1198:
+	}
+	else if (sig_kernel_ignore(signal.signr)) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#2577: FILE: kernel/utrace.c:1202:
+	}
+	else if (sig_kernel_stop(signal.signr)) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#2582: FILE: kernel/utrace.c:1207:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#2582: FILE: kernel/utrace.c:1207:
+	else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#2599: FILE: kernel/utrace.c:1224:
+		if (action & UTRACE_SIGNAL_HOLD) {
[...]
+		else
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#2601: FILE: kernel/utrace.c:1226:
+			struct sigqueue *q = sigqueue_alloc();
+			if (likely(q != NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "q"
#2601: FILE: kernel/utrace.c:1226:
+			if (likely(q != NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "q"
#2608: FILE: kernel/utrace.c:1233:
+			if (likely(q != NULL))

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#2611: FILE: kernel/utrace.c:1236:
+		}
+		else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2663: FILE: kernel/utrace.c:1288:
+		BUG();

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2669: FILE: kernel/utrace.c:1294:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2679: FILE: kernel/utrace.c:1304:
+utrace_inject_signal(struct task_struct *target,
+		    struct utrace_attached_engine *engine,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!utrace"
#2692: FILE: kernel/utrace.c:1317:
+	if (utrace == NULL) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#2701: FILE: kernel/utrace.c:1326:
+	if (signal == NULL) {
[...]
+	else if (signal->signr != 0)
[...]
+	else {
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!signal"
#2701: FILE: kernel/utrace.c:1326:
+	if (signal == NULL) {

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#2702: FILE: kernel/utrace.c:1327:
+		ret = -ENOSYS;	/* XXX */

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#2704: FILE: kernel/utrace.c:1329:
+	}
+	else if (signal->signr != 0)

CHECK:BRACES: Unbalanced braces around else statement
#2706: FILE: kernel/utrace.c:1331:
+	else {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ka"
#2725: FILE: kernel/utrace.c:1350:
+			if (ka == NULL)

WARNING:LINE_SPACING: Missing a blank line after declarations
#2731: FILE: kernel/utrace.c:1356:
+				struct k_sigaction *a;
+				a = &target->sighand->action[info->si_signo-1];

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2731: FILE: kernel/utrace.c:1356:
+				a = &target->sighand->action[info->si_signo-1];
 				                                           ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2773: FILE: kernel/utrace.c:1398:
+
+

CHECK:SPACING: No space is necessary after a cast
#2779: FILE: kernel/utrace.c:1404:
+	if (unlikely((unsigned) which >= view->n))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2779: FILE: kernel/utrace.c:1404:
+	if (unlikely((unsigned) which >= view->n))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2789: FILE: kernel/utrace.c:1414:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "utrace"
#2802: FILE: kernel/utrace.c:1427:
+	if (utrace != NULL) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#2806: FILE: kernel/utrace.c:1431:
+		const struct utrace_engine_ops *ops;
+		list_for_each_safe_rcu(pos, next, &utrace->engines) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "utrace"
#2830: FILE: kernel/utrace.c:1455:
+	if (utrace != NULL) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#2834: FILE: kernel/utrace.c:1459:
+		const struct utrace_engine_ops *ops;
+		list_for_each_safe_rcu(pos, next, &utrace->engines) {

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.69254.commit.03038b6767fd45d318caf13dac37239443d2bdda total: 35 errors, 53 warnings, 99 checks, 2729 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.69254.commit.03038b6767fd45d318caf13dac37239443d2bdda has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
