WARNING:LEADING_SPACE: please, no spaces at the start of a line
#64: FILE: arch/powerpc/platforms/cell/spufs/context.c:125:
+       int ret = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#66: FILE: arch/powerpc/platforms/cell/spufs/context.c:127:
+       down_write(&ctx->state_sema);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#68: FILE: arch/powerpc/platforms/cell/spufs/context.c:129:
+       if (!ctx->owner) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#68: FILE: arch/powerpc/platforms/cell/spufs/context.c:129:
+       if (!ctx->owner) {
+               ret = -EINVAL;

ERROR:CODE_INDENT: code indent should use tabs where possible
#69: FILE: arch/powerpc/platforms/cell/spufs/context.c:130:
+               ret = -EINVAL;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#69: FILE: arch/powerpc/platforms/cell/spufs/context.c:130:
+               ret = -EINVAL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#70: FILE: arch/powerpc/platforms/cell/spufs/context.c:131:
+               goto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#70: FILE: arch/powerpc/platforms/cell/spufs/context.c:131:
+               goto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#71: FILE: arch/powerpc/platforms/cell/spufs/context.c:132:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#73: FILE: arch/powerpc/platforms/cell/spufs/context.c:134:
+       if (ctx->state == SPU_STATE_SAVED) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#73: FILE: arch/powerpc/platforms/cell/spufs/context.c:134:
+       if (ctx->state == SPU_STATE_SAVED) {
+               ret = spu_activate(ctx, 0);

ERROR:CODE_INDENT: code indent should use tabs where possible
#74: FILE: arch/powerpc/platforms/cell/spufs/context.c:135:
+               ret = spu_activate(ctx, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#74: FILE: arch/powerpc/platforms/cell/spufs/context.c:135:
+               ret = spu_activate(ctx, 0);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#75: FILE: arch/powerpc/platforms/cell/spufs/context.c:136:
+               if (ret)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#75: FILE: arch/powerpc/platforms/cell/spufs/context.c:136:
+               if (ret)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#75: FILE: arch/powerpc/platforms/cell/spufs/context.c:136:
+               if (ret)
+                       goto out;

ERROR:CODE_INDENT: code indent should use tabs where possible
#76: FILE: arch/powerpc/platforms/cell/spufs/context.c:137:
+                       goto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#76: FILE: arch/powerpc/platforms/cell/spufs/context.c:137:
+                       goto out;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#77: FILE: arch/powerpc/platforms/cell/spufs/context.c:138:
+               ctx->state = SPU_STATE_RUNNABLE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#77: FILE: arch/powerpc/platforms/cell/spufs/context.c:138:
+               ctx->state = SPU_STATE_RUNNABLE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#78: FILE: arch/powerpc/platforms/cell/spufs/context.c:139:
+       } else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#78: FILE: arch/powerpc/platforms/cell/spufs/context.c:139:
+       } else {
[...]
+               spu_unmap_mappings(ctx);

ERROR:CODE_INDENT: code indent should use tabs where possible
#79: FILE: arch/powerpc/platforms/cell/spufs/context.c:140:
+               /* We need to exclude userspace access to the context. */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#80: FILE: arch/powerpc/platforms/cell/spufs/context.c:141:
+               spu_unmap_mappings(ctx);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#80: FILE: arch/powerpc/platforms/cell/spufs/context.c:141:
+               spu_unmap_mappings(ctx);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#81: FILE: arch/powerpc/platforms/cell/spufs/context.c:142:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#84: FILE: arch/powerpc/platforms/cell/spufs/context.c:145:
+       if (ret)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#84: FILE: arch/powerpc/platforms/cell/spufs/context.c:145:
+       if (ret)
+               up_write(&ctx->state_sema);

ERROR:CODE_INDENT: code indent should use tabs where possible
#85: FILE: arch/powerpc/platforms/cell/spufs/context.c:146:
+               up_write(&ctx->state_sema);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#85: FILE: arch/powerpc/platforms/cell/spufs/context.c:146:
+               up_write(&ctx->state_sema);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#86: FILE: arch/powerpc/platforms/cell/spufs/context.c:147:
+       return ret;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#100: FILE: arch/powerpc/platforms/cell/spufs/file.c:1346:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#108: FILE: arch/powerpc/platforms/cell/spufs/file.c:1354:
+static ssize_t spufs_recycle_write(struct file *file,
+		const char __user *buffer, size_t size, loff_t *pos)

WARNING:CONST_STRUCT: struct file_operations should normally be const
#126: FILE: arch/powerpc/platforms/cell/spufs/file.c:1372:
+static struct file_operations spufs_recycle_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#150: FILE: arch/powerpc/platforms/cell/spufs/inode.c:251:
+	if ((ret = spu_acquire_exclusive(ctx)) != 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#190: FILE: arch/powerpc/platforms/cell/spufs/inode.c:436:
+		int setup_err = spu_setup_isolated(

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.24840.commit.b61a947407d6df43102a23cde95f1c077b76cf90 total: 10 errors, 23 warnings, 3 checks, 145 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.24840.commit.b61a947407d6df43102a23cde95f1c077b76cf90 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
