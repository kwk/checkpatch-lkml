ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#202: FILE: arch/i386/mm/init.c:449:
+int __global nx_enabled = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#322: FILE: arch/i386/mm/pgtable.c:140:
+void __global __set_fixmap (enum fixed_addresses idx, unsigned long phys, pgprot_t flags)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#381: FILE: drivers/md/md.c:2890:
+int __global mdp_major = 0;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#556: FILE: fs/compat.c:1506:
+int __global compat_do_execve(char * filename,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#557: FILE: fs/compat.c:1507:
+int __global compat_do_execve(char * filename,
 	compat_uptr_t __user *argv,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#661: FILE: fs/drop_caches.c:58:
+int __global drop_caches_sysctl_handler(ctl_table *table, int write,
 	struct file *file, void __user *buffer, size_t *length, loff_t *ppos)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#702: FILE: fs/exec.c:1134:
+int __global do_execve(char * filename,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#703: FILE: fs/exec.c:1135:
+int __global do_execve(char * filename,
 	char __user *__user *argv,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#711: FILE: fs/exec.c:1468:
+int __global do_coredump(long signr, int exit_code, struct pt_regs * regs)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#810: FILE: fs/file_table.c:70:
+int __global proc_nr_files(ctl_table *table, int write, struct file *filp,
                                                                      ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#811: FILE: fs/file_table.c:71:
+int __global proc_nr_files(ctl_table *table, int write, struct file *filp,
                      void __user *buffer, size_t *lenp, loff_t *ppos)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#818: FILE: fs/file_table.c:77:
+int __global proc_nr_files(ctl_table *table, int write, struct file *filp,
                                                                      ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#819: FILE: fs/file_table.c:78:
+int __global proc_nr_files(ctl_table *table, int write, struct file *filp,
                      void __user *buffer, size_t *lenp, loff_t *ppos)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#867: FILE: fs/filesystems.c:201:
+int __global get_filesystem_list(char * buf)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#978: FILE: fs/inode.c:172:
+void __global destroy_inode(struct inode *inode) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1039: FILE: fs/namei.c:325:
+int __global deny_write_access(struct file * file)

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#1070: FILE: fs/namespace.c:403:
+struct seq_operations __global mounts_op = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#1079: FILE: fs/namespace.c:441:
+struct seq_operations __global mountstats_op = {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1187: FILE: fs/proc/proc_devtree.c:86:
+void __global proc_device_tree_remove_prop(struct proc_dir_entry *pde,
 				  struct property *prop)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1194: FILE: fs/proc/proc_devtree.c:92:
+void __global proc_device_tree_update_prop(struct proc_dir_entry *pde,
 				  struct property *newprop,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1275: FILE: fs/splice.c:711:
+ssize_t __global splice_from_pipe(struct pipe_inode_info *pipe, struct file *out,
 			 loff_t *ppos, size_t len, unsigned int flags,

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1327: FILE: init/calibrate.c:115:
+void __devinit __global calibrate_delay(void)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1447: FILE: init/main.c:191:
+unsigned long __global loops_per_jiffy = (1<<12);
                                            ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1506: FILE: ipc/compat.c:329:
+long __global compat_sys_msgrcv(int first, int second, int msgtyp, int third,
 			   int version, void __user *uptr)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1524: FILE: ipc/compat.c:480:
+long __global compat_sys_shmat(int first, int second, compat_uptr_t third, int version,
 			void __user *uptr)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1542: FILE: ipc/compat.c:675:
+long __global compat_sys_semtimedop(int semid, struct sembuf __user *tsems,
 		unsigned nsops, const struct compat_timespec __user *timeout)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1605: FILE: ipc/shm.c:59:
+size_t ^I__global shm_ctlall = SHMALL;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1606: FILE: ipc/shm.c:60:
+int ^I__global shm_ctlmni = SHMMNI;$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1763: FILE: net/core/rtnetlink.c:158:
+int __global rtnetlink_send(struct sk_buff *skb, u32 pid, unsigned group, int echo)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1856: FILE: net/core/user_dma.c:49:
+int __global dma_skb_copy_datagram_iovec(struct dma_chan *chan,
 			struct sk_buff *skb, int offset, struct iovec *to,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1869: FILE: net/ipv4/inet_hashtables.c:31:
+struct inet_bind_bucket * __global inet_bind_bucket_create(kmem_cache_t *cachep,
 						 struct inet_bind_hashbucket *head,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1878: FILE: net/ipv4/inet_hashtables.c:57:
+void __global inet_bind_hash(struct sock *sk, struct inet_bind_bucket *tb,
 		    const unsigned short snum)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2009: FILE: security/selinux/avc.c:690:
+int __global avc_add_callback(int (*callback)(u32 event, u32 ssid, u32 tsid,
                                      u16 tclass, u32 perms,

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#2079: FILE: security/selinux/hooks.c:86:
+int __global selinux_enforcing = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#2114: FILE: security/selinux/ss/policydb.c:48:
+int __global selinux_mls_enabled = 0;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#2136: FILE: security/selinux/ss/services.c:59:
+int __global ss_initialized = 0;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2146: FILE: security/selinux/ss/services.c:401:
+int __global security_validate_transition(u32 oldsid, u32 newsid, u32 tasksid,
                                  u16 tclass)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2155: FILE: security/selinux/ss/services.c:488:
+int __global security_compute_av(u32 ssid,
 			u32 tsid,

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#2181: FILE: security/selinux/ss/services.c:775:
+int __global security_context_to_sid_default(char *scontext, u32 scontext_len, u32 *sid, u32 def_sid)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2191: FILE: security/selinux/ss/services.c:963:
+int __global security_transition_sid(u32 ssid,
 			    u32 tsid,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2200: FILE: security/selinux/ss/services.c:984:
+int __global security_member_sid(u32 ssid,
 			u32 tsid,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2209: FILE: security/selinux/ss/services.c:1005:
+int __global security_change_sid(u32 ssid,
 			u32 tsid,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2227: FILE: security/selinux/ss/services.c:1318:
+int __global security_port_sid(u16 domain,
 		      u16 type,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2236: FILE: security/selinux/ss/services.c:1362:
+int __global security_netif_sid(char *name,
 		       u32 *if_sid,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2245: FILE: security/selinux/ss/services.c:1423:
+int __global security_node_sid(u16 domain,
 		      void *addrp,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2254: FILE: security/selinux/ss/services.c:1506:
+int __global security_get_user_sids(u32 fromsid,
 	                   char *username,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2263: FILE: security/selinux/ss/services.c:1609:
+int __global security_genfs_sid(const char *fstype,
 	               char *path,

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2271: FILE: security/selinux/ss/services.c:1665:
+int __global security_fs_use(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2317: FILE: security/selinux/ss/services.c:1834:
+int __global selinux_audit_rule_init(u32 field, u32 op, char *rulestr,
                             struct selinux_audit_rule **rule)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2326: FILE: security/selinux/ss/services.c:1927:
+int __global selinux_audit_rule_match(u32 ctxid, u32 field, u32 op,
                              struct selinux_audit_rule *rule,

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.44426.commit.8f0dcddf669146279f6bf953a507ac7d5a9370f2 total: 11 errors, 10 warnings, 29 checks, 1786 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.44426.commit.8f0dcddf669146279f6bf953a507ac7d5a9370f2 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
