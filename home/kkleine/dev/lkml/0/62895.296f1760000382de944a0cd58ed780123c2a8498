CHECK:LINE_SPACING: Please don't use multiple blank lines
#44: FILE: drivers/infiniband/hw/ipath/ipath_common.h:42:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#122: FILE: drivers/infiniband/hw/ipath/ipath_common.h:655:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#147: FILE: drivers/infiniband/hw/ipath/ipath_common.h:680:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#156: FILE: drivers/infiniband/hw/ipath/ipath_common.h:689:
+static inline __u32 ipath_hdrget_err_flags(const __le32 * rbuf)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#161: FILE: drivers/infiniband/hw/ipath/ipath_common.h:694:
+static inline __u32 ipath_hdrget_rcv_type(const __le32 * rbuf)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#167: FILE: drivers/infiniband/hw/ipath/ipath_common.h:700:
+static inline __u32 ipath_hdrget_length_in_bytes(const __le32 * rbuf)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#173: FILE: drivers/infiniband/hw/ipath/ipath_common.h:706:
+static inline __u32 ipath_hdrget_index(const __le32 * rbuf)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#220: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:826:
+^Iif (dd->ipath_port0_skbs && $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#221: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:827:
+	if (dd->ipath_port0_skbs && 
+			hdr->sub_opcode == IPATH_ITH4X_OPCODE_ENCAP) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#230: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:858:
 	}
+	else if (hdr->sub_opcode == IPATH_ITH4X_OPCODE_LID_ARP)

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#258: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:909:
+		eflags = ipath_hdrget_err_flags((__le32 *) rc);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#259: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:910:
+		etype = ipath_hdrget_rcv_type((__le32 *) rc);

CHECK:SPACING: No space is necessary after a cast
#262: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:912:
+		tlen = ipath_hdrget_length_in_bytes((__le32 *) rc);

CHECK:SPACING: No space is necessary after a cast
#271: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:922:
+			etail = ipath_hdrget_index((__le32 *) rc);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#280: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:934:
+		    RCVHQ_RCV_TYPE_ERROR && ipath_hdrget_ipath_ver(

CHECK:SPACING: No space is necessary after a cast
#289: FILE: drivers/infiniband/hw/ipath/ipath_driver.c:947:
+				   ipath_hdrget_index((__le32 *) rc), emsg);

CHECK:BRACES: braces {} should be used on all arms of this statement
#474: FILE: drivers/infiniband/hw/ipath/ipath_qp.c:898:
+	if (credit == IPATH_AETH_CREDIT_INVAL)
[...]
 	else if (qp->s_lsn != (u32) -1) {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:CONSTANT_CONVERSION: __constant_cpu_to_be32 should be cpu_to_be32
#782: FILE: drivers/infiniband/hw/ipath/ipath_ud.c:378:
+		__constant_cpu_to_be32(IPATH_MULTICAST_QPN) :

Use of __constant_<foo> form is discouraged for the following functions::

  __constant_cpu_to_be[x]
  __constant_cpu_to_le[x]
  __constant_be[x]_to_cpu
  __constant_le[x]_to_cpu
  __constant_htons
  __constant_ntohs

Using any of these outside of include/uapi/ is not preferred as using the
function without __constant_ is identical when the argument is a
constant.

In big endian systems, the macros like __constant_cpu_to_be32(x) and
cpu_to_be32(x) expand to the same expression::

  #define __constant_cpu_to_be32(x) ((__force __be32)(__u32)(x))
  #define __cpu_to_be32(x)          ((__force __be32)(__u32)(x))

In little endian systems, the macros __constant_cpu_to_be32(x) and
cpu_to_be32(x) expand to __constant_swab32 and __swab32.  __swab32
has a __builtin_constant_p check::

  #define __swab32(x)				\
    (__builtin_constant_p((__u32)(x)) ?	\
    ___constant_swab32(x) :			\
    __fswab32(x))

So ultimately they have a special case for constants.
Similar is the case with all of the macros in the list.  Thus
using the __constant_... forms are unnecessarily verbose and
not preferred outside of include/uapi.

See: https://lore.kernel.org/lkml/1400106425.12666.6.camel@joe-AO725/

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.62895.commit.296f1760000382de944a0cd58ed780123c2a8498 total: 6 errors, 1 warnings, 11 checks, 734 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.62895.commit.296f1760000382de944a0cd58ed780123c2a8498 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
