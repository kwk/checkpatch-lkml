WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#48: FILE: mm/slabulator.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#75: FILE: mm/slabulator.c:28:
+	if ((size & (size -1)) == 0) {
 	                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#80: FILE: mm/slabulator.c:33:
+		int order = fls(size) -1 - PAGE_SHIFT;
 		                      ^

ERROR:SPACING: space required before the open parenthesis '('
#86: FILE: mm/slabulator.c:39:
+	for(order = max(slab_min_order, fls(size - 1) - PAGE_SHIFT);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#98: FILE: mm/slabulator.c:51:
+
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#111: FILE: mm/slabulator.c:64:
+int slabulator_up = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#113: FILE: mm/slabulator.c:66:
+int slab_is_available(void) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#119: FILE: mm/slabulator.c:72:
+	extern void kmalloc_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#126: FILE: mm/slabulator.c:79:
+struct slab_cache *kmem_cache_create(const char *name, size_t size,
+		size_t align, unsigned long flags,

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#139: FILE: mm/slabulator.c:92:
+	if (flags & (SLAB_MUST_HWCACHE_ALIGN|SLAB_HWCACHE_ALIGN))
 	                                    ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*x)...) over kmalloc(sizeof(struct slab_control)...)
#192: FILE: mm/slabulator.c:145:
+	x = kmalloc(sizeof(struct slab_control), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#202: FILE: mm/slabulator.c:155:
+	if (((s.size & (s.size - 1))==0) && !ctor && !dtor &&
 	                            ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#203: FILE: mm/slabulator.c:156:
+	if (((s.size & (s.size - 1))==0) && !ctor && !dtor &&
+		   !(flags & (SLAB_DESTROY_BY_RCU|SLAB_RECLAIM_ACCOUNT))) {

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#203: FILE: mm/slabulator.c:156:
+		   !(flags & (SLAB_DESTROY_BY_RCU|SLAB_RECLAIM_ACCOUNT))) {
 		                                 ^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#204: FILE: mm/slabulator.c:157:
+		   !(flags & (SLAB_DESTROY_BY_RCU|SLAB_RECLAIM_ACCOUNT))) {
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#205: FILE: mm/slabulator.c:158:
+		printk(KERN_INFO "Merging slab_cache %s size %d into"

WARNING:SPLIT_STRING: quoted string split across lines
#206: FILE: mm/slabulator.c:159:
+		printk(KERN_INFO "Merging slab_cache %s size %d into"
+			" kmalloc array\n", name, s.size);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#210: FILE: mm/slabulator.c:163:
+	} else
[...]
+	rs = SLABULATOR_ALLOCATOR.create(x, &s);

CHECK:BRACES: Unbalanced braces around else statement
#210: FILE: mm/slabulator.c:163:
+	} else

WARNING:TYPO_SPELLING: 'constuctors' may be misspelled - perhaps 'constructors'?
#217: FILE: mm/slabulator.c:170:
+	 * Now deal with constuctors and destructors. We need to know the
 	                 ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#224: FILE: mm/slabulator.c:177:
+			ctor_and_dtor_for_page_allocator(rs->page_alloc,
+				rs->size, rs,

WARNING:SPLIT_STRING: quoted string split across lines
#235: FILE: mm/slabulator.c:188:
+		panic("Cannot create slab %s size=%d realsize=%d "
+			"order=%d offset=%d flags=%lx\n",

CHECK:LINE_SPACING: Please don't use multiple blank lines
#238: FILE: mm/slabulator.c:191:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#299: FILE: mm/slabulator.c:252:
+#define next_reap_node(void) do { } while (0)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#302: FILE: mm/slabulator.c:255:
+#define REAPTIMEOUT_CPUC	(2*HZ)
                         	  ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#313: FILE: mm/slabulator.c:266:
+	schedule_delayed_work(&__get_cpu_var(reap_work),
+				      REAPTIMEOUT_CPUC);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#316: FILE: mm/slabulator.c:269:
+static void __devinit start_cpu_timer(int cpu)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!reap_work->func"
#325: FILE: mm/slabulator.c:278:
+	if (keventd_up() && reap_work->func == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#343: FILE: mm/slabulator.c:296:
+__initcall(cpucache_init);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#346: FILE: mm/slabulator.c:299:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#352: FILE: include/linux/slabulator.h:1:
+#ifndef _LINUX_SLABULATOR_H

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#398: FILE: include/linux/slabulator.h:47:
+extern int slab_is_available(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#399: FILE: include/linux/slabulator.h:48:
+extern void kmem_cache_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#410: FILE: include/linux/slabulator.h:59:
+extern struct slab_cache *kmem_cache_create(const char *name, size_t size,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#411: FILE: include/linux/slabulator.h:60:
+extern struct slab_cache *kmem_cache_create(const char *name, size_t size,
+	size_t align, unsigned long flags,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#431: FILE: include/linux/slabulator.h:80:
+static inline void *kmem_cache_alloc_node(struct slab_cache *s,
+					gfp_t flags, int node)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#436: FILE: include/linux/slabulator.h:85:
+extern void *kmem_cache_zalloc(struct slab_cache *s, gfp_t flags);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#448: FILE: include/linux/slabulator.h:97:
+extern int kmem_cache_destroy(struct slab_cache *s);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#471: FILE: include/linux/slabulator.h:120:
+static inline void kmem_set_shrinker(kmem_cache_t *cachep,
+		struct shrinker *shrinker)

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.41717.commit.ecdb9abbcdfe7030700f5f636642d7141e92c8be total: 4 errors, 10 warnings, 25 checks, 502 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.41717.commit.ecdb9abbcdfe7030700f5f636642d7141e92c8be has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
