CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#37: 
>                 if (ret)
  ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#38: 
>                         goto error;
  ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#39: 
>         }
  ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#40: 
> +       atomic_inc(&memory_hotadd_count);
   ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#41: 
>  
  ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#42: 
>         /* call arch's memory hotadd */
  ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#43: 
>         ret = arch_add_memory(nid, start, size);
  ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#44: 
>  
  ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#45: 
> +       atomic_dec(&memory_hotadd_count);
   ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#47: 
>         if (ret < 0)
  ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#48: 
>                 goto error;
  ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#49: 
>  
  ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#96: FILE: include/linux/mm.h:981:
+extern void memmap_init_zone(unsigned long, int, unsigned long, unsigned long, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#96: FILE: include/linux/mm.h:981:
+extern void memmap_init_zone(unsigned long, int, unsigned long, unsigned long, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#96: FILE: include/linux/mm.h:981:
+extern void memmap_init_zone(unsigned long, int, unsigned long, unsigned long, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#96: FILE: include/linux/mm.h:981:
+extern void memmap_init_zone(unsigned long, int, unsigned long, unsigned long, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#96: FILE: include/linux/mm.h:981:
+extern void memmap_init_zone(unsigned long, int, unsigned long, unsigned long, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#96: FILE: include/linux/mm.h:981:
+extern void memmap_init_zone(unsigned long, int, unsigned long, unsigned long, int);

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.08135.commit.6a767df6f7af754f9d2a0351a741fb3f34c31753 total: 0 errors, 5 warnings, 13 checks, 64 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.08135.commit.6a767df6f7af754f9d2a0351a741fb3f34c31753 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
