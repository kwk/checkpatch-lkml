CHECK:BRACES: braces {} should be used on all arms of this statement
#106: FILE: fs/file_table.c:79:
+		if (get_nr_files() >= tun * thr / 100 && tun < max) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#111: FILE: fs/file_table.c:84:
+		} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#115: FILE: fs/file_table.c:88:
+	if (get_nr_files() < tun * thr / (200 - thr) && tun > min) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#120: FILE: fs/file_table.c:93:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#128: FILE: fs/file_table.c:101:
+DEFINE_TUNABLE(maxfiles_akt, FILPTHRESH, 0, 0, &files_stat.max_files,
+		&nr_files, int);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#130: FILE: fs/file_table.c:103:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#167: FILE: fs/file_table.c:384:
+		printk(KERN_WARNING "Failed registering tunable file-max\n");

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#177: FILE: include/linux/akt.h:298:
+extern void files_late_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#213: FILE: ipc/msg.c:103:
+	init_tunable_ipcns(ns, msgmni_akt, MSGTHRESH, MSGMNI, IPCMNI,
+		&ns->msg_ctlmni, &ids->in_use, int);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#223: FILE: ipc/msg.c:145:
+		printk(KERN_WARNING " Failed registering tunable msgmni\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#282: FILE: ipc/shm.c:83:
+	init_tunable_ipcns(ns, shmmni_akt, SHMTHRESH, SHMMNI, IPCMNI,
+		&ns->shm_ctlmni, &ids->in_use, int);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#284: FILE: ipc/shm.c:85:
+	init_tunable_ipcns(ns, shmall_akt, SHMTHRESH, SHMALL,
+		SHMMAX / PAGE_SIZE * (IPCMNI / 16), &ns->shm_ctlall,

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#298: FILE: ipc/shm.c:97:
+		return 0;
+	} else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#311: FILE: ipc/shm.c:142:
+		printk(KERN_WARNING "Failed registering tunable shmmni\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#314: FILE: ipc/shm.c:145:
+		printk(KERN_WARNING "Failed registering tunable shmall\n");

CHECK:BRACES: Unbalanced braces around else statement
#336: FILE: ipc/shm.c:243:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#432: FILE: ipc/sem.c:139:
+	init_tunable_ipcns(ns, semmni_akt, SEMTHRESH, SEMMNI, IPCMNI,
+		&(ns->sc_semmni), &ids->in_use, int);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ns->sc_semmni
#432: FILE: ipc/sem.c:139:
+		&(ns->sc_semmni), &ids->in_use, int);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#434: FILE: ipc/sem.c:141:
+	init_tunable_ipcns(ns, semmns_akt, SEMTHRESH, SEMMNS,
+		IPCMNI * SEMMSL, &(ns->sc_semmns), &ns->used_sems, int);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ns->sc_semmns
#434: FILE: ipc/sem.c:141:
+		IPCMNI * SEMMSL, &(ns->sc_semmns), &ns->used_sems, int);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#444: FILE: ipc/sem.c:183:
+		printk(KERN_WARNING "Failed registering tunable semmni\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#447: FILE: ipc/sem.c:186:
+		printk(KERN_WARNING "Failed registering tunable semmns\n");

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.01359.commit.ff753e86492cf27ce3890fe8a9d2552321d38b1f total: 0 errors, 7 warnings, 15 checks, 425 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.01359.commit.ff753e86492cf27ce3890fe8a9d2552321d38b1f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
