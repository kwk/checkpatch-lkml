WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
I tried awhile ago to raise who was responsible for the code and got nowhere.

WARNING:PATCH_PREFIX: patch prefix 'usr' exists, appears to be a -p0 patch

ERROR:CODE_INDENT: code indent should use tabs where possible
#52: FILE: dash/eval.c:542:
+               if (!lp->next) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#52: FILE: dash/eval.c:542:
+               if (!lp->next) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#52: FILE: dash/eval.c:542:
+               if (!lp->next) {
+                       extern void tempredir0(int prevfd);

ERROR:CODE_INDENT: code indent should use tabs where possible
#53: FILE: dash/eval.c:543:
+                       extern void tempredir0(int prevfd);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#53: FILE: dash/eval.c:543:
+                       extern void tempredir0(int prevfd);$

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#53: FILE: dash/eval.c:543:
+                       extern void tempredir0(int prevfd);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:CODE_INDENT: code indent should use tabs where possible
#54: FILE: dash/eval.c:544:
+                       /* Fix for "bizarre read bug" */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#55: FILE: dash/eval.c:545:
+                       if (prevfd > 0) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#55: FILE: dash/eval.c:545:
+                       if (prevfd > 0) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#55: FILE: dash/eval.c:545:
+                       if (prevfd > 0) {
+                               tempredir0(prevfd);

ERROR:CODE_INDENT: code indent should use tabs where possible
#56: FILE: dash/eval.c:546:
+                               tempredir0(prevfd);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#56: FILE: dash/eval.c:546:
+                               tempredir0(prevfd);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#57: FILE: dash/eval.c:547:
+                               close(prevfd);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#57: FILE: dash/eval.c:547:
+                               close(prevfd);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#58: FILE: dash/eval.c:548:
+                       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#58: FILE: dash/eval.c:548:
+                       }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#59: FILE: dash/eval.c:549:
+                       evaltree(lp->n, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#59: FILE: dash/eval.c:549:
+                       evaltree(lp->n, 0);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#60: FILE: dash/eval.c:550:
+                       if (prevfd > 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#60: FILE: dash/eval.c:550:
+                       if (prevfd > 0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#60: FILE: dash/eval.c:550:
+                       if (prevfd > 0)
+                               popredir(0);

ERROR:CODE_INDENT: code indent should use tabs where possible
#61: FILE: dash/eval.c:551:
+                               popredir(0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#61: FILE: dash/eval.c:551:
+                               popredir(0);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#62: FILE: dash/eval.c:552:
+               } else if (forkshell(jp, lp->n, n->npipe.backgnd) == 0) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#62: FILE: dash/eval.c:552:
+               } else if (forkshell(jp, lp->n, n->npipe.backgnd) == 0) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#62: FILE: dash/eval.c:552:
+               } else if (forkshell(jp, lp->n, n->npipe.backgnd) == 0) {
                        INTON;

WARNING:PATCH_PREFIX: patch prefix 'usr' exists, appears to be a -p0 patch

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#74: FILE: dash/redir.c:315:
+       struct redirtab *sv = redirlist;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#75: FILE: dash/redir.c:316:
+       int i;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#76: FILE: dash/redir.c:317:
+       int i;
+       sv = ckmalloc(sizeof (struct redirtab));

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#76: FILE: dash/redir.c:317:
+       sv = ckmalloc(sizeof (struct redirtab));$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#76: FILE: dash/redir.c:317:
+       sv = ckmalloc(sizeof (struct redirtab));

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#77: FILE: dash/redir.c:318:
+       for (i = 0 ; i < 10 ; i++)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#77: FILE: dash/redir.c:318:
+       for (i = 0 ; i < 10 ; i++)
+               sv->renamed[i] = EMPTY;

ERROR:CODE_INDENT: code indent should use tabs where possible
#78: FILE: dash/redir.c:319:
+               sv->renamed[i] = EMPTY;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#78: FILE: dash/redir.c:319:
+               sv->renamed[i] = EMPTY;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#79: FILE: dash/redir.c:320:
+       sv->next = redirlist;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#80: FILE: dash/redir.c:321:
+       redirlist = sv;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#81: FILE: dash/redir.c:322:
+       INTOFF;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#82: FILE: dash/redir.c:323:
+       sv->renamed[0] = copyfd(0, 10);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#83: FILE: dash/redir.c:324:
+       close(0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#84: FILE: dash/redir.c:325:
+       copyfd(fd, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#85: FILE: dash/redir.c:326:
+       INTON;$

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.68881.commit.ad3d9c5749f87409e338bc738b62bfd60d1db174 total: 12 errors, 33 warnings, 0 checks, 39 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.68881.commit.ad3d9c5749f87409e338bc738b62bfd60d1db174 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
