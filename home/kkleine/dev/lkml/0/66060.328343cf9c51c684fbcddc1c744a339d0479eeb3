WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
Ok, I've addressed all of Randy's and your comments in the patch at appended to

WARNING:TYPO_SPELLING: 'cant' may be misspelled - perhaps 'can't'?
#61: 
yeah, it cant share interrupts well like this.  All I can say is that its no
         ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#118: FILE: drivers/char/riport.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#121: FILE: drivers/char/riport.c:4:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#135: FILE: drivers/char/riport.c:18:
+ *   along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#136: FILE: drivers/char/riport.c:19:
+ *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#137: FILE: drivers/char/riport.c:20:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#146: FILE: drivers/char/riport.c:29:
+ */ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#149: FILE: drivers/char/riport.c:32:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#149: FILE: drivers/char/riport.c:32:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#160: FILE: drivers/char/riport.c:43:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#160: FILE: drivers/char/riport.c:43:
+ $

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#187: FILE: drivers/char/riport.c:70:
+#include <asm/uaccess.h>

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#188: FILE: drivers/char/riport.c:71:
+#include <asm/io.h>

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#194: FILE: drivers/char/riport.c:77:
+#  define PDEBUG(fmt, args...) printk( KERN_DEBUG "riport: " fmt, ## args)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#194: FILE: drivers/char/riport.c:77:
+#  define PDEBUG(fmt, args...) printk( KERN_DEBUG "riport: " fmt, ## args)

ERROR:SPACING: space prohibited after that open parenthesis '('
#194: FILE: drivers/char/riport.c:77:
+#  define PDEBUG(fmt, args...) printk( KERN_DEBUG "riport: " fmt, ## args)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#213: FILE: drivers/char/riport.c:96:
+	unsigned char *pbuf;	/* pointer to the start of the memory that
+				stores scans from the riegl */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#213: FILE: drivers/char/riport.c:96:
+				stores scans from the riegl */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#217: FILE: drivers/char/riport.c:100:
+	unsigned char *pout;	/* pointer to the start of new data (end of
+				old/read data) */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#217: FILE: drivers/char/riport.c:100:
+				old/read data) */

CHECK:CAMELCASE: Avoid CamelCase: <syncWord>
#224: FILE: drivers/char/riport.c:107:
+	short syncWord;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#230: FILE: drivers/char/riport.c:113:
+	spinlock_t lock;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#233: FILE: drivers/char/riport.c:116:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#235: FILE: drivers/char/riport.c:118:
+static struct devriport __init *devriport_init(int major, int minor, unsigned int io, int irq,
+				   int dma, int size, int *presult)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*this)...) over kzalloc(sizeof(struct devriport)...)
#240: FILE: drivers/char/riport.c:123:
+	this = kzalloc(sizeof(struct devriport), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:SPACING: space required after that ',' (ctx:VxV)
#252: FILE: drivers/char/riport.c:135:
+		release_region(io,3);
 		                 ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#254: FILE: drivers/char/riport.c:137:
+		PDEBUG("request_region 0x%X of 3 bytes fails\n", io + ECP_OFFSET );

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#282: FILE: drivers/char/riport.c:165:
+	printk(KERN_NOTICE

ERROR:SPACING: space required after that ',' (ctx:VxV)
#289: FILE: drivers/char/riport.c:172:
+	release_region(io + ECP_OFFSET,3);
 	                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#290: FILE: drivers/char/riport.c:173:
+	release_region(io,3);
 	                 ^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#298: FILE: drivers/char/riport.c:181:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#308: FILE: drivers/char/riport.c:191:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#315: FILE: drivers/char/riport.c:198:
+	outb(ECR_SPP_MODE | ECR_ERRINT_DISABLED | ECR_SERVICE_INTERRUPT,
+		this->io_ext + ECR_EXT);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#327: FILE: drivers/char/riport.c:210:
+
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#341: FILE: drivers/char/riport.c:224:
+	while (free && !(ECR_FIFO_EMPTY & inb(this->io_ext + ECR_EXT))) {
+

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#342: FILE: drivers/char/riport.c:225:
+		if (this->readstate != RPDUMP_TIMESTAMP)
+				*(this->pin++) = inb(this->io_ext + FIFO_EXT);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#354: FILE: drivers/char/riport.c:237:
+			/* due to the magic of the ECP port, it seems that we are
+			 guaranteed to be fed a header from the riegl whenever we call

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#355: FILE: drivers/char/riport.c:238:
+			 riport_open.  this code assumes that is true */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#362: FILE: drivers/char/riport.c:245:
+			/* after 4 bytes, we know the size of the header
+			   the next two bytes are the size of the header */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#362: FILE: drivers/char/riport.c:245:
+			   the next two bytes are the size of the header */

CHECK:BRACES: braces {} should be used on all arms of this statement
#376: FILE: drivers/char/riport.c:259:
+			if (this->numbytesthisstate < 2)
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#380: FILE: drivers/char/riport.c:263:
+			else {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#408: FILE: drivers/char/riport.c:291:
+			 * since we need two bytes to  get the sync */

CHECK:BRACES: Unbalanced braces around else statement
#414: FILE: drivers/char/riport.c:297:
+			else {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#415: FILE: drivers/char/riport.c:298:
+			else {
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#423: FILE: drivers/char/riport.c:306:
+				 * is entered into the data stream */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#438: FILE: drivers/char/riport.c:321:
+			 * from the riegl */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#456: FILE: drivers/char/riport.c:339:
+	 * port in ECP mode and disable error interrupt*/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#460: FILE: drivers/char/riport.c:343:
+		outb(ECR_ECP_MODE | ECR_ERRINT_DISABLED,
+			this->io_ext + ECR_EXT);

ERROR:CODE_INDENT: code indent should use tabs where possible
#462: FILE: drivers/char/riport.c:345:
+^I    ^I/* disable IRQ's */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#462: FILE: drivers/char/riport.c:345:
+^I    ^I/* disable IRQ's */$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#467: FILE: drivers/char/riport.c:350:
+static int devriport_read(struct file * pfile, char *pbuf, int length)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#493: FILE: drivers/char/riport.c:376:
+^Iif (retval) $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#498: FILE: drivers/char/riport.c:381:
+	 * case read from pout and wrap around */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#504: FILE: drivers/char/riport.c:387:
+		 * position in the circular buffer to the end of the buffer */

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#510: FILE: drivers/char/riport.c:393:
+		}
+		else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#510: FILE: drivers/char/riport.c:393:
+		else {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#513: FILE: drivers/char/riport.c:396:
+			 * bytes from the start */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#517: FILE: drivers/char/riport.c:400:
+			count = copy_to_user(pbuf + length1, this->pbuf,
+				length - length1);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#521: FILE: drivers/char/riport.c:404:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#521: FILE: drivers/char/riport.c:404:
+	else {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#523: FILE: drivers/char/riport.c:406:
+		 * the current  read position (this->pout) to the user */

ERROR:SPACING: space required after that ',' (ctx:VxV)
#534: FILE: drivers/char/riport.c:417:
+	spin_unlock_irqrestore(&this->lock,flags);
 	                                  ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#539: FILE: drivers/char/riport.c:422:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#559: FILE: drivers/char/riport.c:442:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#578: FILE: drivers/char/riport.c:461:
+	 * the sync */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#588: FILE: drivers/char/riport.c:471:
+	outb(ECR_SPP_MODE | ECR_ERRINT_DISABLED | ECR_SERVICE_INTERRUPT,
+		 this->io_ext + ECR_EXT);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#590: FILE: drivers/char/riport.c:473:
+	outb(DCR_NOT_REVERSE_REQUEST | DCR_NOT_1284_ACTIVE,
+	      this->io + DCR_BASE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#594: FILE: drivers/char/riport.c:477:
+	outb(ECR_BYTE_MODE | ECR_ERRINT_DISABLED | ECR_SERVICE_INTERRUPT,
+		this->io_ext + ECR_EXT);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#597: FILE: drivers/char/riport.c:480:
+	outb(ECR_ECP_MODE | ECR_ERRINT_DISABLED | ECR_SERVICE_INTERRUPT,
+	      this->io_ext + ECR_EXT);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#602: FILE: drivers/char/riport.c:485:
+		request_irq(this->irq, devriport_irq_wrap, SA_INTERRUPT,
+			"riport", this);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#618: FILE: drivers/char/riport.c:501:
+	this->pbuf_top = this->pbuf = this->pin = this->pout = NULL;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'drvriport_open', this function's name, in a string
#636: FILE: drivers/char/riport.c:519:
+	PDEBUG("drvriport_open\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#654: FILE: drivers/char/riport.c:537:
+static ssize_t drvriport_read(struct file * pfile, char *pbuf, size_t length,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#655: FILE: drivers/char/riport.c:538:
+static ssize_t drvriport_read(struct file * pfile, char *pbuf, size_t length,
+			 loff_t * ppos)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#655: FILE: drivers/char/riport.c:538:
+			 loff_t * ppos)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#658: FILE: drivers/char/riport.c:541:
+	 * try again) */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#674: FILE: drivers/char/riport.c:557:
+
+

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#697: FILE: drivers/char/riport.c:580:
+	if ((result = register_chrdev(major, "riport", &drvriport_fops)) < 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#719: FILE: drivers/char/riport.c:602:
+	class_err = class_device_create(riport_class, NULL,
+		MKDEV(riport.major, 0), NULL, "riport0");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#766: FILE: drivers/char/riport.c:649:
+
+

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.66060.commit.328343cf9c51c684fbcddc1c744a339d0479eeb3 total: 21 errors, 31 warnings, 30 checks, 674 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.66060.commit.328343cf9c51c684fbcddc1c744a339d0479eeb3 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
