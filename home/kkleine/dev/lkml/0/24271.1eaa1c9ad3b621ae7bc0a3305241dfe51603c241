WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#51: FILE: drivers/kvm/kvm_main.c:1656:
+		unsigned offset = addr & (PAGE_SIZE-1);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#51: FILE: drivers/kvm/kvm_main.c:1656:
+		unsigned offset = addr & (PAGE_SIZE-1);
 		                                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#52: FILE: drivers/kvm/kvm_main.c:1657:
+		unsigned tocopy = min(bytes, (unsigned)PAGE_SIZE - offset);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#52: FILE: drivers/kvm/kvm_main.c:1657:
+		unsigned tocopy = min(bytes, (unsigned)PAGE_SIZE - offset);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#82: FILE: drivers/kvm/kvm_main.c:1687:
+	printk(KERN_ERR "emulator_write_std: addr %lx n %d\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'emulator_write_std', this function's name, in a string
#82: FILE: drivers/kvm/kvm_main.c:1687:
+	printk(KERN_ERR "emulator_write_std: addr %lx n %d\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#101: FILE: drivers/kvm/kvm_main.c:1706:
+		return X86EMUL_CONTINUE;
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#101: FILE: drivers/kvm/kvm_main.c:1706:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#103: FILE: drivers/kvm/kvm_main.c:1708:
+		gpa_t gpa = vcpu->mmu.gva_to_gpa(vcpu, addr);
+		if (gpa == UNMAPPED_GVA)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#144: FILE: drivers/kvm/kvm_main.c:1749:
+		printk(KERN_WARNING "kvm: emulating exchange as write\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#161: FILE: drivers/kvm/kvm_main.c:1766:
+	printk(KERN_ERR "emulation failed but !mmio_needed?"

WARNING:SPLIT_STRING: quoted string split across lines
#162: FILE: drivers/kvm/kvm_main.c:1767:
+	printk(KERN_ERR "emulation failed but !mmio_needed?"
+	       " rip %lx %02x %02x %02x %02x\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#275: FILE: drivers/kvm/kvm_main.c:1936:
+	if ((vect_info & VECTORING_INFO_VALID_MASK) &&
+						!is_page_fault(intr_info)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#276: FILE: drivers/kvm/kvm_main.c:1937:
+		printk(KERN_ERR "%s: unexpected, vectoring info 0x%x "

WARNING:SPLIT_STRING: quoted string split across lines
#277: FILE: drivers/kvm/kvm_main.c:1938:
+		printk(KERN_ERR "%s: unexpected, vectoring info 0x%x "
+		       "intr info 0x%x\n", __FUNCTION__, vect_info, intr_info);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#277: FILE: drivers/kvm/kvm_main.c:1938:
+		       "intr info 0x%x\n", __FUNCTION__, vect_info, intr_info);

WARNING:LINE_SPACING: Missing a blank line after declarations
#282: FILE: drivers/kvm/kvm_main.c:1943:
+		int irq = vect_info & VECTORING_INFO_VECTOR_MASK;
+		set_bit(irq, vcpu->irq_pending);

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#306: FILE: drivers/kvm/kvm_main.c:1967:
+		switch (er) {
[...]
+		 case EMULATE_FAIL:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:TABSTOP: Statements should start on a tabstop
#313: FILE: drivers/kvm/kvm_main.c:1974:
+		 case EMULATE_FAIL:

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#314: FILE: drivers/kvm/kvm_main.c:1975:
+			vcpu_printf(vcpu, "%s: emulate fail\n", __FUNCTION__);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#317: FILE: drivers/kvm/kvm_main.c:1978:
+			BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#323: FILE: drivers/kvm/kvm_main.c:1984:
+	    handle_rmode_exception(vcpu, intr_info & INTR_INFO_VECTOR_MASK,
+								error_code))

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#326: FILE: drivers/kvm/kvm_main.c:1987:
+	if ((intr_info & (INTR_INFO_INTR_TYPE_MASK | INTR_INFO_VECTOR_MASK)) == (INTR_TYPE_EXCEPTION | 1)) {

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:LINE_SPACING: Please don't use multiple blank lines
#343: FILE: drivers/kvm/kvm_main.c:2004:
+
+

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#356: FILE: drivers/kvm/kvm_main.c:2017:
+		countr_size = (cs_ar & AR_L_MASK) ? 8:
 		                                     ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#357: FILE: drivers/kvm/kvm_main.c:2018:
+			      (cs_ar & AR_DB_MASK) ? 4: 2;
 			                              ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#367: FILE: drivers/kvm/kvm_main.c:2028:
+		switch (((u8*)&inst)[i]) {

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#380: FILE: drivers/kvm/kvm_main.c:2041:
+			countr_size = (countr_size == 2) ? 4: (countr_size >> 1);
 			                                    ^

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#406: FILE: drivers/kvm/kvm_main.c:2067:
+	kvm_run->io.string_down
+		= (vmcs_readl(GUEST_RFLAGS) & X86_EFLAGS_DF) != 0;

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

CHECK:BRACES: braces {} should be used on all arms of this statement
#409: FILE: drivers/kvm/kvm_main.c:2070:
+	if (kvm_run->io.string) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#413: FILE: drivers/kvm/kvm_main.c:2074:
+	} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#422: FILE: drivers/kvm/kvm_main.c:2083:
+	int instruction_length = vmcs_read32(VM_EXIT_INSTRUCTION_LEN);
+	spin_lock(&vcpu->kvm->lock);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#437: FILE: drivers/kvm/kvm_main.c:2098:
+		vcpu_printf(vcpu, "%s: not supervisor\n", __FUNCTION__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#480: FILE: drivers/kvm/kvm_main.c:2141:
+			printk(KERN_DEBUG "handle_cr: read CR8 "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'handle_cr', this function's name, in a string
#480: FILE: drivers/kvm/kvm_main.c:2141:
+			printk(KERN_DEBUG "handle_cr: read CR8 "

WARNING:SPLIT_STRING: quoted string split across lines
#481: FILE: drivers/kvm/kvm_main.c:2142:
+			printk(KERN_DEBUG "handle_cr: read CR8 "
+			       "cpu erratum AA15\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#498: FILE: drivers/kvm/kvm_main.c:2159:
+	printk(KERN_ERR "kvm: unhandled control register: op %d cr %d\n",

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.24271.commit.1eaa1c9ad3b621ae7bc0a3305241dfe51603c241 total: 5 errors, 24 warnings, 8 checks, 506 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.24271.commit.1eaa1c9ad3b621ae7bc0a3305241dfe51603c241 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
