ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#66: FILE: include/linux/pagemap.h:89:
+extern struct page * find_get_page_nodiscard(struct address_space *mapping,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#66: FILE: include/linux/pagemap.h:89:
+extern struct page * find_get_page_nodiscard(struct address_space *mapping,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#82: FILE: include/linux/swap.h:232:
+extern void __delete_from_swap_cache_nocheck(struct page *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#82: FILE: include/linux/swap.h:232:
+extern void __delete_from_swap_cache_nocheck(struct page *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#106: FILE: mm/filemap.c:607:
+struct page * find_get_page_nodiscard(struct address_space *mapping,

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#119: FILE: mm/filemap.c:620:
+EXPORT_SYMBOL(find_get_page_nodiscard);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:LINE_SPACING: Missing a blank line after declarations
#185: FILE: mm/page-discard.c:158:
+		swp_entry_t entry = { .val = page_private(page) };
+		write_lock_irq(&swapper_space.tree_lock);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#194: FILE: mm/page-discard.c:167:
+ ^I^I__put_page(page);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#194: FILE: mm/page-discard.c:167:
+ ^I^I__put_page(page);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#194: FILE: mm/page-discard.c:167:
+ ^I^I__put_page(page);$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#222: FILE: mm/rmap.c:944:
+static void page_unmap_file(struct page* page)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#246: FILE: mm/rmap.c:987:
+static void page_unmap_anon(struct page* page)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#259: FILE: mm/rmap.c:1000:
+		BUG_ON(try_to_unmap_one(page, vma, address, 0) == SWAP_FAIL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#273: FILE: mm/rmap.c:1014:
+	BUG_ON(!PageLocked(page) || PageReserved(page));

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#343: FILE: mm/swap_state.c:127:
+void inline __delete_from_swap_cache_nocheck(struct page *page)

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.41883.commit.686f974f42188af343d6642716ed7a17bac9683d total: 6 errors, 7 warnings, 2 checks, 277 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.41883.commit.686f974f42188af343d6642716ed7a17bac9683d has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
