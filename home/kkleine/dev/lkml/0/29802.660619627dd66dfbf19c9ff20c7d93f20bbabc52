ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#75: FILE: fs/nfs/internal.h:96:
+extern __be32 * nfs_decode_dirent(__be32 *, struct nfs_entry *, int);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#75: FILE: fs/nfs/internal.h:96:
+extern __be32 * nfs_decode_dirent(__be32 *, struct nfs_entry *, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument '__be32 *' should also have an identifier name
#75: FILE: fs/nfs/internal.h:96:
+extern __be32 * nfs_decode_dirent(__be32 *, struct nfs_entry *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nfs_entry *' should also have an identifier name
#75: FILE: fs/nfs/internal.h:96:
+extern __be32 * nfs_decode_dirent(__be32 *, struct nfs_entry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#75: FILE: fs/nfs/internal.h:96:
+extern __be32 * nfs_decode_dirent(__be32 *, struct nfs_entry *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#80: FILE: fs/nfs/internal.h:100:
+extern __be32 *nfs3_decode_dirent(__be32 *, struct nfs_entry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument '__be32 *' should also have an identifier name
#80: FILE: fs/nfs/internal.h:100:
+extern __be32 *nfs3_decode_dirent(__be32 *, struct nfs_entry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nfs_entry *' should also have an identifier name
#80: FILE: fs/nfs/internal.h:100:
+extern __be32 *nfs3_decode_dirent(__be32 *, struct nfs_entry *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#80: FILE: fs/nfs/internal.h:100:
+extern __be32 *nfs3_decode_dirent(__be32 *, struct nfs_entry *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#85: FILE: fs/nfs/internal.h:104:
+extern __be32 *nfs4_decode_dirent(__be32 *p, struct nfs_entry *entry, int plus);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#128: FILE: fs/nfs/nfs4_fs.h:215:
+extern __be32 *nfs4_decode_dirent(__be32 *p, struct nfs_entry *entry, int plus);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#150: FILE: fs/nfs/nfs4proc.c:165:
+	start = p = kmap_atomic(*readdir->pages, KM_USER0);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:FUNCTION_ARGUMENTS: function definition argument '__be32 *' should also have an identifier name
#176: FILE: include/linux/nfs_xdr.h:814:
+	__be32 *(*decode_dirent)(__be32 *, struct nfs_entry *, int plus);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nfs_entry *' should also have an identifier name
#176: FILE: include/linux/nfs_xdr.h:814:
+	__be32 *(*decode_dirent)(__be32 *, struct nfs_entry *, int plus);

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.29802.commit.660619627dd66dfbf19c9ff20c7d93f20bbabc52 total: 1 errors, 8 warnings, 5 checks, 100 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.29802.commit.660619627dd66dfbf19c9ff20c7d93f20bbabc52 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
