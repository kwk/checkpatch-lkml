WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#36: FILE: Makefile:4:
+EXTRAVERSION = .2
 ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#145: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#150: FILE: arch/s390/lib/div64.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#151: FILE: arch/s390/lib/div64.c:2:
+ *  arch/s390/lib/div64.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#168: FILE: arch/s390/lib/div64.c:19:
+static uint32_t __div64_31(uint64_t *n, uint32_t base)

CHECK:SPACING: No space is necessary after a cast
#172: FILE: arch/s390/lib/div64.c:23:
+	uint32_t *words = (uint32_t *) n;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#172: FILE: arch/s390/lib/div64.c:23:
+	uint32_t *words = (uint32_t *) n;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#173: FILE: arch/s390/lib/div64.c:24:
+	uint32_t tmp;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#187: FILE: arch/s390/lib/div64.c:38:
+	asm volatile(

ERROR:SPACING: space prohibited before that close parenthesis ')'
#189: FILE: arch/s390/lib/div64.c:40:
+		: "+d" (reg2), "+d" (reg3) : "d" (base) : "cc" );

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#203: FILE: arch/s390/lib/div64.c:54:
+	asm volatile(

ERROR:SPACING: space prohibited before that close parenthesis ')'
#216: FILE: arch/s390/lib/div64.c:67:
+		: "d" (base), "2" (1UL) : "cc" );

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#225: FILE: arch/s390/lib/div64.c:76:
+uint32_t __div64_32(uint64_t *n, uint32_t base)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#227: FILE: arch/s390/lib/div64.c:78:
+	uint32_t r;

CHECK:SPACING: No space is necessary after a cast
#236: FILE: arch/s390/lib/div64.c:87:
+	r = __div64_31(n, ((signed) base < 0) ? (base/2) : base);

WARNING:UNSPECIFIED_INT: Prefer 'signed int' to bare use of 'signed'
#236: FILE: arch/s390/lib/div64.c:87:
+	r = __div64_31(n, ((signed) base < 0) ? (base/2) : base);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#236: FILE: arch/s390/lib/div64.c:87:
+	r = __div64_31(n, ((signed) base < 0) ? (base/2) : base);
 	                                             ^

CHECK:SPACING: No space is necessary after a cast
#237: FILE: arch/s390/lib/div64.c:88:
+	if ((signed) base < 0) {

WARNING:UNSPECIFIED_INT: Prefer 'signed int' to bare use of 'signed'
#237: FILE: arch/s390/lib/div64.c:88:
+	if ((signed) base < 0) {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#238: FILE: arch/s390/lib/div64.c:89:
+		uint64_t q = *n;

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#248: FILE: arch/s390/lib/div64.c:99:
+			r += base/2;
 			         ^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's64' over 'int64_t'
#257: FILE: arch/s390/lib/div64.c:108:
+			int64_t rx = r - q;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#278: FILE: arch/s390/lib/div64.c:129:
+uint32_t __div64_32(uint64_t *n, uint32_t base)

CHECK:SPACING: No space is necessary after a cast
#282: FILE: arch/s390/lib/div64.c:133:
+	uint32_t *words = (uint32_t *) n;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#282: FILE: arch/s390/lib/div64.c:133:
+	uint32_t *words = (uint32_t *) n;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#286: FILE: arch/s390/lib/div64.c:137:
+	asm volatile(

ERROR:SPACING: space prohibited before that close parenthesis ')'
#288: FILE: arch/s390/lib/div64.c:139:
+		: "+d" (reg2), "+d" (reg3) : "d" (base) : "cc" );

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#291: FILE: arch/s390/lib/div64.c:142:
+	asm volatile(

ERROR:SPACING: space prohibited before that close parenthesis ')'
#293: FILE: arch/s390/lib/div64.c:144:
+		: "+d" (reg2), "+d" (reg3) : "d" (base) : "cc" );

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#300: FILE: arch/s390/lib/div64.c:151:
+EXPORT_SYMBOL(__div64_32);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "dp->parent->parent"
#310: FILE: arch/sparc64/kernel/central.c:130:
+		    dp->parent->parent != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#413: FILE: arch/sparc64/kernel/pci_common.c:401:
+				printk(KERN_ERR "PCI: Resource collision, "

WARNING:SPLIT_STRING: quoted string split across lines
#414: FILE: arch/sparc64/kernel/pci_common.c:402:
+				printk(KERN_ERR "PCI: Resource collision, "
+				       "region %d "

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#446: FILE: arch/sparc64/kernel/pci_sabre.c:1199:
+static void sabre_pbm_init(struct pci_controller_info *p, struct device_node *dp, u32 dma_start, u32 dma_end)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: No space is necessary after a cast
#482: FILE: arch/sparc64/kernel/pci_sabre.c:1328:
+		rp->start = pbm->mem_space.start + (unsigned long) dma_start;

CHECK:SPACING: No space is necessary after a cast
#483: FILE: arch/sparc64/kernel/pci_sabre.c:1329:
+		rp->end = pbm->mem_space.start + (unsigned long) dma_end - 1UL;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#773: FILE: drivers/char/hw_random/intel-rng.c:99:
+/* AA
+	{ 0x8086, 0x2418, PCI_ANY_ID, PCI_ANY_ID, 0, 0, 0, }, */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#773: FILE: drivers/char/hw_random/intel-rng.c:99:
+	{ 0x8086, 0x2418, PCI_ANY_ID, PCI_ANY_ID, 0, 0, 0, }, */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#776: FILE: drivers/char/hw_random/intel-rng.c:102:
+/* AB
+	{ 0x8086, 0x2428, PCI_ANY_ID, PCI_ANY_ID, 0, 0, 0, }, */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#776: FILE: drivers/char/hw_random/intel-rng.c:102:
+	{ 0x8086, 0x2428, PCI_ANY_ID, PCI_ANY_ID, 0, 0, 0, }, */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#779: FILE: drivers/char/hw_random/intel-rng.c:105:
+/* ??
+	{ 0x8086, 0x2430, PCI_ANY_ID, PCI_ANY_ID, 0, 0, 0, }, */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#779: FILE: drivers/char/hw_random/intel-rng.c:105:
+	{ 0x8086, 0x2430, PCI_ANY_ID, PCI_ANY_ID, 0, 0, 0, }, */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#781: FILE: drivers/char/hw_random/intel-rng.c:107:
+/* BAM, CAM, DBM, FBM, GxM
+	{ 0x8086, 0x2448, PCI_ANY_ID, PCI_ANY_ID, 0, 0, 0, }, */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#781: FILE: drivers/char/hw_random/intel-rng.c:107:
+	{ 0x8086, 0x2448, PCI_ANY_ID, PCI_ANY_ID, 0, 0, 0, }, */

WARNING:TYPO_SPELLING: 'BA' may be misspelled - perhaps 'BY'?
#788: FILE: drivers/char/hw_random/intel-rng.c:114:
+/* BA, CA, DB, Ex, 6300, Fx, 631x/632x, Gx
    ^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#789: FILE: drivers/char/hw_random/intel-rng.c:115:
+/* BA, CA, DB, Ex, 6300, Fx, 631x/632x, Gx
+	{ 0x8086, 0x244e, PCI_ANY_ID, PCI_ANY_ID, 0, 0, 0, }, */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#789: FILE: drivers/char/hw_random/intel-rng.c:115:
+	{ 0x8086, 0x244e, PCI_ANY_ID, PCI_ANY_ID, 0, 0, 0, }, */

WARNING:TYPO_SPELLING: 'BA' may be misspelled - perhaps 'BY'?
#790: FILE: drivers/char/hw_random/intel-rng.c:116:
+	{ 0x8086, 0x2440, PCI_ANY_ID, PCI_ANY_ID, 0, 0, 0, }, /* BA */
 	                                                         ^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#814: FILE: drivers/char/hw_random/intel-rng.c:140:
+/* E
+	{ 0x8086, 0x245e, PCI_ANY_ID, PCI_ANY_ID, 0, 0, 0, }, */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#814: FILE: drivers/char/hw_random/intel-rng.c:140:
+	{ 0x8086, 0x245e, PCI_ANY_ID, PCI_ANY_ID, 0, 0, 0, }, */

WARNING:MISPLACED_INIT: __initdata should be placed after waitflag
#824: FILE: drivers/char/hw_random/intel-rng.c:217:
+static char __initdata waitflag;

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#836: FILE: drivers/char/hw_random/intel-rng.c:229:
+	unsigned i;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mem"
#865: FILE: drivers/char/hw_random/intel-rng.c:256:
+	if (mem == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#881: FILE: drivers/char/hw_random/intel-rng.c:272:
+		printk(KERN_ERR PFX "cannot run on all processors\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#890: FILE: drivers/char/hw_random/intel-rng.c:281:
+^I^I                      fwh_dec_en1_off,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#891: FILE: drivers/char/hw_random/intel-rng.c:282:
+^I^I                      fwh_dec_en1_val | FWH_F8_EN_MASK);$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#893: FILE: drivers/char/hw_random/intel-rng.c:284:
+	      (BIOS_CNTL_LOCK_ENABLE_MASK|BIOS_CNTL_WRITE_ENABLE_MASK)))
 	                                 ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#895: FILE: drivers/char/hw_random/intel-rng.c:286:
+^I^I                      bios_cntl_off,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#896: FILE: drivers/char/hw_random/intel-rng.c:287:
+^I^I                      bios_cntl_val | BIOS_CNTL_WRITE_ENABLE_MASK);$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#905: FILE: drivers/char/hw_random/intel-rng.c:296:
+	      (BIOS_CNTL_LOCK_ENABLE_MASK|BIOS_CNTL_WRITE_ENABLE_MASK)))
 	                                 ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#922: FILE: drivers/char/hw_random/intel-rng.c:313:
+		printk(KERN_ERR PFX "FWH not detected\n");

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#997: FILE: drivers/infiniband/hw/mthca/mthca_cq.c:42:
+#include <asm/io.h>

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#1022: FILE: drivers/infiniband/hw/mthca/mthca_qp.c:42:
+#include <asm/io.h>

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#1073: FILE: drivers/infiniband/hw/mthca/mthca_srq.c:38:
+#include <asm/io.h>

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1215: FILE: drivers/isdn/pcbit/drv.c:737:
+			if (copy_to_user(buf, statbuf + stat_st,
+				       STATBUF_LEN - stat_st))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1218: FILE: drivers/isdn/pcbit/drv.c:740:
+			if (copy_to_user(buf, statbuf,
+				       len - (STATBUF_LEN - stat_st)))

CHECK:CAMELCASE: Avoid CamelCase: <In_sync>
#1278: FILE: drivers/md/raid10.c:2045:
+		    !test_bit(In_sync, &disk->rdev->flags)) {

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!priv->i2c"
#1303: FILE: drivers/media/dvb/frontends/dvb-pll.c:496:
+	if (priv->i2c == NULL)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1405: FILE: drivers/net/sky2.c:681:
+		sky2_write8(hw, SK_REG(port, RX_GMF_LP_THR), 512/8);
 		                                                ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1450: FILE: drivers/net/sky2.c:1088:
+	ramsize = sky2_read8(hw, B2_E_0) * 4096/8;
 	                                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1454: FILE: drivers/net/sky2.c:1090:
+	if (ramsize > 6*1024/8)
 	               ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1454: FILE: drivers/net/sky2.c:1090:
+	if (ramsize > 6*1024/8)
 	                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1461: FILE: drivers/net/sky2.c:1095:
+	sky2_ramset(hw, rxqaddr[port], 0, rxspace-1);
 	                                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1462: FILE: drivers/net/sky2.c:1096:
+	sky2_ramset(hw, txqaddr[port], rxspace, ramsize-1);
 	                                               ^

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#1511: FILE: drivers/net/sky2.c:2739:
+static void inline sky2_add_filter(u8 filter[8], const u8 *addr)

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1557: FILE: drivers/net/sky2.c:3212:
+	init_waitqueue_head (&hw->msi_wait);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1579: FILE: drivers/net/sky2.c:3230:
+		printk(KERN_INFO PFX "%s: No interrupt generated using MSI, "

WARNING:SPLIT_STRING: quoted string split across lines
#1580: FILE: drivers/net/sky2.c:3231:
+		printk(KERN_INFO PFX "%s: No interrupt generated using MSI, "
+		       "switching to INTx mode.\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#1601: FILE: drivers/net/sky2.h:1569:
+^I^I  ^I  GMR_FS_MII_ERR | GMR_FS_GOOD_FC | GMR_FS_BAD_FC |$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1601: FILE: drivers/net/sky2.h:1569:
+^I^I  ^I  GMR_FS_MII_ERR | GMR_FS_GOOD_FC | GMR_FS_BAD_FC |$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1897: FILE: fs/fuse/dir.c:950:
+		struct address_space *mapping = inode->i_mapping;
+		unmap_mapping_range(mapping, offset + PAGE_SIZE - 1, 0, 1);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#2029: FILE: fs/nfs/dir.c:909:
+	if (nfs_is_exclusive_create(dir, nd)) {
 	                                 ^^

CHECK:SPACING: No space is necessary after a cast
#2219: FILE: include/linux/serial_core.h:322:
+#define UIF_SUSPENDED		((__force uif_t) (1 << 30))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2254: FILE: kernel/posix-cpu-timers.c:500:
+		left = cputime_div_non_zero(cputime_sub(expires.cpu, val.cpu),
+				       nthreads);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2265: FILE: kernel/posix-cpu-timers.c:515:
+		left = cputime_div_non_zero(cputime_sub(expires.cpu, val.cpu),
+				       nthreads);

ERROR:CODE_INDENT: code indent should use tabs where possible
#2622: FILE: net/decnet/af_decnet.c:1181:
+^I^I    ^Irelease_sock(sk);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2622: FILE: net/decnet/af_decnet.c:1181:
+^I^I    ^Irelease_sock(sk);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2637: FILE: net/ipv4/tcp_cubic.c:193:
+        t = ((tcp_time_stamp + (ca->delay_min>>3) - ca->epoch_start)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2637: FILE: net/ipv4/tcp_cubic.c:193:
+        t = ((tcp_time_stamp + (ca->delay_min>>3) - ca->epoch_start)$

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#2637: FILE: net/ipv4/tcp_cubic.c:193:
+        t = ((tcp_time_stamp + (ca->delay_min>>3) - ca->epoch_start)
                                              ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2646: FILE: net/ipv4/tcp_cubic.c:262:
+	delay = (tcp_time_stamp - tp->rx_opt.rcv_tsecr)<<3;
 	                                               ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#2730: FILE: sound/core/info.c:123:
+		va_list ap;
+		va_copy(ap, args);

CHECK:CAMELCASE: Avoid CamelCase: <usX2Y>
#2849: FILE: sound/usb/usx2y/usbusx2yaudio.c:325:
+	if (likely(urb->start_frame == usX2Y->wait_iso_frame))

CHECK:CAMELCASE: Avoid CamelCase: <usX2Y_usbframe_complete>
#2864: FILE: sound/usb/usx2y/usbusx2yaudio.c:338:
+			if (!usX2Y_usbframe_complete(capsubs, playbacksubs, urb->start_frame))

CHECK:BRACES: braces {} should be used on all arms of this statement
#2864: FILE: sound/usb/usx2y/usbusx2yaudio.c:338:
+			if (!usX2Y_usbframe_complete(capsubs, playbacksubs, urb->start_frame))
[...]
+			else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#2866: FILE: sound/usb/usx2y/usbusx2yaudio.c:340:
+			else {

CHECK:BRACES: Unbalanced braces around else statement
#2884: FILE: sound/usb/usx2y/usbusx2yaudio.c:514:
+			} else

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#2915: FILE: sound/usb/usx2y/usx2yhwdeppcm.c:259:
+		if (!usX2Y_usbpcm_usbframe_complete(capsubs, capsubs2, playbacksubs, urb->start_frame))

CHECK:CAMELCASE: Avoid CamelCase: <usX2Y_usbpcm_usbframe_complete>
#2915: FILE: sound/usb/usx2y/usx2yhwdeppcm.c:259:
+		if (!usX2Y_usbpcm_usbframe_complete(capsubs, capsubs2, playbacksubs, urb->start_frame))

CHECK:BRACES: braces {} should be used on all arms of this statement
#2915: FILE: sound/usb/usx2y/usx2yhwdeppcm.c:259:
+		if (!usX2Y_usbpcm_usbframe_complete(capsubs, capsubs2, playbacksubs, urb->start_frame))
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2917: FILE: sound/usb/usx2y/usx2yhwdeppcm.c:261:
+		else {

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#2934: FILE: sound/usb/usx2y/usx2yhwdeppcm.c:457:
+						if (u == 0)

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.21529.commit.56723acf332540141c91b074b6000b1f8fa792ae total: 12 errors, 43 warnings, 48 checks, 2394 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.21529.commit.56723acf332540141c91b074b6000b1f8fa792ae has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
