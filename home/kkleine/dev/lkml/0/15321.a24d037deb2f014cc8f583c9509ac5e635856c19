ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#47: 
--- a/include/linux/sched.h

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#81: FILE: ltt/ltt-syscall.c:1:
+/******************************************************************************

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#96: FILE: ltt/ltt-syscall.c:16:
+#include <asm/uaccess.h>

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#100: FILE: ltt/ltt-syscall.c:20:
+static inline int trace_user_event(unsigned int facility_id,
+		unsigned int event_id,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#130: FILE: ltt/ltt-syscall.c:50:
+	 * sizeof(void *) address. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:TYPO_SPELLING: 'reenable' may be misspelled - perhaps 're-enable'?
#144: FILE: ltt/ltt-syscall.c:64:
+		 * threshold value, we reenable preemption and block. */
 		                       ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#144: FILE: ltt/ltt-syscall.c:64:
+		 * threshold value, we reenable preemption and block. */

ERROR:CODE_INDENT: code indent should use tabs where possible
#148: FILE: ltt/ltt-syscall.c:68:
+  ^I^I^I^Icontinue;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#148: FILE: ltt/ltt-syscall.c:68:
+  ^I^I^I^Icontinue;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#148: FILE: ltt/ltt-syscall.c:68:
+  ^I^I^I^Icontinue;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#151: FILE: ltt/ltt-syscall.c:71:
+			if (trace->ops->user_blocking(trace, index, data_size,
+							&dbg))

ERROR:CODE_INDENT: code indent should use tabs where possible
#152: FILE: ltt/ltt-syscall.c:72:
+ ^I^I^I^Igoto block_test_begin;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#152: FILE: ltt/ltt-syscall.c:72:
+ ^I^I^I^Igoto block_test_begin;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#152: FILE: ltt/ltt-syscall.c:72:
+ ^I^I^I^Igoto block_test_begin;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#162: FILE: ltt/ltt-syscall.c:82:
+		buffer = ltt_reserve_slot(trace, channel, &transport_data,
+			reserve_size, &slot_size, &tsc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#172: FILE: ltt/ltt-syscall.c:92:
+		ltt_write_event_header(trace, channel, buffer,
+			facility_id, event_id,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#176: FILE: ltt/ltt-syscall.c:96:
+		 * where it is, the slot will be zeroed and EFAULT returned. */

CHECK:SPACING: spaces preferred around that '+' (ctx:VxO)
#177: FILE: ltt/ltt-syscall.c:97:
+		if (__copy_from_user_inatomic(buffer+*to_base+*to, data,
 		                                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before that '*' (ctx:OxV)
#177: FILE: ltt/ltt-syscall.c:97:
+		if (__copy_from_user_inatomic(buffer+*to_base+*to, data,
 		                                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxO)
#177: FILE: ltt/ltt-syscall.c:97:
+		if (__copy_from_user_inatomic(buffer+*to_base+*to, data,
 		                                             ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#177: FILE: ltt/ltt-syscall.c:97:
+		if (__copy_from_user_inatomic(buffer+*to_base+*to, data,
 		                                              ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#178: FILE: ltt/ltt-syscall.c:98:
+		if (__copy_from_user_inatomic(buffer+*to_base+*to, data,
+					data_size))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#190: FILE: ltt/ltt-syscall.c:110:
+asmlinkage long sys_ltt_trace_generic(unsigned int facility_id,
+		unsigned int event_id,

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#198: FILE: ltt/ltt-syscall.c:118:
+	if (!access_ok(VERIFY_READ, data, data_size))
+			return -EFAULT;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#200: FILE: ltt/ltt-syscall.c:120:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#206: FILE: ltt/ltt-syscall.c:126:
+asmlinkage long sys_ltt_register_generic(unsigned int __user *facility_id,
+		const struct user_facility_info __user *info)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#212: FILE: ltt/ltt-syscall.c:132:
+^I/* Check if the process has already registered the maximum number of $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#213: FILE: ltt/ltt-syscall.c:133:
+	 * allowed facilities */

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#214: FILE: ltt/ltt-syscall.c:134:
+	if (current->ltt_facilities[LTT_FAC_PER_PROCESS-1] != 0)
 	                                               ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#216: FILE: ltt/ltt-syscall.c:136:
+^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#221: FILE: ltt/ltt-syscall.c:141:
+	printk(KERN_DEBUG "LTT register generic for %s\n", kinfo.name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#223: FILE: ltt/ltt-syscall.c:143:
+	fac_id = ltt_facility_verify(LTT_FACILITY_TYPE_USER,
+				kinfo.name,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#231: FILE: ltt/ltt-syscall.c:151:
+^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#232: FILE: ltt/ltt-syscall.c:152:
+	printk(KERN_DEBUG "LTT verify return %d\n", fac_id);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#235: FILE: ltt/ltt-syscall.c:155:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#237: FILE: ltt/ltt-syscall.c:157:
+	fac_id = ltt_facility_register(LTT_FACILITY_TYPE_USER,
+				kinfo.name,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#246: FILE: ltt/ltt-syscall.c:166:
+	printk(KERN_DEBUG "LTT register return %d\n", fac_id);

WARNING:LINE_SPACING: Missing a blank line after declarations
#282: FILE: kernel/exit.c:66:
+			int i;
+			for (i = 0; i < LTT_FAC_PER_PROCESS; i++) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#285: FILE: kernel/exit.c:69:
+				WARN_ON(ltt_facility_unregister(

ERROR:TRAILING_WHITESPACE: trailing whitespace
#306: FILE: kernel/exit.c:930:
+^I$

CHECK:BRACES: braces {} should be used on all arms of this statement
#356: FILE: kernel/fork.c:1155:
+	if (clone_flags & CLONE_THREAD)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#358: FILE: kernel/fork.c:1157:
+	else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#360: FILE: kernel/fork.c:1159:
+		int i;
+		for (i = 0; i < LTT_FAC_PER_PROCESS; i++) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#368: FILE: kernel/fork.c:1167:
+^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#389: FILE: kernel/fork.c:1281:
+			int i;
+			for (i = 0; i < LTT_FAC_PER_PROCESS; i++) {

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#392: FILE: kernel/fork.c:1284:
+				WARN_ON(ltt_facility_unregister(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#405: FILE: kernel/fork.c:1403:
+		MARK(kernel_process_fork, "%d %d %d",
+			current->pid, p->pid, p->tgid);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#416: FILE: include/asm-arm/unistd.h:350:
+#define	__NR_ltt_trace_generic		(__NR_SYSCALL_BASE+322)
        	                      		                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#417: FILE: include/asm-arm/unistd.h:351:
+#define	__NR_ltt_register_generic	(__NR_SYSCALL_BASE+323)
        	                         	                  ^

CHECK:CAMELCASE: Avoid CamelCase: <__NR_Linux>
#443: FILE: include/asm-mips/unistd.h:332:
+#define	__NR_ltt_trace_generic		(__NR_Linux + 309)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <__NR_Linux_syscalls>
#450: FILE: include/asm-mips/unistd.h:338:
+#define __NR_Linux_syscalls		310

CHECK:CAMELCASE: Avoid CamelCase: <__NR_O32_Linux_syscalls>
#456: FILE: include/asm-mips/unistd.h:343:
+#define __NR_O32_Linux_syscalls		310

CHECK:CAMELCASE: Avoid CamelCase: <__NR_64_Linux_syscalls>
#477: FILE: include/asm-mips/unistd.h:630:
+#define __NR_64_Linux_syscalls		269

CHECK:CAMELCASE: Avoid CamelCase: <__NR_N32_Linux_syscalls>
#499: FILE: include/asm-mips/unistd.h:922:
+#define __NR_N32_Linux_syscalls		273

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.15321.commit.a24d037deb2f014cc8f583c9509ac5e635856c19 total: 12 errors, 18 warnings, 24 checks, 452 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.15321.commit.a24d037deb2f014cc8f583c9509ac5e635856c19 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
