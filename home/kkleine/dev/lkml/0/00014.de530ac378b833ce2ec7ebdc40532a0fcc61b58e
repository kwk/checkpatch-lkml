WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#63: FILE: arch/i386/kernel/debugreg.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#75: FILE: arch/i386/kernel/debugreg.c:13:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#76: FILE: arch/i386/kernel/debugreg.c:14:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#155: FILE: arch/i386/kernel/debugreg.c:93:
+unsigned long debugreg7_set_bits(unsigned long old_dr7, int regnum,
+		u8 type, u8 len)

CHECK:BRACES: braces {} should be used on all arms of this statement
#221: FILE: arch/i386/kernel/debugreg.c:159:
+	if (regnum >= 0 && regnum < DR_MAX)
[...]
+	else if (regnum == DR_ANY) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#224: FILE: arch/i386/kernel/debugreg.c:162:
+	else if (regnum == DR_ANY) {
+

CHECK:BRACES: Unbalanced braces around else statement
#234: FILE: arch/i386/kernel/debugreg.c:172:
+	} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#235: FILE: arch/i386/kernel/debugreg.c:173:
+		printk(KERN_ERR "%s: Cannot allocate debug register %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#236: FILE: arch/i386/kernel/debugreg.c:174:
+		printk(KERN_ERR "%s: Cannot allocate debug register %d\n",
+				__FUNCTION__,  regnum);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#236: FILE: arch/i386/kernel/debugreg.c:174:
+				__FUNCTION__,  regnum);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#251: FILE: arch/i386/kernel/debugreg.c:189:
+	if (regnum < 0 || regnum >= DR_MAX ||
+			dr_list[regnum].flag != DR_ALLOC_GLOBAL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#252: FILE: arch/i386/kernel/debugreg.c:190:
+		printk(KERN_ERR "%s: Cannot free debug register %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#253: FILE: arch/i386/kernel/debugreg.c:191:
+		printk(KERN_ERR "%s: Cannot free debug register %d\n",
+				__FUNCTION__,  regnum);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#253: FILE: arch/i386/kernel/debugreg.c:191:
+				__FUNCTION__,  regnum);

WARNING:TYPO_SPELLING: 'succeds' may be misspelled - perhaps 'succeeds'?
#304: FILE: arch/i386/kernel/debugreg.c:242:
+ * a debug register always succeds and it doesn't check the return value of
                            ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:CODE_INDENT: code indent should use tabs where possible
#361: FILE: arch/i386/kernel/process.c:382:
+ ^I^Idebugreg_dec_use_count(tsk->thread.debugreg[7]);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#361: FILE: arch/i386/kernel/process.c:382:
+ ^I^Idebugreg_dec_use_count(tsk->thread.debugreg[7]);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#361: FILE: arch/i386/kernel/process.c:382:
+ ^I^Idebugreg_dec_use_count(tsk->thread.debugreg[7]);$

CHECK:SPACING: No space is necessary after a cast
#436: FILE: arch/i386/kernel/ptrace.c:425:
+			addr -= (long) &dummy->u_debugreg;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#438: FILE: arch/i386/kernel/ptrace.c:427:
+			if (addr < 4) {
[...]
+			else if (addr == 4 || addr == 5)
[...]

CHECK:SPACING: No space is necessary after a cast
#439: FILE: arch/i386/kernel/ptrace.c:428:
+				if ((unsigned long) data >= TASK_SIZE-3)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#439: FILE: arch/i386/kernel/ptrace.c:428:
+				if ((unsigned long) data >= TASK_SIZE-3)
 				                                     ^

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#446: FILE: arch/i386/kernel/ptrace.c:435:
+			}
+			else if (addr == 4 || addr == 5)

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#540: FILE: include/asm-i386/debugreg.h:70:
+extern void set_process_debugreg7(unsigned long new_dr7);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#541: FILE: include/asm-i386/debugreg.h:71:
+extern unsigned long debugreg7_set_bits(unsigned long old_dr7, int regnum,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#542: FILE: include/asm-i386/debugreg.h:72:
+extern unsigned long debugreg7_set_bits(unsigned long old_dr7, int regnum,
+		u8 type, u8 len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#543: FILE: include/asm-i386/debugreg.h:73:
+extern unsigned long debugreg7_clear_bits(unsigned long old_dr7, int regnum);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#544: FILE: include/asm-i386/debugreg.h:74:
+extern int debugreg_global_alloc(int regnum);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#545: FILE: include/asm-i386/debugreg.h:75:
+extern void debugreg_global_free(int regnum);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#546: FILE: include/asm-i386/debugreg.h:76:
+extern void debugreg_inc_use_count(unsigned long mask);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#547: FILE: include/asm-i386/debugreg.h:77:
+extern void debugreg_dec_use_count(unsigned long mask);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#548: FILE: include/asm-i386/debugreg.h:78:
+extern int debugreg_is_global(int regnum);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#549: FILE: include/asm-i386/debugreg.h:79:
+extern int enable_debugreg(unsigned long old_dr7, unsigned long new_dr7);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#557: FILE: include/asm-i386/debugreg.h:87:
+}
+static inline void debugreg_inc_use_count(unsigned long mask)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#560: FILE: include/asm-i386/debugreg.h:90:
+}
+static inline void debugreg_dec_use_count(unsigned long mask)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#563: FILE: include/asm-i386/debugreg.h:93:
+}
+static inline int debugreg_is_global(int regnum)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#567: FILE: include/asm-i386/debugreg.h:97:
+}
+static inline int enable_debugreg(unsigned long old_dr7,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#568: FILE: include/asm-i386/debugreg.h:98:
+static inline int enable_debugreg(unsigned long old_dr7,
+		unsigned long new_dr7)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#580: FILE: arch/i386/kernel/kwatch.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#592: FILE: arch/i386/kernel/kwatch.c:13:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#593: FILE: arch/i386/kernel/kwatch.c:14:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/kdebug.h> instead of <asm/kdebug.h>
#608: FILE: arch/i386/kernel/kwatch.c:29:
+#include <asm/kdebug.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#616: FILE: arch/i386/kernel/kwatch.c:37:
+static unsigned long kwatch_in_progress;	/* bitmap of registers
+							being handled */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#616: FILE: arch/i386/kernel/kwatch.c:37:
+							being handled */

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#620: FILE: arch/i386/kernel/kwatch.c:41:
+	switch (debugreg) {
+		case 0:	set_debugreg(addr, 0);	break;
+		case 1:	set_debugreg(addr, 1);	break;
+		case 2:	set_debugreg(addr, 2);	break;
+		case 3:	set_debugreg(addr, 3);	break;
+		case 6:	set_debugreg(addr, 6);	break;
+		case 7:	set_debugreg(addr, 7);	break;

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#621: FILE: arch/i386/kernel/kwatch.c:42:
+		case 0:	set_debugreg(addr, 0);	break;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#622: FILE: arch/i386/kernel/kwatch.c:43:
+		case 1:	set_debugreg(addr, 1);	break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#623: FILE: arch/i386/kernel/kwatch.c:44:
+		case 2:	set_debugreg(addr, 2);	break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#624: FILE: arch/i386/kernel/kwatch.c:45:
+		case 3:	set_debugreg(addr, 3);	break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#625: FILE: arch/i386/kernel/kwatch.c:46:
+		case 6:	set_debugreg(addr, 6);	break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#626: FILE: arch/i386/kernel/kwatch.c:47:
+		case 7:	set_debugreg(addr, 7);	break;

CHECK:SPACING: No space is necessary after a cast
#640: FILE: arch/i386/kernel/kwatch.c:61:
+	struct dr_info *dr = (struct dr_info *) info;

CHECK:BRACES: braces {} should be used on all arms of this statement
#677: FILE: arch/i386/kernel/kwatch.c:98:
+	if (condition & DR_TRAP0) {
[...]
+	} else if (condition & DR_TRAP1) {
[...]
+	} else if (condition & DR_TRAP2) {
[...]
+	} else if (condition & DR_TRAP3) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#689: FILE: arch/i386/kernel/kwatch.c:110:
+	} else

CHECK:SPACING: No space is necessary after a cast
#703: FILE: arch/i386/kernel/kwatch.c:124:
+	if ((unsigned long) kw->addr == addr) {

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#766: FILE: arch/i386/kernel/kwatch.c:187:
+		/* FALL THROUGH */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

CHECK:SPACING: No space is necessary after a cast
#786: FILE: arch/i386/kernel/kwatch.c:207:
+	write_debugreg((unsigned long) addr, debugreg);

CHECK:SPACING: No space is necessary after a cast
#787: FILE: arch/i386/kernel/kwatch.c:208:
+	sync_debugreg((unsigned long) addr, debugreg, type);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#811: FILE: arch/i386/kernel/kwatch.c:232:
+	if (debugreg < 0 || debugreg >= DR_MAX ||
+			!kwatch_list[debugreg].handler)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#832: FILE: arch/i386/kernel/kwatch.c:253:
+static int kwatch_exceptions_notify(struct notifier_block *self,
+		unsigned long val, void *data)

CHECK:SPACING: No space is necessary after a cast
#834: FILE: arch/i386/kernel/kwatch.c:255:
+	struct die_args *args = (struct die_args *) data;

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#853: FILE: arch/i386/kernel/kwatch.c:274:
+__initcall(init_kwatch);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#871: FILE: include/asm-i386/kwatch.h:1:
+#ifndef _ASM_KWATCH_H

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#886: FILE: include/asm-i386/kwatch.h:16:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#887: FILE: include/asm-i386/kwatch.h:17:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#905: FILE: include/asm-i386/kwatch.h:35:
+ * ^Iprintk(KERN_DEBUG "Watchpoint triggered\n");$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#906: FILE: include/asm-i386/kwatch.h:36:
+ * ^Idump_stack();$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#907: FILE: include/asm-i386/kwatch.h:37:
+ * ^I.......<do anything>........$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#914: FILE: include/asm-i386/kwatch.h:44:
+ * ^I..........<do anything>............$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#915: FILE: include/asm-i386/kwatch.h:45:
+ * ^Idebugreg_num = register_kwatch(&pid_max,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#916: FILE: include/asm-i386/kwatch.h:46:
+ * ^I^I^I 4, KWATCH_TYPE_WRITE, kwatch_handler);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#917: FILE: include/asm-i386/kwatch.h:47:
+ * ^I..........<do anything>............$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#922: FILE: include/asm-i386/kwatch.h:52:
+ * ^I..........<do anything>............$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#923: FILE: include/asm-i386/kwatch.h:53:
+ * ^Iunregister_kwatch(debugreg_num);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#924: FILE: include/asm-i386/kwatch.h:54:
+ * ^I..........<do anything>............$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#930: FILE: include/asm-i386/kwatch.h:60:
+ * ^I# echo 1000 > /proc/sys/kernel/pid_max$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#948: FILE: include/asm-i386/kwatch.h:78:
+#define KWATCH_TYPE_EXECUTE ^I0x0^I/* Watchpoint types */$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#954: FILE: include/asm-i386/kwatch.h:84:
+extern int register_kwatch(void *addr, u8 length, u8 type,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#955: FILE: include/asm-i386/kwatch.h:85:
+extern int register_kwatch(void *addr, u8 length, u8 type,
+		kwatch_handler_t handler);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#956: FILE: include/asm-i386/kwatch.h:86:
+extern void unregister_kwatch(int debugreg);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#961: FILE: include/asm-i386/kwatch.h:91:
+static inline int register_kwatch(void *addr, u8 length, u8 type,
+		kwatch_handler_t handler)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#963: FILE: include/asm-i386/kwatch.h:93:
+	return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#965: FILE: include/asm-i386/kwatch.h:95:
+}
+static inline void unregister_kwatch(int debugreg)

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.00014.commit.de530ac378b833ce2ec7ebdc40532a0fcc61b58e total: 15 errors, 27 warnings, 41 checks, 872 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.00014.commit.de530ac378b833ce2ec7ebdc40532a0fcc61b58e has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
