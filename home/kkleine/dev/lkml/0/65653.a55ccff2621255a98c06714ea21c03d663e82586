CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#95: FILE: arch/m68k/kernel/ints.c:42:
+#include <asm/cacheflush.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#102: FILE: arch/m68k/kernel/ints.c:49:
+extern u32 user_irqhandler_fixup[];

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#103: FILE: arch/m68k/kernel/ints.c:50:
+extern u16 user_irqvec_fixup[];

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#270: FILE: arch/m68k/kernel/ints.c:185:
+	if (irq >= NR_IRQS || !(contr = irq_controller[irq])) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:SPACING: Unnecessary space before function pointer arguments
#282: FILE: arch/m68k/kernel/ints.c:219:
+		irqreturn_t (*handler) (int, void *, struct pt_regs *),

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#292: FILE: arch/m68k/kernel/ints.c:241:
+EXPORT_SYMBOL(request_irq);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#301: FILE: arch/m68k/kernel/ints.c:249:
+	if (irq >= NR_IRQS || !(contr = irq_controller[irq])) {

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#321: FILE: arch/m68k/kernel/ints.c:280:
+EXPORT_SYMBOL(free_irq);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#328: FILE: arch/m68k/kernel/ints.c:287:
+	if (irq >= NR_IRQS || !(contr = irq_controller[irq])) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#329: FILE: arch/m68k/kernel/ints.c:288:
+		printk("%s: Incorrect IRQ %d\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#330: FILE: arch/m68k/kernel/ints.c:289:
+		       __FUNCTION__, irq);

CHECK:BRACES: braces {} should be used on all arms of this statement
#335: FILE: arch/m68k/kernel/ints.c:294:
+	if (irq_depth[irq]) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#340: FILE: arch/m68k/kernel/ints.c:299:
+	} else

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#345: FILE: arch/m68k/kernel/ints.c:304:
+EXPORT_SYMBOL(enable_irq);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#352: FILE: arch/m68k/kernel/ints.c:311:
+	if (irq >= NR_IRQS || !(contr = irq_controller[irq])) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#353: FILE: arch/m68k/kernel/ints.c:312:
+		printk("%s: Incorrect IRQ %d\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#354: FILE: arch/m68k/kernel/ints.c:313:
+		       __FUNCTION__, irq);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#366: FILE: arch/m68k/kernel/ints.c:325:
+EXPORT_SYMBOL(disable_irq);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#418: FILE: arch/m68k/kernel/ints.c:381:
+EXPORT_SYMBOL(irq_canonicalize);

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#431: FILE: arch/m68k/kernel/ints.c:411:
+		seq_printf(p, "%-8s %3u: %10u %s", contr->name, i, kstat_cpu(0).irqs[i], node->devname);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#566: FILE: include/asm-m68k/irq.h:61:
+extern unsigned int irq_canonicalize(unsigned int irq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#567: FILE: include/asm-m68k/irq.h:62:
+extern void enable_irq(unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#567: FILE: include/asm-m68k/irq.h:62:
+extern void enable_irq(unsigned int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#568: FILE: include/asm-m68k/irq.h:63:
+extern void disable_irq(unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#568: FILE: include/asm-m68k/irq.h:63:
+extern void disable_irq(unsigned int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#593: FILE: include/asm-m68k/irq.h:120:
+extern void m68k_setup_auto_interrupt(void (*handler)(unsigned int, struct pt_regs *));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#594: FILE: include/asm-m68k/irq.h:121:
+extern void m68k_setup_user_interrupt(unsigned int vec, unsigned int cnt,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#596: FILE: include/asm-m68k/irq.h:123:
+extern void m68k_setup_irq_controller(struct irq_controller *, unsigned int, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct irq_controller *' should also have an identifier name
#596: FILE: include/asm-m68k/irq.h:123:
+extern void m68k_setup_irq_controller(struct irq_controller *, unsigned int, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#596: FILE: include/asm-m68k/irq.h:123:
+extern void m68k_setup_irq_controller(struct irq_controller *, unsigned int, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#596: FILE: include/asm-m68k/irq.h:123:
+extern void m68k_setup_irq_controller(struct irq_controller *, unsigned int, unsigned int);

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.65653.commit.a55ccff2621255a98c06714ea21c03d663e82586 total: 4 errors, 18 warnings, 9 checks, 537 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.65653.commit.a55ccff2621255a98c06714ea21c03d663e82586 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
