WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#59: 
http://www.bullopensource.org/posix/pi-futex/glibc_pth_broadcast_c_file.diff

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#133: FILE: kernel/futex.c:139:
+	/* This waiter is used in case of requeue from a
+	   normal futex to a PI-futex */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#133: FILE: kernel/futex.c:139:
+	   normal futex to a PI-futex */

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#150: FILE: kernel/futex.c:270:
+		uaddr = (void*)((key->shared.pgoff << PAGE_SHIFT)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#154: FILE: kernel/futex.c:274:
+		uaddr = (void*)(key->private.address + key->private.offset);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#317: FILE: kernel/futex.c:737:
+	if (!(curval & FUTEX_TID_MASK)
+	    || lookup_pi_state(curval, hb, key, pi_state)) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#319: FILE: kernel/futex.c:739:
+		/* the futex has no owner (yet) or the lookup failed:
+		   allocate one pi_state without owner */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#319: FILE: kernel/futex.c:739:
+		   allocate one pi_state without owner */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cmpval"
#372: FILE: kernel/futex.c:792:
+	if (likely(cmpval != NULL)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#403: FILE: kernel/futex.c:823:
+		if (!match_futex (&this->key, &key1))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#411: FILE: kernel/futex.c:831:
+			if (!pi_state2) {
[...]
+			} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#427: FILE: kernel/futex.c:847:
+			} else

CHECK:LINE_SPACING: Please don't use multiple blank lines
#430: FILE: kernel/futex.c:850:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#450: FILE: kernel/futex.c:870:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#470: FILE: kernel/futex.c:890:
+	/* If we've requeued some tasks and the top_waiter of the rt_mutex
+	   has changed, we must adjust the priority of the owner, if any */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#470: FILE: kernel/futex.c:890:
+	   has changed, we must adjust the priority of the owner, if any */

WARNING:LINE_SPACING: Missing a blank line after declarations
#473: FILE: kernel/futex.c:893:
+		struct task_struct *owner = rt_mutex_owner(lock2);
+		if (owner &&

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#473: FILE: kernel/futex.c:893:
+		if (owner &&

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#534: FILE: kernel/futex.c:1285:
+static void unqueue_me_pi(struct futex_q *q)
  {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#564: FILE: kernel/futex.c:1315:
+	if (pi_state->owner != NULL) {
[...]
+	} else
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pi_state->owner"
#564: FILE: kernel/futex.c:1315:
+	if (pi_state->owner != NULL) {

CHECK:BRACES: Unbalanced braces around else statement
#569: FILE: kernel/futex.c:1320:
+	} else

ERROR:CODE_INDENT: code indent should use tabs where possible
#594: FILE: kernel/futex.c:1345:
+ ^I^I^Iret = -EFAULT;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#594: FILE: kernel/futex.c:1345:
+ ^I^I^Iret = -EFAULT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#594: FILE: kernel/futex.c:1345:
+ ^I^I^Iret = -EFAULT;$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#653: FILE: kernel/futex.c:1499:
+		if (unlikely(q.waiter.task)) {
+			remove_waiter(lock, &q.waiter, flags);
+		}

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#679: FILE: kernel/futex.c:1525:
+			/* mmap_sem and hash_bucket lock are unlocked at
+			   return of this function */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#679: FILE: kernel/futex.c:1525:
+			   return of this function */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#724: FILE: kernel/futex.c:1582:
+		if (match_futex (&this->key, key)) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#730: FILE: kernel/futex.c:1588:
+	BUG_ON(!pi_state);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:BRACES: Unbalanced braces around else statement
#808: FILE: kernel/futex.c:1700:
+	} else

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#810: FILE: kernel/futex.c:1702:
+		/* Set the WAITERS flag, so the owner will know it has someone
+		   to wake at next unlock */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#810: FILE: kernel/futex.c:1702:
+		   to wake at next unlock */

CHECK:BRACES: Unbalanced braces around else statement
#879: FILE: kernel/futex.c:1789:
+	else {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#917: FILE: kernel/futex.c:3205:
+	if (op == FUTEX_REQUEUE || op == FUTEX_CMP_REQUEUE
+	    || op == FUTEX_CMP_REQUEUE_PI)

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#930: FILE: kernel/rtmutex.c:59:
+void
  rt_mutex_set_owner(struct rt_mutex *lock, struct task_struct *owner,
  		   unsigned long mask)
  {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#969: FILE: kernel/rtmutex.c:120:
+void __rt_mutex_adjust_prio(struct task_struct *task)
  {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#982: FILE: kernel/rtmutex.c:156:
+int rt_mutex_adjust_prio_chain(struct task_struct *task,
+			       int deadlock_detect,
+			       struct rt_mutex *orig_lock,
+			       struct rt_mutex_waiter *orig_waiter,
+			       struct task_struct *top_task)
  {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#997: FILE: kernel/rtmutex.c:521:
+void remove_waiter(struct rt_mutex *lock,
+		   struct rt_mutex_waiter *waiter,
+		   unsigned long flags)
  {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1015: FILE: kernel/rtmutex_common.h:120:
+# define rt_mutex_cmpxchg(l,c,n)	(cmpxchg(&l->owner, c, n) == c)
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1015: FILE: kernel/rtmutex_common.h:120:
+# define rt_mutex_cmpxchg(l,c,n)	(cmpxchg(&l->owner, c, n) == c)
                              ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'l' may be better as '(l)' to avoid precedence issues
#1015: FILE: kernel/rtmutex_common.h:120:
+# define rt_mutex_cmpxchg(l,c,n)	(cmpxchg(&l->owner, c, n) == c)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c' - possible side-effects?
#1015: FILE: kernel/rtmutex_common.h:120:
+# define rt_mutex_cmpxchg(l,c,n)	(cmpxchg(&l->owner, c, n) == c)

CHECK:SPACING: No space is necessary after a cast
#1018: FILE: kernel/rtmutex_common.h:123:
+	unsigned long owner, *p = (unsigned long *) &lock->owner;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1026: FILE: kernel/rtmutex_common.h:131:
+# define rt_mutex_cmpxchg(l,c,n)	(0)
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1026: FILE: kernel/rtmutex_common.h:131:
+# define rt_mutex_cmpxchg(l,c,n)	(0)
                              ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1043: FILE: kernel/rtmutex_common.h:148:
+extern void rt_mutex_set_owner(struct rt_mutex *lock, struct task_struct *owner,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1045: FILE: kernel/rtmutex_common.h:150:
+extern void __rt_mutex_adjust_prio(struct task_struct *task);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1046: FILE: kernel/rtmutex_common.h:151:
+extern int rt_mutex_adjust_prio_chain(struct task_struct *task,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1051: FILE: kernel/rtmutex_common.h:156:
+extern void remove_waiter(struct rt_mutex *lock,

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1065: FILE: kernel/futex_compat.c:154:
+	if (op == FUTEX_REQUEUE || op == FUTEX_CMP_REQUEUE
+	    || op == FUTEX_CMP_REQUEUE_PI)

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.09663.commit.4c7a344836ff81474ad0146fbba8093fb4e01580 total: 13 errors, 18 warnings, 20 checks, 929 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.09663.commit.4c7a344836ff81474ad0146fbba8093fb4e01580 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
