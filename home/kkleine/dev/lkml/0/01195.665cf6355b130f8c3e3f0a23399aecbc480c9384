WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#41: 
> > immediate operand and thus avoiding a d-cache hit. The only real caveat is

CHECK:UNCOMMENTED_DEFINITION: DEFINE_MUTEX definition without comment
#107: FILE: arch/i386/kernel/kprobes.c:758:
+DEFINE_MUTEX(kprobe_xmc_mutex);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#115: FILE: arch/i386/kernel/kprobes.c:766:
+static void xmc_handler_post(struct kprobe *p, struct pt_regs *regs,
+	unsigned long flags)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#129: FILE: arch/i386/kernel/kprobes.c:780:
+/* Think of it as a memcpy of new into address with safety with regard to $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#132: FILE: arch/i386/kernel/kprobes.c:783:
+ * same size as the original instruction. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#136: FILE: arch/i386/kernel/kprobes.c:787:
+	char *dest = (char*)address;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#153: FILE: arch/i386/kernel/kprobes.c:804:
+		sym_name = kallsyms_lookup((unsigned long)address,
+				&sym_size, &sym_offs,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#155: FILE: arch/i386/kernel/kprobes.c:806:
+		printk("register_kprobe failed for %p in %s:%s returned %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#156: FILE: arch/i386/kernel/kprobes.c:807:
+		printk("register_kprobe failed for %p in %s:%s returned %d\n",
+			address, modname?modname:"kernel", sym_name, ret);

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#156: FILE: arch/i386/kernel/kprobes.c:807:
+			address, modname?modname:"kernel", sym_name, ret);
 			                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#156: FILE: arch/i386/kernel/kprobes.c:807:
+			address, modname?modname:"kernel", sym_name, ret);
 			                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#160: FILE: arch/i386/kernel/kprobes.c:811:
+	memcpy(dest+1, newi+1, size-1);
 	           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#160: FILE: arch/i386/kernel/kprobes.c:811:
+	memcpy(dest+1, newi+1, size-1);
 	                   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#160: FILE: arch/i386/kernel/kprobes.c:811:
+	memcpy(dest+1, newi+1, size-1);
 	                           ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#164: FILE: arch/i386/kernel/kprobes.c:815:
+	BUG_ON(ret != 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:DEFINE_ARCH_HAS: #define of 'ARCH_HAS_XMC' is wrong - use Kconfig variables or standard guards instead
#194: FILE: include/asm-i386/kprobes.h:94:
+#define ARCH_HAS_XMC

The ARCH_HAS_xyz and ARCH_HAVE_xyz patterns are wrong.

For big conceptual features use Kconfig symbols instead.  And for
smaller things where we have compatibility fallback functions but
want architectures able to override them with optimized ones, we
should either use weak functions (appropriate for some cases), or
the symbol that protects them should be the same symbol we use.

See: https://lore.kernel.org/lkml/CA+55aFycQ9XJvEOsiM3txHL5bjUc8CeKWJNR_H+MiicaddB42Q@mail.gmail.com/

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#234: FILE: include/linux/kprobes.h:208:
+ * a single instruction. Safe for Intel PIII erratum 49. */

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#259: FILE: kernel/Kconfig.marker:11:
+config MARKERS_ENABLE_OPTIMIZATION
+	bool "Enable marker optimization (EXPERIMENTAL)"
+	depends MARKERS
+	select KPROBES
 	default n
 	help
 	  Disable code replacement jump optimisations. Especially useful if your
+++ b/kernel/kprobes.c
+++ b/kernel/kprobes.c

Kconfig symbols should have a help text which fully describes
it.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#335: FILE: kernel/kprobes.c:813:
+ * (writing at most an aligned long). */

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#339: FILE: kernel/kprobes.c:817:
+		printk("Limited XMC : cannot overwrite instructions bigger "\

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#339: FILE: kernel/kprobes.c:817:
+		printk("Limited XMC : cannot overwrite instructions bigger "\

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#345: FILE: kernel/kprobes.c:823:
+		printk("Limited XMC : cannot write %d bytes unaligned "\

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#345: FILE: kernel/kprobes.c:823:
+		printk("Limited XMC : cannot write %d bytes unaligned "\

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#376: FILE: kernel/module.c:317:
+	char newi[MARK_ENABLE_IMMEDIATE_OFFSET+1];
 	                                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#378: FILE: kernel/module.c:319:
+	memcpy(newi, address, MARK_ENABLE_IMMEDIATE_OFFSET+1);
 	                                                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#380: FILE: kernel/module.c:321:
+	return kprobe_xmc(address, newi, MARK_ENABLE_IMMEDIATE_OFFSET+1);
 	                                                             ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#391: FILE: kernel/module.c:332:
+ * the state is always coherent. */

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.01195.commit.665cf6355b130f8c3e3f0a23399aecbc480c9384 total: 3 errors, 12 warnings, 12 checks, 359 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.01195.commit.665cf6355b130f8c3e3f0a23399aecbc480c9384 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
