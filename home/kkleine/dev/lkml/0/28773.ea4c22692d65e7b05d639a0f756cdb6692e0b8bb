WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#60: FILE: lib/Kconfig.debug:476:
+config FAULT_INJECTION_DEBUG_FS
+	bool "debugfs entries for fault-injection capabilities"
+	depends on FAULT_INJECTION && SYSFS
+	select DEBUG_FS
+	help
+	  This option enables to configure fault-injection capabilities via
+	  debugfs entries.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#85: FILE: include/linux/fault-inject.h:1:
+#ifndef _LINUX_FAULT_INJECT_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#92: FILE: include/linux/fault-inject.h:8:
+#include <asm/atomic.h>

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#159: FILE: lib/fault-inject.c:1:
+#include <linux/kernel.h>

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#177: FILE: lib/fault-inject.c:19:
+	if (sscanf(str, "%lu,%lu,%d,%d",
+			&interval, &probability, &space, &times) < 4) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#178: FILE: lib/fault-inject.c:20:
+		printk(KERN_WARNING

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#191: FILE: lib/fault-inject.c:33:
+#define failure_probability(attr)	(attr)->probability

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#192: FILE: lib/fault-inject.c:34:
+#define failure_interval(attr)		(attr)->interval

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#193: FILE: lib/fault-inject.c:35:
+#define max_failures(attr)		(attr)->times

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#194: FILE: lib/fault-inject.c:36:
+#define current_space(attr)		(attr)->space

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#201: FILE: lib/fault-inject.c:43:
+	rand_seed = rand_seed * 690690L+1;
 	                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#214: FILE: lib/fault-inject.c:56:
+		printk(KERN_NOTICE "FAULT_INJECTION: forcing a failure\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#269: FILE: lib/fault-inject.c:111:
+static struct dentry *debugfs_create_ul(const char *name, mode_t mode,
+				struct dentry *parent, unsigned long *value)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#288: FILE: lib/fault-inject.c:130:
+static struct dentry *debugfs_create_atomic_t(const char *name, mode_t mode,
+				struct dentry *parent, atomic_t *value)

WARNING:NEEDLESS_IF: debugfs_remove(NULL) is safe and this check is probably not required
#297: FILE: lib/fault-inject.c:139:
+		if (attr->entries.probability_file) {
+			debugfs_remove(attr->entries.probability_file);

WARNING:NEEDLESS_IF: debugfs_remove(NULL) is safe and this check is probably not required
#301: FILE: lib/fault-inject.c:143:
+		if (attr->entries.interval_file) {
+			debugfs_remove(attr->entries.interval_file);

WARNING:NEEDLESS_IF: debugfs_remove(NULL) is safe and this check is probably not required
#305: FILE: lib/fault-inject.c:147:
+		if (attr->entries.times_file) {
+			debugfs_remove(attr->entries.times_file);

WARNING:NEEDLESS_IF: debugfs_remove(NULL) is safe and this check is probably not required
#309: FILE: lib/fault-inject.c:151:
+		if (attr->entries.space_file) {
+			debugfs_remove(attr->entries.space_file);

WARNING:NEEDLESS_IF: debugfs_remove(NULL) is safe and this check is probably not required
#313: FILE: lib/fault-inject.c:155:
+		if (attr->entries.verbose_file) {
+			debugfs_remove(attr->entries.verbose_file);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#323: FILE: lib/fault-inject.c:165:
+	mode_t mode = S_IFREG | S_IRUSR | S_IWUSR;

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.28773.commit.ea4c22692d65e7b05d639a0f756cdb6692e0b8bb total: 4 errors, 12 warnings, 4 checks, 298 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.28773.commit.ea4c22692d65e7b05d639a0f756cdb6692e0b8bb has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
