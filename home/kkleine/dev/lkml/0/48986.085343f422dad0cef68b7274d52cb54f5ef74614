WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
addition, it is now possible to determine if a particular NMI was the result

WARNING:BAD_SIGN_OFF: Use a single space after Signed-off-by:
#32: 
Signed-off-by:  Don Zickus <dzickus@redhat.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#97: FILE: arch/x86_64/kernel/nmi.c:77:
+};
+static DEFINE_PER_CPU(struct nmi_watchdog_ctlblk, nmi_watchdog_ctlblk);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nmi_watchdog == NMI_NONE'
#133: FILE: arch/x86_64/kernel/nmi.c:220:
+	if ((nmi_watchdog == NMI_NONE) || (nmi_watchdog == NMI_DEFAULT))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nmi_watchdog == NMI_DEFAULT'
#133: FILE: arch/x86_64/kernel/nmi.c:220:
+	if ((nmi_watchdog == NMI_NONE) || (nmi_watchdog == NMI_DEFAULT))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nmi >= NMI_INVALID'
#176: FILE: arch/x86_64/kernel/nmi.c:285:
+	if ((nmi >= NMI_INVALID) || (nmi < NMI_NONE))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nmi < NMI_NONE'
#176: FILE: arch/x86_64/kernel/nmi.c:285:
+	if ((nmi >= NMI_INVALID) || (nmi < NMI_NONE))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nmi == NMI_LOCAL_APIC'
#179: FILE: arch/x86_64/kernel/nmi.c:288:
+	if ((nmi == NMI_LOCAL_APIC) && (nmi_known_cpu() == 0))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#189: FILE: arch/x86_64/kernel/nmi.c:298:
+	BUG_ON(nmi_watchdog != NMI_LOCAL_APIC);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#210: FILE: arch/x86_64/kernel/nmi.c:305:
+	BUG_ON(atomic_read(&nmi_active) != 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#220: FILE: arch/x86_64/kernel/nmi.c:310:
+	BUG_ON(nmi_watchdog != NMI_LOCAL_APIC);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#240: FILE: arch/x86_64/kernel/nmi.c:353:
+	BUG_ON(nmi_watchdog != NMI_IO_APIC);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#251: FILE: arch/x86_64/kernel/nmi.c:361:
+	BUG_ON(atomic_read(&nmi_active) != 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#258: FILE: arch/x86_64/kernel/nmi.c:366:
+	BUG_ON(nmi_watchdog != NMI_IO_APIC);

ERROR:SPACING: space prohibited after that open parenthesis '('
#296: FILE: arch/x86_64/kernel/nmi.c:414:
+	if ( atomic_read(&nmi_active) < 0 )

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that close parenthesis ')'
#296: FILE: arch/x86_64/kernel/nmi.c:414:
+	if ( atomic_read(&nmi_active) < 0 )

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#310: FILE: arch/x86_64/kernel/nmi.c:433:
+/* Note that these events don't tick when the CPU idles. This means
+   the frequency varies with CPU load. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#310: FILE: arch/x86_64/kernel/nmi.c:433:
+   the frequency varies with CPU load. */

CHECK:BIT_MACRO: Prefer using the BIT macro
#312: FILE: arch/x86_64/kernel/nmi.c:435:
+#define K7_EVNTSEL_ENABLE	(1 << 22)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#313: FILE: arch/x86_64/kernel/nmi.c:436:
+#define K7_EVNTSEL_INT		(1 << 20)

CHECK:BIT_MACRO: Prefer using the BIT macro
#314: FILE: arch/x86_64/kernel/nmi.c:437:
+#define K7_EVNTSEL_OS		(1 << 17)

CHECK:BIT_MACRO: Prefer using the BIT macro
#315: FILE: arch/x86_64/kernel/nmi.c:438:
+#define K7_EVNTSEL_USR		(1 << 16)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#362: FILE: arch/x86_64/kernel/nmi.c:476:
+	wd->check_bit = 1ULL<<63;
 	                    ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#385: FILE: arch/x86_64/kernel/nmi.c:497:
+/* Note that these events don't tick when the CPU idles. This means
+   the frequency varies with CPU load. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#385: FILE: arch/x86_64/kernel/nmi.c:497:
+   the frequency varies with CPU load. */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#387: FILE: arch/x86_64/kernel/nmi.c:499:
+#define MSR_P4_MISC_ENABLE_PERF_AVAIL	(1<<7)
                                      	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#387: FILE: arch/x86_64/kernel/nmi.c:499:
+#define MSR_P4_MISC_ENABLE_PERF_AVAIL	(1<<7)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#388: FILE: arch/x86_64/kernel/nmi.c:500:
+#define P4_ESCR_EVENT_SELECT(N)	((N)<<25)
                                	    ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#389: FILE: arch/x86_64/kernel/nmi.c:501:
+#define P4_ESCR_OS		(1<<3)
                   		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#389: FILE: arch/x86_64/kernel/nmi.c:501:
+#define P4_ESCR_OS		(1<<3)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#390: FILE: arch/x86_64/kernel/nmi.c:502:
+#define P4_ESCR_USR		(1<<2)
                    		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#390: FILE: arch/x86_64/kernel/nmi.c:502:
+#define P4_ESCR_USR		(1<<2)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#391: FILE: arch/x86_64/kernel/nmi.c:503:
+#define P4_CCCR_OVF_PMI0	(1<<26)
                         	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#391: FILE: arch/x86_64/kernel/nmi.c:503:
+#define P4_CCCR_OVF_PMI0	(1<<26)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#392: FILE: arch/x86_64/kernel/nmi.c:504:
+#define P4_CCCR_OVF_PMI1	(1<<27)
                         	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#392: FILE: arch/x86_64/kernel/nmi.c:504:
+#define P4_CCCR_OVF_PMI1	(1<<27)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#393: FILE: arch/x86_64/kernel/nmi.c:505:
+#define P4_CCCR_THRESHOLD(N)	((N)<<20)
                             	    ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#394: FILE: arch/x86_64/kernel/nmi.c:506:
+#define P4_CCCR_COMPLEMENT	(1<<19)
                           	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#394: FILE: arch/x86_64/kernel/nmi.c:506:
+#define P4_CCCR_COMPLEMENT	(1<<19)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#395: FILE: arch/x86_64/kernel/nmi.c:507:
+#define P4_CCCR_COMPARE		(1<<18)
                        		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#395: FILE: arch/x86_64/kernel/nmi.c:507:
+#define P4_CCCR_COMPARE		(1<<18)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#396: FILE: arch/x86_64/kernel/nmi.c:508:
+#define P4_CCCR_REQUIRED	(3<<16)
                         	  ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#397: FILE: arch/x86_64/kernel/nmi.c:509:
+#define P4_CCCR_ESCR_SELECT(N)	((N)<<13)
                               	    ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#398: FILE: arch/x86_64/kernel/nmi.c:510:
+#define P4_CCCR_ENABLE		(1<<12)
                       		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#398: FILE: arch/x86_64/kernel/nmi.c:510:
+#define P4_CCCR_ENABLE		(1<<12)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#399: FILE: arch/x86_64/kernel/nmi.c:511:
+#define P4_CCCR_OVF ^I^I(1<<31)$

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#399: FILE: arch/x86_64/kernel/nmi.c:511:
+#define P4_CCCR_OVF 		(1<<31)
                     		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#399: FILE: arch/x86_64/kernel/nmi.c:511:
+#define P4_CCCR_OVF 		(1<<31)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#401: FILE: arch/x86_64/kernel/nmi.c:513:
+/* Set up IQ_COUNTER0 to behave like a clock, by having IQ_CCCR0 filter
+   CRU_ESCR0 (with any non-null event selector) through a complemented

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#402: FILE: arch/x86_64/kernel/nmi.c:514:
+   max threshold. [IA32-Vol3, Section 14.9.9] */

ERROR:CODE_INDENT: code indent should use tabs where possible
#426: FILE: arch/x86_64/kernel/nmi.c:533:
+        ^Iebx = cpuid_ebx(1);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#426: FILE: arch/x86_64/kernel/nmi.c:533:
+        ^Iebx = cpuid_ebx(1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#426: FILE: arch/x86_64/kernel/nmi.c:533:
+        ^Iebx = cpuid_ebx(1);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#427: FILE: arch/x86_64/kernel/nmi.c:534:
+^I        apicid = (ebx >> 24) & 0xff;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#428: FILE: arch/x86_64/kernel/nmi.c:535:
+        ^Iht_num = apicid & 1;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#428: FILE: arch/x86_64/kernel/nmi.c:535:
+        ^Iht_num = apicid & 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#428: FILE: arch/x86_64/kernel/nmi.c:535:
+        ^Iht_num = apicid & 1;$

CHECK:BRACES: Unbalanced braces around else statement
#429: FILE: arch/x86_64/kernel/nmi.c:536:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#465: FILE: arch/x86_64/kernel/nmi.c:566:
+^I ^I| P4_ESCR_OS$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#465: FILE: arch/x86_64/kernel/nmi.c:566:
+^I ^I| P4_ESCR_OS$

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#484: FILE: arch/x86_64/kernel/nmi.c:584:
+	wd->check_bit = 1ULL<<39;
 	                    ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nmi_watchdog != NMI_LOCAL_APIC'
#521: FILE: arch/x86_64/kernel/nmi.c:606:
+	if ((nmi_watchdog != NMI_LOCAL_APIC) &&
+	    (nmi_watchdog != NMI_IO_APIC))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nmi_watchdog != NMI_IO_APIC'
#521: FILE: arch/x86_64/kernel/nmi.c:606:
+	if ((nmi_watchdog != NMI_LOCAL_APIC) &&
+	    (nmi_watchdog != NMI_IO_APIC))

ERROR:CODE_INDENT: code indent should use tabs where possible
#523: FILE: arch/x86_64/kernel/nmi.c:608:
+^I    ^Ireturn;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#523: FILE: arch/x86_64/kernel/nmi.c:608:
+^I    ^Ireturn;$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nmi_watchdog != NMI_LOCAL_APIC'
#551: FILE: arch/x86_64/kernel/nmi.c:633:
+	if ((nmi_watchdog != NMI_LOCAL_APIC) &&
+	    (nmi_watchdog != NMI_IO_APIC))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nmi_watchdog != NMI_IO_APIC'
#551: FILE: arch/x86_64/kernel/nmi.c:633:
+	if ((nmi_watchdog != NMI_LOCAL_APIC) &&
+	    (nmi_watchdog != NMI_IO_APIC))

ERROR:CODE_INDENT: code indent should use tabs where possible
#553: FILE: arch/x86_64/kernel/nmi.c:635:
+^I    ^Ireturn;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#553: FILE: arch/x86_64/kernel/nmi.c:635:
+^I    ^Ireturn;$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#614: FILE: arch/x86_64/kernel/nmi.c:717:
+		if (local_read(&__get_cpu_var(alert_counter)) == 5*nmi_hz)
 		                                                  ^

ERROR:SPACING: space required before the open brace '{'
#639: FILE: arch/x86_64/kernel/nmi.c:728:
+			if (dummy & wd->check_bit){

ERROR:CODE_INDENT: code indent should use tabs where possible
#645: FILE: arch/x86_64/kernel/nmi.c:734:
+^I ^I^Iif (wd->cccr_msr != 0) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#645: FILE: arch/x86_64/kernel/nmi.c:734:
+^I ^I^Iif (wd->cccr_msr != 0) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#646: FILE: arch/x86_64/kernel/nmi.c:735:
+^I ^I^I^I/*$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#646: FILE: arch/x86_64/kernel/nmi.c:735:
+^I ^I^I^I/*$

ERROR:CODE_INDENT: code indent should use tabs where possible
#647: FILE: arch/x86_64/kernel/nmi.c:736:
+^I ^I^I^I * P4 quirks:$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#647: FILE: arch/x86_64/kernel/nmi.c:736:
+^I ^I^I^I * P4 quirks:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#648: FILE: arch/x86_64/kernel/nmi.c:737:
+^I ^I^I^I * - An overflown perfctr will assert its interrupt$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#648: FILE: arch/x86_64/kernel/nmi.c:737:
+^I ^I^I^I * - An overflown perfctr will assert its interrupt$

ERROR:CODE_INDENT: code indent should use tabs where possible
#649: FILE: arch/x86_64/kernel/nmi.c:738:
+^I ^I^I^I *   until the OVF flag in its CCCR is cleared.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#649: FILE: arch/x86_64/kernel/nmi.c:738:
+^I ^I^I^I *   until the OVF flag in its CCCR is cleared.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#650: FILE: arch/x86_64/kernel/nmi.c:739:
+^I ^I^I^I * - LVTPC is masked on interrupt and must be$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#650: FILE: arch/x86_64/kernel/nmi.c:739:
+^I ^I^I^I * - LVTPC is masked on interrupt and must be$

ERROR:CODE_INDENT: code indent should use tabs where possible
#651: FILE: arch/x86_64/kernel/nmi.c:740:
+^I ^I^I^I *   unmasked by the LVTPC handler.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#651: FILE: arch/x86_64/kernel/nmi.c:740:
+^I ^I^I^I *   unmasked by the LVTPC handler.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#652: FILE: arch/x86_64/kernel/nmi.c:741:
+^I ^I^I^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#652: FILE: arch/x86_64/kernel/nmi.c:741:
+^I ^I^I^I */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#655: FILE: arch/x86_64/kernel/nmi.c:744:
+^I ^I^I^Iwrmsrl(wd->cccr_msr, dummy);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#655: FILE: arch/x86_64/kernel/nmi.c:744:
+^I ^I^I^Iwrmsrl(wd->cccr_msr, dummy);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#656: FILE: arch/x86_64/kernel/nmi.c:745:
+^I ^I^I^Iapic_write(APIC_LVTPC, APIC_DM_NMI);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#656: FILE: arch/x86_64/kernel/nmi.c:745:
+^I ^I^I^Iapic_write(APIC_LVTPC, APIC_DM_NMI);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#657: FILE: arch/x86_64/kernel/nmi.c:746:
+^I ^I^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#657: FILE: arch/x86_64/kernel/nmi.c:746:
+^I ^I^I}$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#676: FILE: include/asm-x86_64/nmi.h:66:
+extern void setup_apic_nmi_watchdog (void *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#676: FILE: include/asm-x86_64/nmi.h:66:
+extern void setup_apic_nmi_watchdog (void *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#676: FILE: include/asm-x86_64/nmi.h:66:
+extern void setup_apic_nmi_watchdog (void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.48986.commit.085343f422dad0cef68b7274d52cb54f5ef74614 total: 20 errors, 35 warnings, 41 checks, 620 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.48986.commit.085343f422dad0cef68b7274d52cb54f5ef74614 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
