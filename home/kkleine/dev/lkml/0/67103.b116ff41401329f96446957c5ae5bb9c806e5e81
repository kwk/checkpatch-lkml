ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#91: FILE: arch/i386/kernel/setup.c:477:
+int __init sanitize_e820_map(struct e820entry * biosmap, char * pnr_map)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#91: FILE: arch/i386/kernel/setup.c:477:
+int __init sanitize_e820_map(struct e820entry * biosmap, char * pnr_map)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#100: FILE: arch/i386/kernel/setup.c:646:
+int __init copy_e820_map(struct e820entry * biosmap, int nr_map)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#163: FILE: arch/i386/mach-default/setup.c:148:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#188: FILE: arch/i386/mach-default/setup.c:173:
+  ^I}$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#188: FILE: arch/i386/mach-default/setup.c:173:
+  ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#188: FILE: arch/i386/mach-default/setup.c:173:
+  ^I}$

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#215: FILE: arch/i386/mach-visws/setup.c:146:
+long long mem_size __initdata = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#224: FILE: arch/i386/mach-visws/setup.c:155:
+		printk(KERN_WARNING "Bootloader didn't set memory size, upgrade it !\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#234: FILE: arch/i386/mach-visws/setup.c:165:
+		printk(KERN_WARNING "Defaulting to 8 MB framebuffer size\n");

CHECK:SPACING: No space is necessary after a cast
#251: FILE: arch/i386/mach-visws/setup.c:182:
+	(void) sanitize_e820_map(NULL, NULL);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#252: FILE: arch/i386/mach-visws/setup.c:183:
+	(void) copy_e820_map(NULL, 0);

ERROR:SPACING: space required before the open parenthesis '('
#280: FILE: arch/i386/mach-voyager/setup.c:60:
+	if(voyager_level == 5) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#287: FILE: arch/i386/mach-voyager/setup.c:67:
+		for(i=0; voyager_memory_detect(i, &addr, &length); i++) {
 		     ^

ERROR:SPACING: space required before the open parenthesis '('
#287: FILE: arch/i386/mach-voyager/setup.c:67:
+		for(i=0; voyager_memory_detect(i, &addr, &length); i++) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#287: FILE: arch/i386/mach-voyager/setup.c:67:
+		for(i=0; voyager_memory_detect(i, &addr, &length); i++) {
+			add_memory_region(addr, length, E820_RAM);
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open parenthesis '('
#291: FILE: arch/i386/mach-voyager/setup.c:71:
+	} else if(voyager_level == 4) {

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#293: FILE: arch/i386/mach-voyager/setup.c:73:
+		__u16 catbase = inb(VOYAGER_SSPB_RELOCATION_PORT)<<8;
 		                                                 ^

ERROR:SPACING: space required before the open parenthesis '('
#300: FILE: arch/i386/mach-voyager/setup.c:80:
+		if(inb(catbase) != VOYAGER_DINO) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#301: FILE: arch/i386/mach-voyager/setup.c:81:
+			printk(KERN_ERR "Voyager: Failed to get DINO for L4, setting tom to EXT_MEM_K\n");

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#302: FILE: arch/i386/mach-voyager/setup.c:82:
+			tom = (EXT_MEM_K)<<10;
 			                 ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#307: FILE: arch/i386/mach-voyager/setup.c:87:
+		add_memory_region(1*1024*1024, tom - 1*1024*1024, E820_RAM);
 		                   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#307: FILE: arch/i386/mach-voyager/setup.c:87:
+		add_memory_region(1*1024*1024, tom - 1*1024*1024, E820_RAM);
 		                        ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#307: FILE: arch/i386/mach-voyager/setup.c:87:
+		add_memory_region(1*1024*1024, tom - 1*1024*1024, E820_RAM);
 		                                      ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#307: FILE: arch/i386/mach-voyager/setup.c:87:
+		add_memory_region(1*1024*1024, tom - 1*1024*1024, E820_RAM);
 		                                           ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#310: FILE: arch/i386/mach-voyager/setup.c:90:
+		 * */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#311: FILE: arch/i386/mach-voyager/setup.c:91:
+		add_memory_region(8*1024*1024, 8*1024*1024, E820_RESERVED);
 		                   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#311: FILE: arch/i386/mach-voyager/setup.c:91:
+		add_memory_region(8*1024*1024, 8*1024*1024, E820_RESERVED);
 		                        ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#311: FILE: arch/i386/mach-voyager/setup.c:91:
+		add_memory_region(8*1024*1024, 8*1024*1024, E820_RESERVED);
 		                                ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#311: FILE: arch/i386/mach-voyager/setup.c:91:
+		add_memory_region(8*1024*1024, 8*1024*1024, E820_RESERVED);
 		                                     ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#339: FILE: arch/i386/mach-voyager/setup.c:119:
+  ^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#339: FILE: arch/i386/mach-voyager/setup.c:119:
+  ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#339: FILE: arch/i386/mach-voyager/setup.c:119:
+  ^I}$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#359: FILE: include/asm-i386/setup.h:72:
+int __init copy_e820_map(struct e820entry * biosmap, int nr_map);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#360: FILE: include/asm-i386/setup.h:73:
+int __init sanitize_e820_map(struct e820entry * biosmap, char * pnr_map);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#360: FILE: include/asm-i386/setup.h:73:
+int __init sanitize_e820_map(struct e820entry * biosmap, char * pnr_map);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#371: FILE: include/asm-i386/mach-default/setup_arch.h:1:
+/* Hook to call BIOS initialisation function */

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#380: FILE: include/asm-i386/mach-visws/setup_arch.h:1:
+/* Hook to call BIOS initialisation function */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#389: FILE: include/asm-i386/mach-voyager/setup_arch.h:1:
+#include <asm/voyager.h>

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#390: FILE: include/asm-i386/mach-voyager/setup_arch.h:2:
+#define VOYAGER_BIOS_INFO ((struct voyager_bios_info *)(PARAM+0x40))
                                                              ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#394: FILE: include/asm-i386/mach-voyager/setup_arch.h:6:
+/* for voyager, pass the voyager BIOS/SUS info area to the detection $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#395: FILE: include/asm-i386/mach-voyager/setup_arch.h:7:
+ * routines */

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#397: FILE: include/asm-i386/mach-voyager/setup_arch.h:9:
+#define ARCH_SETUP	voyager_detect(VOYAGER_BIOS_INFO);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.67103.commit.b116ff41401329f96446957c5ae5bb9c806e5e81 total: 15 errors, 14 warnings, 14 checks, 295 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.67103.commit.b116ff41401329f96446957c5ae5bb9c806e5e81 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
