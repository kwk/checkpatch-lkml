WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#57: FILE: drivers/scsi/Kconfig:915:
+config SCSI_PATA_EP93XX
+	tristate "Cirrus Logic EP93XX PATA support"
+	depends on ARCH_EP93XX
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#81: FILE: drivers/scsi/pata_ep93xx.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:CAMELCASE: Avoid CamelCase: <EP93XX_IDE_CTRL_DIOWn>
#103: FILE: drivers/scsi/pata_ep93xx.c:23:
+	ctrl &= ~(EP93XX_IDE_CTRL_DIOWn);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <EP93XX_IDE_CTRL_DIORn>
#112: FILE: drivers/scsi/pata_ep93xx.c:32:
+	ctrl &= ~(EP93XX_IDE_CTRL_DIORn);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#119: FILE: drivers/scsi/pata_ep93xx.c:39:
+#define ep93xx_write_addr(ctrl,addr) { \
                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ctrl' - possible side-effects?
#119: FILE: drivers/scsi/pata_ep93xx.c:39:
+#define ep93xx_write_addr(ctrl,addr) { \
+	ctrl = (ctrl & ~(EP93XX_IDE_CTRL_DA_CS_MASK)) | EP93XX_IDE_CTRL_DA_CS(addr); \
+	__raw_writel(ctrl, EP93XX_IDE_CTRL); }

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#123: FILE: drivers/scsi/pata_ep93xx.c:43:
+static inline void ep93xx_writew(register u16 value, volatile void __iomem *p)

CHECK:SPACING: No space is necessary after a cast
#127: FILE: drivers/scsi/pata_ep93xx.c:47:
+	ep93xx_write_addr(ctrl, (unsigned long) p);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#132: FILE: drivers/scsi/pata_ep93xx.c:52:
+#define ep93xx_writeb(value,addr) ep93xx_writew(value,addr)
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#132: FILE: drivers/scsi/pata_ep93xx.c:52:
+#define ep93xx_writeb(value,addr) ep93xx_writew(value,addr)
                                                      ^

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#134: FILE: drivers/scsi/pata_ep93xx.c:54:
+static inline unsigned short ep93xx_readw(volatile void __iomem *p)

CHECK:SPACING: No space is necessary after a cast
#138: FILE: drivers/scsi/pata_ep93xx.c:58:
+	ep93xx_write_addr(ctrl, (unsigned long) p);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#146: FILE: drivers/scsi/pata_ep93xx.c:66:
+static unsigned int ep93xx_mode_filter(const struct ata_port *ap,
+	struct ata_device *adev, unsigned int mask, int shift)

WARNING:LINE_SPACING: Missing a blank line after declarations
#159: FILE: drivers/scsi/pata_ep93xx.c:79:
+		struct ata_device *dev = &ap->device[i];
+		if (ata_dev_present(dev)) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#189: FILE: drivers/scsi/pata_ep93xx.c:109:
+		ep93xx_writeb(tf->ctl, (void __iomem *) ap->ioaddr.ctl_addr);

CHECK:SPACING: No space is necessary after a cast
#195: FILE: drivers/scsi/pata_ep93xx.c:115:
+		ep93xx_writeb(tf->hob_feature, (void __iomem *) ioaddr->feature_addr);

CHECK:SPACING: No space is necessary after a cast
#196: FILE: drivers/scsi/pata_ep93xx.c:116:
+		ep93xx_writeb(tf->hob_nsect, (void __iomem *) ioaddr->nsect_addr);

CHECK:SPACING: No space is necessary after a cast
#197: FILE: drivers/scsi/pata_ep93xx.c:117:
+		ep93xx_writeb(tf->hob_lbal, (void __iomem *) ioaddr->lbal_addr);

CHECK:SPACING: No space is necessary after a cast
#198: FILE: drivers/scsi/pata_ep93xx.c:118:
+		ep93xx_writeb(tf->hob_lbam, (void __iomem *) ioaddr->lbam_addr);

CHECK:SPACING: No space is necessary after a cast
#199: FILE: drivers/scsi/pata_ep93xx.c:119:
+		ep93xx_writeb(tf->hob_lbah, (void __iomem *) ioaddr->lbah_addr);

CHECK:SPACING: No space is necessary after a cast
#209: FILE: drivers/scsi/pata_ep93xx.c:129:
+		ep93xx_writeb(tf->feature, (void __iomem *) ioaddr->feature_addr);

CHECK:SPACING: No space is necessary after a cast
#210: FILE: drivers/scsi/pata_ep93xx.c:130:
+		ep93xx_writeb(tf->nsect, (void __iomem *) ioaddr->nsect_addr);

CHECK:SPACING: No space is necessary after a cast
#211: FILE: drivers/scsi/pata_ep93xx.c:131:
+		ep93xx_writeb(tf->lbal, (void __iomem *) ioaddr->lbal_addr);

CHECK:SPACING: No space is necessary after a cast
#212: FILE: drivers/scsi/pata_ep93xx.c:132:
+		ep93xx_writeb(tf->lbam, (void __iomem *) ioaddr->lbam_addr);

CHECK:SPACING: No space is necessary after a cast
#213: FILE: drivers/scsi/pata_ep93xx.c:133:
+		ep93xx_writeb(tf->lbah, (void __iomem *) ioaddr->lbah_addr);

CHECK:SPACING: No space is necessary after a cast
#223: FILE: drivers/scsi/pata_ep93xx.c:143:
+		ep93xx_writeb(tf->device, (void __iomem *) ioaddr->device_addr);

CHECK:SPACING: No space is necessary after a cast
#243: FILE: drivers/scsi/pata_ep93xx.c:163:
+		ep93xx_writeb(tf->ctl | ATA_HOB, (void __iomem *) ap->ioaddr.ctl_addr);

CHECK:SPACING: No space is necessary after a cast
#254: FILE: drivers/scsi/pata_ep93xx.c:174:
+	return ep93xx_readb((void __iomem *) ap->ioaddr.status_addr);

CHECK:SPACING: No space is necessary after a cast
#266: FILE: drivers/scsi/pata_ep93xx.c:186:
+	ep93xx_writeb(tf->command, (void __iomem *) ap->ioaddr.command_addr);

CHECK:SPACING: No space is necessary after a cast
#277: FILE: drivers/scsi/pata_ep93xx.c:197:
+	ep93xx_writeb(0x55, (void __iomem *) ioaddr->nsect_addr);

CHECK:SPACING: No space is necessary after a cast
#278: FILE: drivers/scsi/pata_ep93xx.c:198:
+	ep93xx_writeb(0xaa, (void __iomem *) ioaddr->lbal_addr);

CHECK:SPACING: No space is necessary after a cast
#280: FILE: drivers/scsi/pata_ep93xx.c:200:
+	ep93xx_writeb(0xaa, (void __iomem *) ioaddr->nsect_addr);

CHECK:SPACING: No space is necessary after a cast
#281: FILE: drivers/scsi/pata_ep93xx.c:201:
+	ep93xx_writeb(0x55, (void __iomem *) ioaddr->lbal_addr);

CHECK:SPACING: No space is necessary after a cast
#283: FILE: drivers/scsi/pata_ep93xx.c:203:
+	ep93xx_writeb(0x55, (void __iomem *) ioaddr->nsect_addr);

CHECK:SPACING: No space is necessary after a cast
#284: FILE: drivers/scsi/pata_ep93xx.c:204:
+	ep93xx_writeb(0xaa, (void __iomem *) ioaddr->lbal_addr);

CHECK:SPACING: No space is necessary after a cast
#286: FILE: drivers/scsi/pata_ep93xx.c:206:
+	nsect = ep93xx_readb((void __iomem *) ioaddr->nsect_addr);

CHECK:SPACING: No space is necessary after a cast
#287: FILE: drivers/scsi/pata_ep93xx.c:207:
+	lbal = ep93xx_readb((void __iomem *) ioaddr->lbal_addr);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nsect == 0x55'
#289: FILE: drivers/scsi/pata_ep93xx.c:209:
+	if ((nsect == 0x55) && (lbal == 0xaa))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'lbal == 0xaa'
#289: FILE: drivers/scsi/pata_ep93xx.c:209:
+	if ((nsect == 0x55) && (lbal == 0xaa))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#295: FILE: drivers/scsi/pata_ep93xx.c:215:
+static void ep93xx_dev_select (struct ata_port *ap, unsigned int device)

CHECK:SPACING: No space is necessary after a cast
#304: FILE: drivers/scsi/pata_ep93xx.c:224:
+	ep93xx_writeb(tmp, (void __iomem *) ap->ioaddr.device_addr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#310: FILE: drivers/scsi/pata_ep93xx.c:230:
+static void ep93xx_data_xfer(struct ata_port *ap, struct ata_device *adev,
+			unsigned char *buf, unsigned int buflen, int write_data)

CHECK:SPACING: No space is necessary after a cast
#314: FILE: drivers/scsi/pata_ep93xx.c:234:
+	u16 *buf16 = (u16 *) buf;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#367: FILE: drivers/scsi/pata_ep93xx.c:287:
+^I.check_status ^I^I= ep93xx_check_status,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#372: FILE: drivers/scsi/pata_ep93xx.c:292:
+^I.dev_select ^I^I= ep93xx_dev_select,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#375: FILE: drivers/scsi/pata_ep93xx.c:295:
+^I.qc_prep ^I^I= ata_qc_prep,$

CHECK:BIT_MACRO: Prefer using the BIT macro
#470: FILE: include/asm-arm/arch-ep93xx/ep93xx-regs.h:51:
+#define EP93XX_IDE_CTRL_CS0n		(1L << 0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#471: FILE: include/asm-arm/arch-ep93xx/ep93xx-regs.h:52:
+#define EP93XX_IDE_CTRL_CS1n		(1L << 1)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#473: FILE: include/asm-arm/arch-ep93xx/ep93xx-regs.h:54:
+#define EP93XX_IDE_CTRL_DA(x)		((x << 2) & EP93XX_IDE_CTRL_DA_MASK)

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#474: FILE: include/asm-arm/arch-ep93xx/ep93xx-regs.h:55:
+#define EP93XX_IDE_CTRL_DA_CS_MASK	(EP93XX_IDE_CTRL_DA_MASK | EP93XX_IDE_CTRL_CS0n | EP93XX_IDE_CTRL_CS1n)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:BIT_MACRO: Prefer using the BIT macro
#476: FILE: include/asm-arm/arch-ep93xx/ep93xx-regs.h:57:
+#define EP93XX_IDE_CTRL_DIORn		(1L << 5)

CHECK:BIT_MACRO: Prefer using the BIT macro
#477: FILE: include/asm-arm/arch-ep93xx/ep93xx-regs.h:58:
+#define EP93XX_IDE_CTRL_DIOWn		(1L << 6)

CHECK:CAMELCASE: Avoid CamelCase: <EP93XX_IDE_CTRL_DASPn>
#478: FILE: include/asm-arm/arch-ep93xx/ep93xx-regs.h:59:
+#define EP93XX_IDE_CTRL_DASPn		(1L << 7)

CHECK:BIT_MACRO: Prefer using the BIT macro
#478: FILE: include/asm-arm/arch-ep93xx/ep93xx-regs.h:59:
+#define EP93XX_IDE_CTRL_DASPn		(1L << 7)

CHECK:BIT_MACRO: Prefer using the BIT macro
#479: FILE: include/asm-arm/arch-ep93xx/ep93xx-regs.h:60:
+#define EP93XX_IDE_CTRL_DMARQ		(1L << 8)

CHECK:BIT_MACRO: Prefer using the BIT macro
#480: FILE: include/asm-arm/arch-ep93xx/ep93xx-regs.h:61:
+#define EP93XX_IDE_CTRL_INTRQ		(1L << 9)

CHECK:BIT_MACRO: Prefer using the BIT macro
#481: FILE: include/asm-arm/arch-ep93xx/ep93xx-regs.h:62:
+#define EP93XX_IDE_CTRL_IORDY		(1L << 10)

CHECK:BIT_MACRO: Prefer using the BIT macro
#483: FILE: include/asm-arm/arch-ep93xx/ep93xx-regs.h:64:
+#define EP93XX_IDE_CFG_IDEEN		(1L << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#484: FILE: include/asm-arm/arch-ep93xx/ep93xx-regs.h:65:
+#define EP93XX_IDE_CFG_PIO		(1L << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#485: FILE: include/asm-arm/arch-ep93xx/ep93xx-regs.h:66:
+#define EP93XX_IDE_CFG_MDMA		(1L << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#486: FILE: include/asm-arm/arch-ep93xx/ep93xx-regs.h:67:
+#define EP93XX_IDE_CFG_UDMA		(1L << 3)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#487: FILE: include/asm-arm/arch-ep93xx/ep93xx-regs.h:68:
+#define EP93XX_IDE_CFG_MODE(x)		((x & 0x0F) << 4)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#488: FILE: include/asm-arm/arch-ep93xx/ep93xx-regs.h:69:
+#define EP93XX_IDE_CFG_WST(x)		((x & 0x03) << 8)

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.36314.commit.20e48132163286eab243f27bf3819bb0cec3e74d total: 3 errors, 10 warnings, 50 checks, 424 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.36314.commit.20e48132163286eab243f27bf3819bb0cec3e74d has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
