WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
Provide a function device_move() to move a device to a new parent device. Add

WARNING:TYPO_SPELLING: 'auxilliary' may be misspelled - perhaps 'auxiliary'?
#29: 
auxilliary functions kobject_move() and sysfs_move_dir().
^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#57: FILE: drivers/base/core.c:959:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#114: FILE: drivers/base/core.c:1016:
+	pr_debug("DEVICE: moving '%s' to '%s'\n", dev->bus_id,
+		new_parent->bus_id);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#147: FILE: drivers/base/core.c:1049:
+EXPORT_SYMBOL_GPL(device_move);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:BRACES: braces {} should be used on all arms of this statement
#181: FILE: fs/sysfs/dir.c:400:
+	if (IS_ERR(new_dentry)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#184: FILE: fs/sysfs/dir.c:403:
+	} else

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#212: FILE: include/linux/device.h:427:
+extern int device_move(struct device *dev, struct device *new_parent);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:SPACING: No space is necessary after a cast
#224: FILE: include/linux/kobject.h:50:
+	KOBJ_MOVE	= (__force kobject_action_t) 0x08,	/* device move */

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#232: FILE: include/linux/kobject.h:80:
+extern int __must_check kobject_move(struct kobject *, struct kobject *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kobject *' should also have an identifier name
#232: FILE: include/linux/kobject.h:80:
+extern int __must_check kobject_move(struct kobject *, struct kobject *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kobject *' should also have an identifier name
#232: FILE: include/linux/kobject.h:80:
+extern int __must_check kobject_move(struct kobject *, struct kobject *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kobject *' should also have an identifier name
#266: FILE: include/linux/sysfs.h:102:
+extern int __must_check

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct attribute *' should also have an identifier name
#266: FILE: include/linux/sysfs.h:102:
+extern int __must_check

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#274: FILE: include/linux/sysfs.h:148:
+static inline int sysfs_move_dir(struct kobject * k, struct kobject * new_parent)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#274: FILE: include/linux/sysfs.h:148:
+static inline int sysfs_move_dir(struct kobject * k, struct kobject * new_parent)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#396: FILE: lib/kobject_uevent.c:210:
+EXPORT_SYMBOL_GPL(kobject_uevent_env);

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.13326.commit.413cbf89e6724983fc783d9f1dde7de6588cd1fa total: 2 errors, 8 warnings, 7 checks, 322 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.13326.commit.413cbf89e6724983fc783d9f1dde7de6588cd1fa has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
