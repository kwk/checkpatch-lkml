WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#44: FILE: kernel/power/pagedir.c:184:
+ * ^I^Ibeing able to be written out in a separate pagedir.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#45: FILE: kernel/power/pagedir.c:185:
+ * ^I^IHighMem pages are simply marked as pageset2. They won't be$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#46: FILE: kernel/power/pagedir.c:186:
+ * ^I^Ineeded during suspend.$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#61: FILE: kernel/power/pagedir.c:201:
+	BUG_ON(in_atomic() && !irqs_disabled());

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_WHITESPACE: trailing whitespace
#68: FILE: kernel/power/pagedir.c:208:
+^I/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#80: FILE: kernel/power/pagedir.c:220:
+^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#85: FILE: kernel/power/pagedir.c:225:
+			struct page *page;
+			list_for_each_entry(page, &zone->inactive_list, lru)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#90: FILE: kernel/power/pagedir.c:230:
+			struct page *page;
+			list_for_each_entry(page, &zone->active_list, lru)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#96: FILE: kernel/power/pagedir.c:236:
+	BUG_ON(in_atomic() && !irqs_disabled());

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#104: FILE: kernel/power/pagedir.c:244:
+			struct attention_list *this = kmalloc(sizeof(struct attention_list), GFP_ATOMIC);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*this)...) over kmalloc(sizeof(struct attention_list)...)
#104: FILE: kernel/power/pagedir.c:244:
+			struct attention_list *this = kmalloc(sizeof(struct attention_list), GFP_ATOMIC);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:LINE_SPACING: Missing a blank line after declarations
#105: FILE: kernel/power/pagedir.c:245:
+			struct attention_list *this = kmalloc(sizeof(struct attention_list), GFP_ATOMIC);
+			BUG_ON(!this);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#105: FILE: kernel/power/pagedir.c:245:
+			BUG_ON(!this);

CHECK:BRACES: braces {} should be used on all arms of this statement
#108: FILE: kernel/power/pagedir.c:248:
+			if (attention_list) {
[...]
+			} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#111: FILE: kernel/power/pagedir.c:251:
+			} else

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#112: FILE: kernel/power/pagedir.c:252:
+				attention_list = last = this;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#116: FILE: kernel/power/pagedir.c:256:
+	BUG_ON(in_atomic() && !irqs_disabled());

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#129: FILE: kernel/power/pagedir.c:269:
+	BUG_ON(in_atomic() && !irqs_disabled());

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#131: FILE: kernel/power/pagedir.c:271:
+
+}

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.64661.commit.11a533b325994d45632b51b1a50768de5e6e4224 total: 2 errors, 12 warnings, 5 checks, 95 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.64661.commit.11a533b325994d45632b51b1a50768de5e6e4224 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
