WARNING:TYPO_SPELLING: 'peform' may be misspelled - perhaps 'perform'?
#39: 
__pa_symbol needs to peform an extra variable read to resolve
                     ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'addesses' may be misspelled - perhaps 'addresses'?
#43: 
__pa_vsymbol for finding the physical addesses of vsyscall pages.
                                      ^^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#116: FILE: arch/i386/mm/init.c:782:
+		struct page *page = pfn_to_page(addr >> PAGE_SHIFT);
+		ClearPageReserved(page);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#185: FILE: arch/x86_64/kernel/setup.c:371:
+	code_resource.end = __pa_symbol(&_etext)-1;
 	                                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#187: FILE: arch/x86_64/kernel/setup.c:373:
+	data_resource.end = __pa_symbol(&_edata)-1;
 	                                        ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#211: FILE: arch/x86_64/kernel/vsyscall.c:53:
+^I({unsigned long v;  ^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#212: FILE: arch/x86_64/kernel/vsyscall.c:54:
+^Iextern char __vsyscall_0; ^I\$

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#212: FILE: arch/x86_64/kernel/vsyscall.c:54:
+	extern char __vsyscall_0; 	\

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:LINE_SPACING: Missing a blank line after declarations
#245: FILE: arch/x86_64/mm/init.c:576:
+		struct page *page = pfn_to_page(addr >> PAGE_SHIFT);
+		ClearPageReserved(page);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#310: FILE: arch/x86_64/mm/pageattr.c:111:
+	large_pte = mk_pte_phys((pfn << PAGE_SHIFT) & LARGE_PAGE_MASK,
+					ref_prot);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#320: FILE: arch/x86_64/mm/pageattr.c:137:
+			split = split_large_page(pfn << PAGE_SHIFT, prot,
+							ref_prot2);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pfn >= phys_base_pfn'
#346: FILE: arch/x86_64/mm/pageattr.c:189:
+		if ((pfn >= phys_base_pfn) &&
+			((pfn - phys_base_pfn) < (KERNEL_TEXT_SIZE >> PAGE_SHIFT))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#347: FILE: arch/x86_64/mm/pageattr.c:190:
+		if ((pfn >= phys_base_pfn) &&
+			((pfn - phys_base_pfn) < (KERNEL_TEXT_SIZE >> PAGE_SHIFT))) {

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.17211.commit.daf8a2c0aceb4f9a9f99a9d20a2c2aadcdd26e6d total: 0 errors, 7 warnings, 6 checks, 268 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.17211.commit.daf8a2c0aceb4f9a9f99a9d20a2c2aadcdd26e6d has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
