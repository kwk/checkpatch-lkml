WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#36: FILE: Makefile:4:
+EXTRAVERSION = .1
 ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#95: FILE: arch/i386/kernel/nmi.c:195:
+static int endflag __initdata = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:MEMORY_BARRIER: memory barrier without comment
#115: FILE: arch/i386/kernel/nmi.c:212:
+		mb();

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#220: FILE: arch/x86_64/kernel/nmi.c:193:
+static int endflag __initdata = 0;

WARNING:MEMORY_BARRIER: memory barrier without comment
#240: FILE: arch/x86_64/kernel/nmi.c:210:
+		mb();

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#540: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#545: FILE: include/linux/bottom_half.h:1:
+extern void local_bh_disable(void);

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#545: FILE: include/linux/bottom_half.h:1:
+extern void local_bh_disable(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#546: FILE: include/linux/bottom_half.h:2:
+extern void __local_bh_enable(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#547: FILE: include/linux/bottom_half.h:3:
+extern void _local_bh_enable(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#548: FILE: include/linux/bottom_half.h:4:
+extern void local_bh_enable(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#549: FILE: include/linux/bottom_half.h:5:
+extern void local_bh_enable_ip(unsigned long ip);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#560: FILE: include/linux/if_addr.h:57:
+#define IFA_RTA(r)  ((struct rtattr*)(((char*)(r)) + NLMSG_ALIGN(sizeof(struct ifaddrmsg))))

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#560: FILE: include/linux/if_addr.h:57:
+#define IFA_RTA(r)  ((struct rtattr*)(((char*)(r)) + NLMSG_ALIGN(sizeof(struct ifaddrmsg))))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#561: FILE: include/linux/if_addr.h:58:
+#define IFA_PAYLOAD(n) NLMSG_PAYLOAD(n,sizeof(struct ifaddrmsg))
                                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#575: FILE: include/linux/if_link.h:87:
+#define IFLA_RTA(r)  ((struct rtattr*)(((char*)(r)) + NLMSG_ALIGN(sizeof(struct ifinfomsg))))

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#575: FILE: include/linux/if_link.h:87:
+#define IFLA_RTA(r)  ((struct rtattr*)(((char*)(r)) + NLMSG_ALIGN(sizeof(struct ifinfomsg))))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#576: FILE: include/linux/if_link.h:88:
+#define IFLA_PAYLOAD(n) NLMSG_PAYLOAD(n,sizeof(struct ifinfomsg))
                                        ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#692: FILE: net/bridge/br_netfilter.c:247:
+ * --Bart, 20062711 (updated) */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#710: FILE: net/bridge/br_netfilter.c:282:
+		if ((err = ip_route_input(skb, iph->daddr, iph->saddr, iph->tos, dev))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#726: FILE: net/bridge/br_netfilter.c:301:
+			 * destination is the loopback device and not the bridge. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#736: FILE: net/bridge/br_netfilter.c:307:
+				 *   require ip_forwarding. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#744: FILE: net/bridge/br_netfilter.c:315:
+				 * the packet could be dropped even if forwarding were enabled */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#780: FILE: net/bridge/netfilter/ebtables.c:375:
+	if (left < sizeof(struct ebt_entry_watcher) ||
+	   left - sizeof(struct ebt_entry_watcher) < w->watcher_size)

CHECK:CAMELCASE: Avoid CamelCase: <Esmall>
#793: FILE: net/bridge/netfilter/ebtables.c:411:
+		goto Esmall;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mark_source_chains', this function's name, in a string
#965: FILE: net/ipv4/netfilter/arp_tables.c:379:
+					duprintf("mark_source_chains: bad "

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#966: FILE: net/ipv4/netfilter/arp_tables.c:380:
+					duprintf("mark_source_chains: bad "
+						"negative verdict (%i)\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mark_source_chains', this function's name, in a string
#980: FILE: net/ipv4/netfilter/arp_tables.c:416:
+						duprintf("mark_source_chains: "

WARNING:SPLIT_STRING: quoted string split across lines
#981: FILE: net/ipv4/netfilter/arp_tables.c:417:
+						duprintf("mark_source_chains: "
+							"bad verdict (%i)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1040: FILE: net/ipv4/netfilter/arp_tables.c:643:
+		ARPT_ENTRY_ITERATE(entry0, newinfo->size,
+				cleanup_entry, &i);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mark_source_chains', this function's name, in a string
#1064: FILE: net/ipv4/netfilter/ip_tables.c:405:
+					duprintf("mark_source_chains: bad "

WARNING:SPLIT_STRING: quoted string split across lines
#1065: FILE: net/ipv4/netfilter/ip_tables.c:406:
+					duprintf("mark_source_chains: bad "
+						"negative verdict (%i)\n",

WARNING:SPLIT_STRING: quoted string split across lines
#1080: FILE: net/ipv4/netfilter/ip_tables.c:451:
+						duprintf("mark_source_chains: "
+							"bad verdict (%i)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1149: FILE: net/ipv4/netfilter/ip_tables.c:719:
+		IPT_ENTRY_ITERATE(entry0, newinfo->size,
+				cleanup_entry, &i);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1209: FILE: net/ipv4/netfilter/ip_tables.c:1559:
+static inline int compat_check_match(struct ipt_entry_match *m, const char *name,
+				const struct ipt_ip *ip, unsigned int hookmask)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1219: FILE: net/ipv4/netfilter/ip_tables.c:1569:
+	if (!ret && m->u.kernel.match->checkentry
+	    && !m->u.kernel.match->checkentry(name, ip, match, m->data,

ERROR:CODE_INDENT: code indent should use tabs where possible
#1230: FILE: net/ipv4/netfilter/ip_tables.c:1580:
+ ^Istruct ipt_entry_target *t;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1230: FILE: net/ipv4/netfilter/ip_tables.c:1580:
+ ^Istruct ipt_entry_target *t;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1230: FILE: net/ipv4/netfilter/ip_tables.c:1580:
+ ^Istruct ipt_entry_target *t;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1231: FILE: net/ipv4/netfilter/ip_tables.c:1581:
+ ^Istruct ipt_target *target;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1231: FILE: net/ipv4/netfilter/ip_tables.c:1581:
+ ^Istruct ipt_target *target;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1231: FILE: net/ipv4/netfilter/ip_tables.c:1581:
+ ^Istruct ipt_target *target;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1232: FILE: net/ipv4/netfilter/ip_tables.c:1582:
+ ^Iint ret;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1232: FILE: net/ipv4/netfilter/ip_tables.c:1582:
+ ^Iint ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1232: FILE: net/ipv4/netfilter/ip_tables.c:1582:
+ ^Iint ret;$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1251: FILE: net/ipv4/netfilter/ip_tables.c:1590:
+	if (!ret && t->u.kernel.target->checkentry
+		   && !t->u.kernel.target->checkentry(name, e, target,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1268: FILE: net/ipv4/netfilter/ip_tables.c:1604:
+	ret = IPT_MATCH_ITERATE(e, compat_check_match, name, &e->ip,
+								e->comefrom);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1283: FILE: net/ipv4/netfilter/ip_tables.c:1700:
+	ret = IPT_ENTRY_ITERATE(entry1, newinfo->size, compat_check_entry,
+									name);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1347: FILE: net/ipv6/ndisc.c:643:
+        skb = sock_alloc_send_skb(sk,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1347: FILE: net/ipv6/ndisc.c:643:
+        skb = sock_alloc_send_skb(sk,$

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mark_source_chains', this function's name, in a string
#1373: FILE: net/ipv6/netfilter/ip6_tables.c:444:
+					duprintf("mark_source_chains: bad "

WARNING:SPLIT_STRING: quoted string split across lines
#1374: FILE: net/ipv6/netfilter/ip6_tables.c:445:
+					duprintf("mark_source_chains: bad "
+						"negative verdict (%i)\n",

WARNING:SPLIT_STRING: quoted string split across lines
#1389: FILE: net/ipv6/netfilter/ip6_tables.c:490:
+						duprintf("mark_source_chains: "
+							"bad verdict (%i)\n",

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1527: FILE: net/sched/act_police.c:51:
+struct tc_police_compat
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1551: FILE: net/sched/act_police.c:151:
+	if (tb[TCA_POLICE_TBF-1] == NULL)
 	                     ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tb[TCA_POLICE_TBF-1]"
#1551: FILE: net/sched/act_police.c:151:
+	if (tb[TCA_POLICE_TBF-1] == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1553: FILE: net/sched/act_police.c:153:
+	size = RTA_PAYLOAD(tb[TCA_POLICE_TBF-1]);
 	                                    ^

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#1554: FILE: net/sched/act_police.c:154:
+	if (size != sizeof(*parm) && size != sizeof(struct tc_police_compat))
 	                    ^^^^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1569: FILE: net/sched/act_police.c:438:
+	if (tb[TCA_POLICE_TBF-1] == NULL)
 	                     ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tb[TCA_POLICE_TBF-1]"
#1569: FILE: net/sched/act_police.c:438:
+	if (tb[TCA_POLICE_TBF-1] == NULL)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1571: FILE: net/sched/act_police.c:440:
+	size = RTA_PAYLOAD(tb[TCA_POLICE_TBF-1]);
 	                                    ^

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#1572: FILE: net/sched/act_police.c:441:
+	if (size != sizeof(*parm) && size != sizeof(struct tc_police_compat))
 	                    ^^^^

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.10231.commit.832014787feaec803f185b6b776d2afbe143afb7 total: 14 errors, 29 warnings, 20 checks, 1295 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.10231.commit.832014787feaec803f185b6b776d2afbe143afb7 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
