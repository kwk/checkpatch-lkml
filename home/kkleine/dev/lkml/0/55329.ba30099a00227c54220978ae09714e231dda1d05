WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#64: 
did not handle their demotions well, as they occured well into their
                                             ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#113: FILE: security/slim/slm_main.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#174: FILE: security/slim/slm_main.c:62:
+};
+static char *slm_sac_str[] = { ZERO_STR,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited before semicolon
#195: FILE: security/slim/slm_main.c:83:
+			while ((*bufp != '\n') && (bufp++ < buf_end)) ;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#195: FILE: security/slim/slm_main.c:83:
+			while ((*bufp != '\n') && (bufp++ < buf_end)) ;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'level->guard.iac_r != SLM_IAC_NOTDEFINED'
#221: FILE: security/slim/slm_main.c:109:
+	if ((level->guard.iac_r != SLM_IAC_NOTDEFINED)
+	    && (level->guard.iac_wx != SLM_IAC_NOTDEFINED))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'level->guard.iac_wx != SLM_IAC_NOTDEFINED'
#221: FILE: security/slim/slm_main.c:109:
+	if ((level->guard.iac_r != SLM_IAC_NOTDEFINED)
+	    && (level->guard.iac_wx != SLM_IAC_NOTDEFINED))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#222: FILE: security/slim/slm_main.c:110:
+	if ((level->guard.iac_r != SLM_IAC_NOTDEFINED)
+	    && (level->guard.iac_wx != SLM_IAC_NOTDEFINED))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'level->guard.sac_rx != SLM_SAC_NOTDEFINED'
#229: FILE: security/slim/slm_main.c:117:
+	if ((level->guard.sac_rx != SLM_SAC_NOTDEFINED)
+	    && (level->guard.sac_w != SLM_SAC_NOTDEFINED))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'level->guard.sac_w != SLM_SAC_NOTDEFINED'
#229: FILE: security/slim/slm_main.c:117:
+	if ((level->guard.sac_rx != SLM_SAC_NOTDEFINED)
+	    && (level->guard.sac_w != SLM_SAC_NOTDEFINED))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#230: FILE: security/slim/slm_main.c:118:
+	if ((level->guard.sac_rx != SLM_SAC_NOTDEFINED)
+	    && (level->guard.sac_w != SLM_SAC_NOTDEFINED))

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#242: FILE: security/slim/slm_main.c:130:
+}
+static int is_isec_defined(struct slm_isec_data *isec)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#249: FILE: security/slim/slm_main.c:137:
+/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#269: FILE: security/slim/slm_main.c:157:
+		dprintk(SLM_VERBOSE, "%s: isec is null\n", __FUNCTION__);

WARNING:SPLIT_STRING: quoted string split across lines
#276: FILE: security/slim/slm_main.c:164:
+			dprintk(SLM_BASE, "pid %d - revoking write perm "
+				"for %s\n", current->pid,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#282: FILE: security/slim/slm_main.c:170:
+ * Revoke write permission on an open file.  $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cur_level->iac_level < isec->level.iac_level'
#325: FILE: security/slim/slm_main.c:213:
+	if ((mpnt->vm_flags & (VM_WRITE | VM_MAYWRITE))
+	    && (mpnt->vm_flags & VM_SHARED)
+	    && (cur_level->iac_level < isec->level.iac_level)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#326: FILE: security/slim/slm_main.c:214:
+	if ((mpnt->vm_flags & (VM_WRITE | VM_MAYWRITE))
+	    && (mpnt->vm_flags & VM_SHARED)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#327: FILE: security/slim/slm_main.c:215:
+	    && (mpnt->vm_flags & VM_SHARED)
+	    && (cur_level->iac_level < isec->level.iac_level)) {

WARNING:SPLIT_STRING: quoted string split across lines
#330: FILE: security/slim/slm_main.c:218:
+			dprintk(SLM_BASE, "%s: pid %d - unmap SYSV"
+				" shmem for %ld\n", __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#330: FILE: security/slim/slm_main.c:218:
+				" shmem for %ld\n", __FUNCTION__,

WARNING:SPLIT_STRING: quoted string split across lines
#338: FILE: security/slim/slm_main.c:226:
+				"%s: pid %d - revoking write"
+				" perm for %s\n", __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#338: FILE: security/slim/slm_main.c:226:
+				" perm for %s\n", __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#371: FILE: security/slim/slm_main.c:259:
+				__FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#391: FILE: security/slim/slm_main.c:279:
+		__FUNCTION__, relation, thread_tsk->pid);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#460: FILE: security/slim/slm_main.c:348:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#461: FILE: security/slim/slm_main.c:349:
+ * Get the 7 access class levels from the extended attribute $

WARNING:LONG_LINE_COMMENT: line length of 116 exceeds 100 columns
#462: FILE: security/slim/slm_main.c:350:
+ * Format: TIMESTAMP INTEGRITY SECRECY [INTEGRITY_GUARD INTEGRITY_GUARD] [SECRECY_GUARD SECRECY_GUARD] [GUARD_ TYPE]

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#523: FILE: security/slim/slm_main.c:411:
+ * ^I^I^I or -EINVAL$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#535: FILE: security/slim/slm_main.c:423:
+		printk(KERN_INFO

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#550: FILE: security/slim/slm_main.c:438:
+			printk(KERN_INFO "%s integrity_verify_data failed "

WARNING:SPLIT_STRING: quoted string split across lines
#551: FILE: security/slim/slm_main.c:439:
+			printk(KERN_INFO "%s integrity_verify_data failed "
+			       " (%d)\n", dentry->d_name.name, rc);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#570: FILE: security/slim/slm_main.c:458:
+}
+static inline void set_level_exempt(struct slm_file_xattr *level)

CHECK:BRACES: braces {} should be used on all arms of this statement
#599: FILE: security/slim/slm_main.c:487:
+		if (xattr_status == -EOPNOTSUPP) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPLIT_STRING: quoted string split across lines
#601: FILE: security/slim/slm_main.c:489:
+			dprintk(SLM_INTEGRITY, "%s:%s - slm_get_xattr "
+				"not supported pid %d\n", __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#601: FILE: security/slim/slm_main.c:489:
+				"not supported pid %d\n", __FUNCTION__,

CHECK:BRACES: Unbalanced braces around else statement
#604: FILE: security/slim/slm_main.c:492:
+		} else

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rc == INTEGRITY_FAIL'
#614: FILE: security/slim/slm_main.c:502:
+	if ((rc == INTEGRITY_FAIL) || (rc == INTEGRITY_NOLABEL)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rc == INTEGRITY_NOLABEL'
#614: FILE: security/slim/slm_main.c:502:
+	if ((rc == INTEGRITY_FAIL) || (rc == INTEGRITY_NOLABEL)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#614: FILE: security/slim/slm_main.c:502:
+	if ((rc == INTEGRITY_FAIL) || (rc == INTEGRITY_NOLABEL)) {
[...]
+	} else if (xattr_status == -EOPNOTSUPP)
[...]
+	else if (rc == -EINVAL)	/* improperly formatted */
[...]

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#616: FILE: security/slim/slm_main.c:504:
+			__FUNCTION__, dentry->d_name.name, rc);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*isec)...) over kzalloc(sizeof(struct slm_isec_data)...)
#628: FILE: security/slim/slm_main.c:516:
+	isec = kzalloc(sizeof(struct slm_isec_data), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:LINE_SPACING: Missing a blank line after declarations
#639: FILE: security/slim/slm_main.c:527:
+	struct slm_isec_data *isec = slm_alloc_security();
+	if (!isec)

CHECK:BRACES: braces {} should be used on all arms of this statement
#643: FILE: security/slim/slm_main.c:531:
+	if (inode->i_security) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#646: FILE: security/slim/slm_main.c:534:
+	} else

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'inode->i_sb->s_magic == PROC_SUPER_MAGIC'
#660: FILE: security/slim/slm_main.c:548:
+	if ((inode->i_sb->s_magic == PROC_SUPER_MAGIC)
+	    || S_ISCHR(inode->i_mode) || S_ISBLK(inode->i_mode))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#661: FILE: security/slim/slm_main.c:549:
+	if ((inode->i_sb->s_magic == PROC_SUPER_MAGIC)
+	    || S_ISCHR(inode->i_mode) || S_ISBLK(inode->i_mode))

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#677: FILE: security/slim/slm_main.c:565:
+		dprintk(SLM_VERBOSE, "%s: %s level %d \n", __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#677: FILE: security/slim/slm_main.c:565:
+		dprintk(SLM_VERBOSE, "%s: %s level %d \n", __FUNCTION__,

CHECK:BRACES: braces {} should be used on all arms of this statement
#688: FILE: security/slim/slm_main.c:576:
+	if (is_exempt_fastpath(inode)) {
[...]
+	} else if (S_ISSOCK(inode->i_mode))
[...]
+	else
[...]

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*tsec)...) over kzalloc(sizeof(struct slm_tsec_data)...)
#708: FILE: security/slim/slm_main.c:596:
+	tsec = kzalloc(sizeof(struct slm_tsec_data), GFP_KERNEL);

CHECK:BRACES: braces {} should be used on all arms of this statement
#712: FILE: security/slim/slm_main.c:600:
+	if (!cur_tsec) {
[...]
+	} else
[...]

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#715: FILE: security/slim/slm_main.c:603:
+			__FUNCTION__, tsk->pid, current->pid);

CHECK:BRACES: Unbalanced braces around else statement
#720: FILE: security/slim/slm_main.c:608:
+	} else

WARNING:SPLIT_STRING: quoted string split across lines
#787: FILE: security/slim/slm_main.c:675:
+		dprintk(SLM_BASE, "ppid %d(%s p=%d-%s) "
+			" pid %d(%s p=%d-%s) demoting integrity to"

WARNING:SPLIT_STRING: quoted string split across lines
#788: FILE: security/slim/slm_main.c:676:
+			" pid %d(%s p=%d-%s) demoting integrity to"
+			" iac=%d-%s(%s)\n",

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'parent_tsec->iac_r'
#793: FILE: security/slim/slm_main.c:681:
+			? "GUARD" : slm_iac_str[parent_tsec->
+						iac_r],

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

WARNING:SPLIT_STRING: quoted string split across lines
#824: FILE: security/slim/slm_main.c:712:
+		dprintk(SLM_BASE, "ppid %d(%s p=%d-%s) "
+			"pid %d(%s p=%d-%s) promoting secrecy to "

WARNING:SPLIT_STRING: quoted string split across lines
#825: FILE: security/slim/slm_main.c:713:
+			"pid %d(%s p=%d-%s) promoting secrecy to "
+			"p=%d-%s(%s)\n", parent_tsk->pid,

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'parent_tsec->sac_rx'
#829: FILE: security/slim/slm_main.c:717:
+			? "GUARD" : slm_sac_str[parent_tsec->
+						sac_rx],

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#843: FILE: security/slim/slm_main.c:731:
+		 * sensitive data */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'level->iac_level == SLM_IAC_NOTDEFINED'
#867: FILE: security/slim/slm_main.c:755:
+	if (!(is_iac_greater_than_or_exempt(level, cur_tsec->iac_wx)
+	      || (level->iac_level == SLM_IAC_NOTDEFINED))) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#868: FILE: security/slim/slm_main.c:756:
+	if (!(is_iac_greater_than_or_exempt(level, cur_tsec->iac_wx)
+	      || (level->iac_level == SLM_IAC_NOTDEFINED))) {

WARNING:SPLIT_STRING: quoted string split across lines
#871: FILE: security/slim/slm_main.c:759:
+		dprintk(SLM_BASE, "ppid %d(%s p=%d-%s) "
+			"pid %d(%s p=%d-%s) can't write higher "

WARNING:SPLIT_STRING: quoted string split across lines
#872: FILE: security/slim/slm_main.c:760:
+			"pid %d(%s p=%d-%s) can't write higher "
+			"integrity iac=%d-%s(%s)\n",

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'parent_tsec->iac_wx'
#877: FILE: security/slim/slm_main.c:765:
+			? "GUARD" : slm_iac_str[parent_tsec->
+						iac_wx],

WARNING:SPLIT_STRING: quoted string split across lines
#901: FILE: security/slim/slm_main.c:789:
+		dprintk(SLM_BASE, "ppid %d(%s p=%d-%s) "
+			"pid %d(%s p=%d-%s) can't write lower "

WARNING:SPLIT_STRING: quoted string split across lines
#902: FILE: security/slim/slm_main.c:790:
+			"pid %d(%s p=%d-%s) can't write lower "
+			"secrecy sac=%d-%s(%s)\n",

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'parent_tsec->sac_w'
#907: FILE: security/slim/slm_main.c:795:
+			? "GUARD" : slm_sac_str[parent_tsec->
+						sac_w],

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#942: FILE: security/slim/slm_main.c:830:
+			__FUNCTION__, ictr++);

CHECK:BRACES: braces {} should be used on all arms of this statement
#948: FILE: security/slim/slm_main.c:836:
+		if (current->security) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#951: FILE: security/slim/slm_main.c:839:
+		} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#957: FILE: security/slim/slm_main.c:845:
+	if (parent_tsk)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#959: FILE: security/slim/slm_main.c:847:
+	else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#960: FILE: security/slim/slm_main.c:848:
+		printk(KERN_INFO

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#962: FILE: security/slim/slm_main.c:850:
+		       __FUNCTION__, current->pid);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cur_tsec->iac_wx == SLM_IAC_UNTRUSTED'
#1003: FILE: security/slim/slm_main.c:891:
+	if (cur_tsec && (cur_tsec->iac_wx == SLM_IAC_UNTRUSTED)
+	    && S_ISBLK(inode->i_mode)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1004: FILE: security/slim/slm_main.c:892:
+	if (cur_tsec && (cur_tsec->iac_wx == SLM_IAC_UNTRUSTED)
+	    && S_ISBLK(inode->i_mode)) {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1020: FILE: security/slim/slm_main.c:908:
+				struct nameidata *nd)
 				                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1031: FILE: security/slim/slm_main.c:919:
+	dentry = (!nd || !nd->dentry) ? d_find_alias(inode) : nd->dentry;
 	           ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1035: FILE: security/slim/slm_main.c:923:
+	if (nd) {		/* preferably use fullname */
 	    ^^

WARNING:INDENTED_LABEL: labels should not be indented
#1058: FILE: security/slim/slm_main.c:946:
+      out:

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1064: FILE: security/slim/slm_main.c:952:
+/* $

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1097: FILE: security/slim/slm_main.c:985:
+		dprintk(SLM_VERBOSE, "%s: parent_isec is null\n", __FUNCTION__);

WARNING:SPLIT_STRING: quoted string split across lines
#1108: FILE: security/slim/slm_main.c:996:
+		dprintk(SLM_INTEGRITY, "%s: prohibit current %s level "
+			"process writing into %s (%s level directory)\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1109: FILE: security/slim/slm_main.c:997:
+			__FUNCTION__, slm_iac_str[cur_tsec->iac_wx],

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1121: FILE: security/slim/slm_main.c:1009:
+			 char **name, void **value, size_t * value_len)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1179: FILE: security/slim/slm_main.c:1067:
+				   char **name, void **value, size_t * len)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1196: FILE: security/slim/slm_main.c:1084:
+		dprintk(SLM_VERBOSE, "%s: level %d\n", __FUNCTION__,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cur_tsec->iac_wx != cur_tsec->iac_r'
#1206: FILE: security/slim/slm_main.c:1094:
+		if (S_ISDIR(inode->i_mode)
+		    && (cur_tsec->iac_wx != cur_tsec->iac_r))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1207: FILE: security/slim/slm_main.c:1095:
+		if (S_ISDIR(inode->i_mode)
+		    && (cur_tsec->iac_wx != cur_tsec->iac_r))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cur_tsec->iac_wx != cur_tsec->iac_r'
#1214: FILE: security/slim/slm_main.c:1102:
+	if (S_ISSOCK(inode->i_mode)
+	    && (cur_tsec->iac_wx != cur_tsec->iac_r))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1215: FILE: security/slim/slm_main.c:1103:
+	if (S_ISSOCK(inode->i_mode)
+	    && (cur_tsec->iac_wx != cur_tsec->iac_r))

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1219: FILE: security/slim/slm_main.c:1107:
+		dprintk(SLM_VERBOSE, "%s: isec is null\n", __FUNCTION__);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*data)...) over kmalloc(sizeof(struct xattr_data)...)
#1226: FILE: security/slim/slm_main.c:1114:
+	data = kmalloc(sizeof(struct xattr_data), GFP_KERNEL);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1247: FILE: security/slim/slm_main.c:1135:
+		if (is_exempt_fastpath(inode)) {
[...]
+		} else if (S_ISSOCK(inode->i_mode))
[...]
+		else
[...]

WARNING:SPLIT_STRING: quoted string split across lines
#1283: FILE: security/slim/slm_main.c:1171:
+		dprintk(SLM_VERBOSE, "%s:ppid %d (%s) %s - creating"
+			" lower integrity directory, than parent\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1284: FILE: security/slim/slm_main.c:1172:
+			__FUNCTION__, current->pid, current->comm,

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1288: FILE: security/slim/slm_main.c:1176:
+
+	}

WARNING:SPLIT_STRING: quoted string split across lines
#1310: FILE: security/slim/slm_main.c:1198:
+		dprintk(SLM_BASE, "%s: prohibit rename of %s (low"
+			" integrity) into %s (higher level directory)\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1311: FILE: security/slim/slm_main.c:1199:
+			__FUNCTION__, old_dentry->d_name.name,

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1322: FILE: security/slim/slm_main.c:1210:
+ * being promoted.
+*/

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1334: FILE: security/slim/slm_main.c:1222:
+		dprintk(SLM_VERBOSE, "%s: cur_tsec is null\n", __FUNCTION__);

WARNING:SPLIT_STRING: quoted string split across lines
#1342: FILE: security/slim/slm_main.c:1230:
+	dprintk(SLM_VERBOSE, "%s: name %s value %s process:iac_r %s "
+		"iac_wx %s\n", __FUNCTION__, name, (char *)value,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1342: FILE: security/slim/slm_main.c:1230:
+		"iac_wx %s\n", __FUNCTION__, name, (char *)value,

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1357: FILE: security/slim/slm_main.c:1245:
+		    (strncmp(data, UNTRUSTED_STR, strlen(UNTRUSTED_STR)) != 0)
+		    && (strncmp(data, EXEMPT_STR, strlen(EXEMPT_STR)) != 0))

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1382: FILE: security/slim/slm_main.c:1270:
+		dprintk(SLM_VERBOSE, "%s: isec is null\n", __FUNCTION__);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1409: FILE: security/slim/slm_main.c:1297:
+	struct slm_isec_data *isec = slm_alloc_security();
+	if (!isec)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'family != AF_UNIX'
#1428: FILE: security/slim/slm_main.c:1316:
+	if ((family != AF_UNIX) && (family != AF_NETLINK)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'family != AF_NETLINK'
#1428: FILE: security/slim/slm_main.c:1316:
+	if ((family != AF_UNIX) && (family != AF_NETLINK)) {

WARNING:SPLIT_STRING: quoted string split across lines
#1434: FILE: security/slim/slm_main.c:1322:
+				"%s: ppid %d pid %d demoting "
+				"family %d type %d protocol %d kern %d"

WARNING:SPLIT_STRING: quoted string split across lines
#1435: FILE: security/slim/slm_main.c:1323:
+				"family %d type %d protocol %d kern %d"
+				" to untrusted.\n", __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1435: FILE: security/slim/slm_main.c:1323:
+				" to untrusted.\n", __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1465: FILE: security/slim/slm_main.c:1353:
+		dprintk(SLM_VERBOSE, "%s: slm_isec is null\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1473: FILE: security/slim/slm_main.c:1361:
+				__FUNCTION__);

WARNING:SPACING: space prohibited before semicolon
#1523: FILE: security/slim/slm_main.c:1411:
+	if (!cur_tsec) ;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1523: FILE: security/slim/slm_main.c:1411:
+	if (!cur_tsec) ;

CHECK:BRACES: braces {} should be used on all arms of this statement
#1523: FILE: security/slim/slm_main.c:1411:
+	if (!cur_tsec) ;
[...]
+	else if (flags == LSM_SETID_ID) {
[...]

WARNING:SPLIT_STRING: quoted string split across lines
#1527: FILE: security/slim/slm_main.c:1415:
+		dprintk(SLM_VERBOSE, "ruid %d euid %d suid %d "
+			"cur: uid %d euid %d suid %d\n",

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cur_tsec->iac_r == cur_tsec->iac_wx'
#1530: FILE: security/slim/slm_main.c:1418:
+		if ((cur_tsec->iac_r == cur_tsec->iac_wx)
+		    && (cur_tsec->iac_r == SLM_IAC_UNTRUSTED)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cur_tsec->iac_r == SLM_IAC_UNTRUSTED'
#1530: FILE: security/slim/slm_main.c:1418:
+		if ((cur_tsec->iac_r == cur_tsec->iac_wx)
+		    && (cur_tsec->iac_r == SLM_IAC_UNTRUSTED)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1531: FILE: security/slim/slm_main.c:1419:
+		if ((cur_tsec->iac_r == cur_tsec->iac_wx)
+		    && (cur_tsec->iac_r == SLM_IAC_UNTRUSTED)) {

WARNING:SPLIT_STRING: quoted string split across lines
#1534: FILE: security/slim/slm_main.c:1422:
+				"Integrity: pid %d iac_r %d "
+				" iac_wx %d remains UNTRUSTED\n",

WARNING:SPLIT_STRING: quoted string split across lines
#1539: FILE: security/slim/slm_main.c:1427:
+			dprintk(SLM_INTEGRITY, "setting: pid %d iac_r %d "
+				" iac_wx %d to USER\n",

WARNING:SPLIT_STRING: quoted string split across lines
#1548: FILE: security/slim/slm_main.c:1436:
+			dprintk(SLM_INTEGRITY, "setting: pid %d iac_r %d "
+				" iac_wx %d to SYSTEM\n",

CHECK:BRACES: Unbalanced braces around else statement
#1555: FILE: security/slim/slm_main.c:1443:
+		} else

WARNING:SPLIT_STRING: quoted string split across lines
#1557: FILE: security/slim/slm_main.c:1445:
+			dprintk(SLM_INTEGRITY, "%s: pid %d iac_r %d "
+				" iac_wx %d \n", __FUNCTION__,

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1557: FILE: security/slim/slm_main.c:1445:
+				" iac_wx %d \n", __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1557: FILE: security/slim/slm_main.c:1445:
+				" iac_wx %d \n", __FUNCTION__,

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1567: FILE: security/slim/slm_main.c:1455:
+	dprintk(SLM_BASE, "%s: %s \n", __FUNCTION__, name);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1567: FILE: security/slim/slm_main.c:1455:
+	dprintk(SLM_BASE, "%s: %s \n", __FUNCTION__, name);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1570: FILE: security/slim/slm_main.c:1458:
+
+}

CHECK:BRACES: braces {} should be used on all arms of this statement
#1578: FILE: security/slim/slm_main.c:1466:
+	if (is_kernel_thread(tsk))
[...]
+	else if (!tsec)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1582: FILE: security/slim/slm_main.c:1470:
+	else {

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1609: FILE: security/slim/slm_main.c:1497:
+				__FUNCTION__,

CHECK:BRACES: Unbalanced braces around else statement
#1615: FILE: security/slim/slm_main.c:1503:
+		} else

WARNING:SPLIT_STRING: quoted string split across lines
#1618: FILE: security/slim/slm_main.c:1506:
+				"%s: ppid %d(%s %d-%s) pid %d(%s %d-%s)"
+				" %s executing\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1619: FILE: security/slim/slm_main.c:1507:
+				__FUNCTION__, parent_tsk->pid,

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'parent_tsec->iac_wx'
#1624: FILE: security/slim/slm_main.c:1512:
+				? "GUARD" : slm_iac_str[parent_tsec->
+							iac_wx],

WARNING:SPLIT_STRING: quoted string split across lines
#1639: FILE: security/slim/slm_main.c:1527:
+				"%s: pid %d(%s %d-%s) %s executing, "
+				"demoting integrity to iac=%d-%s\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1640: FILE: security/slim/slm_main.c:1528:
+				__FUNCTION__,

CHECK:BRACES: Unbalanced braces around else statement
#1647: FILE: security/slim/slm_main.c:1535:
+		} else

WARNING:SPLIT_STRING: quoted string split across lines
#1650: FILE: security/slim/slm_main.c:1538:
+				"%s: ppid %d(%s %d-%s) pid %d(%s %d-%s)"
+				" %s executing, demoting integrity to "

WARNING:SPLIT_STRING: quoted string split across lines
#1651: FILE: security/slim/slm_main.c:1539:
+				" %s executing, demoting integrity to "
+				" iac=%d-%s\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1652: FILE: security/slim/slm_main.c:1540:
+				__FUNCTION__, parent_tsk->pid,

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'parent_tsec->iac_wx'
#1656: FILE: security/slim/slm_main.c:1544:
+				? "GUARD" : slm_iac_str[parent_tsec->
+							iac_wx],

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'level->guard.unlimited'
#1679: FILE: security/slim/slm_main.c:1567:
+	if ((strcmp(bprm->filename, bprm->interp) != 0)
+	    && (level->guard.unlimited)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1680: FILE: security/slim/slm_main.c:1568:
+	if ((strcmp(bprm->filename, bprm->interp) != 0)
+	    && (level->guard.unlimited)) {

WARNING:SPLIT_STRING: quoted string split across lines
#1682: FILE: security/slim/slm_main.c:1570:
+		dprintk(SLM_INTEGRITY, "%s:pid %d %s prohibiting "
+			"script from being an unlimited guard\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1683: FILE: security/slim/slm_main.c:1571:
+			__FUNCTION__, current->pid, bprm->filename);

WARNING:SPLIT_STRING: quoted string split across lines
#1689: FILE: security/slim/slm_main.c:1577:
+		"%s: ppid %d pid %d %s (integrity guard)"
+		"cur: r %s wx %s new: r %s wx %s %s\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1690: FILE: security/slim/slm_main.c:1578:
+		__FUNCTION__, parent_tsk->pid, current->pid,

WARNING:SPLIT_STRING: quoted string split across lines
#1732: FILE: security/slim/slm_main.c:1620:
+				"%s: pid %d(%s %d-%s) %s "
+				" executing, promoting secrecy to sac=%d-%s\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1733: FILE: security/slim/slm_main.c:1621:
+				__FUNCTION__, current->pid,

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'cur_tsec->sac_rx'
#1737: FILE: security/slim/slm_main.c:1625:
+				? "GUARD" : slm_sac_str[cur_tsec->
+							sac_rx],

CHECK:BRACES: Unbalanced braces around else statement
#1740: FILE: security/slim/slm_main.c:1628:
+		} else

WARNING:SPLIT_STRING: quoted string split across lines
#1743: FILE: security/slim/slm_main.c:1631:
+				"%s: ppid %d(%s %d-%s) pid %d(%s %d-%s) %s"
+				"executing, promoting secrecy to sac=%d-%s\n",

WARNING:MISSING_SPACE: break quoted strings at a space character
#1743: FILE: security/slim/slm_main.c:1631:
+				"%s: ppid %d(%s %d-%s) pid %d(%s %d-%s) %s"
+				"executing, promoting secrecy to sac=%d-%s\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1744: FILE: security/slim/slm_main.c:1632:
+				__FUNCTION__, parent_tsk->pid,

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'cur_tsec->sac_rx'
#1754: FILE: security/slim/slm_main.c:1642:
+				? "GUARD" : slm_sac_str[cur_tsec->
+							sac_rx],

WARNING:SPLIT_STRING: quoted string split across lines
#1777: FILE: security/slim/slm_main.c:1665:
+		"%s: ppid %d pid %d %s (secrecy guard)"
+		"cur: rx %s w %s new: rx %s w %s\n", __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1777: FILE: security/slim/slm_main.c:1665:
+		"cur: rx %s w %s new: rx %s w %s\n", __FUNCTION__,

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1798: FILE: security/slim/slm_main.c:1686:
+ * ^I- update integrity process level of integrity guard program$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1799: FILE: security/slim/slm_main.c:1687:
+ * ^I- update secrecy process level of secrecy guard program$

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1813: FILE: security/slim/slm_main.c:1701:
+			__FUNCTION__, bprm->filename, bprm->interp);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1814: FILE: security/slim/slm_main.c:1702:
+		if (!cur_tsec->script_dentry) {
[...]
+		} else
[...]

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1817: FILE: security/slim/slm_main.c:1705:
+				__FUNCTION__, bprm->filename);

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1819: FILE: security/slim/slm_main.c:1707:
+			return 0;
+		} else

CHECK:BRACES: Unbalanced braces around else statement
#1819: FILE: security/slim/slm_main.c:1707:
+		} else

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1828: FILE: security/slim/slm_main.c:1716:
+		__FUNCTION__, bprm->filename, level.iac_level,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1840: FILE: security/slim/slm_main.c:1728:
+			__FUNCTION__, bprm->filename);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1845: FILE: security/slim/slm_main.c:1733:
+			__FUNCTION__, bprm->filename);

WARNING:SPLIT_STRING: quoted string split across lines
#1870: FILE: security/slim/slm_main.c:1758:
+			dprintk(SLM_BASE, "pid %d(%s %d-%s):deny setattr"
+				"(UID|GID) %s(%d-%s)\n",

WARNING:SPLIT_STRING: quoted string split across lines
#1879: FILE: security/slim/slm_main.c:1767:
+			dprintk(SLM_BASE, "pid %d(%s %d-%s):permit setattr"
+				"(MODE|ATIME|MTIME) %s(%d-%s)\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1897: FILE: security/slim/slm_main.c:1785:
+				__FUNCTION__, tsk->pid, tsk->comm, cap);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1915: FILE: security/slim/slm_main.c:1803:
+		dprintk(SLM_BASE, "PTRACE: ppid %d(%s)%s child pid %d(%s)%s \n",

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!parent->security"
#1917: FILE: security/slim/slm_main.c:1805:
+			parent->security == NULL ? "null isec" : " ",

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!child->security"
#1919: FILE: security/slim/slm_main.c:1807:
+			child->security == NULL ? "null isec" : " ");

ERROR:SPACING: space required before the open brace '{'
#1920: FILE: security/slim/slm_main.c:1808:
+	} else if (parent_tsec->iac_wx < child_tsec->iac_wx){

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1921: FILE: security/slim/slm_main.c:1809:
+^I^Idprintk(SLM_BASE, "ppid %d(%s p=%d-%s) deny ptrace " $

WARNING:SPLIT_STRING: quoted string split across lines
#1922: FILE: security/slim/slm_main.c:1810:
+		dprintk(SLM_BASE, "ppid %d(%s p=%d-%s) deny ptrace " 
+			"child pid %d(%s p=%d-%s) \n",

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1922: FILE: security/slim/slm_main.c:1810:
+			"child pid %d(%s p=%d-%s) \n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1923: FILE: security/slim/slm_main.c:1811:
+^I^I^Iparent->pid, parent->comm, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1927: FILE: security/slim/slm_main.c:1815:
+^I^I^Ichild->pid, child->comm, $

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1932: FILE: security/slim/slm_main.c:1820:
+		return -EPERM;
+	} else  {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1933: FILE: security/slim/slm_main.c:1821:
+^I^Idprintk(SLM_BASE, "ppid %d(%s p=%d-%s)" $

WARNING:SPLIT_STRING: quoted string split across lines
#1934: FILE: security/slim/slm_main.c:1822:
+		dprintk(SLM_BASE, "ppid %d(%s p=%d-%s)" 
+			"child pid %d(%s p=%d-%s) \n",

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1934: FILE: security/slim/slm_main.c:1822:
+			"child pid %d(%s p=%d-%s) \n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1935: FILE: security/slim/slm_main.c:1823:
+^I^I^Iparent->pid, parent->comm, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1939: FILE: security/slim/slm_main.c:1827:
+^I^I^Ichild->pid, child->comm, $

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1962: FILE: security/slim/slm_main.c:1850:
+	dprintk(SLM_INTEGRITY, "%s: level %d \n", __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1962: FILE: security/slim/slm_main.c:1850:
+	dprintk(SLM_INTEGRITY, "%s: level %d \n", __FUNCTION__,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2017: FILE: security/slim/slm_main.c:1905:
+			 char __user * shmaddr, int shmflg)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2048: FILE: security/slim/slm_main.c:1936:
+		__FUNCTION__, shp->id, mask,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2098: FILE: security/slim/slm_main.c:1986:
+^I} $

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2116: FILE: security/slim/slm_main.c:2004:
+			__FUNCTION__, slm_xattr_name);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2123: FILE: security/slim/slm_main.c:2011:
+			__FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2129: FILE: security/slim/slm_main.c:2017:
+			"%s: Error registering debugfs\n", __FUNCTION__);

WARNING:SPLIT_STRING: quoted string split across lines
#2137: FILE: security/slim/slm_main.c:2025:
+				"%s: security hooks registration "
+				"failed\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2137: FILE: security/slim/slm_main.c:2025:
+				"failed\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2144: FILE: security/slim/slm_main.c:2032:
+	dprintk(SLM_BASE, "%s: registered security hooks\n", __FUNCTION__);

WARNING:SPLIT_STRING: quoted string split across lines
#2156: FILE: security/slim/slm_main.c:2044:
+				"%s: failure unregistering module "
+				"with primary module.\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2156: FILE: security/slim/slm_main.c:2044:
+				"with primary module.\n", __FUNCTION__);

WARNING:SPLIT_STRING: quoted string split across lines
#2160: FILE: security/slim/slm_main.c:2048:
+			"%s: failure unregistering module "
+			"with the kernel\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2160: FILE: security/slim/slm_main.c:2048:
+			"with the kernel\n", __FUNCTION__);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2162: FILE: security/slim/slm_main.c:2050:
+	dprintk(SLM_BASE, "%s: completed \n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2162: FILE: security/slim/slm_main.c:2050:
+	dprintk(SLM_BASE, "%s: completed \n", __FUNCTION__);

ERROR:NON_OCTAL_PERMISSIONS: Use 4 digit octal (0777) not decimal permissions
#2168: FILE: security/slim/slm_main.c:2056:
+module_param(slm_debug, uint, 1);
Permission bits should use 4 digit octal permissions (like 0700 or 0444).
Avoid using any other base like decimal.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.55329.commit.ba30099a00227c54220978ae09714e231dda1d05 total: 19 errors, 128 warnings, 61 checks, 2059 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.55329.commit.ba30099a00227c54220978ae09714e231dda1d05 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
