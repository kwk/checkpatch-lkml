WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#41: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#46: FILE: fs/unionfs/main.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#91: FILE: fs/unionfs/main.c:46:
+	BUG_ON(is_negative_dentry);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#143: FILE: fs/unionfs/main.c:98:
+		unionfs_set_lower_inode_idx(inode, bindex,
+				igrab(hidden_dentry->d_inode));

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#179: FILE: fs/unionfs/main.c:134:
+	switch (flag) {
+		case INTERPOSE_DEFAULT:
+		case INTERPOSE_REVAL_NEG:
[...]
+		case INTERPOSE_LOOKUP:
[...]
+		case INTERPOSE_REVAL:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#191: FILE: fs/unionfs/main.c:146:
+			printk(KERN_ERR "Invalid interpose flag passed!");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#192: FILE: fs/unionfs/main.c:147:
+			BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#224: FILE: fs/unionfs/main.c:179:
+		unionfs_set_lower_inode_idx(inode, bindex,
+				igrab(hidden_dentry->d_inode));

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#230: FILE: fs/unionfs/main.c:185:
+/* make sure the branch we just looked up (nd) makes sense:
                                            ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#236: FILE: fs/unionfs/main.c:191:
+int check_branch(struct nameidata *nd)
                                    ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#271: FILE: fs/unionfs/main.c:226:
+	int l = strlen(name);
+	if (!strcmp(name + l - 3, "=ro")) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#271: FILE: fs/unionfs/main.c:226:
+	if (!strcmp(name + l - 3, "=ro")) {
[...]
+	} else if (!strcmp(name + l - 3, "=rw")) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#277: FILE: fs/unionfs/main.c:232:
+	} else

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#287: FILE: fs/unionfs/main.c:242:
+	struct nameidata nd;
 	                 ^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#299: FILE: fs/unionfs/main.c:254:
+		printk(KERN_WARNING "unionfs: no branches specified\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#313: FILE: fs/unionfs/main.c:268:
+	UNIONFS_SB(sb)->data = kcalloc(branches,
+			sizeof(struct unionfs_data), GFP_KERNEL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#320: FILE: fs/unionfs/main.c:275:
+	hidden_root_info->lower_paths = kcalloc(branches,
+			sizeof(struct path), GFP_KERNEL);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#343: FILE: fs/unionfs/main.c:298:
+		err = path_lookup(name, LOOKUP_FOLLOW, &nd);
 		                                        ^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#345: FILE: fs/unionfs/main.c:300:
+			printk(KERN_WARNING "unionfs: error accessing "

WARNING:SPLIT_STRING: quoted string split across lines
#346: FILE: fs/unionfs/main.c:301:
+			printk(KERN_WARNING "unionfs: error accessing "
+			       "hidden directory '%s' (error %d)\n", name, err);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#350: FILE: fs/unionfs/main.c:305:
+		if ((err = check_branch(&nd))) {
 		                         ^^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#350: FILE: fs/unionfs/main.c:305:
+		if ((err = check_branch(&nd))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#351: FILE: fs/unionfs/main.c:306:
+			printk(KERN_WARNING "unionfs: hidden directory "

WARNING:SPLIT_STRING: quoted string split across lines
#352: FILE: fs/unionfs/main.c:307:
+			printk(KERN_WARNING "unionfs: hidden directory "
+			       "'%s' is not a valid branch\n", name);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#353: FILE: fs/unionfs/main.c:308:
+			path_release(&nd);
 			              ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#357: FILE: fs/unionfs/main.c:312:
+		hidden_root_info->lower_paths[bindex].dentry = nd.dentry;
 		                                               ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#358: FILE: fs/unionfs/main.c:313:
+		hidden_root_info->lower_paths[bindex].mnt = nd.mnt;
 		                                            ^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#370: FILE: fs/unionfs/main.c:325:
+		printk(KERN_WARNING "unionfs: no branches specified\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#375: FILE: fs/unionfs/main.c:330:
+	BUG_ON(branches != (hidden_root_info->bend + 1));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#384: FILE: fs/unionfs/main.c:339:
+				printk(KERN_WARNING "unionfs: branches %d and "

WARNING:SPLIT_STRING: quoted string split across lines
#385: FILE: fs/unionfs/main.c:340:
+				printk(KERN_WARNING "unionfs: branches %d and "
+					"%d overlap\n", i, j);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#453: FILE: fs/unionfs/main.c:408:
+			printk("unionfs: %s requires an argument.\n", optname);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#460: FILE: fs/unionfs/main.c:415:
+				printk(KERN_WARNING

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#472: FILE: fs/unionfs/main.c:427:
+		intval = simple_strtoul(optarg, &endptr, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#474: FILE: fs/unionfs/main.c:429:
+			printk(KERN_WARNING

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#482: FILE: fs/unionfs/main.c:437:
+		printk(KERN_WARNING

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#487: FILE: fs/unionfs/main.c:442:
+		printk(KERN_WARNING "unionfs: dirs option required\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#522: FILE: fs/unionfs/main.c:477:
+/* our custom d_alloc_root workalike $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#532: FILE: fs/unionfs/main.c:487:
+		static const struct qstr name = {.name = "/",.len = 1 };
 		                                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#553: FILE: fs/unionfs/main.c:508:
+		printk(KERN_WARNING

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'unionfs_read_super', this function's name, in a string
#554: FILE: fs/unionfs/main.c:509:
+		       "unionfs_read_super: missing data argument\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*sb->s_fs_info)...) over kzalloc(sizeof(struct unionfs_sb_info)...)
#560: FILE: fs/unionfs/main.c:515:
+	sb->s_fs_info = kzalloc(sizeof(struct unionfs_sb_info), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#562: FILE: fs/unionfs/main.c:517:
+		printk(KERN_WARNING "%s: out of memory\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#562: FILE: fs/unionfs/main.c:517:
+		printk(KERN_WARNING "%s: out of memory\n", __FUNCTION__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#573: FILE: fs/unionfs/main.c:528:
+		printk(KERN_WARNING

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'unionfs_read_super', this function's name, in a string
#574: FILE: fs/unionfs/main.c:529:
+		       "unionfs_read_super: error while parsing options "

WARNING:SPLIT_STRING: quoted string split across lines
#575: FILE: fs/unionfs/main.c:530:
+		       "unionfs_read_super: error while parsing options "
+		       "(err = %ld)\n", PTR_ERR(hidden_root_info));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#587: FILE: fs/unionfs/main.c:542:
+	BUG_ON(bstart != 0);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#611: FILE: fs/unionfs/main.c:566:
+	if ((err = new_dentry_private_data(sb->s_root)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#632: FILE: fs/unionfs/main.c:587:
+	if ((err = unionfs_interpose(sb->s_root, sb, 0)))

WARNING:LINE_SPACING: Missing a blank line after declarations
#693: FILE: fs/unionfs/main.c:648:
+	int err;
+	printk("Registering unionfs " UNIONFS_VERSION "\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#693: FILE: fs/unionfs/main.c:648:
+	printk("Registering unionfs " UNIONFS_VERSION "\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#695: FILE: fs/unionfs/main.c:650:
+	if ((err = unionfs_init_filldir_cache()))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#697: FILE: fs/unionfs/main.c:652:
+	if ((err = unionfs_init_inode_cache()))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#699: FILE: fs/unionfs/main.c:654:
+	if ((err = unionfs_init_dentry_cache()))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#701: FILE: fs/unionfs/main.c:656:
+	if ((err = init_sioq()))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#721: FILE: fs/unionfs/main.c:676:
+	printk("Completed unionfs module unload.\n");

WARNING:SPLIT_STRING: quoted string split across lines
#725: FILE: fs/unionfs/main.c:680:
+MODULE_AUTHOR("Erez Zadok, Filesystems and Storage Lab, Stony Brook University"
+		" (http://www.fsl.cs.sunysb.edu)");

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.03521.commit.18af579ae993b1f3bcd546c8e2c153b9669f9133 total: 10 errors, 41 warnings, 7 checks, 687 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.03521.commit.18af579ae993b1f3bcd546c8e2c153b9669f9133 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
