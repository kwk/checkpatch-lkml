WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#61: 
Content-Disposition: attachment; filename="caps-0.3.1-split-part1-setsize-linux-2.6.18-rc6.patch"

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#81: FILE: fs/proc/array.c:288:
+    return buffer + sprintf(buffer, "CapInh:\t%016llx\n"$

ERROR:CODE_INDENT: code indent should use tabs where possible
#105: FILE: include/linux/capability.h:39:
+        __u64 effective;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#105: FILE: include/linux/capability.h:39:
+        __u64 effective;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#106: FILE: include/linux/capability.h:40:
+        __u64 permitted;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#106: FILE: include/linux/capability.h:40:
+        __u64 permitted;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#107: FILE: include/linux/capability.h:41:
+        __u64 inheritable;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#107: FILE: include/linux/capability.h:41:
+        __u64 inheritable;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#109: FILE: include/linux/capability.h:43:
+ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#109: FILE: include/linux/capability.h:43:
+ $

WARNING:NEW_TYPEDEFS: do not add new typedefs
#110: FILE: include/linux/capability.h:44:
+typedef struct __user_cap_data_old_struct {

ERROR:SPACING: space required before the open parenthesis '('
#159: FILE: include/linux/capability.h:362:
+#define cap_clear(c)         do { cap_t(c) =  0ULL; } while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#159: FILE: include/linux/capability.h:362:
+#define cap_clear(c)         do { cap_t(c) =  0ULL; } while(0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

ERROR:SPACING: space required before the open parenthesis '('
#160: FILE: include/linux/capability.h:363:
+#define cap_set_full(c)      do { cap_t(c) = ~0ULL; } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#160: FILE: include/linux/capability.h:363:
+#define cap_set_full(c)      do { cap_t(c) = ~0ULL; } while(0)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#173: FILE: kernel/capability.c:55:
+     if (version != _LINUX_CAPABILITY_VERSION$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (5, 13)
#173: FILE: kernel/capability.c:55:
+     if (version != _LINUX_CAPABILITY_VERSION
[...]
 	     if (put_user(_LINUX_CAPABILITY_VERSION, &header->version))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#174: FILE: kernel/capability.c:56:
+     if (version != _LINUX_CAPABILITY_VERSION
+	 && version != _LINUX_CAPABILITY_OLD_VERSION) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#184: FILE: kernel/capability.c:86:
+     if (!ret) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (5, 13)
#184: FILE: kernel/capability.c:86:
+     if (!ret) {
+	     if (version == _LINUX_CAPABILITY_OLD_VERSION) {

WARNING:TABSTOP: Statements should start on a tabstop
#185: FILE: kernel/capability.c:87:
+	     if (version == _LINUX_CAPABILITY_OLD_VERSION) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (13, 21)
#185: FILE: kernel/capability.c:87:
+	     if (version == _LINUX_CAPABILITY_OLD_VERSION) {
+		     struct __user_cap_data_old_struct data_old;

WARNING:TABSTOP: Statements should start on a tabstop
#186: FILE: kernel/capability.c:88:
+		     struct __user_cap_data_old_struct data_old;

WARNING:LINE_SPACING: Missing a blank line after declarations
#187: FILE: kernel/capability.c:89:
+		     struct __user_cap_data_old_struct data_old;
+		     data_old.effective = data_old.effective & 0xffffffffULL;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TABSTOP: Statements should start on a tabstop
#190: FILE: kernel/capability.c:92:
+		     if (copy_to_user(dataptr, &data_old, sizeof data_old))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (21, 29)
#190: FILE: kernel/capability.c:92:
+		     if (copy_to_user(dataptr, &data_old, sizeof data_old))
+			     return -EFAULT;

WARNING:SIZEOF_PARENTHESIS: sizeof data_old should be sizeof(data_old)
#190: FILE: kernel/capability.c:92:
+		     if (copy_to_user(dataptr, &data_old, sizeof data_old))

WARNING:TABSTOP: Statements should start on a tabstop
#191: FILE: kernel/capability.c:93:
+			     return -EFAULT;

WARNING:TABSTOP: Statements should start on a tabstop
#192: FILE: kernel/capability.c:94:
+	     } else

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (13, 21)
#192: FILE: kernel/capability.c:94:
+	     } else
+		     if (copy_to_user(dataptr, &data, sizeof data))

CHECK:BRACES: Unbalanced braces around else statement
#192: FILE: kernel/capability.c:94:
+	     } else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TABSTOP: Statements should start on a tabstop
#193: FILE: kernel/capability.c:95:
+		     if (copy_to_user(dataptr, &data, sizeof data))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (21, 29)
#193: FILE: kernel/capability.c:95:
+		     if (copy_to_user(dataptr, &data, sizeof data))
+			     return -EFAULT;

WARNING:SIZEOF_PARENTHESIS: sizeof data should be sizeof(data)
#193: FILE: kernel/capability.c:95:
+		     if (copy_to_user(dataptr, &data, sizeof data))

WARNING:TABSTOP: Statements should start on a tabstop
#194: FILE: kernel/capability.c:96:
+			     return -EFAULT;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#195: FILE: kernel/capability.c:97:
+     }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#204: FILE: kernel/capability.c:193:
+     if (version != _LINUX_CAPABILITY_VERSION$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (5, 13)
#204: FILE: kernel/capability.c:193:
+     if (version != _LINUX_CAPABILITY_VERSION
[...]
 	     if (put_user(_LINUX_CAPABILITY_VERSION, &header->version))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#205: FILE: kernel/capability.c:194:
+     if (version != _LINUX_CAPABILITY_VERSION
+	 && version != _LINUX_CAPABILITY_OLD_VERSION) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#217: FILE: kernel/capability.c:206:
+     if (version == _LINUX_CAPABILITY_OLD_VERSION) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (5, 13)
#217: FILE: kernel/capability.c:206:
+     if (version == _LINUX_CAPABILITY_OLD_VERSION) {
+	     const cap_user_data_old_t data2 = (void *)data;

WARNING:TABSTOP: Statements should start on a tabstop
#218: FILE: kernel/capability.c:207:
+	     const cap_user_data_old_t data2 = (void *)data;

WARNING:TABSTOP: Statements should start on a tabstop
#219: FILE: kernel/capability.c:208:
+	     __u32 w;

WARNING:TABSTOP: Statements should start on a tabstop
#220: FILE: kernel/capability.c:209:
+	     if (copy_from_user(&w, &data2->effective, sizeof(w)))

WARNING:LINE_SPACING: Missing a blank line after declarations
#220: FILE: kernel/capability.c:209:
+	     __u32 w;
+	     if (copy_from_user(&w, &data2->effective, sizeof(w)))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (13, 21)
#220: FILE: kernel/capability.c:209:
+	     if (copy_from_user(&w, &data2->effective, sizeof(w)))
+		     return -EFAULT;

WARNING:TABSTOP: Statements should start on a tabstop
#221: FILE: kernel/capability.c:210:
+		     return -EFAULT;

WARNING:TABSTOP: Statements should start on a tabstop
#223: FILE: kernel/capability.c:212:
+	     if (copy_from_user(&w, &data2->inheritable, sizeof(w)))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (13, 21)
#223: FILE: kernel/capability.c:212:
+	     if (copy_from_user(&w, &data2->inheritable, sizeof(w)))
+		     return -EFAULT;

WARNING:TABSTOP: Statements should start on a tabstop
#224: FILE: kernel/capability.c:213:
+		     return -EFAULT;

WARNING:TABSTOP: Statements should start on a tabstop
#226: FILE: kernel/capability.c:215:
+	     if (copy_from_user(&w, &data2->permitted, sizeof(w)))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (13, 21)
#226: FILE: kernel/capability.c:215:
+	     if (copy_from_user(&w, &data2->permitted, sizeof(w)))
+		     return -EFAULT;

WARNING:TABSTOP: Statements should start on a tabstop
#227: FILE: kernel/capability.c:216:
+		     return -EFAULT;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#229: FILE: kernel/capability.c:218:
+     } else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (5, 13)
#229: FILE: kernel/capability.c:218:
+     } else
+	     if (copy_from_user(&effective, &data->effective, sizeof(effective)) ||

CHECK:BRACES: Unbalanced braces around else statement
#229: FILE: kernel/capability.c:218:
+     } else

WARNING:TABSTOP: Statements should start on a tabstop
#230: FILE: kernel/capability.c:219:
+	     if (copy_from_user(&effective, &data->effective, sizeof(effective)) ||

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (13, 21)
#230: FILE: kernel/capability.c:219:
+	     if (copy_from_user(&effective, &data->effective, sizeof(effective)) ||
[...]
+		     return -EFAULT; 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#233: FILE: kernel/capability.c:222:
+^I^I     return -EFAULT; $

WARNING:TABSTOP: Statements should start on a tabstop
#233: FILE: kernel/capability.c:222:
+		     return -EFAULT; 

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#252: FILE: security/commoncap.c:250:
+			current->cap_permitted
+				= cap_intersect (current->cap_permitted,

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#252: FILE: security/commoncap.c:250:
+				= cap_intersect (current->cap_permitted,

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#255: FILE: security/commoncap.c:253:
+			current->cap_effective
+				= cap_intersect (current->cap_effective,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#255: FILE: security/commoncap.c:253:
+				= cap_intersect (current->cap_effective,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#261: FILE: security/commoncap.c:258:
+		current->cap_effective = cap_intersect (current->cap_effective,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#356: FILE: security/commoncap.c:101:
+	 * cap_capset_set will intersect them anyway */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#365: FILE: security/commoncap.c:110:
+	target->cap_inheritable = cap_intersect (*effective, *inheritable);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#374: FILE: security/commoncap.c:119:
+	cap_set_full (bprm->cap_inheritable);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#377: FILE: security/commoncap.c:121:
+	cap_set_full (bprm->cap_effective);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#414: FILE: security/commoncap.c:150:
+	new_effective = cap_intersect (bprm->cap_permitted, bprm->cap_effective);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#415: FILE: security/commoncap.c:151:
+	new_effective = cap_intersect (new_effective, cap_bset);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#416: FILE: security/commoncap.c:152:
+	working = cap_intersect (bprm->cap_inheritable,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#418: FILE: security/commoncap.c:154:
+	working = cap_intersect (working, current->cap_inheritable);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#419: FILE: security/commoncap.c:155:
+	new_effective = cap_combine (new_effective, working);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#430: FILE: security/commoncap.c:171:
+				new_effective = cap_intersect (new_permitted,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#458: FILE: security/commoncap.c:189:
+	cap_task_post_setuid (old_ruid, old_euid, old_suid, LSM_SETID_RES);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#471: FILE: security/commoncap.c:202:
+	return ((bprm->is_suid || bprm->is_sgid)
+		&& !cap_issubset (cap_bset, current->cap_permitted));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#471: FILE: security/commoncap.c:202:
+		&& !cap_issubset (cap_bset, current->cap_permitted));

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#480: FILE: security/commoncap.c:268:
+		current->cap_inheritable
+			= cap_intersect (current->cap_inheritable,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#480: FILE: security/commoncap.c:268:
+			= cap_intersect (current->cap_inheritable,

WARNING:BRACES: braces {} are not necessary for single statement blocks
#489: FILE: security/commoncap.c:275:
+	if (old_euid != 0 && current->euid == 0 && !current->keep_capabilities) {
 		current->cap_effective = current->cap_permitted;
 	}

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IXGRP' are not preferred. Consider using octal permissions '0010'.
#522: FILE: fs/exec.c:945:
+		if ((mode & (S_ISGID | S_IXGRP)) == (S_ISGID | S_IXGRP)

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IXGRP' are not preferred. Consider using octal permissions '0010'.
#522: FILE: fs/exec.c:945:
+		if ((mode & (S_ISGID | S_IXGRP)) == (S_ISGID | S_IXGRP)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#523: FILE: fs/exec.c:946:
+		if ((mode & (S_ISGID | S_IXGRP)) == (S_ISGID | S_IXGRP)
+		    && capable(CAP_REG_SXID)) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#572: FILE: include/linux/capability.h:298:
 
+

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.40473.commit.3a46a28f4388089b6fe0f4884675bac1a5cb2537 total: 7 errors, 68 warnings, 10 checks, 431 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.40473.commit.3a46a28f4388089b6fe0f4884675bac1a5cb2537 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
