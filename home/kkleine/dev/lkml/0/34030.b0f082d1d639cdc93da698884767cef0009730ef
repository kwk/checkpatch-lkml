WARNING:TYPO_SPELLING: 'knowlege' may be misspelled - perhaps 'knowledge'?
#31: 
This patch removes all cpuset-specific knowlege from the container
                                       ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#80: FILE: include/linux/container.h:96:
+	void (*post_attach)(struct container *cont,
+			   struct container *old_cont,

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#131: FILE: kernel/container.c:67:
+static int subsys_count = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#155: FILE: kernel/container.c:516:
+		if (!subsys[s]->can_attach) continue;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#172: FILE: kernel/container.c:539:
+		if (!subsys[s]->attach) continue;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#182: FILE: kernel/container.c:546:
+		if (!subsys[s]->post_attach) continue;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#203: FILE: kernel/container.c:1003:
+		if (!subsys[s]->populate) continue;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#204: FILE: kernel/container.c:1004:
+		if ((err = subsys[s]->populate(cont)) < 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#227: FILE: kernel/container.c:1040:
+		if (!subsys[s]->create) continue;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#231: FILE: kernel/container.c:1044:
+				if (!subsys[s]->destroy) continue;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#248: FILE: kernel/container.c:1073:
+		if (!subsys[s]->destroy) continue;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#271: FILE: kernel/container.c:1138:
+		if (!subsys[s]->destroy) continue;

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#281: FILE: kernel/container.c:1195:
+int container_register_subsys(struct container_subsys *new_subsys) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#282: FILE: kernel/container.c:1196:
+	if (number_of_containers > 1) return -EBUSY;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#283: FILE: kernel/container.c:1197:
+	if (subsys_count == MAX_CONTAINER_SUBSYS) return -ENOSPC;

WARNING:LINE_SPACING: Missing a blank line after declarations
#288: FILE: kernel/container.c:1202:
+		int err = new_subsys->create(&top_container);
+		if (err) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#295: FILE: kernel/container.c:1209:
+	 * container_init() */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BRACES: braces {} are not necessary for single statement blocks
#296: FILE: kernel/container.c:1210:
+	if (container_mount && new_subsys->populate) {
+		new_subsys->populate(&top_container);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required after that ',' (ctx:VxO)
#394: FILE: kernel/cpuset.c:489:
+	guarantee_online_mems(task_cs(tsk),&tsk->mems_allowed);
 	                                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before that '&' (ctx:OxV)
#394: FILE: kernel/cpuset.c:489:
+	guarantee_online_mems(task_cs(tsk),&tsk->mems_allowed);
 	                                   ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#510: FILE: kernel/cpuset.c:1154:
+  .create = cpuset_create,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#511: FILE: kernel/cpuset.c:1155:
+  .destroy  = cpuset_destroy,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#512: FILE: kernel/cpuset.c:1156:
+  .can_attach = cpuset_can_attach,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#513: FILE: kernel/cpuset.c:1157:
+  .attach = cpuset_attach,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#514: FILE: kernel/cpuset.c:1158:
+  .post_attach = cpuset_post_attach,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#515: FILE: kernel/cpuset.c:1159:
+  .populate = cpuset_populate,$

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.34030.commit.b0f082d1d639cdc93da698884767cef0009730ef total: 15 errors, 10 warnings, 1 checks, 628 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.34030.commit.b0f082d1d639cdc93da698884767cef0009730ef has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
