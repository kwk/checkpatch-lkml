WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
- attach a callback for updating pointer from file descriptor to a task invoked

WARNING:TYPO_SPELLING: 'additonal' may be misspelled - perhaps 'additional'?
#37: 
*Bad* point is adding additonal (small) lock and callback in exit path.
                      ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'modifing' may be misspelled - perhaps 'modifying'?
#49: 
- just added new member to task struct instead of modifing already used list
                                                  ^^^^^^^^

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#70: 
Signed-Off-By: KAMEZAWA Hiroyuki <kamezawa.hiroyu@jp.fujitsu.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#82: FILE: include/linux/adaptive_pointer.h:1:
+#ifndef __LINUX_ADAPTIVE_POINTER_H__

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct adaptive_pointer *' should also have an identifier name
#108: FILE: include/linux/adaptive_pointer.h:27:
+	void (*callback)(struct adaptive_pointer *, struct adaptive_pointer *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct adaptive_pointer *' should also have an identifier name
#108: FILE: include/linux/adaptive_pointer.h:27:
+	void (*callback)(struct adaptive_pointer *, struct adaptive_pointer *);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ap' - possible side-effects?
#111: FILE: include/linux/adaptive_pointer.h:30:
+#define ADAPTIVE_POINTER_INIT(ap)	\
+	{LIST_HEAD_INIT((ap).list), SPIN_LOCK_UNLOCKED, &(ap), NULL}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ap' - possible side-effects?
#115: FILE: include/linux/adaptive_pointer.h:34:
+#define is_ap_alive(ap)	((ap) == (ap)->target)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ap' - possible side-effects?
#116: FILE: include/linux/adaptive_pointer.h:35:
+#define ap_alive(ap)	((ap)->target = (ap)) /* obj can be accessed */

CHECK:SPACING: No space is necessary after a cast
#120: FILE: include/linux/adaptive_pointer.h:39:
+#define ADAPTIVE_POINTER_INVAL	((struct adaptive_pointer *) -1)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#134: FILE: include/linux/adaptive_pointer.h:53:
+ *           ^I      ^I    calls all registered callbacks.$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#140: FILE: include/linux/adaptive_pointer.h:59:
+	BUG_ON(!is_ap_alive(obj));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:MEMORY_BARRIER: memory barrier without comment
#144: FILE: include/linux/adaptive_pointer.h:63:
+	wmb();

ERROR:SPACING: space required after that ',' (ctx:VxO)
#146: FILE: include/linux/adaptive_pointer.h:65:
+		struct adaptive_pointer *ent,*tmp;
 		                            ^

ERROR:SPACING: space required before that '*' (ctx:OxV)
#146: FILE: include/linux/adaptive_pointer.h:65:
+		struct adaptive_pointer *ent,*tmp;
 		                             ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#147: FILE: include/linux/adaptive_pointer.h:66:
+		struct adaptive_pointer *ent,*tmp;
+		list_for_each_entry_safe(ent, tmp, &obj->list, list) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:RETURN_VOID: void function return statements are not generally useful
#156: FILE: include/linux/adaptive_pointer.h:75:
+	return;
+}

ERROR:POINTER_LOCATION: "foo*bar" should be "foo *bar"
#164: FILE: include/linux/adaptive_pointer.h:83:
+ap_attach(struct adaptive_pointer *new, struct adaptive_pointer*obj)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#167: FILE: include/linux/adaptive_pointer.h:86:
+	struct adaptive_pointer *ret = NULL;
+	invalidate_ap(new);

WARNING:TYPO_SPELLING: 'poiter' may be misspelled - perhaps 'pointer'?
#180: FILE: include/linux/adaptive_pointer.h:99:
+ * returns NULL if poiter target is lost. must be called under read lock.
                    ^^^^^^

WARNING:TYPO_SPELLING: 'poiter' may be misspelled - perhaps 'pointer'?
#207: FILE: include/linux/adaptive_pointer.h:126:
+ * returns NULL if poiter target is lost. must be called under read lock.
                    ^^^^^^

WARNING:TYPO_SPELLING: 'taget' may be misspelled - perhaps 'target'?
#208: FILE: include/linux/adaptive_pointer.h:127:
+ * read_lock will guarantee taget object is now freed while this access.
                             ^^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'obj == ent->target'
#222: FILE: include/linux/adaptive_pointer.h:141:
+		if (is_ap_alive(obj) && (obj == ent->target)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:BRACES: braces {} should be used on all arms of this statement
#222: FILE: include/linux/adaptive_pointer.h:141:
+		if (is_ap_alive(obj) && (obj == ent->target)) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#225: FILE: include/linux/adaptive_pointer.h:144:
+		} else

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#239: FILE: include/linux/adaptive_pointer.h:158:
+	((__ret)? container_of(__ret, type, member) : NULL);})
 	        ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#239: FILE: include/linux/adaptive_pointer.h:158:
+	((__ret)? container_of(__ret, type, member) : NULL);})
 	                                                   ^

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#244: FILE: include/linux/adaptive_pointer.h:163:
+	((__ret)? container_of(__ret, type, member) : NULL);})
 	        ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#244: FILE: include/linux/adaptive_pointer.h:163:
+	((__ret)? container_of(__ret, type, member) : NULL);})
 	                                                   ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#246: FILE: include/linux/adaptive_pointer.h:165:
+
+

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.44155.commit.406deaa0b4c67efc5f5f86aa3ae63d96c1236fb7 total: 7 errors, 16 warnings, 8 checks, 167 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.44155.commit.406deaa0b4c67efc5f5f86aa3ae63d96c1236fb7 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
