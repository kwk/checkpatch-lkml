WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#38: 
the kernel tracking contention against the slow path of an a rt_mutex in -rt

WARNING:TYPO_SPELLING: 'inheritence' may be misspelled - perhaps 'inheritance'?
#39: 
kernels before blocking and possibly priority inheritence boosting. This is
                                              ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#166: FILE: linux/lock_stat.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#191: FILE: linux/lock_stat.h:26:
+#include <asm/atomic.h>

WARNING:NEW_TYPEDEFS: do not add new typedefs
#193: FILE: linux/lock_stat.h:28:
+typedef struct lock_stat {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#206: FILE: linux/lock_stat.h:41:
+typedef lock_stat_t *lock_stat_ref_t;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#209: FILE: linux/lock_stat.h:44:
+#define LOCK_STAT_INITIALIZER(field) { ^I^I^I\$

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#210: FILE: linux/lock_stat.h:45:
+		__FILE__, __FUNCTION__, __LINE__,	\

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#213: FILE: linux/lock_stat.h:48:
+#define LOCK_STAT_NOTE			__FILE__, __FUNCTION__, __LINE__

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#213: FILE: linux/lock_stat.h:48:
+#define LOCK_STAT_NOTE			__FILE__, __FUNCTION__, __LINE__

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#214: FILE: linux/lock_stat.h:49:
+#define LOCK_STAT_NOTE_VARS		_file, _function, _line

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#219: FILE: linux/lock_stat.h:54:
+#define __COMMA_LOCK_STAT_FN_DECL	, const char *_function
                                  	^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#220: FILE: linux/lock_stat.h:55:
+#define __COMMA_LOCK_STAT_FN_VAR	, _function
                                 	^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#220: FILE: linux/lock_stat.h:55:
+#define __COMMA_LOCK_STAT_FN_VAR	, _function

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#221: FILE: linux/lock_stat.h:56:
+#define __COMMA_LOCK_STAT_NOTE_FN	, __FUNCTION__
                                  	^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#221: FILE: linux/lock_stat.h:56:
+#define __COMMA_LOCK_STAT_NOTE_FN	, __FUNCTION__

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#221: FILE: linux/lock_stat.h:56:
+#define __COMMA_LOCK_STAT_NOTE_FN	, __FUNCTION__

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#223: FILE: linux/lock_stat.h:58:
+#define __COMMA_LOCK_STAT_NOTE		, LOCK_STAT_NOTE
                               		^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#223: FILE: linux/lock_stat.h:58:
+#define __COMMA_LOCK_STAT_NOTE		, LOCK_STAT_NOTE

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#224: FILE: linux/lock_stat.h:59:
+#define __COMMA_LOCK_STAT_NOTE_VARS	, LOCK_STAT_NOTE_VARS
                                    	^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#224: FILE: linux/lock_stat.h:59:
+#define __COMMA_LOCK_STAT_NOTE_VARS	, LOCK_STAT_NOTE_VARS

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#225: FILE: linux/lock_stat.h:60:
+#define __COMMA_LOCK_STAT_NOTE_PARAM_DECL , LOCK_STAT_NOTE_PARAM_DECL
                                           ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#225: FILE: linux/lock_stat.h:60:
+#define __COMMA_LOCK_STAT_NOTE_PARAM_DECL , LOCK_STAT_NOTE_PARAM_DECL

CHECK:LINE_SPACING: Please don't use multiple blank lines
#227: FILE: linux/lock_stat.h:62:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#228: FILE: linux/lock_stat.h:63:
+#define __COMMA_LOCK_STAT_NOTE_FLLN_DECL , const char *_file, int _line
                                          ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#229: FILE: linux/lock_stat.h:64:
+#define __COMMA_LOCK_STAT_NOTE_FLLN	 , __FILE__, __LINE__
                                    	 ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#229: FILE: linux/lock_stat.h:64:
+#define __COMMA_LOCK_STAT_NOTE_FLLN	 , __FILE__, __LINE__

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#230: FILE: linux/lock_stat.h:65:
+#define __COMMA_LOCK_STAT_NOTE_FLLN_VARS , _file, _line
                                          ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#230: FILE: linux/lock_stat.h:65:
+#define __COMMA_LOCK_STAT_NOTE_FLLN_VARS , _file, _line

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#232: FILE: linux/lock_stat.h:67:
+#define __COMMA_LOCK_STAT_INITIALIZER	, .lock_stat = NULL,
                                      	^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#234: FILE: linux/lock_stat.h:69:
+#define __COMMA_LOCK_STAT_IP_DECL	, unsigned long _ip
                                  	^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#235: FILE: linux/lock_stat.h:70:
+#define __COMMA_LOCK_STAT_IP		, _ip
                             		^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#235: FILE: linux/lock_stat.h:70:
+#define __COMMA_LOCK_STAT_IP		, _ip

CHECK:SPACING: No space is necessary after a cast
#236: FILE: linux/lock_stat.h:71:
+#define __COMMA_LOCK_STAT_RET_IP	, (unsigned long) __builtin_return_address(0)

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#236: FILE: linux/lock_stat.h:71:
+#define __COMMA_LOCK_STAT_RET_IP	, (unsigned long) __builtin_return_address(0)
                                 	^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#236: FILE: linux/lock_stat.h:71:
+#define __COMMA_LOCK_STAT_RET_IP	, (unsigned long) __builtin_return_address(0)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#238: FILE: linux/lock_stat.h:73:
+extern void lock_stat_init(struct lock_stat *ls);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#239: FILE: linux/lock_stat.h:74:
+extern void lock_stat_sys_init(void);

CHECK:SPACING: No space is necessary after a cast
#241: FILE: linux/lock_stat.h:76:
+#define lock_stat_is_initialized(o) ((unsigned long) (*o)->file)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'o' may be better as '(o)' to avoid precedence issues
#241: FILE: linux/lock_stat.h:76:
+#define lock_stat_is_initialized(o) ((unsigned long) (*o)->file)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#243: FILE: linux/lock_stat.h:78:
+extern void lock_stat_note_contention(lock_stat_ref_t *ls, unsigned long ip);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#244: FILE: linux/lock_stat.h:79:
+extern void lock_stat_print(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#245: FILE: linux/lock_stat.h:80:
+extern void lock_stat_scoped_attach(lock_stat_ref_t *_s, LOCK_STAT_NOTE_PARAM_DECL);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'LOCK_STAT_NOTE_PARAM_DECL' should also have an identifier name
#245: FILE: linux/lock_stat.h:80:
+extern void lock_stat_scoped_attach(lock_stat_ref_t *_s, LOCK_STAT_NOTE_PARAM_DECL);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#252: FILE: linux/lock_stat.h:87:
+/*
+static inline char * ksym_strdup(const char *a)

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#270: FILE: linux/lock_stat.h:105:
+/*	char _##name##_string[] = #name;		\
+*/

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#273: FILE: linux/lock_stat.h:108:
+	struct lock_stat _lock_stat_##name##_entry = LS_INIT(_lock_stat_##name##_entry, #name "_string")

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#278: FILE: linux/lock_stat.h:113:
+/*
+DECLARE_LS_ENTRY(get_empty_filp);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#300: FILE: linux/lock_stat.h:135:
+#define __COMMA_LOCK_STAT_INITIALIZER^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PATCH_PREFIX: patch prefix 'kernel' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#314: FILE: lock_stat.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#339: FILE: lock_stat.c:26:
+ * $

WARNING:TYPO_SPELLING: 'implemention' may be misspelled - perhaps 'implementation'?
#341: FILE: lock_stat.c:28:
+ * implemention using RCU and lists even though that's now been replaced by
    ^^^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#344: FILE: lock_stat.c:31:
+ * Thu Sep 21 23:38:48 PDT 2006 $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#356: FILE: lock_stat.c:43:
+ * $

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#373: FILE: lock_stat.c:60:
+#include <asm/atomic.h>

WARNING:INCLUDE_LINUX: Use #include <linux/kdebug.h> instead of <asm/kdebug.h>
#374: FILE: lock_stat.c:61:
+#include <asm/kdebug.h>

WARNING:STATIC_CONST_CHAR_ARRAY: static char array declaration should probably be static const char
#382: FILE: lock_stat.c:69:
+static char null_string[]		= "";

WARNING:STATIC_CONST_CHAR_ARRAY: static char array declaration should probably be static const char
#383: FILE: lock_stat.c:70:
+static char static_string[]		= "-";

WARNING:STATIC_CONST_CHAR_ARRAY: static char array declaration should probably be static const char
#384: FILE: lock_stat.c:71:
+static char special_static_string[]	= "-";

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#394: FILE: lock_stat.c:81:
+ * by attaching it inline with the lock initialization function */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#403: FILE: lock_stat.c:90:
+/*
+static DEFINE_LS_ENTRY(__pte_alloc);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#429: FILE: lock_stat.c:116:
+ * look up the backing objects */

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#436: FILE: lock_stat.c:123:
+static int lock_stat_inited = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#452: FILE: lock_stat.c:139:
+	_s->rb_node.rb_left = _s->rb_node.rb_right = NULL;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#455: FILE: lock_stat.c:142:
+void lock_stat_reset_contention_count(void) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#469: FILE: lock_stat.c:156:
+		s = (struct lock_stat *) kmalloc(sizeof(struct lock_stat), GFP_KERNEL);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#469: FILE: lock_stat.c:156:
+		s = (struct lock_stat *) kmalloc(sizeof(struct lock_stat), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*s)...) over kmalloc(sizeof(struct lock_stat)...)
#469: FILE: lock_stat.c:156:
+		s = (struct lock_stat *) kmalloc(sizeof(struct lock_stat), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#475: FILE: lock_stat.c:162:
+		}
+		else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#475: FILE: lock_stat.c:162:
+		else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#476: FILE: lock_stat.c:163:
+			printk("%s: kmalloc returned NULL\n", __func__);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#481: FILE: lock_stat.c:168:
+^Ilock_stat_insert_persistent_store(&_lock_stat_inline_entry); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#482: FILE: lock_stat.c:169:
+^Ilock_stat_insert_persistent_store(&_lock_stat_untracked_entry); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#483: FILE: lock_stat.c:170:
+^Ilock_stat_insert_persistent_store(&_lock_stat_preinit_entry); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#485: FILE: lock_stat.c:172:
+^Ilock_stat_insert_persistent_store(&_lock_stat_d_alloc_entry); $

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#494: FILE: lock_stat.c:181:
+static
+struct lock_stat *lock_stat_allocate_object(void) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#495: FILE: lock_stat.c:182:
+struct lock_stat *lock_stat_allocate_object(void) {

WARNING:TYPO_SPELLING: 'Comparision' may be misspelled - perhaps 'Comparison'?
#518: FILE: lock_stat.c:205:
+ * Comparision, greater to/less than or equals. zero is equals.
    ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'circut' may be misspelled - perhaps 'circuit'?
#532: FILE: lock_stat.c:219:
+	/* return short circut result */
 	                ^^^^^^

WARNING:TYPO_SPELLING: 'circut' may be misspelled - perhaps 'circuit'?
#545: FILE: lock_stat.c:232:
+	/* return short circut result */
 	                ^^^^^^

ERROR:SPACING: space prohibited after that open parenthesis '('
#552: FILE: lock_stat.c:239:
+	if (   _file == NULL ||    _function == NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!_file"
#552: FILE: lock_stat.c:239:
+	if (   _file == NULL ||    _function == NULL ||

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!_function"
#552: FILE: lock_stat.c:239:
+	if (   _file == NULL ||    _function == NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!_s->file"
#553: FILE: lock_stat.c:240:
+	    _s->file == NULL || _s->function == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!_s->function"
#553: FILE: lock_stat.c:240:
+	    _s->file == NULL || _s->function == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#563: FILE: lock_stat.c:250:
+	printk("%s: %s [%s, %s, %d]\n", fn, s, o->file, o->function, o->line);

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#566: FILE: lock_stat.c:253:
+static
+void lock_stat_print_entry(struct seq_file *seq, struct lock_stat *o) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#567: FILE: lock_stat.c:254:
+void lock_stat_print_entry(struct seq_file *seq, struct lock_stat *o) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#569: FILE: lock_stat.c:256:
+	seq_printf(seq, "[%d, %d, %d]\t\t{%s, %s, %d}\n",
+						atomic_read(&o->ncontended),

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#587: FILE: lock_stat.c:274:
+static
+void lock_stat_rbtree_db_zero(void) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#588: FILE: lock_stat.c:275:
+void lock_stat_rbtree_db_zero(void) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#592: FILE: lock_stat.c:279:
+static
+void _lock_stat_rbtree_db_zero(struct rb_node *node) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#593: FILE: lock_stat.c:280:
+void _lock_stat_rbtree_db_zero(struct rb_node *node) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#594: FILE: lock_stat.c:281:
+void _lock_stat_rbtree_db_zero(struct rb_node *node) {
+

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#605: FILE: lock_stat.c:292:
+static
+void lock_stat_rbtree_db_print(struct seq_file *seq) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#606: FILE: lock_stat.c:293:
+void lock_stat_rbtree_db_print(struct seq_file *seq) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#610: FILE: lock_stat.c:297:
+static
+void _lock_stat_rbtree_db_print(struct seq_file *seq, struct rb_node *node, int level) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#611: FILE: lock_stat.c:298:
+void _lock_stat_rbtree_db_print(struct seq_file *seq, struct rb_node *node, int level) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#612: FILE: lock_stat.c:299:
+void _lock_stat_rbtree_db_print(struct seq_file *seq, struct rb_node *node, int level) {
+

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#625: FILE: lock_stat.c:312:
+static int missed = 0, attached = 0, left_insert = 0, right_insert = 0, calls = 0;

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#643: FILE: lock_stat.c:330:
+		}
+		else if (lock_stat_compare_objs(o, cursor) > 0) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#647: FILE: lock_stat.c:334:
+		}
+		else { /* means we found a duplicate */

CHECK:BRACES: Unbalanced braces around else statement
#647: FILE: lock_stat.c:334:
+		else { /* means we found a duplicate */

ERROR:CODE_INDENT: code indent should use tabs where possible
#653: FILE: lock_stat.c:340:
+        rb_link_node(&o->rb_node, parent, p);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#653: FILE: lock_stat.c:340:
+        rb_link_node(&o->rb_node, parent, p);$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#667: FILE: lock_stat.c:354:
+	while (node)
+	{

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#689: FILE: lock_stat.c:376:
+struct lock_stat * lock_stat_lookup_persistent_store(LOCK_STAT_NOTE_PARAM_DECL)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:IF_1: Consider removing the #if 1 and its #endif
#691: FILE: lock_stat.c:378:
+#if 1

WARNING:BRACES: braces {} are not necessary for single statement blocks
#699: FILE: lock_stat.c:386:
+		if (lock_stat_key_equals_obj(LOCK_STAT_NOTE_VARS, s)) {
+			return s;
+		}

WARNING:IF_1: Consider removing the #if 1 and its #endif
#712: FILE: lock_stat.c:399:
+#if 1

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#715: FILE: lock_stat.c:402:
+	BUG_ON(!_s);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#720: FILE: lock_stat.c:407:
+#if 0

ERROR:TRAILING_WHITESPACE: trailing whitespace
#721: FILE: lock_stat.c:408:
+static $

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#721: FILE: lock_stat.c:408:
+static 
+void lock_stat_persistent_print_store(struct seq_file *seq) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#722: FILE: lock_stat.c:409:
+void lock_stat_persistent_print_store(struct seq_file *seq) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#733: FILE: lock_stat.c:420:
+static
+void lock_stat_insert_persistent_store_zero(struct lock_stat *o) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#734: FILE: lock_stat.c:421:
+void lock_stat_insert_persistent_store_zero(struct lock_stat *o) {

WARNING:TYPO_SPELLING: 'occurance' may be misspelled - perhaps 'occurrence'?
#754: FILE: lock_stat.c:441:
+ * For rtmutexes that are statically scoped, there is a only one occurance of a
                                                                  ^^^^^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#785: FILE: lock_stat.c:472:
+	BUG_ON(!_s);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#787: FILE: lock_stat.c:474:
+	if (!lock_stat_inited) {
+		return;
+	}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!_file"
#791: FILE: lock_stat.c:478:
+	if (_file == NULL || _function == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!_function"
#791: FILE: lock_stat.c:478:
+	if (_file == NULL || _function == NULL) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#799: FILE: lock_stat.c:486:
+	 * into the dictionary */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#806: FILE: lock_stat.c:493:
+		BUG_ON(!o);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#822: FILE: lock_stat.c:509:
+
+

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#823: FILE: lock_stat.c:510:
+static int found = 0;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#834: FILE: lock_stat.c:521:
+	BUG_ON(!_s);

WARNING:IF_1: Consider removing the #if 1 and its #endif
#835: FILE: lock_stat.c:522:
+#if 1

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!_file"
#836: FILE: lock_stat.c:523:
+	if (_file == NULL || _function == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!_function"
#836: FILE: lock_stat.c:523:
+	if (_file == NULL || _function == NULL) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#847: FILE: lock_stat.c:534:
+	if ((p = lock_stat_lookup_persistent_store(LOCK_STAT_NOTE_VARS)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#852: FILE: lock_stat.c:539:
+	BUG_ON(!o);

CHECK:SPACING: No space is necessary after a cast
#858: FILE: lock_stat.c:545:
+	o->file		= (char *) _file;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#870: FILE: lock_stat.c:557:
+{ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#875: FILE: lock_stat.c:562:
+^Isymname = kallsyms_lookup(address, &symsize, &offset, &modname, namebuffer); $

WARNING:BRACES: braces {} are not necessary for single statement blocks
#877: FILE: lock_stat.c:564:
+	if (!symname) {
+		return null_string;
+	}

CHECK:SPACING: No space is necessary after a cast
#881: FILE: lock_stat.c:568:
+	return (char *) symname;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#886: FILE: lock_stat.c:573:
+	char ksym_scoped_namebuf[KSYM_NAME_LEN+1];
 	                                      ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#888: FILE: lock_stat.c:575:
+	BUG_ON(!_s);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#904: FILE: lock_stat.c:591:
+		BUG_ON(strnlen(ksym_scoped_namebuf, KSYM_NAME_LEN) >= KSYM_NAME_LEN);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#907: FILE: lock_stat.c:594:
+		printk("%s: function [0x%08lx, %s]\n", __func__, ip, ksym_scoped_namebuf);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#910: FILE: lock_stat.c:597:
+	BUG_ON(!_s);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#923: FILE: lock_stat.c:610:
+static struct file_operations lock_stat_procfs_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!lock_stat_procfs_dir"
#936: FILE: lock_stat.c:623:
+	if (lock_stat_procfs_dir == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!lock_stat_procfs_entry"
#942: FILE: lock_stat.c:629:
+	if (lock_stat_procfs_entry == NULL) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#946: FILE: lock_stat.c:633:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#946: FILE: lock_stat.c:633:
+	else {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#953: FILE: lock_stat.c:640:
+static int lock_stat_procfs_show(struct seq_file *sq, void *v) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#967: FILE: lock_stat.c:654:
+static int lock_stat_procfs_write (struct file *file, const char *buf, size_t count, loff_t *off)

WARNING:IF_1: Consider removing the #if 1 and its #endif
#969: FILE: lock_stat.c:656:
+#if 1

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#978: FILE: lock_stat.c:665:
+static int lock_stat_procfs_open(struct inode *inode, struct file *file) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#979: FILE: lock_stat.c:666:
+	return single_open (file, &lock_stat_procfs_show, NULL /* void *data */);

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.12875.commit.8915f49bebf53ff71d27fb28b6b03a7470dad499 total: 66 errors, 56 warnings, 32 checks, 812 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.12875.commit.8915f49bebf53ff71d27fb28b6b03a7470dad499 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
