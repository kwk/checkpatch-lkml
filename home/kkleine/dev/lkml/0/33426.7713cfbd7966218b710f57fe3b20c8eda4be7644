ERROR:TRAILING_WHITESPACE: trailing whitespace
#58: FILE: include/linux/sched.h:346:
+^I/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#59: FILE: include/linux/sched.h:347:
+^I * Last value of global fault stamp as seen by this process. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#61: FILE: include/linux/sched.h:349:
+^I * it has been since this task got the token $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#66: FILE: include/linux/sched.h:354:
+^I* Deciding factor ! $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#67: FILE: include/linux/sched.h:355:
+^I* Incrememt if (global_faults - faultstamp < FAULTSTAMP_DIFF ) $

ERROR:CODE_INDENT: code indent should use tabs where possible
#68: FILE: include/linux/sched.h:356:
+        * else decrement. High priority wins the token.$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:GLOBAL_INITIALISERS: do not initialise globals to NULL
#119: FILE: mm/thrash.c:17:
+struct mm_struct * swap_token_mm = NULL;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#119: FILE: mm/thrash.c:17:
+struct mm_struct * swap_token_mm = NULL;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#120: FILE: mm/thrash.c:18:
+unsigned long global_faults = 0;

ERROR:SPACING: space prohibited after that open parenthesis '('
#146: FILE: mm/thrash.c:26:
+	if ( current->mm->token_priority > mm->token_priority )

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that close parenthesis ')'
#146: FILE: mm/thrash.c:26:
+	if ( current->mm->token_priority > mm->token_priority )

ERROR:TRAILING_WHITESPACE: trailing whitespace
#148: FILE: mm/thrash.c:28:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#169: FILE: mm/thrash.c:37:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#170: FILE: mm/thrash.c:38:
+^I * This gives an indication of the number of processes $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#173: FILE: mm/thrash.c:41:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#174: FILE: mm/thrash.c:42:
+^Iglobal_faults++; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#182: FILE: mm/thrash.c:48:
+^I * First come first served. If a process holding the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#183: FILE: mm/thrash.c:49:
+^I * token exits, its up for grabs immediately $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#185: FILE: mm/thrash.c:51:
+^I$

ERROR:SPACING: space prohibited after that open parenthesis '('
#186: FILE: mm/thrash.c:52:
+	if ( swap_token_mm == NULL ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#186: FILE: mm/thrash.c:52:
+	if ( swap_token_mm == NULL ) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!swap_token_mm"
#186: FILE: mm/thrash.c:52:
+	if ( swap_token_mm == NULL ) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:SPACING: space prohibited before that close parenthesis ')'
#196: FILE: mm/thrash.c:58:
+	if ((global_faults - current->mm->faultstamp) < FAULTSTAMP_DIFF )  {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#203: FILE: mm/thrash.c:62:
+^I * have been evicted and therefore it's calling swap-in or no-page $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#204: FILE: mm/thrash.c:63:
+^I * too frequently. $

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#213: FILE: mm/thrash.c:70:
+	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#213: FILE: mm/thrash.c:70:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'doesnt' may be misspelled - perhaps 'doesn't'?
#215: FILE: mm/thrash.c:72:
+	 * Decrement priority to ensure that the token holder doesnt
 	                                                      ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#216: FILE: mm/thrash.c:73:
+^I * hold on to it for too long. $

CHECK:BRACES: braces {} should be used on all arms of this statement
#220: FILE: mm/thrash.c:76:
+		if (current->mm->token_priority > 0)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#222: FILE: mm/thrash.c:78:
+		else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#224: FILE: mm/thrash.c:80:
+^I * After this, the process will be able to contend for the token $

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#245: FILE: mm/thrash.c:90:
+	if ((reason = should_release_swap_token(mm_temp))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.33426.commit.7713cfbd7966218b710f57fe3b20c8eda4be7644 total: 28 errors, 1 warnings, 4 checks, 200 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.33426.commit.7713cfbd7966218b710f57fe3b20c8eda4be7644 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
