CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#104: FILE: include/linux/cpuset.h:61:
+extern int cpuset_can_attach_task(struct container *cont,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#106: FILE: include/linux/cpuset.h:63:
+extern void cpuset_attach_task(struct container *cont,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#107: FILE: include/linux/cpuset.h:64:
+extern void cpuset_attach_task(struct container *cont,
+				struct task_struct *tsk);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#108: FILE: include/linux/cpuset.h:65:
+extern void cpuset_post_attach_task(struct container *cont,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#111: FILE: include/linux/cpuset.h:68:
+extern int cpuset_populate_dir(struct container *cont);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#112: FILE: include/linux/cpuset.h:69:
+extern int cpuset_create(struct container *cont);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#113: FILE: include/linux/cpuset.h:70:
+extern void cpuset_destroy(struct container *cont);

ERROR:CODE_INDENT: code indent should use tabs where possible
#178: FILE: kernel/fork.c:1053:
+ ^I^Igoto bad_fork_cleanup_container;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#178: FILE: kernel/fork.c:1053:
+ ^I^Igoto bad_fork_cleanup_container;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#178: FILE: kernel/fork.c:1053:
+ ^I^Igoto bad_fork_cleanup_container;$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#247: FILE: kernel/container.c:1002:
+	if ((err = cpuset_populate_dir(cont)) < 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#312: FILE: kernel/container.c:1330:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1597: FILE: kernel/cpuset.c:1062:
+	if ((err = container_add_file(cont, &cft_cpus)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1600: FILE: kernel/cpuset.c:1064:
+	if ((err = container_add_file(cont, &cft_mems)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1603: FILE: kernel/cpuset.c:1066:
+	if ((err = container_add_file(cont, &cft_cpu_exclusive)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1606: FILE: kernel/cpuset.c:1068:
+	if ((err = container_add_file(cont, &cft_mem_exclusive)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1609: FILE: kernel/cpuset.c:1070:
+	if ((err = container_add_file(cont, &cft_memory_migrate)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1612: FILE: kernel/cpuset.c:1072:
+	if ((err = container_add_file(cont, &cft_memory_pressure)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1615: FILE: kernel/cpuset.c:1074:
+	if ((err = container_add_file(cont, &cft_spread_page)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1622: FILE: kernel/cpuset.c:1076:
+	if ((err = container_add_file(cont, &cft_spread_slab)) < 0)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1732: FILE: kernel/cpuset.c:1138:
+		BUG_ON(retval);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LINE_SPACING: Missing a blank line after declarations
#1763: FILE: kernel/cpuset.c:1152:
+	struct container *cont = current->container;
+	cont->cpuset = &top_cpuset;

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#2137: FILE: init/Kconfig:238:
+config CPUSETS_DEFAULT_ENABLED
+	bool "Default the cpuset container type to be enabled"
+	depends on CPUSETS
+	default y
+	help
+	  This option makes the cpuset container type enabled by
+	  default at boot, for compatibility with legacy cpuset
+	  semantics
+

Kconfig symbols should have a help text which fully describes
it.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.32615.commit.3be854dce6b08a3819b32994aab0de10c98f758d total: 10 errors, 5 warnings, 8 checks, 2268 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.32615.commit.3be854dce6b08a3819b32994aab0de10c98f758d has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
