WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#36: FILE: Makefile:4:
+EXTRAVERSION = .22
 ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:BRACES: Unbalanced braces around else statement
#203: FILE: drivers/message/i2o/exec-osm.c:166:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#268: FILE: drivers/message/i2o/exec-osm.c:249:
+			} else

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pte' - possible side-effects?
#574: FILE: include/asm-mips/pgtable.h:74:
+#define move_pte(pte, prot, old_addr, new_addr)				\
+({									\
+ 	pte_t newpte = (pte);						\
+	if (pte_present(pte) && pfn_valid(pte_pfn(pte)) &&		\
+			pte_page(pte) == ZERO_PAGE(old_addr))		\
+		newpte = mk_pte(ZERO_PAGE(new_addr), (prot));		\
+	newpte;								\
+})

ERROR:CODE_INDENT: code indent should use tabs where possible
#576: FILE: include/asm-mips/pgtable.h:76:
+ ^Ipte_t newpte = (pte);^I^I^I^I^I^I\$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#576: FILE: include/asm-mips/pgtable.h:76:
+ ^Ipte_t newpte = (pte);^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#576: FILE: include/asm-mips/pgtable.h:76:
+ ^Ipte_t newpte = (pte);^I^I^I^I^I^I\$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#596: FILE: include/asm-sparc64/dma-mapping.h:9:
+ * so include it */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#604: FILE: include/asm-sparc64/dma-mapping.h:17:
+	BUG_ON(dev->bus != &pci_bus_type);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#612: FILE: include/asm-sparc64/dma-mapping.h:25:
+	BUG_ON(dev->bus != &pci_bus_type);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#621: FILE: include/asm-sparc64/dma-mapping.h:34:
+	BUG_ON(dev->bus != &pci_bus_type);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#628: FILE: include/asm-sparc64/dma-mapping.h:41:
+dma_free_coherent(struct device *dev, size_t size, void *cpu_addr,
+		    dma_addr_t dma_handle)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#630: FILE: include/asm-sparc64/dma-mapping.h:43:
+	BUG_ON(dev->bus != &pci_bus_type);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#639: FILE: include/asm-sparc64/dma-mapping.h:52:
+	BUG_ON(dev->bus != &pci_bus_type);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#648: FILE: include/asm-sparc64/dma-mapping.h:61:
+	BUG_ON(dev->bus != &pci_bus_type);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#658: FILE: include/asm-sparc64/dma-mapping.h:71:
+	BUG_ON(dev->bus != &pci_bus_type);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#667: FILE: include/asm-sparc64/dma-mapping.h:80:
+	BUG_ON(dev->bus != &pci_bus_type);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#676: FILE: include/asm-sparc64/dma-mapping.h:89:
+	BUG_ON(dev->bus != &pci_bus_type);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#685: FILE: include/asm-sparc64/dma-mapping.h:98:
+	BUG_ON(dev->bus != &pci_bus_type);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#694: FILE: include/asm-sparc64/dma-mapping.h:107:
+	BUG_ON(dev->bus != &pci_bus_type);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#704: FILE: include/asm-sparc64/dma-mapping.h:117:
+	BUG_ON(dev->bus != &pci_bus_type);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#714: FILE: include/asm-sparc64/dma-mapping.h:127:
+	BUG_ON(dev->bus != &pci_bus_type);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#723: FILE: include/asm-sparc64/dma-mapping.h:136:
+	BUG_ON(dev->bus != &pci_bus_type);

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#746: FILE: include/asm-sparc64/pci.h:47:
+extern void *__pci_alloc_consistent(struct pci_dev *hwdev, size_t size, dma_addr_t *dma_handle, gfp_t gfp);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#746: FILE: include/asm-sparc64/pci.h:47:
+extern void *__pci_alloc_consistent(struct pci_dev *hwdev, size_t size, dma_addr_t *dma_handle, gfp_t gfp);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#747: FILE: include/asm-sparc64/pci.h:48:
+#define pci_alloc_consistent(DEV,SZ,HANDLE) \
                                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#747: FILE: include/asm-sparc64/pci.h:48:
+#define pci_alloc_consistent(DEV,SZ,HANDLE) \
                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#748: FILE: include/asm-sparc64/pci.h:49:
+	__pci_alloc_consistent(DEV,SZ,HANDLE,GFP_ATOMIC)
 	                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#748: FILE: include/asm-sparc64/pci.h:49:
+	__pci_alloc_consistent(DEV,SZ,HANDLE,GFP_ATOMIC)
 	                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#748: FILE: include/asm-sparc64/pci.h:49:
+	__pci_alloc_consistent(DEV,SZ,HANDLE,GFP_ATOMIC)
 	                                    ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pte' - possible side-effects?
#762: FILE: include/asm-sparc64/pgtable.h:340:
+#define move_pte(pte, prot, old_addr, new_addr)				\
+({									\
+ 	pte_t newpte = (pte);						\
+	if (pte_present(pte)) {						\
+		unsigned long this_pfn = pte_pfn(pte);			\
+									\
+		if (pfn_valid(this_pfn) &&				\
+		    (((old_addr) ^ (new_addr)) & (1 << 13)))		\
+			flush_dcache_page_all(current->mm,		\
+					      pfn_to_page(this_pfn));	\
+	}								\
+	newpte;								\
+})

ERROR:CODE_INDENT: code indent should use tabs where possible
#764: FILE: include/asm-sparc64/pgtable.h:342:
+ ^Ipte_t newpte = (pte);^I^I^I^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#764: FILE: include/asm-sparc64/pgtable.h:342:
+ ^Ipte_t newpte = (pte);^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#764: FILE: include/asm-sparc64/pgtable.h:342:
+ ^Ipte_t newpte = (pte);^I^I^I^I^I^I\$

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.66133.commit.e814deb143fbc504d73c07f6c16a2976a6ce8567 total: 7 errors, 22 warnings, 6 checks, 659 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.66133.commit.e814deb143fbc504d73c07f6c16a2976a6ce8567 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
