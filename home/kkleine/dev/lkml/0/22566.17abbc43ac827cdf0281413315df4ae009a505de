WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#152: 
which is backing the swapcache. This allows the page error to be cleared and

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#208: FILE: mm/swapfile.c:309:
+	struct swap_info_struct * p;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#213: FILE: mm/swapfile.c:314:
+		unsigned long offset = swp_offset(entry);
+		if (swap_entry_free(p, offset) == 0) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#231: FILE: mm/swapfile.c:639:
+static int try_to_unuse_entry(swp_entry_t entry, unsigned short *swap_map,
+			struct page *page, struct mm_struct **start_mm_p)

CHECK:BRACES: braces {} should be used on all arms of this statement
#238: FILE: mm/swapfile.c:646:
+	if (start_mm_p)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#240: FILE: mm/swapfile.c:648:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#291: FILE: mm/swapfile.c:699:
+		while (*swap_map > 1 && !retval &&
+				(p = p->next) != &start_mm->mmlist) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#302: FILE: mm/swapfile.c:710:
+			if (swcount <= 1)
[...]
+			else if (mm == &init_mm) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#307: FILE: mm/swapfile.c:715:
+			} else

WARNING:PRINTK_RATELIMITED: Prefer printk_ratelimited or pr_<level>_ratelimited to printk_ratelimit
#343: FILE: mm/swapfile.c:751:
+		if (printk_ratelimit())

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#344: FILE: mm/swapfile.c:752:
+			printk(KERN_WARNING

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'try_to_unuse_entry', this function's name, in a string
#345: FILE: mm/swapfile.c:753:
+				"try_to_unuse_entry: cleared swap entry overflow\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#412: FILE: mm/swapfile.c:820:
+	BUG_ON(!PageLocked(page));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#413: FILE: mm/swapfile.c:821:
+	BUG_ON(!PageSwapCache(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#414: FILE: mm/swapfile.c:822:
+	BUG_ON(PageWriteback(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#415: FILE: mm/swapfile.c:823:
+	BUG_ON(PagePrivate(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#426: FILE: mm/swapfile.c:834:
+	BUG_ON(*swap_map == SWAP_MAP_BAD);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#533: FILE: mm/swapfile.c:943:
+		retval = try_to_unuse_entry(entry, swap_map, page,
+							&start_mm);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#636: FILE: include/linux/swap.h:249:
+extern void swap_free_markbad(swp_entry_t);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'swp_entry_t' should also have an identifier name
#636: FILE: include/linux/swap.h:249:
+extern void swap_free_markbad(swp_entry_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#644: FILE: include/linux/swap.h:257:
+extern void try_to_unuse_page_entry(struct page *page);

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.22566.commit.17abbc43ac827cdf0281413315df4ae009a505de total: 1 errors, 11 warnings, 9 checks, 503 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.22566.commit.17abbc43ac827cdf0281413315df4ae009a505de has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
