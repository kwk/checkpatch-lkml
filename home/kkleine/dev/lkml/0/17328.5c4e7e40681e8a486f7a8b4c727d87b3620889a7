CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#116: FILE: include/linux/cpuset.h:63:
+extern int cpuset_can_attach_task(struct container *cont,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#118: FILE: include/linux/cpuset.h:65:
+extern void cpuset_attach_task(struct container *cont,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#119: FILE: include/linux/cpuset.h:66:
+extern void cpuset_attach_task(struct container *cont,
+				struct task_struct *tsk);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#120: FILE: include/linux/cpuset.h:67:
+extern void cpuset_post_attach_task(struct container *cont,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#123: FILE: include/linux/cpuset.h:70:
+extern int cpuset_populate_dir(struct container *cont);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#124: FILE: include/linux/cpuset.h:71:
+extern int cpuset_create(struct container *cont);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#125: FILE: include/linux/cpuset.h:72:
+extern void cpuset_destroy(struct container *cont);

ERROR:CODE_INDENT: code indent should use tabs where possible
#190: FILE: kernel/fork.c:1063:
+ ^I^Igoto bad_fork_cleanup_container;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#190: FILE: kernel/fork.c:1063:
+ ^I^Igoto bad_fork_cleanup_container;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#190: FILE: kernel/fork.c:1063:
+ ^I^Igoto bad_fork_cleanup_container;$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#223: FILE: kernel/container.c:98:
+ * exist, you could miss a notification */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#318: FILE: kernel/container.c:623:
+			 * string */

WARNING:LINE_SPACING: Missing a blank line after declarations
#336: FILE: kernel/container.c:687:
+		size_t n;
+		container_manage_lock();

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#338: FILE: kernel/container.c:689:
+		n = min(n, (size_t) PAGE_SIZE);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:MINMAX: min() should probably be min_t(size_t, n, PAGE_SIZE)
#338: FILE: kernel/container.c:689:
+		n = min(n, (size_t) PAGE_SIZE);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cont == &top_container'
#365: FILE: kernel/container.c:1045:
+	if ((cont == &top_container) &&
+	    (err = container_add_file(cont, &cft_release_agent)) < 0)

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#365: FILE: kernel/container.c:1045:
+	if ((cont == &top_container) &&

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#369: FILE: kernel/container.c:1049:
+	if ((err = cpuset_populate_dir(cont)) < 0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#434: FILE: kernel/container.c:1377:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#724: FILE: kernel/cpuset.c:154:
+ * silently switch it to mount "container" instead */

WARNING:LINE_SPACING: Missing a blank line after declarations
#732: FILE: kernel/cpuset.c:161:
+	int ret = -ENODEV;
+	container_set_release_agent_path("/sbin/cpuset_release_agent");

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1244: FILE: kernel/cpuset.c:863:
+	if (nbytes > 100 + 6 * max(NR_CPUS, MAX_NUMNODES))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1754: FILE: kernel/cpuset.c:1090:
+	if ((err = container_add_file(cont, &cft_cpus)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1757: FILE: kernel/cpuset.c:1092:
+	if ((err = container_add_file(cont, &cft_mems)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1760: FILE: kernel/cpuset.c:1094:
+	if ((err = container_add_file(cont, &cft_cpu_exclusive)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1763: FILE: kernel/cpuset.c:1096:
+	if ((err = container_add_file(cont, &cft_mem_exclusive)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1766: FILE: kernel/cpuset.c:1098:
+	if ((err = container_add_file(cont, &cft_memory_migrate)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1769: FILE: kernel/cpuset.c:1100:
+	if ((err = container_add_file(cont, &cft_memory_pressure)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1772: FILE: kernel/cpuset.c:1102:
+	if ((err = container_add_file(cont, &cft_spread_page)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1775: FILE: kernel/cpuset.c:1104:
+	if ((err = container_add_file(cont, &cft_spread_slab)) < 0)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1885: FILE: kernel/cpuset.c:1166:
+		BUG_ON(retval);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LINE_SPACING: Missing a blank line after declarations
#1916: FILE: kernel/cpuset.c:1180:
+	struct container *cont = current->container;
+	cont->cpuset = &top_cpuset;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2581: FILE: include/linux/fs.h:1878:
+extern void get_filesystem(struct file_system_type *fs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2582: FILE: include/linux/fs.h:1879:
+extern void put_filesystem(struct file_system_type *fs);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#2605: FILE: fs/proc/base.c:1787:
+	REG("cpuset",     S_IRUGO, container),

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#2616: FILE: fs/proc/base.c:2062:
+	REG("cpuset",    S_IRUGO, container),

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2629: FILE: include/linux/mempolicy.h:155:
+ (cpuset_being_rebound == current->container->cpuset)$

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.17328.commit.5c4e7e40681e8a486f7a8b4c727d87b3620889a7 total: 11 errors, 14 warnings, 12 checks, 2426 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.17328.commit.5c4e7e40681e8a486f7a8b4c727d87b3620889a7 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
