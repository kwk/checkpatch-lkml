WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#67: 
did not handle their demotions well, as they occured well into their
                                             ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#116: FILE: security/slim/slm_main.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#121: FILE: security/slim/slm_main.c:6:
+ * ^I   Kylene Hall <kjhall@us.ibm.com>$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#164: FILE: security/slim/slm_main.c:49:
+};
+static char *slm_sac_str[] = { ZERO_STR,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited before semicolon
#185: FILE: security/slim/slm_main.c:70:
+			while ((*bufp != '\n') && (bufp++ < buf_end)) ;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#185: FILE: security/slim/slm_main.c:70:
+			while ((*bufp != '\n') && (bufp++ < buf_end)) ;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'level->guard.iac_r != SLM_IAC_NOTDEFINED'
#211: FILE: security/slim/slm_main.c:96:
+	if ((level->guard.iac_r != SLM_IAC_NOTDEFINED)
+	    && (level->guard.iac_wx != SLM_IAC_NOTDEFINED))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'level->guard.iac_wx != SLM_IAC_NOTDEFINED'
#211: FILE: security/slim/slm_main.c:96:
+	if ((level->guard.iac_r != SLM_IAC_NOTDEFINED)
+	    && (level->guard.iac_wx != SLM_IAC_NOTDEFINED))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#212: FILE: security/slim/slm_main.c:97:
+	if ((level->guard.iac_r != SLM_IAC_NOTDEFINED)
+	    && (level->guard.iac_wx != SLM_IAC_NOTDEFINED))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'level->guard.sac_rx != SLM_SAC_NOTDEFINED'
#219: FILE: security/slim/slm_main.c:104:
+	if ((level->guard.sac_rx != SLM_SAC_NOTDEFINED)
+	    && (level->guard.sac_w != SLM_SAC_NOTDEFINED))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'level->guard.sac_w != SLM_SAC_NOTDEFINED'
#219: FILE: security/slim/slm_main.c:104:
+	if ((level->guard.sac_rx != SLM_SAC_NOTDEFINED)
+	    && (level->guard.sac_w != SLM_SAC_NOTDEFINED))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#220: FILE: security/slim/slm_main.c:105:
+	if ((level->guard.sac_rx != SLM_SAC_NOTDEFINED)
+	    && (level->guard.sac_w != SLM_SAC_NOTDEFINED))

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#232: FILE: security/slim/slm_main.c:117:
+}
+static int is_isec_defined(struct slm_isec_data *isec)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#239: FILE: security/slim/slm_main.c:124:
+/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#265: FILE: security/slim/slm_main.c:150:
+ * Revoke write permission on an open file.  $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cur_level->iac_level < isec->level.iac_level'
#306: FILE: security/slim/slm_main.c:191:
+	if ((mpnt->vm_flags & (VM_WRITE | VM_MAYWRITE))
+	    && (mpnt->vm_flags & VM_SHARED)
+	    && (cur_level->iac_level < isec->level.iac_level))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#307: FILE: security/slim/slm_main.c:192:
+	if ((mpnt->vm_flags & (VM_WRITE | VM_MAYWRITE))
+	    && (mpnt->vm_flags & VM_SHARED)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#308: FILE: security/slim/slm_main.c:193:
+	    && (mpnt->vm_flags & VM_SHARED)
+	    && (cur_level->iac_level < isec->level.iac_level))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#386: FILE: security/slim/slm_main.c:271:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#387: FILE: security/slim/slm_main.c:272:
+ * Get the 7 access class levels from the extended attribute $

WARNING:LONG_LINE_COMMENT: line length of 116 exceeds 100 columns
#388: FILE: security/slim/slm_main.c:273:
+ * Format: TIMESTAMP INTEGRITY SECRECY [INTEGRITY_GUARD INTEGRITY_GUARD] [SECRECY_GUARD SECRECY_GUARD] [GUARD_ TYPE]

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#459: FILE: security/slim/slm_main.c:344:
+ * ^I^I^I or -EINVAL$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#472: FILE: security/slim/slm_main.c:357:
+			printk(KERN_INFO

WARNING:SPLIT_STRING: quoted string split across lines
#474: FILE: security/slim/slm_main.c:359:
+				"%s integrity_verify_metadata failed "
+				"(rc: %d - status: %d)\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rc < 0'
#488: FILE: security/slim/slm_main.c:373:
+		if ((rc < 0) || (*status != INTEGRITY_PASS)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#489: FILE: security/slim/slm_main.c:374:
+			printk(KERN_INFO "%s integrity_verify_data failed "

ERROR:TRAILING_WHITESPACE: trailing whitespace
#490: FILE: security/slim/slm_main.c:375:
+^I^I^I       " (rc: %d status: %d)\n", dentry->d_name.name, $

WARNING:SPLIT_STRING: quoted string split across lines
#490: FILE: security/slim/slm_main.c:375:
+			printk(KERN_INFO "%s integrity_verify_data failed "
+			       " (rc: %d status: %d)\n", dentry->d_name.name, 

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#508: FILE: security/slim/slm_main.c:393:
+}
+static inline void set_level_exempt(struct slm_file_xattr *level)

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#558: FILE: security/slim/slm_main.c:443:
+		switch(status) {
+			case INTEGRITY_FAIL:
+			case INTEGRITY_NOLABEL:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: space required before the open parenthesis '('
#558: FILE: security/slim/slm_main.c:443:
+		switch(status) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*isec)...) over kzalloc(sizeof(struct slm_isec_data)...)
#571: FILE: security/slim/slm_main.c:456:
+	isec = kzalloc(sizeof(struct slm_isec_data), flags);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'inode->i_sb->s_magic == PROC_SUPER_MAGIC'
#586: FILE: security/slim/slm_main.c:471:
+	if ((inode->i_sb->s_magic == PROC_SUPER_MAGIC)
+	    || S_ISCHR(inode->i_mode) || S_ISBLK(inode->i_mode))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#587: FILE: security/slim/slm_main.c:472:
+	if ((inode->i_sb->s_magic == PROC_SUPER_MAGIC)
+	    || S_ISCHR(inode->i_mode) || S_ISBLK(inode->i_mode))

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*tsec)...) over kzalloc(sizeof(struct slm_tsec_data)...)
#626: FILE: security/slim/slm_main.c:511:
+	tsec = kzalloc(sizeof(struct slm_tsec_data), flags);

CHECK:BRACES: braces {} should be used on all arms of this statement
#630: FILE: security/slim/slm_main.c:515:
+	if (!cur_tsec) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#635: FILE: security/slim/slm_main.c:520:
+	} else

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#730: FILE: security/slim/slm_main.c:615:
+		 * sensitive data */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'level->iac_level == SLM_IAC_NOTDEFINED'
#752: FILE: security/slim/slm_main.c:637:
+	if (!(is_iac_greater_than_or_exempt(level, cur_tsec->iac_wx)
+	      || (level->iac_level == SLM_IAC_NOTDEFINED)))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#753: FILE: security/slim/slm_main.c:638:
+	if (!(is_iac_greater_than_or_exempt(level, cur_tsec->iac_wx)
+	      || (level->iac_level == SLM_IAC_NOTDEFINED)))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#801: FILE: security/slim/slm_main.c:686:
+ * file changes invalidate isec $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cur_tsec->iac_wx == SLM_IAC_UNTRUSTED'
#821: FILE: security/slim/slm_main.c:706:
+	if (cur_tsec && (cur_tsec->iac_wx == SLM_IAC_UNTRUSTED)
+	    && S_ISBLK(inode->i_mode))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#822: FILE: security/slim/slm_main.c:707:
+	if (cur_tsec && (cur_tsec->iac_wx == SLM_IAC_UNTRUSTED)
+	    && S_ISBLK(inode->i_mode))

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#834: FILE: security/slim/slm_main.c:719:
+				struct nameidata *nd)
 				                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#842: FILE: security/slim/slm_main.c:727:
+	dentry = (!nd || !nd->dentry) ? d_find_alias(inode) : nd->dentry;
 	           ^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#858: FILE: security/slim/slm_main.c:743:
+/* $

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#907: FILE: security/slim/slm_main.c:792:
+			 char **name, void **value, size_t * value_len)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#956: FILE: security/slim/slm_main.c:841:
+				   char **name, void **value, size_t * len)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cur_tsec->iac_wx != cur_tsec->iac_r'
#984: FILE: security/slim/slm_main.c:869:
+		if (S_ISDIR(inode->i_mode)
+		    && (cur_tsec->iac_wx != cur_tsec->iac_r))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#985: FILE: security/slim/slm_main.c:870:
+		if (S_ISDIR(inode->i_mode)
+		    && (cur_tsec->iac_wx != cur_tsec->iac_r))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cur_tsec->iac_wx != cur_tsec->iac_r'
#992: FILE: security/slim/slm_main.c:877:
+	if (S_ISSOCK(inode->i_mode)
+	    && (cur_tsec->iac_wx != cur_tsec->iac_r))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#993: FILE: security/slim/slm_main.c:878:
+	if (S_ISSOCK(inode->i_mode)
+	    && (cur_tsec->iac_wx != cur_tsec->iac_r))

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*data)...) over kmalloc(sizeof(struct xattr_data)...)
#1001: FILE: security/slim/slm_main.c:886:
+	data = kmalloc(sizeof(struct xattr_data), GFP_KERNEL);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1023: FILE: security/slim/slm_main.c:908:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1023: FILE: security/slim/slm_main.c:908:
+ $

CHECK:BRACES: braces {} should be used on all arms of this statement
#1025: FILE: security/slim/slm_main.c:910:
+	if (is_exempt_fastpath(inode)) {
[...]
+	} else if (S_ISSOCK(inode->i_mode))
[...]
+	else
[...]

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1053: FILE: security/slim/slm_main.c:938:
+	if (cur_tsec->iac_wx < parent_level->iac_level
+	    && parent_level->iac_level == SLM_IAC_SYSTEM)

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1085: FILE: security/slim/slm_main.c:970:
+ * being promoted.
+*/

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1113: FILE: security/slim/slm_main.c:998:
+		    (strncmp(data, UNTRUSTED_STR, strlen(UNTRUSTED_STR)) != 0)
+		    && (strncmp(data, EXEMPT_STR, strlen(EXEMPT_STR)) != 0))

ERROR:SPACING: space required before the open parenthesis '('
#1158: FILE: security/slim/slm_main.c:1043:
+		switch(iac) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1180: FILE: security/slim/slm_main.c:1065:
+	struct slm_isec_data *isec = slm_alloc_security(GFP_KERNEL);
+	if (!isec)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'family != AF_UNIX'
#1196: FILE: security/slim/slm_main.c:1081:
+	if ((family != AF_UNIX) && (family != AF_NETLINK)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'family != AF_NETLINK'
#1196: FILE: security/slim/slm_main.c:1081:
+	if ((family != AF_UNIX) && (family != AF_NETLINK)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1225: FILE: security/slim/slm_main.c:1110:
+	if (family == PF_UNIX) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1230: FILE: security/slim/slm_main.c:1115:
+	} else

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*tsec)...) over kzalloc(sizeof(struct slm_tsec_data)...)
#1264: FILE: security/slim/slm_main.c:1149:
+	struct slm_tsec_data *tsec = kzalloc(sizeof(struct slm_tsec_data), GFP_KERNEL);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cur_tsec->iac_r == cur_tsec->iac_wx'
#1290: FILE: security/slim/slm_main.c:1175:
+		if ((cur_tsec->iac_r == cur_tsec->iac_wx)
+		    && (cur_tsec->iac_r == SLM_IAC_UNTRUSTED));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cur_tsec->iac_r == SLM_IAC_UNTRUSTED'
#1290: FILE: security/slim/slm_main.c:1175:
+		if ((cur_tsec->iac_r == cur_tsec->iac_wx)
+		    && (cur_tsec->iac_r == SLM_IAC_UNTRUSTED));

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1290: FILE: security/slim/slm_main.c:1175:
+		if ((cur_tsec->iac_r == cur_tsec->iac_wx)
+		    && (cur_tsec->iac_r == SLM_IAC_UNTRUSTED));

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1291: FILE: security/slim/slm_main.c:1176:
+		if ((cur_tsec->iac_r == cur_tsec->iac_wx)
+		    && (cur_tsec->iac_r == SLM_IAC_UNTRUSTED));

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1309: FILE: security/slim/slm_main.c:1194:
+
+}

CHECK:BRACES: braces {} should be used on all arms of this statement
#1317: FILE: security/slim/slm_main.c:1202:
+	if (is_kernel_thread(tsk))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1319: FILE: security/slim/slm_main.c:1204:
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#1345: FILE: security/slim/slm_main.c:1230:
+	else {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'level->guard.unlimited'
#1360: FILE: security/slim/slm_main.c:1245:
+	if ((strcmp(bprm->filename, bprm->interp) != 0)
+	    && (level->guard.unlimited))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1361: FILE: security/slim/slm_main.c:1246:
+	if ((strcmp(bprm->filename, bprm->interp) != 0)
+	    && (level->guard.unlimited))

CHECK:BRACES: Unbalanced braces around else statement
#1389: FILE: security/slim/slm_main.c:1274:
+	else {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1396: FILE: security/slim/slm_main.c:1281:
+		 * sensitive data */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1418: FILE: security/slim/slm_main.c:1303:
+ * ^I- update integrity process level of integrity guard program$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1419: FILE: security/slim/slm_main.c:1304:
+ * ^I- update secrecy process level of secrecy guard program$

CHECK:BRACES: braces {} should be used on all arms of this statement
#1431: FILE: security/slim/slm_main.c:1316:
+		if (!cur_tsec->script_dentry) {
[...]
+		} else
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1434: FILE: security/slim/slm_main.c:1319:
+			return 0;
+		} else

CHECK:BRACES: Unbalanced braces around else statement
#1434: FILE: security/slim/slm_main.c:1319:
+		} else

ERROR:SPACING: space required before the open parenthesis '('
#1453: FILE: security/slim/slm_main.c:1338:
+	switch(status) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#1481: FILE: security/slim/slm_main.c:1366:
+	if (cur_tsec->iac_wx < level.iac_level)
+			rc = -EACCES;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1579: FILE: security/slim/slm_main.c:1464:
+			 char __user * shmaddr, int shmflg)

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.46648.commit.e59c890c86213e3198f3a043194e95d4bc39096c total: 17 errors, 21 warnings, 48 checks, 1526 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.46648.commit.e59c890c86213e3198f3a043194e95d4bc39096c has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
