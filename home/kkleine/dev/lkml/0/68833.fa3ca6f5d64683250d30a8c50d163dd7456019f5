WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#26: 
--- linux-2.6.17-rc6.orig/perfmon/perfmon_fmt.c	1969-12-31 16:00:00.000000000 -0800

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#29: FILE: perfmon/perfmon_fmt.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#50: FILE: perfmon/perfmon_fmt.c:22:
+ * ^Ihttp://www.hpl.hp.com/research/linux/perfmon$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#69: FILE: perfmon/perfmon_fmt.c:41:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#77: FILE: perfmon/perfmon_fmt.c:49:
+	struct pfm_smpl_fmt * entry;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#88: FILE: perfmon/perfmon_fmt.c:60:
+	struct pfm_smpl_fmt * entry;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#96: FILE: perfmon/perfmon_fmt.c:68:
+}
+/*

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#101: FILE: perfmon/perfmon_fmt.c:73:
+	struct pfm_smpl_fmt * fmt;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!fmt"
#120: FILE: perfmon/perfmon_fmt.c:92:
+	if (fmt == NULL || fmt_is_mod(fmt) == 0)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#122: FILE: perfmon/perfmon_fmt.c:94:
+	BUG_ON(fmt->owner == NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!fmt->owner"
#122: FILE: perfmon/perfmon_fmt.c:94:
+	BUG_ON(fmt->owner == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!fmt"
#134: FILE: perfmon/perfmon_fmt.c:106:
+	if (fmt == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!fmt->fmt_name"
#139: FILE: perfmon/perfmon_fmt.c:111:
+	if (fmt->fmt_name == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#150: FILE: perfmon/perfmon_fmt.c:122:
+		PFM_INFO("perfmon: format %s requires %u msg queue depth (max %d)",
+		       fmt->fmt_name,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!fmt->owner"
#160: FILE: perfmon/perfmon_fmt.c:132:
+	if (fmt->owner == NULL && fmt_is_mod(fmt)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!fmt->fmt_handler"
#167: FILE: perfmon/perfmon_fmt.c:139:
+	if (fmt->fmt_handler == NULL) {

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#232: FILE: perfmon/perfmon_fmt.c:204:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#242: FILE: perfmon/perfmon_fmt.c:214:
+	struct pfm_smpl_fmt * entry;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#255: FILE: perfmon/perfmon_dfl_smpl.c:1:
+/*

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!data"
#282: FILE: perfmon/perfmon_dfl_smpl.c:28:
+	if (data == NULL) {

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#291: FILE: perfmon/perfmon_dfl_smpl.c:37:
+#define MAX_SIZE_T	(1ULL<<(sizeof(size_t)<<3))
                   	     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#291: FILE: perfmon/perfmon_dfl_smpl.c:37:
+#define MAX_SIZE_T	(1ULL<<(sizeof(size_t)<<3))
                   	                      ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#297: FILE: perfmon/perfmon_dfl_smpl.c:43:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#303: FILE: perfmon/perfmon_dfl_smpl.c:49:
+^I             + (sizeof(struct pfm_dfl_smpl_entry) + (npmds*sizeof(u64)));$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#303: FILE: perfmon/perfmon_dfl_smpl.c:49:
+	             + (sizeof(struct pfm_dfl_smpl_entry) + (npmds*sizeof(u64)));
 	                                                          ^

WARNING:SPLIT_STRING: quoted string split across lines
#306: FILE: perfmon/perfmon_dfl_smpl.c:52:
+	PFM_DBG("validate ctx_flags=0x%x flags=0x%x npmds=%u "
+		   "min_buf_size=%llu buf_size=%llu\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#319: FILE: perfmon/perfmon_dfl_smpl.c:65:
+
+

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#351: FILE: perfmon/perfmon_dfl_smpl.c:97:
+	hdr->hdr_min_buf_space = sizeof(struct pfm_dfl_smpl_entry) + (npmds*sizeof(u64));
 	                                                                   ^

WARNING:SPLIT_STRING: quoted string split across lines
#354: FILE: perfmon/perfmon_dfl_smpl.c:100:
+	PFM_DBG("buffer=%p buf_size=%llu hdr_size=%zu hdr_version=%u.%u "
+		  "min_space=%llu npmds=%u",

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#378: FILE: perfmon/perfmon_dfl_smpl.c:124:
+	cur = buf+hdr->hdr_cur_offs;
 	         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#379: FILE: perfmon/perfmon_dfl_smpl.c:125:
+	last = buf+hdr->hdr_buf_size;
 	          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#396: FILE: perfmon/perfmon_dfl_smpl.c:142:
+	e = (u64 *)(ent+1);
 	               ^

WARNING:SPLIT_STRING: quoted string split across lines
#401: FILE: perfmon/perfmon_dfl_smpl.c:147:
+	PFM_DBG_ovfl("count=%llu cur=%p last=%p free_bytes=%zu ovfl_pmd=%d "
+		       "npmds=%u",

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#404: FILE: perfmon/perfmon_dfl_smpl.c:150:
+		       (last-cur),
 		            ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#412: FILE: perfmon/perfmon_dfl_smpl.c:158:
+^I * ^I- this is usually the task being monitored.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#413: FILE: perfmon/perfmon_dfl_smpl.c:159:
+^I * ^I  Under certain conditions, it might be a different task$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#416: FILE: perfmon/perfmon_dfl_smpl.c:162:
+^I * ^I- this is not necessarily the task controlling the session$

WARNING:LINE_SPACING: Missing a blank line after declarations
#437: FILE: perfmon/perfmon_dfl_smpl.c:183:
+		u64 *val = arg->smpl_pmds_values;
+		for(i=0; i < npmds; i++) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#437: FILE: perfmon/perfmon_dfl_smpl.c:183:
+		for(i=0; i < npmds; i++) {
 		     ^

ERROR:SPACING: space required before the open parenthesis '('
#437: FILE: perfmon/perfmon_dfl_smpl.c:183:
+		for(i=0; i < npmds; i++) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#437: FILE: perfmon/perfmon_dfl_smpl.c:183:
+		for(i=0; i < npmds; i++) {
+			*e++ = *val++;
+		}

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#460: FILE: perfmon/perfmon_dfl_smpl.c:206:
+		     last-cur,
 		         ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxW)
#474: FILE: perfmon/perfmon_dfl_smpl.c:220:
+	arg->ovfl_ctrl = PFM_OVFL_CTRL_NOTIFY| PFM_OVFL_CTRL_MASK;
 	                                     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#498: FILE: perfmon/perfmon_dfl_smpl.c:244:
+static struct pfm_smpl_fmt dfl_fmt={
                                   ^

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.68833.commit.fa3ca6f5d64683250d30a8c50d163dd7456019f5 total: 9 errors, 13 warnings, 22 checks, 492 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.68833.commit.fa3ca6f5d64683250d30a8c50d163dd7456019f5 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
