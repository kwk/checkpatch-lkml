WARNING:TYPO_SPELLING: 'knowlege' may be misspelled - perhaps 'knowledge'?
#31: 
This patch removes all cpuset-specific knowlege from the container
                                       ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#71: FILE: include/linux/container.h:37:
+	 * hierarchy structure */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#76: FILE: include/linux/container.h:42:
+	 * and css_put() */

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#123: FILE: include/linux/container.h:89:
+static inline void css_put(struct container_subsys_state *css) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#135: FILE: include/linux/container.h:109:
+^Istruct dentry *dentry;^I  ^I/* container fs entry */$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#174: FILE: include/linux/container.h:164:
+	void (*attach)(struct container_subsys *ss, struct container *cont,
+			struct container *old_cont, struct task_struct *tsk);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#196: FILE: include/linux/container.h:186:
+static inline struct container_subsys_state *container_subsys_state(

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#203: FILE: include/linux/container.h:193:
+static inline struct container* task_container(struct task_struct *task,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#209: FILE: include/linux/container.h:199:
+static inline struct container_subsys_state *task_subsys_state(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#239: FILE: include/linux/cpuset.h:63:
+extern int current_cpuset_is_being_rebound(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#276: FILE: kernel/container.c:66:
+static int subsys_count = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#295: FILE: kernel/container.c:85:
+ * tasks are part of that container. */

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#316: FILE: kernel/container.c:105:
+static int need_forkexit_callback = 0;

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#329: FILE: kernel/container.c:124:
+#define for_each_subsys(_hierarchy, _ss) list_for_each_entry(_ss, &rootnode[_hierarchy].subsys_list, sibling)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#349: FILE: kernel/container.c:234:
+static struct inode_operations container_dir_inode_operations;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#350: FILE: kernel/container.c:235:
+struct file_operations proc_containerstats_operations;

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#375: FILE: kernel/container.c:322:
+static void container_put_super(struct super_block *sb) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#376: FILE: kernel/container.c:323:
+static void container_put_super(struct super_block *sb) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#388: FILE: kernel/container.c:335:
+	BUG_ON(root->number_of_containers != 1);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#389: FILE: kernel/container.c:336:
+	BUG_ON(!list_empty(&cont->children));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#390: FILE: kernel/container.c:337:
+	BUG_ON(!list_empty(&cont->sibling));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#391: FILE: kernel/container.c:338:
+	BUG_ON(!root->subsys_bits);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#399: FILE: kernel/container.c:346:
+		BUG_ON(!p->container[hierarchy]);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#400: FILE: kernel/container.c:347:
+		BUG_ON(p->container[hierarchy] != cont);

WARNING:LINE_SPACING: Missing a blank line after declarations
#411: FILE: kernel/container.c:358:
+			struct container_subsys *ss = subsys[i];
+			BUG_ON(cont->subsys[i] != dummytop->subsys[i]);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#411: FILE: kernel/container.c:358:
+			BUG_ON(cont->subsys[i] != dummytop->subsys[i]);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#412: FILE: kernel/container.c:359:
+			BUG_ON(cont->subsys[i]->container != cont);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#418: FILE: kernel/container.c:365:
+			BUG_ON(cont->subsys[i]);

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#428: FILE: kernel/container.c:375:
+static int container_show_options(struct seq_file *seq, struct vfsmount *vfs) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#431: FILE: kernel/container.c:378:
+	struct container_subsys *ss;
+	for_each_subsys(root->top_container.hierarchy, ss) {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IXUGO | S_IWUSR' are not preferred. Consider using octal permissions '0755'.
#466: FILE: kernel/container.c:403:
+	inode = container_new_inode(S_IFDIR | S_IRUGO | S_IXUGO | S_IWUSR, sb);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#535: FILE: kernel/container.c:470:
+		if (root->subsys_bits == subsys_bits) break;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#545: FILE: kernel/container.c:480:
+		 * know that all the subsystems are free */

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#548: FILE: kernel/container.c:483:
+			if (!root->sb && !root->subsys_bits) break;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#565: FILE: kernel/container.c:500:
+		BUG_ON(root->subsys_bits);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#572: FILE: kernel/container.c:507:
+		BUG_ON(!list_empty(&cont->sibling));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#573: FILE: kernel/container.c:508:
+		BUG_ON(!list_empty(&cont->children));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#574: FILE: kernel/container.c:509:
+		BUG_ON(root->number_of_containers != 1);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#583: FILE: kernel/container.c:518:
+			BUG_ON(p->container[hierarchy]);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#585: FILE: kernel/container.c:520:
+			if (!(p->flags & PF_EXITING)) {
+				atomic_inc(&cont->count);
+			}

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#594: FILE: kernel/container.c:529:
+			if (!(subsys_bits & (1 << i))) continue;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#598: FILE: kernel/container.c:533:
+			BUG_ON(cont->subsys[i]);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#599: FILE: kernel/container.c:534:
+			BUG_ON(dummytop->subsys[i]->container != dummytop);

ERROR:CODE_INDENT: code indent should use tabs where possible
#664: FILE: kernel/container.c:782:
+        BUG_ON(oldcont == dummytop);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#664: FILE: kernel/container.c:782:
+        BUG_ON(oldcont == dummytop);$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#664: FILE: kernel/container.c:782:
+        BUG_ON(oldcont == dummytop);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#675: FILE: kernel/container.c:789:
+		if (ss->attach) {
+			ss->attach(ss, cont, oldcont, tsk);
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#686: FILE: kernel/container.c:797:
+		if (ss->post_attach) {
+			ss->post_attach(ss, cont, oldcont, tsk);
+		}

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cont == cont->top_container'
#762: FILE: kernel/container.c:1286:
+	if ((cont == cont->top_container) &&
 	    (err = container_add_file(cont, &cft_release_agent)) < 0)

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#762: FILE: kernel/container.c:1286:
+	if ((cont == cont->top_container) &&

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#771: FILE: kernel/container.c:1291:
+		if (ss->populate && (err = ss->populate(ss, cont)) < 0)

WARNING:LINE_SPACING: Missing a blank line after declarations
#782: FILE: kernel/container.c:1302:
+	struct container_subsys_state *css = cont->subsys[ss->subsys_id];
+	css->container = cont;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#808: FILE: kernel/container.c:1332:
+	 * fs */

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#830: FILE: kernel/container.c:1350:
+		if (err) goto err_destroy;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#893: FILE: kernel/container.c:1445:
+	 * the refcnt. This will lock out any calls to css_get() */

WARNING:LINE_SPACING: Missing a blank line after declarations
#896: FILE: kernel/container.c:1448:
+		struct container_subsys_state *css;
+		css = cont->subsys[ss->subsys_id];

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#902: FILE: kernel/container.c:1454:
+	 * a refcount */

WARNING:LINE_SPACING: Missing a blank line after declarations
#905: FILE: kernel/container.c:1457:
+		struct container_subsys_state *css;
+		css = cont->subsys[ss->subsys_id];

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#906: FILE: kernel/container.c:1458:
+		if (!css_busy) atomic_dec(&css->refcnt);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#910: FILE: kernel/container.c:1462:
+	if (css_busy) return -EBUSY;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#937: FILE: kernel/container.c:1485:
+	 * created the container */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#947: FILE: kernel/container.c:1491:
 
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#962: FILE: kernel/container.c:1505:
+		struct container *cont = &root->top_container;
+		INIT_LIST_HEAD(&root->subsys_list);

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1019: FILE: kernel/container.c:1541:
+int container_register_subsys(struct container_subsys *new_subsys) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1023: FILE: kernel/container.c:1545:
+	BUG_ON(new_subsys->hierarchy);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1049: FILE: kernel/container.c:1571:
+ ^Imutex_lock(&callback_mutex);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1049: FILE: kernel/container.c:1571:
+ ^Imutex_lock(&callback_mutex);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1049: FILE: kernel/container.c:1571:
+ ^Imutex_lock(&callback_mutex);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1050: FILE: kernel/container.c:1572:
+ ^I/* If this is the first subsystem that requested a fork or$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1050: FILE: kernel/container.c:1572:
+ ^I/* If this is the first subsystem that requested a fork or$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1050: FILE: kernel/container.c:1572:
+ ^I/* If this is the first subsystem that requested a fork or$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1051: FILE: kernel/container.c:1573:
+ ^I * exit callback, tell our fork/exit hooks that they need to$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1051: FILE: kernel/container.c:1573:
+ ^I * exit callback, tell our fork/exit hooks that they need to$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1052: FILE: kernel/container.c:1574:
+ ^I * grab callback_mutex on every invocation. If they are$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1052: FILE: kernel/container.c:1574:
+ ^I * grab callback_mutex on every invocation. If they are$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1053: FILE: kernel/container.c:1575:
+ ^I * running concurrently with this code, they will either not$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1053: FILE: kernel/container.c:1575:
+ ^I * running concurrently with this code, they will either not$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1054: FILE: kernel/container.c:1576:
+ ^I * see the change now and go straight on, or they will see it$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1054: FILE: kernel/container.c:1576:
+ ^I * see the change now and go straight on, or they will see it$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1055: FILE: kernel/container.c:1577:
+ ^I * and grab callback_mutex, which will deschedule them. Either$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1055: FILE: kernel/container.c:1577:
+ ^I * and grab callback_mutex, which will deschedule them. Either$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1056: FILE: kernel/container.c:1578:
+ ^I * way once synchronize_rcu() returns we know that all current$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1056: FILE: kernel/container.c:1578:
+ ^I * way once synchronize_rcu() returns we know that all current$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1057: FILE: kernel/container.c:1579:
+ ^I * and future forks will make the callbacks. */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1057: FILE: kernel/container.c:1579:
+ ^I * and future forks will make the callbacks. */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1057: FILE: kernel/container.c:1579:
+ 	 * and future forks will make the callbacks. */

ERROR:CODE_INDENT: code indent should use tabs where possible
#1058: FILE: kernel/container.c:1580:
+ ^Iif (!need_forkexit_callback &&$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1058: FILE: kernel/container.c:1580:
+ ^Iif (!need_forkexit_callback &&$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1058: FILE: kernel/container.c:1580:
+ ^Iif (!need_forkexit_callback &&$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1059: FILE: kernel/container.c:1581:
+ ^I    (new_subsys->fork || new_subsys->exit)) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1059: FILE: kernel/container.c:1581:
+ ^I    (new_subsys->fork || new_subsys->exit)) {$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1059: FILE: kernel/container.c:1581:
+ 	if (!need_forkexit_callback &&
+ 	    (new_subsys->fork || new_subsys->exit)) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1059: FILE: kernel/container.c:1581:
+ ^I    (new_subsys->fork || new_subsys->exit)) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1060: FILE: kernel/container.c:1582:
+ ^I^Ineed_forkexit_callback = 1;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1060: FILE: kernel/container.c:1582:
+ ^I^Ineed_forkexit_callback = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1060: FILE: kernel/container.c:1582:
+ ^I^Ineed_forkexit_callback = 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1061: FILE: kernel/container.c:1583:
+ ^I^Isynchronize_rcu();$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1061: FILE: kernel/container.c:1583:
+ ^I^Isynchronize_rcu();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1061: FILE: kernel/container.c:1583:
+ ^I^Isynchronize_rcu();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1062: FILE: kernel/container.c:1584:
+ ^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1062: FILE: kernel/container.c:1584:
+ ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1062: FILE: kernel/container.c:1584:
+ ^I}$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1064: FILE: kernel/container.c:1586:
+ ^I/* If this subsystem requested that it be notified with fork$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1064: FILE: kernel/container.c:1586:
+ ^I/* If this subsystem requested that it be notified with fork$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1064: FILE: kernel/container.c:1586:
+ ^I/* If this subsystem requested that it be notified with fork$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1065: FILE: kernel/container.c:1587:
+ ^I * events, we should send it one now for every process in the$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1065: FILE: kernel/container.c:1587:
+ ^I * events, we should send it one now for every process in the$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1066: FILE: kernel/container.c:1588:
+ ^I * system */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1066: FILE: kernel/container.c:1588:
+ ^I * system */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1066: FILE: kernel/container.c:1588:
+ 	 * system */

ERROR:CODE_INDENT: code indent should use tabs where possible
#1067: FILE: kernel/container.c:1589:
+ ^Iif (new_subsys->fork) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1067: FILE: kernel/container.c:1589:
+ ^Iif (new_subsys->fork) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1067: FILE: kernel/container.c:1589:
+ ^Iif (new_subsys->fork) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1068: FILE: kernel/container.c:1590:
+ ^I^Istruct task_struct *g, *p;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1068: FILE: kernel/container.c:1590:
+ ^I^Istruct task_struct *g, *p;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1068: FILE: kernel/container.c:1590:
+ ^I^Istruct task_struct *g, *p;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1070: FILE: kernel/container.c:1592:
+ ^I^Iread_lock(&tasklist_lock);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1070: FILE: kernel/container.c:1592:
+ ^I^Iread_lock(&tasklist_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1070: FILE: kernel/container.c:1592:
+ ^I^Iread_lock(&tasklist_lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1071: FILE: kernel/container.c:1593:
+ ^I^Ido_each_thread(g, p) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1071: FILE: kernel/container.c:1593:
+ ^I^Ido_each_thread(g, p) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1071: FILE: kernel/container.c:1593:
+ ^I^Ido_each_thread(g, p) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1072: FILE: kernel/container.c:1594:
+ ^I^I^Inew_subsys->fork(new_subsys, p);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1072: FILE: kernel/container.c:1594:
+ ^I^I^Inew_subsys->fork(new_subsys, p);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1072: FILE: kernel/container.c:1594:
+ ^I^I^Inew_subsys->fork(new_subsys, p);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1073: FILE: kernel/container.c:1595:
+ ^I^I} while_each_thread(g, p);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1073: FILE: kernel/container.c:1595:
+ ^I^I} while_each_thread(g, p);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1073: FILE: kernel/container.c:1595:
+ ^I^I} while_each_thread(g, p);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1074: FILE: kernel/container.c:1596:
+ ^I^Iread_unlock(&tasklist_lock);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1074: FILE: kernel/container.c:1596:
+ ^I^Iread_unlock(&tasklist_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1074: FILE: kernel/container.c:1596:
+ ^I^Iread_unlock(&tasklist_lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1075: FILE: kernel/container.c:1597:
+ ^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1075: FILE: kernel/container.c:1597:
+ ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1075: FILE: kernel/container.c:1597:
+ ^I}$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1078: FILE: kernel/container.c:1600:
+ ^Imutex_unlock(&callback_mutex);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1078: FILE: kernel/container.c:1600:
+ ^Imutex_unlock(&callback_mutex);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1078: FILE: kernel/container.c:1600:
+ ^Imutex_unlock(&callback_mutex);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1080: FILE: kernel/container.c:1602:
+ ^Imutex_unlock(&manage_mutex);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1080: FILE: kernel/container.c:1602:
+ ^Imutex_unlock(&manage_mutex);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1080: FILE: kernel/container.c:1602:
+ ^Imutex_unlock(&manage_mutex);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1081: FILE: kernel/container.c:1603:
+ ^Ireturn retval;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1081: FILE: kernel/container.c:1603:
+ ^Ireturn retval;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1081: FILE: kernel/container.c:1603:
+ ^Ireturn retval;$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1083: FILE: kernel/container.c:1605:
+
+}

ERROR:CODE_INDENT: code indent should use tabs where possible
#1096: FILE: kernel/container.c:1631:
+ ^I * a callback */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1096: FILE: kernel/container.c:1631:
+ ^I * a callback */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1096: FILE: kernel/container.c:1631:
+ 	 * a callback */

ERROR:CODE_INDENT: code indent should use tabs where possible
#1105: FILE: kernel/container.c:1638:
+        /* Skip hierarchy 0 since it's permanent */$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1108: FILE: kernel/container.c:1641:
+		struct container *cont = current->container[i];
+		if (!cont) continue;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1108: FILE: kernel/container.c:1641:
+		if (!cont) continue;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1115: FILE: kernel/container.c:1648:
+			struct container_subsys *ss = subsys[i];
+			if (ss->fork) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1115: FILE: kernel/container.c:1648:
+			if (ss->fork) {
+				ss->fork(ss, child);
+			}

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1121: FILE: kernel/container.c:1654:
+	if (need_callback) {
[...]
+	} else {
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#1146: FILE: kernel/container.c:1724:
+	int i;
+	rcu_read_lock();

WARNING:LINE_SPACING: Missing a blank line after declarations
#1152: FILE: kernel/container.c:1730:
+			struct container_subsys *ss = subsys[i];
+			if (ss->exit) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1152: FILE: kernel/container.c:1730:
+			if (ss->exit) {
+				ss->exit(ss, tsk);
+			}

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1165: FILE: kernel/container.c:1742:
+		if (!cont) continue;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1170: FILE: kernel/container.c:1747:
+			char *pathbuf = NULL;
+			mutex_lock(&manage_mutex);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1215: FILE: kernel/container.c:1843:
+		int count = 0;
+		if (!root->subsys_bits) continue;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1215: FILE: kernel/container.c:1843:
+		if (!root->subsys_bits) continue;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1237: FILE: kernel/container.c:1879:
+	int i;
+	mutex_lock(&manage_mutex);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1243: FILE: kernel/container.c:1885:
+		int first = 1;
+		seq_printf(m, "%d: topcount=%d bits=%lx containers=%d (",

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1251: FILE: kernel/container.c:1893:
+		if (root->sb) {
+			seq_printf(m, " s_active=%d", atomic_read(&root->sb->s_active));
+		}

WARNING:LINE_SPACING: Missing a blank line after declarations
#1259: FILE: kernel/container.c:1901:
+		struct container_subsys *ss = subsys[i];
+		seq_printf(m, "%d: name=%s hierarchy=%d\n",

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1271: FILE: kernel/container.c:1913:
+struct file_operations proc_containerstats_operations = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1345: FILE: kernel/cpuset.c:116:
+
+

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1432: FILE: kernel/cpuset.c:535:
+	guarantee_online_mems(task_cs(tsk),&tsk->mems_allowed);
 	                                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1432: FILE: kernel/cpuset.c:535:
+	guarantee_online_mems(task_cs(tsk),&tsk->mems_allowed);
 	                                   ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1659: FILE: kernel/cpuset.c:1239:
 
+

WARNING:TYPO_SPELLING: 'hierachies' may be misspelled - perhaps 'hierarchies'?
#1788: FILE: Documentation/containers.txt:43:
+active hierachies of tasks.  Each task has a pointer to a container in
        ^^^^^^^^^^

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.15649.commit.3e0c2ec9f098c7e70741d2b318baa28296b97bb6 total: 51 errors, 108 warnings, 11 checks, 1942 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.15649.commit.3e0c2ec9f098c7e70741d2b318baa28296b97bb6 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
