WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#68: FILE: mm/shmem.c:80:
+static unsigned long shmem_export_ino_seq; /* not atomic_t because of using
+						lock anyway */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#68: FILE: mm/shmem.c:80:
+						lock anyway */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#70: FILE: mm/shmem.c:82:
+static spinlock_t shmem_export_spin_lock;  /* because the need to update ino
+						and generation as atomic operation */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#70: FILE: mm/shmem.c:82:
+						and generation as atomic operation */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#73: FILE: mm/shmem.c:85:
+struct dentry * shmem_export_get_parent(struct dentry *child)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#76: FILE: mm/shmem.c:88:
+/* We don't want this function to succeed. because it's only
+called in situations that should not be handled by tmpfs.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#78: FILE: mm/shmem.c:90:
+previously holded filehandlers are irrelevant */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#82: FILE: mm/shmem.c:94:
+struct dentry * shmem_export_get_dentry(struct super_block *sb, void *fh)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#84: FILE: mm/shmem.c:96:
+	struct inode * inode = NULL;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#85: FILE: mm/shmem.c:97:
+	struct inode * found_inode = NULL;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#86: FILE: mm/shmem.c:98:
+	struct dentry * result;

CHECK:SPACING: No space is necessary after a cast
#87: FILE: mm/shmem.c:99:
+	unsigned long ino  = * (unsigned long *) fh;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#87: FILE: mm/shmem.c:99:
+	unsigned long ino  = * (unsigned long *) fh;
 	                     ^

CHECK:SPACING: No space is necessary after a cast
#88: FILE: mm/shmem.c:100:
+	__u32 generation  = * (__u32 *) (fh + sizeof(ino));

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#88: FILE: mm/shmem.c:100:
+	__u32 generation  = * (__u32 *) (fh + sizeof(ino));
 	                    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#89: FILE: mm/shmem.c:101:
+^Ispin_lock(&inode_lock);^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#89: FILE: mm/shmem.c:101:
+	__u32 generation  = * (__u32 *) (fh + sizeof(ino));
+	spin_lock(&inode_lock);	

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'inode->i_ino == ino'
#91: FILE: mm/shmem.c:103:
+		if ((inode->i_ino == ino) &&
+			(inode->i_generation == generation)){

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'inode->i_generation == generation'
#91: FILE: mm/shmem.c:103:
+		if ((inode->i_ino == ino) &&
+			(inode->i_generation == generation)){

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#92: FILE: mm/shmem.c:104:
+		if ((inode->i_ino == ino) &&
+			(inode->i_generation == generation)){

ERROR:SPACING: space required before the open brace '{'
#92: FILE: mm/shmem.c:104:
+			(inode->i_generation == generation)){

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#97: FILE: mm/shmem.c:109:
+  spin_unlock(&inode_lock);$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!result"
#101: FILE: mm/shmem.c:113:
+	if (result == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#107: FILE: mm/shmem.c:119:
+int shmem_export_encode_fh(struct dentry * dentry, __u32 *fh,int *lenp,

ERROR:SPACING: space required after that ',' (ctx:VxV)
#107: FILE: mm/shmem.c:119:
+int shmem_export_encode_fh(struct dentry * dentry, __u32 *fh,int *lenp,
                                                             ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#108: FILE: mm/shmem.c:120:
+int shmem_export_encode_fh(struct dentry * dentry, __u32 *fh,int *lenp,
+			int connectable)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#111: FILE: mm/shmem.c:123:
+	char * raw = (char *)fh;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#112: FILE: mm/shmem.c:124:
+	int room = sizeof (inode->i_ino) + sizeof (inode->i_generation);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#112: FILE: mm/shmem.c:124:
+	int room = sizeof (inode->i_ino) + sizeof (inode->i_generation);

WARNING:LINE_SPACING: Missing a blank line after declarations
#113: FILE: mm/shmem.c:125:
+	int room = sizeof (inode->i_ino) + sizeof (inode->i_generation);
+	if (*lenp < room + 1)

ERROR:SPACING: space prohibited after that '*' (ctx:ExW)
#115: FILE: mm/shmem.c:127:
+	* (unsigned long *)(raw)=inode->i_ino;
 	^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#115: FILE: mm/shmem.c:127:
+	* (unsigned long *)(raw)=inode->i_ino;
 	                        ^

ERROR:SPACING: space prohibited after that '*' (ctx:ExW)
#116: FILE: mm/shmem.c:128:
+	* (__u32 *)(raw + sizeof(inode->i_ino)) =
 	^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#119: FILE: mm/shmem.c:131:
+	*lenp=room+1;
 	     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#119: FILE: mm/shmem.c:131:
+	*lenp=room+1;
 	          ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#124: FILE: mm/shmem.c:136:
+struct dentry *shmem_export_decode_fh(struct super_block *sb,
+			__u32 *data, int len, int fhtype,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#125: FILE: mm/shmem.c:137:
+			int (*acceptable)(void *context, struct dentry * de),

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#128: FILE: mm/shmem.c:140:
+	char * raw = (char *)data;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#129: FILE: mm/shmem.c:141:
+	int room = sizeof (unsigned long) + sizeof (__u32);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#129: FILE: mm/shmem.c:141:
+	int room = sizeof (unsigned long) + sizeof (__u32);

WARNING:LINE_SPACING: Missing a blank line after declarations
#130: FILE: mm/shmem.c:142:
+	int room = sizeof (unsigned long) + sizeof (__u32);
+	if (len < room+1 || raw[room] != TMPFS_EXPORT_MAGIC)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#130: FILE: mm/shmem.c:142:
+	if (len < room+1 || raw[room] != TMPFS_EXPORT_MAGIC)
 	              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#132: FILE: mm/shmem.c:144:
+	return sb->s_export_op->find_exported_dentry(sb,data,NULL,
 	                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#132: FILE: mm/shmem.c:144:
+	return sb->s_export_op->find_exported_dentry(sb,data,NULL,
 	                                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#133: FILE: mm/shmem.c:145:
+		acceptable,context);
 		          ^

ERROR:SPACING: space required before the open brace '{'
#152: FILE: mm/shmem.c:1440:
+		if (!inode->i_ino){

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.66379.commit.146f444897d91a487c4ad54155f7928456640511 total: 22 errors, 14 warnings, 10 checks, 123 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.66379.commit.146f444897d91a487c4ad54155f7928456640511 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
