WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#35: 
> > +#  define pr_debug(fmt, args...) printk( KERN_DEBUG "riport: " fmt, ## args)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#114: FILE: drivers/char/riport.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#131: FILE: drivers/char/riport.c:18:
+ *   along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#132: FILE: drivers/char/riport.c:19:
+ *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#183: FILE: drivers/char/riport.c:70:
+#include <asm/uaccess.h>

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#184: FILE: drivers/char/riport.c:71:
+#include <asm/io.h>

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#196: FILE: drivers/char/riport.c:83:
+	spinlock_t lock;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#198: FILE: drivers/char/riport.c:85:
+	unsigned char *pbuf;	/* pointer to the start of the memory that
+				stores scans from the riegl */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#198: FILE: drivers/char/riport.c:85:
+				stores scans from the riegl */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#202: FILE: drivers/char/riport.c:89:
+	unsigned char *pout;	/* pointer to the start of new data (end of
+				old/read data) */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#202: FILE: drivers/char/riport.c:89:
+				old/read data) */

CHECK:CAMELCASE: Avoid CamelCase: <syncWord>
#216: FILE: drivers/char/riport.c:103:
+	short syncWord;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:LINE_SPACING: Please don't use multiple blank lines
#219: FILE: drivers/char/riport.c:106:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#221: FILE: drivers/char/riport.c:108:
+static struct devriport __init *devriport_init(int major, int minor, unsigned int io, int irq,
+				   int dma, int size, int *presult)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*this)...) over kzalloc(sizeof(struct devriport)...)
#226: FILE: drivers/char/riport.c:113:
+	this = kzalloc(sizeof(struct devriport), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:SPACING: space prohibited before that close parenthesis ')'
#238: FILE: drivers/char/riport.c:125:
+		pr_debug("request_region 0x%X of 3 bytes fails\n", io + ECP_OFFSET );

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#260: FILE: drivers/char/riport.c:147:
+	printk(KERN_NOTICE

ERROR:SPACING: space required after that ',' (ctx:VxV)
#266: FILE: drivers/char/riport.c:153:
+	release_region(io + ECP_OFFSET,3);
 	                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#268: FILE: drivers/char/riport.c:155:
+	release_region(io,3);
 	                 ^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#275: FILE: drivers/char/riport.c:162:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#285: FILE: drivers/char/riport.c:172:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#293: FILE: drivers/char/riport.c:180:
+	outb(ECR_SPP_MODE | ECR_ERRINT_DISABLED | ECR_SERVICE_INTERRUPT,
+		this->io_ext + ECR_EXT);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#304: FILE: drivers/char/riport.c:191:
+
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#318: FILE: drivers/char/riport.c:205:
+	while (free && !(ECR_FIFO_EMPTY & inb(this->io_ext + ECR_EXT))) {
+

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#319: FILE: drivers/char/riport.c:206:
+		if (this->readstate != RPDUMP_TIMESTAMP)
+				*(this->pin++) = inb(this->io_ext + FIFO_EXT);

CHECK:BRACES: braces {} should be used on all arms of this statement
#358: FILE: drivers/char/riport.c:245:
+			if (this->numbytesthisstate < 2)
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#362: FILE: drivers/char/riport.c:249:
+			else {

CHECK:BRACES: Unbalanced braces around else statement
#398: FILE: drivers/char/riport.c:285:
+			else {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#399: FILE: drivers/char/riport.c:286:
+			else {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#450: FILE: drivers/char/riport.c:337:
+		outb(ECR_ECP_MODE | ECR_ERRINT_DISABLED,
+			this->io_ext + ECR_EXT);

ERROR:CODE_INDENT: code indent should use tabs where possible
#452: FILE: drivers/char/riport.c:339:
+^I    ^I/* disable IRQ's */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#452: FILE: drivers/char/riport.c:339:
+^I    ^I/* disable IRQ's */$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#457: FILE: drivers/char/riport.c:344:
+static int devriport_read(struct file * pfile, __user char *pbuf, int length)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#503: FILE: drivers/char/riport.c:390:
+		}
+		else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#503: FILE: drivers/char/riport.c:390:
+		else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#512: FILE: drivers/char/riport.c:399:
+			count = copy_to_user(pbuf + length1, this->pbuf,
+				length - length1);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#516: FILE: drivers/char/riport.c:403:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#516: FILE: drivers/char/riport.c:403:
+	else {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#531: FILE: drivers/char/riport.c:418:
+	spin_unlock_irqrestore(&this->lock,flags);
 	                                  ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#536: FILE: drivers/char/riport.c:423:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#556: FILE: drivers/char/riport.c:443:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#581: FILE: drivers/char/riport.c:468:
+	outb(ECR_SPP_MODE | ECR_ERRINT_DISABLED | ECR_SERVICE_INTERRUPT,
+		 this->io_ext + ECR_EXT);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#583: FILE: drivers/char/riport.c:470:
+	outb(DCR_NOT_REVERSE_REQUEST | DCR_NOT_1284_ACTIVE,
+	      this->io + DCR_BASE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#587: FILE: drivers/char/riport.c:474:
+	outb(ECR_BYTE_MODE | ECR_ERRINT_DISABLED | ECR_SERVICE_INTERRUPT,
+		this->io_ext + ECR_EXT);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#590: FILE: drivers/char/riport.c:477:
+	outb(ECR_ECP_MODE | ECR_ERRINT_DISABLED | ECR_SERVICE_INTERRUPT,
+	      this->io_ext + ECR_EXT);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#594: FILE: drivers/char/riport.c:481:
+	result = request_irq(this->irq, devriport_irq_wrap, SA_INTERRUPT,
+			"riport", this);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#608: FILE: drivers/char/riport.c:495:
+	this->pbuf_top = this->pbuf = this->pin = this->pout = NULL;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#626: FILE: drivers/char/riport.c:513:
+	if (! atomic_dec_and_test (&riport_available)) {

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#626: FILE: drivers/char/riport.c:513:
+	if (! atomic_dec_and_test (&riport_available)) {
 	    ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '&riport_available'
#626: FILE: drivers/char/riport.c:513:
+	if (! atomic_dec_and_test (&riport_available)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'drvriport_open', this function's name, in a string
#631: FILE: drivers/char/riport.c:518:
+	pr_debug("drvriport_open\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#649: FILE: drivers/char/riport.c:536:
+static ssize_t drvriport_read(struct file * pfile, char __user *pbuf, size_t length,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#650: FILE: drivers/char/riport.c:537:
+static ssize_t drvriport_read(struct file * pfile, char __user *pbuf, size_t length,
+			 loff_t * ppos)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#650: FILE: drivers/char/riport.c:537:
+			 loff_t * ppos)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#671: FILE: drivers/char/riport.c:558:
+
+

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#694: FILE: drivers/char/riport.c:581:
+	if ((result = register_chrdev(major, "riport", &drvriport_fops)) < 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#702: FILE: drivers/char/riport.c:589:
+	pdev = devriport_init(riport.major, riport.numdevs, io, irq, dma,
+		size, &result);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#715: FILE: drivers/char/riport.c:602:
+	class_err = class_device_create(riport_class, NULL,
+		MKDEV(riport.major, 0), NULL, "riport0");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#762: FILE: drivers/char/riport.c:649:
+
+

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.64714.commit.4379cc77c05f651ec4f0115cdcc501406120afbc total: 14 errors, 13 warnings, 32 checks, 674 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.64714.commit.4379cc77c05f651ec4f0115cdcc501406120afbc has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
