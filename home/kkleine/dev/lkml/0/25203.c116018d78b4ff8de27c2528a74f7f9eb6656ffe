WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
Attached is a not-very-pretty patch to qemu-0.8.2 that allows it to use kvm.

ERROR:CODE_INDENT: code indent should use tabs where possible
#88: FILE: cpu-exec.c:457:
+            kvm_cpu_exec(env);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#88: FILE: cpu-exec.c:457:
+            kvm_cpu_exec(env);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#89: FILE: cpu-exec.c:458:
+            longjmp(env->jmp_env, 1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#89: FILE: cpu-exec.c:458:
+            longjmp(env->jmp_env, 1);$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#128: FILE: exec.c:84:
+uint8_t *bios_mem;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#138: FILE: exec.c:1048:
+    kvm_update_debugger(env);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#148: FILE: exec.c:1074:
+    kvm_update_debugger(env);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#150: FILE: exec.c:1076:
+    $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#150: FILE: exec.c:1076:
+    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#159: FILE: exec.c:1096:
+    kvm_update_debugger(env);$

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#206: FILE: configure:792:
+configure_kvm() {

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#222: FILE: configure:808:
+  configure_kvm

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#230: FILE: configure:840:
+  configure_kvm

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#247: FILE: helper.c:192:
+    if ((type & 5) != 1)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#260: FILE: helper.c:510:
+        ((env->tr.flags >> DESC_TYPE_SHIFT) & 0xd) != 9 ||$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#260: FILE: helper.c:510:
+        ((env->tr.flags >> DESC_TYPE_SHIFT) & 0xd) != 9 ||$

WARNING:TYPO_SPELLING: 'unexpect' may be misspelled - perhaps 'unexpected'?
#272: FILE: helper.c:841:
+    printf("%s: unexpect\n", __FUNCTION__);
                 ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#272: FILE: helper.c:841:
+    printf("%s: unexpect\n", __FUNCTION__);$

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#272: FILE: helper.c:841:
+    printf("%s: unexpect\n", __FUNCTION__);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#273: FILE: helper.c:842:
+    exit(-1);$

WARNING:TYPO_SPELLING: 'unexpect' may be misspelled - perhaps 'unexpected'?
#284: FILE: helper.c:1129:
+    printf("%s: unexpect\n", __FUNCTION__);
                 ^^^^^^^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#284: FILE: helper.c:1129:
+    printf("%s: unexpect\n", __FUNCTION__);$

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#284: FILE: helper.c:1129:
+    printf("%s: unexpect\n", __FUNCTION__);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#285: FILE: helper.c:1130:
+    exit(-1);$

WARNING:TYPO_SPELLING: 'unexpect' may be misspelled - perhaps 'unexpected'?
#295: FILE: helper.c:1158:
+    printf("%s: unexpect\n", __FUNCTION__);
                 ^^^^^^^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#295: FILE: helper.c:1158:
+    printf("%s: unexpect\n", __FUNCTION__);$

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#295: FILE: helper.c:1158:
+    printf("%s: unexpect\n", __FUNCTION__);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#296: FILE: helper.c:1159:
+    exit(-1);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#306: FILE: helper.c:1690:
+        if (e2 & DESC_L_MASK) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#306: FILE: helper.c:1690:
+        if (e2 & DESC_L_MASK) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#306: FILE: helper.c:1690:
+        if (e2 & DESC_L_MASK) {
+            env->exception_index = -1;

ERROR:CODE_INDENT: code indent should use tabs where possible
#307: FILE: helper.c:1691:
+            env->exception_index = -1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#307: FILE: helper.c:1691:
+            env->exception_index = -1;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#308: FILE: helper.c:1692:
+            cpu_loop_exit();   $

ERROR:CODE_INDENT: code indent should use tabs where possible
#308: FILE: helper.c:1692:
+            cpu_loop_exit();   $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#308: FILE: helper.c:1692:
+            cpu_loop_exit();   $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#309: FILE: helper.c:1693:
+        }       $

ERROR:CODE_INDENT: code indent should use tabs where possible
#309: FILE: helper.c:1693:
+        }       $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#309: FILE: helper.c:1693:
+        }       $

CHECK:BIT_MACRO: Prefer using the BIT macro
#326: FILE: cpu.h:161:
+#define HF_VM_MASK           (1 << HF_VM_SHIFT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#332: FILE: cpu.h:165:
+#define CR0_PE_MASK  (1 << CR0_PE_SHIFT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#334: FILE: cpu.h:167:
+#define CR0_MP_MASK  (1 << CR0_MP_SHIFT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#344: FILE: cpu.h:185:
+#define CR4_OSFXSR_MASK (1 << CR4_OSFXSR_SHIFT)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#354: FILE: cpu.h:534:
+    int kvm_pending_int;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#379: FILE: cirrus_vga.c:238:
+    unsigned long cirrus_lfb_addr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#380: FILE: cirrus_vga.c:239:
+    unsigned long cirrus_lfb_end;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#390: FILE: cirrus_vga.c:278:
+    unsigned long map_addr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#391: FILE: cirrus_vga.c:279:
+    unsigned long map_end;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#408: FILE: cirrus_vga.c:2542:
+    void *vram_pointer = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#410: FILE: cirrus_vga.c:2544:
+    printf("set_vram_mapping: memory: %lx - %lx\n",$

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'set_vram_mapping', this function's name, in a string
#410: FILE: cirrus_vga.c:2544:
+    printf("set_vram_mapping: memory: %lx - %lx\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#414: FILE: cirrus_vga.c:2548:
+    begin = begin & TARGET_PAGE_MASK;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#415: FILE: cirrus_vga.c:2549:
+    end = begin + VGA_RAM_SIZE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#416: FILE: cirrus_vga.c:2550:
+    end = (end + TARGET_PAGE_SIZE -1 ) & TARGET_PAGE_MASK;$

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#416: FILE: cirrus_vga.c:2550:
+    end = (end + TARGET_PAGE_SIZE -1 ) & TARGET_PAGE_MASK;
                                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that close parenthesis ')'
#416: FILE: cirrus_vga.c:2550:
+    end = (end + TARGET_PAGE_SIZE -1 ) & TARGET_PAGE_MASK;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#418: FILE: cirrus_vga.c:2552:
+    vram_pointer = kvm_create_phys_mem(kvm_context, begin, end - begin, 1, $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#418: FILE: cirrus_vga.c:2552:
+    vram_pointer = kvm_create_phys_mem(kvm_context, begin, end - begin, 1, $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#421: FILE: cirrus_vga.c:2555:
+    if (vram_pointer == NULL) {$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!vram_pointer"
#421: FILE: cirrus_vga.c:2555:
+    if (vram_pointer == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:CODE_INDENT: code indent should use tabs where possible
#422: FILE: cirrus_vga.c:2556:
+        printf("set_vram_mapping: cannot allocate memory: %m\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#422: FILE: cirrus_vga.c:2556:
+        printf("set_vram_mapping: cannot allocate memory: %m\n");$

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'set_vram_mapping', this function's name, in a string
#422: FILE: cirrus_vga.c:2556:
+        printf("set_vram_mapping: cannot allocate memory: %m\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#423: FILE: cirrus_vga.c:2557:
+        return NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#423: FILE: cirrus_vga.c:2557:
+        return NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#424: FILE: cirrus_vga.c:2558:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#426: FILE: cirrus_vga.c:2560:
+    memset(vram_pointer, 0, end - begin);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#428: FILE: cirrus_vga.c:2562:
+    printf("set_vram_mapping: return %p\n", vram_pointer);$

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'set_vram_mapping', this function's name, in a string
#428: FILE: cirrus_vga.c:2562:
+    printf("set_vram_mapping: return %p\n", vram_pointer);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#429: FILE: cirrus_vga.c:2563:
+    return vram_pointer;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#435: FILE: cirrus_vga.c:2569:
+    end = begin + VGA_RAM_SIZE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#436: FILE: cirrus_vga.c:2570:
+    begin = begin & TARGET_PAGE_MASK;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#437: FILE: cirrus_vga.c:2571:
+    end = (end + TARGET_PAGE_SIZE -1 ) & TARGET_PAGE_MASK;$

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#437: FILE: cirrus_vga.c:2571:
+    end = (end + TARGET_PAGE_SIZE -1 ) & TARGET_PAGE_MASK;
                                   ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#437: FILE: cirrus_vga.c:2571:
+    end = (end + TARGET_PAGE_SIZE -1 ) & TARGET_PAGE_MASK;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#439: FILE: cirrus_vga.c:2573:
+    kvm_destroy_phys_mem(kvm_context, begin, end - begin);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#441: FILE: cirrus_vga.c:2575:
+    return 0;$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#452: FILE: cirrus_vga.c:2597:
 	if (mode < 4 || mode > 5 || ((s->gr[0x0B] & 0x4) == 0)) {
[...]
+            if (s->cirrus_lfb_addr && s->cirrus_lfb_end && !s->map_addr) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#454: FILE: cirrus_vga.c:2599:
+            if (s->cirrus_lfb_addr && s->cirrus_lfb_end && !s->map_addr) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#454: FILE: cirrus_vga.c:2599:
+            if (s->cirrus_lfb_addr && s->cirrus_lfb_end && !s->map_addr) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#455: FILE: cirrus_vga.c:2600:
+                void *vram_pointer, *old_vram;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#455: FILE: cirrus_vga.c:2600:
+                void *vram_pointer, *old_vram;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#457: FILE: cirrus_vga.c:2602:
+                vram_pointer = set_vram_mapping(s->cirrus_lfb_addr,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#457: FILE: cirrus_vga.c:2602:
+                vram_pointer = set_vram_mapping(s->cirrus_lfb_addr,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#458: FILE: cirrus_vga.c:2603:
+                                                s->cirrus_lfb_end);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#458: FILE: cirrus_vga.c:2603:
+                                                s->cirrus_lfb_end);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#459: FILE: cirrus_vga.c:2604:
+                if (!vram_pointer)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#459: FILE: cirrus_vga.c:2604:
+                if (!vram_pointer)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#459: FILE: cirrus_vga.c:2604:
+                if (!vram_pointer)
+                    fprintf(stderr, "NULL vram_pointer\n");

CHECK:BRACES: braces {} should be used on all arms of this statement
#459: FILE: cirrus_vga.c:2604:
+                if (!vram_pointer)
[...]
+                else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#460: FILE: cirrus_vga.c:2605:
+                    fprintf(stderr, "NULL vram_pointer\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#460: FILE: cirrus_vga.c:2605:
+                    fprintf(stderr, "NULL vram_pointer\n");$

ERROR:CODE_INDENT: code indent should use tabs where possible
#461: FILE: cirrus_vga.c:2606:
+                else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#461: FILE: cirrus_vga.c:2606:
+                else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#461: FILE: cirrus_vga.c:2606:
+                else {
+                    old_vram = vga_update_vram((VGAState *)s, vram_pointer,

CHECK:BRACES: Unbalanced braces around else statement
#461: FILE: cirrus_vga.c:2606:
+                else {

ERROR:CODE_INDENT: code indent should use tabs where possible
#462: FILE: cirrus_vga.c:2607:
+                    old_vram = vga_update_vram((VGAState *)s, vram_pointer,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#462: FILE: cirrus_vga.c:2607:
+                    old_vram = vga_update_vram((VGAState *)s, vram_pointer,$

CHECK:CAMELCASE: Avoid CamelCase: <VGAState>
#462: FILE: cirrus_vga.c:2607:
+                    old_vram = vga_update_vram((VGAState *)s, vram_pointer,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:CODE_INDENT: code indent should use tabs where possible
#463: FILE: cirrus_vga.c:2608:
+                                               VGA_RAM_SIZE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#463: FILE: cirrus_vga.c:2608:
+                                               VGA_RAM_SIZE);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#464: FILE: cirrus_vga.c:2609:
+                    qemu_free(old_vram);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#464: FILE: cirrus_vga.c:2609:
+                    qemu_free(old_vram);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#465: FILE: cirrus_vga.c:2610:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#465: FILE: cirrus_vga.c:2610:
+                }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#466: FILE: cirrus_vga.c:2611:
+                s->map_addr = s->cirrus_lfb_addr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#466: FILE: cirrus_vga.c:2611:
+                s->map_addr = s->cirrus_lfb_addr;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#467: FILE: cirrus_vga.c:2612:
+                s->map_end = s->cirrus_lfb_end;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#467: FILE: cirrus_vga.c:2612:
+                s->map_end = s->cirrus_lfb_end;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#468: FILE: cirrus_vga.c:2613:
+            }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#468: FILE: cirrus_vga.c:2613:
+            }$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#473: FILE: cirrus_vga.c:2618:
         } else {
[...]
+            if (s->cirrus_lfb_addr && s->cirrus_lfb_end && s->map_addr) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#476: FILE: cirrus_vga.c:2621:
+            if (s->cirrus_lfb_addr && s->cirrus_lfb_end && s->map_addr) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#476: FILE: cirrus_vga.c:2621:
+            if (s->cirrus_lfb_addr && s->cirrus_lfb_end && s->map_addr) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#478: FILE: cirrus_vga.c:2623:
+                void *old_vram = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#478: FILE: cirrus_vga.c:2623:
+                void *old_vram = NULL;$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#482: FILE: cirrus_vga.c:2627:
+		if (!error)
+		    old_vram = vga_update_vram((VGAState *)s, NULL,

ERROR:CODE_INDENT: code indent should use tabs where possible
#484: FILE: cirrus_vga.c:2629:
+                                               VGA_RAM_SIZE);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#484: FILE: cirrus_vga.c:2629:
+		    old_vram = vga_update_vram((VGAState *)s, NULL,
+                                               VGA_RAM_SIZE);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#484: FILE: cirrus_vga.c:2629:
+                                               VGA_RAM_SIZE);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#485: FILE: cirrus_vga.c:2630:
+                if (old_vram)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#485: FILE: cirrus_vga.c:2630:
+                if (old_vram)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#485: FILE: cirrus_vga.c:2630:
+                if (old_vram)
+                    munmap(old_vram, s->map_addr - s->map_end);

ERROR:CODE_INDENT: code indent should use tabs where possible
#486: FILE: cirrus_vga.c:2631:
+                    munmap(old_vram, s->map_addr - s->map_end);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#486: FILE: cirrus_vga.c:2631:
+                    munmap(old_vram, s->map_addr - s->map_end);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#487: FILE: cirrus_vga.c:2632:
+                s->map_addr = s->map_end = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#487: FILE: cirrus_vga.c:2632:
+                s->map_addr = s->map_end = 0;$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#487: FILE: cirrus_vga.c:2632:
+                s->map_addr = s->map_end = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:CODE_INDENT: code indent should use tabs where possible
#488: FILE: cirrus_vga.c:2633:
+            }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#488: FILE: cirrus_vga.c:2633:
+            }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#499: FILE: cirrus_vga.c:3032:
+    qemu_put_be32s(f, &s->real_vram_size);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#500: FILE: cirrus_vga.c:3033:
+    qemu_put_buffer(f, s->vram_ptr, s->real_vram_size);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#510: FILE: cirrus_vga.c:3079:
+    {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#511: FILE: cirrus_vga.c:3080:
+        int real_vram_size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#511: FILE: cirrus_vga.c:3080:
+        int real_vram_size;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#512: FILE: cirrus_vga.c:3081:
+        qemu_get_be32s(f, &real_vram_size);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#512: FILE: cirrus_vga.c:3081:
+        int real_vram_size;
+        qemu_get_be32s(f, &real_vram_size);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#512: FILE: cirrus_vga.c:3081:
+        qemu_get_be32s(f, &real_vram_size);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#513: FILE: cirrus_vga.c:3082:
+        if (real_vram_size != s->real_vram_size) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#513: FILE: cirrus_vga.c:3082:
+        if (real_vram_size != s->real_vram_size) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#513: FILE: cirrus_vga.c:3082:
+        if (real_vram_size != s->real_vram_size) {
+            if (real_vram_size > s->real_vram_size)

ERROR:CODE_INDENT: code indent should use tabs where possible
#514: FILE: cirrus_vga.c:3083:
+            if (real_vram_size > s->real_vram_size)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#514: FILE: cirrus_vga.c:3083:
+            if (real_vram_size > s->real_vram_size)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#515: FILE: cirrus_vga.c:3084:
+                real_vram_size = s->real_vram_size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#515: FILE: cirrus_vga.c:3084:
+                real_vram_size = s->real_vram_size;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#516: FILE: cirrus_vga.c:3085:
+            printf("%s: REAL_VRAM_SIZE MISMATCH !!!!!! SAVED=%d CURRENT=%d", $

ERROR:CODE_INDENT: code indent should use tabs where possible
#516: FILE: cirrus_vga.c:3085:
+            printf("%s: REAL_VRAM_SIZE MISMATCH !!!!!! SAVED=%d CURRENT=%d", $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#516: FILE: cirrus_vga.c:3085:
+            printf("%s: REAL_VRAM_SIZE MISMATCH !!!!!! SAVED=%d CURRENT=%d", $

ERROR:CODE_INDENT: code indent should use tabs where possible
#517: FILE: cirrus_vga.c:3086:
+                   __FUNCTION__, real_vram_size, s->real_vram_size);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#517: FILE: cirrus_vga.c:3086:
+                   __FUNCTION__, real_vram_size, s->real_vram_size);$

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#517: FILE: cirrus_vga.c:3086:
+                   __FUNCTION__, real_vram_size, s->real_vram_size);

ERROR:CODE_INDENT: code indent should use tabs where possible
#518: FILE: cirrus_vga.c:3087:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#518: FILE: cirrus_vga.c:3087:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#519: FILE: cirrus_vga.c:3088:
+        qemu_get_buffer(f, s->vram_ptr, real_vram_size);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#519: FILE: cirrus_vga.c:3088:
+        qemu_get_buffer(f, s->vram_ptr, real_vram_size);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#520: FILE: cirrus_vga.c:3089:
+        cirrus_update_memory_access(s);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#520: FILE: cirrus_vga.c:3089:
+        cirrus_update_memory_access(s);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#521: FILE: cirrus_vga.c:3090:
+    }$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#524: FILE: cirrus_vga.c:3093:
+
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#533: FILE: cirrus_vga.c:3250:
+    s->cirrus_lfb_addr = addr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#534: FILE: cirrus_vga.c:3251:
+    s->cirrus_lfb_end = addr + VGA_RAM_SIZE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#536: FILE: cirrus_vga.c:3253:
+    if (s->map_addr && (s->cirrus_lfb_addr != s->map_addr) &&$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 's->cirrus_lfb_addr != s->map_addr'
#536: FILE: cirrus_vga.c:3253:
+    if (s->map_addr && (s->cirrus_lfb_addr != s->map_addr) &&
+        (s->cirrus_lfb_end != s->map_end))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 's->cirrus_lfb_end != s->map_end'
#536: FILE: cirrus_vga.c:3253:
+    if (s->map_addr && (s->cirrus_lfb_addr != s->map_addr) &&
+        (s->cirrus_lfb_end != s->map_end))

ERROR:CODE_INDENT: code indent should use tabs where possible
#537: FILE: cirrus_vga.c:3254:
+        (s->cirrus_lfb_end != s->map_end))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#537: FILE: cirrus_vga.c:3254:
+        (s->cirrus_lfb_end != s->map_end))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#538: FILE: cirrus_vga.c:3255:
+        printf("cirrus vga map change while on lfb mode\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#538: FILE: cirrus_vga.c:3255:
+        printf("cirrus vga map change while on lfb mode\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#585: FILE: pc.c:685:
+    memcpy(phys_ram_base + 0xc0000, phys_ram_base + vga_bios_offset, 0x10000);$

WARNING:LONG_LINE: line length of 127 exceeds 100 columns
#595: FILE: pc.c:698:
+    memcpy(phys_ram_base + 0x100000 - isa_bios_size, phys_ram_base + (bios_offset + bios_size - isa_bios_size), isa_bios_size);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#595: FILE: pc.c:698:
+    memcpy(phys_ram_base + 0x100000 - isa_bios_size, phys_ram_base + (bios_offset + bios_size - isa_bios_size), isa_bios_size);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#601: FILE: pc.c:704:
+    bios_mem = kvm_create_phys_mem(kvm_context, (uint32_t)(-bios_size),$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#602: FILE: pc.c:705:
+    bios_mem = kvm_create_phys_mem(kvm_context, (uint32_t)(-bios_size),
+				       bios_size, 2, 0, 1);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#603: FILE: pc.c:706:
+    if (!bios_mem) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 12)
#603: FILE: pc.c:706:
+    if (!bios_mem) {
+	    exit(1);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#603: FILE: pc.c:706:
+    if (!bios_mem) {
+	    exit(1);
+    }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#605: FILE: pc.c:708:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#606: FILE: pc.c:709:
+    memcpy(bios_mem, phys_ram_base + bios_offset, bios_size);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#608: FILE: pc.c:711:
+    cpu_register_physical_memory(phys_ram_size - KVM_EXTRA_PAGES * 4096, KVM_EXTRA_PAGES * 4096,$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#612: FILE: pc.c:715:
+    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#612: FILE: pc.c:715:
+    $

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#629: FILE: vga.c:1367:
+static int bitmap_get_dirty(unsigned long *bitmap, unsigned nr)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#631: FILE: vga.c:1369:
+    unsigned word = nr / ((sizeof bitmap[0]) * 8);$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#631: FILE: vga.c:1369:
+    unsigned word = nr / ((sizeof bitmap[0]) * 8);

WARNING:SIZEOF_PARENTHESIS: sizeof bitmap[0] should be sizeof(bitmap[0])
#631: FILE: vga.c:1369:
+    unsigned word = nr / ((sizeof bitmap[0]) * 8);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#632: FILE: vga.c:1370:
+    unsigned bit = nr % ((sizeof bitmap[0]) * 8);$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#632: FILE: vga.c:1370:
+    unsigned bit = nr % ((sizeof bitmap[0]) * 8);

WARNING:SIZEOF_PARENTHESIS: sizeof bitmap[0] should be sizeof(bitmap[0])
#632: FILE: vga.c:1370:
+    unsigned bit = nr % ((sizeof bitmap[0]) * 8);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#635: FILE: vga.c:1373:
+    return (bitmap[word] >> bit) & 1;$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#650: FILE: vga.c:1393:
+#define BITMAP_SIZE ((8*1024*1024) / 4096 / 8 / sizeof(long))
                        ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#650: FILE: vga.c:1393:
+#define BITMAP_SIZE ((8*1024*1024) / 4096 / 8 / sizeof(long))
                             ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#651: FILE: vga.c:1394:
+    unsigned long bitmap[BITMAP_SIZE];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#653: FILE: vga.c:1396:
+    kvm_get_dirty_pages(kvm_context, 1, &bitmap);$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'addr' - possible side-effects?
#655: FILE: vga.c:1398:
+#define cpu_physical_memory_get_dirty(addr, type) \
+    (bitmap_get_dirty(bitmap, (addr - s->vram_offset) >> TARGET_PAGE_BITS) \
+     | cpu_physical_memory_get_dirty(addr, type))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'addr' may be better as '(addr)' to avoid precedence issues
#655: FILE: vga.c:1398:
+#define cpu_physical_memory_get_dirty(addr, type) \
+    (bitmap_get_dirty(bitmap, (addr - s->vram_offset) >> TARGET_PAGE_BITS) \
+     | cpu_physical_memory_get_dirty(addr, type))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#656: FILE: vga.c:1399:
+    (bitmap_get_dirty(bitmap, (addr - s->vram_offset) >> TARGET_PAGE_BITS) \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#657: FILE: vga.c:1400:
+     | cpu_physical_memory_get_dirty(addr, type))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#678: FILE: vga.c:1788:
+    s->vram_ptr = qemu_malloc(vga_ram_size);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#697: FILE: vga.c:1904:
+    uint8_t *old_pointer;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#697: FILE: vga.c:1904:
+    uint8_t *old_pointer;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#699: FILE: vga.c:1906:
+    printf("vga_update_vram: base %p ptr %p\n", vga_ram_base, s->vram_ptr);$

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'vga_update_vram', this function's name, in a string
#699: FILE: vga.c:1906:
+    printf("vga_update_vram: base %p ptr %p\n", vga_ram_base, s->vram_ptr);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#700: FILE: vga.c:1907:
+    if (s->vram_size != vga_ram_size) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#701: FILE: vga.c:1908:
+        fprintf(stderr, "No support to change vga_ram_size\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#701: FILE: vga.c:1908:
+        fprintf(stderr, "No support to change vga_ram_size\n");$

ERROR:CODE_INDENT: code indent should use tabs where possible
#702: FILE: vga.c:1909:
+        return NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#702: FILE: vga.c:1909:
+        return NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#703: FILE: vga.c:1910:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#705: FILE: vga.c:1912:
+    if (!vga_ram_base) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#706: FILE: vga.c:1913:
+        vga_ram_base = qemu_malloc(vga_ram_size);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#706: FILE: vga.c:1913:
+        vga_ram_base = qemu_malloc(vga_ram_size);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#707: FILE: vga.c:1914:
+        if (!vga_ram_base) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#707: FILE: vga.c:1914:
+        if (!vga_ram_base) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#707: FILE: vga.c:1914:
+        if (!vga_ram_base) {
+            fprintf(stderr, "reallocate error\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#708: FILE: vga.c:1915:
+            fprintf(stderr, "reallocate error\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#708: FILE: vga.c:1915:
+            fprintf(stderr, "reallocate error\n");$

ERROR:CODE_INDENT: code indent should use tabs where possible
#709: FILE: vga.c:1916:
+            return NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#709: FILE: vga.c:1916:
+            return NULL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#710: FILE: vga.c:1917:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#710: FILE: vga.c:1917:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#711: FILE: vga.c:1918:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#714: FILE: vga.c:1921:
+    memcpy(vga_ram_base, s->vram_ptr, vga_ram_size);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#715: FILE: vga.c:1922:
+    old_pointer = s->vram_ptr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#716: FILE: vga.c:1923:
+    s->vram_ptr = vga_ram_base;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#718: FILE: vga.c:1925:
+    printf("vga_update_vram: done\n");$

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'vga_update_vram', this function's name, in a string
#718: FILE: vga.c:1925:
+    printf("vga_update_vram: done\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#719: FILE: vga.c:1926:
+    return old_pointer;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#733: FILE: cpu-all.h:821:
+extern uint8_t *bios_mem;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#742: FILE: qemu-kvm.c:1:
+

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:CAMELCASE: Avoid CamelCase: <CPUState>
#757: FILE: qemu-kvm.c:16:
+static CPUState *saved_env[NR_CPU];

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#761: FILE: qemu-kvm.c:20:
+    struct kvm_regs regs;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#762: FILE: qemu-kvm.c:21:
+    struct kvm_sregs sregs;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#765: FILE: qemu-kvm.c:24:
+    if (!saved_env[0])$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#768: FILE: qemu-kvm.c:27:
+    regs.rax = env->regs[R_EAX];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#769: FILE: qemu-kvm.c:28:
+    regs.rbx = env->regs[R_EBX];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#770: FILE: qemu-kvm.c:29:
+    regs.rcx = env->regs[R_ECX];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#771: FILE: qemu-kvm.c:30:
+    regs.rdx = env->regs[R_EDX];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#772: FILE: qemu-kvm.c:31:
+    regs.rsi = env->regs[R_ESI];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#773: FILE: qemu-kvm.c:32:
+    regs.rdi = env->regs[R_EDI];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#774: FILE: qemu-kvm.c:33:
+    regs.rsp = env->regs[R_ESP];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#775: FILE: qemu-kvm.c:34:
+    regs.rbp = env->regs[R_EBP];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#777: FILE: qemu-kvm.c:36:
+    regs.r8 = env->regs[8];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#778: FILE: qemu-kvm.c:37:
+    regs.r9 = env->regs[9];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#779: FILE: qemu-kvm.c:38:
+    regs.r10 = env->regs[10];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#780: FILE: qemu-kvm.c:39:
+    regs.r11 = env->regs[11];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#781: FILE: qemu-kvm.c:40:
+    regs.r12 = env->regs[12];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#782: FILE: qemu-kvm.c:41:
+    regs.r13 = env->regs[13];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#783: FILE: qemu-kvm.c:42:
+    regs.r14 = env->regs[14];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#784: FILE: qemu-kvm.c:43:
+    regs.r15 = env->regs[15];$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#786: FILE: qemu-kvm.c:45:
+    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#786: FILE: qemu-kvm.c:45:
+    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#787: FILE: qemu-kvm.c:46:
+    regs.rflags = env->eflags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#788: FILE: qemu-kvm.c:47:
+    regs.rip = env->eip;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#790: FILE: qemu-kvm.c:49:
+    kvm_set_regs(kvm_context, 0, &regs);$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'var' - possible side-effects?
#792: FILE: qemu-kvm.c:51:
+#define set_seg(var, seg, default_s, default_type)	\
+  do {				    \
+      unsigned flags = env->seg.flags; \
+      unsigned valid = flags & ~DESC_P_MASK; \
+    sregs.var.selector = env->seg.selector; \
+    sregs.var.base = env->seg.base; \
+    sregs.var.limit = env->seg.limit; \
+    sregs.var.type = valid ? (flags >> DESC_TYPE_SHIFT) & 15 : default_type; \
+    sregs.var.present = valid ? (flags & DESC_P_MASK) != 0 : 1; \
+    sregs.var.dpl = env->seg.selector & 3; \
+    sregs.var.db = valid ? (flags >> DESC_B_SHIFT) & 1 : 0; \
+    sregs.var.s = valid ? (flags & DESC_S_MASK) != 0 : default_s;   \
+    sregs.var.l = valid ? (flags >> DESC_L_SHIFT) & 1 : 0;    \
+    sregs.var.g = valid ? (flags & DESC_G_MASK) != 0 : 0;      \
+    sregs.var.avl = (flags & DESC_AVL_MASK) != 0; \
+    sregs.var.unusable = 0; \
+  } while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'seg' - possible side-effects?
#792: FILE: qemu-kvm.c:51:
+#define set_seg(var, seg, default_s, default_type)	\
+  do {				    \
+      unsigned flags = env->seg.flags; \
+      unsigned valid = flags & ~DESC_P_MASK; \
+    sregs.var.selector = env->seg.selector; \
+    sregs.var.base = env->seg.base; \
+    sregs.var.limit = env->seg.limit; \
+    sregs.var.type = valid ? (flags >> DESC_TYPE_SHIFT) & 15 : default_type; \
+    sregs.var.present = valid ? (flags & DESC_P_MASK) != 0 : 1; \
+    sregs.var.dpl = env->seg.selector & 3; \
+    sregs.var.db = valid ? (flags >> DESC_B_SHIFT) & 1 : 0; \
+    sregs.var.s = valid ? (flags & DESC_S_MASK) != 0 : default_s;   \
+    sregs.var.l = valid ? (flags >> DESC_L_SHIFT) & 1 : 0;    \
+    sregs.var.g = valid ? (flags & DESC_G_MASK) != 0 : 0;      \
+    sregs.var.avl = (flags & DESC_AVL_MASK) != 0; \
+    sregs.var.unusable = 0; \
+  } while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'seg' may be better as '(seg)' to avoid precedence issues
#792: FILE: qemu-kvm.c:51:
+#define set_seg(var, seg, default_s, default_type)	\
+  do {				    \
+      unsigned flags = env->seg.flags; \
+      unsigned valid = flags & ~DESC_P_MASK; \
+    sregs.var.selector = env->seg.selector; \
+    sregs.var.base = env->seg.base; \
+    sregs.var.limit = env->seg.limit; \
+    sregs.var.type = valid ? (flags >> DESC_TYPE_SHIFT) & 15 : default_type; \
+    sregs.var.present = valid ? (flags & DESC_P_MASK) != 0 : 1; \
+    sregs.var.dpl = env->seg.selector & 3; \
+    sregs.var.db = valid ? (flags >> DESC_B_SHIFT) & 1 : 0; \
+    sregs.var.s = valid ? (flags & DESC_S_MASK) != 0 : default_s;   \
+    sregs.var.l = valid ? (flags >> DESC_L_SHIFT) & 1 : 0;    \
+    sregs.var.g = valid ? (flags & DESC_G_MASK) != 0 : 0;      \
+    sregs.var.avl = (flags & DESC_AVL_MASK) != 0; \
+    sregs.var.unusable = 0; \
+  } while (0)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#793: FILE: qemu-kvm.c:52:
+  do {^I^I^I^I    \$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#793: FILE: qemu-kvm.c:52:
+  do {				    \
+      unsigned flags = env->seg.flags; \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#794: FILE: qemu-kvm.c:53:
+      unsigned flags = env->seg.flags; \$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#794: FILE: qemu-kvm.c:53:
+      unsigned flags = env->seg.flags; \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#795: FILE: qemu-kvm.c:54:
+      unsigned valid = flags & ~DESC_P_MASK; \$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#795: FILE: qemu-kvm.c:54:
+      unsigned valid = flags & ~DESC_P_MASK; \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#796: FILE: qemu-kvm.c:55:
+    sregs.var.selector = env->seg.selector; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#797: FILE: qemu-kvm.c:56:
+    sregs.var.base = env->seg.base; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#798: FILE: qemu-kvm.c:57:
+    sregs.var.limit = env->seg.limit; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#799: FILE: qemu-kvm.c:58:
+    sregs.var.type = valid ? (flags >> DESC_TYPE_SHIFT) & 15 : default_type; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#800: FILE: qemu-kvm.c:59:
+    sregs.var.present = valid ? (flags & DESC_P_MASK) != 0 : 1; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#801: FILE: qemu-kvm.c:60:
+    sregs.var.dpl = env->seg.selector & 3; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#802: FILE: qemu-kvm.c:61:
+    sregs.var.db = valid ? (flags >> DESC_B_SHIFT) & 1 : 0; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#803: FILE: qemu-kvm.c:62:
+    sregs.var.s = valid ? (flags & DESC_S_MASK) != 0 : default_s;   \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#804: FILE: qemu-kvm.c:63:
+    sregs.var.l = valid ? (flags >> DESC_L_SHIFT) & 1 : 0;    \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#805: FILE: qemu-kvm.c:64:
+    sregs.var.g = valid ? (flags & DESC_G_MASK) != 0 : 0;      \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#806: FILE: qemu-kvm.c:65:
+    sregs.var.avl = (flags & DESC_AVL_MASK) != 0; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#807: FILE: qemu-kvm.c:66:
+    sregs.var.unusable = 0; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#808: FILE: qemu-kvm.c:67:
+  } while (0)$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#810: FILE: qemu-kvm.c:69:
+
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'var' - possible side-effects?
#811: FILE: qemu-kvm.c:70:
+#define set_v8086_seg(var, seg) \
+  do { \
+    sregs.var.selector = env->seg.selector; \
+    sregs.var.base = env->seg.base; \
+    sregs.var.limit = env->seg.limit; \
+    sregs.var.type = 3; \
+    sregs.var.present = 1; \
+    sregs.var.dpl = 3; \
+    sregs.var.db = 0; \
+    sregs.var.s = 1; \
+    sregs.var.l = 0; \
+    sregs.var.g = 0; \
+    sregs.var.avl = 0; \
+    sregs.var.unusable = 0; \
+  } while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'seg' - possible side-effects?
#811: FILE: qemu-kvm.c:70:
+#define set_v8086_seg(var, seg) \
+  do { \
+    sregs.var.selector = env->seg.selector; \
+    sregs.var.base = env->seg.base; \
+    sregs.var.limit = env->seg.limit; \
+    sregs.var.type = 3; \
+    sregs.var.present = 1; \
+    sregs.var.dpl = 3; \
+    sregs.var.db = 0; \
+    sregs.var.s = 1; \
+    sregs.var.l = 0; \
+    sregs.var.g = 0; \
+    sregs.var.avl = 0; \
+    sregs.var.unusable = 0; \
+  } while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'seg' may be better as '(seg)' to avoid precedence issues
#811: FILE: qemu-kvm.c:70:
+#define set_v8086_seg(var, seg) \
+  do { \
+    sregs.var.selector = env->seg.selector; \
+    sregs.var.base = env->seg.base; \
+    sregs.var.limit = env->seg.limit; \
+    sregs.var.type = 3; \
+    sregs.var.present = 1; \
+    sregs.var.dpl = 3; \
+    sregs.var.db = 0; \
+    sregs.var.s = 1; \
+    sregs.var.l = 0; \
+    sregs.var.g = 0; \
+    sregs.var.avl = 0; \
+    sregs.var.unusable = 0; \
+  } while (0)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#812: FILE: qemu-kvm.c:71:
+  do { \$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#812: FILE: qemu-kvm.c:71:
+  do { \
+    sregs.var.selector = env->seg.selector; \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#813: FILE: qemu-kvm.c:72:
+    sregs.var.selector = env->seg.selector; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#814: FILE: qemu-kvm.c:73:
+    sregs.var.base = env->seg.base; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#815: FILE: qemu-kvm.c:74:
+    sregs.var.limit = env->seg.limit; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#816: FILE: qemu-kvm.c:75:
+    sregs.var.type = 3; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#817: FILE: qemu-kvm.c:76:
+    sregs.var.present = 1; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#818: FILE: qemu-kvm.c:77:
+    sregs.var.dpl = 3; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#819: FILE: qemu-kvm.c:78:
+    sregs.var.db = 0; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#820: FILE: qemu-kvm.c:79:
+    sregs.var.s = 1; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#821: FILE: qemu-kvm.c:80:
+    sregs.var.l = 0; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#822: FILE: qemu-kvm.c:81:
+    sregs.var.g = 0; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#823: FILE: qemu-kvm.c:82:
+    sregs.var.avl = 0; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#824: FILE: qemu-kvm.c:83:
+    sregs.var.unusable = 0; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#825: FILE: qemu-kvm.c:84:
+  } while (0)$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#827: FILE: qemu-kvm.c:86:
+
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#828: FILE: qemu-kvm.c:87:
+    if ((env->eflags & VM_MASK)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 12)
#828: FILE: qemu-kvm.c:87:
+    if ((env->eflags & VM_MASK)) {
+	    set_v8086_seg(cs, segs[R_CS]);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#835: FILE: qemu-kvm.c:94:
+    } else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 12)
#835: FILE: qemu-kvm.c:94:
+    } else {
+	    set_seg(cs, segs[R_CS], 1, 11);

WARNING:TABSTOP: Statements should start on a tabstop
#843: FILE: qemu-kvm.c:102:
+	    if (env->cr[0] & CR0_PE_MASK) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#845: FILE: qemu-kvm.c:104:
+^I^Isregs.ss.selector = (sregs.ss.selector & ~3) | $

WARNING:TABSTOP: Statements should start on a tabstop
#848: FILE: qemu-kvm.c:107:
+	    }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#849: FILE: qemu-kvm.c:108:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#851: FILE: qemu-kvm.c:110:
+    set_seg(tr, tr, 0, 3);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#852: FILE: qemu-kvm.c:111:
+    set_seg(ldt, ldt, 0, 2);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#854: FILE: qemu-kvm.c:113:
+    sregs.idt.limit = env->idt.limit;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#855: FILE: qemu-kvm.c:114:
+    sregs.idt.base = env->idt.base;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#856: FILE: qemu-kvm.c:115:
+    sregs.gdt.limit = env->gdt.limit;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#857: FILE: qemu-kvm.c:116:
+    sregs.gdt.base = env->gdt.base;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#859: FILE: qemu-kvm.c:118:
+    sregs.cr0 = env->cr[0];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#860: FILE: qemu-kvm.c:119:
+    sregs.cr2 = env->cr[2];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#861: FILE: qemu-kvm.c:120:
+    sregs.cr3 = env->cr[3];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#862: FILE: qemu-kvm.c:121:
+    sregs.cr4 = env->cr[4];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#863: FILE: qemu-kvm.c:122:
+    sregs.cr8 = cpu_get_apic_tpr(env);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#864: FILE: qemu-kvm.c:123:
+    sregs.apic_base = cpu_get_apic_base(env);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#865: FILE: qemu-kvm.c:124:
+    sregs.efer = env->efer;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#867: FILE: qemu-kvm.c:126:
+    kvm_set_sregs(kvm_context, 0, &sregs);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#872: FILE: qemu-kvm.c:131:
+    struct kvm_regs regs;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#873: FILE: qemu-kvm.c:132:
+    struct kvm_sregs sregs;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#874: FILE: qemu-kvm.c:133:
+    uint32_t hflags;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#874: FILE: qemu-kvm.c:133:
+    uint32_t hflags;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#876: FILE: qemu-kvm.c:135:
+    kvm_get_regs(kvm_context, 0, &regs);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#878: FILE: qemu-kvm.c:137:
+    env->regs[R_EAX] = regs.rax;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#879: FILE: qemu-kvm.c:138:
+    env->regs[R_EBX] = regs.rbx;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#880: FILE: qemu-kvm.c:139:
+    env->regs[R_ECX] = regs.rcx;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#881: FILE: qemu-kvm.c:140:
+    env->regs[R_EDX] = regs.rdx;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#882: FILE: qemu-kvm.c:141:
+    env->regs[R_ESI] = regs.rsi;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#883: FILE: qemu-kvm.c:142:
+    env->regs[R_EDI] = regs.rdi;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#884: FILE: qemu-kvm.c:143:
+    env->regs[R_ESP] = regs.rsp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#885: FILE: qemu-kvm.c:144:
+    env->regs[R_EBP] = regs.rbp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#887: FILE: qemu-kvm.c:146:
+    env->regs[8] = regs.r8;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#888: FILE: qemu-kvm.c:147:
+    env->regs[9] = regs.r9;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#889: FILE: qemu-kvm.c:148:
+    env->regs[10] = regs.r10;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#890: FILE: qemu-kvm.c:149:
+    env->regs[11] = regs.r11;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#891: FILE: qemu-kvm.c:150:
+    env->regs[12] = regs.r12;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#892: FILE: qemu-kvm.c:151:
+    env->regs[13] = regs.r13;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#893: FILE: qemu-kvm.c:152:
+    env->regs[14] = regs.r14;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#894: FILE: qemu-kvm.c:153:
+    env->regs[15] = regs.r15;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#897: FILE: qemu-kvm.c:156:
+    env->eflags = regs.rflags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#898: FILE: qemu-kvm.c:157:
+    env->eip = regs.rip;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#900: FILE: qemu-kvm.c:159:
+    kvm_get_sregs(kvm_context, 0, &sregs);$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'var' - possible side-effects?
#902: FILE: qemu-kvm.c:161:
+#define get_seg(var, seg) \
+    env->seg.selector = sregs.var.selector; \
+    env->seg.base = sregs.var.base; \
+    env->seg.limit = sregs.var.limit ; \
+    env->seg.flags = \
+	(sregs.var.type << DESC_TYPE_SHIFT) \
+	| (sregs.var.present * DESC_P_MASK) \
+	| (sregs.var.dpl << DESC_DPL_SHIFT) \
+	| (sregs.var.db << DESC_B_SHIFT) \
+	| (sregs.var.s * DESC_S_MASK) \
+	| (sregs.var.l << DESC_L_SHIFT) \
+	| (sregs.var.g * DESC_G_MASK) \
+	| (sregs.var.avl * DESC_AVL_MASK)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'seg' - possible side-effects?
#902: FILE: qemu-kvm.c:161:
+#define get_seg(var, seg) \
+    env->seg.selector = sregs.var.selector; \
+    env->seg.base = sregs.var.base; \
+    env->seg.limit = sregs.var.limit ; \
+    env->seg.flags = \
+	(sregs.var.type << DESC_TYPE_SHIFT) \
+	| (sregs.var.present * DESC_P_MASK) \
+	| (sregs.var.dpl << DESC_DPL_SHIFT) \
+	| (sregs.var.db << DESC_B_SHIFT) \
+	| (sregs.var.s * DESC_S_MASK) \
+	| (sregs.var.l << DESC_L_SHIFT) \
+	| (sregs.var.g * DESC_G_MASK) \
+	| (sregs.var.avl * DESC_AVL_MASK)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'seg' may be better as '(seg)' to avoid precedence issues
#902: FILE: qemu-kvm.c:161:
+#define get_seg(var, seg) \
+    env->seg.selector = sregs.var.selector; \
+    env->seg.base = sregs.var.base; \
+    env->seg.limit = sregs.var.limit ; \
+    env->seg.flags = \
+	(sregs.var.type << DESC_TYPE_SHIFT) \
+	| (sregs.var.present * DESC_P_MASK) \
+	| (sregs.var.dpl << DESC_DPL_SHIFT) \
+	| (sregs.var.db << DESC_B_SHIFT) \
+	| (sregs.var.s * DESC_S_MASK) \
+	| (sregs.var.l << DESC_L_SHIFT) \
+	| (sregs.var.g * DESC_G_MASK) \
+	| (sregs.var.avl * DESC_AVL_MASK)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#903: FILE: qemu-kvm.c:162:
+    env->seg.selector = sregs.var.selector; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#904: FILE: qemu-kvm.c:163:
+    env->seg.base = sregs.var.base; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#905: FILE: qemu-kvm.c:164:
+    env->seg.limit = sregs.var.limit ; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#906: FILE: qemu-kvm.c:165:
+    env->seg.flags = \$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#915: FILE: qemu-kvm.c:174:
+    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#915: FILE: qemu-kvm.c:174:
+    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#916: FILE: qemu-kvm.c:175:
+    get_seg(cs, segs[R_CS]);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#917: FILE: qemu-kvm.c:176:
+    get_seg(ds, segs[R_DS]);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#918: FILE: qemu-kvm.c:177:
+    get_seg(es, segs[R_ES]);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#919: FILE: qemu-kvm.c:178:
+    get_seg(fs, segs[R_FS]);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#920: FILE: qemu-kvm.c:179:
+    get_seg(gs, segs[R_GS]);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#921: FILE: qemu-kvm.c:180:
+    get_seg(ss, segs[R_SS]);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#923: FILE: qemu-kvm.c:182:
+    get_seg(tr, tr);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#924: FILE: qemu-kvm.c:183:
+    get_seg(ldt, ldt);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#925: FILE: qemu-kvm.c:184:
+    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#925: FILE: qemu-kvm.c:184:
+    $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#926: FILE: qemu-kvm.c:185:
+    env->idt.limit = sregs.idt.limit;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#927: FILE: qemu-kvm.c:186:
+    env->idt.base = sregs.idt.base;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#928: FILE: qemu-kvm.c:187:
+    env->gdt.limit = sregs.gdt.limit;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#929: FILE: qemu-kvm.c:188:
+    env->gdt.base = sregs.gdt.base;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#931: FILE: qemu-kvm.c:190:
+    env->cr[0] = sregs.cr0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#932: FILE: qemu-kvm.c:191:
+    env->cr[2] = sregs.cr2;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#933: FILE: qemu-kvm.c:192:
+    env->cr[3] = sregs.cr3;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#934: FILE: qemu-kvm.c:193:
+    env->cr[4] = sregs.cr4;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#936: FILE: qemu-kvm.c:195:
+    cpu_set_apic_tpr(env, sregs.cr8);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#937: FILE: qemu-kvm.c:196:
+    cpu_set_apic_base(env, sregs.apic_base);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#939: FILE: qemu-kvm.c:198:
+    env->efer = sregs.efer;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#947: FILE: qemu-kvm.c:206:
+
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#949: FILE: qemu-kvm.c:208:
+    hflags = (env->segs[R_CS].flags >> DESC_DPL_SHIFT) & HF_CPL_MASK;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#950: FILE: qemu-kvm.c:209:
+    hflags |= (env->cr[0] & CR0_PE_MASK) << (HF_PE_SHIFT - CR0_PE_SHIFT);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#951: FILE: qemu-kvm.c:210:
+    hflags |= (env->cr[0] << (HF_MP_SHIFT - CR0_MP_SHIFT)) & $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#951: FILE: qemu-kvm.c:210:
+    hflags |= (env->cr[0] << (HF_MP_SHIFT - CR0_MP_SHIFT)) & $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#953: FILE: qemu-kvm.c:212:
+    hflags |= (env->eflags & (HF_TF_MASK | HF_VM_MASK | HF_IOPL_MASK)); $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#953: FILE: qemu-kvm.c:212:
+    hflags |= (env->eflags & (HF_TF_MASK | HF_VM_MASK | HF_IOPL_MASK)); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#954: FILE: qemu-kvm.c:213:
+    hflags |= (env->cr[4] & CR4_OSFXSR_MASK) << $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#954: FILE: qemu-kvm.c:213:
+    hflags |= (env->cr[4] & CR4_OSFXSR_MASK) << $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#957: FILE: qemu-kvm.c:216:
+    if (env->efer & MSR_EFER_LMA) {$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#957: FILE: qemu-kvm.c:216:
+    if (env->efer & MSR_EFER_LMA) {
+        hflags |= HF_LMA_MASK;
+    }

ERROR:CODE_INDENT: code indent should use tabs where possible
#958: FILE: qemu-kvm.c:217:
+        hflags |= HF_LMA_MASK;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#958: FILE: qemu-kvm.c:217:
+        hflags |= HF_LMA_MASK;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#959: FILE: qemu-kvm.c:218:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#961: FILE: qemu-kvm.c:220:
+    if ((hflags & HF_LMA_MASK) && (env->segs[R_CS].flags & DESC_L_MASK)) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#962: FILE: qemu-kvm.c:221:
+        hflags |= HF_CS32_MASK | HF_SS32_MASK | HF_CS64_MASK;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#962: FILE: qemu-kvm.c:221:
+        hflags |= HF_CS32_MASK | HF_SS32_MASK | HF_CS64_MASK;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#963: FILE: qemu-kvm.c:222:
+    } else {$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#964: FILE: qemu-kvm.c:223:
+        hflags |= (env->segs[R_CS].flags & DESC_B_MASK) >> $

ERROR:CODE_INDENT: code indent should use tabs where possible
#964: FILE: qemu-kvm.c:223:
+        hflags |= (env->segs[R_CS].flags & DESC_B_MASK) >> $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#964: FILE: qemu-kvm.c:223:
+        hflags |= (env->segs[R_CS].flags & DESC_B_MASK) >> $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#966: FILE: qemu-kvm.c:225:
+        hflags |= (env->segs[R_SS].flags & DESC_B_MASK) >> $

ERROR:CODE_INDENT: code indent should use tabs where possible
#966: FILE: qemu-kvm.c:225:
+        hflags |= (env->segs[R_SS].flags & DESC_B_MASK) >> $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#966: FILE: qemu-kvm.c:225:
+        hflags |= (env->segs[R_SS].flags & DESC_B_MASK) >> $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#968: FILE: qemu-kvm.c:227:
+        if (!(env->cr[0] & CR0_PE_MASK) || $

ERROR:CODE_INDENT: code indent should use tabs where possible
#968: FILE: qemu-kvm.c:227:
+        if (!(env->cr[0] & CR0_PE_MASK) || $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#968: FILE: qemu-kvm.c:227:
+        if (!(env->cr[0] & CR0_PE_MASK) || $

ERROR:CODE_INDENT: code indent should use tabs where possible
#969: FILE: qemu-kvm.c:228:
+                   (env->eflags & VM_MASK) ||$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#969: FILE: qemu-kvm.c:228:
+        if (!(env->cr[0] & CR0_PE_MASK) || 
+                   (env->eflags & VM_MASK) ||

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#969: FILE: qemu-kvm.c:228:
+                   (env->eflags & VM_MASK) ||$

ERROR:CODE_INDENT: code indent should use tabs where possible
#970: FILE: qemu-kvm.c:229:
+                   !(hflags & HF_CS32_MASK)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#970: FILE: qemu-kvm.c:229:
+                   !(hflags & HF_CS32_MASK)) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#971: FILE: qemu-kvm.c:230:
+                hflags |= HF_ADDSEG_MASK;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#971: FILE: qemu-kvm.c:230:
+                hflags |= HF_ADDSEG_MASK;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#972: FILE: qemu-kvm.c:231:
+            } else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#972: FILE: qemu-kvm.c:231:
+            } else {$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#973: FILE: qemu-kvm.c:232:
+                hflags |= ((env->segs[R_DS].base | $

ERROR:CODE_INDENT: code indent should use tabs where possible
#973: FILE: qemu-kvm.c:232:
+                hflags |= ((env->segs[R_DS].base | $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#973: FILE: qemu-kvm.c:232:
+                hflags |= ((env->segs[R_DS].base | $

ERROR:CODE_INDENT: code indent should use tabs where possible
#974: FILE: qemu-kvm.c:233:
+                                env->segs[R_ES].base |$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#974: FILE: qemu-kvm.c:233:
+                                env->segs[R_ES].base |$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#975: FILE: qemu-kvm.c:234:
+                                env->segs[R_SS].base) != 0) << $

ERROR:CODE_INDENT: code indent should use tabs where possible
#975: FILE: qemu-kvm.c:234:
+                                env->segs[R_SS].base) != 0) << $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#975: FILE: qemu-kvm.c:234:
+                                env->segs[R_SS].base) != 0) << $

ERROR:CODE_INDENT: code indent should use tabs where possible
#976: FILE: qemu-kvm.c:235:
+                    HF_ADDSEG_SHIFT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#976: FILE: qemu-kvm.c:235:
+                    HF_ADDSEG_SHIFT;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#977: FILE: qemu-kvm.c:236:
+            }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#977: FILE: qemu-kvm.c:236:
+            }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#978: FILE: qemu-kvm.c:237:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#979: FILE: qemu-kvm.c:238:
+    env->hflags = (env->hflags & HFLAG_COPY_MASK) | hflags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#980: FILE: qemu-kvm.c:239:
+    CC_SRC = env->eflags & (CC_O | CC_S | CC_Z | CC_A | CC_P | CC_C);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#981: FILE: qemu-kvm.c:240:
+    DF = 1 - (2 * ((env->eflags >> 10) & 1));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#982: FILE: qemu-kvm.c:241:
+    CC_OP = CC_OP_EFLAGS;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#983: FILE: qemu-kvm.c:242:
+    env->eflags &= ~(DF_MASK | CC_O | CC_S | CC_Z | CC_A | CC_P | CC_C);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#985: FILE: qemu-kvm.c:244:
+    tlb_flush(env, 1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#987: FILE: qemu-kvm.c:246:
+    env->kvm_pending_int = sregs.pending_int;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#990: FILE: qemu-kvm.c:249:
+
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#995: FILE: qemu-kvm.c:254:
+    if (!(env->interrupt_request & CPU_INTERRUPT_HARD) ||$

ERROR:CODE_INDENT: code indent should use tabs where possible
#997: FILE: qemu-kvm.c:256:
+    ^Iif ((env->interrupt_request & CPU_INTERRUPT_EXIT)) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#997: FILE: qemu-kvm.c:256:
+    ^Iif ((env->interrupt_request & CPU_INTERRUPT_EXIT)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#997: FILE: qemu-kvm.c:256:
+    ^Iif ((env->interrupt_request & CPU_INTERRUPT_EXIT)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#997: FILE: qemu-kvm.c:256:
+    	if ((env->interrupt_request & CPU_INTERRUPT_EXIT)) {
+	    env->interrupt_request &= ~CPU_INTERRUPT_EXIT;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1001: FILE: qemu-kvm.c:260:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1001: FILE: qemu-kvm.c:260:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1002: FILE: qemu-kvm.c:261:
+        return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1002: FILE: qemu-kvm.c:261:
+        return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1003: FILE: qemu-kvm.c:262:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1005: FILE: qemu-kvm.c:264:
+    do {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1006: FILE: qemu-kvm.c:265:
+        env->interrupt_request &= ~CPU_INTERRUPT_HARD;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1006: FILE: qemu-kvm.c:265:
+        env->interrupt_request &= ~CPU_INTERRUPT_HARD;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1008: FILE: qemu-kvm.c:267:
+        // for now using cpu 0$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1009: FILE: qemu-kvm.c:268:
+^Ikvm_inject_irq(kvm_context, 0, cpu_get_pic_interrupt(env)); $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1010: FILE: qemu-kvm.c:269:
+    } while ( (env->interrupt_request & CPU_INTERRUPT_HARD) && (env->cr[2] & CR0_PG_MASK) );$

ERROR:SPACING: space prohibited after that open parenthesis '('
#1010: FILE: qemu-kvm.c:269:
+    } while ( (env->interrupt_request & CPU_INTERRUPT_HARD) && (env->cr[2] & CR0_PG_MASK) );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1010: FILE: qemu-kvm.c:269:
+    } while ( (env->interrupt_request & CPU_INTERRUPT_HARD) && (env->cr[2] & CR0_PG_MASK) );

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1015: FILE: qemu-kvm.c:274:
+    load_regs(env);$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1020: FILE: qemu-kvm.c:279:
+{
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1021: FILE: qemu-kvm.c:280:
+    push_interrupts(env);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1023: FILE: qemu-kvm.c:282:
+    if (!saved_env[0])$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1026: FILE: qemu-kvm.c:285:
+    kvm_run(kvm_context, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1028: FILE: qemu-kvm.c:287:
+    save_regs(env);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1030: FILE: qemu-kvm.c:289:
+    return 0;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1033: FILE: qemu-kvm.c:292:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1034: FILE: qemu-kvm.c:293:
+static int kvm_cpuid(void *opaque, uint64_t *rax, uint64_t *rbx, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1035: FILE: qemu-kvm.c:294:
+static int kvm_cpuid(void *opaque, uint64_t *rax, uint64_t *rbx, 
+		      uint64_t *rcx, uint64_t *rdx)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1035: FILE: qemu-kvm.c:294:
+		      uint64_t *rcx, uint64_t *rdx)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1037: FILE: qemu-kvm.c:296:
+    CPUState **envs = opaque;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1038: FILE: qemu-kvm.c:297:
+    CPUState *saved_env;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1040: FILE: qemu-kvm.c:299:
+    saved_env = env;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1041: FILE: qemu-kvm.c:300:
+    env = envs[0];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1043: FILE: qemu-kvm.c:302:
+    env->regs[R_EAX] = *rax;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1044: FILE: qemu-kvm.c:303:
+    env->regs[R_EBX] = *rbx;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1045: FILE: qemu-kvm.c:304:
+    env->regs[R_ECX] = *rcx;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1046: FILE: qemu-kvm.c:305:
+    env->regs[R_EDX] = *rdx;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1047: FILE: qemu-kvm.c:306:
+    helper_cpuid();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1048: FILE: qemu-kvm.c:307:
+    *rdx = env->regs[R_EDX];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1049: FILE: qemu-kvm.c:308:
+    *rcx = env->regs[R_ECX];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1050: FILE: qemu-kvm.c:309:
+    *rbx = env->regs[R_EBX];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1051: FILE: qemu-kvm.c:310:
+    *rax = env->regs[R_EAX];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1052: FILE: qemu-kvm.c:311:
+    env = saved_env;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1053: FILE: qemu-kvm.c:312:
+    return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1058: FILE: qemu-kvm.c:317:
+    CPUState **envs = opaque;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1060: FILE: qemu-kvm.c:319:
+    env = envs[0];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1061: FILE: qemu-kvm.c:320:
+    save_regs(env);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1062: FILE: qemu-kvm.c:321:
+    env->exception_index = EXCP_DEBUG;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1063: FILE: qemu-kvm.c:322:
+    return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1068: FILE: qemu-kvm.c:327:
+    *data = cpu_inb(0, addr);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1069: FILE: qemu-kvm.c:328:
+    return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1074: FILE: qemu-kvm.c:333:
+    *data = cpu_inw(0, addr);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1075: FILE: qemu-kvm.c:334:
+    return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1080: FILE: qemu-kvm.c:339:
+    *data = cpu_inl(0, addr);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1081: FILE: qemu-kvm.c:340:
+    return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1086: FILE: qemu-kvm.c:345:
+    cpu_outb(0, addr, data);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1087: FILE: qemu-kvm.c:346:
+    return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1092: FILE: qemu-kvm.c:351:
+    cpu_outw(0, addr, data);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1093: FILE: qemu-kvm.c:352:
+    return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1098: FILE: qemu-kvm.c:357:
+    cpu_outl(0, addr, data);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1099: FILE: qemu-kvm.c:358:
+    return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1104: FILE: qemu-kvm.c:363:
+    *data = ldub_phys(addr);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1105: FILE: qemu-kvm.c:364:
+    return 0;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1107: FILE: qemu-kvm.c:366:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1107: FILE: qemu-kvm.c:366:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1110: FILE: qemu-kvm.c:369:
+    *data = lduw_phys(addr);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1111: FILE: qemu-kvm.c:370:
+    return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1116: FILE: qemu-kvm.c:375:
+    *data = ldl_phys(addr);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1117: FILE: qemu-kvm.c:376:
+    return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1122: FILE: qemu-kvm.c:381:
+    *data = ldq_phys(addr);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1123: FILE: qemu-kvm.c:382:
+    return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1128: FILE: qemu-kvm.c:387:
+    stb_phys(addr, data);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1129: FILE: qemu-kvm.c:388:
+    return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1134: FILE: qemu-kvm.c:393:
+    stw_phys(addr, data);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1135: FILE: qemu-kvm.c:394:
+    return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1140: FILE: qemu-kvm.c:399:
+    stl_phys(addr, data);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1141: FILE: qemu-kvm.c:400:
+    return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1146: FILE: qemu-kvm.c:405:
+    stq_phys(addr, data);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1147: FILE: qemu-kvm.c:406:
+    return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1152: FILE: qemu-kvm.c:411:
+    return 1;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1155: FILE: qemu-kvm.c:414:
+ $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1155: FILE: qemu-kvm.c:414:
+
+ 

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1155: FILE: qemu-kvm.c:414:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1158: FILE: qemu-kvm.c:417:
+    CPUState **envs = opaque, *env;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1160: FILE: qemu-kvm.c:419:
+    env = envs[0];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1161: FILE: qemu-kvm.c:420:
+    save_regs(env);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1163: FILE: qemu-kvm.c:422:
+    if (!((env->kvm_pending_int || $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1163: FILE: qemu-kvm.c:422:
+    if (!((env->kvm_pending_int || $

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 12)
#1163: FILE: qemu-kvm.c:422:
+    if (!((env->kvm_pending_int || 
[...]
+	    env->hflags |= HF_HALTED_MASK;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1164: FILE: qemu-kvm.c:423:
+^I   (env->interrupt_request & CPU_INTERRUPT_HARD)) && $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1168: FILE: qemu-kvm.c:427:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1169: FILE: qemu-kvm.c:428:
+    return 1;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1171: FILE: qemu-kvm.c:430:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1171: FILE: qemu-kvm.c:430:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1173: FILE: qemu-kvm.c:432:
+    .cpuid = kvm_cpuid,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1174: FILE: qemu-kvm.c:433:
+    .debug = kvm_debug,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1175: FILE: qemu-kvm.c:434:
+    .inb   = kvm_inb,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1176: FILE: qemu-kvm.c:435:
+    .inw   = kvm_inw,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1177: FILE: qemu-kvm.c:436:
+    .inl   = kvm_inl,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1178: FILE: qemu-kvm.c:437:
+    .outb  = kvm_outb,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1179: FILE: qemu-kvm.c:438:
+    .outw  = kvm_outw,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1180: FILE: qemu-kvm.c:439:
+    .outl  = kvm_outl,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1181: FILE: qemu-kvm.c:440:
+    .readb = kvm_readb,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1182: FILE: qemu-kvm.c:441:
+    .readw = kvm_readw,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1183: FILE: qemu-kvm.c:442:
+    .readl = kvm_readl,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1184: FILE: qemu-kvm.c:443:
+    .readq = kvm_readq,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1185: FILE: qemu-kvm.c:444:
+    .writeb = kvm_writeb,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1186: FILE: qemu-kvm.c:445:
+    .writew = kvm_writew,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1187: FILE: qemu-kvm.c:446:
+    .writel = kvm_writel,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1188: FILE: qemu-kvm.c:447:
+    .writeq = kvm_writeq,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1189: FILE: qemu-kvm.c:448:
+    .halt  = kvm_halt,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1190: FILE: qemu-kvm.c:449:
+    .io_window = kvm_io_window,$

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - void kvm_qemu_init() should probably be void kvm_qemu_init(void)
#1193: FILE: qemu-kvm.c:452:
+void kvm_qemu_init()

Function declarations without arguments like::

  int foo()

should be::

  int foo(void)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1195: FILE: qemu-kvm.c:454:
+    kvm_context = kvm_init(&qemu_kvm_ops, saved_env);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1196: FILE: qemu-kvm.c:455:
+    kvm_create(kvm_context, phys_ram_size, (void**)&phys_ram_base);$

ERROR:POINTER_LOCATION: "(foo**)" should be "(foo **)"
#1196: FILE: qemu-kvm.c:455:
+    kvm_create(kvm_context, phys_ram_size, (void**)&phys_ram_base);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1201: FILE: qemu-kvm.c:460:
+    struct kvm_debug_guest dbg;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1202: FILE: qemu-kvm.c:461:
+    int i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1204: FILE: qemu-kvm.c:463:
+    dbg.enabled = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1205: FILE: qemu-kvm.c:464:
+    if (env->nb_breakpoints || env->singlestep_enabled) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1207: FILE: qemu-kvm.c:466:
+	for (i = 0; i < 4 && i < env->nb_breakpoints; ++i) {
+	    dbg.breakpoints[i].enabled = 1;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1212: FILE: qemu-kvm.c:471:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1213: FILE: qemu-kvm.c:472:
+    return kvm_guest_debug(kvm_context, 0, &dbg);$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1216: FILE: qemu-kvm.c:475:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1223: FILE: qemu-kvm.h:1:
+#ifndef QEMU_KVM_H

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1254: FILE: vl.c:4597:
+    kvm_load_registers(env);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1264: FILE: vl.c:4764:
+        if ((i>=0xa0000) && (i<0xc0000)) /* do not access video-addresses */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1264: FILE: vl.c:4764:
+        if ((i>=0xa0000) && (i<0xc0000)) /* do not access video-addresses */$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1264: FILE: vl.c:4764:
+        if ((i>=0xa0000) && (i<0xc0000)) /* do not access video-addresses */
+            continue;

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#1264: FILE: vl.c:4764:
+        if ((i>=0xa0000) && (i<0xc0000)) /* do not access video-addresses */
               ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1264: FILE: vl.c:4764:
+        if ((i>=0xa0000) && (i<0xc0000)) /* do not access video-addresses */
                               ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'i>=0xa0000'
#1264: FILE: vl.c:4764:
+        if ((i>=0xa0000) && (i<0xc0000)) /* do not access video-addresses */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'i<0xc0000'
#1264: FILE: vl.c:4764:
+        if ((i>=0xa0000) && (i<0xc0000)) /* do not access video-addresses */

ERROR:CODE_INDENT: code indent should use tabs where possible
#1265: FILE: vl.c:4765:
+            continue;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1265: FILE: vl.c:4765:
+            continue;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1275: FILE: vl.c:4781:
+        if ((i>=0xa0000) && (i<0xc0000)) /* do not access video-addresses */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1275: FILE: vl.c:4781:
+        if ((i>=0xa0000) && (i<0xc0000)) /* do not access video-addresses */$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1275: FILE: vl.c:4781:
+        if ((i>=0xa0000) && (i<0xc0000)) /* do not access video-addresses */
+            continue;

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#1275: FILE: vl.c:4781:
+        if ((i>=0xa0000) && (i<0xc0000)) /* do not access video-addresses */
               ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1275: FILE: vl.c:4781:
+        if ((i>=0xa0000) && (i<0xc0000)) /* do not access video-addresses */
                               ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'i>=0xa0000'
#1275: FILE: vl.c:4781:
+        if ((i>=0xa0000) && (i<0xc0000)) /* do not access video-addresses */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'i<0xc0000'
#1275: FILE: vl.c:4781:
+        if ((i>=0xa0000) && (i<0xc0000)) /* do not access video-addresses */

ERROR:CODE_INDENT: code indent should use tabs where possible
#1276: FILE: vl.c:4782:
+            continue;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1276: FILE: vl.c:4782:
+            continue;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1286: FILE: vl.c:6091:
+    phys_ram_size = ram_size + vga_ram_size + bios_size + KVM_EXTRA_PAGES * 4096;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1287: FILE: vl.c:6092:
+    kvm_qemu_init();$

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.25203.commit.c116018d78b4ff8de27c2528a74f7f9eb6656ffe total: 107 errors, 420 warnings, 49 checks, 1135 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.25203.commit.c116018d78b4ff8de27c2528a74f7f9eb6656ffe has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
