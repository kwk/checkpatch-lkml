CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#85: FILE: mm/vmscan.c:978:
+static unsigned long pressure_zones(int, struct zone **, int,
+							struct scan_control *);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#122: FILE: mm/vmscan.c:1710:
+static unsigned long shrink_linear_pages(struct list_head *inactive,
+			struct list_head *active, struct scan_control *sc)

WARNING:TYPO_SPELLING: 'coveres' may be misspelled - perhaps 'covers'?
#147: FILE: mm/vmscan.c:1735:
+ * page at pfn, or the free page which coveres this area.
                                        ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#158: FILE: mm/vmscan.c:1746:
+		if (pfn_valid_within(pfn) && PageBuddy(page) &&
+						page_order(page) >= order)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#176: FILE: mm/vmscan.c:1764:
+static unsigned long isolate_linear_pages(struct zone *zone,
+		unsigned long size, unsigned long pfn,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#206: FILE: mm/vmscan.c:1794:
+					list_add(&page->lru,
+						&zone->active_list);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#209: FILE: mm/vmscan.c:1797:
+					list_add(&page->lru,
+						&zone->inactive_list);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#233: FILE: mm/vmscan.c:1821:
+static unsigned long pressure_zone(int priority, struct zone *zone, int order,
+						struct scan_control *sc)

WARNING:TYPO_SPELLING: 'boundry' may be misspelled - perhaps 'boundary'?
#267: FILE: mm/vmscan.c:1855:
+	 * either at a MAX_ORDER boundry or the low end of the zone otherwise
 	                         ^^^^^^^

WARNING:TYPO_SPELLING: 'contigious' may be misspelled - perhaps 'contiguous'?
#284: FILE: mm/vmscan.c:1872:
+		 * assumption that mem_map is contigious out to
 		                              ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'boundry' may be misspelled - perhaps 'boundary'?
#293: FILE: mm/vmscan.c:1881:
+		 * and are on a MAX_ORDER boundry, we are in a reasonble
 		                          ^^^^^^^

WARNING:TYPO_SPELLING: 'reasonble' may be misspelled - perhaps 'reasonable'?
#293: FILE: mm/vmscan.c:1881:
+		 * and are on a MAX_ORDER boundry, we are in a reasonble
 		                                               ^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#297: FILE: mm/vmscan.c:1885:
+		if (blocks_scanned >= (nr_to_scan / size) &&
+					(pfn  & ~(1 << (MAX_ORDER-1))) == pfn)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#297: FILE: mm/vmscan.c:1885:
+					(pfn  & ~(1 << (MAX_ORDER-1))) == pfn)
 					                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#301: FILE: mm/vmscan.c:1889:
+		nr_seen = nr_likely = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#325: FILE: mm/vmscan.c:1913:
+		nr_scan = isolate_linear_pages(zone, size, pfn, &page_list,
+								&page_list_a);

CHECK:BRACES: braces {} should be used on all arms of this statement
#328: FILE: mm/vmscan.c:1916:
+		if (nr_scan > 0) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#330: FILE: mm/vmscan.c:1918:
+			nr_free = shrink_linear_pages(&page_list,
+							&page_list_a, sc);

CHECK:BRACES: Unbalanced braces around else statement
#332: FILE: mm/vmscan.c:1920:
+		} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#346: FILE: mm/vmscan.c:1934:
+		if (current_is_kswapd()) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#349: FILE: mm/vmscan.c:1937:
+		} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#373: FILE: mm/vmscan.c:1961:
+static unsigned long pressure_zones(int priority, struct zone **zones,
+					int order, struct scan_control *sc)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "zones[i]"
#378: FILE: mm/vmscan.c:1966:
+	for (i = 0; zones[i] != NULL; i++) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.40044.commit.f6ed00cd0d51dc37beae45aaec4443648d2f5f0b total: 0 errors, 5 warnings, 18 checks, 329 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.40044.commit.f6ed00cd0d51dc37beae45aaec4443648d2f5f0b has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
