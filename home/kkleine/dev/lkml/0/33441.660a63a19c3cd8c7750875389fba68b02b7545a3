ERROR:TRAILING_WHITESPACE: trailing whitespace
#42: FILE: include/linux/sched.h:346:
+^I/* Last value of global fault stamp as seen by this process. $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#44: FILE: include/linux/sched.h:348:
+	 * it has been since this task got the token */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:TRAILING_WHITESPACE: trailing whitespace
#47: FILE: include/linux/sched.h:351:
+       /* Deciding factor ! Increment if (global_faults - faultstamp < 5) $

ERROR:CODE_INDENT: code indent should use tabs where possible
#48: FILE: include/linux/sched.h:352:
+        * else decrement. High priority wins the token.*/$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#48: FILE: include/linux/sched.h:352:
+        * else decrement. High priority wins the token.*/

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#73: FILE: kernel/sysctl.c:913:
+#if 0	/* Not needed anymore */

ERROR:GLOBAL_INITIALISERS: do not initialise globals to NULL
#96: FILE: mm/thrash.c:17:
+struct mm_struct * swap_token_mm = NULL;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#96: FILE: mm/thrash.c:17:
+struct mm_struct * swap_token_mm = NULL;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#97: FILE: mm/thrash.c:18:
+unsigned long global_faults = 0;

ERROR:SPACING: space prohibited after that open parenthesis '('
#124: FILE: mm/thrash.c:26:
+	if ( current->mm->token_priority > mm->token_priority )

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that close parenthesis ')'
#124: FILE: mm/thrash.c:26:
+	if ( current->mm->token_priority > mm->token_priority )

ERROR:TRAILING_WHITESPACE: trailing whitespace
#148: FILE: mm/thrash.c:38:
+^Iglobal_faults++; $

WARNING:LONG_LINE_COMMENT: line length of 105 exceeds 100 columns
#155: FILE: mm/thrash.c:43:
+	/* First come first served. If a process holding the token exits, its up for grabs immediately */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: space prohibited after that open parenthesis '('
#156: FILE: mm/thrash.c:44:
+	if ( swap_token_mm == NULL ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#156: FILE: mm/thrash.c:44:
+	if ( swap_token_mm == NULL ) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!swap_token_mm"
#156: FILE: mm/thrash.c:44:
+	if ( swap_token_mm == NULL ) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:SPACING: space prohibited before that close parenthesis ')'
#166: FILE: mm/thrash.c:50:
+	if ((global_faults - current->mm->faultstamp) < FAULTSTAMP_DIFF )  {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#172: FILE: mm/thrash.c:53:
+^I *  have been evicted and therefore it's calling swap-in or no-page $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#173: FILE: mm/thrash.c:54:
+	 *  too frequently. */

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#181: FILE: mm/thrash.c:60:
+	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#181: FILE: mm/thrash.c:60:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'doesnt' may be misspelled - perhaps 'doesn't'?
#182: FILE: mm/thrash.c:61:
+	/* Decrement priority to ensure that the token holder doesnt
 	                                                      ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#183: FILE: mm/thrash.c:62:
+	 * hold on to it for too long. */

CHECK:BRACES: braces {} should be used on all arms of this statement
#186: FILE: mm/thrash.c:64:
+		if (current->mm->token_priority > 0)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#188: FILE: mm/thrash.c:66:
+		else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#189: FILE: mm/thrash.c:67:
+^I/* After this, the process will be able to contend for the token $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#190: FILE: mm/thrash.c:68:
+	 * again.*/

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#209: FILE: mm/thrash.c:76:
+	if ((reason = should_release_swap_token(mm_temp))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.33441.commit.660a63a19c3cd8c7750875389fba68b02b7545a3 total: 16 errors, 8 warnings, 4 checks, 179 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.33441.commit.660a63a19c3cd8c7750875389fba68b02b7545a3 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
