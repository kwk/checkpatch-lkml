CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#61: FILE: include/linux/swap.h:190:
+extern unsigned long try_to_free_pages(struct zone **, int, gfp_t);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct zone **' should also have an identifier name
#61: FILE: include/linux/swap.h:190:
+extern unsigned long try_to_free_pages(struct zone **, int, gfp_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#61: FILE: include/linux/swap.h:190:
+extern unsigned long try_to_free_pages(struct zone **, int, gfp_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gfp_t' should also have an identifier name
#61: FILE: include/linux/swap.h:190:
+extern unsigned long try_to_free_pages(struct zone **, int, gfp_t);

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#147: FILE: mm/vmscan.c:664:
+		switch (__isolate_lru_page(page, active)) {
+			case 0:
[...]
+			case -EBUSY:
[...]
+			default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#159: FILE: mm/vmscan.c:676:
+				BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#166: FILE: mm/vmscan.c:682:
+		page_pfn = pfn = __page_to_pfn(page);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#177: FILE: mm/vmscan.c:693:
+			switch (__isolate_lru_page(tmp, active)) {
+				case 0:
[...]
+				case -EBUSY:
[...]
+				default:

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#189: FILE: mm/vmscan.c:705:
+
+			}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.15601.commit.01ee7098e98ed1621c4dea3fa9e9e13c79ea9f48 total: 2 errors, 4 warnings, 3 checks, 166 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.15601.commit.01ee7098e98ed1621c4dea3fa9e9e13c79ea9f48 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
