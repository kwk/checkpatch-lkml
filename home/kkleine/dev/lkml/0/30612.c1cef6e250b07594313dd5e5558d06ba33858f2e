ERROR:DATE_TIME: Use of the '__DATE__' macro makes the build non-deterministic
#50: FILE: drivers/char/nozomi.c:95:
+#define VERSION_STRING DRIVER_DESC " 2.1 (build date: " __DATE__ " " \

It is generally desirable that building the same source code with
the same set of tools is reproducible, i.e. the output is always
exactly the same.

The kernel does *not* use the ``__DATE__`` and ``__TIME__`` macros,
and enables warnings if they are used as they can lead to
non-deterministic builds.

See: https://www.kernel.org/doc/html/latest/kbuild/reproducible-builds.html#timestamps

ERROR:DATE_TIME: Use of the '__TIME__' macro makes the build non-deterministic
#51: FILE: drivers/char/nozomi.c:96:
+	__TIME__ ")"

ERROR:SPACING: space prohibited after that open parenthesis '('
#64: FILE: drivers/char/nozomi.c:107:
+#define NFO( _err_flag_, args...) do {					       \

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#67: FILE: drivers/char/nozomi.c:110:
+	printk( _err_flag_ "[%d] %s(): %s\n", __LINE__, __FUNCTION__, t_m_p_); \

ERROR:SPACING: space prohibited after that open parenthesis '('
#67: FILE: drivers/char/nozomi.c:110:
+	printk( _err_flag_ "[%d] %s(): %s\n", __LINE__, __FUNCTION__, t_m_p_); \

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#67: FILE: drivers/char/nozomi.c:110:
+	printk( _err_flag_ "[%d] %s(): %s\n", __LINE__, __FUNCTION__, t_m_p_); \

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#84: FILE: drivers/char/nozomi.c:135:
+static const int nzdebug = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#92: FILE: drivers/char/nozomi.c:140:
+#define SET_FCR(value__) do {			\
+	writew((value__), (dc->REG_FCR ));	\
 } while(0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

ERROR:SPACING: space prohibited before that close parenthesis ')'
#93: FILE: drivers/char/nozomi.c:141:
+	writew((value__), (dc->REG_FCR ));	\

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'value__' may be better as '(value__)' to avoid precedence issues
#100: FILE: drivers/char/nozomi.c:144:
+#define SET_IER(value__, mask__) do {					\
+	dc->ier_last_written = (dc->ier_last_written & ~mask__) |	\
+		(value__ & mask__ );					\
+	writew( dc->ier_last_written, (dc->REG_IER));			\
 } while(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mask__' - possible side-effects?
#100: FILE: drivers/char/nozomi.c:144:
+#define SET_IER(value__, mask__) do {					\
+	dc->ier_last_written = (dc->ier_last_written & ~mask__) |	\
+		(value__ & mask__ );					\
+	writew( dc->ier_last_written, (dc->REG_IER));			\
 } while(0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'mask__' may be better as '(mask__)' to avoid precedence issues
#100: FILE: drivers/char/nozomi.c:144:
+#define SET_IER(value__, mask__) do {					\
+	dc->ier_last_written = (dc->ier_last_written & ~mask__) |	\
+		(value__ & mask__ );					\
+	writew( dc->ier_last_written, (dc->REG_IER));			\
 } while(0)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#102: FILE: drivers/char/nozomi.c:146:
+		(value__ & mask__ );					\

ERROR:SPACING: space prohibited after that open parenthesis '('
#103: FILE: drivers/char/nozomi.c:147:
+	writew( dc->ier_last_written, (dc->REG_IER));			\

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#109: FILE: drivers/char/nozomi.c:150:
+#define GET_IER(read_val__) do {		\
+	(read_val__) = readw((dc->REG_IER));	\
 } while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#116: FILE: drivers/char/nozomi.c:154:
+#define GET_IIR(read_val__) do {		\
+	(read_val__) = readw( (dc->REG_IIR));	\
 } while(0)

ERROR:SPACING: space prohibited after that open parenthesis '('
#117: FILE: drivers/char/nozomi.c:155:
+	(read_val__) = readw( (dc->REG_IIR));	\

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#124: FILE: drivers/char/nozomi.c:158:
+#define GET_MEM(value__, addr__, length__) do {				\
+/*	read_mem32( (u32*) (value__), (u32) (addr__), (length__)); */	\
+	read_mem32( (u32*) (value__), (addr__), (length__));		\
 } while(0)

CHECK:SPACING: No space is necessary after a cast
#126: FILE: drivers/char/nozomi.c:160:
+	read_mem32( (u32*) (value__), (addr__), (length__));		\

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#126: FILE: drivers/char/nozomi.c:160:
+	read_mem32( (u32*) (value__), (addr__), (length__));		\

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited after that open parenthesis '('
#126: FILE: drivers/char/nozomi.c:160:
+	read_mem32( (u32*) (value__), (addr__), (length__));		\

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#133: FILE: drivers/char/nozomi.c:163:
+#define GET_MEM_BUF(value__, addr__, length__) do {			  \
+/*	read_mem32_buf( (u32*) (value__), (u32) (addr__), (length__)); */ \
+	read_mem32_buf( (u32*) (value__), (addr__), (length__));	  \
 } while(0)

CHECK:SPACING: No space is necessary after a cast
#135: FILE: drivers/char/nozomi.c:165:
+	read_mem32_buf( (u32*) (value__), (addr__), (length__));	  \

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#135: FILE: drivers/char/nozomi.c:165:
+	read_mem32_buf( (u32*) (value__), (addr__), (length__));	  \

ERROR:SPACING: space prohibited after that open parenthesis '('
#135: FILE: drivers/char/nozomi.c:165:
+	read_mem32_buf( (u32*) (value__), (addr__), (length__));	  \

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#141: FILE: drivers/char/nozomi.c:168:
+#define SET_MEM(addr__, value__, length__) do {			\
+  write_mem32( (addr__),  (u32*) (value__), (length__));	\
 } while(0)

CHECK:SPACING: No space is necessary after a cast
#142: FILE: drivers/char/nozomi.c:169:
+  write_mem32( (addr__),  (u32*) (value__), (length__));	\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#142: FILE: drivers/char/nozomi.c:169:
+  write_mem32( (addr__),  (u32*) (value__), (length__));^I\$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#142: FILE: drivers/char/nozomi.c:169:
+  write_mem32( (addr__),  (u32*) (value__), (length__));	\

ERROR:SPACING: space prohibited after that open parenthesis '('
#142: FILE: drivers/char/nozomi.c:169:
+  write_mem32( (addr__),  (u32*) (value__), (length__));	\

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#148: FILE: drivers/char/nozomi.c:172:
+#define SET_MEM_BUF(addr__, value__, length__) do {		\
+  write_mem32_buf( (addr__),  (u32*) (value__), (length__));	\
 } while(0)

CHECK:SPACING: No space is necessary after a cast
#149: FILE: drivers/char/nozomi.c:173:
+  write_mem32_buf( (addr__),  (u32*) (value__), (length__));	\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#149: FILE: drivers/char/nozomi.c:173:
+  write_mem32_buf( (addr__),  (u32*) (value__), (length__));^I\$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#149: FILE: drivers/char/nozomi.c:173:
+  write_mem32_buf( (addr__),  (u32*) (value__), (length__));	\

ERROR:SPACING: space prohibited after that open parenthesis '('
#149: FILE: drivers/char/nozomi.c:173:
+  write_mem32_buf( (addr__),  (u32*) (value__), (length__));	\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#167: FILE: drivers/char/nozomi.c:178:
+#define DUMP(buf__,len__) do {		\
                   ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'len__' - possible side-effects?
#167: FILE: drivers/char/nozomi.c:178:
+#define DUMP(buf__,len__) do {		\
+	char tbuf[TMP_BUF_MAX]={0};	\
+	if (len__>1) {			\
+		snprintf(tbuf, len__ > TMP_BUF_MAX ? TMP_BUF_MAX : len__, "%s",\
+			buf__);		\
+	if(tbuf[len__-2] == '\r') {	\
+		tbuf[len__-2] = 'r';	\
+	}				\
+	D1( "SENDING: '%s' (%d+n)", tbuf, len__); \
+	} else {			\
+		D1( "SENDING: '%s' (%d)", tbuf, len__); \
+	}				\
 } while(0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'len__' may be better as '(len__)' to avoid precedence issues
#167: FILE: drivers/char/nozomi.c:178:
+#define DUMP(buf__,len__) do {		\
+	char tbuf[TMP_BUF_MAX]={0};	\
+	if (len__>1) {			\
+		snprintf(tbuf, len__ > TMP_BUF_MAX ? TMP_BUF_MAX : len__, "%s",\
+			buf__);		\
+	if(tbuf[len__-2] == '\r') {	\
+		tbuf[len__-2] = 'r';	\
+	}				\
+	D1( "SENDING: '%s' (%d+n)", tbuf, len__); \
+	} else {			\
+		D1( "SENDING: '%s' (%d)", tbuf, len__); \
+	}				\
 } while(0)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#168: FILE: drivers/char/nozomi.c:179:
+	char tbuf[TMP_BUF_MAX]={0};	\
 	                      ^

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#169: FILE: drivers/char/nozomi.c:180:
+	if (len__>1) {			\
 	         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#172: FILE: drivers/char/nozomi.c:183:
+	if(tbuf[len__-2] == '\r') {	\
 	             ^

ERROR:SPACING: space required before the open parenthesis '('
#172: FILE: drivers/char/nozomi.c:183:
+	if(tbuf[len__-2] == '\r') {	\

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#173: FILE: drivers/char/nozomi.c:184:
+		tbuf[len__-2] = 'r';	\
 		          ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#175: FILE: drivers/char/nozomi.c:186:
+	D1( "SENDING: '%s' (%d+n)", tbuf, len__); \

ERROR:SPACING: space prohibited after that open parenthesis '('
#177: FILE: drivers/char/nozomi.c:188:
+		D1( "SENDING: '%s' (%d)", tbuf, len__); \

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#258: FILE: drivers/char/nozomi.c:301:
+	unsigned enabled:5;	/* Toggle fields are valid if enabled is 0,
+				   else A-channels must always be used. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#258: FILE: drivers/char/nozomi.c:301:
+				   else A-channels must always be used. */

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#316: FILE: drivers/char/nozomi.c:334:
+} __attribute__ ((packed)) config_table_t;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#360: FILE: drivers/char/nozomi.c:363:
+	unsigned enabled:5;	/* Toggle fields are valid if enabled is 0,
+				   else A-channels must always be used. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#360: FILE: drivers/char/nozomi.c:363:
+				   else A-channels must always be used. */

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#408: FILE: drivers/char/nozomi.c:389:
+} __attribute__ ((packed)) config_table_t;

WARNING:TYPO_SPELLING: 'reserverd' may be misspelled - perhaps 'reserved'?
#422: FILE: drivers/char/nozomi.c:397:
+	unsigned reserverd:4;
 	         ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#525: FILE: drivers/char/nozomi.c:461:
+	spinlock_t spin_mutex;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#541: FILE: drivers/char/nozomi.c:473:
+static int ntty_tty_init(dc_t * dc);

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#562: FILE: drivers/char/nozomi.c:491:
+static dc_t *my_dev = NULL;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#632: FILE: drivers/char/nozomi.c:523:
+static void read_mem32(u32 * buf, void __iomem * mem_addr_start, u32 size_bytes)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#632: FILE: drivers/char/nozomi.c:523:
+static void read_mem32(u32 * buf, void __iomem * mem_addr_start, u32 size_bytes)

CHECK:SPACING: No space is necessary after a cast
#635: FILE: drivers/char/nozomi.c:526:
+	u32 *ptr = (__force u32 *) mem_addr_start;

CHECK:SPACING: No space is necessary after a cast
#640: FILE: drivers/char/nozomi.c:531:
+		buf16 = (u16 *) buf;

CHECK:SPACING: No space is necessary after a cast
#648: FILE: drivers/char/nozomi.c:539:
+			buf16 = (u16 *) buf;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#666: FILE: drivers/char/nozomi.c:556:
+static void read_mem32_buf(u32 * buf, void __iomem * mem_addr_start,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#666: FILE: drivers/char/nozomi.c:556:
+static void read_mem32_buf(u32 * buf, void __iomem * mem_addr_start,

CHECK:SPACING: No space is necessary after a cast
#695: FILE: drivers/char/nozomi.c:561:
+	u32 *ptr = (u32 *) mem_addr_start;

CHECK:SPACING: No space is necessary after a cast
#700: FILE: drivers/char/nozomi.c:566:
+		buf16 = (u16 *) buf;

CHECK:SPACING: No space is necessary after a cast
#708: FILE: drivers/char/nozomi.c:574:
+			buf16 = (u16 *) buf;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#755: FILE: drivers/char/nozomi.c:594:
+static u32 write_mem32(void __iomem * mem_addr_start, u32 * buf, u32 size_bytes)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#755: FILE: drivers/char/nozomi.c:594:
+static u32 write_mem32(void __iomem * mem_addr_start, u32 * buf, u32 size_bytes)

CHECK:SPACING: No space is necessary after a cast
#758: FILE: drivers/char/nozomi.c:597:
+	u32 *ptr = (__force u32 *) mem_addr_start;

CHECK:SPACING: No space is necessary after a cast
#763: FILE: drivers/char/nozomi.c:602:
+		buf16 = (u16 *) buf;

CHECK:SPACING: No space is necessary after a cast
#771: FILE: drivers/char/nozomi.c:610:
+			buf16 = (u16 *) buf;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#789: FILE: drivers/char/nozomi.c:627:
+static u32 write_mem32_buf(void __iomem * mem_addr_start, u32 * buf,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#789: FILE: drivers/char/nozomi.c:627:
+static u32 write_mem32_buf(void __iomem * mem_addr_start, u32 * buf,

CHECK:SPACING: No space is necessary after a cast
#819: FILE: drivers/char/nozomi.c:632:
+	u32 *ptr = (u32 *) mem_addr_start;

CHECK:SPACING: No space is necessary after a cast
#824: FILE: drivers/char/nozomi.c:637:
+		buf16 = (u16 *) buf;

CHECK:SPACING: No space is necessary after a cast
#832: FILE: drivers/char/nozomi.c:645:
+			buf16 = (u16 *) buf;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#852: FILE: drivers/char/nozomi.c:663:
+static void setup_memory(dc_t * dc)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#906: FILE: drivers/char/nozomi.c:667:
+	/* The length reported is including the length field of 4 bytes, hence
+	   subtract with 4. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#906: FILE: drivers/char/nozomi.c:667:
+	   subtract with 4. */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1009: FILE: drivers/char/nozomi.c:746:
+static void dump_table(dc_t * dc)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1054: FILE: drivers/char/nozomi.c:790:
+static int nozomi_read_config_table(dc_t * dc)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dc->config_table.version == 0'
#1073: FILE: drivers/char/nozomi.c:803:
+	if ((dc->config_table.version == 0)
+	    || (dc->config_table.toggle.enabled == TOGGLE_VALID)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dc->config_table.toggle.enabled == TOGGLE_VALID'
#1073: FILE: drivers/char/nozomi.c:803:
+	if ((dc->config_table.version == 0)
+	    || (dc->config_table.toggle.enabled == TOGGLE_VALID)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1074: FILE: drivers/char/nozomi.c:804:
+	if ((dc->config_table.version == 0)
+	    || (dc->config_table.toggle.enabled == TOGGLE_VALID)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1076: FILE: drivers/char/nozomi.c:806:
+		int i;
+		D1("Second phase, configuring card");

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dc->config_table.version > 0'
#1127: FILE: drivers/char/nozomi.c:834:
+	if ((dc->config_table.version > 0)
+	    && (dc->config_table.toggle.enabled != TOGGLE_VALID)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dc->config_table.toggle.enabled != TOGGLE_VALID'
#1127: FILE: drivers/char/nozomi.c:834:
+	if ((dc->config_table.version > 0)
+	    && (dc->config_table.toggle.enabled != TOGGLE_VALID)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1128: FILE: drivers/char/nozomi.c:835:
+	if ((dc->config_table.version > 0)
+	    && (dc->config_table.toggle.enabled != TOGGLE_VALID)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1130: FILE: drivers/char/nozomi.c:837:
+		u32 offset = 0;
+		D1("First phase: pushing upload buffers, clearing download");

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1143: FILE: drivers/char/nozomi.c:846:
+		/* We should send ALL channel pair tokens back along with reset
+		   token */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1143: FILE: drivers/char/nozomi.c:846:
+		   token */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1177: FILE: drivers/char/nozomi.c:861:
+static void enable_transmit_ul(enum port_type port, dc_t * dc)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1179: FILE: drivers/char/nozomi.c:863:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1204: FILE: drivers/char/nozomi.c:887:
+static void disable_transmit_ul(enum port_type port, dc_t * dc)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1218: FILE: drivers/char/nozomi.c:912:
+static void enable_transmit_dl(enum port_type port, dc_t * dc)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1230: FILE: drivers/char/nozomi.c:937:
+static void disable_transmit_dl(enum port_type port, dc_t * dc)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1272: FILE: drivers/char/nozomi.c:963:
+static int send_data(enum port_type index, dc_t * dc)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1377: FILE: drivers/char/nozomi.c:1002:
+static int receive_data(enum port_type index, dc_t * dc)

WARNING:SPLIT_STRING: quoted string split across lines
#1398: FILE: drivers/char/nozomi.c:1023:
+		D1("No room in tty, don't read data, don't ack interrupt, "
+			"disable interrupt");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1415: FILE: drivers/char/nozomi.c:1040:
+			if (tty_buffer_request_room(tty, 1) < 1) {
+				tty_flip_buffer_push(tty);
+			}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1551: FILE: drivers/char/nozomi.c:1092:
+static int receive_flow_control(dc_t * dc, irq_t * m)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1551: FILE: drivers/char/nozomi.c:1092:
+static int receive_flow_control(dc_t * dc, irq_t * m)

WARNING:SPLIT_STRING: quoted string split across lines
#1563: FILE: drivers/char/nozomi.c:1104:
+		D1("The Base Band sends this value as a response to a request "
+			"for IMSI detach sent" " over the control channel "

WARNING:STRING_FRAGMENTS: Consecutive strings are generally better as a single string
#1563: FILE: drivers/char/nozomi.c:1104:
+			"for IMSI detach sent" " over the control channel "

WARNING:SPLIT_STRING: quoted string split across lines
#1564: FILE: drivers/char/nozomi.c:1105:
+			"for IMSI detach sent" " over the control channel "
+			"uplink (see section 7.6.1).");

WARNING:SPLIT_STRING: quoted string split across lines
#1584: FILE: drivers/char/nozomi.c:1125:
+		dev_err(&dc->pdev->dev, "ERROR: flow control received for "
+			"non-existing port\n");

CHECK:SPACING: No space is necessary after a cast
#1588: FILE: drivers/char/nozomi.c:1129:
+	D1("0x%04X->0x%04X", *((u16 *) & dc->port[port].ctrl_dl),

ERROR:SPACING: space prohibited after that '&' (ctx:WxW)
#1588: FILE: drivers/char/nozomi.c:1129:
+	D1("0x%04X->0x%04X", *((u16 *) & dc->port[port].ctrl_dl),
 	                               ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1589: FILE: drivers/char/nozomi.c:1130:
+	D1("0x%04X->0x%04X", *((u16 *) & dc->port[port].ctrl_dl),
+		*((u16 *) & ctrl_dl));

CHECK:SPACING: No space is necessary after a cast
#1589: FILE: drivers/char/nozomi.c:1130:
+		*((u16 *) & ctrl_dl));

ERROR:SPACING: space prohibited after that '&' (ctx:WxW)
#1589: FILE: drivers/char/nozomi.c:1130:
+		*((u16 *) & ctrl_dl));
 		          ^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1599: FILE: drivers/char/nozomi.c:1140:
+	} else if (old_ctrl.CTS == 0 && ctrl_dl.CTS == 1) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1602: FILE: drivers/char/nozomi.c:1143:
+			D1("Enable interrupt (0x%04X) on port: %d", enable_ier,
+				port);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1604: FILE: drivers/char/nozomi.c:1145:
+			D1("Data in buffer [%d], enable transmit! ",
+				__kfifo_len(dc->port[port].fifo_ul));

CHECK:SPACING: No space is necessary after a cast
#1611: FILE: drivers/char/nozomi.c:1152:
+	if (*(u16 *) & old_ctrl == *(u16 *) & ctrl_dl) {

ERROR:SPACING: space prohibited after that '&' (ctx:WxW)
#1611: FILE: drivers/char/nozomi.c:1152:
+	if (*(u16 *) & old_ctrl == *(u16 *) & ctrl_dl) {
 	             ^

ERROR:SPACING: space prohibited after that '&' (ctx:WxW)
#1611: FILE: drivers/char/nozomi.c:1152:
+	if (*(u16 *) & old_ctrl == *(u16 *) & ctrl_dl) {
 	                                    ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1616: FILE: drivers/char/nozomi.c:1157:
+	if (old_ctrl.CTS != ctrl_dl.CTS) {
+		dc->port[port].tty_icount.cts++;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1619: FILE: drivers/char/nozomi.c:1160:
+	if (old_ctrl.DSR != ctrl_dl.DSR) {
+		dc->port[port].tty_icount.dsr++;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1622: FILE: drivers/char/nozomi.c:1163:
+	if (old_ctrl.RI != ctrl_dl.RI) {
+		dc->port[port].tty_icount.rng++;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1625: FILE: drivers/char/nozomi.c:1166:
+	if (old_ctrl.DCD != ctrl_dl.DCD) {
+		dc->port[port].tty_icount.dcd++;
+	}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1629: FILE: drivers/char/nozomi.c:1170:
+	D1("port: %d DCD(%d), CTS(%d), RI(%d), DSR(%d)", port,
+		dc->port[port].tty_icount.dcd, dc->port[port].tty_icount.cts,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1638: FILE: drivers/char/nozomi.c:1178:
+static u8 port2ctrl(enum port_type port, dc_t * dc)

WARNING:SPLIT_STRING: quoted string split across lines
#1651: FILE: drivers/char/nozomi.c:1191:
+		dev_err(&dc->pdev->dev, "ERROR: send flow control received for "
+			"non-existing port\n");

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1678: FILE: drivers/char/nozomi.c:1199:
+static int send_flow_control(dc_t * dc)

CHECK:SPACING: No space is necessary after a cast
#1690: FILE: drivers/char/nozomi.c:1211:
+			ctrl = (u16 *) & dc->port[i].ctrl_ul;

ERROR:SPACING: space prohibited after that '&' (ctx:WxW)
#1690: FILE: drivers/char/nozomi.c:1211:
+			ctrl = (u16 *) & dc->port[i].ctrl_ul;
 			               ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1692: FILE: drivers/char/nozomi.c:1213:
+/*			D1("sending flow control 0x%04X for port %d, %d",
+				(u16)*ctrl, i, dc->port[i].ctrl_ul.port); */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1692: FILE: drivers/char/nozomi.c:1213:
+				(u16)*ctrl, i, dc->port[i].ctrl_ul.port); */

CHECK:SPACING: No space is necessary after a cast
#1693: FILE: drivers/char/nozomi.c:1214:
+			SET_MEM(dc->port[PORT_CTRL].ul_addr[0], (u32 *) ctrl,2);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1693: FILE: drivers/char/nozomi.c:1214:
+			SET_MEM(dc->port[PORT_CTRL].ul_addr[0], (u32 *) ctrl,2);
 			                                                    ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1735: FILE: drivers/char/nozomi.c:1225:
+static int handle_data_dl(dc_t * dc, irq_t * m, enum port_type port,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1735: FILE: drivers/char/nozomi.c:1225:
+static int handle_data_dl(dc_t * dc, irq_t * m, enum port_type port,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1736: FILE: drivers/char/nozomi.c:1226:
+			  u8 * toggle, u16 mask1, u16 mask2)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1738: FILE: drivers/char/nozomi.c:1228:
+{
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1816: FILE: drivers/char/nozomi.c:1263:
+static int handle_data_ul(dc_t * dc, irq_t * m, enum port_type port)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1816: FILE: drivers/char/nozomi.c:1263:
+static int handle_data_ul(dc_t * dc, irq_t * m, enum port_type port)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1818: FILE: drivers/char/nozomi.c:1265:
+{
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around dc->port[port].toggle_ul
#1819: FILE: drivers/char/nozomi.c:1266:
+	u8 *toggle = &(dc->port[port].toggle_ul);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1973: FILE: drivers/char/nozomi.c:1315:
+	if (my_dev && my_dev->pdev != dev_id) {
+		return IRQ_NONE;
+	}

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1977: FILE: drivers/char/nozomi.c:1319:
+	if (!(dc = get_dc_by_pdev(dev_id))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1984: FILE: drivers/char/nozomi.c:1326:
+^I/* Just handle interrupt enabled in IER (by masking with $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1985: FILE: drivers/char/nozomi.c:1327:
+	/* Just handle interrupt enabled in IER (by masking with 
+	   dc->ier_last_written) */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1985: FILE: drivers/char/nozomi.c:1327:
+	   dc->ier_last_written) */

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1988: FILE: drivers/char/nozomi.c:1330:
+	if (m->read_iir == 0) {
+		return IRQ_NONE;
+	}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dc"
#1992: FILE: drivers/char/nozomi.c:1334:
+	if (dc == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:SPLIT_STRING: quoted string split across lines
#2006: FILE: drivers/char/nozomi.c:1348:
+			ERR("ERR: Could not read status from card, we should "
+				"disable interface");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2026: FILE: drivers/char/nozomi.c:1368:
+		if (!(handle_data_dl(dc, m, PORT_MDM,
+				&(dc->port[PORT_MDM].toggle_dl), MDM_DL1,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around dc->port[PORT_MDM].toggle_dl
#2026: FILE: drivers/char/nozomi.c:1368:
+				&(dc->port[PORT_MDM].toggle_dl), MDM_DL1,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2040: FILE: drivers/char/nozomi.c:1382:
+		if (!(handle_data_dl(dc, m, PORT_DIAG,
+				&(dc->port[PORT_DIAG].toggle_dl), DIAG_DL1,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around dc->port[PORT_DIAG].toggle_dl
#2040: FILE: drivers/char/nozomi.c:1382:
+				&(dc->port[PORT_DIAG].toggle_dl), DIAG_DL1,

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2054: FILE: drivers/char/nozomi.c:1396:
+		if (receive_data(PORT_APP1, dc)) {
+			SET_FCR(APP1_DL);
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2066: FILE: drivers/char/nozomi.c:1408:
+		if (receive_data(PORT_APP2, dc)) {
+			SET_FCR(APP2_DL);
+		}

WARNING:INDENTED_LABEL: labels should not be indented
#2078: FILE: drivers/char/nozomi.c:1420:
+      exit_handler:

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2095: FILE: drivers/char/nozomi.c:1430:
+	if ((rval = request_irq(pdev->irq, &interrupt_handler, SA_SHIRQ,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2096: FILE: drivers/char/nozomi.c:1431:
+	if ((rval = request_irq(pdev->irq, &interrupt_handler, SA_SHIRQ,
+			NOZOMI_NAME, pdev))) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2106: FILE: drivers/char/nozomi.c:1439:
+static void nozomi_get_card_type(dc_t * dc)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2140: FILE: drivers/char/nozomi.c:1453:
+static void nozomi_setup_private_data(dc_t * dc)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2172: FILE: drivers/char/nozomi.c:1470:
+		dc->port[i].rx_data = dc->port[i].tx_data = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:SPACING: No space is necessary after a cast
#2179: FILE: drivers/char/nozomi.c:1477:
+	dc_t *dc = (dc_t *) tmp_dc;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2237: FILE: drivers/char/nozomi.c:1531:
+static void make_sysfs_files(dc_t * dc)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2246: FILE: drivers/char/nozomi.c:1539:
+static void remove_sysfs_files(dc_t * dc)

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#2254: FILE: drivers/char/nozomi.c:1546:
+static int __devinit nozomi_card_init(struct pci_dev *pdev,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2281: FILE: drivers/char/nozomi.c:1621:
+	if (!(dc->tty_flip_wq = create_singlethread_workqueue(NOZOMI_NAME))) {

WARNING:INDENTED_LABEL: labels should not be indented
#2307: FILE: drivers/char/nozomi.c:1641:
+      err_disable_regions:

WARNING:INDENTED_LABEL: labels should not be indented
#2313: FILE: drivers/char/nozomi.c:1646:
+      err_disable_device:

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2321: FILE: drivers/char/nozomi.c:1652:
+static void tty_do_close(dc_t * dc, struct port *port)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2330: FILE: drivers/char/nozomi.c:1657:
+	if (down_interruptible(&port->tty_sem)) {
+		return;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2337: FILE: drivers/char/nozomi.c:1661:
+	if (!port->tty_open_count) {
+		goto exit;
+	}

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#2365: FILE: drivers/char/nozomi.c:1679:
 static void __devexit tty_exit(void)

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#2383: FILE: drivers/char/nozomi.c:1700:
+static void __devexit nozomi_card_exit(struct pci_dev *pdev)

CHECK:SPACING: No space is necessary after a cast
#2404: FILE: drivers/char/nozomi.c:1715:
+	D1("sending flow control 0x%04X", *((u16 *) & ctrl));

ERROR:SPACING: space prohibited after that '&' (ctx:WxW)
#2404: FILE: drivers/char/nozomi.c:1715:
+	D1("sending flow control 0x%04X", *((u16 *) & ctrl));
 	                                            ^

CHECK:SPACING: No space is necessary after a cast
#2412: FILE: drivers/char/nozomi.c:1719:
+	SET_MEM(dc->port[PORT_CTRL].ul_addr[0], (u32 *) & ctrl, 2);

ERROR:SPACING: space prohibited after that '&' (ctx:WxW)
#2412: FILE: drivers/char/nozomi.c:1719:
+	SET_MEM(dc->port[PORT_CTRL].ul_addr[0], (u32 *) & ctrl, 2);
 	                                                ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2436: FILE: drivers/char/nozomi.c:1733:
+	for (i = PORT_MDM; i < MAX_PORT; i++) {
+		kfree(dc->port[i].fifo_ul);
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2455: FILE: drivers/char/nozomi.c:1745:
+	if (my_dev) {
+		kfree(my_dev);
+	}

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#2456: FILE: drivers/char/nozomi.c:1746:
+	if (my_dev) {
+		kfree(my_dev);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2500: FILE: drivers/char/nozomi.c:1774:
+------------------------------------------------------------------------------*/

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2527: FILE: drivers/char/nozomi.c:1785:
+	if (down_interruptible(&port->tty_sem)) {
+		return -ERESTARTSYS;
+	}

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2549: FILE: drivers/char/nozomi.c:1799:
+		port->rx_data = port->tx_data = 0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#2570: FILE: drivers/char/nozomi.c:1815:
+	dc_t *dc = get_dc_by_tty(tty);
+	tty_do_close(dc, (struct port *)tty->driver_data);

WARNING:TYPO_SPELLING: 'transfered' may be misspelled - perhaps 'transferred'?
#2618: FILE: drivers/char/nozomi.c:1819:
+/* Data is inserted into a fifo, which is then read and transfered to the
                                                         ^^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2619: FILE: drivers/char/nozomi.c:1820:
+/* Data is inserted into a fifo, which is then read and transfered to the
+   modem. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2619: FILE: drivers/char/nozomi.c:1820:
+   modem. */

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2633: FILE: drivers/char/nozomi.c:1831:
+	if (!port) {
+		return -ENODEV;
+	}

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2638: FILE: drivers/char/nozomi.c:1836:
+	if (down_trylock(&port->tty_sem)) { /* must test lock as tty layer wraps
+					       calls to this function with BKL*/

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2638: FILE: drivers/char/nozomi.c:1836:
+					       calls to this function with BKL*/

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dc"
#2651: FILE: drivers/char/nozomi.c:1849:
+	if (dc == NULL) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around dc->port[PORT_MDM]
#2658: FILE: drivers/char/nozomi.c:1856:
+	if (port == &(dc->port[PORT_MDM])) {

WARNING:INDENTED_LABEL: labels should not be indented
#2670: FILE: drivers/char/nozomi.c:1868:
+      exit:

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2691: FILE: drivers/char/nozomi.c:1876:
+/*   #according to sources N_TTY.c it expects a value >= 0 and does not check
+     for negative values. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2691: FILE: drivers/char/nozomi.c:1876:
+     for negative values. */

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2699: FILE: drivers/char/nozomi.c:1884:
+	if (!port) {
+		return 0;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2702: FILE: drivers/char/nozomi.c:1887:
+	if (down_trylock(&port->tty_sem)) {
+		return 0;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2712: FILE: drivers/char/nozomi.c:1894:
+	if (!port->tty_open_count) {
+		goto exit;
+	}

WARNING:INDENTED_LABEL: labels should not be indented
#2722: FILE: drivers/char/nozomi.c:1900:
+      exit:

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cflag == old_termios->c_cflag'
#2795: FILE: drivers/char/nozomi.c:1914:
+		if ((cflag == old_termios->c_cflag) &&
+		    (RELEVANT_IFLAG(tty->termios->c_iflag) ==
+		     RELEVANT_IFLAG(old_termios->c_iflag))) {

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#2822: FILE: drivers/char/nozomi.c:1941:
+		if (cflag & PARODD) {
[...]
+		} else {
[...]

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#2832: FILE: drivers/char/nozomi.c:1951:
+	if (cflag & CSTOPB) {
[...]
+	} else {
[...]

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#2839: FILE: drivers/char/nozomi.c:1958:
+	if (cflag & CRTSCTS) {
[...]
+	} else {
[...]

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2847: FILE: drivers/char/nozomi.c:1966:
+	 * stop character in the device */

WARNING:SPLIT_STRING: quoted string split across lines
#2877: FILE: drivers/char/nozomi.c:1975:
+			D1(" - INBOUND XON/XOFF is enabled, "
+			   "XON = %2x, XOFF = %2x", start_char, stop_char);

WARNING:SPLIT_STRING: quoted string split across lines
#2885: FILE: drivers/char/nozomi.c:1983:
+			D1(" - OUTBOUND XON/XOFF is enabled, "
+			   "XON = %2x, XOFF = %2x", start_char, stop_char);

WARNING:INDENTED_LABEL: labels should not be indented
#2891: FILE: drivers/char/nozomi.c:1989:
+      exit_termios:

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cnow.rng != cprev.rng'
#2997: FILE: drivers/char/nozomi.c:2044:
+			if (((arg & TIOCM_RNG) && (cnow.rng != cprev.rng)) ||
+			    ((arg & TIOCM_DSR) && (cnow.dsr != cprev.dsr)) ||
+			    ((arg & TIOCM_CD) && (cnow.dcd != cprev.dcd)) ||
+			    ((arg & TIOCM_CTS) && (cnow.cts != cprev.cts))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cnow.dsr != cprev.dsr'
#2997: FILE: drivers/char/nozomi.c:2044:
+			if (((arg & TIOCM_RNG) && (cnow.rng != cprev.rng)) ||
+			    ((arg & TIOCM_DSR) && (cnow.dsr != cprev.dsr)) ||
+			    ((arg & TIOCM_CD) && (cnow.dcd != cprev.dcd)) ||
+			    ((arg & TIOCM_CTS) && (cnow.cts != cprev.cts))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cnow.dcd != cprev.dcd'
#2997: FILE: drivers/char/nozomi.c:2044:
+			if (((arg & TIOCM_RNG) && (cnow.rng != cprev.rng)) ||
+			    ((arg & TIOCM_DSR) && (cnow.dsr != cprev.dsr)) ||
+			    ((arg & TIOCM_CD) && (cnow.dcd != cprev.dcd)) ||
+			    ((arg & TIOCM_CTS) && (cnow.cts != cprev.cts))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cnow.cts != cprev.cts'
#2997: FILE: drivers/char/nozomi.c:2044:
+			if (((arg & TIOCM_RNG) && (cnow.rng != cprev.rng)) ||
+			    ((arg & TIOCM_DSR) && (cnow.dsr != cprev.dsr)) ||
+			    ((arg & TIOCM_CD) && (cnow.dcd != cprev.dcd)) ||
+			    ((arg & TIOCM_CTS) && (cnow.cts != cprev.cts))) {

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#3006: FILE: drivers/char/nozomi.c:2053:
+
+	}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#3035: FILE: drivers/char/nozomi.c:2058:
+				  unsigned int cmd, void __user * arg)

WARNING:INDENTED_LABEL: labels should not be indented
#3291: FILE: drivers/char/nozomi.c:2211:
+      exit_in_buffer:

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#3321: FILE: drivers/char/nozomi.c:2229:
+static int ntty_tty_init(dc_t * dc)

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.30612.commit.c1cef6e250b07594313dd5e5558d06ba33858f2e total: 70 errors, 79 warnings, 63 checks, 3285 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.30612.commit.c1cef6e250b07594313dd5e5558d06ba33858f2e has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
