WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#48: 
The reason for removal was that I also removed the xorl %eax,%eax, decl %eax

WARNING:TYPO_SPELLING: 'beleive' may be misspelled - perhaps 'believe'?
#61: 
stay - I beleive you. But please, explain me how it works, before I
         ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#161: FILE: percpu.h:20:
+#define PER_CPU(var, cpu) \
+	shll $2, cpu; \
+	movl __per_cpu_offset(cpu), cpu; \
+	addl $per_cpu__/**/var, cpu;

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cpu' - possible side-effects?
#161: FILE: percpu.h:20:
+#define PER_CPU(var, cpu) \
+	shll $2, cpu; \
+	movl __per_cpu_offset(cpu), cpu; \
+	addl $per_cpu__/**/var, cpu;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#161: FILE: percpu.h:20:
+#define PER_CPU(var, cpu) \
+	shll $2, cpu; \
+	movl __per_cpu_offset(cpu), cpu; \
+	addl $per_cpu__/**/var, cpu;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#210: FILE: include/asm-i386/desc.h:178:
+#define GET_DESC_BASE(idx, gdt, base, lo_w, lo_b, hi_b) \
+	movb idx*8+4(gdt), lo_b; \
+	movb idx*8+7(gdt), hi_b; \
+	shll $16, base; \
+	movw idx*8+2(gdt), lo_w;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'idx' - possible side-effects?
#210: FILE: include/asm-i386/desc.h:178:
+#define GET_DESC_BASE(idx, gdt, base, lo_w, lo_b, hi_b) \
+	movb idx*8+4(gdt), lo_b; \
+	movb idx*8+7(gdt), hi_b; \
+	shll $16, base; \
+	movw idx*8+2(gdt), lo_w;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'idx' may be better as '(idx)' to avoid precedence issues
#210: FILE: include/asm-i386/desc.h:178:
+#define GET_DESC_BASE(idx, gdt, base, lo_w, lo_b, hi_b) \
+	movb idx*8+4(gdt), lo_b; \
+	movb idx*8+7(gdt), hi_b; \
+	shll $16, base; \
+	movw idx*8+2(gdt), lo_w;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'gdt' - possible side-effects?
#210: FILE: include/asm-i386/desc.h:178:
+#define GET_DESC_BASE(idx, gdt, base, lo_w, lo_b, hi_b) \
+	movb idx*8+4(gdt), lo_b; \
+	movb idx*8+7(gdt), hi_b; \
+	shll $16, base; \
+	movw idx*8+2(gdt), lo_w;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#210: FILE: include/asm-i386/desc.h:178:
+#define GET_DESC_BASE(idx, gdt, base, lo_w, lo_b, hi_b) \
+	movb idx*8+4(gdt), lo_b; \
+	movb idx*8+7(gdt), hi_b; \
+	shll $16, base; \
+	movw idx*8+2(gdt), lo_w;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#211: FILE: include/asm-i386/desc.h:179:
+	movb idx*8+4(gdt), lo_b; \
 	        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#211: FILE: include/asm-i386/desc.h:179:
+	movb idx*8+4(gdt), lo_b; \
 	          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#212: FILE: include/asm-i386/desc.h:180:
+	movb idx*8+7(gdt), hi_b; \
 	        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#212: FILE: include/asm-i386/desc.h:180:
+	movb idx*8+7(gdt), hi_b; \
 	          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#214: FILE: include/asm-i386/desc.h:182:
+	movw idx*8+2(gdt), lo_w;
 	        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#214: FILE: include/asm-i386/desc.h:182:
+	movw idx*8+2(gdt), lo_w;
 	          ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#238: FILE: arch/i386/kernel/traps.c:1022:
+fastcall unsigned long patch_espfix_base(unsigned long uesp,
+					  unsigned long kesp)

CHECK:CAMELCASE: Avoid CamelCase: <Xgt_desc_struct>
#281: FILE: arch/i386/kernel/traps.c:1025:
+	struct Xgt_desc_struct *cpu_gdt_descr = &per_cpu(cpu_gdt_descr, cpu);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:CODE_INDENT: code indent should use tabs where possible
#286: FILE: arch/i386/kernel/traps.c:1030:
+ ^Idesc &= 0x00ffff000000ffffULL;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#286: FILE: arch/i386/kernel/traps.c:1030:
+ ^Idesc &= 0x00ffff000000ffffULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#286: FILE: arch/i386/kernel/traps.c:1030:
+ ^Idesc &= 0x00ffff000000ffffULL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#287: FILE: arch/i386/kernel/traps.c:1031:
+ ^Idesc |=^I((((__u64)base) << 16) & 0x000000ffffff0000ULL) |$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#287: FILE: arch/i386/kernel/traps.c:1031:
+ ^Idesc |=^I((((__u64)base) << 16) & 0x000000ffffff0000ULL) |$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#287: FILE: arch/i386/kernel/traps.c:1031:
+ ^Idesc |=^I((((__u64)base) << 16) & 0x000000ffffff0000ULL) |$

WARNING:TYPO_SPELLING: 'cant' may be misspelled - perhaps 'can't'?
#350: FILE: arch/i386/kernel/entry.S:508:
+	/* since we are on a wrong stack, we cant make it a C code :( */ \
 	                                     ^^^^

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.52528.commit.451e3574140ac00da3e74d4d77d1cd2ec0bf2015 total: 4 errors, 9 warnings, 12 checks, 326 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.52528.commit.451e3574140ac00da3e74d4d77d1cd2ec0bf2015 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
