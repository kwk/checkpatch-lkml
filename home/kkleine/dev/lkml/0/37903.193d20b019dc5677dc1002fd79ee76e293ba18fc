WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
> > -	device->common.device_memcpy_issue_pending = ioat_dma_memcpy_issue_pending;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#105: FILE: drivers/dma/dmaengine.c:108:
+	__ATTR(count, S_IRUGO, show_memcpy_count, NULL),

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#119: FILE: drivers/dma/dmaengine.c:406:
+EXPORT_SYMBOL(dma_async_buf_to_pg);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#120: FILE: drivers/dma/dmaengine.c:407:
+EXPORT_SYMBOL(dma_async_pg_to_pg);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#121: FILE: drivers/dma/dmaengine.c:408:
+EXPORT_SYMBOL(dma_async_complete);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#122: FILE: drivers/dma/dmaengine.c:409:
+EXPORT_SYMBOL(dma_async_issue_pending);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#134: FILE: drivers/dma/ioatdma.c:43:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#136: FILE: drivers/dma/ioatdma.c:45:
 static int __devinit ioat_probe(struct pci_dev *pdev, const struct pci_device_id *ent);

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#137: FILE: drivers/dma/ioatdma.c:46:
 static void __devexit ioat_remove(struct pci_dev *pdev);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#150: FILE: drivers/dma/ioatdma.c:693:
 static int __devinit ioat_probe(struct pci_dev *pdev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#181: FILE: drivers/dma/iovlock.c:155:
+			dma_cookie = dma_async_buf_to_buf(DMAFUNC_MEMCPY, chan,
+					iov->iov_base, kdata, copy);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#191: FILE: drivers/dma/iovlock.c:211:
+			dma_cookie = dma_async_buf_to_pg(DMAFUNC_MEMCPY, chan,
 					page_list->pages[page_idx],

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#200: FILE: drivers/dma/iovlock.c:275:
+			dma_cookie = dma_async_pg_to_pg(DMAFUNC_MEMCPY, chan,
 					page_list->pages[page_idx],

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#242: FILE: include/linux/dmaengine.h:174:
+	dma_cookie_t (*buf_to_buf)(struct dma_chan *chan,
+				void *dest, void *src, size_t len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#244: FILE: include/linux/dmaengine.h:176:
+	dma_cookie_t (*buf_to_pg)(struct dma_chan *chan,
+				struct page *page, unsigned int offset,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#247: FILE: include/linux/dmaengine.h:179:
+	dma_cookie_t (*pg_to_pg)(struct dma_chan *chan,
+				struct page *dest_pg, unsigned int dest_off,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#251: FILE: include/linux/dmaengine.h:183:
+	enum dma_status (*complete)(struct dma_chan *chan,
+				dma_cookie_t cookie, dma_cookie_t *last,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#313: FILE: include/linux/dmaengine.h:236:
+static inline dma_cookie_t dma_async_buf_to_buf(enum dma_function_type type,
+		struct dma_chan *chan, void *dest, void *src, size_t len)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#344: FILE: include/linux/dmaengine.h:265:
+static inline dma_cookie_t dma_async_buf_to_pg(enum dma_function_type type,
+		struct dma_chan *chan, struct page *page, unsigned int offset,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#379: FILE: include/linux/dmaengine.h:297:
+static inline dma_cookie_t dma_async_pg_to_pg(enum dma_function_type type,
+		struct dma_chan *chan, struct page *dest_pg, unsigned int dest_off,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#410: FILE: include/linux/dmaengine.h:322:
+static inline void dma_async_issue_pending(enum dma_function_type type,
+		struct dma_chan *chan)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#430: FILE: include/linux/dmaengine.h:340:
+static inline enum dma_status dma_async_complete(enum dma_function_type type,
+		struct dma_chan *chan, dma_cookie_t cookie, dma_cookie_t *last,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#476: FILE: net/ipv4/tcp.c:1437:
+		while (dma_async_complete(DMAFUNC_MEMCPY, tp->ucopy.dma_chan,
 		                                 tp->ucopy.dma_cookie, &done,

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.37903.commit.193d20b019dc5677dc1002fd79ee76e293ba18fc total: 0 errors, 9 warnings, 14 checks, 347 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.37903.commit.193d20b019dc5677dc1002fd79ee76e293ba18fc has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
