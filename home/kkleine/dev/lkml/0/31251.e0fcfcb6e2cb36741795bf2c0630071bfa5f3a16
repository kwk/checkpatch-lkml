WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#60: FILE: include/bc/vmpages.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#61: FILE: include/bc/vmpages.h:2:
+ * include/bc/vmpages.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#81: FILE: include/bc/vmpages.h:22:
+#define __vma_set_bc(vma, bc) do { (vma)->vma_bc = bc_get(bc); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'vma' - possible side-effects?
#82: FILE: include/bc/vmpages.h:23:
+#define vma_set_bc(vma)	__vma_set_bc(vma, (vma)->vm_mm->mm_bc)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'vma' - possible side-effects?
#83: FILE: include/bc/vmpages.h:24:
+#define vma_copy_bc(vma) __vma_set_bc(vma, (vma)->vma_bc)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#84: FILE: include/bc/vmpages.h:25:
+#define vma_release_bc(vma) do { bc_put((vma)->vma_bc); } while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'mm' may be better as '(mm)' to avoid precedence issues
#91: FILE: include/bc/vmpages.h:32:
+#define mm_free_beancounter(mm) do { bc_put(mm->mm_bc); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#91: FILE: include/bc/vmpages.h:32:
+#define mm_free_beancounter(mm) do { bc_put(mm->mm_bc); } while (0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#94: FILE: include/bc/vmpages.h:35:
+int __must_check bc_need_memory_recharge(struct vm_area_struct *vma,
+		struct file *new_file, unsigned long new_flags);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#97: FILE: include/bc/vmpages.h:38:
+int __must_check __bc_memory_charge(struct mm_struct *mm, unsigned long len,
+		int severity);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#99: FILE: include/bc/vmpages.h:40:
+int __must_check bc_memory_charge(struct mm_struct *mm, unsigned long len,
+		struct file *file, unsigned long flags, int severity);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#104: FILE: include/bc/vmpages.h:45:
+void bc_memory_uncharge(struct mm_struct *mm, unsigned long len,
+		struct file *file, unsigned long flags);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'bc1' may be better as '(bc1)' to avoid precedence issues
#107: FILE: include/bc/vmpages.h:48:
+#define bc_equal(bc1, bc2)	(bc1 == bc2)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'bc2' may be better as '(bc2)' to avoid precedence issues
#107: FILE: include/bc/vmpages.h:48:
+#define bc_equal(bc1, bc2)	(bc1 == bc2)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#111: FILE: include/bc/vmpages.h:52:
+int __must_check bc_need_memory_recharge(struct vm_area_struct *vma,
+		struct file *new_file, unsigned long new_flags)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#115: FILE: include/bc/vmpages.h:56:
+}
+static inline int __must_check __bc_memory_charge(struct mm_struct *mm,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#116: FILE: include/bc/vmpages.h:57:
+static inline int __must_check __bc_memory_charge(struct mm_struct *mm,
+		unsigned long len, int severity)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#120: FILE: include/bc/vmpages.h:61:
+}
+static inline int __must_check bc_memory_charge(struct mm_struct *mm,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#121: FILE: include/bc/vmpages.h:62:
+static inline int __must_check bc_memory_charge(struct mm_struct *mm,
+		unsigned long len, struct file *file, unsigned long flags,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#126: FILE: include/bc/vmpages.h:67:
+}
+static inline int __must_check bc_vma_charge(struct vm_area_struct *vma)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#130: FILE: include/bc/vmpages.h:71:
+}
+static inline void __bc_memory_uncharge(struct mm_struct *mm, unsigned long len)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#133: FILE: include/bc/vmpages.h:74:
+}
+static inline void bc_memory_uncharge(struct mm_struct *mm, unsigned long len,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#134: FILE: include/bc/vmpages.h:75:
+static inline void bc_memory_uncharge(struct mm_struct *mm, unsigned long len,
+		struct file *file, unsigned long flags)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#137: FILE: include/bc/vmpages.h:78:
+}
+static inline void bc_vma_uncharge(struct vm_area_struct *vma)

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#177: FILE: kernel/bc/vmpages.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#178: FILE: kernel/bc/vmpages.c:2:
+ * kernel/bc/vmpages.c

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file"
#205: FILE: kernel/bc/vmpages.c:29:
+		((flags & VM_WRITE) && (file == NULL || !(flags & VM_SHARED)));

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#212: FILE: kernel/bc/vmpages.c:36:
+static inline int do_memory_charge(struct beancounter *bc,
+		unsigned long len, int severity)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#232: FILE: kernel/bc/vmpages.c:56:
+int bc_memory_charge(struct mm_struct *mm, unsigned long len,
+		struct file *file, unsigned long flags, int severity)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#248: FILE: kernel/bc/vmpages.c:72:
+			do_memory_charge(vma->vm_mm->mm_bc,
+				vma->vm_end - vma->vm_start, BC_BARRIER) : 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#260: FILE: kernel/bc/vmpages.c:84:
+void bc_memory_uncharge(struct mm_struct *mm, unsigned long len,
+		struct file *file, unsigned long flags)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#273: FILE: kernel/bc/vmpages.c:97:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#275: FILE: kernel/bc/vmpages.c:99:
+int bc_need_memory_recharge(struct vm_area_struct *vma, struct file *new_file,
+		unsigned long new_flags)

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#283: FILE: kernel/bc/vmpages.c:107:
+		return BC_UNCHARGE;
+	} else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#299: FILE: kernel/bc/vmpages.c:123:
+	bc_init_resource(bc, BC_PRIVVMPAGES,
+			BC_PRIVVMPAGES_BARRIER, BC_PRIVVMPAGES_LIMIT);

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#314: FILE: kernel/bc/vmpages.c:138:
+__initcall(bc_privvm_init_resource);

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.31251.commit.e0fcfcb6e2cb36741795bf2c0630071bfa5f3a16 total: 0 errors, 13 warnings, 27 checks, 246 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.31251.commit.e0fcfcb6e2cb36741795bf2c0630071bfa5f3a16 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
