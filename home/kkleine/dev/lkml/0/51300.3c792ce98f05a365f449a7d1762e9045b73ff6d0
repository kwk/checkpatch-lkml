WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
like you, I started recently with Mark's m41t00.c driver to add support for 

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#104: FILE: drivers/rtc/rtc-m41txx.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:BIT_MACRO: Prefer using the BIT macro
#132: FILE: drivers/rtc/rtc-m41txx.c:29:
+#define M41TXX_SEC_ST		(1 << 7)	/* ST: Stop Bit */

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#133: FILE: drivers/rtc/rtc-m41txx.c:30:
+#define M41TXX_HOUR_CB		(1 << 6)	/* CB: Century Bit */

CHECK:BIT_MACRO: Prefer using the BIT macro
#134: FILE: drivers/rtc/rtc-m41txx.c:31:
+#define M41TXX_HOUR_CEB		(1 << 7)	/* CEB: Century Enable Bit */

CHECK:BIT_MACRO: Prefer using the BIT macro
#135: FILE: drivers/rtc/rtc-m41txx.c:32:
+#define M41TXX_ALHOUR_HT	(1 << 6)	/* HT: Halt Update Bit */

CHECK:BIT_MACRO: Prefer using the BIT macro
#136: FILE: drivers/rtc/rtc-m41txx.c:33:
+#define M41TXX_FLAGS_BATT_LOW	(1 << 4)	/* BL: Battery Low Bit */

CHECK:BIT_MACRO: Prefer using the BIT macro
#138: FILE: drivers/rtc/rtc-m41txx.c:35:
+#define M41TXX_FEATURE_HT	(1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#139: FILE: drivers/rtc/rtc-m41txx.c:36:
+#define M41TXX_FEATURE_BL	(1 << 1)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#143: FILE: drivers/rtc/rtc-m41txx.c:40:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TABSTOP: Statements should start on a tabstop
#207: FILE: drivers/rtc/rtc-m41txx.c:104:
+	 { /* M41T80 */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#210: FILE: drivers/rtc/rtc-m41txx.c:107:
+^I .read_limit ^I= 1,$

WARNING:TABSTOP: Statements should start on a tabstop
#224: FILE: drivers/rtc/rtc-m41txx.c:121:
+	 { /* M41T81 */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#227: FILE: drivers/rtc/rtc-m41txx.c:124:
+^I .read_limit ^I= 1,$

WARNING:TABSTOP: Statements should start on a tabstop
#241: FILE: drivers/rtc/rtc-m41txx.c:138:
+	 { /* M41ST84/85/87/94 */

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#259: FILE: drivers/rtc/rtc-m41txx.c:156:
+};
+static struct m41txx_chip_info *m41txx_chip;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#264: FILE: drivers/rtc/rtc-m41txx.c:161:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#272: FILE: drivers/rtc/rtc-m41txx.c:169:
+^I^I .addr ^I= client->addr,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#274: FILE: drivers/rtc/rtc-m41txx.c:171:
+^I^I .len ^I= 1,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#275: FILE: drivers/rtc/rtc-m41txx.c:172:
+^I^I .buf ^I= dt_addr,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#278: FILE: drivers/rtc/rtc-m41txx.c:175:
+^I^I .addr ^I= client->addr,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#280: FILE: drivers/rtc/rtc-m41txx.c:177:
+^I^I .len ^I= 8,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#281: FILE: drivers/rtc/rtc-m41txx.c:178:
+^I^I .buf ^I= buf,$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#285: FILE: drivers/rtc/rtc-m41txx.c:182:
+	sec = min = hour = day = mon = year = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#306: FILE: drivers/rtc/rtc-m41txx.c:203:
+	} while ((++reads < m41txx_chip->read_limit) && ((sec != sec1)
+			|| (min != min1) || (hour != hour1) || (day != day1)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#307: FILE: drivers/rtc/rtc-m41txx.c:204:
+			|| (min != min1) || (hour != hour1) || (day != day1)
+			|| (mon != mon1) || (year != year1)));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'm41txx_chip->read_limit > 1'
#309: FILE: drivers/rtc/rtc-m41txx.c:206:
+	if ((m41txx_chip->read_limit > 1)
+	    && ((sec != sec1) || (min != min1)
+		|| (hour != hour1) || (day != day1) || (mon != mon1)
+		|| (year != year1)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sec != sec1'
#309: FILE: drivers/rtc/rtc-m41txx.c:206:
+	if ((m41txx_chip->read_limit > 1)
+	    && ((sec != sec1) || (min != min1)
+		|| (hour != hour1) || (day != day1) || (mon != mon1)
+		|| (year != year1)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'min != min1'
#309: FILE: drivers/rtc/rtc-m41txx.c:206:
+	if ((m41txx_chip->read_limit > 1)
+	    && ((sec != sec1) || (min != min1)
+		|| (hour != hour1) || (day != day1) || (mon != mon1)
+		|| (year != year1)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'hour != hour1'
#309: FILE: drivers/rtc/rtc-m41txx.c:206:
+	if ((m41txx_chip->read_limit > 1)
+	    && ((sec != sec1) || (min != min1)
+		|| (hour != hour1) || (day != day1) || (mon != mon1)
+		|| (year != year1)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'day != day1'
#309: FILE: drivers/rtc/rtc-m41txx.c:206:
+	if ((m41txx_chip->read_limit > 1)
+	    && ((sec != sec1) || (min != min1)
+		|| (hour != hour1) || (day != day1) || (mon != mon1)
+		|| (year != year1)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mon != mon1'
#309: FILE: drivers/rtc/rtc-m41txx.c:206:
+	if ((m41txx_chip->read_limit > 1)
+	    && ((sec != sec1) || (min != min1)
+		|| (hour != hour1) || (day != day1) || (mon != mon1)
+		|| (year != year1)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'year != year1'
#309: FILE: drivers/rtc/rtc-m41txx.c:206:
+	if ((m41txx_chip->read_limit > 1)
+	    && ((sec != sec1) || (min != min1)
+		|| (hour != hour1) || (day != day1) || (mon != mon1)
+		|| (year != year1)))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#310: FILE: drivers/rtc/rtc-m41txx.c:207:
+	if ((m41txx_chip->read_limit > 1)
+	    && ((sec != sec1) || (min != min1)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#311: FILE: drivers/rtc/rtc-m41txx.c:208:
+	    && ((sec != sec1) || (min != min1)
+		|| (hour != hour1) || (day != day1) || (mon != mon1)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#312: FILE: drivers/rtc/rtc-m41txx.c:209:
+		|| (hour != hour1) || (day != day1) || (mon != mon1)
+		|| (year != year1)))

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'm41txx_get_datetime', this function's name, in a string
#330: FILE: drivers/rtc/rtc-m41txx.c:227:
+	dev_err(&client->dev, "m41txx_get_datetime: Read error\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#334: FILE: drivers/rtc/rtc-m41txx.c:231:
+
+

WARNING:SPACING: space prohibited before semicolon
#378: FILE: drivers/rtc/rtc-m41txx.c:275:
+			| M41TXX_HOUR_CB | M41TXX_HOUR_CEB ;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#392: FILE: drivers/rtc/rtc-m41txx.c:289:
+		dev_err(&client->dev, "%s: write error\n", __FUNCTION__);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'm41txx_set_datetime', this function's name, in a string
#397: FILE: drivers/rtc/rtc-m41txx.c:294:
+	dev_err(&client->dev, "m41txx_set_datetime: Read error\n");

CHECK:SPACING: No space is necessary after a cast
#415: FILE: drivers/rtc/rtc-m41txx.c:312:
+	int nowtime = *(int *) arg;

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#420: FILE: drivers/rtc/rtc-m41txx.c:317:
+
+}

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#438: FILE: drivers/rtc/rtc-m41txx.c:335:
+EXPORT_SYMBOL_GPL(m41t00_set_rtc_time);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#441: FILE: drivers/rtc/rtc-m41txx.c:338:
+ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#441: FILE: drivers/rtc/rtc-m41txx.c:338:
+/*
+ 

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#442: FILE: drivers/rtc/rtc-m41txx.c:338:
*****************************************************************************

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#446: FILE: drivers/rtc/rtc-m41txx.c:342:
+ $

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#454: FILE: drivers/rtc/rtc-m41txx.c:349:
+	if (pdev && (pdata = pdev->dev.platform_data)) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#485: FILE: drivers/rtc/rtc-m41txx.c:380:
+	if (m41txx_chip->flags & M41TXX_FEATURE_BL ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#487: FILE: drivers/rtc/rtc-m41txx.c:382:
+		reg = i2c_smbus_read_byte_data(to_i2c_client(dev),
+							m41txx_chip->flags);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#489: FILE: drivers/rtc/rtc-m41txx.c:384:
+		seq_printf(seq, "battery\t\t: %s\n",
+			(reg & M41TXX_FLAGS_BATT_LOW) ? "exhausted" : "ok");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#504: FILE: drivers/rtc/rtc-m41txx.c:399:
+
+

WARNING:CONST_STRUCT: struct rtc_class_ops should normally be const
#505: FILE: drivers/rtc/rtc-m41txx.c:400:
+static struct rtc_class_ops m41txx_rtc_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#512: FILE: drivers/rtc/rtc-m41txx.c:407:
+ $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#512: FILE: drivers/rtc/rtc-m41txx.c:407:
+/*
+ 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#517: FILE: drivers/rtc/rtc-m41txx.c:411:
+ $

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#528: FILE: drivers/rtc/rtc-m41txx.c:421:
+	dev_dbg(&adapter->dev, "%s\n", __FUNCTION__);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#536: FILE: drivers/rtc/rtc-m41txx.c:429:
+	if (!(client = kzalloc(sizeof(struct i2c_client), GFP_KERNEL))) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*client)...) over kzalloc(sizeof(struct i2c_client)...)
#536: FILE: drivers/rtc/rtc-m41txx.c:429:
+	if (!(client = kzalloc(sizeof(struct i2c_client), GFP_KERNEL))) {

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#542: FILE: drivers/rtc/rtc-m41txx.c:435:
+	strlcpy(client->name, m41txx_chip->name, I2C_NAME_SIZE);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#548: FILE: drivers/rtc/rtc-m41txx.c:441:
+	if ((rc = i2c_attach_client(client)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#567: FILE: drivers/rtc/rtc-m41txx.c:460:
+			if (((rc = i2c_smbus_read_byte_data(client,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#568: FILE: drivers/rtc/rtc-m41txx.c:461:
+			if (((rc = i2c_smbus_read_byte_data(client,
+					m41txx_chip->alarm_mon)) < 0)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#569: FILE: drivers/rtc/rtc-m41txx.c:462:
+					m41txx_chip->alarm_mon)) < 0)
+			 || ((rc = i2c_smbus_write_byte_data(client,

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#572: FILE: drivers/rtc/rtc-m41txx.c:465:
+					rc & ~0x40)) < 0)
+			 || ((rc = i2c_smbus_write_byte_data(client,

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#575: FILE: drivers/rtc/rtc-m41txx.c:468:
+					m41txx_chip->sqw_freq)) < 0)
+			 || ((rc = i2c_smbus_write_byte_data(client,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#581: FILE: drivers/rtc/rtc-m41txx.c:474:
+		if ((rc = i2c_smbus_read_byte_data(client,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#582: FILE: drivers/rtc/rtc-m41txx.c:475:
+		if ((rc = i2c_smbus_read_byte_data(client,
+				m41txx_chip->alarm_hour)) < 0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#589: FILE: drivers/rtc/rtc-m41txx.c:482:
+				dev_info(&client->dev,
+					  "%s HT bit was set!\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#589: FILE: drivers/rtc/rtc-m41txx.c:482:
+					  "%s HT bit was set!\n", __FUNCTION__);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#591: FILE: drivers/rtc/rtc-m41txx.c:484:
+				dev_info(&client->dev,
+					"%s Power Down at %04i-%02i-%02i %02i:%02i:%02i\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#592: FILE: drivers/rtc/rtc-m41txx.c:485:
+					__FUNCTION__, tm.tm_year + 1900,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#596: FILE: drivers/rtc/rtc-m41txx.c:489:
+			if ((rc = i2c_smbus_write_byte_data(client,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#597: FILE: drivers/rtc/rtc-m41txx.c:490:
+			if ((rc = i2c_smbus_write_byte_data(client,
+					m41txx_chip->alarm_hour,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#604: FILE: drivers/rtc/rtc-m41txx.c:497:
+	if ((rc = i2c_smbus_read_byte_data(client, m41txx_chip->sec)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#608: FILE: drivers/rtc/rtc-m41txx.c:501:
+		if ((rc = i2c_smbus_write_byte_data(client, m41txx_chip->sec,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#609: FILE: drivers/rtc/rtc-m41txx.c:502:
+		if ((rc = i2c_smbus_write_byte_data(client, m41txx_chip->sec,
+		     rc & ~M41TXX_SEC_ST)) < 0)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#617: FILE: drivers/rtc/rtc-m41txx.c:510:
+	dev_err(&client->dev, "%s: Can't clear ST bit\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#620: FILE: drivers/rtc/rtc-m41txx.c:513:
+	dev_err(&client->dev, "%s: Can't clear HT bit\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#624: FILE: drivers/rtc/rtc-m41txx.c:517:
+		__FUNCTION__);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#648: FILE: drivers/rtc/rtc-m41txx.c:541:
+	if ((rc = i2c_detach_client(client)) == 0) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#662: FILE: drivers/rtc/rtc-m41txx.c:555:
+
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#669: FILE: drivers/rtc/rtc-m41txx.c:562:
+    ("Mark A. Greer <mgreer@mvista.com>, Alexander Bigga <ab@mycable.de>");$

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.51300.commit.3c792ce98f05a365f449a7d1762e9045b73ff6d0 total: 15 errors, 29 warnings, 40 checks, 603 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.51300.commit.3c792ce98f05a365f449a7d1762e9045b73ff6d0 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
