WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#60: FILE: include/bc/beancounter.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#61: FILE: include/bc/beancounter.h:2:
+ *  include/bc/beancounter.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:TYPO_SPELLING: 'minumum' may be misspelled - perhaps 'minimum'?
#86: FILE: include/bc/beancounter.h:27:
+	unsigned long minheld;	/* minumum amount of consumed resources */
 	                      	   ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#99: FILE: include/bc/beancounter.h:40:
+#include <asm/atomic.h>

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#113: FILE: include/bc/beancounter.h:54:
+struct beancounter
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#115: FILE: include/bc/beancounter.h:56:
+	spinlock_t		bc_lock;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#140: FILE: include/bc/beancounter.h:81:
+static inline void bc_adjust_held_minmax(struct beancounter *bc,
+		int resource)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#149: FILE: include/bc/beancounter.h:90:
+void bc_print_resource_warning(struct beancounter *bc, int res,
+		char *str, unsigned long val, unsigned long held);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#153: FILE: include/bc/beancounter.h:94:
+int bc_charge_locked(struct beancounter *bc,
+		int res, unsigned long val, enum severity strict);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#155: FILE: include/bc/beancounter.h:96:
+int bc_charge(struct beancounter *bc,
+		int res, unsigned long val, enum severity strict);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#158: FILE: include/bc/beancounter.h:99:
+void bc_uncharge_locked(struct beancounter *bc,
+		int res, unsigned long val);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#160: FILE: include/bc/beancounter.h:101:
+void bc_uncharge(struct beancounter *bc,
+		int res, unsigned long val);

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#250: FILE: kernel/bc/beancounter.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#251: FILE: kernel/bc/beancounter.c:2:
+ *  kernel/bc/beancounter.c

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#273: FILE: kernel/bc/beancounter.c:24:
+#define bc_hash_fun(x) ((((x) >> 8) ^ (x)) & (BC_HASH_SIZE - 1))

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#276: FILE: kernel/bc/beancounter.c:27:
+spinlock_t bc_hash_lock;

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#278: FILE: kernel/bc/beancounter.c:29:
+EXPORT_SYMBOL(bc_hash);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#279: FILE: kernel/bc/beancounter.c:30:
+EXPORT_SYMBOL(bc_hash_lock);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#305: FILE: kernel/bc/beancounter.c:56:
+	hlist_for_each_entry (bc, pos, slot, hash)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pos"
#309: FILE: kernel/bc/beancounter.c:60:
+	if (pos != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "new_bc"
#313: FILE: kernel/bc/beancounter.c:64:
+		if (new_bc != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "new_bc"
#321: FILE: kernel/bc/beancounter.c:72:
+	if (new_bc != NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#327: FILE: kernel/bc/beancounter.c:78:
+	new_bc = kmem_cache_alloc(bc_cachep,
+			mask & BC_ALLOC_ATOMIC ? GFP_ATOMIC : GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_bc"
#328: FILE: kernel/bc/beancounter.c:79:
+	if (new_bc == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#349: FILE: kernel/bc/beancounter.c:100:
+void bc_print_resource_warning(struct beancounter *bc, int res,
+		char *str, unsigned long val, unsigned long held)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#354: FILE: kernel/bc/beancounter.c:105:
+	printk(KERN_WARNING "BC %s %s warning: %s "

WARNING:SPLIT_STRING: quoted string split across lines
#355: FILE: kernel/bc/beancounter.c:106:
+	printk(KERN_WARNING "BC %s %s warning: %s "
+			"(held %lu, fails %lu, val %lu)\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#369: FILE: kernel/bc/beancounter.c:120:
+			bc_print_resource_warning(bc, i,
+					"resource is held on put", 0, 0);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#381: FILE: kernel/bc/beancounter.c:132:
+			printk(KERN_ERR "BC: Bad refcount: bc=%p, "

WARNING:SPLIT_STRING: quoted string split across lines
#382: FILE: kernel/bc/beancounter.c:133:
+			printk(KERN_ERR "BC: Bad refcount: bc=%p, "
+					"luid=%d, ref=%d\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#388: FILE: kernel/bc/beancounter.c:139:
+	BUG_ON(bc == &init_bc);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#395: FILE: kernel/bc/beancounter.c:146:
+EXPORT_SYMBOL(__put_beancounter);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#403: FILE: kernel/bc/beancounter.c:154:
+int bc_charge_locked(struct beancounter *bc, int resource, unsigned long val,
+		enum severity strict)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#407: FILE: kernel/bc/beancounter.c:158:
+^I * at the moment is possible so an overflow is impossible.  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#411: FILE: kernel/bc/beancounter.c:162:
+	switch (strict) {
+		case BC_BARRIER:
[...]
+		case BC_LIMIT:
[...]
+		case BC_FORCE:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#416: FILE: kernel/bc/beancounter.c:167:
+			/* fallthrough */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#421: FILE: kernel/bc/beancounter.c:172:
+			/* fallthrough */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#426: FILE: kernel/bc/beancounter.c:177:
+			BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#436: FILE: kernel/bc/beancounter.c:187:
+int bc_charge(struct beancounter *bc, int resource, unsigned long val,
+		enum severity strict)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#441: FILE: kernel/bc/beancounter.c:192:
+	BUG_ON(val > BC_MAXVALUE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#455: FILE: kernel/bc/beancounter.c:206:
+		bc_print_resource_warning(bc, resource,
+				"uncharging too much", val, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#532: FILE: kernel/bc/beancounter.c:283:
+	bc_cachep = kmem_cache_create("beancounters",
+			sizeof(struct beancounter),

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bc_cachep"
#534: FILE: kernel/bc/beancounter.c:285:
+	if (bc_cachep == NULL)

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.44895.commit.1d14639d8af0388b438ac24f66fedabeda54e7ca total: 3 errors, 24 warnings, 21 checks, 468 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.44895.commit.1d14639d8af0388b438ac24f66fedabeda54e7ca has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
