WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#73: 
#define LD_MARK2(label, arg1, arg2)					\

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#120: 
#define LDCALLER(caller) __logdev_caller__ ## caller

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#196: 
# cat /debugfs/logdev/marker

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#223: 
# ./logread

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#257: FILE: include/asm-i386/logdev_marker.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#265: FILE: include/asm-i386/logdev_marker.h:9:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#319: FILE: include/asm-i386/logdev_marker.h:63:
+			printk("unknown reg type %d\n", reg);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#326: FILE: include/asm-i386/logdev_marker.h:70:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#355: FILE: include/asm-i386/logdev_marker.h:99:
+		extern void __logdev_caller__ ## label(void);		\

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#366: FILE: include/asm-i386/logdev_marker.h:110:
+		extern void __logdev_caller__ ## label(typeof(arg1));	\

WARNING:FUNCTION_ARGUMENTS: function definition argument 'typeof(arg1)' should also have an identifier name
#366: FILE: include/asm-i386/logdev_marker.h:110:
+		extern void __logdev_caller__ ## label(typeof(arg1));	\

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#380: FILE: include/asm-i386/logdev_marker.h:124:
+		extern void __logdev_caller__ ## label(typeof(arg1),	\

WARNING:FUNCTION_ARGUMENTS: function definition argument 'typeof(arg1)' should also have an identifier name
#380: FILE: include/asm-i386/logdev_marker.h:124:
+		extern void __logdev_caller__ ## label(typeof(arg1),	\

WARNING:FUNCTION_ARGUMENTS: function definition argument 'typeof(arg2)' should also have an identifier name
#380: FILE: include/asm-i386/logdev_marker.h:124:
+		extern void __logdev_caller__ ## label(typeof(arg1),	\

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#397: FILE: include/asm-i386/logdev_marker.h:141:
+		extern void __logdev_caller__ ## label(typeof(arg1),	\

WARNING:FUNCTION_ARGUMENTS: function definition argument 'typeof(arg1)' should also have an identifier name
#397: FILE: include/asm-i386/logdev_marker.h:141:
+		extern void __logdev_caller__ ## label(typeof(arg1),	\

WARNING:FUNCTION_ARGUMENTS: function definition argument 'typeof(arg2)' should also have an identifier name
#397: FILE: include/asm-i386/logdev_marker.h:141:
+		extern void __logdev_caller__ ## label(typeof(arg1),	\

WARNING:FUNCTION_ARGUMENTS: function definition argument 'typeof(arg3)' should also have an identifier name
#397: FILE: include/asm-i386/logdev_marker.h:141:
+		extern void __logdev_caller__ ## label(typeof(arg1),	\

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#417: FILE: include/asm-i386/logdev_marker.h:161:
+		extern void __logdev_caller__ ## label(typeof(arg1),	\

WARNING:FUNCTION_ARGUMENTS: function definition argument 'typeof(arg1)' should also have an identifier name
#417: FILE: include/asm-i386/logdev_marker.h:161:
+		extern void __logdev_caller__ ## label(typeof(arg1),	\

WARNING:FUNCTION_ARGUMENTS: function definition argument 'typeof(arg2)' should also have an identifier name
#417: FILE: include/asm-i386/logdev_marker.h:161:
+		extern void __logdev_caller__ ## label(typeof(arg1),	\

WARNING:FUNCTION_ARGUMENTS: function definition argument 'typeof(arg3)' should also have an identifier name
#417: FILE: include/asm-i386/logdev_marker.h:161:
+		extern void __logdev_caller__ ## label(typeof(arg1),	\

WARNING:FUNCTION_ARGUMENTS: function definition argument 'typeof(arg4)' should also have an identifier name
#417: FILE: include/asm-i386/logdev_marker.h:161:
+		extern void __logdev_caller__ ## label(typeof(arg1),	\

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#444: FILE: include/linux/logdev_marker.h:1:
+/*

ERROR:SPACING: space required before the open parenthesis '('
#465: FILE: include/linux/logdev_marker.h:22:
+#define LD_MARK(label)				do { } while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#466: FILE: include/linux/logdev_marker.h:23:
+#define LD_MARK1(label,arg1)			do { } while(0)
                       ^

ERROR:SPACING: space required before the open parenthesis '('
#466: FILE: include/linux/logdev_marker.h:23:
+#define LD_MARK1(label,arg1)			do { } while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#467: FILE: include/linux/logdev_marker.h:24:
+#define LD_MARK2(label,arg1,arg2)		do { } while(0)
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#467: FILE: include/linux/logdev_marker.h:24:
+#define LD_MARK2(label,arg1,arg2)		do { } while(0)
                            ^

ERROR:SPACING: space required before the open parenthesis '('
#467: FILE: include/linux/logdev_marker.h:24:
+#define LD_MARK2(label,arg1,arg2)		do { } while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#468: FILE: include/linux/logdev_marker.h:25:
+#define LD_MARK3(label,arg1,arg2,arg3)		do { } while(0)
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#468: FILE: include/linux/logdev_marker.h:25:
+#define LD_MARK3(label,arg1,arg2,arg3)		do { } while(0)
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#468: FILE: include/linux/logdev_marker.h:25:
+#define LD_MARK3(label,arg1,arg2,arg3)		do { } while(0)
                                 ^

ERROR:SPACING: space required before the open parenthesis '('
#468: FILE: include/linux/logdev_marker.h:25:
+#define LD_MARK3(label,arg1,arg2,arg3)		do { } while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#469: FILE: include/linux/logdev_marker.h:26:
+#define LD_MARK4(label,arg1,arg2,arg3,arg4)	do { } while(0)
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#469: FILE: include/linux/logdev_marker.h:26:
+#define LD_MARK4(label,arg1,arg2,arg3,arg4)	do { } while(0)
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#469: FILE: include/linux/logdev_marker.h:26:
+#define LD_MARK4(label,arg1,arg2,arg3,arg4)	do { } while(0)
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#469: FILE: include/linux/logdev_marker.h:26:
+#define LD_MARK4(label,arg1,arg2,arg3,arg4)	do { } while(0)
                                      ^

ERROR:SPACING: space required before the open parenthesis '('
#469: FILE: include/linux/logdev_marker.h:26:
+#define LD_MARK4(label,arg1,arg2,arg3,arg4)	do { } while(0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#549: FILE: drivers/char/logdev_marker.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#566: FILE: drivers/char/logdev_marker.c:18:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#567: FILE: drivers/char/logdev_marker.c:19:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#584: FILE: drivers/char/logdev_marker.c:36:
+#include <asm/atomic.h>

WARNING:IF_1: Consider removing the #if 1 and its #endif
#591: FILE: drivers/char/logdev_marker.c:43:
+#if 1

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#592: FILE: drivers/char/logdev_marker.c:44:
+#  define DPRINTK(x...) printk(x)

ERROR:SPACING: space required before the open parenthesis '('
#594: FILE: drivers/char/logdev_marker.c:46:
+#  define DPRINTK(x...) do { } while(0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#669: FILE: drivers/char/logdev_marker.c:121:
+
+

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#676: FILE: drivers/char/logdev_marker.c:128:
+	char func_symbol[KSYM_NAME_LEN+1];
 	                              ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#679: FILE: drivers/char/logdev_marker.c:131:
+
+

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#686: FILE: drivers/char/logdev_marker.c:138:
+	usec_rem = do_div(t, 1000000000)/1000;
 	                                ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#689: FILE: drivers/char/logdev_marker.c:141:
+	printk("[%5lu.%06lu] cpu:%d ",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#708: FILE: drivers/char/logdev_marker.c:160:
+	printk("%s:%d(%d:%d:%d) -->> ",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#715: FILE: drivers/char/logdev_marker.c:167:
+	printk("%s:%d(%d:%d:%d)\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#728: FILE: drivers/char/logdev_marker.c:180:
+	printk("%s:%d  mm=%p vma=%p  address=%lx  write_access=%d\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#752: FILE: drivers/char/logdev_marker.c:204:
+		printk("Unknown marker callback id %x\n",

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#757: FILE: drivers/char/logdev_marker.c:209:
+}
+/* ------------------ end cut for user space printing ------------------- */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#759: FILE: drivers/char/logdev_marker.c:211:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#766: FILE: drivers/char/logdev_marker.c:218:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#818: FILE: drivers/char/logdev_marker.c:270:
+	for (i=0; i < p->args; i++)
 	      ^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#838: FILE: drivers/char/logdev_marker.c:290:
+
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#842: FILE: drivers/char/logdev_marker.c:294:
+
+

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#849: FILE: drivers/char/logdev_marker.c:301:
+static int logdev_mark_ioctl(struct inode *inode, struct file *filp,
                                                                ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#868: FILE: drivers/char/logdev_marker.c:320:
+					printk(KERN_WARNING

CHECK:LINE_SPACING: Please don't use multiple blank lines
#899: FILE: drivers/char/logdev_marker.c:351:
+
+

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#949: FILE: drivers/char/logdev_marker.c:401:
+	seq_printf(m, "probe address:\t%p\n", (void*)lm->address);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#950: FILE: drivers/char/logdev_marker.c:402:
+	seq_printf(m, "func address:\t%p\n", (void*)lm->func.func0);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#952: FILE: drivers/char/logdev_marker.c:404:
+	for (i=0; i < lm->args; i++) {
 	      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#956: FILE: drivers/char/logdev_marker.c:408:
+	seq_printf(m,"\n");
 	            ^

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#956: FILE: drivers/char/logdev_marker.c:408:
+	seq_printf(m,"\n");

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#960: FILE: drivers/char/logdev_marker.c:412:
+static struct seq_operations logdev_seq_op = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#969: FILE: drivers/char/logdev_marker.c:421:
+static int logdev_mark_open (struct inode *inode, struct file *filp)
                                                                ^^^^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#969: FILE: drivers/char/logdev_marker.c:421:
+static int logdev_mark_open (struct inode *inode, struct file *filp)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#973: FILE: drivers/char/logdev_marker.c:425:
+	ret = seq_open(filp, &logdev_seq_op);
 	               ^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#976: FILE: drivers/char/logdev_marker.c:428:
+		struct seq_file *m = filp->private_data;
+		m->private = inode->u.generic_ip;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#982: FILE: drivers/char/logdev_marker.c:434:
+
+

WARNING:CONST_STRUCT: struct file_operations should normally be const
#983: FILE: drivers/char/logdev_marker.c:435:
+static struct file_operations logdev_mark_fops = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#993: FILE: drivers/char/logdev_marker.c:445:
+
+

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#994: FILE: drivers/char/logdev_marker.c:446:
+extern unsigned long __logdev_marker_start;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#995: FILE: drivers/char/logdev_marker.c:447:
+extern unsigned long __logdev_marker_end;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1017: FILE: drivers/char/logdev_marker.c:469:
+			printk(KERN_WARNING "logdev_marker: ran out of memory!\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#1017: FILE: drivers/char/logdev_marker.c:469:
+		if (!probe) {
+			printk(KERN_WARNING "logdev_marker: ran out of memory!\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1024: FILE: drivers/char/logdev_marker.c:476:
+			printk(KERN_WARNING "logdev_marker: corrupted mark section\n");

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1028: FILE: drivers/char/logdev_marker.c:480:
+		for (i=0; i < probe->args; i++) {
 		      ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1034: FILE: drivers/char/logdev_marker.c:486:
+			printk(KERN_WARNING "logdev_marker: unknown reg\n");

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.30591.commit.992fb3411e5ba1f79ab6b172a7df2d1607de09c7 total: 24 errors, 41 warnings, 19 checks, 773 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.30591.commit.992fb3411e5ba1f79ab6b172a7df2d1607de09c7 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
