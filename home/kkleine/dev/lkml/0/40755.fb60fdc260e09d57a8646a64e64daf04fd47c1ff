WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#26: 
circumstances a net slowness in the disk throughput. Strangely enough, in fact,

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#53: 
# hdparm -i /dev/hda

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:TYPO_SPELLING: 'hda' may be misspelled - perhaps 'had'?
#53: 
# hdparm -i /dev/hda
                 ^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#83: 
# uname -a

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#189: FILE: test.c:1:
+#include <linux/module.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:CODE_INDENT: code indent should use tabs where possible
#194: FILE: test.c:6:
+               struct timeval __tv;                            \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#194: FILE: test.c:6:
+               struct timeval __tv;                            \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#195: FILE: test.c:7:
+               do_gettimeofday(&__tv);                         \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#195: FILE: test.c:7:
+               do_gettimeofday(&__tv);                         \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#196: FILE: test.c:8:
+               (t) = timeval_to_ns(&__tv);                     \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#196: FILE: test.c:8:
+               (t) = timeval_to_ns(&__tv);                     \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#197: FILE: test.c:9:
+       })$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 't' - possible side-effects?
#199: FILE: test.c:11:
+#define STOP(t) ({                                             \
+               struct timeval __tv;                            \
+               do_gettimeofday(&__tv);                         \
+               (t) = timeval_to_ns(&__tv) - (t);               \
+       })

ERROR:CODE_INDENT: code indent should use tabs where possible
#200: FILE: test.c:12:
+               struct timeval __tv;                            \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#200: FILE: test.c:12:
+               struct timeval __tv;                            \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#201: FILE: test.c:13:
+               do_gettimeofday(&__tv);                         \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#201: FILE: test.c:13:
+               do_gettimeofday(&__tv);                         \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#202: FILE: test.c:14:
+               (t) = timeval_to_ns(&__tv) - (t);               \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#202: FILE: test.c:14:
+               (t) = timeval_to_ns(&__tv) - (t);               \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#203: FILE: test.c:15:
+       })$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#211: FILE: test.c:23:
+       halt = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#216: FILE: test.c:28:
+       if (bio->bi_size) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#216: FILE: test.c:28:
+       if (bio->bi_size) {
+               return 1;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#216: FILE: test.c:28:
+       if (bio->bi_size) {
+               return 1;
+       }

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#217: FILE: test.c:29:
+               return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#217: FILE: test.c:29:
+               return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#218: FILE: test.c:30:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#220: FILE: test.c:32:
+       if (error || !test_bit(BIO_UPTODATE, &bio->bi_flags)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#220: FILE: test.c:32:
+       if (error || !test_bit(BIO_UPTODATE, &bio->bi_flags)) {
+               atomic_inc(&errors);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#220: FILE: test.c:32:
+       if (error || !test_bit(BIO_UPTODATE, &bio->bi_flags)) {
+               atomic_inc(&errors);
+       }

ERROR:CODE_INDENT: code indent should use tabs where possible
#221: FILE: test.c:33:
+               atomic_inc(&errors);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#221: FILE: test.c:33:
+               atomic_inc(&errors);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#222: FILE: test.c:34:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#224: FILE: test.c:36:
+       if (atomic_dec_and_test(&busy)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#224: FILE: test.c:36:
+       if (atomic_dec_and_test(&busy)) {
+               wake_up(&wait);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#224: FILE: test.c:36:
+       if (atomic_dec_and_test(&busy)) {
+               wake_up(&wait);
+       }

ERROR:CODE_INDENT: code indent should use tabs where possible
#225: FILE: test.c:37:
+               wake_up(&wait);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#225: FILE: test.c:37:
+               wake_up(&wait);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#226: FILE: test.c:38:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#228: FILE: test.c:40:
+       return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#232: FILE: test.c:44:
+            struct page *zero, unsigned long expires, int step)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#232: FILE: test.c:44:
+int do_write(struct block_device *bdev,
+            struct page *zero, unsigned long expires, int step)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#232: FILE: test.c:44:
+            struct page *zero, unsigned long expires, int step)$

CHECK:SPACING: No space is necessary after a cast
#234: FILE: test.c:46:
+       DEFINE_TIMER(timer, stop_write, expires, (unsigned long) NULL);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#234: FILE: test.c:46:
+       DEFINE_TIMER(timer, stop_write, expires, (unsigned long) NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#235: FILE: test.c:47:
+       int i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#237: FILE: test.c:49:
+       add_timer(&timer);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#239: FILE: test.c:51:
+       for (halt = i = 0; !halt; i++) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#239: FILE: test.c:51:
+       for (halt = i = 0; !halt; i++) {
+               struct bio *bio = bio_alloc(GFP_NOIO, 1);

ERROR:CODE_INDENT: code indent should use tabs where possible
#240: FILE: test.c:52:
+               struct bio *bio = bio_alloc(GFP_NOIO, 1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#240: FILE: test.c:52:
+               struct bio *bio = bio_alloc(GFP_NOIO, 1);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#241: FILE: test.c:53:
+               if (bio) {$

WARNING:LINE_SPACING: Missing a blank line after declarations
#241: FILE: test.c:53:
+               struct bio *bio = bio_alloc(GFP_NOIO, 1);
+               if (bio) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#241: FILE: test.c:53:
+               if (bio) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#241: FILE: test.c:53:
+               if (bio) {
+                       atomic_inc(&busy);

ERROR:CODE_INDENT: code indent should use tabs where possible
#242: FILE: test.c:54:
+                       atomic_inc(&busy);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#242: FILE: test.c:54:
+                       atomic_inc(&busy);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#244: FILE: test.c:56:
+                       bio->bi_bdev = bdev;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#244: FILE: test.c:56:
+                       bio->bi_bdev = bdev;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#245: FILE: test.c:57:
+                       bio->bi_sector = step * i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#245: FILE: test.c:57:
+                       bio->bi_sector = step * i;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#246: FILE: test.c:58:
+                       bio_add_page(bio, zero, PAGE_SIZE, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#246: FILE: test.c:58:
+                       bio_add_page(bio, zero, PAGE_SIZE, 0);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#247: FILE: test.c:59:
+                       bio->bi_end_io = endio;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#247: FILE: test.c:59:
+                       bio->bi_end_io = endio;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#248: FILE: test.c:60:
+                       submit_bio((1 << BIO_RW) | (1 << BIO_RW_SYNC), bio);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#248: FILE: test.c:60:
+                       submit_bio((1 << BIO_RW) | (1 << BIO_RW_SYNC), bio);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#249: FILE: test.c:61:
+               } else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#249: FILE: test.c:61:
+               } else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#249: FILE: test.c:61:
+               } else {
+                       atomic_inc(&errors);

ERROR:CODE_INDENT: code indent should use tabs where possible
#250: FILE: test.c:62:
+                       atomic_inc(&errors);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#250: FILE: test.c:62:
+                       atomic_inc(&errors);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#251: FILE: test.c:63:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#251: FILE: test.c:63:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#252: FILE: test.c:64:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#254: FILE: test.c:66:
+       wait_event(wait, !atomic_read(&busy));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#256: FILE: test.c:68:
+       return i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#261: FILE: test.c:73:
+       struct page *zero;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#263: FILE: test.c:75:
+       s64 time;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#264: FILE: test.c:76:
+       unsigned long space;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#265: FILE: test.c:77:
+       int cycles;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#267: FILE: test.c:79:
+       zero = alloc_page(GFP_KERNEL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#268: FILE: test.c:80:
+       if (!zero) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#268: FILE: test.c:80:
+       if (!zero) {
+               return -ENOMEM;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#268: FILE: test.c:80:
+       if (!zero) {
+               return -ENOMEM;
+       }

ERROR:CODE_INDENT: code indent should use tabs where possible
#269: FILE: test.c:81:
+               return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#269: FILE: test.c:81:
+               return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#270: FILE: test.c:82:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#272: FILE: test.c:84:
+       memset(kmap(zero), 0, PAGE_SIZE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#273: FILE: test.c:85:
+       kunmap(zero);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#275: FILE: test.c:87:
+       atomic_set(&errors, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#276: FILE: test.c:88:
+       atomic_set(&busy, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#278: FILE: test.c:90:
+       START(time);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#280: FILE: test.c:92:
+       cycles = do_write(bdev, zero, jiffies + secs * HZ, step);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#282: FILE: test.c:94:
+       STOP(time);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#284: FILE: test.c:96:
+       put_page(zero);$

CHECK:SPACING: No space is necessary after a cast
#286: FILE: test.c:98:
+       (void) do_div(time, 1000000);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#286: FILE: test.c:98:
+       (void) do_div(time, 1000000);$

CHECK:SPACING: No space is necessary after a cast
#288: FILE: test.c:100:
+       space = ((unsigned long) cycles * 1000 * (PAGE_SIZE >> 10)) >> 10;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#288: FILE: test.c:100:
+       space = ((unsigned long) cycles * 1000 * (PAGE_SIZE >> 10)) >> 10;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#290: FILE: test.c:102:
+       printk("%d\t\t%d\t\t%lu\t\t%lu\t\t%lu.%-3lu\n",$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#290: FILE: test.c:102:
+       printk("%d\t\t%d\t\t%lu\t\t%lu\t\t%lu.%-3lu\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#291: FILE: test.c:103:
+              step, cycles, space / 1000,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#291: FILE: test.c:103:
+              step, cycles, space / 1000,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#292: FILE: test.c:104:
+              (unsigned long ) time / 1000,$

CHECK:SPACING: No space is necessary after a cast
#292: FILE: test.c:104:
+              (unsigned long ) time / 1000,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#292: FILE: test.c:104:
+              (unsigned long ) time / 1000,$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#292: FILE: test.c:104:
+              (unsigned long ) time / 1000,

ERROR:CODE_INDENT: code indent should use tabs where possible
#293: FILE: test.c:105:
+              space / (unsigned long) time,$

CHECK:SPACING: No space is necessary after a cast
#293: FILE: test.c:105:
+              space / (unsigned long) time,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#293: FILE: test.c:105:
+              space / (unsigned long) time,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#294: FILE: test.c:106:
+              space % (unsigned long) time);$

CHECK:SPACING: No space is necessary after a cast
#294: FILE: test.c:106:
+              space % (unsigned long) time);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#294: FILE: test.c:106:
+              space % (unsigned long) time);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#296: FILE: test.c:108:
+       return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#301: FILE: test.c:113:
+       struct block_device *bdev;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#302: FILE: test.c:114:
+       int i, err;$

WARNING:TYPO_SPELLING: 'hda' may be misspelled - perhaps 'had'?
#304: FILE: test.c:116:
+       bdev = open_bdev_excl("/dev/hda", 0, THIS_MODULE);
                                    ^^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#304: FILE: test.c:116:
+       bdev = open_bdev_excl("/dev/hda", 0, THIS_MODULE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#305: FILE: test.c:117:
+       if (IS_ERR(bdev)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#305: FILE: test.c:117:
+       if (IS_ERR(bdev)) {
+               printk("device won't open!\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#306: FILE: test.c:118:
+               printk("device won't open!\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#306: FILE: test.c:118:
+               printk("device won't open!\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#306: FILE: test.c:118:
+               printk("device won't open!\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#307: FILE: test.c:119:
+               return PTR_ERR(bdev);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#307: FILE: test.c:119:
+               return PTR_ERR(bdev);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#308: FILE: test.c:120:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#310: FILE: test.c:122:
+       printk("STEP (hs)\tCYCLES\t\tWRITTEN (MB)\tELAPSED (s)\tSPEED (MB/s)\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#310: FILE: test.c:122:
+       printk("STEP (hs)\tCYCLES\t\tWRITTEN (MB)\tELAPSED (s)\tSPEED (MB/s)\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#312: FILE: test.c:124:
+       for (i = 1; i < 16; i++) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#312: FILE: test.c:124:
+       for (i = 1; i < 16; i++) {
+               err = write(bdev, 3, i);

ERROR:CODE_INDENT: code indent should use tabs where possible
#313: FILE: test.c:125:
+               err = write(bdev, 3, i);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#313: FILE: test.c:125:
+               err = write(bdev, 3, i);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#314: FILE: test.c:126:
+               if (err < 0) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#314: FILE: test.c:126:
+               if (err < 0) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#314: FILE: test.c:126:
+               if (err < 0) {
+                       printk("%d\t-\t\t-\t\t-\t\t-\n", i);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#314: FILE: test.c:126:
+               if (err < 0) {
+                       printk("%d\t-\t\t-\t\t-\t\t-\n", i);
+               }

ERROR:CODE_INDENT: code indent should use tabs where possible
#315: FILE: test.c:127:
+                       printk("%d\t-\t\t-\t\t-\t\t-\n", i);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#315: FILE: test.c:127:
+                       printk("%d\t-\t\t-\t\t-\t\t-\n", i);$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#315: FILE: test.c:127:
+                       printk("%d\t-\t\t-\t\t-\t\t-\n", i);

ERROR:CODE_INDENT: code indent should use tabs where possible
#316: FILE: test.c:128:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#316: FILE: test.c:128:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#317: FILE: test.c:129:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#319: FILE: test.c:131:
+       for (; i < 1024; i <<= 1) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#319: FILE: test.c:131:
+       for (; i < 1024; i <<= 1) {
+               err = write(bdev, 3, i);

ERROR:CODE_INDENT: code indent should use tabs where possible
#320: FILE: test.c:132:
+               err = write(bdev, 3, i);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#320: FILE: test.c:132:
+               err = write(bdev, 3, i);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#321: FILE: test.c:133:
+               if (err < 0) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#321: FILE: test.c:133:
+               if (err < 0) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#321: FILE: test.c:133:
+               if (err < 0) {
+                       printk("%d\t-\t\t-\t\t-\t\t-\n", i);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#321: FILE: test.c:133:
+               if (err < 0) {
+                       printk("%d\t-\t\t-\t\t-\t\t-\n", i);
+               }

ERROR:CODE_INDENT: code indent should use tabs where possible
#322: FILE: test.c:134:
+                       printk("%d\t-\t\t-\t\t-\t\t-\n", i);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#322: FILE: test.c:134:
+                       printk("%d\t-\t\t-\t\t-\t\t-\n", i);$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#322: FILE: test.c:134:
+                       printk("%d\t-\t\t-\t\t-\t\t-\n", i);

ERROR:CODE_INDENT: code indent should use tabs where possible
#323: FILE: test.c:135:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#323: FILE: test.c:135:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#324: FILE: test.c:136:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#326: FILE: test.c:138:
+       close_bdev_excl(bdev);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#328: FILE: test.c:140:
+       return -EIO;$

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.40755.commit.fb60fdc260e09d57a8646a64e64daf04fd47c1ff total: 37 errors, 114 warnings, 8 checks, 145 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.40755.commit.fb60fdc260e09d57a8646a64e64daf04fd47c1ff has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
