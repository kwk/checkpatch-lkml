WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#92: FILE: fs/proc/base.c:1776:
+	REG("pagemaps",   S_IRUGO, pagemaps),

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#100: FILE: fs/proc/base.c:2051:
+	REG("pagemaps",  S_IRUGO, pagemaps),

WARNING:CONST_STRUCT: struct file_operations should normally be const
#116: FILE: fs/proc/internal.h:44:
+extern struct file_operations proc_pagemaps_operations;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#129: FILE: fs/proc/task_mmu.c:433:
+static void pagemaps_pte_range(struct vm_area_struct *vma, pmd_t *pmd,
+				unsigned long addr, unsigned long end,

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#133: FILE: fs/proc/task_mmu.c:437:
+	spinlock_t *ptl;

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#159: FILE: fs/proc/task_mmu.c:463:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#162: FILE: fs/proc/task_mmu.c:466:
+static inline void pagemaps_pmd_range(struct vm_area_struct *vma, pud_t *pud,
+				unsigned long addr, unsigned long end,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#178: FILE: fs/proc/task_mmu.c:482:
+static inline void pagemaps_pud_range(struct vm_area_struct *vma, pgd_t *pgd,
+				unsigned long addr, unsigned long end,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#194: FILE: fs/proc/task_mmu.c:498:
+static inline void pagemaps_pgd_range(struct vm_area_struct *vma,
+				unsigned long addr, unsigned long end,

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#219: FILE: fs/proc/task_mmu.c:523:
+static struct seq_operations proc_pid_pagemaps_op = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#231: FILE: fs/proc/task_mmu.c:535:
+struct file_operations proc_pagemaps_operations = {

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.11134.commit.e08677879dd22f5df885ddbf5d4b0b3b99ab454e total: 0 errors, 5 warnings, 6 checks, 155 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.11134.commit.e08677879dd22f5df885ddbf5d4b0b3b99ab454e has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
