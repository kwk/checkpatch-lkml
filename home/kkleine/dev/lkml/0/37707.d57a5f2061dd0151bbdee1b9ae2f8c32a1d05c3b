WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#44: 
OpenPGP public key:              http://krystal.dyndns.org:8080/key/compudj.gpg

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#55: FILE: include/linux/ltt-facilities.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#56: FILE: include/linux/ltt-facilities.h:2:
+ * linux/include/linux/ltt-facilities.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#76: FILE: include/linux/ltt-facilities.h:22:
+#include <asm/atomic.h>

WARNING:NEW_TYPEDEFS: do not add new typedefs
#102: FILE: include/linux/ltt-facilities.h:48:
+typedef unsigned long ltt_facility_t;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#135: FILE: include/linux/ltt-facilities.h:81:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#137: FILE: include/linux/ltt-facilities.h:83:
+int ltt_facility_register(enum ltt_facility_type type,
+		const char *name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#147: FILE: include/linux/ltt-facilities.h:93:
+int ltt_facility_verify(enum ltt_facility_type type,
+		const char *name,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#171: FILE: kernel/ltt-facilities.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#184: FILE: kernel/ltt-facilities.c:14:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#203: FILE: kernel/ltt-facilities.c:33:
+ * User ltt_facility_verify for this. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#205: FILE: kernel/ltt-facilities.c:35:
+int ltt_facility_register(enum ltt_facility_type type,
+		const char *name,

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#216: FILE: kernel/ltt-facilities.c:46:
+	int found=0;
 	         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#217: FILE: kernel/ltt-facilities.c:47:
+  $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#217: FILE: kernel/ltt-facilities.c:47:
+  $

ERROR:SPACING: space required before the open parenthesis '('
#219: FILE: kernel/ltt-facilities.c:49:
+	if(type == LTT_FACILITY_TYPE_KERNEL &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#220: FILE: kernel/ltt-facilities.c:50:
+	if(type == LTT_FACILITY_TYPE_KERNEL &&
+			strncmp(name, "core", sizeof("core")) == 0) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#224: FILE: kernel/ltt-facilities.c:54:
+		 * find an empty slot */

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#225: FILE: kernel/ltt-facilities.c:55:
+		chk_fac_id = fac_id = checksum % LTT_MAX_NUM_FACILITIES;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:SPACING: space required before the open parenthesis '('
#227: FILE: kernel/ltt-facilities.c:57:
+			if(atomic_read(&facilities[fac_id].ref) == 0) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#231: FILE: kernel/ltt-facilities.c:61:
+			fac_id = (fac_id+1) % LTT_MAX_NUM_FACILITIES;
 			                ^

ERROR:SPACING: space required before the open parenthesis '('
#232: FILE: kernel/ltt-facilities.c:62:
+		} while(fac_id != chk_fac_id);

ERROR:SPACING: space required before the open parenthesis '('
#234: FILE: kernel/ltt-facilities.c:64:
+		if(!found) {

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#239: FILE: kernel/ltt-facilities.c:69:
+	switch(type) {
+		case LTT_FACILITY_TYPE_USER:
[...]
+		case LTT_FACILITY_TYPE_KERNEL:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: space required before the open parenthesis '('
#239: FILE: kernel/ltt-facilities.c:69:
+	switch(type) {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#241: FILE: kernel/ltt-facilities.c:71:
+			if(strncmp(name, "user_", sizeof("user_")-1) != 0) {
 			                                         ^

ERROR:SPACING: space required before the open parenthesis '('
#241: FILE: kernel/ltt-facilities.c:71:
+			if(strncmp(name, "user_", sizeof("user_")-1) != 0) {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#249: FILE: kernel/ltt-facilities.c:79:
+	strncpy(facilities[fac_id].name, name, FACNAME_LEN-1);
 	                                                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#250: FILE: kernel/ltt-facilities.c:80:
+	facilities[fac_id].name[FACNAME_LEN-1] = '\0';
 	                                   ^

ERROR:SPACING: space required before the open parenthesis '('
#260: FILE: kernel/ltt-facilities.c:90:
+	if(atomic_read(&facilities[fac_id].ref) == 0) {

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#262: FILE: kernel/ltt-facilities.c:92:
+		trace_core_facility_load(

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#282: FILE: kernel/ltt-facilities.c:112:
+ * If the facility is already registered, increment its refcount. */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#284: FILE: kernel/ltt-facilities.c:114:
+int ltt_facility_verify(enum ltt_facility_type type,
+		const char *name,

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#295: FILE: kernel/ltt-facilities.c:125:
+	int found=0;
 	         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#296: FILE: kernel/ltt-facilities.c:126:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#298: FILE: kernel/ltt-facilities.c:128:
+^Iif(type == LTT_FACILITY_TYPE_KERNEL && $

ERROR:SPACING: space required before the open parenthesis '('
#298: FILE: kernel/ltt-facilities.c:128:
+	if(type == LTT_FACILITY_TYPE_KERNEL && 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#299: FILE: kernel/ltt-facilities.c:129:
+	if(type == LTT_FACILITY_TYPE_KERNEL && 
+			strncmp(name, "core", sizeof("core")) == 0) {

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#303: FILE: kernel/ltt-facilities.c:133:
+		switch(type) {
+			case LTT_FACILITY_TYPE_USER:
[...]
+			case LTT_FACILITY_TYPE_KERNEL:

ERROR:SPACING: space required before the open parenthesis '('
#303: FILE: kernel/ltt-facilities.c:133:
+		switch(type) {

ERROR:SPACING: space required before the open parenthesis '('
#305: FILE: kernel/ltt-facilities.c:135:
+				if(strncmp(name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#306: FILE: kernel/ltt-facilities.c:136:
+				if(strncmp(name,
+					"user_", sizeof("user_")-1) != 0) {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#306: FILE: kernel/ltt-facilities.c:136:
+					"user_", sizeof("user_")-1) != 0) {
 					                        ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#315: FILE: kernel/ltt-facilities.c:145:
+		chk_fac_id = fac_id = checksum % LTT_MAX_NUM_FACILITIES;

ERROR:SPACING: space required before the open parenthesis '('
#317: FILE: kernel/ltt-facilities.c:147:
+			if(facilities[fac_id].checksum == checksum) {

ERROR:SPACING: space required before the open parenthesis '('
#319: FILE: kernel/ltt-facilities.c:149:
+				if((atomic_read(&facilities[fac_id].ref) > 0) &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#320: FILE: kernel/ltt-facilities.c:150:
+				if((atomic_read(&facilities[fac_id].ref) > 0) &&
+					strncmp(facilities[fac_id].name,

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#321: FILE: kernel/ltt-facilities.c:151:
+						name, FACNAME_LEN-1) == 0 &&
 						                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#335: FILE: kernel/ltt-facilities.c:165:
+			fac_id = (fac_id+1) % LTT_MAX_NUM_FACILITIES;
 			                ^

ERROR:SPACING: space required before the open parenthesis '('
#336: FILE: kernel/ltt-facilities.c:166:
+		} while(fac_id != chk_fac_id);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#337: FILE: kernel/ltt-facilities.c:167:
+^I^I$

ERROR:SPACING: space required before the open parenthesis '('
#338: FILE: kernel/ltt-facilities.c:168:
+		if(!found) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#349: FILE: kernel/ltt-facilities.c:179:
+
+

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#354: FILE: kernel/ltt-facilities.c:184:
+	alignment = sizeof(void*);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#361: FILE: kernel/ltt-facilities.c:191:
+			sizeof(int), sizeof(long), sizeof(void*),

ERROR:SPACING: space required before the open parenthesis '('
#375: FILE: kernel/ltt-facilities.c:205:
+	if(facility_id >= LTT_MAX_NUM_FACILITIES) return -EPERM;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#375: FILE: kernel/ltt-facilities.c:205:
+	if(facility_id >= LTT_MAX_NUM_FACILITIES) return -EPERM;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#376: FILE: kernel/ltt-facilities.c:206:
+^I$

ERROR:SPACING: space required before the open parenthesis '('
#378: FILE: kernel/ltt-facilities.c:208:
+	if(atomic_read(&facilities[facility_id].ref) == 0) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#382: FILE: kernel/ltt-facilities.c:212:
+	printk(KERN_DEBUG "LTT unregister facility %lu\n", facility_id);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#386: FILE: kernel/ltt-facilities.c:216:
+	 * RCU coherent. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#393: FILE: kernel/ltt-facilities.c:223:
+	 * ltt_facility_free_unused()). */

ERROR:SPACING: space required before the open parenthesis '('
#394: FILE: kernel/ltt-facilities.c:224:
+	if(list_empty(&ltt_traces.head))

ERROR:SPACING: space required before the open parenthesis '('
#395: FILE: kernel/ltt-facilities.c:225:
+		if(atomic_read(&facilities[facility_id].ref) == 1) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#407: FILE: kernel/ltt-facilities.c:237:
+	 * FIXME : this unload could go away. */

ERROR:SPACING: space required before the open parenthesis '('
#408: FILE: kernel/ltt-facilities.c:238:
+	if(freed)

ERROR:SPACING: space required before the open parenthesis '('
#418: FILE: kernel/ltt-facilities.c:248:
+	if(atomic_read(&facilities[fac_id].ref) == 0) return 0;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#418: FILE: kernel/ltt-facilities.c:248:
+	if(atomic_read(&facilities[fac_id].ref) == 0) return 0;

ERROR:SPACING: space required before the open parenthesis '('
#419: FILE: kernel/ltt-facilities.c:249:
+	if(facilities[fac_id].type == LTT_FACILITY_TYPE_KERNEL) return 0;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#419: FILE: kernel/ltt-facilities.c:249:
+	if(facilities[fac_id].type == LTT_FACILITY_TYPE_KERNEL) return 0;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#430: FILE: kernel/ltt-facilities.c:260:
+^I$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#432: FILE: kernel/ltt-facilities.c:262:
+	for(fac_id=0;fac_id<LTT_MAX_NUM_FACILITIES;fac_id++)
 	          ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#432: FILE: kernel/ltt-facilities.c:262:
+	for(fac_id=0;fac_id<LTT_MAX_NUM_FACILITIES;fac_id++)
 	            ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#432: FILE: kernel/ltt-facilities.c:262:
+	for(fac_id=0;fac_id<LTT_MAX_NUM_FACILITIES;fac_id++)
 	                   ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#432: FILE: kernel/ltt-facilities.c:262:
+	for(fac_id=0;fac_id<LTT_MAX_NUM_FACILITIES;fac_id++)
 	                                          ^

ERROR:SPACING: space required before the open parenthesis '('
#432: FILE: kernel/ltt-facilities.c:262:
+	for(fac_id=0;fac_id<LTT_MAX_NUM_FACILITIES;fac_id++)

ERROR:SPACING: space required before the open parenthesis '('
#433: FILE: kernel/ltt-facilities.c:263:
+		if(atomic_read(&facilities[fac_id].ref) == 1)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#446: FILE: kernel/ltt-facilities.c:276:
+	pointer_size = sizeof(void*);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#450: FILE: kernel/ltt-facilities.c:280:
+	for(fac_id=0;fac_id<LTT_MAX_NUM_FACILITIES;fac_id++) {
 	          ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#450: FILE: kernel/ltt-facilities.c:280:
+	for(fac_id=0;fac_id<LTT_MAX_NUM_FACILITIES;fac_id++) {
 	            ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#450: FILE: kernel/ltt-facilities.c:280:
+	for(fac_id=0;fac_id<LTT_MAX_NUM_FACILITIES;fac_id++) {
 	                   ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#450: FILE: kernel/ltt-facilities.c:280:
+	for(fac_id=0;fac_id<LTT_MAX_NUM_FACILITIES;fac_id++) {
 	                                          ^

ERROR:SPACING: space required before the open parenthesis '('
#450: FILE: kernel/ltt-facilities.c:280:
+	for(fac_id=0;fac_id<LTT_MAX_NUM_FACILITIES;fac_id++) {

ERROR:SPACING: space required before the open parenthesis '('
#451: FILE: kernel/ltt-facilities.c:281:
+		if(atomic_read(&facilities[fac_id].ref) > 1) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#453: FILE: kernel/ltt-facilities.c:283:
+			printk(KERN_DEBUG "Dumping facility %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#454: FILE: kernel/ltt-facilities.c:284:
+			printk(KERN_DEBUG "Dumping facility %s\n",
+					facility->name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#456: FILE: kernel/ltt-facilities.c:286:
+			trace_core_state_dump_facility_load(trace,
+					facility->name,

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#469: FILE: kernel/ltt-facilities.c:299:
+EXPORT_SYMBOL(ltt_facility_kernel_register);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#470: FILE: kernel/ltt-facilities.c:300:
+EXPORT_SYMBOL(ltt_facility_ref);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#471: FILE: kernel/ltt-facilities.c:301:
+EXPORT_SYMBOL(ltt_facility_unregister);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#472: FILE: kernel/ltt-facilities.c:302:
+EXPORT_SYMBOL(ltt_facility_free_unused);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#473: FILE: kernel/ltt-facilities.c:303:
+EXPORT_SYMBOL(ltt_facility_state_dump);

WARNING:LINE_SPACING: Missing a blank line after declarations
#478: FILE: kernel/ltt-facilities.c:308:
+	int i;
+	printk(KERN_INFO "LTT : ltt-facilities init\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#478: FILE: kernel/ltt-facilities.c:308:
+	printk(KERN_INFO "LTT : ltt-facilities init\n");

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#481: FILE: kernel/ltt-facilities.c:311:
+	for(i=0; i<LTT_MAX_NUM_FACILITIES; i++) {
 	     ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#481: FILE: kernel/ltt-facilities.c:311:
+	for(i=0; i<LTT_MAX_NUM_FACILITIES; i++) {
 	          ^

ERROR:SPACING: space required before the open parenthesis '('
#481: FILE: kernel/ltt-facilities.c:311:
+	for(i=0; i<LTT_MAX_NUM_FACILITIES; i++) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#481: FILE: kernel/ltt-facilities.c:311:
+	for(i=0; i<LTT_MAX_NUM_FACILITIES; i++) {
+		atomic_set(&facilities[i].ref, 0);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#484: FILE: kernel/ltt-facilities.c:314:
+^I$

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#487: FILE: kernel/ltt-facilities.c:317:
+__initcall(ltt_facilities_init);

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.37707.commit.d57a5f2061dd0151bbdee1b9ae2f8c32a1d05c3b total: 54 errors, 24 warnings, 22 checks, 431 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.37707.commit.d57a5f2061dd0151bbdee1b9ae2f8c32a1d05c3b has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
