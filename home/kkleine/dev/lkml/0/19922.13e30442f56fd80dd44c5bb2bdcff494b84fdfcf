CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#51: 
Signed-off-by: Sébastien Dugué <sebastien.dugue@bull.net>
                ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#62: FILE: include/linux/signal.h:244:
+extern struct task_struct * good_sigevent(sigevent_t *);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#62: FILE: include/linux/signal.h:244:
+extern struct task_struct * good_sigevent(sigevent_t *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'sigevent_t *' should also have an identifier name
#62: FILE: include/linux/signal.h:244:
+extern struct task_struct * good_sigevent(sigevent_t *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#109: FILE: kernel/signal.c:1198:
+struct task_struct * good_sigevent(sigevent_t * event)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#109: FILE: kernel/signal.c:1198:
+struct task_struct * good_sigevent(sigevent_t * event)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#113: FILE: kernel/signal.c:1202:
+	if ((event->sigev_notify & SIGEV_THREAD_ID ) &&

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#113: FILE: kernel/signal.c:1202:
+	if ((event->sigev_notify & SIGEV_THREAD_ID ) &&

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#114: FILE: kernel/signal.c:1203:
+	if ((event->sigev_notify & SIGEV_THREAD_ID ) &&
+		(!(rtn = find_task_by_pid(event->sigev_notify_thread_id)) ||

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'event->sigev_signo <= 0'
#119: FILE: kernel/signal.c:1208:
+	if (((event->sigev_notify & ~SIGEV_THREAD_ID) != SIGEV_NONE) &&
+	    ((event->sigev_signo <= 0) || (event->sigev_signo > SIGRTMAX)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'event->sigev_signo > SIGRTMAX'
#119: FILE: kernel/signal.c:1208:
+	if (((event->sigev_notify & ~SIGEV_THREAD_ID) != SIGEV_NONE) &&
+	    ((event->sigev_signo <= 0) || (event->sigev_signo > SIGRTMAX)))

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.19922.commit.13e30442f56fd80dd44c5bb2bdcff494b84fdfcf total: 5 errors, 1 warnings, 5 checks, 60 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.19922.commit.13e30442f56fd80dd44c5bb2bdcff494b84fdfcf has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
