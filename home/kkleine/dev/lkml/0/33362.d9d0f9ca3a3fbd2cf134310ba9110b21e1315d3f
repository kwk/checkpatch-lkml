WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#44: FILE: arch/arm/Kconfig:752:
+config OMAP1_PM_CORE
+	tristate "OMAP1 PM Core"
+	depends POWEROP
+	help
+	This enables OMAP1 PM Core to control platform clocks/power via
+	PowerOP interface
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#70: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#75: FILE: arch/arm/mach-omap1/pm_core.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#76: FILE: arch/arm/mach-omap1/pm_core.c:2:
+ * arch/arm/mach-omap1/pm_core.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#82: FILE: arch/arm/mach-omap1/pm_core.c:8:
+ * Based on code by Todd Poynor, Matthew Locke, Dmitry Chigirev, and $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#98: FILE: arch/arm/mach-omap1/pm_core.c:24:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#99: FILE: arch/arm/mach-omap1/pm_core.c:25:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA$

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#121: FILE: arch/arm/mach-omap1/pm_core.c:47:
+#include <asm/pgtable.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/processor.h> instead of <asm/processor.h>
#122: FILE: arch/arm/mach-omap1/pm_core.c:48:
+#include <asm/processor.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/uaccess.h> instead of <asm/uaccess.h>
#123: FILE: arch/arm/mach-omap1/pm_core.c:49:
+#include <asm/uaccess.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#124: FILE: arch/arm/mach-omap1/pm_core.c:50:
+#include <asm/io.h>

CHECK:BIT_MACRO: Prefer using the BIT macro
#147: FILE: arch/arm/mach-omap1/pm_core.c:73:
+#define ULPD_MIN_MAX_REG (1 << 11)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#148: FILE: arch/arm/mach-omap1/pm_core.c:74:
+#define ULPD_DVS_ENABLE  (1 << 10)

CHECK:BIT_MACRO: Prefer using the BIT macro
#149: FILE: arch/arm/mach-omap1/pm_core.c:75:
+#define ULPD_LOW_PWR_REQ (1 << 1)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#153: FILE: arch/arm/mach-omap1/pm_core.c:79:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#156: FILE: arch/arm/mach-omap1/pm_core.c:82:
+ * implementation will be hided in the framework (along with $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#158: FILE: arch/arm/mach-omap1/pm_core.c:84:
+ */ $

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#162: FILE: arch/arm/mach-omap1/pm_core.c:88:
+};
+static struct voltage vhandle;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#179: FILE: arch/arm/mach-omap1/pm_core.c:105:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#180: FILE: arch/arm/mach-omap1/pm_core.c:106:
+ * auxiliary routines to get/set rate of various clocks $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#183: FILE: arch/arm/mach-omap1/pm_core.c:109:
+static long $

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#196: FILE: arch/arm/mach-omap1/pm_core.c:122:
+	return ret/1000;
 	          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#199: FILE: arch/arm/mach-omap1/pm_core.c:125:
+static long $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#215: FILE: arch/arm/mach-omap1/pm_core.c:141:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#216: FILE: arch/arm/mach-omap1/pm_core.c:142:
+ * auxiliary routines to get/set rate voltages $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#219: FILE: arch/arm/mach-omap1/pm_core.c:145:
+static long $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#234: FILE: arch/arm/mach-omap1/pm_core.c:160:
+#endif /* VOLTAGE_FRAMEWORK */^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#238: FILE: arch/arm/mach-omap1/pm_core.c:164:
+static long $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#259: FILE: arch/arm/mach-omap1/pm_core.c:185:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#260: FILE: arch/arm/mach-omap1/pm_core.c:186:
+^I * Let's do some upfront error checking. If we fail any of these, $

WARNING:TYPO_SPELLING: 'withing' may be misspelled - perhaps 'within'?
#264: FILE: arch/arm/mach-omap1/pm_core.c:190:
+	 * parameters are withing ranges.
 	                  ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'sycn' may be misspelled - perhaps 'sync'?
#267: FILE: arch/arm/mach-omap1/pm_core.c:193:
+	 * are consistent in regard to clock modes (fully sycn/scalable sync/
 	                                                  ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!opt"
#270: FILE: arch/arm/mach-omap1/pm_core.c:196:
+	if (opt == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#274: FILE: arch/arm/mach-omap1/pm_core.c:200:
+^Iif ((opt->cpu_vltg != -1) && ((opt->cpu_vltg != V_CORE_LOW) && $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'opt->cpu_vltg != V_CORE_LOW'
#274: FILE: arch/arm/mach-omap1/pm_core.c:200:
+	if ((opt->cpu_vltg != -1) && ((opt->cpu_vltg != V_CORE_LOW) && 
+	    (opt->cpu_vltg != V_CORE_HIGH))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'opt->cpu_vltg != V_CORE_HIGH'
#274: FILE: arch/arm/mach-omap1/pm_core.c:200:
+	if ((opt->cpu_vltg != -1) && ((opt->cpu_vltg != V_CORE_LOW) && 
+	    (opt->cpu_vltg != V_CORE_HIGH))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#275: FILE: arch/arm/mach-omap1/pm_core.c:201:
+	if ((opt->cpu_vltg != -1) && ((opt->cpu_vltg != V_CORE_LOW) && 
+	    (opt->cpu_vltg != V_CORE_HIGH))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#276: FILE: arch/arm/mach-omap1/pm_core.c:202:
+		printk(KERN_WARNING "%s: Core voltage can not be other"

WARNING:SPLIT_STRING: quoted string split across lines
#277: FILE: arch/arm/mach-omap1/pm_core.c:203:
+		printk(KERN_WARNING "%s: Core voltage can not be other"
+		       "than %dmV or %dmV\n"

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:MISSING_SPACE: break quoted strings at a space character
#277: FILE: arch/arm/mach-omap1/pm_core.c:203:
+		printk(KERN_WARNING "%s: Core voltage can not be other"
+		       "than %dmV or %dmV\n"

ERROR:TRAILING_WHITESPACE: trailing whitespace
#278: FILE: arch/arm/mach-omap1/pm_core.c:204:
+^I^I       "Core voltage %d out of range!", __FUNCTION__, $

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#278: FILE: arch/arm/mach-omap1/pm_core.c:204:
+		       "Core voltage %d out of range!", __FUNCTION__, 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#290: FILE: arch/arm/mach-omap1/pm_core.c:216:
+/* REVISIT: with the current approach which allows only subset of platform $

WARNING:LONG_LINE_COMMENT: line length of 110 exceeds 100 columns
#294: FILE: arch/arm/mach-omap1/pm_core.c:220:
+ * with values inherited from current operating point and resulting full set of  * power parameters may appear

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:TYPO_SPELLING: 'upto' may be misspelled - perhaps 'up to'?
#296: FILE: arch/arm/mach-omap1/pm_core.c:222:
+ * The are two options. First one is to leave it upto to an upper layer to 
                                                  ^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#296: FILE: arch/arm/mach-omap1/pm_core.c:222:
+ * The are two options. First one is to leave it upto to an upper layer to $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#297: FILE: arch/arm/mach-omap1/pm_core.c:223:
+ * provide correct resulting operating point regadless of how many power $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#299: FILE: arch/arm/mach-omap1/pm_core.c:225:
+ * interface to a caller which in case of resulting point after replacement of $

WARNING:TYPO_SPELLING: 'upto' may be misspelled - perhaps 'up to'?
#302: FILE: arch/arm/mach-omap1/pm_core.c:228:
+ * implicit parameters set to complement of explicit parameter upto a valid
                                                                ^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#303: FILE: arch/arm/mach-omap1/pm_core.c:229:
+ * operating point instead of just inherited implicit parameters from the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#306: FILE: arch/arm/mach-omap1/pm_core.c:232:
+ * NOTE: implicit changes of various power parameters underneath PM Core $

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*opt)...) over kmalloc(sizeof(struct pm_core_point)...)
#318: FILE: arch/arm/mach-omap1/pm_core.c:244:
+	opt = kmalloc(sizeof(struct pm_core_point), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!opt"
#319: FILE: arch/arm/mach-omap1/pm_core.c:245:
+	if (opt == NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#321: FILE: arch/arm/mach-omap1/pm_core.c:247:
+^I/* $

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#327: FILE: arch/arm/mach-omap1/pm_core.c:253:
+	for (i = 0; i < size; i++)
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#329: FILE: arch/arm/mach-omap1/pm_core.c:255:
+^I^Istruct platform_pwr_param *p = $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#331: FILE: arch/arm/mach-omap1/pm_core.c:257:
+^I^Ip->store(opt, pwr_params[i].value); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#350: FILE: arch/arm/mach-omap1/pm_core.c:276:
+ */ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#363: FILE: arch/arm/mach-omap1/pm_core.c:289:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#364: FILE: arch/arm/mach-omap1/pm_core.c:290:
+^I * OMAP1 clock framework exports "smart" virtual clock "mpu". $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#368: FILE: arch/arm/mach-omap1/pm_core.c:294:
+^I * "mpu" clock rate needs to be set to desired cpu clock rate $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#371: FILE: arch/arm/mach-omap1/pm_core.c:297:
+^I * only those cpu frequencies defined in the rate_table[] which $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#374: FILE: arch/arm/mach-omap1/pm_core.c:300:
+^I * since CONFIG_OMAP_ARM_192MHZ provides the widest range of $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#375: FILE: arch/arm/mach-omap1/pm_core.c:301:
+^I * available frequencies which meet the above constraints we $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#376: FILE: arch/arm/mach-omap1/pm_core.c:302:
+^I * use this config for pm_core reference code    $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#383: FILE: arch/arm/mach-omap1/pm_core.c:309:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#384: FILE: arch/arm/mach-omap1/pm_core.c:310:
+^I * go through op parameters and set as requested if changed $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#388: FILE: arch/arm/mach-omap1/pm_core.c:314:
+^I * example for proper handling of coupled simultaneous clock and $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#389: FILE: arch/arm/mach-omap1/pm_core.c:315:
+^I * voltage changes  $

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#395: FILE: arch/arm/mach-omap1/pm_core.c:321:
+		if ((ret = set_vtg("v1", new->cpu_vltg)) != 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#399: FILE: arch/arm/mach-omap1/pm_core.c:325:
+		if ((ret = set_clk_rate("ck_dpll1", new->dpll)) != 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#403: FILE: arch/arm/mach-omap1/pm_core.c:329:
+		if ((ret = set_clk_rate("arm_ck", new->cpu)) != 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#407: FILE: arch/arm/mach-omap1/pm_core.c:333:
+		if ((ret = set_clk_rate("tc_ck", new->tc)) != 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#411: FILE: arch/arm/mach-omap1/pm_core.c:337:
+		if ((ret = set_clk_rate("dsp_ck", new->dsp)) != 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#415: FILE: arch/arm/mach-omap1/pm_core.c:341:
+		if ((ret = set_clk_rate("dspmmu_ck", new->dspmmu)) != 0)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#417: FILE: arch/arm/mach-omap1/pm_core.c:343:
+#endif /* PM_CORE_USE_MPU_CLOCK */ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#421: FILE: arch/arm/mach-omap1/pm_core.c:347:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#422: FILE: arch/arm/mach-omap1/pm_core.c:348:
+ * Fully determine the current machine-dependent operating point, and fill in $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#425: FILE: arch/arm/mach-omap1/pm_core.c:351:
+ * RETURN: -ENOENT on error; in error case one should not rely on any $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pwr_params == NULL'
#436: FILE: arch/arm/mach-omap1/pm_core.c:362:
+	if ((pwr_params == NULL) && (size != 0))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'size != 0'
#436: FILE: arch/arm/mach-omap1/pm_core.c:362:
+	if ((pwr_params == NULL) && (size != 0))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pwr_params"
#436: FILE: arch/arm/mach-omap1/pm_core.c:362:
+	if ((pwr_params == NULL) && (size != 0))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#444: FILE: arch/arm/mach-omap1/pm_core.c:370:
+^I^I} $

WARNING:LONG_LINE: line length of 139 exceeds 100 columns
#447: FILE: arch/arm/mach-omap1/pm_core.c:373:
+			p = to_platform_pwr_param(pwr_params[i].attr);					p->store(opt, pwr_params[i].value);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:TRAILING_WHITESPACE: trailing whitespace
#449: FILE: arch/arm/mach-omap1/pm_core.c:375:
+^I} $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#459: FILE: arch/arm/mach-omap1/pm_core.c:385:
+^I.set_point              = omap_pm_core_set_opt, $

WARNING:LINE_SPACING: Missing a blank line after declarations
#465: FILE: arch/arm/mach-omap1/pm_core.c:391:
+	int rc = 0;
+	if (md_opt == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!md_opt"
#465: FILE: arch/arm/mach-omap1/pm_core.c:391:
+	if (md_opt == NULL) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#466: FILE: arch/arm/mach-omap1/pm_core.c:392:
+		if ((*value = get_vtg("v1")) <= 0)

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#469: FILE: arch/arm/mach-omap1/pm_core.c:395:
+	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#469: FILE: arch/arm/mach-omap1/pm_core.c:395:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#481: FILE: arch/arm/mach-omap1/pm_core.c:407:
+	struct pm_core_point *opt = (struct pm_core_point *)md_opt;
+	opt->cpu_vltg = value;

WARNING:LINE_SPACING: Missing a blank line after declarations
#487: FILE: arch/arm/mach-omap1/pm_core.c:413:
+	int rc = 0;
+	if (md_opt == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!md_opt"
#487: FILE: arch/arm/mach-omap1/pm_core.c:413:
+	if (md_opt == NULL) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#488: FILE: arch/arm/mach-omap1/pm_core.c:414:
+		if ((*value = get_clk_rate("ck_dpll1")) <= 0)

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#491: FILE: arch/arm/mach-omap1/pm_core.c:417:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#491: FILE: arch/arm/mach-omap1/pm_core.c:417:
+	else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#502: FILE: arch/arm/mach-omap1/pm_core.c:428:
+	struct pm_core_point *opt = (struct pm_core_point *)md_opt;
+	opt->dpll = value;

WARNING:LINE_SPACING: Missing a blank line after declarations
#508: FILE: arch/arm/mach-omap1/pm_core.c:434:
+	int rc = 0;
+	if (md_opt == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!md_opt"
#508: FILE: arch/arm/mach-omap1/pm_core.c:434:
+	if (md_opt == NULL) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#509: FILE: arch/arm/mach-omap1/pm_core.c:435:
+		if ((*value = get_clk_rate("arm_ck")) <= 0)

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#512: FILE: arch/arm/mach-omap1/pm_core.c:438:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#512: FILE: arch/arm/mach-omap1/pm_core.c:438:
+	else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#523: FILE: arch/arm/mach-omap1/pm_core.c:449:
+	struct pm_core_point *opt = (struct pm_core_point *)md_opt;
+	opt->cpu = value;

WARNING:LINE_SPACING: Missing a blank line after declarations
#529: FILE: arch/arm/mach-omap1/pm_core.c:455:
+	int rc = 0;
+	if (md_opt == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!md_opt"
#529: FILE: arch/arm/mach-omap1/pm_core.c:455:
+	if (md_opt == NULL) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#530: FILE: arch/arm/mach-omap1/pm_core.c:456:
+		if ((*value = get_clk_rate("tc_ck")) <= 0)

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#533: FILE: arch/arm/mach-omap1/pm_core.c:459:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#533: FILE: arch/arm/mach-omap1/pm_core.c:459:
+	else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#544: FILE: arch/arm/mach-omap1/pm_core.c:470:
+	struct pm_core_point *opt = (struct pm_core_point *)md_opt;
+	opt->tc = value;

WARNING:LINE_SPACING: Missing a blank line after declarations
#550: FILE: arch/arm/mach-omap1/pm_core.c:476:
+	int rc = 0;
+	if (md_opt == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!md_opt"
#550: FILE: arch/arm/mach-omap1/pm_core.c:476:
+	if (md_opt == NULL) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#551: FILE: arch/arm/mach-omap1/pm_core.c:477:
+		if ((*value = get_clk_rate("armper_ck")) <= 0)

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#554: FILE: arch/arm/mach-omap1/pm_core.c:480:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#554: FILE: arch/arm/mach-omap1/pm_core.c:480:
+	else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#565: FILE: arch/arm/mach-omap1/pm_core.c:491:
+	struct pm_core_point *opt = (struct pm_core_point *)md_opt;
+	opt->per = value;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#583: FILE: arch/arm/mach-omap1/pm_core.c:509:
+int $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#611: FILE: include/asm-arm/arch-omap/pm_core.h:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#628: FILE: include/asm-arm/arch-omap/pm_core.h:18:
+/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#631: FILE: include/asm-arm/arch-omap/pm_core.h:21:
+ * -1 for any following fields indicates no change from current op $

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'point' - possible side-effects?
#645: FILE: include/asm-arm/arch-omap/pm_core.h:35:
+#define OMAP_PM_CORE_INIT_OPT(point)    \
+	do {                            \
+		(point)->cpu_vltg = -1; \
+		(point)->dpll = -1;     \
+		(point)->cpu = -1;      \
+		(point)->tc = -1;       \
+		(point)->per = -1;      \
+		(point)->dsp = -1;      \
+		(point)->dspmmu = -1;   \
+		(point)->lcd = -1;      \
+	} while (0)   

ERROR:TRAILING_WHITESPACE: trailing whitespace
#655: FILE: include/asm-arm/arch-omap/pm_core.h:45:
+^I} while (0)   $

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.33362.commit.d9d0f9ca3a3fbd2cf134310ba9110b21e1315d3f total: 68 errors, 26 warnings, 29 checks, 605 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.33362.commit.d9d0f9ca3a3fbd2cf134310ba9110b21e1315d3f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
