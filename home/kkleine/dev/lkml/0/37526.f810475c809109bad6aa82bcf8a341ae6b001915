CHECK:BIT_MACRO: Prefer using the BIT macro
#75: FILE: include/bc/beancounter.h:62:
+#define AB_HASH_SIZE		(1 << AB_HASH_BITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#79: FILE: include/bc/beancounter.h:66:
+#define BC_HASH_SIZE		(1 << BC_HASH_BITS)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#82: FILE: include/bc/beancounter.h:69:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#89: FILE: include/bc/beancounter.h:76:
+^Istruct hlist_head ^Iab_bucket[AB_HASH_SIZE];$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#90: FILE: include/bc/beancounter.h:77:
+^Ispinlock_t ^I^Iab_lock;$

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#90: FILE: include/bc/beancounter.h:77:
+	spinlock_t 		ab_lock;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#113: FILE: include/bc/beancounter.h:152:
+struct beancounter *beancounter_find_locked(struct aggr_beancounter *ab,
+						bcid_t id);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#116: FILE: include/bc/beancounter.h:155:
+struct beancounter *beancounter_relocate(struct aggr_beancounter *dst_ab,
+						struct aggr_beancounter *src_ab,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#158: FILE: kernel/bc/beancounter.c:21:
+static void init_beancounter_struct(struct aggr_beancounter *ab,
+					struct beancounter *bc, bcid_t id);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#160: FILE: kernel/bc/beancounter.c:23:
+static void init_aggr_beancounter_struct(struct aggr_beancounter *ab,
+						bcid_t id);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#164: FILE: kernel/bc/beancounter.c:26:
+struct beancounter ^Iinit_bc;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#178: FILE: kernel/bc/beancounter.c:40:
+static struct hlist_head ^Iab_hash[AB_HASH_SIZE];$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#179: FILE: kernel/bc/beancounter.c:41:
+spinlock_t ^I^I^Iab_hash_lock;$

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#179: FILE: kernel/bc/beancounter.c:41:
+spinlock_t 			ab_hash_lock;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#196: FILE: kernel/bc/beancounter.c:58:
+	hlist_for_each_entry (ab, pos, slot, hash)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pos"
#203: FILE: kernel/bc/beancounter.c:62:
+	if (pos != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "new_ab"
#207: FILE: kernel/bc/beancounter.c:66:
+		if (new_ab != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "new_ab"
#212: FILE: kernel/bc/beancounter.c:71:
+	if (new_ab != NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#221: FILE: kernel/bc/beancounter.c:80:
+	new_ab = kmem_cache_alloc(ab_cachep,
+			mask & BC_ALLOC_ATOMIC ? GFP_ATOMIC : GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_ab"
#222: FILE: kernel/bc/beancounter.c:81:
+	if (new_ab == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#245: FILE: kernel/bc/beancounter.c:109:
+struct beancounter *beancounter_find_locked(struct aggr_beancounter *ab,
+						bcid_t id)

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#271: FILE: kernel/bc/beancounter.c:128:
+	}
+	else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#288: FILE: kernel/bc/beancounter.c:143:
+	if (bc)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#290: FILE: kernel/bc/beancounter.c:145:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#313: FILE: kernel/bc/beancounter.c:165:
+static void double_ab_lock(struct aggr_beancounter *ab1,
+				struct aggr_beancounter *ab2,

CHECK:BRACES: braces {} should be used on all arms of this statement
#316: FILE: kernel/bc/beancounter.c:168:
+	if (ab1 > ab2) {
[...]
+	} else if (ab2 > ab1) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#322: FILE: kernel/bc/beancounter.c:174:
+	} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#323: FILE: kernel/bc/beancounter.c:175:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#328: FILE: kernel/bc/beancounter.c:179:
+static void double_ab_unlock(struct aggr_beancounter *ab1,
+				struct aggr_beancounter *ab2,

CHECK:BRACES: braces {} should be used on all arms of this statement
#331: FILE: kernel/bc/beancounter.c:182:
+	if (ab1 > ab2) {
[...]
+	} else if (ab2 > ab1) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#337: FILE: kernel/bc/beancounter.c:188:
+	} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#338: FILE: kernel/bc/beancounter.c:189:
+		BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#345: FILE: kernel/bc/beancounter.c:196:
+struct beancounter *beancounter_relocate(struct aggr_beancounter *dst_ab,
+						struct aggr_beancounter *src_ab,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#398: FILE: kernel/bc/beancounter.c:238:
+	if (!atomic_dec_and_lock_irqsave(&ab->ab_refcount,
+				&ab_hash_lock, flags))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#403: FILE: kernel/bc/beancounter.c:243:
+			printk("AB: %d has %lu of %s held on put", ab->ab_id,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#404: FILE: kernel/bc/beancounter.c:244:
+			printk("AB: %d has %lu of %s held on put", ab->ab_id,
+				ab->ab_parms[i].held, bc_rnames[i]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#443: FILE: kernel/bc/beancounter.c:387:
+static void init_beancounter_struct(struct aggr_beancounter *ab,
+					struct beancounter *bc, bcid_t id)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#453: FILE: kernel/bc/beancounter.c:397:
+static void init_aggr_beancounter_struct(struct aggr_beancounter *ab,
+						bcid_t ab_id)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#516: FILE: kernel/bc/beancounter.c:477:
+	ab_cachep = kmem_cache_create("aggr_beancounters",
+			sizeof(struct aggr_beancounter), 0,

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.37526.commit.f810475c809109bad6aa82bcf8a341ae6b001915 total: 1 errors, 9 warnings, 29 checks, 461 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.37526.commit.f810475c809109bad6aa82bcf8a341ae6b001915 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
