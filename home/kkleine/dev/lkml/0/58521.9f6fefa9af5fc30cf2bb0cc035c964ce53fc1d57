WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#97: FILE: kernel/user.c:38:
+EXPORT_SYMBOL_GPL(init_user_ns);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#105: FILE: kernel/user.c:95:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ns)...) over kmalloc(sizeof(struct user_namespace)...)
#117: FILE: kernel/user.c:107:
+	ns = kmalloc(sizeof(struct user_namespace), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:SPACING: space required before the open parenthesis '('
#124: FILE: kernel/user.c:114:
+		for(n = 0; n < UIDHASH_SZ; ++n)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#235: FILE: kernel/user.c:238:
+struct user_struct * alloc_uid(struct user_namespace *ns, uid_t uid)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#281: FILE: include/linux/user.h:1:
+#ifndef _LINUX_USER_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:BIT_MACRO: Prefer using the BIT macro
#287: FILE: include/linux/user.h:7:
+#define UIDHASH_SZ		(1 << UIDHASH_BITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#302: FILE: include/linux/user.h:22:
+extern int unshare_user_ns(unsigned long unshare_flags,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#304: FILE: include/linux/user.h:24:
+extern int copy_user_ns(int flags, struct task_struct *tsk);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#305: FILE: include/linux/user.h:25:
+extern void free_user_ns(struct kref *kref);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#313: FILE: include/linux/user.h:33:
+static inline int unshare_user_ns(unsigned long unshare_flags,
+			struct user_namespace **new_user)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#317: FILE: include/linux/user.h:37:
+}
+static inline int copy_user_ns(int flags, struct task_struct *tsk)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#321: FILE: include/linux/user.h:41:
+}
+static inline void put_user_ns(struct user_namespace *ns)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#409: FILE: include/linux/sched.h:542:
+extern struct user_struct *find_user(struct user_namespace *, uid_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct user_namespace *' should also have an identifier name
#409: FILE: include/linux/sched.h:542:
+extern struct user_struct *find_user(struct user_namespace *, uid_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'uid_t' should also have an identifier name
#409: FILE: include/linux/sched.h:542:
+extern struct user_struct *find_user(struct user_namespace *, uid_t);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#418: FILE: include/linux/sched.h:1209:
+extern struct user_struct * alloc_uid(struct user_namespace *, uid_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#418: FILE: include/linux/sched.h:1209:
+extern struct user_struct * alloc_uid(struct user_namespace *, uid_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct user_namespace *' should also have an identifier name
#418: FILE: include/linux/sched.h:1209:
+extern struct user_struct * alloc_uid(struct user_namespace *, uid_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'uid_t' should also have an identifier name
#418: FILE: include/linux/sched.h:1209:
+extern struct user_struct * alloc_uid(struct user_namespace *, uid_t);

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#430: FILE: init/Kconfig:240:
+config USER_NS
+	bool "User Namespaces"
+	default n
+	help
+	  Support user namespaces.  This allows containers, i.e.
+	  vservers, to use user namespaces to provide different
+	  user info for different servers.  If unsure, say N.
+

Kconfig symbols should have a help text which fully describes
it.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'who != current->uid'
#500: FILE: kernel/sys.c:547:
+				if ((who != current->uid) &&
+					!(user = find_user(current->nsproxy->user_ns, who)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#500: FILE: kernel/sys.c:547:
+				if ((who != current->uid) &&

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#501: FILE: kernel/sys.c:548:
+				if ((who != current->uid) &&
+					!(user = find_user(current->nsproxy->user_ns, who)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'who != current->uid'
#510: FILE: kernel/sys.c:606:
+				if ((who != current->uid) &&
+					!(user = find_user(current->nsproxy->user_ns, who)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#510: FILE: kernel/sys.c:606:
+				if ((who != current->uid) &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#511: FILE: kernel/sys.c:607:
+				if ((who != current->uid) &&
+					!(user = find_user(current->nsproxy->user_ns, who)))

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.58521.commit.9f6fefa9af5fc30cf2bb0cc035c964ce53fc1d57 total: 5 errors, 7 warnings, 15 checks, 399 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.58521.commit.9f6fefa9af5fc30cf2bb0cc035c964ce53fc1d57 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
