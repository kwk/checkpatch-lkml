WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#97: FILE: fs/aio.c:1311:
+	BUG_ON(ret <= 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:MINMAX: min() should probably be min_t(ssize_t, iov->iov_len, ret)
#109: FILE: fs/aio.c:1314:
+		ssize_t this = min((ssize_t)iov->iov_len, ret);

WARNING:LINE_SPACING: Missing a blank line after declarations
#110: FILE: fs/aio.c:1315:
+		ssize_t this = min((ssize_t)iov->iov_len, ret);
+		iov->iov_base += this;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#135: FILE: fs/aio.c:1326:
+	 * the remaining iovecs */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#136: FILE: fs/aio.c:1327:
+	BUG_ON(ret > 0 && iocb->ki_left == 0);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kiocb *' should also have an identifier name
#146: FILE: fs/aio.c:1335:
+	ssize_t (*rw_op)(struct kiocb *, const struct iovec *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct iovec *' should also have an identifier name
#146: FILE: fs/aio.c:1335:
+	ssize_t (*rw_op)(struct kiocb *, const struct iovec *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#146: FILE: fs/aio.c:1335:
+	ssize_t (*rw_op)(struct kiocb *, const struct iovec *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#146: FILE: fs/aio.c:1335:
+	ssize_t (*rw_op)(struct kiocb *, const struct iovec *,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'iocb->ki_opcode == IOCB_CMD_PREADV'
#151: FILE: fs/aio.c:1340:
+	if ((iocb->ki_opcode == IOCB_CMD_PREADV) ||
+		(iocb->ki_opcode == IOCB_CMD_PREAD)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'iocb->ki_opcode == IOCB_CMD_PREAD'
#151: FILE: fs/aio.c:1340:
+	if ((iocb->ki_opcode == IOCB_CMD_PREADV) ||
+		(iocb->ki_opcode == IOCB_CMD_PREAD)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#152: FILE: fs/aio.c:1341:
+	if ((iocb->ki_opcode == IOCB_CMD_PREADV) ||
+		(iocb->ki_opcode == IOCB_CMD_PREAD)) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#177: FILE: fs/aio.c:1357:
+	 * regular file. */

ERROR:CODE_INDENT: code indent should use tabs where possible
#298: FILE: include/linux/aio.h:118:
+ ^Istruct iovec^I^I*ki_iovec;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#298: FILE: include/linux/aio.h:118:
+ ^Istruct iovec^I^I*ki_iovec;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#298: FILE: include/linux/aio.h:118:
+ ^Istruct iovec^I^I*ki_iovec;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#299: FILE: include/linux/aio.h:119:
+ ^Iunsigned long^I^Iki_nr_segs;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#299: FILE: include/linux/aio.h:119:
+ ^Iunsigned long^I^Iki_nr_segs;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#299: FILE: include/linux/aio.h:119:
+ ^Iunsigned long^I^Iki_nr_segs;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#300: FILE: include/linux/aio.h:120:
+ ^Iunsigned long^I^Iki_cur_seg;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#300: FILE: include/linux/aio.h:120:
+ ^Iunsigned long^I^Iki_cur_seg;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#300: FILE: include/linux/aio.h:120:
+ ^Iunsigned long^I^Iki_cur_seg;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#325: FILE: fs/read_write.c:511:
+ssize_t rw_copy_check_uvector(const struct iovec __user * uvector,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#325: FILE: fs/read_write.c:511:
+ssize_t rw_copy_check_uvector(const struct iovec __user * uvector,
+			      unsigned long nr_segs, unsigned long fast_segs,
+			      struct iovec *fast_pointer,
+			      struct iovec **ret_pointer)
+  {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#329: FILE: fs/read_write.c:515:
+  {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#331: FILE: fs/read_write.c:517:
+  ^Issize_t ret;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#331: FILE: fs/read_write.c:517:
+  ^Issize_t ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#331: FILE: fs/read_write.c:517:
+  ^Issize_t ret;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#334: FILE: fs/read_write.c:520:
+  ^I/*$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#334: FILE: fs/read_write.c:520:
+  ^I/*$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#334: FILE: fs/read_write.c:520:
+  ^I/*$

ERROR:CODE_INDENT: code indent should use tabs where possible
#335: FILE: fs/read_write.c:521:
+  ^I * SuS says "The readv() function *may* fail if the iovcnt argument$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#335: FILE: fs/read_write.c:521:
+  ^I * SuS says "The readv() function *may* fail if the iovcnt argument$

ERROR:CODE_INDENT: code indent should use tabs where possible
#336: FILE: fs/read_write.c:522:
+  ^I * was less than or equal to 0, or greater than {IOV_MAX}.  Linux has$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#336: FILE: fs/read_write.c:522:
+  ^I * was less than or equal to 0, or greater than {IOV_MAX}.  Linux has$

ERROR:CODE_INDENT: code indent should use tabs where possible
#337: FILE: fs/read_write.c:523:
+  ^I * traditionally returned zero for zero segments, so...$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#337: FILE: fs/read_write.c:523:
+  ^I * traditionally returned zero for zero segments, so...$

ERROR:CODE_INDENT: code indent should use tabs where possible
#338: FILE: fs/read_write.c:524:
+  ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#338: FILE: fs/read_write.c:524:
+  ^I */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#341: FILE: fs/read_write.c:527:
+  ^I^Igoto out;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#341: FILE: fs/read_write.c:527:
+  ^I^Igoto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#341: FILE: fs/read_write.c:527:
+  ^I^Igoto out;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#344: FILE: fs/read_write.c:530:
+  ^I/*$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#344: FILE: fs/read_write.c:530:
+  ^I/*$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#344: FILE: fs/read_write.c:530:
+  ^I/*$

ERROR:CODE_INDENT: code indent should use tabs where possible
#345: FILE: fs/read_write.c:531:
+  ^I * First get the "struct iovec" from user memory and$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#345: FILE: fs/read_write.c:531:
+  ^I * First get the "struct iovec" from user memory and$

ERROR:CODE_INDENT: code indent should use tabs where possible
#346: FILE: fs/read_write.c:532:
+  ^I * verify all the pointers$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#346: FILE: fs/read_write.c:532:
+  ^I * verify all the pointers$

ERROR:CODE_INDENT: code indent should use tabs where possible
#347: FILE: fs/read_write.c:533:
+  ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#347: FILE: fs/read_write.c:533:
+  ^I */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#350: FILE: fs/read_write.c:536:
+  ^I^Igoto out;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#350: FILE: fs/read_write.c:536:
+  ^I^Igoto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#350: FILE: fs/read_write.c:536:
+  ^I^Igoto out;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#353: FILE: fs/read_write.c:539:
+  ^I^Iiov = kmalloc(nr_segs*sizeof(struct iovec), GFP_KERNEL);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#353: FILE: fs/read_write.c:539:
+  ^I^Iiov = kmalloc(nr_segs*sizeof(struct iovec), GFP_KERNEL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#353: FILE: fs/read_write.c:539:
+  ^I^Iiov = kmalloc(nr_segs*sizeof(struct iovec), GFP_KERNEL);$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#353: FILE: fs/read_write.c:539:
+  		iov = kmalloc(nr_segs*sizeof(struct iovec), GFP_KERNEL);
   		                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#353: FILE: fs/read_write.c:539:
+  		iov = kmalloc(nr_segs*sizeof(struct iovec), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!iov"
#354: FILE: fs/read_write.c:540:
+		if (iov == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:CODE_INDENT: code indent should use tabs where possible
#356: FILE: fs/read_write.c:542:
+  ^I^I^Igoto out;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#356: FILE: fs/read_write.c:542:
+  ^I^I^Igoto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#356: FILE: fs/read_write.c:542:
+  ^I^I^Igoto out;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#358: FILE: fs/read_write.c:544:
+  ^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#358: FILE: fs/read_write.c:544:
+  ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#358: FILE: fs/read_write.c:544:
+  ^I}$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#359: FILE: fs/read_write.c:545:
+	if (copy_from_user(iov, uvector, nr_segs*sizeof(*uvector))) {
 	                                        ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#361: FILE: fs/read_write.c:547:
+  ^I^Igoto out;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#361: FILE: fs/read_write.c:547:
+  ^I^Igoto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#361: FILE: fs/read_write.c:547:
+  ^I^Igoto out;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#364: FILE: fs/read_write.c:550:
+  ^I/*$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#364: FILE: fs/read_write.c:550:
+  ^I/*$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#364: FILE: fs/read_write.c:550:
+  ^I/*$

ERROR:CODE_INDENT: code indent should use tabs where possible
#369: FILE: fs/read_write.c:555:
+  ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#369: FILE: fs/read_write.c:555:
+  ^I */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#371: FILE: fs/read_write.c:557:
+  ^Ifor (seg = 0; seg < nr_segs; seg++) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#371: FILE: fs/read_write.c:557:
+  ^Ifor (seg = 0; seg < nr_segs; seg++) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#371: FILE: fs/read_write.c:557:
+  ^Ifor (seg = 0; seg < nr_segs; seg++) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#372: FILE: fs/read_write.c:558:
+  ^I^Ivoid __user *buf = iov[seg].iov_base;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#372: FILE: fs/read_write.c:558:
+  ^I^Ivoid __user *buf = iov[seg].iov_base;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#372: FILE: fs/read_write.c:558:
+  ^I^Ivoid __user *buf = iov[seg].iov_base;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#373: FILE: fs/read_write.c:559:
+  ^I^Issize_t len = (ssize_t)iov[seg].iov_len;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#373: FILE: fs/read_write.c:559:
+  ^I^Issize_t len = (ssize_t)iov[seg].iov_len;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#373: FILE: fs/read_write.c:559:
+  ^I^Issize_t len = (ssize_t)iov[seg].iov_len;$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#376: FILE: fs/read_write.c:562:
+		 * it's about to overflow ssize_t */

ERROR:CODE_INDENT: code indent should use tabs where possible
#379: FILE: fs/read_write.c:565:
+  ^I^I^Igoto out;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#379: FILE: fs/read_write.c:565:
+  ^I^I^Igoto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#379: FILE: fs/read_write.c:565:
+  ^I^I^Igoto out;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#383: FILE: fs/read_write.c:569:
+  ^I^I^Igoto out;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#383: FILE: fs/read_write.c:569:
+  ^I^I^Igoto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#383: FILE: fs/read_write.c:569:
+  ^I^I^Igoto out;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#387: FILE: fs/read_write.c:573:
+  ^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#387: FILE: fs/read_write.c:573:
+  ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#387: FILE: fs/read_write.c:573:
+  ^I}$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#458: FILE: fs/read_write.c:599:
+	ret = rw_copy_check_uvector(uvector, nr_segs, ARRAY_SIZE(iovstack),
+			iovstack, &iov);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#485: FILE: include/linux/fs.h:1188:
+ssize_t rw_copy_check_uvector(const struct iovec __user * uvector,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#486: FILE: include/linux/fs.h:1189:
+ssize_t rw_copy_check_uvector(const struct iovec __user * uvector,
+				unsigned long nr_segs, unsigned long fast_segs,

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.54111.commit.4ca563329f7707ca3e54b5a9d1a245a83afec226 total: 30 errors, 59 warnings, 8 checks, 407 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.54111.commit.4ca563329f7707ca3e54b5a9d1a245a83afec226 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
