ERROR:TRAILING_WHITESPACE: trailing whitespace
#40: FILE: kernel/power/extent.c:73:
+/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#45: FILE: kernel/power/extent.c:78:
+int suspend_add_to_extent_chain(struct extent_chain *chain, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#46: FILE: kernel/power/extent.c:79:
+int suspend_add_to_extent_chain(struct extent_chain *chain, 
+		unsigned long minimum, unsigned long maximum)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#51: FILE: kernel/power/extent.c:84:
+^Istart_at = (chain->last_touched && $

WARNING:LINE_SPACING: Missing a blank line after declarations
#68: FILE: kernel/power/extent.c:101:
+			struct extent *to_free = start_at->next;
+			start_at->maximum = start_at->next->maximum;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '+=' (ctx:VxW)
#75: FILE: kernel/power/extent.c:108:
+		chain->size+= (maximum - minimum + 1);
 		           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#82: FILE: kernel/power/extent.c:115:
+		printk("Error unable to append a new extent to the chain.\n");

ERROR:SPACING: spaces required around that '+=' (ctx:VxW)
#87: FILE: kernel/power/extent.c:120:
+	chain->size+= (maximum - minimum + 1);
 	           ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#96: FILE: kernel/power/extent.c:129:
+		struct extent *next = start_at->next;
+		start_at->next = new_extent;

CHECK:BRACES: braces {} should be used on all arms of this statement
#101: FILE: kernel/power/extent.c:134:
+		if (chain->first) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#104: FILE: kernel/power/extent.c:137:
+		} else

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#105: FILE: kernel/power/extent.c:138:
+			chain->last = chain->first = new_extent;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.64864.commit.23038e185996b8dee08dc1c0e029fd967e250297 total: 5 errors, 3 warnings, 4 checks, 74 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.64864.commit.23038e185996b8dee08dc1c0e029fd967e250297 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
