WARNING:TYPO_SPELLING: 'propogated' may be misspelled - perhaps 'propagated'?
#35: 
transaction starts; this logic was propogated to the KCS and
                                   ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#76: FILE: drivers/char/ipmi/ipmi_bt_sm.c:57:
+/* States are written in chronological order and usually cover
+   multiple rows of the state table discussion in the IPMI spec. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#76: FILE: drivers/char/ipmi/ipmi_bt_sm.c:57:
+   multiple rows of the state table discussion in the IPMI spec. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#103: FILE: drivers/char/ipmi/ipmi_bt_sm.c:78:
+/* Macros seen at the end of state "case" blocks.  They help with legibility
+   and debugging. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#103: FILE: drivers/char/ipmi/ipmi_bt_sm.c:78:
+   and debugging. */

ERROR:SPACING: space required after that ',' (ctx:VxV)
#105: FILE: drivers/char/ipmi/ipmi_bt_sm.c:80:
+#define BT_STATE_CHANGE(X,Y) { bt->state = X; return Y; }
                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#105: FILE: drivers/char/ipmi/ipmi_bt_sm.c:80:
+#define BT_STATE_CHANGE(X,Y) { bt->state = X; return Y; }

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#107: FILE: drivers/char/ipmi/ipmi_bt_sm.c:82:
+#define BT_SI_SM_RETURN(Y)   { last_printed = BT_STATE_PRINTME; return Y; }

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#152: FILE: drivers/char/ipmi/ipmi_bt_sm.c:132:
+	case BT_STATE_IDLE:		return("IDLE");

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#153: FILE: drivers/char/ipmi/ipmi_bt_sm.c:133:
+	case BT_STATE_XACTION_START:	return("XACTION");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#154: FILE: drivers/char/ipmi/ipmi_bt_sm.c:134:
+	case BT_STATE_WRITE_BYTES:	return("WR_BYTES");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#155: FILE: drivers/char/ipmi/ipmi_bt_sm.c:135:
+	case BT_STATE_WRITE_CONSUME:	return("WR_CONSUME");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#156: FILE: drivers/char/ipmi/ipmi_bt_sm.c:136:
+	case BT_STATE_READ_WAIT:	return("RD_WAIT");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#157: FILE: drivers/char/ipmi/ipmi_bt_sm.c:137:
+	case BT_STATE_CLEAR_B2H:	return("CLEAR_B2H");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#158: FILE: drivers/char/ipmi/ipmi_bt_sm.c:138:
+	case BT_STATE_READ_BYTES:	return("RD_BYTES");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#159: FILE: drivers/char/ipmi/ipmi_bt_sm.c:139:
+	case BT_STATE_RESET1:		return("RESET1");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#160: FILE: drivers/char/ipmi/ipmi_bt_sm.c:140:
+	case BT_STATE_RESET2:		return("RESET2");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#161: FILE: drivers/char/ipmi/ipmi_bt_sm.c:141:
+	case BT_STATE_RESET3:		return("RESET3");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#162: FILE: drivers/char/ipmi/ipmi_bt_sm.c:142:
+	case BT_STATE_RESTART:		return("RESTART");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#163: FILE: drivers/char/ipmi/ipmi_bt_sm.c:143:
+	case BT_STATE_LONG_BUSY:	return("LONG_BUSY");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#164: FILE: drivers/char/ipmi/ipmi_bt_sm.c:144:
+	case BT_STATE_CAPABILITIES_BEGIN: return("CAP_BEGIN");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#165: FILE: drivers/char/ipmi/ipmi_bt_sm.c:145:
+	case BT_STATE_CAPABILITIES_END:	return("CAP_END");

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#204: FILE: drivers/char/ipmi/ipmi_bt_sm.c:176:
 }
+#define STATUS2TXT status2txt(status)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#273: FILE: drivers/char/ipmi/ipmi_bt_sm.c:227:
+		printk(KERN_WARNING "BT: +++++++++++++++++ New command\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#274: FILE: drivers/char/ipmi/ipmi_bt_sm.c:228:
+		printk(KERN_WARNING "BT: NetFn/LUN CMD [%d data]:", size - 2);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#277: FILE: drivers/char/ipmi/ipmi_bt_sm.c:230:
+			printk (" %02x", data[i]);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#277: FILE: drivers/char/ipmi/ipmi_bt_sm.c:230:
+			printk (" %02x", data[i]);

CHECK:BRACES: braces {} should be used on all arms of this statement
#332: FILE: drivers/char/ipmi/ipmi_bt_sm.c:263:
+	if (length < msg_len || bt->truncated) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#335: FILE: drivers/char/ipmi/ipmi_bt_sm.c:266:
+	} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#345: FILE: drivers/char/ipmi/ipmi_bt_sm.c:270:
+		printk (KERN_WARNING "BT: result %d bytes:", msg_len);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#345: FILE: drivers/char/ipmi/ipmi_bt_sm.c:270:
+		printk (KERN_WARNING "BT: result %d bytes:", msg_len);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#347: FILE: drivers/char/ipmi/ipmi_bt_sm.c:272:
+			printk(" %02x", data[i]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#348: FILE: drivers/char/ipmi/ipmi_bt_sm.c:273:
+		printk ("\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#348: FILE: drivers/char/ipmi/ipmi_bt_sm.c:273:
+		printk ("\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#359: FILE: drivers/char/ipmi/ipmi_bt_sm.c:284:
+		printk(KERN_WARNING "IPMI BT: flag reset %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#360: FILE: drivers/char/ipmi/ipmi_bt_sm.c:285:
+		printk(KERN_WARNING "IPMI BT: flag reset %s\n",
+					status2txt(BT_STATUS));

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#384: FILE: drivers/char/ipmi/ipmi_bt_sm.c:294:
+/* Get rid of an unwanted/stale response.  This should only be needed for
+   BMCs that support multiple outstanding requests. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#384: FILE: drivers/char/ipmi/ipmi_bt_sm.c:294:
+   BMCs that support multiple outstanding requests. */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#390: FILE: drivers/char/ipmi/ipmi_bt_sm.c:300:
+^Iif (!(BT_STATUS & BT_B2H_ATN)) ^I/* Not signalling a response */$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#399: FILE: drivers/char/ipmi/ipmi_bt_sm.c:309:
+		printk(KERN_WARNING "IPMI BT: stale response %s; ",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#400: FILE: drivers/char/ipmi/ipmi_bt_sm.c:310:
+		printk(KERN_WARNING "IPMI BT: stale response %s; ",
+			status2txt(BT_STATUS));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#406: FILE: drivers/char/ipmi/ipmi_bt_sm.c:316:
+		printk("drained %d bytes\n", size + 1);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#415: FILE: drivers/char/ipmi/ipmi_bt_sm.c:324:
+		printk(KERN_WARNING "BT: write %d bytes seq=0x%02X",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#416: FILE: drivers/char/ipmi/ipmi_bt_sm.c:325:
+		printk(KERN_WARNING "BT: write %d bytes seq=0x%02X",
 			bt->write_count, bt->seq);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#431: FILE: drivers/char/ipmi/ipmi_bt_sm.c:339:
+	/* length is "framing info", minimum = 4: NetFn, Seq, Cmd, cCode.
+	   Keep layout of first four bytes aligned with write_data[] */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#431: FILE: drivers/char/ipmi/ipmi_bt_sm.c:339:
+	   Keep layout of first four bytes aligned with write_data[] */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#443: FILE: drivers/char/ipmi/ipmi_bt_sm.c:346:
+			printk(KERN_WARNING "BT: bad raw rsp len=%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#444: FILE: drivers/char/ipmi/ipmi_bt_sm.c:347:
+			printk(KERN_WARNING "BT: bad raw rsp len=%d\n",
+				bt->read_count);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#458: FILE: drivers/char/ipmi/ipmi_bt_sm.c:358:
+		printk(KERN_WARNING "BT: got %d bytes seq=0x%02X",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#459: FILE: drivers/char/ipmi/ipmi_bt_sm.c:359:
+		printk(KERN_WARNING "BT: got %d bytes seq=0x%02X",
+			max, bt->read_data[2]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#465: FILE: drivers/char/ipmi/ipmi_bt_sm.c:364:
+		printk ("%s\n", bt->read_count == max ? "" : " ...");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#465: FILE: drivers/char/ipmi/ipmi_bt_sm.c:364:
+		printk ("%s\n", bt->read_count == max ? "" : " ...");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#475: FILE: drivers/char/ipmi/ipmi_bt_sm.c:368:
+	if ((bt->read_data[3] == bt->write_data[3]) &&
[...]
 			return 1;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bt->read_data[3] == bt->write_data[3]'
#475: FILE: drivers/char/ipmi/ipmi_bt_sm.c:368:
+	if ((bt->read_data[3] == bt->write_data[3]) &&
+	    (bt->read_data[2] == bt->write_data[2]) &&
+	    ((bt->read_data[1] & 0xF8) == (bt->write_data[1] & 0xF8)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bt->read_data[2] == bt->write_data[2]'
#475: FILE: drivers/char/ipmi/ipmi_bt_sm.c:368:
+	if ((bt->read_data[3] == bt->write_data[3]) &&
+	    (bt->read_data[2] == bt->write_data[2]) &&
+	    ((bt->read_data[1] & 0xF8) == (bt->write_data[1] & 0xF8)))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#482: FILE: drivers/char/ipmi/ipmi_bt_sm.c:374:
+		printk(KERN_WARNING "IPMI BT: bad packet: "

CHECK:CAMELCASE: Avoid CamelCase: <cCode>
#496: FILE: drivers/char/ipmi/ipmi_bt_sm.c:385:
+					unsigned char cCode)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#517: FILE: drivers/char/ipmi/ipmi_bt_sm.c:400:
+^Iprintk(KERN_WARNING "IPMI BT: %s in %s %s ", ^I/* open-ended line */$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#517: FILE: drivers/char/ipmi/ipmi_bt_sm.c:400:
+	printk(KERN_WARNING "IPMI BT: %s in %s %s ", 	/* open-ended line */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#521: FILE: drivers/char/ipmi/ipmi_bt_sm.c:404:
+	/* Per the IPMI spec, retries are based on the sequence number
+	   known only to this module, so manage a restart here. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#521: FILE: drivers/char/ipmi/ipmi_bt_sm.c:404:
+	   known only to this module, so manage a restart here. */

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#534: FILE: drivers/char/ipmi/ipmi_bt_sm.c:407:
+		printk("%d retries left\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#535: FILE: drivers/char/ipmi/ipmi_bt_sm.c:408:
+		printk("%d retries left\n",
+			bt->BT_CAP_retries - bt->error_retries);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#544: FILE: drivers/char/ipmi/ipmi_bt_sm.c:413:
+	printk("failed %d retries, sending error response\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#545: FILE: drivers/char/ipmi/ipmi_bt_sm.c:414:
+	printk("failed %d retries, sending error response\n",
+		bt->BT_CAP_retries);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#547: FILE: drivers/char/ipmi/ipmi_bt_sm.c:416:
+		printk(KERN_ERR "IPMI BT: stuck, try power cycle\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#551: FILE: drivers/char/ipmi/ipmi_bt_sm.c:420:
+		printk(KERN_WARNING "IPMI: BT reset (takes 5 secs)\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#559: FILE: drivers/char/ipmi/ipmi_bt_sm.c:426:
+	/* Concoct a useful error message, set up the next state, and
+	   be done with this sequence. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#559: FILE: drivers/char/ipmi/ipmi_bt_sm.c:426:
+	   be done with this sequence. */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bt->state != last_printed'
#592: FILE: drivers/char/ipmi/ipmi_bt_sm.c:453:
+	if ((bt_debug & BT_DEBUG_STATES) && (bt->state != last_printed)) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#606: FILE: drivers/char/ipmi/ipmi_bt_sm.c:463:
+	/* Commands that time out may still (eventually) provide a response.
+	   This stale response will get in the way of a new response so remove

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#608: FILE: drivers/char/ipmi/ipmi_bt_sm.c:465:
+	   it will be rejected by its (now-forgotten) seq number. */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bt->state < BT_STATE_WRITE_BYTES'
#610: FILE: drivers/char/ipmi/ipmi_bt_sm.c:467:
+	if ((bt->state < BT_STATE_WRITE_BYTES) && (status & BT_B2H_ATN)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bt->state != BT_STATE_IDLE'
#616: FILE: drivers/char/ipmi/ipmi_bt_sm.c:472:
+	if ((bt->state != BT_STATE_IDLE) &&
+	    (bt->state <  BT_STATE_PRINTME)) {		/* check timeout */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bt->state <  BT_STATE_PRINTME'
#616: FILE: drivers/char/ipmi/ipmi_bt_sm.c:472:
+	if ((bt->state != BT_STATE_IDLE) &&
+	    (bt->state <  BT_STATE_PRINTME)) {		/* check timeout */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bt->timeout < 0'
#623: FILE: drivers/char/ipmi/ipmi_bt_sm.c:475:
+		if ((bt->timeout < 0) && (bt->state < BT_STATE_RESET1))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bt->state < BT_STATE_RESET1'
#623: FILE: drivers/char/ipmi/ipmi_bt_sm.c:475:
+		if ((bt->timeout < 0) && (bt->state < BT_STATE_RESET1))

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#633: FILE: drivers/char/ipmi/ipmi_bt_sm.c:484:
+	/* Idle state first checks for asynchronous messages from another
+	   channel, then does some opportunistic housekeeping. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#633: FILE: drivers/char/ipmi/ipmi_bt_sm.c:484:
+	   channel, then does some opportunistic housekeeping. */

WARNING:TYPO_SPELLING: 'proceeed' may be misspelled - perhaps 'proceed'?
#729: FILE: drivers/char/ipmi/ipmi_bt_sm.c:532:
+		/* Uncached, ordered writes should just proceeed serially but
 		                                        ^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#730: FILE: drivers/char/ipmi/ipmi_bt_sm.c:533:
+		/* Uncached, ordered writes should just proceeed serially but
+		   some BMCs don't clear B2H_ATN with one hit.  Fast-path a

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#731: FILE: drivers/char/ipmi/ipmi_bt_sm.c:534:
+		   workaround without too much penalty to the general case. */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#757: FILE: drivers/char/ipmi/ipmi_bt_sm.c:554:
+^I^Iif (!i) ^I^I^I/* Not my message */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#825: FILE: drivers/char/ipmi/ipmi_bt_sm.c:601:
+	/* Get BT Capabilities, using timing of upper level state machine.
+	   Set outreqs to prevent infinite loop on timeout. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#825: FILE: drivers/char/ipmi/ipmi_bt_sm.c:601:
+	   Set outreqs to prevent infinite loop on timeout. */

CHECK:CAMELCASE: Avoid CamelCase: <GetBT_CAP>
#829: FILE: drivers/char/ipmi/ipmi_bt_sm.c:605:
+			unsigned char GetBT_CAP[] = { 0x18, 0x36 };

WARNING:LINE_SPACING: Missing a blank line after declarations
#830: FILE: drivers/char/ipmi/ipmi_bt_sm.c:606:
+			unsigned char GetBT_CAP[] = { 0x18, 0x36 };
+			bt->state = BT_STATE_IDLE;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'i == 8'
#840: FILE: drivers/char/ipmi/ipmi_bt_sm.c:616:
+		if ((i == 8) && !BT_CAP[2]) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#840: FILE: drivers/char/ipmi/ipmi_bt_sm.c:616:
+		if ((i == 8) && !BT_CAP[2]) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#844: FILE: drivers/char/ipmi/ipmi_bt_sm.c:620:
+		} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#845: FILE: drivers/char/ipmi/ipmi_bt_sm.c:621:
+			printk(KERN_WARNING "IPMI BT: using default values\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#848: FILE: drivers/char/ipmi/ipmi_bt_sm.c:624:
+		printk(KERN_WARNING "IPMI BT: req2rsp=%ld secs retries=%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#849: FILE: drivers/char/ipmi/ipmi_bt_sm.c:625:
+		printk(KERN_WARNING "IPMI BT: req2rsp=%ld secs retries=%d\n",
+			bt->BT_CAP_req2rsp / 1000000L, bt->BT_CAP_retries);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'kcs->state != KCS_IDLE'
#909: FILE: drivers/char/ipmi/ipmi_kcs_sm.c:269:
+	if ((kcs->state != KCS_IDLE) && (kcs->state != KCS_HOSED))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'kcs->state != KCS_HOSED'
#909: FILE: drivers/char/ipmi/ipmi_kcs_sm.c:269:
+	if ((kcs->state != KCS_IDLE) && (kcs->state != KCS_HOSED))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'smic->state != SMIC_IDLE'
#977: FILE: drivers/char/ipmi/ipmi_smic_sm.c:149:
+	if ((smic->state != SMIC_IDLE) && (smic->state != SMIC_HOSED))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'smic->state != SMIC_HOSED'
#977: FILE: drivers/char/ipmi/ipmi_smic_sm.c:149:
+	if ((smic->state != SMIC_IDLE) && (smic->state != SMIC_HOSED))

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#994: FILE: include/linux/ipmi_msgdefs.h:75:
+ * on the results of the "Get BT Capabilities" command. */

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.13255.commit.9194a5f331cb85f78cc22588e35345f247576bee total: 15 errors, 55 warnings, 28 checks, 931 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.13255.commit.9194a5f331cb85f78cc22588e35345f247576bee has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
