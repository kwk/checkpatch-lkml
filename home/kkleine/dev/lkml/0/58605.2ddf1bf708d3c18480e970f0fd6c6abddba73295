WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#36: 
Signed-Off-By: Shailabh Nagar <nagar@watson.ibm.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#151: FILE: Documentation/accounting/getdelays.c:40:
+int rcvbufsz=0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#151: FILE: Documentation/accounting/getdelays.c:40:
+int rcvbufsz=0;
             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#153: FILE: Documentation/accounting/getdelays.c:42:
+    char name[100];$

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#154: FILE: Documentation/accounting/getdelays.c:43:
+int dbg=0, print_delays=0;
        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#154: FILE: Documentation/accounting/getdelays.c:43:
+int dbg=0, print_delays=0;
                        ^

WARNING:TABSTOP: Statements should start on a tabstop
#157: FILE: Documentation/accounting/getdelays.c:46:
+	    if (dbg) {				\

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#175: FILE: Documentation/accounting/getdelays.c:64:
+char cpumask[100+6*MAX_CPUS];
                 ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#175: FILE: Documentation/accounting/getdelays.c:64:
+char cpumask[100+6*MAX_CPUS];
                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#198: FILE: Documentation/accounting/getdelays.c:80:
+		if (setsockopt(fd, SOL_SOCKET, SO_RCVBUF,
+				&rcvbufsz, sizeof(rcvbufsz)) < 0) {

CHECK:SPACING: No space is necessary after a cast
#223: FILE: Documentation/accounting/getdelays.c:89:
+	if (bind(fd, (struct sockaddr *) &local, sizeof(local)) < 0)

CHECK:SPACING: No space is necessary after a cast
#262: FILE: Documentation/accounting/getdelays.c:117:
+	na = (struct nlattr *) GENLMSG_DATA(&msg);

CHECK:SPACING: No space is necessary after a cast
#268: FILE: Documentation/accounting/getdelays.c:123:
+	buf = (char *) &msg;

WARNING:SPACING: space prohibited before semicolon
#269: FILE: Documentation/accounting/getdelays.c:124:
+	buflen = msg.n.nlmsg_len ;

CHECK:SPACING: No space is necessary after a cast
#272: FILE: Documentation/accounting/getdelays.c:127:
+	while ((r = sendto(sd, buf, buflen, 0, (struct sockaddr *) &nladdr,

CHECK:BRACES: braces {} should be used on all arms of this statement
#274: FILE: Documentation/accounting/getdelays.c:129:
+		if (r > 0) {
[...]
+		} else if (errno != EAGAIN)
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#283: FILE: Documentation/accounting/getdelays.c:138:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#357: FILE: Documentation/accounting/getdelays.c:157:
+	rc = send_cmd(sd, GENL_ID_CTRL, getpid(), CTRL_CMD_GETFAMILY,
+			CTRL_ATTR_FAMILY_NAME, (void *)name,

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#358: FILE: Documentation/accounting/getdelays.c:158:
+			strlen(TASKSTATS_GENL_NAME)+1);
 			                           ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rep_len < 0'
#361: FILE: Documentation/accounting/getdelays.c:161:
+	if (ans.n.nlmsg_type == NLMSG_ERROR ||
+	    (rep_len < 0) || !NLMSG_OK((&ans.n), rep_len))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '&ans.n'
#361: FILE: Documentation/accounting/getdelays.c:161:
+	if (ans.n.nlmsg_type == NLMSG_ERROR ||
+	    (rep_len < 0) || !NLMSG_OK((&ans.n), rep_len))

CHECK:SPACING: No space is necessary after a cast
#379: FILE: Documentation/accounting/getdelays.c:165:
+	na = (struct nlattr *) GENLMSG_DATA(&ans);

CHECK:SPACING: No space is necessary after a cast
#380: FILE: Documentation/accounting/getdelays.c:166:
+	na = (struct nlattr *) ((char *) na + NLA_ALIGN(na->nla_len));

WARNING:BRACES: braces {} are not necessary for single statement blocks
#381: FILE: Documentation/accounting/getdelays.c:167:
+	if (na->nla_type == CTRL_ATTR_FAMILY_ID) {
+		id = *(__u16 *) NLA_DATA(na);
+	}

CHECK:SPACING: No space is necessary after a cast
#382: FILE: Documentation/accounting/getdelays.c:168:
+		id = *(__u16 *) NLA_DATA(na);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH' are not preferred. Consider using octal permissions '0644'.
#616: FILE: Documentation/accounting/getdelays.c:266:
+			  S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#626: FILE: Documentation/accounting/getdelays.c:273:
+	if ((nl_sd = create_nl_socket(NETLINK_GENERIC)) < 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#632: FILE: Documentation/accounting/getdelays.c:276:
 
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '&msg.n'
#706: FILE: Documentation/accounting/getdelays.c:316:
+		if (msg.n.nlmsg_type == NLMSG_ERROR ||
+		    !NLMSG_OK((&msg.n), rep_len)) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#715: FILE: Documentation/accounting/getdelays.c:325:
+
+

CHECK:SPACING: No space is necessary after a cast
#718: FILE: Documentation/accounting/getdelays.c:328:
+		na = (struct nlattr *) GENLMSG_DATA(&msg);

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#725: FILE: Documentation/accounting/getdelays.c:335:
+				/* Fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

CHECK:SPACING: No space is necessary after a cast
#730: FILE: Documentation/accounting/getdelays.c:340:
+				na = (struct nlattr *) NLA_DATA(na);

CHECK:SPACING: No space is necessary after a cast
#735: FILE: Documentation/accounting/getdelays.c:345:
+						rtid = *(int *) NLA_DATA(na);

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#736: FILE: Documentation/accounting/getdelays.c:346:
+						if (print_delays)

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

CHECK:SPACING: No space is necessary after a cast
#740: FILE: Documentation/accounting/getdelays.c:350:
+						rtid = *(int *) NLA_DATA(na);

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#741: FILE: Documentation/accounting/getdelays.c:351:
+						if (print_delays)

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#746: FILE: Documentation/accounting/getdelays.c:356:
+						if (print_delays)

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#747: FILE: Documentation/accounting/getdelays.c:357:
+							print_delayacct((struct taskstats *) NLA_DATA(na));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: No space is necessary after a cast
#747: FILE: Documentation/accounting/getdelays.c:357:
+							print_delayacct((struct taskstats *) NLA_DATA(na));

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#748: FILE: Documentation/accounting/getdelays.c:358:
+						if (fd) {

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#749: FILE: Documentation/accounting/getdelays.c:359:
+							if (write(fd, NLA_DATA(na), na->nla_len) < 0) {

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#749: FILE: Documentation/accounting/getdelays.c:359:
+							if (write(fd, NLA_DATA(na), na->nla_len) < 0) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#749: FILE: Documentation/accounting/getdelays.c:359:
+							if (write(fd, NLA_DATA(na), na->nla_len) < 0) {
+								err(1,"write error\n");
+							}

ERROR:SPACING: space required after that ',' (ctx:VxV)
#750: FILE: Documentation/accounting/getdelays.c:360:
+								err(1,"write error\n");
 								     ^

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#753: FILE: Documentation/accounting/getdelays.c:363:
+						if (!loop)

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#757: FILE: Documentation/accounting/getdelays.c:367:
+						printf("Unknown nested nla_type %d\n", na->nla_type);

CHECK:SPACING: No space is necessary after a cast
#761: FILE: Documentation/accounting/getdelays.c:371:
+					na = (struct nlattr *) ((char *) na + len2);

CHECK:SPACING: No space is necessary after a cast
#775: FILE: Documentation/accounting/getdelays.c:379:
+			na = (struct nlattr *) (GENLMSG_DATA(&msg) + len);

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.58605.commit.2ddf1bf708d3c18480e970f0fd6c6abddba73295 total: 6 errors, 17 warnings, 26 checks, 749 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.58605.commit.2ddf1bf708d3c18480e970f0fd6c6abddba73295 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
