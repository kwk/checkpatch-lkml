WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#21: 
Subject: [RFC] [PATCH] dm-cow: copy-on-write stackable target for device-mapper

WARNING:TYPO_SPELLING: 'degredation' may be misspelled - perhaps 'degradation'?
#32: 
degredation.  This target was written in an attempt to provide a stacking 
^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#52: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:TYPO_SPELLING: 'appropiate' may be misspelled - perhaps 'appropriate'?
#61: FILE: Documentation/device-mapper/dm-cow.txt:5:
+of the devices, and reads from the appropiate device.
                                    ^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#72: FILE: Documentation/device-mapper/dm-cow.txt:16:
+N M logdevname Bdevname Boffset Rbitmapdev Rdevname Roffset Wbitmapdev Wdevname Woffset $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#94: FILE: drivers/md/Kconfig:264:
+config DM_COW
+	tristate "Copy-on-write Stackable target (EXPERIMENTAL)"
+	depends on BLK_DEV_DM && EXPERIMENTAL
+	---help---
+          This is a target for the dm-mapper which stacks
+          block devices. The base image B is a formatted block
+          device. Over that go N read only block devices R
+          and then 1 write device W. It does copy on write
+          of the devices, and reads from the appropiate device.
+          You start by formatting B. Then add a W on it.
+          W consists on two parts, a block device for the bitmap
+          which should start zeroed and which gets some magic number
+          on it the first time it is used. The you can add another
+          W and the first W turns into a R. WRB. and so on.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:TYPO_SPELLING: 'appropiate' may be misspelled - perhaps 'appropriate'?
#102: FILE: drivers/md/Kconfig:272:
+          of the devices, and reads from the appropiate device.
                                              ^^^^^^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#130: FILE: drivers/md/dm-cow.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#133: FILE: drivers/md/dm-cow.c:4:
+ * $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#147: FILE: drivers/md/dm-cow.c:18:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#148: FILE: drivers/md/dm-cow.c:19:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#170: FILE: drivers/md/dm-cow.c:41:
+ *^I- To start using, zero the bitmap device first. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#181: FILE: drivers/md/dm-cow.c:52:
+ *^I    sector functions which go through the cache. $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#187: FILE: drivers/md/dm-cow.c:58:
+#define	PBIT64(p,v) (p)[0]=(v);(p)[1]=(v)>>8;(p)[2]=(v)>>16;(p)[3]=(v)>>24; \
        	        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#187: FILE: drivers/md/dm-cow.c:58:
+#define	PBIT64(p,v) (p)[0]=(v);(p)[1]=(v)>>8;(p)[2]=(v)>>16;(p)[3]=(v)>>24; \
        	                  ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#187: FILE: drivers/md/dm-cow.c:58:
+#define	PBIT64(p,v) (p)[0]=(v);(p)[1]=(v)>>8;(p)[2]=(v)>>16;(p)[3]=(v)>>24; \
        	                      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#187: FILE: drivers/md/dm-cow.c:58:
+#define	PBIT64(p,v) (p)[0]=(v);(p)[1]=(v)>>8;(p)[2]=(v)>>16;(p)[3]=(v)>>24; \
        	                             ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#187: FILE: drivers/md/dm-cow.c:58:
+#define	PBIT64(p,v) (p)[0]=(v);(p)[1]=(v)>>8;(p)[2]=(v)>>16;(p)[3]=(v)>>24; \
        	                                 ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#187: FILE: drivers/md/dm-cow.c:58:
+#define	PBIT64(p,v) (p)[0]=(v);(p)[1]=(v)>>8;(p)[2]=(v)>>16;(p)[3]=(v)>>24; \
        	                                    ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#187: FILE: drivers/md/dm-cow.c:58:
+#define	PBIT64(p,v) (p)[0]=(v);(p)[1]=(v)>>8;(p)[2]=(v)>>16;(p)[3]=(v)>>24; \
        	                                           ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#187: FILE: drivers/md/dm-cow.c:58:
+#define	PBIT64(p,v) (p)[0]=(v);(p)[1]=(v)>>8;(p)[2]=(v)>>16;(p)[3]=(v)>>24; \
        	                                               ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#187: FILE: drivers/md/dm-cow.c:58:
+#define	PBIT64(p,v) (p)[0]=(v);(p)[1]=(v)>>8;(p)[2]=(v)>>16;(p)[3]=(v)>>24; \
        	                                                   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#187: FILE: drivers/md/dm-cow.c:58:
+#define	PBIT64(p,v) (p)[0]=(v);(p)[1]=(v)>>8;(p)[2]=(v)>>16;(p)[3]=(v)>>24; \
        	                                                          ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#187: FILE: drivers/md/dm-cow.c:58:
+#define	PBIT64(p,v) (p)[0]=(v);(p)[1]=(v)>>8;(p)[2]=(v)>>16;(p)[3]=(v)>>24; \
        	                                                              ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#187: FILE: drivers/md/dm-cow.c:58:
+#define	PBIT64(p,v) (p)[0]=(v);(p)[1]=(v)>>8;(p)[2]=(v)>>16;(p)[3]=(v)>>24; \
+		    (p)[4]=(v)>>32;(p)[5]=(v)>>40;(p)[6]=(v)>>48;(p)[7]=(v)>>56

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#187: FILE: drivers/md/dm-cow.c:58:
+#define	PBIT64(p,v) (p)[0]=(v);(p)[1]=(v)>>8;(p)[2]=(v)>>16;(p)[3]=(v)>>24; \
+		    (p)[4]=(v)>>32;(p)[5]=(v)>>40;(p)[6]=(v)>>48;(p)[7]=(v)>>56

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'v' - possible side-effects?
#187: FILE: drivers/md/dm-cow.c:58:
+#define	PBIT64(p,v) (p)[0]=(v);(p)[1]=(v)>>8;(p)[2]=(v)>>16;(p)[3]=(v)>>24; \
+		    (p)[4]=(v)>>32;(p)[5]=(v)>>40;(p)[6]=(v)>>48;(p)[7]=(v)>>56

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#188: FILE: drivers/md/dm-cow.c:59:
+		    (p)[4]=(v)>>32;(p)[5]=(v)>>40;(p)[6]=(v)>>48;(p)[7]=(v)>>56
 		          ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#188: FILE: drivers/md/dm-cow.c:59:
+		    (p)[4]=(v)>>32;(p)[5]=(v)>>40;(p)[6]=(v)>>48;(p)[7]=(v)>>56
 		              ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#188: FILE: drivers/md/dm-cow.c:59:
+		    (p)[4]=(v)>>32;(p)[5]=(v)>>40;(p)[6]=(v)>>48;(p)[7]=(v)>>56
 		                  ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#188: FILE: drivers/md/dm-cow.c:59:
+		    (p)[4]=(v)>>32;(p)[5]=(v)>>40;(p)[6]=(v)>>48;(p)[7]=(v)>>56
 		                         ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#188: FILE: drivers/md/dm-cow.c:59:
+		    (p)[4]=(v)>>32;(p)[5]=(v)>>40;(p)[6]=(v)>>48;(p)[7]=(v)>>56
 		                             ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#188: FILE: drivers/md/dm-cow.c:59:
+		    (p)[4]=(v)>>32;(p)[5]=(v)>>40;(p)[6]=(v)>>48;(p)[7]=(v)>>56
 		                                 ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#188: FILE: drivers/md/dm-cow.c:59:
+		    (p)[4]=(v)>>32;(p)[5]=(v)>>40;(p)[6]=(v)>>48;(p)[7]=(v)>>56
 		                                        ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#188: FILE: drivers/md/dm-cow.c:59:
+		    (p)[4]=(v)>>32;(p)[5]=(v)>>40;(p)[6]=(v)>>48;(p)[7]=(v)>>56
 		                                            ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#188: FILE: drivers/md/dm-cow.c:59:
+		    (p)[4]=(v)>>32;(p)[5]=(v)>>40;(p)[6]=(v)>>48;(p)[7]=(v)>>56
 		                                                ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#188: FILE: drivers/md/dm-cow.c:59:
+		    (p)[4]=(v)>>32;(p)[5]=(v)>>40;(p)[6]=(v)>>48;(p)[7]=(v)>>56
 		                                                       ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#188: FILE: drivers/md/dm-cow.c:59:
+		    (p)[4]=(v)>>32;(p)[5]=(v)>>40;(p)[6]=(v)>>48;(p)[7]=(v)>>56
 		                                                           ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#190: FILE: drivers/md/dm-cow.c:61:
+#define GBIT64(p) ((u32)((p)[0]|((p)[1]<<8)|((p)[2]<<16)|((p)[3]<<24)) |\
                                ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#190: FILE: drivers/md/dm-cow.c:61:
+#define GBIT64(p) ((u32)((p)[0]|((p)[1]<<8)|((p)[2]<<16)|((p)[3]<<24)) |\
                                        ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#190: FILE: drivers/md/dm-cow.c:61:
+#define GBIT64(p) ((u32)((p)[0]|((p)[1]<<8)|((p)[2]<<16)|((p)[3]<<24)) |\
                                            ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#190: FILE: drivers/md/dm-cow.c:61:
+#define GBIT64(p) ((u32)((p)[0]|((p)[1]<<8)|((p)[2]<<16)|((p)[3]<<24)) |\
                                                    ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#190: FILE: drivers/md/dm-cow.c:61:
+#define GBIT64(p) ((u32)((p)[0]|((p)[1]<<8)|((p)[2]<<16)|((p)[3]<<24)) |\
                                                         ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#190: FILE: drivers/md/dm-cow.c:61:
+#define GBIT64(p) ((u32)((p)[0]|((p)[1]<<8)|((p)[2]<<16)|((p)[3]<<24)) |\
                                                                 ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#190: FILE: drivers/md/dm-cow.c:61:
+#define GBIT64(p) ((u32)((p)[0]|((p)[1]<<8)|((p)[2]<<16)|((p)[3]<<24)) |\
+		   ((u64)((p)[4]|((p)[5]<<8)|((p)[6]<<16)|((p)[7]<<24)) << 32))

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#191: FILE: drivers/md/dm-cow.c:62:
+		   ((u64)((p)[4]|((p)[5]<<8)|((p)[6]<<16)|((p)[7]<<24)) << 32))
 		                ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#191: FILE: drivers/md/dm-cow.c:62:
+		   ((u64)((p)[4]|((p)[5]<<8)|((p)[6]<<16)|((p)[7]<<24)) << 32))
 		                        ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#191: FILE: drivers/md/dm-cow.c:62:
+		   ((u64)((p)[4]|((p)[5]<<8)|((p)[6]<<16)|((p)[7]<<24)) << 32))
 		                            ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#191: FILE: drivers/md/dm-cow.c:62:
+		   ((u64)((p)[4]|((p)[5]<<8)|((p)[6]<<16)|((p)[7]<<24)) << 32))
 		                                    ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#191: FILE: drivers/md/dm-cow.c:62:
+		   ((u64)((p)[4]|((p)[5]<<8)|((p)[6]<<16)|((p)[7]<<24)) << 32))
 		                                         ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#191: FILE: drivers/md/dm-cow.c:62:
+		   ((u64)((p)[4]|((p)[5]<<8)|((p)[6]<<16)|((p)[7]<<24)) << 32))
 		                                                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#196: FILE: drivers/md/dm-cow.c:67:
+#define	SECTMSK (((1LL << (SECT_SHIFT+BYTE_SHIFT)) - 1LL))
        	                             ^

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#197: FILE: drivers/md/dm-cow.c:68:
+#define	SECTSZ  (1LL << SECT_SHIFT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#198: FILE: drivers/md/dm-cow.c:69:
+#define	READMSK (1LL<<BIO_RW)
        	            ^

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#198: FILE: drivers/md/dm-cow.c:69:
+#define	READMSK (1LL<<BIO_RW)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#202: FILE: drivers/md/dm-cow.c:73:
+#define DPRINTK(S ...) printk(KERN_DEBUG "dm-cow:" S)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#209: FILE: drivers/md/dm-cow.c:80:
+#define DPRINTB(S ...) printk(KERN_DEBUG "dm-cow:" S)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#216: FILE: drivers/md/dm-cow.c:87:
+#define DPRINTBL(S ...) printk(KERN_DEBUG "dm-cow:" S)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#223: FILE: drivers/md/dm-cow.c:94:
+#define DPRINTPART(S ...) printk(KERN_DEBUG "dm-cow:" S)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#245: FILE: drivers/md/dm-cow.c:116:
+^Iatomic_t nclients; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#257: FILE: drivers/md/dm-cow.c:128:
+^Ithis should be rewritten using the bitmap interface?, $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#257: FILE: drivers/md/dm-cow.c:128:
+/*
+	this should be rewritten using the bitmap interface?, 

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#269: FILE: drivers/md/dm-cow.c:140:
+			printk(KERN_ALERT

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#270: FILE: drivers/md/dm-cow.c:141:
+			       "block size spurious, sectinblk, %lld \n",

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#281: FILE: drivers/md/dm-cow.c:152:
+sector_t sect2bmapblk(sector_t nsect, struct block_device * bdev)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#292: FILE: drivers/md/dm-cow.c:163:
+ * our bitmap is composed of blocks(due to bread)/bytes/bits $

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#305: FILE: drivers/md/dm-cow.c:176:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#319: FILE: drivers/md/dm-cow.c:190:
+		printk(KERN_ALERT "I/O error, bitmap cannot be trusted\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#347: FILE: drivers/md/dm-cow.c:218:
+		printk(KERN_ALERT "I/O error, bitmap cannot be trusted\n");

WARNING:BRACES: braces {} are not necessary for single statement blocks
#370: FILE: drivers/md/dm-cow.c:241:
+	for (i = 0; i < chksz; i++) {
+		sectbmset(bdev, nsect + i);
+	}

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#388: FILE: drivers/md/dm-cow.c:259:
+		BUG_ON(sect2bmapblk(nsect, cc[i]->bmap_dev->bdev) >

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#405: FILE: drivers/md/dm-cow.c:276:
+	printk(KERN_INFO "dm-cow: setting Cow %p\n", cc);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#406: FILE: drivers/md/dm-cow.c:277:
+	printk(KERN_INFO "dm-cow: devname: %s\n", cc->devname);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#409: FILE: drivers/md/dm-cow.c:280:
+		printk(KERN_INFO "dm-cow: bmapdev: %s\n", cc->bmapdevname);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#411: FILE: drivers/md/dm-cow.c:282:
+		printk(KERN_INFO

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#413: FILE: drivers/md/dm-cow.c:284:
+	printk(KERN_INFO

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#416: FILE: drivers/md/dm-cow.c:287:
+	printk(KERN_INFO "dm-cow: block size, %ud, mode %c\n",

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#421: FILE: drivers/md/dm-cow.c:292:
+ * ^IEither it is first time, so the bitmap is zero or it is$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#422: FILE: drivers/md/dm-cow.c:293:
+ * ^Ithe second time, then the sizes have to fit.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#423: FILE: drivers/md/dm-cow.c:294:
+ * ^Ibmapwholelen is aligned to MAXBLK, which should be a block$

CHECK:SPACING: No space is necessary after a cast
#433: FILE: drivers/md/dm-cow.c:304:
+	blen = (u64) bmap_len;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#438: FILE: drivers/md/dm-cow.c:309:
+		printk(KERN_ALERT "I/O error, bitmap cannot be trusted\n");

CHECK:SPACING: No space is necessary after a cast
#444: FILE: drivers/md/dm-cow.c:315:
+	magic = GBIT64( ((unsigned char *) bh->b_data) );

ERROR:SPACING: space prohibited after that open parenthesis '('
#444: FILE: drivers/md/dm-cow.c:315:
+	magic = GBIT64( ((unsigned char *) bh->b_data) );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#444: FILE: drivers/md/dm-cow.c:315:
+	magic = GBIT64( ((unsigned char *) bh->b_data) );

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'magic != MAGIC'
#445: FILE: drivers/md/dm-cow.c:316:
+	if (magic && (magic != MAGIC)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#446: FILE: drivers/md/dm-cow.c:317:
+		printk(KERN_ALERT "dm-cow: bad magic: %llx, blk: %lld\n",

CHECK:SPACING: No space is necessary after a cast
#454: FILE: drivers/md/dm-cow.c:325:
+		PBIT64(((u8 *) bh->b_data), newmagic);

CHECK:SPACING: No space is necessary after a cast
#455: FILE: drivers/md/dm-cow.c:326:
+		PBIT64(((u8 *) bh->b_data) + BIT64SZ, blen);

CHECK:SPACING: No space is necessary after a cast
#464: FILE: drivers/md/dm-cow.c:335:
+		blen = GBIT64(((u8 *) bh->b_data) + BIT64SZ);

CHECK:SPACING: No space is necessary after a cast
#471: FILE: drivers/md/dm-cow.c:342:
+		sblen = (sector_t) blen;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#473: FILE: drivers/md/dm-cow.c:344:
+			printk(KERN_ALERT

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#477: FILE: drivers/md/dm-cow.c:348:
+			return -1;
+		} else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#478: FILE: drivers/md/dm-cow.c:349:
+			printk(KERN_INFO

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#483: FILE: drivers/md/dm-cow.c:354:
+		printk(KERN_INFO

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#484: FILE: drivers/md/dm-cow.c:355:
+		       "dm-cow: read magic %llx blk: %lld, blen: %llu \n",

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#497: FILE: drivers/md/dm-cow.c:368:
+	if (mode & FMODE_WRITE) {
[...]
+	} else {
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#521: FILE: drivers/md/dm-cow.c:392:
+	printk(KERN_ALERT "bmapwholelen: %llu\n", bmapwholelen);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#532: FILE: drivers/md/dm-cow.c:403:
+			printk(KERN_ALERT

WARNING:INDENTED_LABEL: labels should not be indented
#543: FILE: drivers/md/dm-cow.c:414:
+      err2:

WARNING:INDENTED_LABEL: labels should not be indented
#545: FILE: drivers/md/dm-cow.c:416:
+      err1:

WARNING:RETURN_VOID: void function return statements are not generally useful
#548: FILE: drivers/md/dm-cow.c:419:
+	return;
+}

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*cc)...) over kzalloc(sizeof(struct cow_c)...)
#554: FILE: drivers/md/dm-cow.c:425:
+	cc = kzalloc(sizeof(struct cow_c), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:TYPO_SPELLING: 'doesnt' may be misspelled - perhaps 'doesn't'?
#575: FILE: drivers/md/dm-cow.c:446:
+	argc++;			/* the base doesnt have bitmap */
 	       			            ^^^^^^

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#600: FILE: drivers/md/dm-cow.c:471:
+		if (sscanf(argv[i + 2], "%lld", &cc[(i + 1) / 3]->start) != 1) {
+			*err = "dm-cow: Invalid device sector";
+			return -EINVAL;
+		}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#622: FILE: drivers/md/dm-cow.c:493:
+	printk(KERN_INFO "cow: new cow stack\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cc"
#625: FILE: drivers/md/dm-cow.c:496:
+	if (cc == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#632: FILE: drivers/md/dm-cow.c:503:
+	printk(KERN_INFO "cow: new cow stack\n");

WARNING:INDENTED_LABEL: labels should not be indented
#651: FILE: drivers/md/dm-cow.c:522:
+      bad:

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#668: FILE: drivers/md/dm-cow.c:539:
+	printk(KERN_INFO "cow: cleaning up\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#681: FILE: drivers/md/dm-cow.c:552:
+	struct cow_c **cc = (struct cow_c **)ti->private;
+	if (atomic_dec_and_test(&cc[0]->nclients)) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#684: FILE: drivers/md/dm-cow.c:555:
+		printk(KERN_INFO

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#705: FILE: drivers/md/dm-cow.c:576:
+	printk(KERN_ALERT "Error going to sect page");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#718: FILE: drivers/md/dm-cow.c:589:
+		printk(KERN_ALERT "cow, I/O error, %d\n", error);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#723: FILE: drivers/md/dm-cow.c:594:
+	if (!bioparen->bi_size) {
+		DPRINTPART("TOTAL REQ[%p] COMPLETE\n", bio);
+	}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#730: FILE: drivers/md/dm-cow.c:601:
+		printk(KERN_ALERT "cow: strange bio error nomem\n");

WARNING:RETURN_VOID: void function return statements are not generally useful
#747: FILE: drivers/md/dm-cow.c:618:
+	return;
+}

WARNING:TYPO_SPELLING: 'erro' may be misspelled - perhaps 'error'?
#764: FILE: drivers/md/dm-cow.c:635:
+		printk(KERN_ALERT "cow: erro cloning bio\n");
 		                        ^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#764: FILE: drivers/md/dm-cow.c:635:
+		printk(KERN_ALERT "cow: erro cloning bio\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#787: FILE: drivers/md/dm-cow.c:658:
+	struct cow_c *dest;
+	dest = NULL;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#866: FILE: drivers/md/dm-cow.c:737:
+	chunkbio = reqbio = NULL;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#875: FILE: drivers/md/dm-cow.c:746:
+		printk(KERN_INFO "Entered after cleanup\n");

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#886: FILE: drivers/md/dm-cow.c:757:
+	src = dst = NULL;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#893: FILE: drivers/md/dm-cow.c:764:
+			printk(KERN_ALERT

WARNING:INDENTED_LABEL: labels should not be indented
#951: FILE: drivers/md/dm-cow.c:822:
+      exit:

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#956: FILE: drivers/md/dm-cow.c:827:
+	BUG_ON(sent != count);

WARNING:LONG_LINE_COMMENT: line length of 112 exceeds 100 columns
#959: FILE: drivers/md/dm-cow.c:830:
+	if (atomic_dec_and_test(&cc[0]->nclients)) {	//disable on error by setting 0 on cnt can also be good.

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#960: FILE: drivers/md/dm-cow.c:831:
+		printk(KERN_ALERT "cow: error on map\n");

WARNING:STRING_FRAGMENTS: Consecutive strings are generally better as a single string
#984: FILE: drivers/md/dm-cow.c:855:
+					     "%s " "%s " "%lld",

WARNING:LINE_SPACING: Missing a blank line after declarations
#1009: FILE: drivers/md/dm-cow.c:880:
+	int len;
+	len = 0;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1031: FILE: drivers/md/dm-cow.c:902:
+^I/* $

WARNING:TYPO_SPELLING: 'doesnt' may be misspelled - perhaps 'doesn't'?
#1032: FILE: drivers/md/dm-cow.c:903:
+	 * dont worry about errors, if it doesnt work, 
 	                                  ^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1032: FILE: drivers/md/dm-cow.c:903:
+^I * dont worry about errors, if it doesnt work, $

WARNING:TYPO_SPELLING: 'cant' may be misspelled - perhaps 'can't'?
#1033: FILE: drivers/md/dm-cow.c:904:
+	 * you cant see debug info, not critical
 	       ^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1043: FILE: drivers/md/dm-cow.c:914:
+	int r = dm_unregister_target(&cow_target);
+	remove_proc_entry("driver/dm-cow", NULL);

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.14867.commit.76a94f1b7f6c7dc340c991b4fe611972f881e625 total: 30 errors, 67 warnings, 38 checks, 983 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.14867.commit.76a94f1b7f6c7dc340c991b4fe611972f881e625 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
