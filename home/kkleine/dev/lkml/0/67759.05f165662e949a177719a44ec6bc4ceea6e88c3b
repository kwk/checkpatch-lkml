WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
This patch adds the new slab reclaim functionalty. For that purpose we add a

WARNING:TYPO_SPELLING: 'functionalty' may be misspelled - perhaps 'functionality'?
#29: 
This patch adds the new slab reclaim functionalty. For that purpose we add a
                                     ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'assummed' may be misspelled - perhaps 'assumed'?
#43: 
to guide a slab oriented form of reclaim. It is assummed that a refcount
                                                ^^^^^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#84: FILE: include/linux/slab.h:230:
+extern long kmem_cache_reclaim(struct kmem_cache *, gfp_t flags, unsigned long);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kmem_cache *' should also have an identifier name
#84: FILE: include/linux/slab.h:230:
+extern long kmem_cache_reclaim(struct kmem_cache *, gfp_t flags, unsigned long);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#84: FILE: include/linux/slab.h:230:
+extern long kmem_cache_reclaim(struct kmem_cache *, gfp_t flags, unsigned long);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#206: FILE: mm/slab.c:3112:
+			if (l3->free_objects > l3->free_limit &&
+					!atomic_read(&l3->reclaim)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#232: FILE: mm/slab.c:4260:
+static int try_reclaim_one(kmem_cache_t *cachep, struct kmem_list3 *l3,
+	struct list_head *list, unsigned short marker)

WARNING:TYPO_SPELLING: 'higest' may be misspelled - perhaps 'highest'?
#282: FILE: mm/slab.c:4310:
+	 * with refcnt one and establish the higest refcnt in the block.
 	                                     ^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#300: FILE: mm/slab.c:4328:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#324: FILE: mm/slab.c:4352:
+static int reclaim_scan(kmem_cache_t *cachep, struct kmem_list3 *l3,
+	int slabs_to_free, struct list_head *list, unsigned short marker)

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#349: FILE: mm/slab.c:4377:
+	int slabs_to_free = (pages + ((1 << cachep->gfporder) -1)) >>
 	                                                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#367: FILE: mm/slab.c:4395:
+	if (nr_freed >= slabs_to_free || !cachep->dtor ||
+		!(cachep->flags & SLAB_RECLAIM))

WARNING:TYPO_SPELLING: 'mininum' may be misspelled - perhaps 'minimum'?
#391: FILE: mm/slab.c:4419:
+	 * and we have freed a mininum number of objects free for each slab
 	                       ^^^^^^^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#401: FILE: mm/slab.c:4429:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.67759.commit.05f165662e949a177719a44ec6bc4ceea6e88c3b total: 0 errors, 7 warnings, 8 checks, 320 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.67759.commit.05f165662e949a177719a44ec6bc4ceea6e88c3b has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
