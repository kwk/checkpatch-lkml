WARNING:IF_1: Consider removing the #if 1 and its #endif
#80: FILE: fs/ext2/balloc.c:144:
+#if 1

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#107: FILE: fs/ext2/balloc.c:212:
+goal_in_my_reservation(struct ext2_reserve_window *rsv, ext2_grpblk_t grp_goal,
 			unsigned int group, struct super_block * sb)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'grp_goal >= 0'
#122: FILE: fs/ext2/balloc.c:222:
+	if ((grp_goal >= 0) && ((grp_goal + group_first_block < rsv->_rsv_start)
+		|| (grp_goal + group_first_block > rsv->_rsv_end)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#123: FILE: fs/ext2/balloc.c:223:
+	if ((grp_goal >= 0) && ((grp_goal + group_first_block < rsv->_rsv_start)
+		|| (grp_goal + group_first_block > rsv->_rsv_end)))

CHECK:BRACES: Unbalanced braces around else statement
#170: FILE: fs/ext2/balloc.c:296:
+		else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#241: FILE: fs/ext2/balloc.c:391:
+ * or at last iput().
               ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#244: FILE: fs/ext2/balloc.c:394:
+ * ^Iext2_release_file(): last writer closes the file$

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#245: FILE: fs/ext2/balloc.c:395:
+ * 	ext2_clear_inode(): last iput(), when nobody links to this file.
    	                         ^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#245: FILE: fs/ext2/balloc.c:395:
+ * ^Iext2_clear_inode(): last iput(), when nobody links to this file.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#246: FILE: fs/ext2/balloc.c:396:
+ * ^Iext2_truncate(): when the block indirect map is about to change.$

WARNING:TYPO_SPELLING: 'physcial' may be misspelled - perhaps 'physical'?
#259: FILE: fs/ext2/balloc.c:420:
+ * @block:		start physcial block to free
           		      ^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#284: FILE: fs/ext2/balloc.c:523:
+bitmap_search_next_usable_block(ext2_grpblk_t start, struct buffer_head *bh,
+					ext2_grpblk_t maxblocks)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#299: FILE: fs/ext2/balloc.c:536:
+ * ^I^I^Iallocatable block in bitmap.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#344: FILE: fs/ext2/balloc.c:599:
+ * ^Iif there is a reservation window, only try to allocate block(s)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#345: FILE: fs/ext2/balloc.c:600:
+ * ^Ifrom the file's own reservation window;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#346: FILE: fs/ext2/balloc.c:601:
+ * ^IOtherwise, the allocation range starts from the give goal block, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#346: FILE: fs/ext2/balloc.c:601:
+ * ^IOtherwise, the allocation range starts from the give goal block, $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#347: FILE: fs/ext2/balloc.c:602:
+ * ^Iends at the block group's last block.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#362: FILE: fs/ext2/balloc.c:614:
+       ^Iext2_grpblk_t start, end;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#362: FILE: fs/ext2/balloc.c:614:
+       ^Iext2_grpblk_t start, end;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#362: FILE: fs/ext2/balloc.c:614:
+       ^Iext2_grpblk_t start, end;$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'start <= grp_goal'
#380: FILE: fs/ext2/balloc.c:629:
+		if ((start <= grp_goal) && (grp_goal < end))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'grp_goal < end'
#380: FILE: fs/ext2/balloc.c:629:
+		if ((start <= grp_goal) && (grp_goal < end))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#411: FILE: fs/ext2/balloc.c:652:
+			for (i = 0; i < 7 && grp_goal > start &&
+					!ext2_test_bit(grp_goal - 1,

ERROR:CODE_INDENT: code indent should use tabs where possible
#412: FILE: fs/ext2/balloc.c:653:
+^I^I^I^I^I     ^I^Ibitmap_bh->b_data);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#412: FILE: fs/ext2/balloc.c:653:
+^I^I^I^I^I     ^I^Ibitmap_bh->b_data);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#413: FILE: fs/ext2/balloc.c:654:
+^I^I^I     ^I^Ii++, grp_goal--)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#413: FILE: fs/ext2/balloc.c:654:
+^I^I^I     ^I^Ii++, grp_goal--)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#422: FILE: fs/ext2/balloc.c:661:
+^I^I^I       ^I^I^I^Ibitmap_bh->b_data)) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#422: FILE: fs/ext2/balloc.c:661:
+^I^I^I       ^I^I^I^Ibitmap_bh->b_data)) {$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#422: FILE: fs/ext2/balloc.c:661:
+	if (ext2_set_bit_atomic(sb_bgl_lock(EXT2_SB(sb), group), grp_goal,
+			       				bitmap_bh->b_data)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#440: FILE: fs/ext2/balloc.c:675:
+^I^I&& !ext2_set_bit_atomic(sb_bgl_lock(EXT2_SB(sb), group), $

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#440: FILE: fs/ext2/balloc.c:675:
+	while (num < *count && grp_goal < end
+		&& !ext2_set_bit_atomic(sb_bgl_lock(EXT2_SB(sb), group), 

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#458: FILE: fs/ext2/balloc.c:723:
+				struct super_block * sb,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#581: FILE: fs/ext2/balloc.c:1038:
+ext2_try_to_allocate_with_rsv(struct super_block *sb, unsigned int group, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#582: FILE: fs/ext2/balloc.c:1039:
+ext2_try_to_allocate_with_rsv(struct super_block *sb, unsigned int group, 
+			struct buffer_head *bitmap_bh, ext2_grpblk_t grp_goal,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#583: FILE: fs/ext2/balloc.c:1040:
+			struct ext2_reserve_window_node * my_rsv,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#623: FILE: fs/ext2/balloc.c:1087:
+			ret = alloc_new_reservation(my_rsv, grp_goal, sb,
 							group, bitmap_bh);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#631: FILE: fs/ext2/balloc.c:1092:
+			if (!goal_in_my_reservation(&my_rsv->rsv_window,
+							grp_goal, group, sb))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#633: FILE: fs/ext2/balloc.c:1094:
+^I^I} else if (grp_goal > 0 && $

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#637: FILE: fs/ext2/balloc.c:1097:
+					*count-my_rsv->rsv_end + grp_goal - 1);
 					      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#641: FILE: fs/ext2/balloc.c:1100:
 		if ((my_rsv->rsv_start >= group_first_block + EXT2_BLOCKS_PER_GROUP(sb))
+		    || (my_rsv->rsv_end < group_first_block)) {

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#717: FILE: fs/ext2/balloc.c:1322:
+			    "block("E2FSBLK") >= blocks count(%d) - "

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

WARNING:NEW_TYPEDEFS: do not add new typedefs
#818: FILE: include/linux/ext2_fs_sb.h:26:
+typedef int ext2_grpblk_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#821: FILE: include/linux/ext2_fs_sb.h:29:
+typedef unsigned long ext2_fsblk_t;

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.19139.commit.efb73756d233bfda3f25de1639539d3c2616d7b3 total: 10 errors, 19 warnings, 16 checks, 730 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.19139.commit.efb73756d233bfda3f25de1639539d3c2616d7b3 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
