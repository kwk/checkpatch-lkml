ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#124: FILE: include/linux/sched.h:1289:
+extern struct user_struct * alloc_uid(struct user_namespace *, uid_t);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#124: FILE: include/linux/sched.h:1289:
+extern struct user_struct * alloc_uid(struct user_namespace *, uid_t);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct user_namespace *' should also have an identifier name
#124: FILE: include/linux/sched.h:1289:
+extern struct user_struct * alloc_uid(struct user_namespace *, uid_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'uid_t' should also have an identifier name
#124: FILE: include/linux/sched.h:1289:
+extern struct user_struct * alloc_uid(struct user_namespace *, uid_t);

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#129: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#134: FILE: include/linux/user_namespace.h:1:
+#ifndef _LINUX_USER_NAMESPACE_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:BIT_MACRO: Prefer using the BIT macro
#141: FILE: include/linux/user_namespace.h:8:
+#define UIDHASH_SZ	(1 << UIDHASH_BITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#160: FILE: include/linux/user_namespace.h:27:
+extern int copy_user_ns(int flags, struct task_struct *tsk);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#161: FILE: include/linux/user_namespace.h:28:
+extern void free_user_ns(struct kref *kref);

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#195: FILE: init/Kconfig:225:
+config USER_NS
+	bool "User Namespaces"
+	default n
+	help
+	  Support user namespaces.  This allows containers, i.e.
+	  vservers, to use user namespaces to provide different
+	  user info for different servers.  If unsure, say N.
+

Kconfig symbols should have a help text which fully describes
it.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#345: FILE: kernel/user.c:123:
+struct user_struct * alloc_uid(struct user_namespace *ns, uid_t uid)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#372: FILE: kernel/user_namespace.c:1:
+/*

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#391: FILE: kernel/user_namespace.c:20:
+EXPORT_SYMBOL_GPL(init_user_ns);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.04467.commit.266b257c107867bfe0a1c6c3c4d2ec4ebea892c6 total: 2 errors, 7 warnings, 4 checks, 276 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.04467.commit.266b257c107867bfe0a1c6c3c4d2ec4ebea892c6 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
