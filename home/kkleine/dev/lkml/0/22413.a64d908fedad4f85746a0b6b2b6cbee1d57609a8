WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#25: 
grouping related allocation types together. The idea is that large groups of

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#50: FILE: include/linux/mmzone.h:31:
+#define for_each_rclmtype_order(order, type) \
+	for (order = 0; order < MAX_ORDER; order++) \
+		for (type = 0; type < RCLM_TYPES; type++)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'order' - possible side-effects?
#50: FILE: include/linux/mmzone.h:31:
+#define for_each_rclmtype_order(order, type) \
+	for (order = 0; order < MAX_ORDER; order++) \
+		for (type = 0; type < RCLM_TYPES; type++)

CHECK:CAMELCASE: Avoid CamelCase: <__SetPageEasyRclm>
#78: FILE: include/linux/page-flags.h:260:
+#define __SetPageEasyRclm(page)	__set_bit(PG_easyrclm, &(page)->flags)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <__ClearPageEasyRclm>
#79: FILE: include/linux/page-flags.h:261:
+#define __ClearPageEasyRclm(page) __clear_bit(PG_easyrclm, &(page)->flags)

ERROR:CODE_INDENT: code indent should use tabs where possible
#150: FILE: mm/page_alloc.c:581:
+ ^Iint low, int high, struct free_area *area,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#150: FILE: mm/page_alloc.c:581:
+ ^Iint low, int high, struct free_area *area,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#150: FILE: mm/page_alloc.c:581:
+ ^Iint low, int high, struct free_area *area,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#170: FILE: mm/page_alloc.c:646:
+static struct page *__rmqueue_fallback(struct zone *zone, int order,
+							gfp_t gfp_flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#172: FILE: mm/page_alloc.c:648:
+	struct free_area * area;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#179: FILE: mm/page_alloc.c:655:
+	for (current_order = MAX_ORDER-1; current_order >= order;
 	                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around zone->free_area[current_order]
#181: FILE: mm/page_alloc.c:657:
+		area = &(zone->free_area[current_order]);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:CODE_INDENT: code indent should use tabs where possible
#182: FILE: mm/page_alloc.c:658:
+ ^I^Iif (list_empty(&area->free_list[rclmtype]))$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#182: FILE: mm/page_alloc.c:658:
+ ^I^Iif (list_empty(&area->free_list[rclmtype]))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#182: FILE: mm/page_alloc.c:658:
+ ^I^Iif (list_empty(&area->free_list[rclmtype]))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#183: FILE: mm/page_alloc.c:659:
+ ^I^I^Icontinue;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#183: FILE: mm/page_alloc.c:659:
+ ^I^I^Icontinue;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#183: FILE: mm/page_alloc.c:659:
+ ^I^I^Icontinue;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#186: FILE: mm/page_alloc.c:662:
+		page = list_entry(area->free_list[rclmtype].next,
+					struct page, lru);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#213: FILE: mm/page_alloc.c:688:
+static struct page *__rmqueue(struct zone *zone, unsigned int order,
+						gfp_t gfp_flags)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around zone->free_area[current_order]
#224: FILE: mm/page_alloc.c:697:
+		area = &(zone->free_area[current_order]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#230: FILE: mm/page_alloc.c:702:
+		page = list_entry(area->free_list[rclmtype].next,
+					struct page, lru);

WARNING:LINE_SPACING: Missing a blank line after declarations
#330: FILE: mm/page_alloc.c:2041:
+	int order, rclmtype;
+	for_each_rclmtype_order(order, rclmtype) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.22413.commit.a64d908fedad4f85746a0b6b2b6cbee1d57609a8 total: 5 errors, 8 warnings, 10 checks, 269 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.22413.commit.a64d908fedad4f85746a0b6b2b6cbee1d57609a8 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
