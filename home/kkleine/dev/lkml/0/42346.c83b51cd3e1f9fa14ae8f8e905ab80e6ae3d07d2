WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#27: 
# modprobe should_fail_knobs

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#28: 
# echo 1 > /debug/failslab/process-filter

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#29: 
# echo 30 > /debug/failslab/probability

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#30: 
# find /lib/modules/`uname -r` -name '*.ko' -exec basename {} .ko \; > list

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#31: 
# for i in `cat list`;do failmodprobe $i;done

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#35: 
#!/bin/bash

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#77: FILE: fs/proc/base.c:250:
+	E(PROC_TGID_SHOULD_FAIL, "make-it-fail", S_IFREG|S_IWUSR|S_IRUGO),
 	                                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#77: FILE: fs/proc/base.c:250:
+	E(PROC_TGID_SHOULD_FAIL, "make-it-fail", S_IFREG|S_IWUSR|S_IRUGO),
 	                                                        ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR|S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#77: FILE: fs/proc/base.c:250:
+	E(PROC_TGID_SHOULD_FAIL, "make-it-fail", S_IFREG|S_IWUSR|S_IRUGO),

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#87: FILE: fs/proc/base.c:295:
+	E(PROC_TID_SHOULD_FAIL, "make-it-fail", S_IFREG|S_IWUSR|S_IRUGO),
 	                                               ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#87: FILE: fs/proc/base.c:295:
+	E(PROC_TID_SHOULD_FAIL, "make-it-fail", S_IFREG|S_IWUSR|S_IRUGO),
 	                                                       ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR|S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#87: FILE: fs/proc/base.c:295:
+	E(PROC_TID_SHOULD_FAIL, "make-it-fail", S_IFREG|S_IWUSR|S_IRUGO),

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#97: FILE: fs/proc/base.c:1008:
+static ssize_t proc_should_fail_read(struct file * file, char __user * buf,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#97: FILE: fs/proc/base.c:1008:
+static ssize_t proc_should_fail_read(struct file * file, char __user * buf,

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#114: FILE: fs/proc/base.c:1025:
+	if (count > len-__ppos)
 	               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#115: FILE: fs/proc/base.c:1026:
+		count = len-__ppos;
 		           ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#122: FILE: fs/proc/base.c:1033:
+static ssize_t proc_should_fail_write(struct file * file,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#123: FILE: fs/proc/base.c:1034:
+static ssize_t proc_should_fail_write(struct file * file,
+			const char __user * buf, size_t count, loff_t *ppos)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#123: FILE: fs/proc/base.c:1034:
+			const char __user * buf, size_t count, loff_t *ppos)

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#136: FILE: fs/proc/base.c:1047:
+	make_it_fail = simple_strtol(buffer, &end, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:CONST_STRUCT: struct file_operations should normally be const
#149: FILE: fs/proc/base.c:1060:
+static struct file_operations proc_should_fail_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:NEEDLESS_IF: debugfs_remove(NULL) is safe and this check is probably not required
#252: FILE: lib/should_fail_knobs.c:71:
+		if (knobs->filter_file) {
+			debugfs_remove(knobs->filter_file);

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.42346.commit.c83b51cd3e1f9fa14ae8f8e905ab80e6ae3d07d2 total: 4 errors, 11 warnings, 7 checks, 189 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.42346.commit.c83b51cd3e1f9fa14ae8f8e905ab80e6ae3d07d2 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
