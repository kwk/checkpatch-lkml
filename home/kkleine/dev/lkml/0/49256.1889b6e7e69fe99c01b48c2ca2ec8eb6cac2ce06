WARNING:TYPO_SPELLING: 'wonderfull' may be misspelled - perhaps 'wonderful'?
#50: 
weird and wonderfull stuff will happen.
          ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#125: FILE: include/linux/gfp.h:58:
+			__GFP_NOMEMALLOC|__GFP_HARDWALL|__GFP_MEMALLOC)
 			                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#125: FILE: include/linux/gfp.h:58:
+			__GFP_NOMEMALLOC|__GFP_HARDWALL|__GFP_MEMALLOC)
 			                               ^

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#154: FILE: include/linux/netdevice.h:417:
+	spinlock_t		memalloc_lock;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#162: FILE: include/linux/netdevice.h:585:
+extern int ^I^Idev_adjust_memalloc(struct net_device *dev, int a);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#162: FILE: include/linux/netdevice.h:585:
+extern int 		dev_adjust_memalloc(struct net_device *dev, int a);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#201: FILE: include/net/sock.h:422:
+extern int sk_set_memalloc(struct sock *sk);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#225: FILE: mm/page_alloc.c:975:
+	if ((((p->flags & PF_MEMALLOC) || unlikely(test_thread_flag(TIF_MEMDIE)))
+			&& !in_interrupt()) || (gfp_mask & __GFP_MEMALLOC)) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#234: FILE: mm/page_alloc.c:2200:
+	unsigned pages_min = (min_free_kbytes + var_free_kbytes)

WARNING:LINE_SPACING: Missing a blank line after declarations
#269: FILE: mm/page_alloc.c:2279:
+		struct zone *zone;
+		for_each_zone(zone)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#272: FILE: mm/page_alloc.c:2282:
+	printk(KERN_DEBUG "RX reserve: %d\n", var_free_kbytes);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#279: FILE: mm/page_alloc.c:2289:
+EXPORT_SYMBOL_GPL(adjust_memalloc_reserve);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#313: FILE: net/core/skbuff.c:157:
+		/*
+		 * Fallback allocation for memalloc reserves.

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#338: FILE: net/core/skbuff.c:182:
+		/*
+		 * Force fclone alloc in order to fudge a lacking in skb_clone().

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#349: FILE: net/core/skbuff.c:193:
+		if (!(page = alloc_pages(gfp_mask & ~__GFP_HIGHMEM, order)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#403: FILE: net/core/skbuff.c:324:
+static struct sk_buff *___netdev_alloc_skb(struct net_device *dev,
 		unsigned int length, gfp_t gfp_mask)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#416: FILE: net/core/skbuff.c:340:
+ * ^IThis function uses %___netdev_alloc_skb to do the actual allocation.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#418: FILE: net/core/skbuff.c:342:
+ * ^IIt first tries without dipping into the memalloc pool; if such$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#419: FILE: net/core/skbuff.c:343:
+ * ^Ian allocation fails, we see if we're allowed to dip into the$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#420: FILE: net/core/skbuff.c:344:
+ * ^Imemalloc pool.$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#425: FILE: net/core/skbuff.c:349:
+struct sk_buff *__netdev_alloc_skb(struct net_device *dev,
+		unsigned length, gfp_t gfp_mask)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#425: FILE: net/core/skbuff.c:349:
+		unsigned length, gfp_t gfp_mask)

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#441: FILE: net/core/skbuff.c:365:
+	/*
+	 * pre-inc guards against a race with netdev_wait_memalloc()

WARNING:TYPO_SPELLING: 'substitue' may be misspelled - perhaps 'substitute'?
#476: FILE: net/core/skbuff.c:432:
+ *	substitue the free function in %kfree_skbmem.
   	^^^^^^^^^

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#482: FILE: net/core/skbuff.c:438:
+	/*
+	 * The input_dev is the initial input device;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kmem_cache *' should also have an identifier name
#500: FILE: net/core/skbuff.c:456:
+	void (*free_skb)(struct kmem_cache *, void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#500: FILE: net/core/skbuff.c:456:
+	void (*free_skb)(struct kmem_cache *, void *);

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#534: FILE: net/core/skbuff.c:571:
+		/*
+		 * should we special-case skb->memalloc cloning?

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#537: FILE: net/core/skbuff.c:574:
+		BUG_ON(skb->memalloc);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#546: FILE: net/core/skbuff.c:828:
+	BUG_ON(skb->memalloc);

WARNING:LINE_SPACING: Missing a blank line after declarations
#646: FILE: net/core/dev.c:955:
+	unsigned int order = ceiling_log2(pages);
+	pages = 1 << order;

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#648: FILE: net/core/dev.c:957:
+	/*
+	 * if we need more than one page, we need a head and fragments.

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#650: FILE: net/core/dev.c:959:
+	if (pages > 1) ++pages;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#675: FILE: net/core/dev.c:984:
+	BUG_ON(dev->memalloc_socks < 0);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#683: FILE: net/core/dev.c:992:
+		printk(KERN_WARNING

WARNING:LINE_SPACING: Missing a blank line after declarations
#730: FILE: net/core/dev.c:3186:
+	unsigned long warning_time = jiffies;
+	while (atomic_read(&dev->rx_reserve_used) != 0) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#733: FILE: net/core/dev.c:3189:
+			printk(KERN_EMERG "netdev_wait_memalloc: "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'netdev_wait_memalloc', this function's name, in a string
#733: FILE: net/core/dev.c:3189:
+			printk(KERN_EMERG "netdev_wait_memalloc: "

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#734: FILE: net/core/dev.c:3190:
+			printk(KERN_EMERG "netdev_wait_memalloc: "
+			       "waiting for %s to become free. SKB "

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#735: FILE: net/core/dev.c:3191:
+			       "waiting for %s to become free. SKB "
+			       "count = %d\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#753: FILE: net/core/dev.c:3261:
+			BUG_ON(!dev->memalloc_socks);

WARNING:LINE_SPACING: Missing a blank line after declarations
#770: FILE: net/ipv4/af_inet.c:137:
+		struct net_device *dev = ip_dev_find(inet->rcv_saddr);
+		if (dev) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#811: FILE: net/core/sock.c:215:
+	if (!(err = dev_adjust_memalloc(dev, 1)))

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.49256.commit.1889b6e7e69fe99c01b48c2ca2ec8eb6cac2ce06 total: 3 errors, 32 warnings, 8 checks, 619 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.49256.commit.1889b6e7e69fe99c01b48c2ca2ec8eb6cac2ce06 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
