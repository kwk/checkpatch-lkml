WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#35: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#40: FILE: drivers/infiniband/hw/ehca/ehca_uverbs.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SIZEOF_PARENTHESIS: sizeof *my_context should be sizeof(*my_context)
#101: FILE: drivers/infiniband/hw/ehca/ehca_uverbs.c:62:
+	my_context = kzalloc(sizeof *my_context, GFP_KERNEL);

WARNING:LINE_SPACING: Missing a blank line after declarations
#115: FILE: drivers/infiniband/hw/ehca/ehca_uverbs.c:76:
+	struct ehca_ucontext *my_context = NULL;
+	EHCA_CHECK_ADR(context);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPLIT_STRING: quoted string split across lines
#135: FILE: drivers/infiniband/hw/ehca/ehca_uverbs.c:96:
+	EDEB_EN(7, "vm_start=%lx vm_end=%lx vm_page_prot=%lx vm_fileoff=%lx "
+		"address=%lx",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#176: FILE: drivers/infiniband/hw/ehca/ehca_uverbs.c:137:
+
+

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#213: FILE: drivers/infiniband/hw/ehca/ehca_uverbs.c:174:
+static struct vm_operations_struct ehcau_vm_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#364: FILE: drivers/infiniband/hw/ehca/ehca_uverbs.c:325:
+int ehca_mmap_nopage(u64 foffset, u64 length, void ** mapped,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#365: FILE: drivers/infiniband/hw/ehca/ehca_uverbs.c:326:
+		     struct vm_area_struct ** vma)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#369: FILE: drivers/infiniband/hw/ehca/ehca_uverbs.c:330:
+	*mapped = (void*)do_mmap(NULL,0, length, PROT_WRITE,

ERROR:SPACING: space required after that ',' (ctx:VxV)
#369: FILE: drivers/infiniband/hw/ehca/ehca_uverbs.c:330:
+	*mapped = (void*)do_mmap(NULL,0, length, PROT_WRITE,
 	                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#394: FILE: drivers/infiniband/hw/ehca/ehca_uverbs.c:355:
+int ehca_mmap_register(u64 physical, void ** mapped,

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#395: FILE: drivers/infiniband/hw/ehca/ehca_uverbs.c:356:
+		       struct vm_area_struct ** vma)

WARNING:TYPO_SPELLING: 'could'nt' may be misspelled - perhaps 'couldn't'?
#402: FILE: drivers/infiniband/hw/ehca/ehca_uverbs.c:363:
+		EDEB(4, "could'nt mmap physical=%lx", physical);
 		         ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#428: FILE: drivers/infiniband/hw/ehca/ehca_uverbs.c:389:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#430: FILE: drivers/infiniband/hw/ehca/ehca_uverbs.c:391:
+int ehca_munmap(unsigned long addr, size_t len) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#433: FILE: drivers/infiniband/hw/ehca/ehca_uverbs.c:394:
+	struct mm_struct *mm = current->mm;
+	if (mm) {

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.46621.commit.45375a11db6f30c344f83e94520e4697177a72f7 total: 7 errors, 8 warnings, 2 checks, 400 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.46621.commit.45375a11db6f30c344f83e94520e4697177a72f7 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
