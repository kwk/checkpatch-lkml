CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/topology.h> instead of <asm/topology.h>
#75: FILE: arch/x86_64/kernel/vsyscall.c:39:
+#include <asm/topology.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#93: FILE: arch/x86_64/kernel/vsyscall.c:136:
+/* Fast way to get current CPU and node.
+   This helps to do per node and per CPU caches in user space.

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#99: FILE: arch/x86_64/kernel/vsyscall.c:142:
+   All arguments can be NULL. */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#101: FILE: arch/x86_64/kernel/vsyscall.c:144:
+vgetcpu(unsigned *cpu, unsigned *node, struct getcpu_cache *tcache)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#101: FILE: arch/x86_64/kernel/vsyscall.c:144:
+vgetcpu(unsigned *cpu, unsigned *node, struct getcpu_cache *tcache)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#107: FILE: arch/x86_64/kernel/vsyscall.c:150:
+	/* Fast cache - only recompute value once per jiffies and avoid
+	   relatively costly rdtscp/cpuid otherwise.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#113: FILE: arch/x86_64/kernel/vsyscall.c:156:
+	   If you don't like it pass NULL. */

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#114: FILE: arch/x86_64/kernel/vsyscall.c:157:
+	if (tcache && tcache->t0 == (j = __jiffies)) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:BRACES: Unbalanced braces around else statement
#157: FILE: arch/x86_64/kernel/vsyscall.c:263:
+		else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#159: FILE: arch/x86_64/kernel/vsyscall.c:265:
+			/* the notifier is unfortunately not executed on the
+			   target CPU */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#159: FILE: arch/x86_64/kernel/vsyscall.c:265:
+			   target CPU */

ERROR:SPACING: space required after that ',' (ctx:VxV)
#160: FILE: arch/x86_64/kernel/vsyscall.c:266:
+			smp_call_function_single(cpu,write_rdtscp_cb,info,0,1);
 			                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#160: FILE: arch/x86_64/kernel/vsyscall.c:266:
+			smp_call_function_single(cpu,write_rdtscp_cb,info,0,1);
 			                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#160: FILE: arch/x86_64/kernel/vsyscall.c:266:
+			smp_call_function_single(cpu,write_rdtscp_cb,info,0,1);
 			                                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#160: FILE: arch/x86_64/kernel/vsyscall.c:266:
+			smp_call_function_single(cpu,write_rdtscp_cb,info,0,1);
 			                                                   ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#167: FILE: arch/x86_64/kernel/vsyscall.c:273:
+	/* Store cpu number in limit so that it can be loaded quickly
+	   in user space in vgetcpu.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#168: FILE: arch/x86_64/kernel/vsyscall.c:274:
+	   12 bits for the CPU and 8 bits for the node. */

CHECK:SPACING: No space is necessary after a cast
#183: FILE: arch/x86_64/kernel/vsyscall.c:296:
+	BUG_ON((unsigned long) &vgetcpu != VSYSCALL_ADDR(__NR_vgetcpu));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#183: FILE: arch/x86_64/kernel/vsyscall.c:296:
+	BUG_ON((unsigned long) &vgetcpu != VSYSCALL_ADDR(__NR_vgetcpu));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#203: FILE: include/asm-x86_64/vsyscall.h:20:
+#define __section_vgetcpu_mode __attribute__ ((unused, __section__ (".vgetcpu_mode"), aligned(16)))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#203: FILE: include/asm-x86_64/vsyscall.h:20:
+#define __section_vgetcpu_mode __attribute__ ((unused, __section__ (".vgetcpu_mode"), aligned(16)))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".vgetcpu_mode") over __attribute__((__section__(".vgetcpu_mode")))
#203: FILE: include/asm-x86_64/vsyscall.h:20:
+#define __section_vgetcpu_mode __attribute__ ((unused, __section__ (".vgetcpu_mode"), aligned(16)))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(16) over __attribute__((aligned(16)))
#203: FILE: include/asm-x86_64/vsyscall.h:20:
+#define __section_vgetcpu_mode __attribute__ ((unused, __section__ (".vgetcpu_mode"), aligned(16)))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: __always_unused or __maybe_unused is preferred over __attribute__((__unused__))
#203: FILE: include/asm-x86_64/vsyscall.h:20:
+#define __section_vgetcpu_mode __attribute__ ((unused, __section__ (".vgetcpu_mode"), aligned(16)))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#237: FILE: include/asm-x86_64/vsyscall.h:66:
+extern void vsyscall_set_cpu(int cpu);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:CODE_INDENT: code indent should use tabs where possible
#265: FILE: arch/x86_64/kernel/time.c:992:
+ ^Iif (cpu_has(&boot_cpu_data, X86_FEATURE_RDTSCP))$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#265: FILE: arch/x86_64/kernel/time.c:992:
+ ^Iif (cpu_has(&boot_cpu_data, X86_FEATURE_RDTSCP))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#265: FILE: arch/x86_64/kernel/time.c:992:
+ ^Iif (cpu_has(&boot_cpu_data, X86_FEATURE_RDTSCP))$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#340: FILE: include/asm-x86_64/smp.h:142:
+static inline int smp_call_function_single(int cpuid, void (*func) (void *info),
+				void *info, int retry, int wait)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#355: FILE: include/linux/getcpu.h:1:
+#ifndef _LINUX_GETCPU_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'upto' may be misspelled - perhaps 'up to'?
#358: FILE: include/linux/getcpu.h:4:
+/* Cache for getcpu() to speed it up. Results might be upto a jiffie
                                                        ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#359: FILE: include/linux/getcpu.h:5:
+/* Cache for getcpu() to speed it up. Results might be upto a jiffie
+   out of date, but will be faster.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#363: FILE: include/linux/getcpu.h:9:
+   If you want 100% accurate information pass NULL instead. */

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.49099.commit.3f5784f2b86ae20bc69922560996f3059e3923f2 total: 7 errors, 21 warnings, 5 checks, 264 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.49099.commit.3f5784f2b86ae20bc69922560996f3059e3923f2 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
