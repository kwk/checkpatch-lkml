CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#134: FILE: arch/m68k/kernel/ints.c:127:
+	for (node = nodes, i = NUM_IRQ_NODES-1; i >= 0; node++, i--) {
 	                                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#157: FILE: arch/m68k/kernel/ints.c:165:
+	if (irq >= SYS_IRQS || !(contr = irq_controller[irq])) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#160: FILE: arch/m68k/kernel/ints.c:167:
+		       __FUNCTION__, irq, node->devname);

ERROR:CODE_INDENT: code indent should use tabs where possible
#207: FILE: arch/m68k/kernel/ints.c:199:
+                    irqreturn_t (*handler)(int, void *, struct pt_regs *),$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#207: FILE: arch/m68k/kernel/ints.c:199:
+                    irqreturn_t (*handler)(int, void *, struct pt_regs *),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#208: FILE: arch/m68k/kernel/ints.c:200:
+                    unsigned long flags, const char *devname, void *dev_id)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#208: FILE: arch/m68k/kernel/ints.c:200:
+                    unsigned long flags, const char *devname, void *dev_id)$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#236: FILE: arch/m68k/kernel/ints.c:227:
+	if (irq >= SYS_IRQS || !(contr = irq_controller[irq])) {

CHECK:BRACES: Unbalanced braces around else statement
#256: FILE: arch/m68k/kernel/ints.c:244:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#257: FILE: arch/m68k/kernel/ints.c:245:
+		printk("%s: Removing probably wrong IRQ %d\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#258: FILE: arch/m68k/kernel/ints.c:246:
+		       __FUNCTION__, irq);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#283: FILE: arch/m68k/kernel/ints.c:267:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#319: FILE: arch/m68k/kernel/ints.c:343:
+	if (i < SYS_IRQS && irq_list[i]) {
[...]
 	} else if (i == SYS_IRQS)
[...]

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#322: FILE: arch/m68k/kernel/ints.c:346:
+		seq_printf(p, "%s %u: %10u %s", contr->name, i, kstat_cpu(0).irqs[i], node->devname);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#513: FILE: include/asm-m68k/irq.h:107:
+	int		(*handler)(int, void *, struct pt_regs *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#513: FILE: include/asm-m68k/irq.h:107:
+	int		(*handler)(int, void *, struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#513: FILE: include/asm-m68k/irq.h:107:
+	int		(*handler)(int, void *, struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#526: FILE: include/asm-m68k/irq.h:118:
+	int		(*handler)(int, void *, struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#526: FILE: include/asm-m68k/irq.h:118:
+	int		(*handler)(int, void *, struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#526: FILE: include/asm-m68k/irq.h:118:
+	int		(*handler)(int, void *, struct pt_regs *);

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#534: FILE: include/asm-m68k/irq.h:126:
+	spinlock_t lock;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#541: FILE: include/asm-m68k/irq.h:133:
+extern int m68k_irq_startup(unsigned int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#541: FILE: include/asm-m68k/irq.h:133:
+extern int m68k_irq_startup(unsigned int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#542: FILE: include/asm-m68k/irq.h:134:
+extern void m68k_irq_shutdown(unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#542: FILE: include/asm-m68k/irq.h:134:
+extern void m68k_irq_shutdown(unsigned int);

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.65661.commit.bdc90f76e2b4358686fa3801c7804e21306874e9 total: 4 errors, 14 warnings, 7 checks, 430 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.65661.commit.bdc90f76e2b4358686fa3801c7804e21306874e9 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
