WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#60: FILE: drivers/scsi/libsas/Kconfig:33:
+config SCSI_SAS_SATL
+	tristate "Serial ATA Translation Layer (SATL) on SAS controllers"
+	depends on SCSI_SAS_LIBSAS && ATA
+	default y
+	help
+	  This provides an ATA translation layer between libsas and
+	  libata to load SATA devices that are connected to SAS
+	  controllers.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:BRACES: braces {} are not necessary for single statement blocks
#120: FILE: drivers/scsi/libsas/sas_scsi_host.c:580:
+	if (dev_is_sata(dev)) {
+		return satl_ops->ioctl(sdev, cmd, arg);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#212: FILE: drivers/scsi/libsas/sas_scsi_host.c:960:
+	extern kmem_cache_t *sas_task_cache;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#230: FILE: drivers/scsi/libsas/sas_scsi_host.c:978:
+		extern kmem_cache_t *sas_task_cache;

WARNING:LINE_SPACING: Missing a blank line after declarations
#231: FILE: drivers/scsi/libsas/sas_scsi_host.c:979:
+		extern kmem_cache_t *sas_task_cache;
+		BUG_ON(!list_empty(&task->list));

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#231: FILE: drivers/scsi/libsas/sas_scsi_host.c:979:
+		BUG_ON(!list_empty(&task->list));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#297: FILE: drivers/scsi/libsas/sas_scsi_host.c:1052:
+EXPORT_SYMBOL_GPL(sas_unregister_satl);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#298: FILE: drivers/scsi/libsas/sas_scsi_host.c:1053:
+EXPORT_SYMBOL_GPL(sas_queue_up);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#299: FILE: drivers/scsi/libsas/sas_scsi_host.c:1054:
+EXPORT_SYMBOL_GPL(sas_alloc_task);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#300: FILE: drivers/scsi/libsas/sas_scsi_host.c:1055:
+EXPORT_SYMBOL_GPL(sas_free_task);

WARNING:SPACING: Unnecessary space before function pointer arguments
#358: FILE: include/scsi/sas_ata.h:34:
+	int (*init_target) (struct domain_device *found_dev,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: Unnecessary space before function pointer arguments
#360: FILE: include/scsi/sas_ata.h:36:
+	int  (*queuecommand) (struct scsi_cmnd *cmd,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct scsi_cmnd *' should also have an identifier name
#361: FILE: include/scsi/sas_ata.h:37:
+			      void (*done)(struct scsi_cmnd *),

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:SPACING: Unnecessary space before function pointer arguments
#363: FILE: include/scsi/sas_ata.h:39:
+	int  (*ioctl) (struct scsi_device *dev, int cmd,

WARNING:SPACING: Unnecessary space before function pointer arguments
#365: FILE: include/scsi/sas_ata.h:41:
+	int  (*configure_port) (struct scsi_device *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct scsi_device *' should also have an identifier name
#365: FILE: include/scsi/sas_ata.h:41:
+	int  (*configure_port) (struct scsi_device *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_port *' should also have an identifier name
#365: FILE: include/scsi/sas_ata.h:41:
+	int  (*configure_port) (struct scsi_device *,

WARNING:SPACING: Unnecessary space before function pointer arguments
#367: FILE: include/scsi/sas_ata.h:43:
+	void (*deactivate_port) (struct ata_port *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_port *' should also have an identifier name
#367: FILE: include/scsi/sas_ata.h:43:
+	void (*deactivate_port) (struct ata_port *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#368: FILE: include/scsi/sas_ata.h:44:
+	void (*destroy_port) (struct ata_port *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_port *' should also have an identifier name
#368: FILE: include/scsi/sas_ata.h:44:
+	void (*destroy_port) (struct ata_port *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#369: FILE: include/scsi/sas_ata.h:45:
+	int  (*init_port) (struct ata_port *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_port *' should also have an identifier name
#369: FILE: include/scsi/sas_ata.h:45:
+	int  (*init_port) (struct ata_port *);

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.17275.commit.cba38e644f383b7572f0a10f6a4712041074b628 total: 0 errors, 23 warnings, 0 checks, 318 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.17275.commit.cba38e644f383b7572f0a10f6a4712041074b628 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
