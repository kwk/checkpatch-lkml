WARNING:LONG_LINE: line length of 141 exceeds 100 columns
#64: FILE: kernel/lockdep.c:1292:
+				printk("\nhash chain already cached, key: %016Lx tail class: [%p] %s\n", chain_key, class->key, class->name);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#64: FILE: kernel/lockdep.c:1292:
+				printk("\nhash chain already cached, key: %016Lx tail class: [%p] %s\n", chain_key, class->key, class->name);

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#64: FILE: kernel/lockdep.c:1292:
+				printk("\nhash chain already cached, key: %016Lx tail class: [%p] %s\n", chain_key, class->key, class->name);

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#69: FILE: kernel/lockdep.c:1297:
+		printk("\nnew hash chain, key: %016Lx tail class: [%p] %s\n", chain_key, class->key, class->name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#69: FILE: kernel/lockdep.c:1297:
+		printk("\nnew hash chain, key: %016Lx tail class: [%p] %s\n", chain_key, class->key, class->name);

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#69: FILE: kernel/lockdep.c:1297:
+		printk("\nnew hash chain, key: %016Lx tail class: [%p] %s\n", chain_key, class->key, class->name);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'check == 2'
#78: FILE: kernel/lockdep.c:2147:
+	if (!trylock && (check == 2) && lookup_chain_cache(chain_key, class)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.11641.commit.d3ee77ecee650335a7d25cbc24e248ad02a1c776 total: 0 errors, 6 warnings, 1 checks, 29 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.11641.commit.d3ee77ecee650335a7d25cbc24e248ad02a1c776 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
