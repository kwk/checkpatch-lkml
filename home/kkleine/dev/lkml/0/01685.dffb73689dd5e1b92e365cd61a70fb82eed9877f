WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#46: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#51: FILE: include/linux/netfilter_ipv6/ip6t_TCPMSS.h:1:
+#ifndef _IP6T_TCPMSS_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'u_int16_t'
#55: FILE: include/linux/netfilter_ipv6/ip6t_TCPMSS.h:5:
+	u_int16_t mss;

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#69: FILE: net/ipv6/netfilter/Kconfig:157:
+config IP6_NF_TARGET_TCPMSS
+	tristate "TCPMSS target support"
+	depends on IP6_NF_IPTABLES
+	---help---
+	  This option adds a `TCPMSS' target, which allows you to alter the
+	  MSS value of TCP SYN packets, to control the maximum size for that
+	  connection (usually limiting it to your outgoing interface's MTU
+	  minus 60).
+
+	  This is used to overcome criminally braindead ISPs or servers which
+	  block ICMPv6 Packet Too Big packets.  The symptoms of this
+	  problem are that everything works fine from your Linux
+	  firewall/router, but machines behind it can never exchange large
+	  packets:
+	  	1) Web browsers connect, then hang with no data received.
+	  	2) Small mail works fine, but large emails hang.
+	  	3) ssh works fine, but scp hangs after initial handshaking.
+
+	  Workaround: activate this option and add a rule to your firewall
+	  configuration like:
+
+	  ip6tables -A FORWARD -p tcp --tcp-flags SYN,RST SYN \
+	  		 -j TCPMSS --clamp-mss-to-pmtu
+
+	  To compile it as a module, choose M here.  If unsure, say N.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#116: FILE: net/ipv6/netfilter/ip6t_TCPMSS.c:1:
+/*

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'u_int8_t'
#142: FILE: net/ipv6/netfilter/ip6t_TCPMSS.c:27:
+optlen(const u_int8_t *opt, unsigned int offset)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#145: FILE: net/ipv6/netfilter/ip6t_TCPMSS.c:30:
+	if (opt[offset] <= TCPOPT_NOP || opt[offset+1] == 0)
 	                                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#148: FILE: net/ipv6/netfilter/ip6t_TCPMSS.c:33:
+		return opt[offset+1];
 		                 ^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'u_int8_t'
#162: FILE: net/ipv6/netfilter/ip6t_TCPMSS.c:47:
+	u_int8_t nexthdr;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'u_int16_t'
#164: FILE: net/ipv6/netfilter/ip6t_TCPMSS.c:49:
+	u_int16_t tcplen, newmss;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'u_int8_t'
#167: FILE: net/ipv6/netfilter/ip6t_TCPMSS.c:52:
+	u_int8_t *opt;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tcphoff < 0'
#175: FILE: net/ipv6/netfilter/ip6t_TCPMSS.c:60:
+	if ((tcphoff < 0) || (tcphoff > (*pskb)->len)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#177: FILE: net/ipv6/netfilter/ip6t_TCPMSS.c:62:
+			printk(KERN_ERR

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ip6t_tcpmss_target', this function's name, in a string
#178: FILE: net/ipv6/netfilter/ip6t_TCPMSS.c:63:
+			       "ip6t_tcpmss_target: can't find TCP header\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nexthdr != IPPROTO_TCP'
#182: FILE: net/ipv6/netfilter/ip6t_TCPMSS.c:67:
+	if ((nexthdr != IPPROTO_TCP) || (tcplen < sizeof(struct tcphdr))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tcplen < sizeof(struct tcphdr)'
#182: FILE: net/ipv6/netfilter/ip6t_TCPMSS.c:67:
+	if ((nexthdr != IPPROTO_TCP) || (tcplen < sizeof(struct tcphdr))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#185: FILE: net/ipv6/netfilter/ip6t_TCPMSS.c:70:
+			printk(KERN_ERR

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ip6t_tcpmss_target', this function's name, in a string
#186: FILE: net/ipv6/netfilter/ip6t_TCPMSS.c:71:
+			       "ip6t_tcpmss_target: bad TCP header\n");

WARNING:REPEATED_WORD: Possible repeated word: 'is'
#191: FILE: net/ipv6/netfilter/ip6t_TCPMSS.c:76:
+	/* Since it passed flags test in tcp match, we know it is is

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#192: FILE: net/ipv6/netfilter/ip6t_TCPMSS.c:77:
+	/* Since it passed flags test in tcp match, we know it is is
+	   not a fragment, and has data >= tcp header length.  SYN

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#195: FILE: net/ipv6/netfilter/ip6t_TCPMSS.c:80:
+	   badly. --RR */

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#196: FILE: net/ipv6/netfilter/ip6t_TCPMSS.c:81:
+	if (tcplen != tcph->doff*4) {
 	                        ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#198: FILE: net/ipv6/netfilter/ip6t_TCPMSS.c:83:
+			printk(KERN_ERR

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ip6t_tcpmss_target', this function's name, in a string
#199: FILE: net/ipv6/netfilter/ip6t_TCPMSS.c:84:
+			       "ip6t_tcpmss_target: bad length (%d bytes)\n",

CHECK:BRACES: braces {} should be used on all arms of this statement
#204: FILE: net/ipv6/netfilter/ip6t_TCPMSS.c:89:
+	if (tcpmssinfo->mss == IP6T_TCPMSS_CLAMP_PMTU) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#208: FILE: net/ipv6/netfilter/ip6t_TCPMSS.c:93:
+				printk(KERN_ERR "ip6t_tcpmss_target: "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ip6t_tcpmss_target', this function's name, in a string
#208: FILE: net/ipv6/netfilter/ip6t_TCPMSS.c:93:
+				printk(KERN_ERR "ip6t_tcpmss_target: "

WARNING:SPLIT_STRING: quoted string split across lines
#209: FILE: net/ipv6/netfilter/ip6t_TCPMSS.c:94:
+				printk(KERN_ERR "ip6t_tcpmss_target: "
+				       "unknown or invalid path-MTU (%d)\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:BRACES: Unbalanced braces around else statement
#216: FILE: net/ipv6/netfilter/ip6t_TCPMSS.c:101:
+	} else

ERROR:CODE_INDENT: code indent should use tabs where possible
#219: FILE: net/ipv6/netfilter/ip6t_TCPMSS.c:104:
+ ^Iopt = (u_int8_t *)tcph;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#219: FILE: net/ipv6/netfilter/ip6t_TCPMSS.c:104:
+ ^Iopt = (u_int8_t *)tcph;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#219: FILE: net/ipv6/netfilter/ip6t_TCPMSS.c:104:
+ ^Iopt = (u_int8_t *)tcph;$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#220: FILE: net/ipv6/netfilter/ip6t_TCPMSS.c:105:
+	for (i = sizeof(struct tcphdr); i < tcph->doff*4; i += optlen(opt, i)) {
 	                                              ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#221: FILE: net/ipv6/netfilter/ip6t_TCPMSS.c:106:
+		if (opt[i] == TCPOPT_MSS && tcph->doff*4 - i >= TCPOLEN_MSS &&
 		                                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#222: FILE: net/ipv6/netfilter/ip6t_TCPMSS.c:107:
+		    opt[i+1] == TCPOLEN_MSS) {
 		         ^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'u_int16_t'
#223: FILE: net/ipv6/netfilter/ip6t_TCPMSS.c:108:
+			u_int16_t oldmss;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#225: FILE: net/ipv6/netfilter/ip6t_TCPMSS.c:110:
+			oldmss = (opt[i+2] << 8) | opt[i+3];
 			               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#225: FILE: net/ipv6/netfilter/ip6t_TCPMSS.c:110:
+			oldmss = (opt[i+2] << 8) | opt[i+3];
 			                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#231: FILE: net/ipv6/netfilter/ip6t_TCPMSS.c:116:
+			opt[i+2] = (newmss & 0xff00) >> 8;
 			     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#232: FILE: net/ipv6/netfilter/ip6t_TCPMSS.c:117:
+			opt[i+3] = (newmss & 0x00ff);
 			     ^

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#241: FILE: net/ipv6/netfilter/ip6t_TCPMSS.c:126:
+	/*
+	 * MSS Option not found ?! add it..

ERROR:CODE_INDENT: code indent should use tabs where possible
#258: FILE: net/ipv6/netfilter/ip6t_TCPMSS.c:143:
+ ^Iopt = (u_int8_t *)tcph + sizeof(struct tcphdr);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#258: FILE: net/ipv6/netfilter/ip6t_TCPMSS.c:143:
+ ^Iopt = (u_int8_t *)tcph + sizeof(struct tcphdr);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#258: FILE: net/ipv6/netfilter/ip6t_TCPMSS.c:143:
+ ^Iopt = (u_int8_t *)tcph + sizeof(struct tcphdr);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#261: FILE: net/ipv6/netfilter/ip6t_TCPMSS.c:146:
+ ^Inf_proto_csum_replace2(&tcph->check, *pskb,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#261: FILE: net/ipv6/netfilter/ip6t_TCPMSS.c:146:
+ ^Inf_proto_csum_replace2(&tcph->check, *pskb,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#261: FILE: net/ipv6/netfilter/ip6t_TCPMSS.c:146:
+ ^Inf_proto_csum_replace2(&tcph->check, *pskb,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#262: FILE: net/ipv6/netfilter/ip6t_TCPMSS.c:147:
+ ^I^I^I^Ihtons(tcplen), htons(tcplen + TCPOLEN_MSS), 1);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#262: FILE: net/ipv6/netfilter/ip6t_TCPMSS.c:147:
+ ^I^I^I^Ihtons(tcplen), htons(tcplen + TCPOLEN_MSS), 1);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#262: FILE: net/ipv6/netfilter/ip6t_TCPMSS.c:147:
+ 	nf_proto_csum_replace2(&tcph->check, *pskb,
+ 				htons(tcplen), htons(tcplen + TCPOLEN_MSS), 1);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#262: FILE: net/ipv6/netfilter/ip6t_TCPMSS.c:147:
+ ^I^I^I^Ihtons(tcplen), htons(tcplen + TCPOLEN_MSS), 1);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#268: FILE: net/ipv6/netfilter/ip6t_TCPMSS.c:153:
+ ^Inf_proto_csum_replace4(&tcph->check, *pskb, 0, *((__be32 *)opt), 0);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#268: FILE: net/ipv6/netfilter/ip6t_TCPMSS.c:153:
+ ^Inf_proto_csum_replace4(&tcph->check, *pskb, 0, *((__be32 *)opt), 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#268: FILE: net/ipv6/netfilter/ip6t_TCPMSS.c:153:
+ ^Inf_proto_csum_replace4(&tcph->check, *pskb, 0, *((__be32 *)opt), 0);$

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#271: FILE: net/ipv6/netfilter/ip6t_TCPMSS.c:156:
+	tcph->doff += TCPOLEN_MSS/4;
 	                         ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#272: FILE: net/ipv6/netfilter/ip6t_TCPMSS.c:157:
+ ^Inf_proto_csum_replace2(&tcph->check, *pskb,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#272: FILE: net/ipv6/netfilter/ip6t_TCPMSS.c:157:
+ ^Inf_proto_csum_replace2(&tcph->check, *pskb,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#272: FILE: net/ipv6/netfilter/ip6t_TCPMSS.c:157:
+ ^Inf_proto_csum_replace2(&tcph->check, *pskb,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#273: FILE: net/ipv6/netfilter/ip6t_TCPMSS.c:158:
+ ^I^I^I^Ioldval, ((__be16 *)tcph)[6], 0);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#273: FILE: net/ipv6/netfilter/ip6t_TCPMSS.c:158:
+ ^I^I^I^Ioldval, ((__be16 *)tcph)[6], 0);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#273: FILE: net/ipv6/netfilter/ip6t_TCPMSS.c:158:
+ 	nf_proto_csum_replace2(&tcph->check, *pskb,
+ 				oldval, ((__be16 *)tcph)[6], 0);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#273: FILE: net/ipv6/netfilter/ip6t_TCPMSS.c:158:
+ ^I^I^I^Ioldval, ((__be16 *)tcph)[6], 0);$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#309: FILE: net/ipv6/netfilter/ip6t_TCPMSS.c:194:
+		printk("TCPMSS: path-MTU clamping only supported in "

WARNING:SPLIT_STRING: quoted string split across lines
#310: FILE: net/ipv6/netfilter/ip6t_TCPMSS.c:195:
+		printk("TCPMSS: path-MTU clamping only supported in "
+		       "FORWARD, OUTPUT and POSTROUTING hooks\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#316: FILE: net/ipv6/netfilter/ip6t_TCPMSS.c:201:
+	printk("TCPMSS: Only works on TCP SYN packets\n");

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.01685.commit.dffb73689dd5e1b92e365cd61a70fb82eed9877f total: 7 errors, 34 warnings, 24 checks, 274 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.01685.commit.dffb73689dd5e1b92e365cd61a70fb82eed9877f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
