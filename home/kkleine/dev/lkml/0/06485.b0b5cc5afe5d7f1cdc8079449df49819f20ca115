WARNING:TYPO_SPELLING: 'arbirary' may be misspelled - perhaps 'arbitrary'?
#34: 
driver can allocate arbirary size of devres data which is associated
                    ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#106: FILE: drivers/base/base.h:47:
+extern void devres_release_all(struct device *dev);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#149: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#154: FILE: drivers/base/devres.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#155: FILE: drivers/base/devres.c:2:
+ * drivers/base/devres.c - device resource management

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#189: FILE: drivers/base/devres.c:36:
+static int log_devres = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#190: FILE: drivers/base/devres.c:37:
+module_param_named(log, log_devres, int, S_IRUGO | S_IWUSR);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:PREFER_DEV_LEVEL: Prefer dev_err(... to dev_printk(KERN_ERR, ...
#203: FILE: drivers/base/devres.c:50:
+		dev_printk(KERN_ERR, dev, "DEVRES %3s %p %s (%lu bytes)\n",

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#225: FILE: drivers/base/devres.c:72:
+static struct devres_group * node_to_group(struct devres_node *node)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#234: FILE: drivers/base/devres.c:81:
+static __always_inline struct devres * alloc_dr(dr_release_t release,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#253: FILE: drivers/base/devres.c:100:
+	BUG_ON(!list_empty(&node->entry));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#271: FILE: drivers/base/devres.c:118:
+void * __devres_alloc(dr_release_t release, size_t size, gfp_t gfp,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#284: FILE: drivers/base/devres.c:131:
+void * devres_alloc(dr_release_t release, size_t size, gfp_t gfp)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#307: FILE: drivers/base/devres.c:154:
+		BUG_ON(!list_empty(&dr->node.entry));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#365: FILE: drivers/base/devres.c:212:
+void * devres_find(struct device *dev, dr_release_t release,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#395: FILE: drivers/base/devres.c:242:
+void * devres_get(struct device *dev, void *new_res,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#431: FILE: drivers/base/devres.c:278:
+void * devres_remove(struct device *dev, dr_release_t release,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#529: FILE: drivers/base/devres.c:376:
+		BUG_ON(!grp || list_empty(&grp->node[0].entry));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#535: FILE: drivers/base/devres.c:382:
+		BUG_ON(grp->color <= 0 || grp->color > 2);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#600: FILE: drivers/base/devres.c:447:
+void * devres_open_group(struct device *dev, void *id, gfp_t gfp)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#627: FILE: drivers/base/devres.c:474:
+static struct devres_group * find_group(struct device *dev, void *id)

CHECK:BRACES: braces {} should be used on all arms of this statement
#639: FILE: drivers/base/devres.c:486:
+		if (id) {
[...]
+		} else if (list_empty(&grp->node[1].entry))
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#691: FILE: drivers/base/devres.c:538:
+	if (grp) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#695: FILE: drivers/base/devres.c:542:
+	} else

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#768: FILE: drivers/base/devres.c:615:
+void * devm_kzalloc(struct device *dev, size_t size, gfp_t gfp)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#812: FILE: include/linux/device.h:355:
+extern void * __devres_alloc(dr_release_t release, size_t size, gfp_t gfp,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#812: FILE: include/linux/device.h:355:
+extern void * __devres_alloc(dr_release_t release, size_t size, gfp_t gfp,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#817: FILE: include/linux/device.h:360:
+extern void * devres_alloc(dr_release_t release, size_t size, gfp_t gfp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#817: FILE: include/linux/device.h:360:
+extern void * devres_alloc(dr_release_t release, size_t size, gfp_t gfp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#819: FILE: include/linux/device.h:362:
+extern void devres_free(void *res);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#820: FILE: include/linux/device.h:363:
+extern void devres_add(struct device *dev, void *res);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#821: FILE: include/linux/device.h:364:
+extern void * devres_find(struct device *dev, dr_release_t release,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#821: FILE: include/linux/device.h:364:
+extern void * devres_find(struct device *dev, dr_release_t release,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#823: FILE: include/linux/device.h:366:
+extern void * devres_get(struct device *dev, void *new_res,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#823: FILE: include/linux/device.h:366:
+extern void * devres_get(struct device *dev, void *new_res,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#825: FILE: include/linux/device.h:368:
+extern void * devres_remove(struct device *dev, dr_release_t release,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#825: FILE: include/linux/device.h:368:
+extern void * devres_remove(struct device *dev, dr_release_t release,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#827: FILE: include/linux/device.h:370:
+extern int devres_destroy(struct device *dev, dr_release_t release,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#831: FILE: include/linux/device.h:374:
+extern void * __must_check devres_open_group(struct device *dev, void *id,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#833: FILE: include/linux/device.h:376:
+extern void devres_close_group(struct device *dev, void *id);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#834: FILE: include/linux/device.h:377:
+extern void devres_remove_group(struct device *dev, void *id);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#835: FILE: include/linux/device.h:378:
+extern int devres_release_group(struct device *dev, void *id);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#838: FILE: include/linux/device.h:381:
+extern void *devm_kzalloc(struct device *dev, size_t size, gfp_t gfp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#839: FILE: include/linux/device.h:382:
+extern void devm_kfree(struct device *dev, void *p);

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#848: FILE: include/linux/device.h:426:
+	spinlock_t		devres_lock;

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.06485.commit.b0b5cc5afe5d7f1cdc8079449df49819f20ca115 total: 16 errors, 10 warnings, 19 checks, 753 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.06485.commit.b0b5cc5afe5d7f1cdc8079449df49819f20ca115 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
