WARNING:LEADING_SPACE: please, no spaces at the start of a line
#49: FILE: arch/x86_64/pci/mmconfig.c:169:
+       acpi_status status;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#50: FILE: arch/x86_64/pci/mmconfig.c:170:
+       struct acpi_device_info *info;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#51: FILE: arch/x86_64/pci/mmconfig.c:171:
+       struct acpi_buffer buffer = {ACPI_ALLOCATE_BUFFER, NULL};$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#52: FILE: arch/x86_64/pci/mmconfig.c:172:
+       int i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#54: FILE: arch/x86_64/pci/mmconfig.c:174:
+       status = acpi_get_object_info(handle, &buffer);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#55: FILE: arch/x86_64/pci/mmconfig.c:175:
+       if (ACPI_FAILURE(status))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#55: FILE: arch/x86_64/pci/mmconfig.c:175:
+       if (ACPI_FAILURE(status))
+	       return 0;

WARNING:TABSTOP: Statements should start on a tabstop
#56: FILE: arch/x86_64/pci/mmconfig.c:176:
+	       return 0;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#57: FILE: arch/x86_64/pci/mmconfig.c:177:
+       info = buffer.pointer;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#58: FILE: arch/x86_64/pci/mmconfig.c:178:
+       if ((info->valid & ACPI_VALID_HID) &&$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#58: FILE: arch/x86_64/pci/mmconfig.c:178:
+       if ((info->valid & ACPI_VALID_HID) &&
[...]
+	       kfree(buffer.pointer);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#59: FILE: arch/x86_64/pci/mmconfig.c:179:
+       if ((info->valid & ACPI_VALID_HID) &&
+		       (!strcmp(ACPI_MB_HID1, info->hardware_id.value) ||

WARNING:TABSTOP: Statements should start on a tabstop
#62: FILE: arch/x86_64/pci/mmconfig.c:182:
+	       return 1;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#63: FILE: arch/x86_64/pci/mmconfig.c:183:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#64: FILE: arch/x86_64/pci/mmconfig.c:184:
+       if (info->valid & ACPI_VALID_CID) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#64: FILE: arch/x86_64/pci/mmconfig.c:184:
+       if (info->valid & ACPI_VALID_CID) {
+	       for (i=0; i < info->compatibility_id.count; i++) {

WARNING:TABSTOP: Statements should start on a tabstop
#65: FILE: arch/x86_64/pci/mmconfig.c:185:
+	       for (i=0; i < info->compatibility_id.count; i++) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#65: FILE: arch/x86_64/pci/mmconfig.c:185:
+	       for (i=0; i < info->compatibility_id.count; i++) {
+		       if (!strcmp(ACPI_MB_HID1,

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#65: FILE: arch/x86_64/pci/mmconfig.c:185:
+	       for (i=0; i < info->compatibility_id.count; i++) {
 	             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TABSTOP: Statements should start on a tabstop
#66: FILE: arch/x86_64/pci/mmconfig.c:186:
+		       if (!strcmp(ACPI_MB_HID1,

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 40)
#66: FILE: arch/x86_64/pci/mmconfig.c:186:
+		       if (!strcmp(ACPI_MB_HID1,
[...]
+                                        kfree(buffer.pointer);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#67: FILE: arch/x86_64/pci/mmconfig.c:187:
+		       if (!strcmp(ACPI_MB_HID1,
+				info->compatibility_id.id[i].value) ||

ERROR:CODE_INDENT: code indent should use tabs where possible
#70: FILE: arch/x86_64/pci/mmconfig.c:190:
+                                        kfree(buffer.pointer);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#70: FILE: arch/x86_64/pci/mmconfig.c:190:
+                                        kfree(buffer.pointer);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#71: FILE: arch/x86_64/pci/mmconfig.c:191:
+                                        return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#71: FILE: arch/x86_64/pci/mmconfig.c:191:
+                                        return 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#76: FILE: arch/x86_64/pci/mmconfig.c:196:
+        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#76: FILE: arch/x86_64/pci/mmconfig.c:196:
+        return 0;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#80: FILE: arch/x86_64/pci/mmconfig.c:200:
+static acpi_status __init check_mcfg_resource(struct acpi_resource *res,
+		void *data)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mcfg_res->start >= fixmem32->address'
#92: FILE: arch/x86_64/pci/mmconfig.c:212:
+		if ((mcfg_res->start >= fixmem32->address) &&
+			(mcfg_res->end <= (fixmem32->address +
+					   fixmem32->address_length))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#93: FILE: arch/x86_64/pci/mmconfig.c:213:
+		if ((mcfg_res->start >= fixmem32->address) &&
+			(mcfg_res->end <= (fixmem32->address +

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'res->type != ACPI_RESOURCE_TYPE_ADDRESS32'
#99: FILE: arch/x86_64/pci/mmconfig.c:219:
+	if ((res->type != ACPI_RESOURCE_TYPE_ADDRESS32) &&
+			(res->type != ACPI_RESOURCE_TYPE_ADDRESS64))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'res->type != ACPI_RESOURCE_TYPE_ADDRESS64'
#99: FILE: arch/x86_64/pci/mmconfig.c:219:
+	if ((res->type != ACPI_RESOURCE_TYPE_ADDRESS32) &&
+			(res->type != ACPI_RESOURCE_TYPE_ADDRESS64))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#100: FILE: arch/x86_64/pci/mmconfig.c:220:
+	if ((res->type != ACPI_RESOURCE_TYPE_ADDRESS32) &&
+			(res->type != ACPI_RESOURCE_TYPE_ADDRESS64))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'address.address_length <= 0'
#104: FILE: arch/x86_64/pci/mmconfig.c:224:
+	if (ACPI_FAILURE(status) || (address.address_length <= 0) ||
+			(address.resource_type != ACPI_MEMORY_RANGE))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'address.resource_type != ACPI_MEMORY_RANGE'
#104: FILE: arch/x86_64/pci/mmconfig.c:224:
+	if (ACPI_FAILURE(status) || (address.address_length <= 0) ||
+			(address.resource_type != ACPI_MEMORY_RANGE))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#105: FILE: arch/x86_64/pci/mmconfig.c:225:
+	if (ACPI_FAILURE(status) || (address.address_length <= 0) ||
+			(address.resource_type != ACPI_MEMORY_RANGE))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mcfg_res->start >= address.minimum'
#108: FILE: arch/x86_64/pci/mmconfig.c:228:
+	if ((mcfg_res->start >= address.minimum) &&
+			(mcfg_res->end <=
+			 (address.minimum +address.address_length))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#109: FILE: arch/x86_64/pci/mmconfig.c:229:
+	if ((mcfg_res->start >= address.minimum) &&
+			(mcfg_res->end <=

CHECK:SPACING: spaces preferred around that '+' (ctx:WxV)
#110: FILE: arch/x86_64/pci/mmconfig.c:230:
+			 (address.minimum +address.address_length))) {
 			                  ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#118: FILE: arch/x86_64/pci/mmconfig.c:238:
+static acpi_status __init find_mboard_resource(acpi_handle handle, u32 lvl,
+		void *context, void **rv)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#129: FILE: arch/x86_64/pci/mmconfig.c:249:
+		status = acpi_walk_resources(handle, METHOD_NAME__CRS,
+				check_mcfg_resource, context);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#143: FILE: arch/x86_64/pci/mmconfig.c:263:
+	acpi_walk_namespace(ACPI_TYPE_DEVICE, ACPI_ROOT_OBJECT,
+			ACPI_UINT32_MAX, find_mboard_resource,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#157: FILE: arch/x86_64/pci/mmconfig.c:285:
+		if (!is_acpi_reserved(pci_mmcfg_config[0].base_address,
+				pci_mmcfg_config[0].base_address +

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#159: FILE: arch/x86_64/pci/mmconfig.c:287:
+			printk(KERN_ERR

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#164: FILE: arch/x86_64/pci/mmconfig.c:290:
+			printk(KERN_ERR "PCI: Not using MMCONFIG.\n");

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.65615.commit.34df4ae8c5fff1d0957e2b784fb64a66768785c0 total: 4 errors, 24 warnings, 18 checks, 125 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.65615.commit.34df4ae8c5fff1d0957e2b784fb64a66768785c0 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
