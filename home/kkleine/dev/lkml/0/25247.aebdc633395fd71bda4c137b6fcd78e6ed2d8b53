ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#37: FILE: drivers/kvm/kvm_main.c:658:
+static int rmode_tss_base(struct kvm* kvm)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#40: FILE: drivers/kvm/kvm_main.c:661:
+	gfn_t base_gfn = kvm->memslots[0].base_gfn + kvm->memslots[0].npages - 3;
+	return base_gfn << PAGE_SHIFT;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#43: FILE: drivers/kvm/kvm_main.c:664:
+static int init_rmode_tss(struct kvm* kvm)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#54: FILE: drivers/kvm/kvm_main.c:675:
+		kvm_printf(kvm,"%s: gfn_to_page failed\n", __FUNCTION__);
 		              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#54: FILE: drivers/kvm/kvm_main.c:675:
+		kvm_printf(kvm,"%s: gfn_to_page failed\n", __FUNCTION__);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#60: FILE: drivers/kvm/kvm_main.c:681:
+	*(u16*)(page + 0x66) = TSS_BASE_SIZE + TSS_REDIRECTION_SIZE;

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#79: FILE: drivers/kvm/kvm_main.c:700:
+	asm ("movl $1, %%eax \n\t"

ERROR:SPACING: space prohibited before that close parenthesis ')'
#80: FILE: drivers/kvm/kvm_main.c:701:
+	     "movl %%eax, %0 \n\t" : "=g"(val) );

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#80: FILE: drivers/kvm/kvm_main.c:701:
+	     "movl %%eax, %0 \n\t" : "=g"(val) );

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#83: FILE: drivers/kvm/kvm_main.c:704:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((__packed__))
#87: FILE: drivers/kvm/kvm_main.c:708:
+	struct __attribute__ ((__packed__)) fx_image_s {

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#126: FILE: drivers/kvm/kvm_main.c:747:
+	extern asmlinkage void kvm_vmx_return(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#135: FILE: drivers/kvm/kvm_main.c:756:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#154: FILE: drivers/kvm/kvm_main.c:775:
+^I^Ivmcs_write32(GUEST_##seg##_AR_BYTES, 0x93); ^I\$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#259: FILE: drivers/kvm/kvm_main.c:880:
+	vmcs_write16(HOST_TR_SELECTOR, GDT_ENTRY_TSS*8);  /* 22.2.4 */
 	                                            ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#264: FILE: drivers/kvm/kvm_main.c:885:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#275: FILE: drivers/kvm/kvm_main.c:896:
+^I^I     ^I       (HOST_IS_64 << 9));  /* 22.2,1, 20.7.1 */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#275: FILE: drivers/kvm/kvm_main.c:896:
+^I^I     ^I       (HOST_IS_64 << 9));  /* 22.2,1, 20.7.1 */$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#275: FILE: drivers/kvm/kvm_main.c:896:
+	vmcs_write32_fixedbits(MSR_IA32_VMX_EXIT_CTLS_MSR, VM_EXIT_CONTROLS,
+		     	       (HOST_IS_64 << 9));  /* 22.2,1, 20.7.1 */

ERROR:CODE_INDENT: code indent should use tabs where possible
#305: FILE: drivers/kvm/kvm_main.c:926:
+                               VM_ENTRY_CONTROLS, 0);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#305: FILE: drivers/kvm/kvm_main.c:926:
+	vmcs_write32_fixedbits(MSR_IA32_VMX_ENTRY_CTLS_MSR,
+                               VM_ENTRY_CONTROLS, 0);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#305: FILE: drivers/kvm/kvm_main.c:926:
+                               VM_ENTRY_CONTROLS, 0);$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#358: FILE: drivers/kvm/kvm_main.c:993:
+	vcpu->host_fx_image = (char*)ALIGN((hva_t)vcpu->fx_buf,

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'var' - possible side-effects?
#490: FILE: drivers/kvm/kvm_main.c:1726:
+#define get_segment(var, seg) \
+	do { \
+		u32 ar; \
+		\
+		sregs->var.base = vmcs_readl(GUEST_##seg##_BASE); \
+		sregs->var.limit = vmcs_read32(GUEST_##seg##_LIMIT); \
+		sregs->var.selector = vmcs_read16(GUEST_##seg##_SELECTOR); \
+		ar = vmcs_read32(GUEST_##seg##_AR_BYTES); \
+		if (ar & AR_UNUSABLE_MASK) ar = 0; \
+		sregs->var.type = ar & 15; \
+		sregs->var.s = (ar >> 4) & 1; \
+		sregs->var.dpl = (ar >> 5) & 3; \
+		sregs->var.present = (ar >> 7) & 1; \
+		sregs->var.avl = (ar >> 12) & 1; \
+		sregs->var.l = (ar >> 13) & 1; \
+		sregs->var.db = (ar >> 14) & 1; \
+		sregs->var.g = (ar >> 15) & 1; \
+		sregs->var.unusable = (ar >> 16) & 1; \
+	} while (0);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'var' may be better as '(var)' to avoid precedence issues
#490: FILE: drivers/kvm/kvm_main.c:1726:
+#define get_segment(var, seg) \
+	do { \
+		u32 ar; \
+		\
+		sregs->var.base = vmcs_readl(GUEST_##seg##_BASE); \
+		sregs->var.limit = vmcs_read32(GUEST_##seg##_LIMIT); \
+		sregs->var.selector = vmcs_read16(GUEST_##seg##_SELECTOR); \
+		ar = vmcs_read32(GUEST_##seg##_AR_BYTES); \
+		if (ar & AR_UNUSABLE_MASK) ar = 0; \
+		sregs->var.type = ar & 15; \
+		sregs->var.s = (ar >> 4) & 1; \
+		sregs->var.dpl = (ar >> 5) & 3; \
+		sregs->var.present = (ar >> 7) & 1; \
+		sregs->var.avl = (ar >> 12) & 1; \
+		sregs->var.l = (ar >> 13) & 1; \
+		sregs->var.db = (ar >> 14) & 1; \
+		sregs->var.g = (ar >> 15) & 1; \
+		sregs->var.unusable = (ar >> 16) & 1; \
+	} while (0);

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#490: FILE: drivers/kvm/kvm_main.c:1726:
+#define get_segment(var, seg) \
+	do { \
+		u32 ar; \
+		\
+		sregs->var.base = vmcs_readl(GUEST_##seg##_BASE); \
+		sregs->var.limit = vmcs_read32(GUEST_##seg##_LIMIT); \
+		sregs->var.selector = vmcs_read16(GUEST_##seg##_SELECTOR); \
+		ar = vmcs_read32(GUEST_##seg##_AR_BYTES); \
+		if (ar & AR_UNUSABLE_MASK) ar = 0; \
+		sregs->var.type = ar & 15; \
+		sregs->var.s = (ar >> 4) & 1; \
+		sregs->var.dpl = (ar >> 5) & 3; \
+		sregs->var.present = (ar >> 7) & 1; \
+		sregs->var.avl = (ar >> 12) & 1; \
+		sregs->var.l = (ar >> 13) & 1; \
+		sregs->var.db = (ar >> 14) & 1; \
+		sregs->var.g = (ar >> 15) & 1; \
+		sregs->var.unusable = (ar >> 16) & 1; \
+	} while (0);

do {} while(0) macros should not have a trailing semicolon.

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#498: FILE: drivers/kvm/kvm_main.c:1734:
+		if (ar & AR_UNUSABLE_MASK) ar = 0; \

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'var' - possible side-effects?
#521: FILE: drivers/kvm/kvm_main.c:1757:
+#define get_dtable(var, table) \
+	sregs->var.limit = vmcs_read32(GUEST_##table##_LIMIT), \
+		sregs->var.base = vmcs_readl(GUEST_##table##_BASE)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'var' may be better as '(var)' to avoid precedence issues
#521: FILE: drivers/kvm/kvm_main.c:1757:
+#define get_dtable(var, table) \
+	sregs->var.limit = vmcs_read32(GUEST_##table##_LIMIT), \
+		sregs->var.base = vmcs_readl(GUEST_##table##_BASE)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'var' - possible side-effects?
#555: FILE: drivers/kvm/kvm_main.c:1791:
+#define set_segment(var, seg) \
+	do { \
+		u32 ar; \
+		\
+		vmcs_writel(GUEST_##seg##_BASE, sregs->var.base);  \
+		vmcs_write32(GUEST_##seg##_LIMIT, sregs->var.limit); \
+		vmcs_write16(GUEST_##seg##_SELECTOR, sregs->var.selector); \
+		if (sregs->var.unusable) { \
+			ar = (1 << 16); \
+		} else { \
+			ar = (sregs->var.type & 15); \
+			ar |= (sregs->var.s & 1) << 4; \
+			ar |= (sregs->var.dpl & 3) << 5; \
+			ar |= (sregs->var.present & 1) << 7; \
+			ar |= (sregs->var.avl & 1) << 12; \
+			ar |= (sregs->var.l & 1) << 13; \
+			ar |= (sregs->var.db & 1) << 14; \
+			ar |= (sregs->var.g & 1) << 15; \
+		} \
+		vmcs_write32(GUEST_##seg##_AR_BYTES, ar); \
+	} while (0);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'var' may be better as '(var)' to avoid precedence issues
#555: FILE: drivers/kvm/kvm_main.c:1791:
+#define set_segment(var, seg) \
+	do { \
+		u32 ar; \
+		\
+		vmcs_writel(GUEST_##seg##_BASE, sregs->var.base);  \
+		vmcs_write32(GUEST_##seg##_LIMIT, sregs->var.limit); \
+		vmcs_write16(GUEST_##seg##_SELECTOR, sregs->var.selector); \
+		if (sregs->var.unusable) { \
+			ar = (1 << 16); \
+		} else { \
+			ar = (sregs->var.type & 15); \
+			ar |= (sregs->var.s & 1) << 4; \
+			ar |= (sregs->var.dpl & 3) << 5; \
+			ar |= (sregs->var.present & 1) << 7; \
+			ar |= (sregs->var.avl & 1) << 12; \
+			ar |= (sregs->var.l & 1) << 13; \
+			ar |= (sregs->var.db & 1) << 14; \
+			ar |= (sregs->var.g & 1) << 15; \
+		} \
+		vmcs_write32(GUEST_##seg##_AR_BYTES, ar); \
+	} while (0);

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#555: FILE: drivers/kvm/kvm_main.c:1791:
+#define set_segment(var, seg) \
+	do { \
+		u32 ar; \
+		\
+		vmcs_writel(GUEST_##seg##_BASE, sregs->var.base);  \
+		vmcs_write32(GUEST_##seg##_LIMIT, sregs->var.limit); \
+		vmcs_write16(GUEST_##seg##_SELECTOR, sregs->var.selector); \
+		if (sregs->var.unusable) { \
+			ar = (1 << 16); \
+		} else { \
+			ar = (sregs->var.type & 15); \
+			ar |= (sregs->var.s & 1) << 4; \
+			ar |= (sregs->var.dpl & 3) << 5; \
+			ar |= (sregs->var.present & 1) << 7; \
+			ar |= (sregs->var.avl & 1) << 12; \
+			ar |= (sregs->var.l & 1) << 13; \
+			ar |= (sregs->var.db & 1) << 14; \
+			ar |= (sregs->var.g & 1) << 15; \
+		} \
+		vmcs_write32(GUEST_##seg##_AR_BYTES, ar); \
+	} while (0);

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#589: FILE: drivers/kvm/kvm_main.c:1825:
+#define set_dtable(var, table) \
+	vmcs_write32(GUEST_##table##_LIMIT, sregs->var.limit), \
+	vmcs_writel(GUEST_##table##_BASE, sregs->var.base)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'var' - possible side-effects?
#589: FILE: drivers/kvm/kvm_main.c:1825:
+#define set_dtable(var, table) \
+	vmcs_write32(GUEST_##table##_LIMIT, sregs->var.limit), \
+	vmcs_writel(GUEST_##table##_BASE, sregs->var.base)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'var' may be better as '(var)' to avoid precedence issues
#589: FILE: drivers/kvm/kvm_main.c:1825:
+#define set_dtable(var, table) \
+	vmcs_write32(GUEST_##table##_LIMIT, sregs->var.limit), \
+	vmcs_writel(GUEST_##table##_BASE, sregs->var.base)

WARNING:SIZEOF_PARENTHESIS: sizeof kvm_regs should be sizeof(kvm_regs)
#663: FILE: drivers/kvm/kvm_main.c:1899:
+		if (copy_from_user(&kvm_regs, (void *)arg, sizeof kvm_regs))

WARNING:SIZEOF_PARENTHESIS: sizeof kvm_regs should be sizeof(kvm_regs)
#669: FILE: drivers/kvm/kvm_main.c:1905:
+		if (copy_to_user((void *)arg, &kvm_regs, sizeof kvm_regs))

WARNING:SIZEOF_PARENTHESIS: sizeof kvm_regs should be sizeof(kvm_regs)
#678: FILE: drivers/kvm/kvm_main.c:1914:
+		if (copy_from_user(&kvm_regs, (void *)arg, sizeof kvm_regs))

WARNING:SIZEOF_PARENTHESIS: sizeof kvm_sregs should be sizeof(kvm_sregs)
#690: FILE: drivers/kvm/kvm_main.c:1926:
+		if (copy_from_user(&kvm_sregs, (void *)arg, sizeof kvm_sregs))

WARNING:SIZEOF_PARENTHESIS: sizeof kvm_sregs should be sizeof(kvm_sregs)
#696: FILE: drivers/kvm/kvm_main.c:1932:
+		if (copy_to_user((void *)arg, &kvm_sregs, sizeof kvm_sregs))

WARNING:SIZEOF_PARENTHESIS: sizeof kvm_sregs should be sizeof(kvm_sregs)
#705: FILE: drivers/kvm/kvm_main.c:1941:
+		if (copy_from_user(&kvm_sregs, (void *)arg, sizeof kvm_sregs))

WARNING:SIZEOF_PARENTHESIS: sizeof tr should be sizeof(tr)
#717: FILE: drivers/kvm/kvm_main.c:1953:
+		if (copy_from_user(&tr, (void *)arg, sizeof tr))

WARNING:SIZEOF_PARENTHESIS: sizeof tr should be sizeof(tr)
#723: FILE: drivers/kvm/kvm_main.c:1959:
+		if (copy_to_user((void *)arg, &tr, sizeof tr))

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.25247.commit.aebdc633395fd71bda4c137b6fcd78e6ed2d8b53 total: 10 errors, 19 warnings, 14 checks, 694 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.25247.commit.aebdc633395fd71bda4c137b6fcd78e6ed2d8b53 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
