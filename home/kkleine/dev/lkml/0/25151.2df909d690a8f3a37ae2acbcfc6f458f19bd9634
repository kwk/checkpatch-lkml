WARNING:UNKNOWN_COMMIT_ID: Unknown commit id '42fe507a262b2a2879ca62740c5312778ae78627', maybe rebased or not pulled?
#53: 
commit 42fe507a262b2a2879ca62740c5312778ae78627

WARNING:BAD_SIGN_OFF: Do not use whitespace before Signed-off-by:
#59: 
    Signed-off-by: David Woodhouse <dwmw2@infradead.org>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:BAD_SIGN_OFF: Do not use whitespace before Signed-off-by:
#71: 
    Signed-off-by: David Woodhouse <dwmw2@infradead.org>

WARNING:BAD_SIGN_OFF: Duplicate signature
#71: 
    Signed-off-by: David Woodhouse <dwmw2@infradead.org>

WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#89: FILE: Kconfig:31:
+source "drivers/battery/Kconfig"

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#118: FILE: battery/Kconfig:15:
+config OLPC_BATTERY
+       tristate "One Laptop Per Child battery"
+       depends on BATTERY_CLASS && X86_32
+       help
+         Say Y to enable support for the battery on the $100 laptop.
+
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#129: FILE: battery/battery-class.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#154: FILE: battery/battery-class.c:26:
+/* OMFG we can't just have a single 'show' routine which is given the
+   'class_attribute' as an argument -- we have to have 20-odd copies

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#155: FILE: battery/battery-class.c:27:
+   of almost identical routines */

ERROR:CODE_INDENT: code indent should use tabs where possible
#159: FILE: battery/battery-class.c:31:
+        struct battery_classdev *battery_cdev = class_get_devdata(dev);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#159: FILE: battery/battery-class.c:31:
+        struct battery_classdev *battery_cdev = class_get_devdata(dev);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#160: FILE: battery/battery-class.c:32:
+        ssize_t ret = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#160: FILE: battery/battery-class.c:32:
+        ssize_t ret = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#168: FILE: battery/battery-class.c:40:
+        ret = strlen(buf) + 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#168: FILE: battery/battery-class.c:40:
+        ret = strlen(buf) + 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#170: FILE: battery/battery-class.c:42:
+        return ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#170: FILE: battery/battery-class.c:42:
+        return ret;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#171: FILE: battery/battery-class.c:43:
+}  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#175: FILE: battery/battery-class.c:47:
+        struct battery_classdev *battery_cdev = class_get_devdata(dev);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#175: FILE: battery/battery-class.c:47:
+        struct battery_classdev *battery_cdev = class_get_devdata(dev);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#176: FILE: battery/battery-class.c:48:
+        ssize_t ret = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#176: FILE: battery/battery-class.c:48:
+        ssize_t ret = 0;$

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#183: FILE: battery/battery-class.c:55:
+	sprintf(buf, "%ld.%03ld\n", value/1000, value % 1000);
 	                                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#184: FILE: battery/battery-class.c:56:
+        ret = strlen(buf) + 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#184: FILE: battery/battery-class.c:56:
+        ret = strlen(buf) + 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#185: FILE: battery/battery-class.c:57:
+        return ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#185: FILE: battery/battery-class.c:57:
+        return ret;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#186: FILE: battery/battery-class.c:58:
+}  $

ERROR:CODE_INDENT: code indent should use tabs where possible
#190: FILE: battery/battery-class.c:62:
+        struct battery_classdev *battery_cdev = class_get_devdata(dev);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#190: FILE: battery/battery-class.c:62:
+        struct battery_classdev *battery_cdev = class_get_devdata(dev);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#191: FILE: battery/battery-class.c:63:
+        ssize_t ret = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#191: FILE: battery/battery-class.c:63:
+        ssize_t ret = 0;$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#193: FILE: battery/battery-class.c:65:
+	ret = battery_cdev->query_str(battery_cdev, attr, buf, PAGE_SIZE-1);
 	                                                                ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#198: FILE: battery/battery-class.c:70:
+        ret = strlen(buf) + 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#198: FILE: battery/battery-class.c:70:
+        ret = strlen(buf) + 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#199: FILE: battery/battery-class.c:71:
+        return ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#199: FILE: battery/battery-class.c:71:
+        return ret;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#200: FILE: battery/battery-class.c:72:
+}  $

ERROR:CODE_INDENT: code indent should use tabs where possible
#204: FILE: battery/battery-class.c:76:
+        struct battery_classdev *battery_cdev = class_get_devdata(dev);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#204: FILE: battery/battery-class.c:76:
+        struct battery_classdev *battery_cdev = class_get_devdata(dev);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#205: FILE: battery/battery-class.c:77:
+        ssize_t ret = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#205: FILE: battery/battery-class.c:77:
+        ssize_t ret = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#239: FILE: battery/battery-class.c:111:
+        ret = strlen(buf) + 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#239: FILE: battery/battery-class.c:111:
+        ret = strlen(buf) + 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#240: FILE: battery/battery-class.c:112:
+        return ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#240: FILE: battery/battery-class.c:112:
+        return ret;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#245: FILE: battery/battery-class.c:117:
+        struct battery_classdev *battery_cdev = class_get_devdata(dev);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#245: FILE: battery/battery-class.c:117:
+        struct battery_classdev *battery_cdev = class_get_devdata(dev);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#246: FILE: battery/battery-class.c:118:
+        ssize_t ret = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#246: FILE: battery/battery-class.c:118:
+        ssize_t ret = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#259: FILE: battery/battery-class.c:131:
+        ret = strlen(buf) + 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#259: FILE: battery/battery-class.c:131:
+        ret = strlen(buf) + 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#260: FILE: battery/battery-class.c:132:
+        return ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#260: FILE: battery/battery-class.c:132:
+        return ret;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#261: FILE: battery/battery-class.c:133:
+}  $

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#264: FILE: battery/battery-class.c:136:
+#define BATTERY_DEVICE_ATTR(_name, _attr, _type) \
+static ssize_t battery_attr_show_##_attr(struct class_device *dev, char *buf)	\
+{										\
+	return battery_attribute_show_##_type(dev, buf, BAT_INFO_##_attr);	\
+}										\
+static struct class_device_attribute class_device_attr_##_attr  = {		\
+        .attr = { .name = _name, .mode = 0444, .owner = THIS_MODULE },		\
+	.show = battery_attr_show_##_attr };

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:CODE_INDENT: code indent should use tabs where possible
#270: FILE: battery/battery-class.c:142:
+        .attr = { .name = _name, .mode = 0444, .owner = THIS_MODULE },^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#270: FILE: battery/battery-class.c:142:
+        .attr = { .name = _name, .mode = 0444, .owner = THIS_MODULE },^I^I\$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#273: FILE: battery/battery-class.c:145:
+static CLASS_DEVICE_ATTR(status,0444,battery_attribute_show_status, NULL);
                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#273: FILE: battery/battery-class.c:145:
+static CLASS_DEVICE_ATTR(status,0444,battery_attribute_show_status, NULL);
                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#274: FILE: battery/battery-class.c:146:
+static CLASS_DEVICE_ATTR(ac,0444,battery_attribute_show_ac_status, NULL);
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#274: FILE: battery/battery-class.c:146:
+static CLASS_DEVICE_ATTR(ac,0444,battery_attribute_show_ac_status, NULL);
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#275: FILE: battery/battery-class.c:147:
+BATTERY_DEVICE_ATTR("temp1",TEMP1,milli);
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#275: FILE: battery/battery-class.c:147:
+BATTERY_DEVICE_ATTR("temp1",TEMP1,milli);
                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#276: FILE: battery/battery-class.c:148:
+BATTERY_DEVICE_ATTR("temp1_name",TEMP1_NAME,string);
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#276: FILE: battery/battery-class.c:148:
+BATTERY_DEVICE_ATTR("temp1_name",TEMP1_NAME,string);
                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#277: FILE: battery/battery-class.c:149:
+BATTERY_DEVICE_ATTR("temp2",TEMP2,milli);
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#277: FILE: battery/battery-class.c:149:
+BATTERY_DEVICE_ATTR("temp2",TEMP2,milli);
                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#278: FILE: battery/battery-class.c:150:
+BATTERY_DEVICE_ATTR("temp2_name",TEMP2_NAME,string);
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#278: FILE: battery/battery-class.c:150:
+BATTERY_DEVICE_ATTR("temp2_name",TEMP2_NAME,string);
                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#279: FILE: battery/battery-class.c:151:
+BATTERY_DEVICE_ATTR("voltage",VOLTAGE,milli);
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#279: FILE: battery/battery-class.c:151:
+BATTERY_DEVICE_ATTR("voltage",VOLTAGE,milli);
                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#280: FILE: battery/battery-class.c:152:
+BATTERY_DEVICE_ATTR("voltage_design",VOLTAGE_DESIGN,milli);
                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#280: FILE: battery/battery-class.c:152:
+BATTERY_DEVICE_ATTR("voltage_design",VOLTAGE_DESIGN,milli);
                                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#281: FILE: battery/battery-class.c:153:
+BATTERY_DEVICE_ATTR("current",CURRENT,milli);
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#281: FILE: battery/battery-class.c:153:
+BATTERY_DEVICE_ATTR("current",CURRENT,milli);
                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#282: FILE: battery/battery-class.c:154:
+BATTERY_DEVICE_ATTR("charge_rate",CHARGE_RATE,milli);
                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#282: FILE: battery/battery-class.c:154:
+BATTERY_DEVICE_ATTR("charge_rate",CHARGE_RATE,milli);
                                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#283: FILE: battery/battery-class.c:155:
+BATTERY_DEVICE_ATTR("charge_max",CHARGE_MAX,milli);
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#283: FILE: battery/battery-class.c:155:
+BATTERY_DEVICE_ATTR("charge_max",CHARGE_MAX,milli);
                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#284: FILE: battery/battery-class.c:156:
+BATTERY_DEVICE_ATTR("charge_last",CHARGE_LAST,milli);
                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#284: FILE: battery/battery-class.c:156:
+BATTERY_DEVICE_ATTR("charge_last",CHARGE_LAST,milli);
                                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#285: FILE: battery/battery-class.c:157:
+BATTERY_DEVICE_ATTR("charge_low",CHARGE_LOW,milli);
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#285: FILE: battery/battery-class.c:157:
+BATTERY_DEVICE_ATTR("charge_low",CHARGE_LOW,milli);
                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#286: FILE: battery/battery-class.c:158:
+BATTERY_DEVICE_ATTR("charge_warn",CHARGE_WARN,milli);
                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#286: FILE: battery/battery-class.c:158:
+BATTERY_DEVICE_ATTR("charge_warn",CHARGE_WARN,milli);
                                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#287: FILE: battery/battery-class.c:159:
+BATTERY_DEVICE_ATTR("charge_unit",CHARGE_UNITS,string);
                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#287: FILE: battery/battery-class.c:159:
+BATTERY_DEVICE_ATTR("charge_unit",CHARGE_UNITS,string);
                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#288: FILE: battery/battery-class.c:160:
+BATTERY_DEVICE_ATTR("charge_percent",CHARGE_PCT,int);
                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#288: FILE: battery/battery-class.c:160:
+BATTERY_DEVICE_ATTR("charge_percent",CHARGE_PCT,int);
                                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#289: FILE: battery/battery-class.c:161:
+BATTERY_DEVICE_ATTR("time_remaining",TIME_REMAINING,int);
                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#289: FILE: battery/battery-class.c:161:
+BATTERY_DEVICE_ATTR("time_remaining",TIME_REMAINING,int);
                                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#290: FILE: battery/battery-class.c:162:
+BATTERY_DEVICE_ATTR("manufacturer",MANUFACTURER,string);
                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#290: FILE: battery/battery-class.c:162:
+BATTERY_DEVICE_ATTR("manufacturer",MANUFACTURER,string);
                                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#291: FILE: battery/battery-class.c:163:
+BATTERY_DEVICE_ATTR("technology",TECHNOLOGY,string);
                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#291: FILE: battery/battery-class.c:163:
+BATTERY_DEVICE_ATTR("technology",TECHNOLOGY,string);
                                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#292: FILE: battery/battery-class.c:164:
+BATTERY_DEVICE_ATTR("model",MODEL,string);
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#292: FILE: battery/battery-class.c:164:
+BATTERY_DEVICE_ATTR("model",MODEL,string);
                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#293: FILE: battery/battery-class.c:165:
+BATTERY_DEVICE_ATTR("serial",SERIAL,string);
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#293: FILE: battery/battery-class.c:165:
+BATTERY_DEVICE_ATTR("serial",SERIAL,string);
                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#294: FILE: battery/battery-class.c:166:
+BATTERY_DEVICE_ATTR("type",TYPE,string);
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#294: FILE: battery/battery-class.c:166:
+BATTERY_DEVICE_ATTR("type",TYPE,string);
                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#295: FILE: battery/battery-class.c:167:
+BATTERY_DEVICE_ATTR("oem_info",OEM_INFO,string);
                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#295: FILE: battery/battery-class.c:167:
+BATTERY_DEVICE_ATTR("oem_info",OEM_INFO,string);
                                        ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#297: FILE: battery/battery-class.c:169:
+#define REGISTER_ATTR(_attr)							\
+	if (battery_cdev->capabilities & (1<<BAT_INFO_##_attr))			\
+		class_device_create_file(battery_cdev->class_dev,		\
+					 &class_device_attr_##_attr);

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#297: FILE: battery/battery-class.c:169:
+#define REGISTER_ATTR(_attr)							\
+	if (battery_cdev->capabilities & (1<<BAT_INFO_##_attr))			\
+		class_device_create_file(battery_cdev->class_dev,		\
+					 &class_device_attr_##_attr);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#298: FILE: battery/battery-class.c:170:
+	if (battery_cdev->capabilities & (1<<BAT_INFO_##_attr))			\
 	                                   ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#301: FILE: battery/battery-class.c:173:
+#define UNREGISTER_ATTR(_attr)							\
+	if (battery_cdev->capabilities & (1<<BAT_INFO_##_attr))			\
+		class_device_remove_file(battery_cdev->class_dev,		\
+					 &class_device_attr_##_attr);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#301: FILE: battery/battery-class.c:173:
+#define UNREGISTER_ATTR(_attr)							\
+	if (battery_cdev->capabilities & (1<<BAT_INFO_##_attr))			\
+		class_device_remove_file(battery_cdev->class_dev,		\
+					 &class_device_attr_##_attr);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#302: FILE: battery/battery-class.c:174:
+	if (battery_cdev->capabilities & (1<<BAT_INFO_##_attr))			\
 	                                   ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#312: FILE: battery/battery-class.c:184:
+        battery_cdev->class_dev = class_device_create(battery_class, NULL, 0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#312: FILE: battery/battery-class.c:184:
+        battery_cdev->class_dev = class_device_create(battery_class, NULL, 0,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#315: FILE: battery/battery-class.c:187:
+        if (unlikely(IS_ERR(battery_cdev->class_dev)))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#315: FILE: battery/battery-class.c:187:
+        if (unlikely(IS_ERR(battery_cdev->class_dev)))$

WARNING:LIKELY_MISUSE: nested (un)?likely() calls, IS_ERR already uses unlikely() internally
#315: FILE: battery/battery-class.c:187:
+        if (unlikely(IS_ERR(battery_cdev->class_dev)))

ERROR:CODE_INDENT: code indent should use tabs where possible
#316: FILE: battery/battery-class.c:188:
+                return PTR_ERR(battery_cdev->class_dev);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#316: FILE: battery/battery-class.c:188:
+                return PTR_ERR(battery_cdev->class_dev);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#318: FILE: battery/battery-class.c:190:
+        class_set_devdata(battery_cdev->class_dev, battery_cdev);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#318: FILE: battery/battery-class.c:190:
+        class_set_devdata(battery_cdev->class_dev, battery_cdev);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#320: FILE: battery/battery-class.c:192:
+        /* register the attributes */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#321: FILE: battery/battery-class.c:193:
+        class_device_create_file(battery_cdev->class_dev,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#321: FILE: battery/battery-class.c:193:
+        class_device_create_file(battery_cdev->class_dev,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#322: FILE: battery/battery-class.c:194:
+                                &class_device_attr_status);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#322: FILE: battery/battery-class.c:194:
+        class_device_create_file(battery_cdev->class_dev,
+                                &class_device_attr_status);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#322: FILE: battery/battery-class.c:194:
+                                &class_device_attr_status);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#324: FILE: battery/battery-class.c:196:
+        if (battery_cdev->status_cap & (1<<BAT_STAT_AC))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#324: FILE: battery/battery-class.c:196:
+        if (battery_cdev->status_cap & (1<<BAT_STAT_AC))$

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#324: FILE: battery/battery-class.c:196:
+        if (battery_cdev->status_cap & (1<<BAT_STAT_AC))
                                          ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#349: FILE: battery/battery-class.c:221:
+        printk(KERN_INFO "Registered battery device: %s\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#349: FILE: battery/battery-class.c:221:
+        printk(KERN_INFO "Registered battery device: %s\n",$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#349: FILE: battery/battery-class.c:221:
+        printk(KERN_INFO "Registered battery device: %s\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#350: FILE: battery/battery-class.c:222:
+                        battery_cdev->class_dev->class_id);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#350: FILE: battery/battery-class.c:222:
+        printk(KERN_INFO "Registered battery device: %s\n",
+                        battery_cdev->class_dev->class_id);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#350: FILE: battery/battery-class.c:222:
+                        battery_cdev->class_dev->class_id);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#352: FILE: battery/battery-class.c:224:
+        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#352: FILE: battery/battery-class.c:224:
+        return 0;$

WARNING:TYPO_SPELLING: 'unreigister' may be misspelled - perhaps 'unregister'?
#358: FILE: battery/battery-class.c:230:
+ * @battery_cdev: the battery device to unreigister
                                         ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:CODE_INDENT: code indent should use tabs where possible
#364: FILE: battery/battery-class.c:236:
+        class_device_remove_file(battery_cdev->class_dev,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#364: FILE: battery/battery-class.c:236:
+        class_device_remove_file(battery_cdev->class_dev,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#367: FILE: battery/battery-class.c:239:
+        if (battery_cdev->status_cap & (1<<BAT_STAT_AC))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#367: FILE: battery/battery-class.c:239:
+        if (battery_cdev->status_cap & (1<<BAT_STAT_AC))$

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#367: FILE: battery/battery-class.c:239:
+        if (battery_cdev->status_cap & (1<<BAT_STAT_AC))
                                          ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#392: FILE: battery/battery-class.c:264:
+        class_device_unregister(battery_cdev->class_dev);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#392: FILE: battery/battery-class.c:264:
+        class_device_unregister(battery_cdev->class_dev);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#398: FILE: battery/battery-class.c:270:
+        battery_class = class_create(THIS_MODULE, "battery");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#398: FILE: battery/battery-class.c:270:
+        battery_class = class_create(THIS_MODULE, "battery");$

ERROR:CODE_INDENT: code indent should use tabs where possible
#399: FILE: battery/battery-class.c:271:
+        if (IS_ERR(battery_class))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#399: FILE: battery/battery-class.c:271:
+        if (IS_ERR(battery_class))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#400: FILE: battery/battery-class.c:272:
+                return PTR_ERR(battery_class);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#400: FILE: battery/battery-class.c:272:
+                return PTR_ERR(battery_class);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#401: FILE: battery/battery-class.c:273:
+        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#401: FILE: battery/battery-class.c:273:
+        return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#406: FILE: battery/battery-class.c:278:
+        class_destroy(battery_class);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#406: FILE: battery/battery-class.c:278:
+        class_destroy(battery_class);$

WARNING:PATCH_PREFIX: patch prefix 'drivers' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#418: FILE: battery/olpc-battery.c:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#434: FILE: battery/olpc-battery.c:17:
+#include <asm/io.h>

CHECK:CAMELCASE: Avoid CamelCase: <wBAT_VOLTAGE>
#436: FILE: battery/olpc-battery.c:19:
+#define wBAT_VOLTAGE		0xf900 /* *9.76/32,    mV */

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <wBAT_CURRENT>
#437: FILE: battery/olpc-battery.c:20:
+#define wBAT_CURRENT		0xf902 /* *15.625/120, mA */

CHECK:CAMELCASE: Avoid CamelCase: <wBAT_TEMP>
#438: FILE: battery/olpc-battery.c:21:
+#define wBAT_TEMP		0xf906 /* *256/1000,   °C */

CHECK:CAMELCASE: Avoid CamelCase: <wAMB_TEMP>
#439: FILE: battery/olpc-battery.c:22:
+#define wAMB_TEMP		0xf908 /* *256/1000,   °C */

CHECK:CAMELCASE: Avoid CamelCase: <sMBAT_STATUS>
#441: FILE: battery/olpc-battery.c:24:
+#define sMBAT_STATUS		0xfaa4

CHECK:CAMELCASE: Avoid CamelCase: <sBAT_PRESENT>
#442: FILE: battery/olpc-battery.c:25:
+#define		sBAT_PRESENT		1

CHECK:CAMELCASE: Avoid CamelCase: <sBAT_FULL>
#443: FILE: battery/olpc-battery.c:26:
+#define		sBAT_FULL		2

CHECK:CAMELCASE: Avoid CamelCase: <sBAT_DESTROY>
#444: FILE: battery/olpc-battery.c:27:
+#define		sBAT_DESTROY		4

CHECK:CAMELCASE: Avoid CamelCase: <sBAT_LOW>
#445: FILE: battery/olpc-battery.c:28:
+#define		sBAT_LOW			32

CHECK:CAMELCASE: Avoid CamelCase: <sBAT_DISCHG>
#446: FILE: battery/olpc-battery.c:29:
+#define		sBAT_DISCHG		64

CHECK:CAMELCASE: Avoid CamelCase: <sMCHARGE_STATUS>
#447: FILE: battery/olpc-battery.c:30:
+#define sMCHARGE_STATUS		0xfaa5

CHECK:CAMELCASE: Avoid CamelCase: <sBAT_CHARGE>
#448: FILE: battery/olpc-battery.c:31:
+#define		sBAT_CHARGE		1

CHECK:CAMELCASE: Avoid CamelCase: <sBAT_OVERTEMP>
#449: FILE: battery/olpc-battery.c:32:
+#define		sBAT_OVERTEMP		4

CHECK:CAMELCASE: Avoid CamelCase: <sBAT_NiMH>
#450: FILE: battery/olpc-battery.c:33:
+#define		sBAT_NiMH		8

CHECK:CAMELCASE: Avoid CamelCase: <sPOWER_FLAG>
#451: FILE: battery/olpc-battery.c:34:
+#define sPOWER_FLAG		0xfa40

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#456: FILE: battery/olpc-battery.c:39:
+	unsigned long timeo = jiffies + HZ/20;
 	                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#459: FILE: battery/olpc-battery.c:42:
+                unsigned char lock = inb(0x6c) & 0x80;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#459: FILE: battery/olpc-battery.c:42:
+                unsigned char lock = inb(0x6c) & 0x80;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#460: FILE: battery/olpc-battery.c:43:
+                if (!lock)$

WARNING:LINE_SPACING: Missing a blank line after declarations
#460: FILE: battery/olpc-battery.c:43:
+                unsigned char lock = inb(0x6c) & 0x80;
+                if (!lock)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#460: FILE: battery/olpc-battery.c:43:
+                if (!lock)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#461: FILE: battery/olpc-battery.c:44:
+                        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#461: FILE: battery/olpc-battery.c:44:
+                        return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#464: FILE: battery/olpc-battery.c:47:
+                yield();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#464: FILE: battery/olpc-battery.c:47:
+                yield();$

WARNING:YIELD: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#464: FILE: battery/olpc-battery.c:47:
+                yield();

ERROR:CODE_INDENT: code indent should use tabs where possible
#465: FILE: battery/olpc-battery.c:48:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#465: FILE: battery/olpc-battery.c:48:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#470: FILE: battery/olpc-battery.c:53:
+        outb(0xff, 0x6c);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#470: FILE: battery/olpc-battery.c:53:
+        outb(0xff, 0x6c);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#475: FILE: battery/olpc-battery.c:58:
+        outb(adr >> 8, 0x381);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#475: FILE: battery/olpc-battery.c:58:
+        outb(adr >> 8, 0x381);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#476: FILE: battery/olpc-battery.c:59:
+        outb(adr, 0x382);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#476: FILE: battery/olpc-battery.c:59:
+        outb(adr, 0x382);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#477: FILE: battery/olpc-battery.c:60:
+        return inb(0x383);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#477: FILE: battery/olpc-battery.c:60:
+        return inb(0x383);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#482: FILE: battery/olpc-battery.c:65:
+        return (read_ec_byte(adr) << 8) | read_ec_byte(adr+1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#482: FILE: battery/olpc-battery.c:65:
+        return (read_ec_byte(adr) << 8) | read_ec_byte(adr+1);$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#482: FILE: battery/olpc-battery.c:65:
+        return (read_ec_byte(adr) << 8) | read_ec_byte(adr+1);
                                                           ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#491: FILE: battery/olpc-battery.c:74:
+		printk(KERN_ERR "Failed to lock EC for battery access\n");

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#499: FILE: battery/olpc-battery.c:82:
+	if (mask & (BAT_STAT_PRESENT|BAT_STAT_FULL|BAT_STAT_FIRE|BAT_STAT_LOW|BAT_STAT_DISCHARGING)) {

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#499: FILE: battery/olpc-battery.c:82:
+	if (mask & (BAT_STAT_PRESENT|BAT_STAT_FULL|BAT_STAT_FIRE|BAT_STAT_LOW|BAT_STAT_DISCHARGING)) {
 	                            ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#499: FILE: battery/olpc-battery.c:82:
+	if (mask & (BAT_STAT_PRESENT|BAT_STAT_FULL|BAT_STAT_FIRE|BAT_STAT_LOW|BAT_STAT_DISCHARGING)) {
 	                                          ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#499: FILE: battery/olpc-battery.c:82:
+	if (mask & (BAT_STAT_PRESENT|BAT_STAT_FULL|BAT_STAT_FIRE|BAT_STAT_LOW|BAT_STAT_DISCHARGING)) {
 	                                                        ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#499: FILE: battery/olpc-battery.c:82:
+	if (mask & (BAT_STAT_PRESENT|BAT_STAT_FULL|BAT_STAT_FIRE|BAT_STAT_LOW|BAT_STAT_DISCHARGING)) {
 	                                                                     ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#501: FILE: battery/olpc-battery.c:84:
+^I^I$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#513: FILE: battery/olpc-battery.c:96:
+	if (mask & (BAT_STAT_CHARGING|BAT_STAT_OVERTEMP)) {
 	                             ^

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#531: FILE: battery/olpc-battery.c:114:
+	if (!(read_ec_byte(sMBAT_STATUS) & sBAT_PRESENT)) {
[...]
+	} else if (attr == BAT_INFO_VOLTAGE) {
[...]
+	} else if (attr == BAT_INFO_CURRENT) {
[...]
+	} else if (attr == BAT_INFO_TEMP1) {
[...]
+	} else if (attr == BAT_INFO_TEMP2) {
[...]
+	} else if (attr == BAT_INFO_CHARGE_PCT) {
[...]
+	} else 
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#543: FILE: battery/olpc-battery.c:126:
+^I} else $

CHECK:BRACES: Unbalanced braces around else statement
#543: FILE: battery/olpc-battery.c:126:
+	} else 

CHECK:BRACES: braces {} should be used on all arms of this statement
#563: FILE: battery/olpc-battery.c:146:
+		if (lock_ec())
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#565: FILE: battery/olpc-battery.c:148:
+		else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#567: FILE: battery/olpc-battery.c:150:
+			unsigned short tmp = read_ec_byte(sMCHARGE_STATUS);
+			if (tmp & sBAT_NiMH)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#582: FILE: battery/olpc-battery.c:165:
+	.capabilities = (1<<BAT_INFO_VOLTAGE) |
 	                  ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#583: FILE: battery/olpc-battery.c:166:
+			(1<<BAT_INFO_CURRENT) |
 			  ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#584: FILE: battery/olpc-battery.c:167:
+			(1<<BAT_INFO_TEMP1) |
 			  ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#585: FILE: battery/olpc-battery.c:168:
+			(1<<BAT_INFO_TEMP2) |
 			  ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#586: FILE: battery/olpc-battery.c:169:
+			(1<<BAT_INFO_CHARGE_PCT) |
 			  ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#587: FILE: battery/olpc-battery.c:170:
+			(1<<BAT_INFO_TYPE) |
 			  ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#588: FILE: battery/olpc-battery.c:171:
+			(1<<BAT_INFO_TECHNOLOGY) |
 			  ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#589: FILE: battery/olpc-battery.c:172:
+			(1<<BAT_INFO_TEMP1_NAME) |
 			  ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#590: FILE: battery/olpc-battery.c:173:
+			(1<<BAT_INFO_TEMP2_NAME),
 			  ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#591: FILE: battery/olpc-battery.c:174:
+^I.status_cap = BAT_STAT_AC | BAT_STAT_PRESENT | BAT_STAT_LOW | $

CHECK:SPACING: spaces preferred around that '|' (ctx:VxW)
#592: FILE: battery/olpc-battery.c:175:
+		      BAT_STAT_FULL | BAT_STAT_CHARGING| BAT_STAT_DISCHARGING |
 		                                       ^

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#619: FILE: linux/battery.h:1:
+/*

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#643: FILE: linux/battery.h:25:
+#define BAT_STAT_AC		(1<<0)
                    		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#643: FILE: linux/battery.h:25:
+#define BAT_STAT_AC		(1<<0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#644: FILE: linux/battery.h:26:
+#define BAT_STAT_PRESENT	(1<<1)
                         	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#644: FILE: linux/battery.h:26:
+#define BAT_STAT_PRESENT	(1<<1)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#645: FILE: linux/battery.h:27:
+#define BAT_STAT_LOW		(1<<2)
                     		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#645: FILE: linux/battery.h:27:
+#define BAT_STAT_LOW		(1<<2)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#646: FILE: linux/battery.h:28:
+#define BAT_STAT_FULL		(1<<3)
                      		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#646: FILE: linux/battery.h:28:
+#define BAT_STAT_FULL		(1<<3)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#647: FILE: linux/battery.h:29:
+#define BAT_STAT_CHARGING	(1<<4)
                          	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#647: FILE: linux/battery.h:29:
+#define BAT_STAT_CHARGING	(1<<4)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#648: FILE: linux/battery.h:30:
+#define BAT_STAT_DISCHARGING	(1<<5)
                             	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#648: FILE: linux/battery.h:30:
+#define BAT_STAT_DISCHARGING	(1<<5)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#649: FILE: linux/battery.h:31:
+#define BAT_STAT_OVERTEMP	(1<<6)
                          	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#649: FILE: linux/battery.h:31:
+#define BAT_STAT_OVERTEMP	(1<<6)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#650: FILE: linux/battery.h:32:
+#define BAT_STAT_FIRE		(1<<7)
                      		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#650: FILE: linux/battery.h:32:
+#define BAT_STAT_FIRE		(1<<7)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#651: FILE: linux/battery.h:33:
+#define BAT_STAT_CHARGE_DONE	(1<<8)
                             	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#651: FILE: linux/battery.h:33:
+#define BAT_STAT_CHARGE_DONE	(1<<8)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#653: FILE: linux/battery.h:35:
+#define BAT_STAT_ERROR		(1<<31)
                       		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#653: FILE: linux/battery.h:35:
+#define BAT_STAT_ERROR		(1<<31)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct battery_classdev *' should also have an identifier name
#690: FILE: linux/battery.h:72:
+	unsigned long		(*status)(struct battery_classdev *, unsigned long mask);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct battery_classdev *' should also have an identifier name
#691: FILE: linux/battery.h:73:
+	int			(*query_long)(struct battery_classdev *, int attr, long *result);

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#692: FILE: linux/battery.h:74:
+	int			(*query_str)(struct battery_classdev *, int attr, char *str, ssize_t len);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct battery_classdev *' should also have an identifier name
#692: FILE: linux/battery.h:74:
+	int			(*query_str)(struct battery_classdev *, int attr, char *str, ssize_t len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#698: FILE: linux/battery.h:80:
+extern int battery_classdev_register(struct device *parent,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#700: FILE: linux/battery.h:82:
+extern void battery_classdev_unregister(struct battery_classdev *battery_cdev);

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.25151.commit.2df909d690a8f3a37ae2acbcfc6f458f19bd9634 total: 105 errors, 84 warnings, 65 checks, 609 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.25151.commit.2df909d690a8f3a37ae2acbcfc6f458f19bd9634 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
