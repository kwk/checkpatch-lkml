WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
	  overflow notification messages. Only one message can be extracted per call.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#57: FILE: perfmon/perfmon_file.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#78: FILE: perfmon/perfmon_file.c:22:
+ * ^Ihttp://www.hpl.hp.com/research/linux/perfmon$

WARNING:CONST_STRUCT: struct file_operations should normally be const
#91: FILE: perfmon/perfmon_file.c:35:
+struct file_operations pfm_file_ops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct dentry_operations should normally be const
#98: FILE: perfmon/perfmon_file.c:42:
+static struct dentry_operations pfmfs_dentry_operations = {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#102: FILE: perfmon/perfmon_file.c:46:
+int pfm_is_fd(struct file *filp)
                            ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#122: FILE: perfmon/perfmon_file.c:66:
+	msg = ctx->msgq+ctx->msgq_head;
 	               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#127: FILE: perfmon/perfmon_file.c:71:
+	ctx->msgq_head = (ctx->msgq_head+1) % PFM_MAX_MSGS;
 	                                ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#147: FILE: perfmon/perfmon_file.c:91:
+	if (ctx == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: No space is necessary after a cast
#153: FILE: perfmon/perfmon_file.c:97:
+	if ( (address < (unsigned long) vma->vm_start) ||

ERROR:SPACING: space prohibited after that open parenthesis '('
#153: FILE: perfmon/perfmon_file.c:97:
+	if ( (address < (unsigned long) vma->vm_start) ||

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'address < (unsigned long) vma->vm_start'
#153: FILE: perfmon/perfmon_file.c:97:
+	if ( (address < (unsigned long) vma->vm_start) ||
+	     (address > (unsigned long) (vma->vm_start + size)) )

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#154: FILE: perfmon/perfmon_file.c:98:
+	if ( (address < (unsigned long) vma->vm_start) ||
+	     (address > (unsigned long) (vma->vm_start + size)) )

CHECK:SPACING: No space is necessary after a cast
#154: FILE: perfmon/perfmon_file.c:98:
+	     (address > (unsigned long) (vma->vm_start + size)) )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#154: FILE: perfmon/perfmon_file.c:98:
+	     (address > (unsigned long) (vma->vm_start + size)) )

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#172: FILE: perfmon/perfmon_file.c:116:
+struct vm_operations_struct pfm_buf_map_vm_ops = {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx->smpl_addr"
#179: FILE: perfmon/perfmon_file.c:123:
+	if (ctx->smpl_addr == NULL) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#204: FILE: perfmon/perfmon_file.c:148:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#208: FILE: perfmon/perfmon_file.c:152:
+	if (ctx == NULL)

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#225: FILE: perfmon/perfmon_file.c:169:
+	if (vma->vm_pgoff == 0) {
[...]
+	} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#241: FILE: perfmon/perfmon_file.c:185:
+		vma->vm_end-vma->vm_start);
 		           ^

ERROR:SPACING: space required before the open parenthesis '('
#260: FILE: perfmon/perfmon_file.c:204:
+	if(PFM_CTXQ_EMPTY(ctx) == 0)

ERROR:SPACING: space required before the open parenthesis '('
#273: FILE: perfmon/perfmon_file.c:217:
+	if(PFM_CTXQ_EMPTY(ctx))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!msg"
#285: FILE: perfmon/perfmon_file.c:229:
+	if (unlikely(msg == NULL))

ERROR:SPACING: space required before the open parenthesis '('
#320: FILE: perfmon/perfmon_file.c:264:
+	if(PFM_CTXQ_EMPTY(ctx) == 0)

ERROR:CODE_INDENT: code indent should use tabs where possible
#330: FILE: perfmon/perfmon_file.c:274:
+      ^Iret = -EAGAIN;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#330: FILE: perfmon/perfmon_file.c:274:
+      ^Iret = -EAGAIN;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#330: FILE: perfmon/perfmon_file.c:274:
+      ^Iret = -EAGAIN;$

ERROR:SPACING: space required before the open parenthesis '('
#331: FILE: perfmon/perfmon_file.c:275:
+	if(non_block)

ERROR:SPACING: space required before the open parenthesis '('
#362: FILE: perfmon/perfmon_file.c:306:
+		if(signal_pending(current))

ERROR:SPACING: space required before the open parenthesis '('
#366: FILE: perfmon/perfmon_file.c:310:
+		if(PFM_CTXQ_EMPTY(ctx) == 0)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!msg"
#388: FILE: perfmon/perfmon_file.c:332:
+	if (unlikely(msg == NULL))

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#418: FILE: perfmon/perfmon_file.c:362:
+static ssize_t pfm_read(struct file *filp, char __user *buf, size_t size,
                                      ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#426: FILE: perfmon/perfmon_file.c:370:
+	if (ctx == NULL) {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pfm_read', this function's name, in a string
#427: FILE: perfmon/perfmon_file.c:371:
+		PFM_ERR("no ctx for pfm_read");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:CODE_INDENT: code indent should use tabs where possible
#449: FILE: perfmon/perfmon_file.c:393:
+  ^I^Iif(copy_to_user(buf, &msg_buf, sizeof(msg_buf)))$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#449: FILE: perfmon/perfmon_file.c:393:
+  ^I^Iif(copy_to_user(buf, &msg_buf, sizeof(msg_buf)))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#449: FILE: perfmon/perfmon_file.c:393:
+  ^I^Iif(copy_to_user(buf, &msg_buf, sizeof(msg_buf)))$

ERROR:SPACING: space required before the open parenthesis '('
#449: FILE: perfmon/perfmon_file.c:393:
+  		if(copy_to_user(buf, &msg_buf, sizeof(msg_buf)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#456: FILE: perfmon/perfmon_file.c:400:
+static ssize_t pfm_write(struct file *file, const char __user *ubuf,
+			  size_t size, loff_t *ppos)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pfm_write', this function's name, in a string
#458: FILE: perfmon/perfmon_file.c:402:
+	PFM_DBG("pfm_write called");

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#462: FILE: perfmon/perfmon_file.c:406:
+static unsigned int pfm_poll(struct file *filp, poll_table * wait)
                                           ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#462: FILE: perfmon/perfmon_file.c:406:
+static unsigned int pfm_poll(struct file *filp, poll_table * wait)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#468: FILE: perfmon/perfmon_file.c:412:
+	if (!pfm_is_fd(filp)) {
 	               ^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pfm_poll', this function's name, in a string
#469: FILE: perfmon/perfmon_file.c:413:
+		PFM_ERR("pfm_poll bad magic");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#474: FILE: perfmon/perfmon_file.c:418:
+	if (ctx == NULL) {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pfm_poll', this function's name, in a string
#475: FILE: perfmon/perfmon_file.c:419:
+		PFM_ERR("pfm_poll no ctx");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#479: FILE: perfmon/perfmon_file.c:423:
+
+

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#482: FILE: perfmon/perfmon_file.c:426:
+	poll_wait(filp, &ctx->msgq_wait, wait);
 	          ^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#497: FILE: perfmon/perfmon_file.c:441:
+^I  ^I     unsigned long arg)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#497: FILE: perfmon/perfmon_file.c:441:
+^I  ^I     unsigned long arg)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#497: FILE: perfmon/perfmon_file.c:441:
+static int pfm_ioctl(struct inode *inode, struct file *file, unsigned int cmd,
+	  	     unsigned long arg)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pfm_ioctl', this function's name, in a string
#499: FILE: perfmon/perfmon_file.c:443:
+	PFM_DBG("pfm_ioctl called");

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#506: FILE: perfmon/perfmon_file.c:450:
+static inline int __pfm_fasync(int fd, struct file *filp,
                                                     ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#511: FILE: perfmon/perfmon_file.c:455:
+	ret = fasync_helper (fd, filp, on, &ctx->async_queue);
 	                         ^^^^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#511: FILE: perfmon/perfmon_file.c:455:
+	ret = fasync_helper (fd, filp, on, &ctx->async_queue);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#521: FILE: perfmon/perfmon_file.c:465:
+static int pfm_fasync(int fd, struct file *filp, int on)
                                            ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#527: FILE: perfmon/perfmon_file.c:471:
+	if (ctx == NULL) {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pfm_fasync', this function's name, in a string
#528: FILE: perfmon/perfmon_file.c:472:
+		PFM_ERR("pfm_fasync no ctx");

WARNING:TYPO_SPELLING: 'avalaible' may be misspelled - perhaps 'available'?
#534: FILE: perfmon/perfmon_file.c:478:
+	 * may go to sleep if memory is not readily avalaible.
 	                                            ^^^^^^^^^

WARNING:REPEATED_WORD: Possible repeated word: 'may'
#534: FILE: perfmon/perfmon_file.c:478:
+	 * we cannot mask interrupts during this call because this may
+	 * may go to sleep if memory is not readily avalaible.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#540: FILE: perfmon/perfmon_file.c:484:
+	ret = __pfm_fasync(fd, filp, ctx, on);
 	                       ^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pfm_fasync', this function's name, in a string
#542: FILE: perfmon/perfmon_file.c:486:
+	PFM_DBG("pfm_fasync called on fd=%d on=%d async_queue=%p ret=%d",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#555: FILE: perfmon/perfmon_file.c:499:
+	BUG_ON(ctx == NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#555: FILE: perfmon/perfmon_file.c:499:
+	BUG_ON(ctx == NULL);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#559: FILE: perfmon/perfmon_file.c:503:
+			__FUNCTION__,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#593: FILE: perfmon/perfmon_file.c:537:
+	BUG_ON(irqs_disabled());

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#617: FILE: perfmon/perfmon_file.c:561:
+int __pfm_close(struct pfm_context *ctx, struct file *filp)
                                                       ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!task"
#635: FILE: perfmon/perfmon_file.c:579:
+	if (task == NULL)

ERROR:CODE_INDENT: code indent should use tabs where possible
#656: FILE: perfmon/perfmon_file.c:600:
+^I ^I * we need to release the resource on the ORIGINAL cpu.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#656: FILE: perfmon/perfmon_file.c:600:
+^I ^I * we need to release the resource on the ORIGINAL cpu.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#666: FILE: perfmon/perfmon_file.c:610:
+^I ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#666: FILE: perfmon/perfmon_file.c:610:
+^I ^I */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#684: FILE: perfmon/perfmon_file.c:628:
+^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#687: FILE: perfmon/perfmon_file.c:631:
+^I^I ^I* force task to wake up from MASKED state$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#687: FILE: perfmon/perfmon_file.c:631:
+^I^I ^I* force task to wake up from MASKED state$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#687: FILE: perfmon/perfmon_file.c:631:
+			/*
+		 	* force task to wake up from MASKED state

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:CODE_INDENT: code indent should use tabs where possible
#688: FILE: perfmon/perfmon_file.c:632:
+^I^I ^I*/$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#688: FILE: perfmon/perfmon_file.c:632:
+^I^I ^I*/$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#697: FILE: perfmon/perfmon_file.c:641:
+		free_possible = can_unload = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#718: FILE: perfmon/perfmon_file.c:662:
+	if (filp)
 	    ^^^^

WARNING:TYPO_SPELLING: 'unreacheable' may be misspelled - perhaps 'unreachable'?
#722: FILE: perfmon/perfmon_file.c:666:
+	 * if we free on the spot, the context is now completely unreacheable
 	                                                         ^^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#739: FILE: perfmon/perfmon_file.c:683:
+static int pfm_close(struct inode *inode, struct file *filp)
                                                        ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#744: FILE: perfmon/perfmon_file.c:688:
+	if (ctx == NULL) {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#748: FILE: perfmon/perfmon_file.c:692:
+	return __pfm_close(ctx, filp);
 	                        ^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#763: FILE: perfmon/perfmon_file.c:707:
+ * ^I- remove from fasync queue$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#765: FILE: perfmon/perfmon_file.c:709:
+static int pfm_flush(struct file *filp)
                                   ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#770: FILE: perfmon/perfmon_file.c:714:
+	if (ctx == NULL) {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pfm_flush', this function's name, in a string
#771: FILE: perfmon/perfmon_file.c:715:
+		PFM_ERR("pfm_flush no ctx");

WARNING:TYPO_SPELLING: 'unreacheable' may be misspelled - perhaps 'unreachable'?
#778: FILE: perfmon/perfmon_file.c:722:
+	 * here when the context has become unreacheable by other tasks.
 	                                    ^^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#790: FILE: perfmon/perfmon_file.c:734:
+		__pfm_fasync (-1, filp, ctx, 0);
 		                  ^^^^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#790: FILE: perfmon/perfmon_file.c:734:
+		__pfm_fasync (-1, filp, ctx, 0);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#795: FILE: perfmon/perfmon_file.c:739:
+struct file_operations pfm_file_ops = {

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#804: FILE: perfmon/perfmon_file.c:748:
+	.flush= pfm_flush,
 	      ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#808: FILE: perfmon/perfmon_file.c:752:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#823: FILE: perfmon/perfmon_file.c:767:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#835: FILE: perfmon/perfmon_file.c:779:
+	int err = register_filesystem(&pfm_fs_type);
+	if (!err) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#856: FILE: perfmon/perfmon_file.c:800:
+	struct inode * inode;

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#880: FILE: perfmon/perfmon_file.c:824:
+	inode->i_mode = S_IFCHR|S_IRUGO;
 	                       ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#880: FILE: perfmon/perfmon_file.c:824:
+	inode->i_mode = S_IFCHR|S_IRUGO;

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.44980.commit.a042149d254e77cb6e01403eb93cffcc92309f30 total: 20 errors, 53 warnings, 27 checks, 861 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.44980.commit.a042149d254e77cb6e01403eb93cffcc92309f30 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
