WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
> > > (1) Gets rid of the no_paravirt.h header and leaves native ops in place

WARNING:TYPO_SPELLING: 'assember' may be misspelled - perhaps 'assembler'?
#76: 
register-based ABI is used, to make inlining assember easier.
                                             ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#235: FILE: include/asm-i386/irqflags.h:84:
+#define ENABLE_INTERRUPTS_SYSEXIT	sti; sysexit

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#237: FILE: include/asm-i386/irqflags.h:86:
+#define GET_CR0_INTO_EAX		movl %cr0, %eax
                         		     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#237: FILE: include/asm-i386/irqflags.h:86:
+#define GET_CR0_INTO_EAX		movl %cr0, %eax
                         		           ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#237: FILE: include/asm-i386/irqflags.h:86:
+#define GET_CR0_INTO_EAX		movl %cr0, %eax

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#242: FILE: include/asm-i386/irqflags.h:91:
+#define raw_local_save_flags(flags) \
+		do { (flags) = __raw_local_save_flags(); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#306: FILE: include/asm-i386/processor.h:166:
+			:"=r" (var))
 			^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#310: FILE: include/asm-i386/processor.h:170:
+			:"r" (value))
 			^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#315: FILE: include/asm-i386/processor.h:175:
+static inline void set_iopl_mask(unsigned mask)

WARNING:LINE_SPACING: Missing a blank line after declarations
#318: FILE: include/asm-i386/processor.h:178:
+	unsigned int reg;
+	__asm__ __volatile__ ("pushfl;"

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#421: FILE: include/asm-i386/system.h:143:
+#define clts() __asm__ __volatile__ ("clts")

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#435: FILE: arch/i386/kernel/paravirt.c:1:
+/*  Paravirtualization interfaces

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#436: FILE: arch/i386/kernel/paravirt.c:2:
+/*  Paravirtualization interfaces
+    Copyright (C) 2006 Rusty Russell IBM Corporation

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#449: FILE: arch/i386/kernel/paravirt.c:15:
+    along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#450: FILE: arch/i386/kernel/paravirt.c:16:
+    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/bug.h> instead of <asm/bug.h>
#454: FILE: arch/i386/kernel/paravirt.c:20:
+#include <asm/bug.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#462: FILE: arch/i386/kernel/paravirt.c:28:
+	/* must be "asm volatile" so that it won't be optimised out in
+	   native_sync_core  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#462: FILE: arch/i386/kernel/paravirt.c:28:
+	   native_sync_core  */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#473: FILE: arch/i386/kernel/paravirt.c:39:
+^Iunsigned int val = 0; ^I/* Damn you, gcc! */$

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#477: FILE: arch/i386/kernel/paravirt.c:43:
+		asm("movl %%db0, %0" :"=r" (val)); break;
 		                     ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#479: FILE: arch/i386/kernel/paravirt.c:45:
+		asm("movl %%db1, %0" :"=r" (val)); break;
 		                     ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#481: FILE: arch/i386/kernel/paravirt.c:47:
+		asm("movl %%db2, %0" :"=r" (val)); break;
 		                     ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#483: FILE: arch/i386/kernel/paravirt.c:49:
+		asm("movl %%db3, %0" :"=r" (val)); break;
 		                     ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#485: FILE: arch/i386/kernel/paravirt.c:51:
+		asm("movl %%db6, %0" :"=r" (val)); break;
 		                     ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#487: FILE: arch/i386/kernel/paravirt.c:53:
+		asm("movl %%db7, %0" :"=r" (val)); break;
 		                     ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#489: FILE: arch/i386/kernel/paravirt.c:55:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#498: FILE: arch/i386/kernel/paravirt.c:64:
+		asm("movl %0,%%db0"	: /* no output */ :"r" (value));
 		                   	                  ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#501: FILE: arch/i386/kernel/paravirt.c:67:
+		asm("movl %0,%%db1"	: /* no output */ :"r" (value));
 		                   	                  ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#504: FILE: arch/i386/kernel/paravirt.c:70:
+		asm("movl %0,%%db2"	: /* no output */ :"r" (value));
 		                   	                  ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#507: FILE: arch/i386/kernel/paravirt.c:73:
+		asm("movl %0,%%db3"	: /* no output */ :"r" (value));
 		                   	                  ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#510: FILE: arch/i386/kernel/paravirt.c:76:
+		asm("movl %0,%%db6"	: /* no output */ :"r" (value));
 		                   	                  ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#513: FILE: arch/i386/kernel/paravirt.c:79:
+		asm("movl %0,%%db7"	: /* no output */ :"r" (value));
 		                   	                  ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#516: FILE: arch/i386/kernel/paravirt.c:82:
+		BUG();

WARNING:LINE_SPACING: Missing a blank line after declarations
#528: FILE: arch/i386/kernel/paravirt.c:94:
+	unsigned int val;
+	asm volatile("movl %%cr0,%0\n\t" :"=r" (val));

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#528: FILE: arch/i386/kernel/paravirt.c:94:
+	asm volatile("movl %%cr0,%0\n\t" :"=r" (val));
 	                                 ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#534: FILE: arch/i386/kernel/paravirt.c:100:
+	asm volatile("movl %0,%%cr0": :"r" (val));
 	                            ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#534: FILE: arch/i386/kernel/paravirt.c:100:
+	asm volatile("movl %0,%%cr0": :"r" (val));
 	                              ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#540: FILE: arch/i386/kernel/paravirt.c:106:
+	unsigned int val;
+	asm volatile("movl %%cr2,%0\n\t" :"=r" (val));

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#540: FILE: arch/i386/kernel/paravirt.c:106:
+	asm volatile("movl %%cr2,%0\n\t" :"=r" (val));
 	                                 ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#546: FILE: arch/i386/kernel/paravirt.c:112:
+	asm volatile("movl %0,%%cr2": :"r" (val));
 	                            ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#546: FILE: arch/i386/kernel/paravirt.c:112:
+	asm volatile("movl %0,%%cr2": :"r" (val));
 	                              ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#552: FILE: arch/i386/kernel/paravirt.c:118:
+	unsigned int val;
+	asm volatile("movl %%cr3,%0\n\t" :"=r" (val));

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#552: FILE: arch/i386/kernel/paravirt.c:118:
+	asm volatile("movl %%cr3,%0\n\t" :"=r" (val));
 	                                 ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#558: FILE: arch/i386/kernel/paravirt.c:124:
+	asm volatile("movl %0,%%cr3": :"r" (val));
 	                            ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#558: FILE: arch/i386/kernel/paravirt.c:124:
+	asm volatile("movl %0,%%cr3": :"r" (val));
 	                              ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#564: FILE: arch/i386/kernel/paravirt.c:130:
+	unsigned int val;
+	asm volatile("movl %%cr4,%0\n\t" :"=r" (val));

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#564: FILE: arch/i386/kernel/paravirt.c:130:
+	asm volatile("movl %%cr4,%0\n\t" :"=r" (val));
 	                                 ^

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#572: FILE: arch/i386/kernel/paravirt.c:138:
+	asm("1: movl %%cr4, %0		\n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#573: FILE: arch/i386/kernel/paravirt.c:139:
+		"2:				\n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#574: FILE: arch/i386/kernel/paravirt.c:140:
+		".section __ex_table,\"a\"	\n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#575: FILE: arch/i386/kernel/paravirt.c:141:
+		".long 1b,2b			\n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#576: FILE: arch/i386/kernel/paravirt.c:142:
+		".previous			\n"

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#577: FILE: arch/i386/kernel/paravirt.c:143:
+		: "=r" (val): "0" (0));
 		            ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#583: FILE: arch/i386/kernel/paravirt.c:149:
+	asm volatile("movl %0,%%cr4": :"r" (val));
 	                            ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#583: FILE: arch/i386/kernel/paravirt.c:149:
+	asm volatile("movl %0,%%cr4": :"r" (val));
 	                              ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#589: FILE: arch/i386/kernel/paravirt.c:155:
+	unsigned long f;
+	asm volatile("pushfl ; popl %0":"=g" (f): /* no input */);

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#589: FILE: arch/i386/kernel/paravirt.c:155:
+	asm volatile("pushfl ; popl %0":"=g" (f): /* no input */);
 	                               ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#589: FILE: arch/i386/kernel/paravirt.c:155:
+	asm volatile("pushfl ; popl %0":"=g" (f): /* no input */);
 	                                        ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#595: FILE: arch/i386/kernel/paravirt.c:161:
+	asm volatile("pushl %0 ; popfl": /* no output */
 	                               ^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#596: FILE: arch/i386/kernel/paravirt.c:162:
+			     :"g" (f)
 			     ^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#597: FILE: arch/i386/kernel/paravirt.c:163:
+			     :"memory", "cc");
 			     ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#602: FILE: arch/i386/kernel/paravirt.c:168:
+	asm volatile("cli": : :"memory");
 	                  ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#602: FILE: arch/i386/kernel/paravirt.c:168:
+	asm volatile("cli": : :"memory");
 	                      ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#607: FILE: arch/i386/kernel/paravirt.c:173:
+	asm volatile("sti": : :"memory");
 	                  ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#607: FILE: arch/i386/kernel/paravirt.c:173:
+	asm volatile("sti": : :"memory");
 	                      ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#612: FILE: arch/i386/kernel/paravirt.c:178:
+	asm volatile("sti; hlt": : :"memory");
 	                       ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#612: FILE: arch/i386/kernel/paravirt.c:178:
+	asm volatile("sti; hlt": : :"memory");
 	                           ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#617: FILE: arch/i386/kernel/paravirt.c:183:
+	asm volatile("hlt": : :"memory");
 	                  ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#617: FILE: arch/i386/kernel/paravirt.c:183:
+	asm volatile("hlt": : :"memory");
 	                      ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#622: FILE: arch/i386/kernel/paravirt.c:188:
+	asm volatile("wbinvd": : :"memory");
 	                     ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#622: FILE: arch/i386/kernel/paravirt.c:188:
+	asm volatile("wbinvd": : :"memory");
 	                         ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#634: FILE: arch/i386/kernel/paravirt.c:200:
+ ^I^I     ".section __ex_table,\"a\"\n"$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#634: FILE: arch/i386/kernel/paravirt.c:200:
+ ^I^I     ".section __ex_table,\"a\"\n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#634: FILE: arch/i386/kernel/paravirt.c:200:
+ ^I^I     ".section __ex_table,\"a\"\n"$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#636: FILE: arch/i386/kernel/paravirt.c:202:
+^I^I     "   .long ^I2b,3b\n\t"$

WARNING:LINE_SPACING: Missing a blank line after declarations
#647: FILE: arch/i386/kernel/paravirt.c:213:
+	int err;
+	asm volatile("2: wrmsr ; xorl %0,%0\n"

ERROR:CODE_INDENT: code indent should use tabs where possible
#652: FILE: arch/i386/kernel/paravirt.c:218:
+ ^I^I     ".section __ex_table,\"a\"\n"$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#652: FILE: arch/i386/kernel/paravirt.c:218:
+ ^I^I     ".section __ex_table,\"a\"\n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#652: FILE: arch/i386/kernel/paravirt.c:218:
+ ^I^I     ".section __ex_table,\"a\"\n"$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#654: FILE: arch/i386/kernel/paravirt.c:220:
+^I^I     "   .long ^I2b,3b\n\t"$

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#657: FILE: arch/i386/kernel/paravirt.c:223:
+		     : "c" (msr), "0" ((u32)val), "d" ((u32)(val>>32)),
 		                                                ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#665: FILE: arch/i386/kernel/paravirt.c:231:
+	unsigned long long val;
+	asm volatile("rdtsc" : "=A" (val));

WARNING:LINE_SPACING: Missing a blank line after declarations
#672: FILE: arch/i386/kernel/paravirt.c:238:
+	unsigned long long val;
+	asm volatile("rdpmc" : "=A" (val));

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#678: FILE: arch/i386/kernel/paravirt.c:244:
+	asm volatile("ltr %w0"::"q" (GDT_ENTRY_TSS*8));
 	                                          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#683: FILE: arch/i386/kernel/paravirt.c:249:
+	asm volatile("lldt %w0"::"q" (GDT_ENTRY_LDT*8));
 	                                           ^

CHECK:CAMELCASE: Avoid CamelCase: <Xgt_desc_struct>
#686: FILE: arch/i386/kernel/paravirt.c:252:
+static fastcall void native_load_gdt(const struct Xgt_desc_struct *dtr)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#698: FILE: arch/i386/kernel/paravirt.c:264:
+	asm ("sgdt %0":"=m" (*dtr));
 	              ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#703: FILE: arch/i386/kernel/paravirt.c:269:
+	asm ("sidt %0":"=m" (*dtr));
 	              ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#709: FILE: arch/i386/kernel/paravirt.c:275:
+	unsigned long tr;
+	asm ("str %0":"=r" (tr));

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#709: FILE: arch/i386/kernel/paravirt.c:275:
+	asm ("str %0":"=r" (tr));
 	             ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#715: FILE: arch/i386/kernel/paravirt.c:281:
+#define C(i) get_cpu_gdt_table(cpu)[GDT_ENTRY_TLS_MIN + i] = t->tls_array[i]

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#715: FILE: arch/i386/kernel/paravirt.c:281:
+#define C(i) get_cpu_gdt_table(cpu)[GDT_ENTRY_TLS_MIN + i] = t->tls_array[i]

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'i' may be better as '(i)' to avoid precedence issues
#715: FILE: arch/i386/kernel/paravirt.c:281:
+#define C(i) get_cpu_gdt_table(cpu)[GDT_ENTRY_TLS_MIN + i] = t->tls_array[i]

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#722: FILE: arch/i386/kernel/paravirt.c:288:
+	__u32 *lp = (__u32 *)((char *)dt + entry*8);
 	                                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#724: FILE: arch/i386/kernel/paravirt.c:290:
+	*(lp+1) = entry_b;
 	    ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#742: FILE: arch/i386/kernel/paravirt.c:308:
+static fastcall void native_set_iopl_mask(unsigned mask)

WARNING:LINE_SPACING: Missing a blank line after declarations
#745: FILE: arch/i386/kernel/paravirt.c:311:
+	unsigned int reg;
+	asm volatile ("pushfl;"

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#757: FILE: arch/i386/kernel/paravirt.c:323:
+extern fastcall void native_irq_enable_sysexit(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#806: FILE: include/asm-i386/paravirt.h:1:
+#ifndef __ASM_PARAVIRT_H

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#809: FILE: include/asm-i386/paravirt.h:4:
+ * para-virtualization: those hooks are defined here. */

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#816: FILE: include/asm-i386/paravirt.h:11:
+struct paravirt_ops
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#820: FILE: include/asm-i386/paravirt.h:15:
+	/* All the function pointers here are declared as "fastcall"
+	   so that we get a specific register-based calling

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#822: FILE: include/asm-i386/paravirt.h:17:
+	   assembler replacements. */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#825: FILE: include/asm-i386/paravirt.h:20:
+	void (fastcall *cpuid)(unsigned int *eax, unsigned int *ebx,
+		      unsigned int *ecx, unsigned int *edx);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void' should also have an identifier name
#832: FILE: include/asm-i386/paravirt.h:27:
+	unsigned int (fastcall *read_cr0)(void);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void' should also have an identifier name
#835: FILE: include/asm-i386/paravirt.h:30:
+	unsigned int (fastcall *read_cr2)(void);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void' should also have an identifier name
#838: FILE: include/asm-i386/paravirt.h:33:
+	unsigned int (fastcall *read_cr3)(void);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void' should also have an identifier name
#841: FILE: include/asm-i386/paravirt.h:36:
+	unsigned int (fastcall *read_cr4_safe)(void);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void' should also have an identifier name
#842: FILE: include/asm-i386/paravirt.h:37:
+	unsigned int (fastcall *read_cr4)(void);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void' should also have an identifier name
#845: FILE: include/asm-i386/paravirt.h:40:
+	unsigned long (fastcall *save_fl)(void);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void' should also have an identifier name
#847: FILE: include/asm-i386/paravirt.h:42:
+	unsigned long (fastcall *save_fl_irq_disable)(void);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void' should also have an identifier name
#867: FILE: include/asm-i386/paravirt.h:62:
+	unsigned long (fastcall *store_tr)(void);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#873: FILE: include/asm-i386/paravirt.h:68:
+	void (fastcall *set_iopl_mask)(unsigned mask);

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#892: FILE: include/asm-i386/paravirt.h:87:
+#define get_debugreg(var, reg) var = paravirt_ops.get_debugreg(reg)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#948: FILE: include/asm-i386/paravirt.h:143:
+}
+#define wbinvd() paravirt_ops.wbinvd()

ERROR:SPACING: space required after that ',' (ctx:VxV)
#952: FILE: include/asm-i386/paravirt.h:147:
+#define rdmsr(msr,val1,val2) do {				\
                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#952: FILE: include/asm-i386/paravirt.h:147:
+#define rdmsr(msr,val1,val2) do {				\
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#954: FILE: include/asm-i386/paravirt.h:149:
+	u64 _l = paravirt_ops.read_msr(msr,&_err);		\
 	                                  ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#954: FILE: include/asm-i386/paravirt.h:149:
+	u64 _l = paravirt_ops.read_msr(msr,&_err);		\
 	                                   ^

ERROR:SPACING: space required before the open parenthesis '('
#957: FILE: include/asm-i386/paravirt.h:152:
+} while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#959: FILE: include/asm-i386/paravirt.h:154:
+#define wrmsr(msr,val1,val2) do {				\
                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#959: FILE: include/asm-i386/paravirt.h:154:
+#define wrmsr(msr,val1,val2) do {				\
                       ^

ERROR:SPACING: space required before the open parenthesis '('
#962: FILE: include/asm-i386/paravirt.h:157:
+} while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#964: FILE: include/asm-i386/paravirt.h:159:
+#define rdmsrl(msr,val) do {					\
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#966: FILE: include/asm-i386/paravirt.h:161:
+	val = paravirt_ops.read_msr((msr),&_err);		\
 	                                 ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#966: FILE: include/asm-i386/paravirt.h:161:
+	val = paravirt_ops.read_msr((msr),&_err);		\
 	                                  ^

ERROR:SPACING: space required before the open parenthesis '('
#967: FILE: include/asm-i386/paravirt.h:162:
+} while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#969: FILE: include/asm-i386/paravirt.h:164:
+#define wrmsrl(msr,val) (paravirt_ops.write_msr((msr),(val)))
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#969: FILE: include/asm-i386/paravirt.h:164:
+#define wrmsrl(msr,val) (paravirt_ops.write_msr((msr),(val)))
                                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#970: FILE: include/asm-i386/paravirt.h:165:
+#define wrmsr_safe(msr,a,b) ({					\
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#970: FILE: include/asm-i386/paravirt.h:165:
+#define wrmsr_safe(msr,a,b) ({					\
                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#972: FILE: include/asm-i386/paravirt.h:167:
+	paravirt_ops.write_msr((msr),_l);			\
 	                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#976: FILE: include/asm-i386/paravirt.h:171:
+#define rdmsr_safe(msr,a,b) ({					\
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#976: FILE: include/asm-i386/paravirt.h:171:
+#define rdmsr_safe(msr,a,b) ({					\
                         ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'a' may be better as '(a)' to avoid precedence issues
#976: FILE: include/asm-i386/paravirt.h:171:
+#define rdmsr_safe(msr,a,b) ({					\
+	int _err;						\
+	u64 _l = paravirt_ops.read_msr(msr,&_err);		\
+	(*a) = (u32)_l;						\
+	(*b) = _l >> 32;					\
+	_err; })

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'b' may be better as '(b)' to avoid precedence issues
#976: FILE: include/asm-i386/paravirt.h:171:
+#define rdmsr_safe(msr,a,b) ({					\
+	int _err;						\
+	u64 _l = paravirt_ops.read_msr(msr,&_err);		\
+	(*a) = (u32)_l;						\
+	(*b) = _l >> 32;					\
+	_err; })

ERROR:SPACING: space required after that ',' (ctx:VxO)
#978: FILE: include/asm-i386/paravirt.h:173:
+	u64 _l = paravirt_ops.read_msr(msr,&_err);		\
 	                                  ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#978: FILE: include/asm-i386/paravirt.h:173:
+	u64 _l = paravirt_ops.read_msr(msr,&_err);		\
 	                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#983: FILE: include/asm-i386/paravirt.h:178:
+#define rdtsc(low,high) do {					\
                  ^

ERROR:SPACING: space required before the open parenthesis '('
#987: FILE: include/asm-i386/paravirt.h:182:
+} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#992: FILE: include/asm-i386/paravirt.h:187:
+} while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#996: FILE: include/asm-i386/paravirt.h:191:
+#define write_tsc(val1,val2) wrmsr(0x10, val1, val2)
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#998: FILE: include/asm-i386/paravirt.h:193:
+#define rdpmc(counter,low,high) do {				\
                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#998: FILE: include/asm-i386/paravirt.h:193:
+#define rdpmc(counter,low,high) do {				\
                          ^

ERROR:SPACING: space required before the open parenthesis '('
#1002: FILE: include/asm-i386/paravirt.h:197:
+} while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1011: FILE: include/asm-i386/paravirt.h:206:
+#define load_TLS(t,cpu) (paravirt_ops.load_tls((t),(cpu)))
                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1011: FILE: include/asm-i386/paravirt.h:206:
+#define load_TLS(t,cpu) (paravirt_ops.load_tls((t),(cpu)))
                                                   ^

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#1012: FILE: include/asm-i386/paravirt.h:207:
+#define write_ldt_entry(dt, entry, a, b) (paravirt_ops.write_ldt_entry((dt), (entry), ((u64)a) << 32 | b))

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'b' may be better as '(b)' to avoid precedence issues
#1012: FILE: include/asm-i386/paravirt.h:207:
+#define write_ldt_entry(dt, entry, a, b) (paravirt_ops.write_ldt_entry((dt), (entry), ((u64)a) << 32 | b))

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#1013: FILE: include/asm-i386/paravirt.h:208:
+#define write_gdt_entry(dt, entry, a, b) (paravirt_ops.write_gdt_entry((dt), (entry), ((u64)a) << 32 | b))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'b' may be better as '(b)' to avoid precedence issues
#1013: FILE: include/asm-i386/paravirt.h:208:
+#define write_gdt_entry(dt, entry, a, b) (paravirt_ops.write_gdt_entry((dt), (entry), ((u64)a) << 32 | b))

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#1014: FILE: include/asm-i386/paravirt.h:209:
+#define write_idt_entry(dt, entry, a, b) (paravirt_ops.write_idt_entry((dt), (entry), ((u64)a) << 32 | b))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'b' may be better as '(b)' to avoid precedence issues
#1014: FILE: include/asm-i386/paravirt.h:209:
+#define write_idt_entry(dt, entry, a, b) (paravirt_ops.write_idt_entry((dt), (entry), ((u64)a) << 32 | b))

CHECK:SPACING: spaces preferred around that '*' (ctx:WxO)
#1021: FILE: include/asm-i386/paravirt.h:216:
+#define INTERRUPT_RETURN	jmp *%cs:paravirt_ops+PARAVIRT_iret
                         	    ^

CHECK:SPACING: spaces preferred around that '%' (ctx:OxV)
#1021: FILE: include/asm-i386/paravirt.h:216:
+#define INTERRUPT_RETURN	jmp *%cs:paravirt_ops+PARAVIRT_iret
                         	     ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#1021: FILE: include/asm-i386/paravirt.h:216:
+#define INTERRUPT_RETURN	jmp *%cs:paravirt_ops+PARAVIRT_iret
                         	        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1021: FILE: include/asm-i386/paravirt.h:216:
+#define INTERRUPT_RETURN	jmp *%cs:paravirt_ops+PARAVIRT_iret
                         	                     ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1021: FILE: include/asm-i386/paravirt.h:216:
+#define INTERRUPT_RETURN	jmp *%cs:paravirt_ops+PARAVIRT_iret

WARNING:LONG_LINE: line length of 140 exceeds 100 columns
#1022: FILE: include/asm-i386/paravirt.h:217:
+#define DISABLE_INTERRUPTS	pushl %eax; pushl %ecx; pushl %edx; call *paravirt_ops+PARAVIRT_irq_disable; popl %edx; popl %ecx; popl %eax

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#1022: FILE: include/asm-i386/paravirt.h:217:
+#define DISABLE_INTERRUPTS	pushl %eax; pushl %ecx; pushl %edx; call *paravirt_ops+PARAVIRT_irq_disable; popl %edx; popl %ecx; popl %eax
                           	      ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#1022: FILE: include/asm-i386/paravirt.h:217:
+#define DISABLE_INTERRUPTS	pushl %eax; pushl %ecx; pushl %edx; call *paravirt_ops+PARAVIRT_irq_disable; popl %edx; popl %ecx; popl %eax
                           	                  ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#1022: FILE: include/asm-i386/paravirt.h:217:
+#define DISABLE_INTERRUPTS	pushl %eax; pushl %ecx; pushl %edx; call *paravirt_ops+PARAVIRT_irq_disable; popl %edx; popl %ecx; popl %eax
                           	                              ^

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#1022: FILE: include/asm-i386/paravirt.h:217:
+#define DISABLE_INTERRUPTS	pushl %eax; pushl %ecx; pushl %edx; call *paravirt_ops+PARAVIRT_irq_disable; popl %edx; popl %ecx; popl %eax
                           	                                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1022: FILE: include/asm-i386/paravirt.h:217:
+#define DISABLE_INTERRUPTS	pushl %eax; pushl %ecx; pushl %edx; call *paravirt_ops+PARAVIRT_irq_disable; popl %edx; popl %ecx; popl %eax
                           	                                                      ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#1022: FILE: include/asm-i386/paravirt.h:217:
+#define DISABLE_INTERRUPTS	pushl %eax; pushl %ecx; pushl %edx; call *paravirt_ops+PARAVIRT_irq_disable; popl %edx; popl %ecx; popl %eax
                           	                                                                                  ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#1022: FILE: include/asm-i386/paravirt.h:217:
+#define DISABLE_INTERRUPTS	pushl %eax; pushl %ecx; pushl %edx; call *paravirt_ops+PARAVIRT_irq_disable; popl %edx; popl %ecx; popl %eax
                           	                                                                                             ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#1022: FILE: include/asm-i386/paravirt.h:217:
+#define DISABLE_INTERRUPTS	pushl %eax; pushl %ecx; pushl %edx; call *paravirt_ops+PARAVIRT_irq_disable; popl %edx; popl %ecx; popl %eax
                           	                                                                                                        ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1022: FILE: include/asm-i386/paravirt.h:217:
+#define DISABLE_INTERRUPTS	pushl %eax; pushl %ecx; pushl %edx; call *paravirt_ops+PARAVIRT_irq_disable; popl %edx; popl %ecx; popl %eax

WARNING:LONG_LINE: line length of 143 exceeds 100 columns
#1023: FILE: include/asm-i386/paravirt.h:218:
+#define ENABLE_INTERRUPTS	pushl %eax; pushl %ecx; pushl %edx; call *%cs:paravirt_ops+PARAVIRT_irq_enable; popl %edx; popl %ecx; popl %eax

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#1023: FILE: include/asm-i386/paravirt.h:218:
+#define ENABLE_INTERRUPTS	pushl %eax; pushl %ecx; pushl %edx; call *%cs:paravirt_ops+PARAVIRT_irq_enable; popl %edx; popl %ecx; popl %eax
                          	      ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#1023: FILE: include/asm-i386/paravirt.h:218:
+#define ENABLE_INTERRUPTS	pushl %eax; pushl %ecx; pushl %edx; call *%cs:paravirt_ops+PARAVIRT_irq_enable; popl %edx; popl %ecx; popl %eax
                          	                  ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#1023: FILE: include/asm-i386/paravirt.h:218:
+#define ENABLE_INTERRUPTS	pushl %eax; pushl %ecx; pushl %edx; call *%cs:paravirt_ops+PARAVIRT_irq_enable; popl %edx; popl %ecx; popl %eax
                          	                              ^

CHECK:SPACING: spaces preferred around that '*' (ctx:WxO)
#1023: FILE: include/asm-i386/paravirt.h:218:
+#define ENABLE_INTERRUPTS	pushl %eax; pushl %ecx; pushl %edx; call *%cs:paravirt_ops+PARAVIRT_irq_enable; popl %edx; popl %ecx; popl %eax
                          	                                         ^

CHECK:SPACING: spaces preferred around that '%' (ctx:OxV)
#1023: FILE: include/asm-i386/paravirt.h:218:
+#define ENABLE_INTERRUPTS	pushl %eax; pushl %ecx; pushl %edx; call *%cs:paravirt_ops+PARAVIRT_irq_enable; popl %edx; popl %ecx; popl %eax
                          	                                          ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#1023: FILE: include/asm-i386/paravirt.h:218:
+#define ENABLE_INTERRUPTS	pushl %eax; pushl %ecx; pushl %edx; call *%cs:paravirt_ops+PARAVIRT_irq_enable; popl %edx; popl %ecx; popl %eax
                          	                                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1023: FILE: include/asm-i386/paravirt.h:218:
+#define ENABLE_INTERRUPTS	pushl %eax; pushl %ecx; pushl %edx; call *%cs:paravirt_ops+PARAVIRT_irq_enable; popl %edx; popl %ecx; popl %eax
                          	                                                          ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#1023: FILE: include/asm-i386/paravirt.h:218:
+#define ENABLE_INTERRUPTS	pushl %eax; pushl %ecx; pushl %edx; call *%cs:paravirt_ops+PARAVIRT_irq_enable; popl %edx; popl %ecx; popl %eax
                          	                                                                                     ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#1023: FILE: include/asm-i386/paravirt.h:218:
+#define ENABLE_INTERRUPTS	pushl %eax; pushl %ecx; pushl %edx; call *%cs:paravirt_ops+PARAVIRT_irq_enable; popl %edx; popl %ecx; popl %eax
                          	                                                                                                ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#1023: FILE: include/asm-i386/paravirt.h:218:
+#define ENABLE_INTERRUPTS	pushl %eax; pushl %ecx; pushl %edx; call *%cs:paravirt_ops+PARAVIRT_irq_enable; popl %edx; popl %ecx; popl %eax
                          	                                                                                                           ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1023: FILE: include/asm-i386/paravirt.h:218:
+#define ENABLE_INTERRUPTS	pushl %eax; pushl %ecx; pushl %edx; call *%cs:paravirt_ops+PARAVIRT_irq_enable; popl %edx; popl %ecx; popl %eax

CHECK:SPACING: spaces preferred around that '*' (ctx:WxO)
#1024: FILE: include/asm-i386/paravirt.h:219:
+#define ENABLE_INTERRUPTS_SYSEXIT	jmp *%cs:paravirt_ops+PARAVIRT_irq_enable_sysexit
                                  	    ^

CHECK:SPACING: spaces preferred around that '%' (ctx:OxV)
#1024: FILE: include/asm-i386/paravirt.h:219:
+#define ENABLE_INTERRUPTS_SYSEXIT	jmp *%cs:paravirt_ops+PARAVIRT_irq_enable_sysexit
                                  	     ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#1024: FILE: include/asm-i386/paravirt.h:219:
+#define ENABLE_INTERRUPTS_SYSEXIT	jmp *%cs:paravirt_ops+PARAVIRT_irq_enable_sysexit
                                  	        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1024: FILE: include/asm-i386/paravirt.h:219:
+#define ENABLE_INTERRUPTS_SYSEXIT	jmp *%cs:paravirt_ops+PARAVIRT_irq_enable_sysexit
                                  	                     ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1024: FILE: include/asm-i386/paravirt.h:219:
+#define ENABLE_INTERRUPTS_SYSEXIT	jmp *%cs:paravirt_ops+PARAVIRT_irq_enable_sysexit

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#1025: FILE: include/asm-i386/paravirt.h:220:
+#define GET_CR0_INTO_EAX	call *paravirt_ops+PARAVIRT_read_cr0
                         	     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1025: FILE: include/asm-i386/paravirt.h:220:
+#define GET_CR0_INTO_EAX	call *paravirt_ops+PARAVIRT_read_cr0
                         	                  ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1025: FILE: include/asm-i386/paravirt.h:220:
+#define GET_CR0_INTO_EAX	call *paravirt_ops+PARAVIRT_read_cr0

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.49325.commit.00f4c79f8998c7b6f8f72d9cca5f87256f1aa3d2 total: 86 errors, 53 warnings, 50 checks, 887 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.49325.commit.00f4c79f8998c7b6f8f72d9cca5f87256f1aa3d2 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
