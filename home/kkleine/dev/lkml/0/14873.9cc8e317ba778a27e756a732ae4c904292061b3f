WARNING:TYPO_SPELLING: 'beeing' may be misspelled - perhaps 'being'?
#32: 
Thas is rather unfortunate as beeing silent and only posting updates
                              ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'definitly' may be misspelled - perhaps 'definitely'?
#33: 
on your website is definitly not the way to get things merged.
                   ^^^^^^^^^

WARNING:TYPO_SPELLING: 'focusses' may be misspelled - perhaps 'focuses'?
#44: 
Note that this mostly focusses on codingstyle and general kernel
                      ^^^^^^^^

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#65: FILE: include/asm-i386/thread_info.h:145:
	I think it would make a lot of sense if you simply reused the

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#134: FILE: include/linux/tracehook.h:1:
+ *	void tracehook_enable_single_step(struct task_struct *tsk);

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#134: FILE: include/linux/tracehook.h:1:
+ *^Ivoid tracehook_enable_single_step(struct task_struct *tsk);$

ERROR:SPACING: space prohibited after that '*' (ctx:ExW)
#134: FILE: include/linux/tracehook.h:1:
+ *	void tracehook_enable_single_step(struct task_struct *tsk);
  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#135: FILE: include/linux/tracehook.h:2:
+ *^Ivoid tracehook_disable_single_step(struct task_struct *tsk);$

ERROR:SPACING: space prohibited after that '*' (ctx:ExW)
#135: FILE: include/linux/tracehook.h:2:
+ *	void tracehook_disable_single_step(struct task_struct *tsk);
  ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#136: FILE: include/linux/tracehook.h:3:
+ *^Iint tracehook_single_step_enabled(struct task_struct *tsk);$

ERROR:SPACING: space prohibited after that '*' (ctx:ExW)
#136: FILE: include/linux/tracehook.h:3:
+ *	int tracehook_single_step_enabled(struct task_struct *tsk);
  ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#137: FILE: include/linux/tracehook.h:4:
+ *$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#138: FILE: include/linux/tracehook.h:5:
+ * If those calls are defined, #define ARCH_HAS_SINGLE_STEP to nonzero.$

ERROR:SPACING: space prohibited after that '*' (ctx:ExW)
#138: FILE: include/linux/tracehook.h:5:
+ * If those calls are defined, #define ARCH_HAS_SINGLE_STEP to nonzero.
  ^

CHECK:CAMELCASE: Avoid CamelCase: <If>
#138: FILE: include/linux/tracehook.h:5:
+ * If those calls are defined, #define ARCH_HAS_SINGLE_STEP to nonzero.

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#139: FILE: include/linux/tracehook.h:6:
+ * Do not #define it if these calls are never available in this kernel config.$

ERROR:SPACING: space prohibited after that '*' (ctx:ExW)
#139: FILE: include/linux/tracehook.h:6:
+ * Do not #define it if these calls are never available in this kernel config.
  ^

CHECK:CAMELCASE: Avoid CamelCase: <Do>
#139: FILE: include/linux/tracehook.h:6:
+ * Do not #define it if these calls are never available in this kernel config.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#140: FILE: include/linux/tracehook.h:7:
+ * If defined, the value of ARCH_HAS_SINGLE_STEP can be constant or variable.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#141: FILE: include/linux/tracehook.h:8:
+ * It should evaluate to nonzero if the hardware is able to support$

CHECK:CAMELCASE: Avoid CamelCase: <It>
#141: FILE: include/linux/tracehook.h:8:
+ * It should evaluate to nonzero if the hardware is able to support

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#142: FILE: include/linux/tracehook.h:9:
+ * tracehook_enable_single_step.  If it's a variable expression, it$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#143: FILE: include/linux/tracehook.h:10:
+ * should be one that can be evaluated in modules, i.e. uses exported symbols.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#224: FILE: include/linux/tracehook.h:67:
+ * Called in copy_process when setting up the copied task_struct,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#225: FILE: include/linux/tracehook.h:68:
+ * with tasklist_lock held for writing.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#226: FILE: include/linux/tracehook.h:69:
+ */$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#250: FILE: include/linux/tracehook.h:87:
+	if ((tsk->utrace_flags & UTRACE_EVENT_SIGNAL_ALL)
+	    && (tsk->utrace_flags & (UTRACE_ACTION_SINGLESTEP

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#283: FILE: kernel/utrace.c:1:
+#include <linux/utrace.h>

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!target->utrace"
#296: FILE: kernel/utrace.c:11:
+	if (likely(target->utrace == NULL)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#327: FILE: kernel/utrace.c:42:
+	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#327: FILE: kernel/utrace.c:42:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:INDENTED_LABEL: labels should not be indented
#332: FILE: kernel/utrace.c:47:
+	cannot_attach:

WARNING:FUNCTION_ARGUMENTS: function definition argument 'in' should also have an identifier name
#364: FILE: kernel/utrace.c:62:
+struct utrace_attached_engine *

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'utrace' should also have an identifier name
#364: FILE: kernel/utrace.c:62:
+struct utrace_attached_engine *

WARNING:FUNCTION_ARGUMENTS: function definition argument 'utrace' should also have an identifier name
#364: FILE: kernel/utrace.c:62:
+struct utrace_attached_engine *

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#366: FILE: kernel/utrace.c:64:
+utrace_attach(struct task_struct *target, int flags,
+	     const struct utrace_engine_ops *ops, unsigned long data)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'callback' may be better as '(callback)' to avoid precedence issues
#474: FILE: kernel/utrace.c:86:
+#define REPORT(callback, ...) do { \
+	u32 ret = (*rcu_dereference(engine->ops)->callback) \
+		(engine, tsk, ##__VA_ARGS__); \
+	action = update_action(tsk, utrace, engine, ret); \
+	} while (0)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#492: FILE: kernel/utrace.c:101:
+#define M(sig) (1ULL << ((sig)-1))
                               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#494: FILE: kernel/utrace.c:103:
+#define M(sig) (1UL << ((sig)-1))
                              ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#499: FILE: kernel/utrace.c:108:
+	M(SIGKILL)   |  M(SIGSTOP)                                   )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#502: FILE: kernel/utrace.c:111:
+	M(SIGSTOP)   |  M(SIGTSTP)   |  M(SIGTTIN)   |  M(SIGTTOU)   )

ERROR:CODE_INDENT: code indent should use tabs where possible
#505: FILE: kernel/utrace.c:114:
+        M(SIGQUIT)   |  M(SIGILL)    |  M(SIGTRAP)   |  M(SIGABRT)   | \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#505: FILE: kernel/utrace.c:114:
+        M(SIGQUIT)   |  M(SIGILL)    |  M(SIGTRAP)   |  M(SIGABRT)   | \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#506: FILE: kernel/utrace.c:115:
+        M(SIGFPE)    |  M(SIGSEGV)   |  M(SIGBUS)    |  M(SIGSYS)    | \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#506: FILE: kernel/utrace.c:115:
+        M(SIGFPE)    |  M(SIGSEGV)   |  M(SIGBUS)    |  M(SIGSYS)    | \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#507: FILE: kernel/utrace.c:116:
+        M(SIGXCPU)   |  M(SIGXFSZ)   |  M_SIGEMT                     )$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#507: FILE: kernel/utrace.c:116:
+        M(SIGXCPU)   |  M(SIGXFSZ)   |  M_SIGEMT                     )$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#507: FILE: kernel/utrace.c:116:
+        M(SIGXCPU)   |  M(SIGXFSZ)   |  M_SIGEMT                     )

ERROR:CODE_INDENT: code indent should use tabs where possible
#510: FILE: kernel/utrace.c:119:
+        M(SIGCONT)   |  M(SIGCHLD)   |  M(SIGWINCH)  |  M(SIGURG)    )$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#510: FILE: kernel/utrace.c:119:
+        M(SIGCONT)   |  M(SIGCHLD)   |  M(SIGWINCH)  |  M(SIGURG)    )$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#510: FILE: kernel/utrace.c:119:
+        M(SIGCONT)   |  M(SIGCHLD)   |  M(SIGWINCH)  |  M(SIGURG)    )

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sig' - possible side-effects?
#512: FILE: kernel/utrace.c:121:
+#define sig_kernel_only(sig) \
+		(((sig) < SIGRTMIN)  && T(sig, SIG_KERNEL_ONLY_MASK))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sig' - possible side-effects?
#514: FILE: kernel/utrace.c:123:
+#define sig_kernel_coredump(sig) \
+		(((sig) < SIGRTMIN)  && T(sig, SIG_KERNEL_COREDUMP_MASK))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sig' - possible side-effects?
#516: FILE: kernel/utrace.c:125:
+#define sig_kernel_ignore(sig) \
+		(((sig) < SIGRTMIN)  && T(sig, SIG_KERNEL_IGNORE_MASK))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sig' - possible side-effects?
#518: FILE: kernel/utrace.c:127:
+#define sig_kernel_stop(sig) \
+		(((sig) < SIGRTMIN)  && T(sig, SIG_KERNEL_STOP_MASK))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#567: FILE: kernel/utrace.c:145:
+	printk("ptrace pid %ld => %p\n", pid, child);

WARNING:SIZEOF_PARENTHESIS: sizeof ppc32_regsets should be sizeof(ppc32_regsets)
#576: FILE: kernel/utrace.c:152:
+	.n = sizeof ppc32_regsets / sizeof ppc32_regsets[0],

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.14873.commit.9cc8e317ba778a27e756a732ae4c904292061b3f total: 15 errors, 28 warnings, 14 checks, 465 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.14873.commit.9cc8e317ba778a27e756a732ae4c904292061b3f has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
