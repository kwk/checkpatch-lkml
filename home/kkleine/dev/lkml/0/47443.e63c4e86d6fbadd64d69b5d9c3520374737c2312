WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#30: 
One particular design issue with the current slab is that it is build on the

WARNING:TYPO_SPELLING: 'manupulation' may be misspelled - perhaps 'manipulation'?
#55: 
   the slab and is only taken during list manipulation. List manupulation
                                                             ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#100: FILE: mm/slabifier.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#114: FILE: mm/slabifier.c:15:
+#define	DBUG_ON(_x) BUG_ON(_x)

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#124: FILE: mm/slabifier.c:25:
+	spinlock_t list_lock;		/* Lock for partial slabs.

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#151: FILE: mm/slabifier.c:52:
+	return max(0, (fls(sizeof(struct slab)-1) - PAGE_SHIFT));
 	                                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#160: FILE: mm/slabifier.c:61:
+ * ^Ilru^I -> used to a slab on the lists$

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#225: FILE: mm/slabifier.c:126:
+	(*object_counter(page))= counter;
 	                       ^

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#230: FILE: mm/slabifier.c:131:
+	return (*object_counter(page));

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#234: FILE: mm/slabifier.c:135:
+ * For a given active page get the corresponding cpu */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#262: FILE: mm/slabifier.c:163:
+		printk(KERN_CRIT "Not a valid slab page @%p flags=%lx"

WARNING:SPLIT_STRING: quoted string split across lines
#263: FILE: mm/slabifier.c:164:
+		printk(KERN_CRIT "Not a valid slab page @%p flags=%lx"
+			" mapping=%p count=%d \n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#263: FILE: mm/slabifier.c:164:
+			" mapping=%p count=%d \n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#265: FILE: mm/slabifier.c:166:
+		BUG();

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#274: FILE: mm/slabifier.c:175:
+		printk(KERN_CRIT "Not an active slab page @%p flags=%lx"

WARNING:SPLIT_STRING: quoted string split across lines
#275: FILE: mm/slabifier.c:176:
+		printk(KERN_CRIT "Not an active slab page @%p flags=%lx"
+			" mapping=%p count=%d \n",

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#275: FILE: mm/slabifier.c:176:
+			" mapping=%p count=%d \n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#277: FILE: mm/slabifier.c:178:
+		BUG();

CHECK:CAMELCASE: Avoid CamelCase: <__ClearPageSlab>
#301: FILE: mm/slabifier.c:202:
+	__ClearPageSlab(page);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:LONG_LINE: line length of 135 exceeds 100 columns
#341: FILE: mm/slabifier.c:242:
+			TPRINTK(KERN_CRIT "slab %s: %p partial %d/%d %d cpu=%d\n",s->sc.name, page, inuse, s->objects, contended, cpu);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: space required after that ',' (ctx:VxV)
#341: FILE: mm/slabifier.c:242:
+			TPRINTK(KERN_CRIT "slab %s: %p partial %d/%d %d cpu=%d\n",s->sc.name, page, inuse, s->objects, contended, cpu);
 			                                                         ^

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#349: FILE: mm/slabifier.c:250:
+			TPRINTK(KERN_CRIT "slab %s:  %p full %d cpu=%d\n",s->sc.name, page, contended, cpu);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#349: FILE: mm/slabifier.c:250:
+			TPRINTK(KERN_CRIT "slab %s:  %p full %d cpu=%d\n",s->sc.name, page, contended, cpu);
 			                                                 ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#368: FILE: mm/slabifier.c:269:
+		printk(KERN_CRIT "slab %s size %d: pointer %p->%p\nnot in "

WARNING:SPLIT_STRING: quoted string split across lines
#369: FILE: mm/slabifier.c:270:
+		printk(KERN_CRIT "slab %s size %d: pointer %p->%p\nnot in "
+			" range (%p-%p) in page %p\n", s->sc.name, s->size,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#376: FILE: mm/slabifier.c:277:
+		printk(KERN_CRIT "slab %s size %d: pointer %p->%p\n"

WARNING:SPLIT_STRING: quoted string split across lines
#378: FILE: mm/slabifier.c:279:
+			"does not properly point"
+			"to an object in page %p\n",

WARNING:MISSING_SPACE: break quoted strings at a space character
#378: FILE: mm/slabifier.c:279:
+			"does not properly point"
+			"to an object in page %p\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#411: FILE: mm/slabifier.c:312:
+		printk(KERN_CRIT "slab %s: page %p wrong object count."

WARNING:SPLIT_STRING: quoted string split across lines
#412: FILE: mm/slabifier.c:313:
+		printk(KERN_CRIT "slab %s: page %p wrong object count."
+			" counter is %d but counted were %d\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#415: FILE: mm/slabifier.c:316:
+		printk(KERN_CRIT "****** Trying to continue by marking "

WARNING:SPLIT_STRING: quoted string split across lines
#416: FILE: mm/slabifier.c:317:
+		printk(KERN_CRIT "****** Trying to continue by marking "
+			"all objects used (memory leak!)\n");

CHECK:CAMELCASE: Avoid CamelCase: <__SetPageSlab>
#459: FILE: mm/slabifier.c:360:
+	__SetPageSlab(page);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'flush_active', this function's name, in a string
#494: FILE: mm/slabifier.c:395:
+	TPRINTK(KERN_CRIT "flush_active %s cpu=%d\n", s->sc.name, cpu);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#513: FILE: mm/slabifier.c:414:
+	for_each_online_cpu(cpu) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#518: FILE: mm/slabifier.c:419:
+		if (PageReferenced(page)) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#521: FILE: mm/slabifier.c:422:
+		} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#566: FILE: mm/slabifier.c:467:
+static int __slab_create(struct slab *s,
+	const struct slab_allocator *slab_alloc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#573: FILE: mm/slabifier.c:474:
+	slab_allocator_fill(&s->sc, slab_alloc, page_alloc, node, name, size,
+		align, order, objsize, inuse, offset);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#577: FILE: mm/slabifier.c:478:
+	if (offset > s->size - sizeof(void *) || (offset % sizeof(void*)))

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#589: FILE: mm/slabifier.c:490:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#606: FILE: mm/slabifier.c:507:
+static struct slab_cache *slab_create(const struct slab_allocator *slab_alloc,
+	const struct page_allocator *page_alloc, int node, const char *name,

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#612: FILE: mm/slabifier.c:513:
+		if (__slab_create(&cache_cache,
[...]
+		panic("Cannot create slab of slabifier slabs!");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#613: FILE: mm/slabifier.c:514:
+		if (__slab_create(&cache_cache,
+			slab_alloc, page_alloc, node, "cache_cache",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#627: FILE: mm/slabifier.c:528:
+	__slab_create(s, slab_alloc, page_alloc, node, name, size, align,
+		order, objsize, inuse, offset);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#657: FILE: mm/slabifier.c:558:
+	if (unlikely(list_empty(&s->partial))) {
+

WARNING:TYPO_SPELLING: 'objets' may be misspelled - perhaps 'objects'?
#658: FILE: mm/slabifier.c:559:
+		/* No slabs with free objets */
 		                      ^^^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#660: FILE: mm/slabifier.c:561:
+		if ((flags & __GFP_WAIT)) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#664: FILE: mm/slabifier.c:565:
+		} else

ERROR:SPACING: space required after that ',' (ctx:VxO)
#671: FILE: mm/slabifier.c:572:
+		list_add(&page->lru,&s->partial);
 		                   ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#671: FILE: mm/slabifier.c:572:
+		list_add(&page->lru,&s->partial);
 		                    ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#692: FILE: mm/slabifier.c:593:
+}
+/*

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#736: FILE: mm/slabifier.c:637:
+	struct page * page;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#756: FILE: mm/slabifier.c:657:
+	struct page * page;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#767: FILE: mm/slabifier.c:668:
+		printk(KERN_CRIT "slab_free %s size %d: attempt to free object"

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'slab_free', this function's name, in a string
#767: FILE: mm/slabifier.c:668:
+		printk(KERN_CRIT "slab_free %s size %d: attempt to free object"

WARNING:SPLIT_STRING: quoted string split across lines
#768: FILE: mm/slabifier.c:669:
+		printk(KERN_CRIT "slab_free %s size %d: attempt to free object"
+			"(%p) outside of slab.\n", s->sc.name, s->size, object);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#785: FILE: mm/slabifier.c:686:
+			printk(KERN_CRIT

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'slab_free', this function's name, in a string
#786: FILE: mm/slabifier.c:687:
+				"slab_free : no slab(NULL) for object %p.\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#794: FILE: mm/slabifier.c:695:
+		printk(KERN_CRIT "slab_free %s: object at %p"

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'slab_free', this function's name, in a string
#794: FILE: mm/slabifier.c:695:
+		printk(KERN_CRIT "slab_free %s: object at %p"

WARNING:SPLIT_STRING: quoted string split across lines
#795: FILE: mm/slabifier.c:696:
+		printk(KERN_CRIT "slab_free %s: object at %p"
+				" belongs to slab %p\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#804: FILE: mm/slabifier.c:705:
+		printk(KERN_CRIT "***** Trying to continue by not"

WARNING:SPLIT_STRING: quoted string split across lines
#805: FILE: mm/slabifier.c:706:
+		printk(KERN_CRIT "***** Trying to continue by not"
+				"freeing object.\n");

WARNING:MISSING_SPACE: break quoted strings at a space character
#805: FILE: mm/slabifier.c:706:
+		printk(KERN_CRIT "***** Trying to continue by not"
+				"freeing object.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#815: FILE: mm/slabifier.c:716:
+		printk(KERN_CRIT "slab_free %s: object %p already free.\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'slab_free', this function's name, in a string
#815: FILE: mm/slabifier.c:716:
+		printk(KERN_CRIT "slab_free %s: object %p already free.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#816: FILE: mm/slabifier.c:717:
+		printk(KERN_CRIT "slab_free %s: object %p already free.\n",
+						s->sc.name, object);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#868: FILE: mm/slabifier.c:769:
+	struct page * page;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#871: FILE: mm/slabifier.c:772:
+	TPRINTK(KERN_CRIT "slab_pointer_valid(%s,%p\n",s->sc.name, object);
 	                                              ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'slab_pointer_valid', this function's name, in a string
#871: FILE: mm/slabifier.c:772:
+	TPRINTK(KERN_CRIT "slab_pointer_valid(%s,%p\n",s->sc.name, object);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#892: FILE: mm/slabifier.c:793:
+static unsigned long slab_object_size(struct slab_cache *sc,
+						const void *object)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#897: FILE: mm/slabifier.c:798:
+	TPRINTK(KERN_CRIT "slab_object_size(%p)\n",object);
 	                                          ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'slab_object_size', this function's name, in a string
#897: FILE: mm/slabifier.c:798:
+	TPRINTK(KERN_CRIT "slab_object_size(%p)\n",object);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#902: FILE: mm/slabifier.c:803:
+		BUG_ON(sc && s != (void *)sc);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#906: FILE: mm/slabifier.c:807:
+	BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#914: FILE: mm/slabifier.c:815:
+static int move_slab_objects(struct slab *s, struct page *page,
+			 int (*move_objects)(struct slab_cache *, void *))

ERROR:SPACING: spaces required around that '+=' (ctx:VxW)
#922: FILE: mm/slabifier.c:823:
+		for (p = addr; p < addr + s->objects; p+= s->size) {
 		                                       ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#955: FILE: mm/slabifier.c:856:
+static int slab_shrink(struct slab_cache *sc,
+			int (*move_object)(struct slab_cache *, void *))

ERROR:SPACING: space required before the open parenthesis '('
#970: FILE: mm/slabifier.c:871:
+	for(i = 0; s->nr_partial > 1 && i < s->nr_partial - 1 ; i++) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#971: FILE: mm/slabifier.c:872:
+		struct page * page;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#991: FILE: mm/slabifier.c:892:
+				if (move_slab_objects(s,
+						page, move_object) == 0)

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#994: FILE: mm/slabifier.c:895:
+
+		}

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1005: FILE: mm/slabifier.c:906:
+
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1018: FILE: mm/slabifier.c:919:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1034: FILE: mm/slabifier.c:935:
+	struct slab * s = (void *)sc;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1039: FILE: mm/slabifier.c:940:
+	TPRINTK("Slab destroy %s\n",sc->name);
 	                           ^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1053: FILE: mm/slabifier.c:954:
+
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1072: FILE: mm/slabifier.c:973:
+static unsigned long slab_objects(struct slab_cache *sc,
+			unsigned long *p_active, unsigned long *p_partial)

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.47443.commit.e63c4e86d6fbadd64d69b5d9c3520374737c2312 total: 17 errors, 45 warnings, 27 checks, 1020 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.47443.commit.e63c4e86d6fbadd64d69b5d9c3520374737c2312 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
