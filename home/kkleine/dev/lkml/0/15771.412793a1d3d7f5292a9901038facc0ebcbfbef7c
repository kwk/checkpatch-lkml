CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#70: FILE: include/asm-x86_64/mmzone.h:22:
+#define NODE_MIN_SIZE (32<<20)
                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#73: FILE: include/asm-x86_64/mmzone.h:25:
+#define NODE_HASH_MASK (~(NODE_MIN_SIZE -1ul))
                                         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#83: FILE: include/asm-x86_64/mmzone.h:32:
+^Iint nid; $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#84: FILE: include/asm-x86_64/mmzone.h:33:
+	int nid; 
+	nid = ((int)physnode_map[(addr >> PAGE_SHIFT) / PAGES_PER_ELEMENT]);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#95: FILE: include/asm-x86_64/numa.h:10:
+extern void populate_physnode_map(struct bootnode *nodes, int numnodes);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#106: FILE: arch/x86_64/mm/k8topology.c:144:
+^I^I$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#185: FILE: arch/x86_64/mm/numa.c:34:
 };
+unsigned char physnode_map[MAX_ELEMENTS] __read_mostly = {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#186: FILE: arch/x86_64/mm/numa.c:35:
+	[0 ... MAX_ELEMENTS-1] = NUMA_NO_NODE
 	                   ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#303: FILE: arch/x86_64/mm/numa.c:193:
+	int ret = 0;
+	nodes[nodeid].start = *addr;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#311: FILE: arch/x86_64/mm/numa.c:201:
+	printk(KERN_INFO "Faking node %d at %016Lx-%016Lx (%LuMB)\n", nodeid,

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#311: FILE: arch/x86_64/mm/numa.c:201:
+	printk(KERN_INFO "Faking node %d at %016Lx-%016Lx (%LuMB)\n", nodeid,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#320: FILE: arch/x86_64/mm/numa.c:210:
+	if ((start < (MAX_DMA32_PFN << PAGE_SHIFT)) &&
+		(end >= (MAX_DMA32_PFN << PAGE_SHIFT)))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#351: FILE: arch/x86_64/mm/numa.c:241:
+	printk(KERN_INFO"Number of big nodes = %lu\n", big);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#351: FILE: arch/x86_64/mm/numa.c:241:
+	printk(KERN_INFO"Number of big nodes = %lu\n", big);

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#353: FILE: arch/x86_64/mm/numa.c:243:
+		printk(KERN_ERR "Not enough memory allotted for each node. "

WARNING:SPLIT_STRING: quoted string split across lines
#354: FILE: arch/x86_64/mm/numa.c:244:
+		printk(KERN_ERR "Not enough memory allotted for each node. "
+		       "NUMA emulation disabled.\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:LINE_SPACING: Missing a blank line after declarations
#360: FILE: arch/x86_64/mm/numa.c:250:
+		u64 end = *addr + sz;
+		if ((i - node_start) < big)

CHECK:BRACES: braces {} should be used on all arms of this statement
#366: FILE: arch/x86_64/mm/numa.c:256:
+		if (i == num_nodes + node_start - 1)
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#368: FILE: arch/x86_64/mm/numa.c:258:
+		else {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#381: FILE: arch/x86_64/mm/numa.c:271:
+			while (e820_hole_size(end, end+sz) > 0) {
 			                              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#382: FILE: arch/x86_64/mm/numa.c:272:
+				if (zone_cross_over(*addr, end+sz)) {
 				                              ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#440: FILE: arch/x86_64/mm/numa.c:345:
+^I/* setup dummy node covering all memory */ $

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#457: FILE: arch/x86_64/mm/numa.c:419:
+		numa_fake = simple_strtoul(opt+5,NULL,0);
 		                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#457: FILE: arch/x86_64/mm/numa.c:419:
+		numa_fake = simple_strtoul(opt+5,NULL,0);
 		                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#457: FILE: arch/x86_64/mm/numa.c:419:
+		numa_fake = simple_strtoul(opt+5,NULL,0);
 		                                     ^

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#457: FILE: arch/x86_64/mm/numa.c:419:
+		numa_fake = simple_strtoul(opt+5,NULL,0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.15771.commit.412793a1d3d7f5292a9901038facc0ebcbfbef7c total: 5 errors, 9 warnings, 12 checks, 404 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.15771.commit.412793a1d3d7f5292a9901038facc0ebcbfbef7c has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
