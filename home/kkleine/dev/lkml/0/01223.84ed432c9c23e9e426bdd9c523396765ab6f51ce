CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#104: FILE: fs/proc/internal.h:14:
+extern int proc_sys_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#110: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#115: FILE: fs/proc/proc_sysctl.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:CONST_STRUCT: struct dentry_operations should normally be const
#124: FILE: fs/proc/proc_sysctl.c:10:
+static struct dentry_operations proc_sys_dentry_operations;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#126: FILE: fs/proc/proc_sysctl.c:12:
+static struct inode_operations proc_sys_inode_operations;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#161: FILE: fs/proc/proc_sysctl.c:47:
+	inode->i_mtime = inode->i_atime = inode->i_ctime = CURRENT_TIME;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#184: FILE: fs/proc/proc_sysctl.c:70:
+static struct ctl_table *proc_sys_lookup_table_one(struct ctl_table *table,
+							struct qstr *name)

WARNING:LINE_SPACING: Missing a blank line after declarations
#187: FILE: fs/proc/proc_sysctl.c:73:
+	int len;
+	for ( ; table->ctl_name || table->procname; table++) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#188: FILE: fs/proc/proc_sysctl.c:74:
+	for ( ; table->ctl_name || table->procname; table++) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#206: FILE: fs/proc/proc_sysctl.c:92:
+static struct ctl_table *proc_sys_lookup_table(struct dentry *dentry,
+						struct ctl_table *table)

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#226: FILE: fs/proc/proc_sysctl.c:112:
+
+}

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#227: FILE: fs/proc/proc_sysctl.c:113:
+}
+static struct ctl_table *proc_sys_lookup_entry(struct dentry *dparent,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#228: FILE: fs/proc/proc_sysctl.c:114:
+static struct ctl_table *proc_sys_lookup_entry(struct dentry *dparent,
+						struct qstr *name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#238: FILE: fs/proc/proc_sysctl.c:124:
+static struct ctl_table *do_proc_sys_lookup(struct dentry *parent,
+						struct qstr *name,

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#254: FILE: fs/proc/proc_sysctl.c:140:
+					struct nameidata *nd)
 					                  ^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#254: FILE: fs/proc/proc_sysctl.c:140:
+static struct dentry *proc_sys_lookup(struct inode *dir, struct dentry *dentry,
+					struct nameidata *nd)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#280: FILE: fs/proc/proc_sysctl.c:166:
+static ssize_t proc_sys_read(struct file *filp, char __user *buf,
                                           ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#281: FILE: fs/proc/proc_sysctl.c:167:
+static ssize_t proc_sys_read(struct file *filp, char __user *buf,
+				size_t count, loff_t *ppos)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#309: FILE: fs/proc/proc_sysctl.c:195:
+	error = table->proc_handler(table, 0, filp, buf, &res, ppos);
 	                                      ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#318: FILE: fs/proc/proc_sysctl.c:204:
+static ssize_t proc_sys_write(struct file *filp, const char __user *buf,
                                            ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#319: FILE: fs/proc/proc_sysctl.c:205:
+static ssize_t proc_sys_write(struct file *filp, const char __user *buf,
+				size_t count, loff_t *ppos)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#347: FILE: fs/proc/proc_sysctl.c:233:
+	error = table->proc_handler(table, 1, filp, buf, &res, ppos);
 	                                      ^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#356: FILE: fs/proc/proc_sysctl.c:242:
+
+

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#357: FILE: fs/proc/proc_sysctl.c:243:
+static int proc_sys_fill_cache(struct file *filp, void *dirent,
                                             ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#358: FILE: fs/proc/proc_sysctl.c:244:
+static int proc_sys_fill_cache(struct file *filp, void *dirent,
+				filldir_t filldir, struct ctl_table *table)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#366: FILE: fs/proc/proc_sysctl.c:252:
+	unsigned type = DT_UNKNOWN;

WARNING:LINE_SPACING: Missing a blank line after declarations
#391: FILE: fs/proc/proc_sysctl.c:277:
+		struct dentry *new;
+		new = d_alloc(dir, &qname);

CHECK:BRACES: braces {} should be used on all arms of this statement
#394: FILE: fs/proc/proc_sysctl.c:280:
+			if (!inode)
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#396: FILE: fs/proc/proc_sysctl.c:282:
+			else {

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#416: FILE: fs/proc/proc_sysctl.c:302:
+		ino= find_inode_number(dir, &qname);
 		   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#422: FILE: fs/proc/proc_sysctl.c:308:
+static int proc_sys_readdir(struct file *filp, void *dirent, filldir_t filldir)
                                          ^^^^

ERROR:SPACING: space required before the open parenthesis '('
#436: FILE: fs/proc/proc_sysctl.c:322:
+	switch(filp->f_pos) {

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#441: FILE: fs/proc/proc_sysctl.c:327:
+		/* fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#446: FILE: fs/proc/proc_sysctl.c:332:
+		/* fall through */

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#473: FILE: fs/proc/proc_sysctl.c:359:
+			if (proc_sys_fill_cache(filp, dirent, filldir, table) < 0)
 			                        ^^^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#484: FILE: fs/proc/proc_sysctl.c:370:
+static int proc_sys_permission(struct inode *inode, int mask, struct nameidata *nd)
                                                                                 ^^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#511: FILE: fs/proc/proc_sysctl.c:397:
+	if ((mode & mask & (MAY_READ|MAY_WRITE|MAY_EXEC)) == mask)
 	                            ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#511: FILE: fs/proc/proc_sysctl.c:397:
+	if ((mode & mask & (MAY_READ|MAY_WRITE|MAY_EXEC)) == mask)
 	                                      ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#517: FILE: fs/proc/proc_sysctl.c:403:
+	if (!nd || !depth)
 	     ^^

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#562: FILE: fs/proc/proc_sysctl.c:448:
+static struct inode_operations proc_sys_inode_operations = {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#568: FILE: fs/proc/proc_sysctl.c:454:
+static int proc_sys_revalidate(struct dentry *dentry, struct nameidata *nd)
                                                                         ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#572: FILE: fs/proc/proc_sysctl.c:458:
+	struct ctl_table *table;
+	table = do_proc_sys_lookup(dentry->d_parent, &dentry->d_name, &head);

WARNING:CONST_STRUCT: struct dentry_operations should normally be const
#578: FILE: fs/proc/proc_sysctl.c:464:
+static struct dentry_operations proc_sys_dentry_operations = {

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.01223.commit.84ed432c9c23e9e426bdd9c523396765ab6f51ce total: 2 errors, 23 warnings, 18 checks, 756 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.01223.commit.84ed432c9c23e9e426bdd9c523396765ab6f51ce has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
