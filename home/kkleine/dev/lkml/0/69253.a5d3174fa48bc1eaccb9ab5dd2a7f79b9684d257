WARNING:TYPO_SPELLING: 'noone' may be misspelled - perhaps 'no one'?
#31: 
The ptrace support is made an option, CONFIG_PTRACE.  For now, noone will
                                                               ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
it looks forward to a day when we can punt the ptrace system call completely.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#102: FILE: arch/powerpc/kernel/signal_32.c:638:
+	if (!access_ok (VERIFY_READ, from, sizeof(compat_siginfo_t)))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#109: FILE: arch/powerpc/kernel/signal_32.c:645:
+	if (to->si_code < 0)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#111: FILE: arch/powerpc/kernel/signal_32.c:647:
+	else {

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#116: FILE: arch/powerpc/kernel/signal_32.c:652:
+			/* fallthrough */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

CHECK:SPACING: No space is necessary after a cast
#130: FILE: arch/powerpc/kernel/signal_32.c:666:
+			to->si_addr = (void __user *)(u64) tmp;

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#206: FILE: include/asm-i386/tracehook.h:68:
+	return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#210: FILE: include/asm-i386/tracehook.h:72:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#232: FILE: include/asm-powerpc/tracehook.h:78:
 
+

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#235: FILE: include/asm-powerpc/tracehook.h:81:
+#include <asm/uaccess.h>

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#285: FILE: include/asm-powerpc/tracehook.h:131:
+
+	}

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#286: FILE: include/asm-powerpc/tracehook.h:132:
+	return -ENOSYS;

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#295: FILE: include/asm-powerpc/tracehook.h:141:
+	int ret = -ENOSYS;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#333: FILE: include/asm-powerpc/tracehook.h:179:
+		u32 __user * addrOthers;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <addrOthers>
#333: FILE: include/asm-powerpc/tracehook.h:179:
+		u32 __user * addrOthers;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#342: FILE: include/asm-powerpc/tracehook.h:188:
+		copied = access_process_vm(child, (u64)addrOthers, &tmp,
+				sizeof(tmp), 0);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#361: FILE: include/asm-powerpc/tracehook.h:207:
+		u32 __user * addrOthers;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#369: FILE: include/asm-powerpc/tracehook.h:215:
+		if (access_process_vm(child, (u64)addrOthers, &tmp,
+					sizeof(tmp), 1) == sizeof(tmp))

ERROR:OPEN_BRACE: open brace '{' following union go on the same line
#381: FILE: include/asm-powerpc/tracehook.h:227:
+		union
+		{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#389: FILE: include/asm-powerpc/tracehook.h:235:
+		if ((addr & 3) || addr > PT_FPSCR*8)
 		                                 ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#393: FILE: include/asm-powerpc/tracehook.h:239:
+		if (addr >= PT_FPR0*8) {
 		                   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#395: FILE: include/asm-powerpc/tracehook.h:241:
+			addr -= PT_FPR0*8;
 			               ^

CHECK:SPACING: spaces preferred around that '&' (ctx:WxO)
#399: FILE: include/asm-powerpc/tracehook.h:245:
+		ret = (*regset->get)(child, regset, addr &~ 7,
 		                                         ^

ERROR:SPACING: space prohibited after that '~' (ctx:OxW)
#399: FILE: include/asm-powerpc/tracehook.h:245:
+		ret = (*regset->get)(child, regset, addr &~ 7,
 		                                          ^

ERROR:OPEN_BRACE: open brace '{' following union go on the same line
#413: FILE: include/asm-powerpc/tracehook.h:259:
+		union
+		{

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#421: FILE: include/asm-powerpc/tracehook.h:267:
+		if ((addr & 3) || addr > PT_FPSCR*8)
 		                                 ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#425: FILE: include/asm-powerpc/tracehook.h:271:
+		if (addr >= PT_FPR0*8) {
 		                   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#427: FILE: include/asm-powerpc/tracehook.h:273:
+			addr -= PT_FPR0*8;
 			               ^

CHECK:SPACING: spaces preferred around that '&' (ctx:WxO)
#431: FILE: include/asm-powerpc/tracehook.h:277:
+		ret = (*regset->get)(child, regset, addr &~ 7,
 		                                         ^

ERROR:SPACING: space prohibited after that '~' (ctx:OxW)
#431: FILE: include/asm-powerpc/tracehook.h:277:
+		ret = (*regset->get)(child, regset, addr &~ 7,
 		                                          ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#433: FILE: include/asm-powerpc/tracehook.h:279:
+		BUG_ON(ret);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: spaces preferred around that '&' (ctx:WxO)
#435: FILE: include/asm-powerpc/tracehook.h:281:
+		ret = (*regset->set)(child, regset, addr &~ 7,
 		                                         ^

ERROR:SPACING: space prohibited after that '~' (ctx:OxW)
#435: FILE: include/asm-powerpc/tracehook.h:281:
+		ret = (*regset->set)(child, regset, addr &~ 7,
 		                                          ^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#449: FILE: include/asm-powerpc/tracehook.h:295:
+
+	}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#455: FILE: include/asm-powerpc/tracehook.h:301:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#491: FILE: include/asm-x86_64/tracehook.h:71:
+		/* normal 64bit interface to access TLS data.
+		   Works just like arch_prctl, except that the arguments

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#492: FILE: include/asm-x86_64/tracehook.h:72:
+		   are reversed. */

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#496: FILE: include/asm-x86_64/tracehook.h:76:
+	return -ENOSYS;

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#519: FILE: include/asm-x86_64/tracehook.h:99:
+	return -ENOSYS;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#524: FILE: include/asm-x86_64/tracehook.h:104:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#766: FILE: kernel/ptrace.c:116:
 
+

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#772: FILE: kernel/ptrace.c:121:
+	return -ENOSYS;

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#795: FILE: kernel/ptrace.c:127:
+struct ptrace_state
+{

ERROR:OPEN_BRACE: open brace '{' following union go on the same line
#813: FILE: kernel/ptrace.c:145:
+			union
+			{

CHECK:LINE_SPACING: Please don't use multiple blank lines
#824: FILE: kernel/ptrace.c:156:
+
+

WARNING:SIZEOF_PARENTHESIS: sizeof *state should be sizeof(*state)
#845: FILE: kernel/ptrace.c:177:
+	struct ptrace_state *state = kzalloc(sizeof *state, GFP_USER);

WARNING:LINE_SPACING: Missing a blank line after declarations
#846: FILE: kernel/ptrace.c:178:
+	struct ptrace_state *state = kzalloc(sizeof *state, GFP_USER);
+	if (unlikely(state == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!state"
#846: FILE: kernel/ptrace.c:178:
+	if (unlikely(state == NULL))

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#855: FILE: kernel/ptrace.c:187:
+	BUG_ON(engine->data != 0);

CHECK:SPACING: No space is necessary after a cast
#856: FILE: kernel/ptrace.c:188:
+	rcu_assign_pointer(engine->data, (unsigned long) state);

CHECK:SPACING: No space is necessary after a cast
#883: FILE: kernel/ptrace.c:215:
+	struct ptrace_state *state = (struct ptrace_state *) engine->data;

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#940: FILE: kernel/ptrace.c:266:
+	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#940: FILE: kernel/ptrace.c:266:
+	else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#991: FILE: kernel/ptrace.c:304:
+	if (retval)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#993: FILE: kernel/ptrace.c:306:
+	else {

CHECK:SPACING: No space is necessary after a cast
#1010: FILE: kernel/ptrace.c:319:
+	struct ptrace_state *state = (struct ptrace_state *) engine->data;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1011: FILE: kernel/ptrace.c:320:
+	struct ptrace_state *state = (struct ptrace_state *) engine->data;
+	utrace_detach(task, engine);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1022: FILE: kernel/ptrace.c:326:
 
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#1032: FILE: kernel/ptrace.c:334:
+	struct ptrace_state *state, *next;
+	task_lock(tsk);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1039: FILE: kernel/ptrace.c:341:
+	BUG_ON(!list_empty(&tsk->ptracees));

CHECK:SPACING: No space is necessary after a cast
#1050: FILE: kernel/ptrace.c:349:
+	struct ptrace_state *state = (struct ptrace_state *) engine->data;

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1066: FILE: kernel/ptrace.c:364:
+	}
+	else if (!state->u.live.have_eventmsg && state->u.live.u.siginfo) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1070: FILE: kernel/ptrace.c:368:
+		/* Update the siginfo structure if the signal has
+		   changed.  If the debugger wanted something

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1072: FILE: kernel/ptrace.c:370:
+		   have updated *info via PTRACE_SETSIGINFO.  */

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1111: FILE: kernel/ptrace.c:398:
+	printk("%d ptrace_regset on %d view %p regset %p (%d/%d) +%lx\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ptrace_regset', this function's name, in a string
#1111: FILE: kernel/ptrace.c:398:
+	printk("%d ptrace_regset on %d view %p regset %p (%d/%d) +%lx\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!regset"
#1115: FILE: kernel/ptrace.c:402:
+	if (unlikely(regset == NULL))

CHECK:BRACES: braces {} should be used on all arms of this statement
#1118: FILE: kernel/ptrace.c:405:
+	if (nregs < 0) {
[...]
+	else
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1124: FILE: kernel/ptrace.c:411:
+	}
+	else

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1135: FILE: kernel/ptrace.c:422:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#1135: FILE: kernel/ptrace.c:422:
+	else {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!seg"
#1156: FILE: kernel/ptrace.c:443:
+	if (unlikely(seg == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!regset"
#1168: FILE: kernel/ptrace.c:455:
+	if (unlikely(regset == NULL))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1172: FILE: kernel/ptrace.c:459:
+	if ((addr & (regset->align - 1))
+	    || addr > (regset->n - 1) * regset->size)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1194: FILE: kernel/ptrace.c:481:
+				BUG();

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1197: FILE: kernel/ptrace.c:484:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#1197: FILE: kernel/ptrace.c:484:
+	else {

CHECK:SPACING: No space is necessary after a cast
#1198: FILE: kernel/ptrace.c:485:
+		void *datap = (void *) data;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1199: FILE: kernel/ptrace.c:486:
+		void *datap = (void *) data;
+		if (likely(access_ok(VERIFY_WRITE, datap, regset->size)))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1235: FILE: kernel/ptrace.c:517:
+	printk("ptrace pid %ld => %p\n", pid, child);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!engine"
#1254: FILE: kernel/ptrace.c:534:
+	if (IS_ERR(engine) || engine == NULL)

CHECK:SPACING: No space is necessary after a cast
#1257: FILE: kernel/ptrace.c:537:
+	state = rcu_dereference((struct ptrace_state *) engine->data);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!state"
#1258: FILE: kernel/ptrace.c:538:
+	if (state == NULL || state->u.live.parent != current) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1270: FILE: kernel/ptrace.c:550:
+		printk("%d not stopped (%lx)\n", child->pid, child->state);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1335: FILE: kernel/ptrace.c:615:
+		state->u.live.sysemu = (request == PTRACE_SYSEMU_SINGLESTEP
+					|| request == PTRACE_SYSEMU);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1339: FILE: kernel/ptrace.c:619:
+#ifdef PTRACE_SYSEMU
+		    || request == PTRACE_SYSEMU_SINGLESTEP

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1351: FILE: kernel/ptrace.c:631:
+		else if (request == PTRACE_SYSEMU
+			 || request == PTRACE_SYSEMU_SINGLESTEP)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1402: FILE: kernel/ptrace.c:682:
 
+

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1415: FILE: kernel/ptrace.c:694:
+	printk("%d sys_ptrace(%ld, %ld, %lx, %lx)\n",

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1424: FILE: kernel/ptrace.c:703:
+	regset = rw = -1;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:SPACING: No space is necessary after a cast
#1426: FILE: kernel/ptrace.c:705:
+	uaddr = (void __user *) data;

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1429: FILE: kernel/ptrace.c:708:
+	if (ret != -ENOSYS)

CHECK:SPACING: No space is necessary after a cast
#1451: FILE: kernel/ptrace.c:730:
+		ret = put_user(tmp, (unsigned long __user *) data);

CHECK:SPACING: No space is necessary after a cast
#1466: FILE: kernel/ptrace.c:745:
+			       (unsigned long __user *) data);

CHECK:SPACING: No space is necessary after a cast
#1471: FILE: kernel/ptrace.c:750:
+			ret = copy_siginfo_to_user((siginfo_t __user *) data,

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1477: FILE: kernel/ptrace.c:756:
+		if (!state->u.live.have_eventmsg && state->u.live.u.siginfo
+		    && copy_from_user(state->u.live.u.siginfo,

CHECK:SPACING: No space is necessary after a cast
#1478: FILE: kernel/ptrace.c:757:
+				      (siginfo_t __user *) data,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1488: FILE: kernel/ptrace.c:767:
+	printk("%d ptrace -> %x\n", current->pid, ret);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1493: FILE: kernel/ptrace.c:772:
+
+

CHECK:SPACING: No space is necessary after a cast
#1500: FILE: kernel/ptrace.c:779:
+	const unsigned long data = (unsigned long) (compat_ulong_t) cdata;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1510: FILE: kernel/ptrace.c:789:
+	printk("%d compat_sys_ptrace(%d, %d, %x, %x)\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'compat_sys_ptrace', this function's name, in a string
#1510: FILE: kernel/ptrace.c:789:
+	printk("%d compat_sys_ptrace(%d, %d, %x, %x)\n",

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1518: FILE: kernel/ptrace.c:797:
+	regset = rw = -1;

CHECK:SPACING: No space is necessary after a cast
#1520: FILE: kernel/ptrace.c:799:
+	uaddr = (void __user *) (unsigned long) cdata;

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1523: FILE: kernel/ptrace.c:802:
+	if (ret != -ENOSYS)

CHECK:SPACING: No space is necessary after a cast
#1545: FILE: kernel/ptrace.c:824:
+		ret = put_user(tmp, (compat_ulong_t __user *) data);

CHECK:SPACING: No space is necessary after a cast
#1560: FILE: kernel/ptrace.c:839:
+			       (compat_long_t __user *) data);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1565: FILE: kernel/ptrace.c:844:
+			ret = copy_siginfo_to_user32(

CHECK:SPACING: No space is necessary after a cast
#1566: FILE: kernel/ptrace.c:845:
+				(struct compat_siginfo __user *) data,

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1572: FILE: kernel/ptrace.c:851:
+		if (!state->u.live.have_eventmsg && state->u.live.u.siginfo
+		    && copy_siginfo_from_user32(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1572: FILE: kernel/ptrace.c:851:
+		    && copy_siginfo_from_user32(

CHECK:SPACING: No space is necessary after a cast
#1574: FILE: kernel/ptrace.c:853:
+			    (struct compat_siginfo __user *) data))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1583: FILE: kernel/ptrace.c:862:
+	printk("%d ptrace -> %x\n", current->pid, ret);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1589: FILE: kernel/ptrace.c:868:
+
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'p->exit_signal != SIGCHLD'
#1614: FILE: kernel/ptrace.c:893:
+		if (((p->exit_signal != SIGCHLD) ^ ((options & __WCLONE) != 0))
+		    && !(options & __WALL))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1615: FILE: kernel/ptrace.c:894:
+		if (((p->exit_signal != SIGCHLD) ^ ((options & __WCLONE) != 0))
+		    && !(options & __WALL))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1627: FILE: kernel/ptrace.c:906:
+		if ((p->state & (TASK_TRACED | TASK_STOPPED))
+		    && (p->signal->flags & SIGNAL_STOP_STOPPED))

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1650: FILE: kernel/ptrace.c:929:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#1650: FILE: kernel/ptrace.c:929:
+	else {

ERROR:CODE_INDENT: code indent should use tabs where possible
#1706: FILE: kernel/ptrace.c:985:
+ ^Iinfo.si_code = CLD_TRAPPED;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1706: FILE: kernel/ptrace.c:985:
+ ^Iinfo.si_code = CLD_TRAPPED;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1706: FILE: kernel/ptrace.c:985:
+ ^Iinfo.si_code = CLD_TRAPPED;$

CHECK:BRACES: braces {} should be used on all arms of this statement
#1709: FILE: kernel/ptrace.c:988:
+		if (tsk->exit_code & 0x80)
[...]
+		else if (tsk->exit_code & 0x7f)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1713: FILE: kernel/ptrace.c:992:
+		else {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1721: FILE: kernel/ptrace.c:1000:
+	if (sighand->action[SIGCHLD-1].sa.sa_handler != SIG_IGN &&
 	                           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1722: FILE: kernel/ptrace.c:1001:
+	    !(sighand->action[SIGCHLD-1].sa.sa_flags & SA_NOCLDSTOP))
 	                             ^

CHECK:SPACING: No space is necessary after a cast
#1735: FILE: kernel/ptrace.c:1014:
+	struct ptrace_state *state = (struct ptrace_state *) engine->data;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1738: FILE: kernel/ptrace.c:1017:
+	printk("%d ptrace_report %d engine %p state %p code %x parent %d (%p)\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ptrace_report', this function's name, in a string
#1738: FILE: kernel/ptrace.c:1017:
+	printk("%d ptrace_report %d engine %p state %p code %x parent %d (%p)\n",

WARNING:LINE_SPACING: Missing a blank line after declarations
#1743: FILE: kernel/ptrace.c:1022:
+		const siginfo_t *si = state->u.live.u.siginfo;
+		printk("  si %d code %x errno %d addr %p\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1743: FILE: kernel/ptrace.c:1022:
+		printk("  si %d code %x errno %d addr %p\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1755: FILE: kernel/ptrace.c:1034:
+	printk("%d ptrace_report quiescing exit_code %x\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ptrace_report', this function's name, in a string
#1755: FILE: kernel/ptrace.c:1034:
+	printk("%d ptrace_report quiescing exit_code %x\n",

CHECK:SPACING: No space is necessary after a cast
#1767: FILE: kernel/ptrace.c:1046:
+	struct ptrace_state *state = (struct ptrace_state *) engine->data;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1768: FILE: kernel/ptrace.c:1047:
+	struct ptrace_state *state = (struct ptrace_state *) engine->data;
+	state->u.live.syscall = 0;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1772: FILE: kernel/ptrace.c:1051:
+
+

CHECK:SPACING: No space is necessary after a cast
#1777: FILE: kernel/ptrace.c:1056:
+	struct ptrace_state *state = (struct ptrace_state *) engine->data;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1790: FILE: kernel/ptrace.c:1069:
+
+

CHECK:SPACING: No space is necessary after a cast
#1796: FILE: kernel/ptrace.c:1075:
+	struct ptrace_state *state = (struct ptrace_state *) engine->data;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1802: FILE: kernel/ptrace.c:1081:
+	printk("%d (%p) engine %p ptrace_report_clone child %d (%p) fl %lx\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ptrace_report_clone', this function's name, in a string
#1802: FILE: kernel/ptrace.c:1081:
+	printk("%d (%p) engine %p ptrace_report_clone child %d (%p) fl %lx\n",

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1813: FILE: kernel/ptrace.c:1092:
+	}
+	else if ((clone_flags & CSIGNAL) != SIGCHLD) {

WARNING:LIKELY_MISUSE: nested (un)?likely() calls, IS_ERR already uses unlikely() internally
#1825: FILE: kernel/ptrace.c:1104:
+	if (unlikely(IS_ERR(child_engine))) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1826: FILE: kernel/ptrace.c:1105:
+		printk("XXX ptrace lost child %d (attach): %ld\n",

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1829: FILE: kernel/ptrace.c:1108:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#1829: FILE: kernel/ptrace.c:1108:
+	else {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1834: FILE: kernel/ptrace.c:1113:
+			printk("XXX ptrace lost child %d (setup): %d\n",

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#1838: FILE: kernel/ptrace.c:1117:
+		}
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#1838: FILE: kernel/ptrace.c:1117:
+		else {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1855: FILE: kernel/ptrace.c:1134:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1863: FILE: kernel/ptrace.c:1142:
+
+

CHECK:SPACING: No space is necessary after a cast
#1871: FILE: kernel/ptrace.c:1150:
+	struct ptrace_state *state = (struct ptrace_state *) engine->data;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!info"
#1872: FILE: kernel/ptrace.c:1151:
+	int signo = info == NULL ? SIGTRAP : info->si_signo;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1873: FILE: kernel/ptrace.c:1152:
+	int signo = info == NULL ? SIGTRAP : info->si_signo;
+	state->u.live.syscall = 0;

CHECK:SPACING: No space is necessary after a cast
#1892: FILE: kernel/ptrace.c:1171:
+	struct ptrace_state *state = (struct ptrace_state *) engine->data;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1893: FILE: kernel/ptrace.c:1172:
+	struct ptrace_state *state = (struct ptrace_state *) engine->data;
+	if (state->u.live.options & PTRACE_O_TRACEEXEC)

CHECK:SPACING: No space is necessary after a cast
#1903: FILE: kernel/ptrace.c:1182:
+	struct ptrace_state *state = (struct ptrace_state *) engine->data;

CHECK:SPACING: No space is necessary after a cast
#1918: FILE: kernel/ptrace.c:1197:
+	struct ptrace_state *state = (struct ptrace_state *) engine->data;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1919: FILE: kernel/ptrace.c:1198:
+	struct ptrace_state *state = (struct ptrace_state *) engine->data;
+	state->u.live.have_eventmsg = 1;

CHECK:SPACING: No space is necessary after a cast
#1928: FILE: kernel/ptrace.c:1207:
+	struct ptrace_state *state = (struct ptrace_state *) engine->data;

CHECK:SPACING: No space is necessary after a cast
#1938: FILE: kernel/ptrace.c:1217:
+	struct ptrace_state *state = (struct ptrace_state *) engine->data;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1941: FILE: kernel/ptrace.c:1220:
+	return (((engine->flags & UTRACE_ACTION_QUIESCE)
+		 || (target->state == TASK_STOPPED))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1942: FILE: kernel/ptrace.c:1221:
+		 || (target->state == TASK_STOPPED))
+		&& state->u.live.parent == caller

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1943: FILE: kernel/ptrace.c:1222:
+		&& state->u.live.parent == caller
+		&& security_ptrace(caller, target) == 0);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1946: FILE: kernel/ptrace.c:1225:
+
+

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1948: FILE: kernel/ptrace.c:1227:
+static const struct utrace_engine_ops ptrace_utrace_ops =
+{

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.69253.commit.a5d3174fa48bc1eaccb9ab5dd2a7f79b9684d257 total: 20 errors, 52 warnings, 95 checks, 1838 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.69253.commit.a5d3174fa48bc1eaccb9ab5dd2a7f79b9684d257 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
