CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#70: FILE: include/linux/srcu.h:45:
+extern void init_srcu_struct(struct srcu_struct *sp);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#71: FILE: include/linux/srcu.h:46:
+extern void cleanup_srcu_struct(struct srcu_struct *sp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#72: FILE: include/linux/srcu.h:47:
+extern int srcu_read_lock(struct srcu_struct *sp) __acquires(sp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#73: FILE: include/linux/srcu.h:48:
+extern void srcu_read_unlock(struct srcu_struct *sp, int idx) __releases(sp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#74: FILE: include/linux/srcu.h:49:
+extern void synchronize_srcu(struct srcu_struct *sp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#75: FILE: include/linux/srcu.h:50:
+extern long srcu_batches_completed(struct srcu_struct *sp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#76: FILE: include/linux/srcu.h:51:
+extern int srcu_readers_active(struct srcu_struct *sp);

WARNING:MEMORY_BARRIER: memory barrier without comment
#95: FILE: kernel/srcu.c:45:
+	smp_wmb();

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sap"
#131: FILE: kernel/srcu.c:79:
+	if (likely(sap != NULL))

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sp->per_cpu_ref"
#142: FILE: kernel/srcu.c:113:
+	if (sp->per_cpu_ref != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sp->per_cpu_ref"
#165: FILE: kernel/srcu.c:134:
+	if (unlikely(sp->per_cpu_ref == NULL &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#166: FILE: kernel/srcu.c:135:
+	if (unlikely(sp->per_cpu_ref == NULL &&
+			mutex_trylock(&sp->mutex))) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sp->per_cpu_ref"
#167: FILE: kernel/srcu.c:136:
+		if (sp->per_cpu_ref == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sap"
#178: FILE: kernel/srcu.c:145:
+	if (likely(sap != NULL)) {

WARNING:MEMORY_BARRIER: memory barrier without comment
#180: FILE: kernel/srcu.c:147:
+		smp_mb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#198: FILE: kernel/srcu.c:170:
+		smp_mb();

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sp->per_cpu_ref"
#216: FILE: kernel/srcu.c:204:
+	if (sp->per_cpu_ref == NULL)

WARNING:DEPRECATED_API: Deprecated use of 'synchronize_sched', prefer 'synchronize_rcu' instead
#257: FILE: kernel/srcu.c:229:
+	synchronize_sched();

Usage of a deprecated RCU API is detected.  It is recommended to replace
old flavourful RCU APIs by their new vanilla-RCU counterparts.

The full list of available RCU APIs can be viewed from the kernel docs.

See: https://www.kernel.org/doc/html/latest/RCU/whatisRCU.html#full-list-of-rcu-apis

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.16651.commit.2c344f291edf64c7e21e3c4171645680b3c83a38 total: 0 errors, 4 warnings, 14 checks, 246 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.16651.commit.2c344f291edf64c7e21e3c4171645680b3c83a38 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
