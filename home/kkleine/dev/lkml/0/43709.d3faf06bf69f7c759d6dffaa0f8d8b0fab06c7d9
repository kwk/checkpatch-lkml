WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#30: 
One particular design issue with the current slab is that it is build on the

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#149: FILE: mm/slabifier.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#164: FILE: mm/slabifier.c:16:
+#define	DBUG_ON(_x) BUG_ON(_x)

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#193: FILE: mm/slabifier.c:45:
+ * ^Ilru^I -> used to a slab on the lists$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#230: FILE: mm/slabifier.c:82:
+static __always_inline void set_object_pointer(struct page *page,
+						void *object)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#261: FILE: mm/slabifier.c:113:
+static __always_inline void set_object_counter(struct page *page,
+							int counter)

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#263: FILE: mm/slabifier.c:115:
+	(*object_counter(page))= counter;
 	                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#268: FILE: mm/slabifier.c:120:
+	return (*object_counter(page));

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#287: FILE: mm/slabifier.c:139:
+static void __always_inline add_partial(struct slab *s, struct page *page)

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#295: FILE: mm/slabifier.c:147:
+static void __always_inline remove_partial(struct slab *s,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#296: FILE: mm/slabifier.c:148:
+static void __always_inline remove_partial(struct slab *s,
+						struct page *page)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#309: FILE: mm/slabifier.c:161:
+static __always_inline int lock_and_del_slab(struct slab *s,
+						struct page *page)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#335: FILE: mm/slabifier.c:187:
+		if (likely(page_to_nid(page) == node) &&
[...]
+				return page;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#336: FILE: mm/slabifier.c:188:
+		if (likely(page_to_nid(page) == node) &&
+			lock_and_del_slab(s, page))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#381: FILE: mm/slabifier.c:233:
+		printk(KERN_CRIT "Not a valid slab page @%p flags=%lx"

WARNING:SPLIT_STRING: quoted string split across lines
#382: FILE: mm/slabifier.c:234:
+		printk(KERN_CRIT "Not a valid slab page @%p flags=%lx"
+			" mapping=%p count=%d \n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#382: FILE: mm/slabifier.c:234:
+			" mapping=%p count=%d \n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#384: FILE: mm/slabifier.c:236:
+		BUG();

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#393: FILE: mm/slabifier.c:245:
+		printk(KERN_CRIT "Not an active slab page @%p flags=%lx"

WARNING:SPLIT_STRING: quoted string split across lines
#394: FILE: mm/slabifier.c:246:
+		printk(KERN_CRIT "Not an active slab page @%p flags=%lx"
+			" mapping=%p count=%d \n",

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#394: FILE: mm/slabifier.c:246:
+			" mapping=%p count=%d \n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#396: FILE: mm/slabifier.c:248:
+		BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#402: FILE: mm/slabifier.c:254:
+static int check_valid_pointer(struct slab *s, struct page *page,
+					 void *object, void *origin)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#408: FILE: mm/slabifier.c:260:
+		printk(KERN_CRIT "slab %s size %d: pointer %p->%p\nnot in"

WARNING:SPLIT_STRING: quoted string split across lines
#409: FILE: mm/slabifier.c:261:
+		printk(KERN_CRIT "slab %s size %d: pointer %p->%p\nnot in"
+			" range (%p-%p) in page %p\n", s->sc.name, s->size,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#416: FILE: mm/slabifier.c:268:
+		printk(KERN_CRIT "slab %s size %d: pointer %p->%p\n"

WARNING:SPLIT_STRING: quoted string split across lines
#418: FILE: mm/slabifier.c:270:
+			"does not properly point"
+			"to an object in page %p\n",

WARNING:MISSING_SPACE: break quoted strings at a space character
#418: FILE: mm/slabifier.c:270:
+			"does not properly point"
+			"to an object in page %p\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#453: FILE: mm/slabifier.c:305:
+		printk(KERN_CRIT "slab %s: page %p wrong object count."

WARNING:SPLIT_STRING: quoted string split across lines
#454: FILE: mm/slabifier.c:306:
+		printk(KERN_CRIT "slab %s: page %p wrong object count."
+			" counter is %d but counted were %d\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#458: FILE: mm/slabifier.c:310:
+		printk(KERN_CRIT "****** Trying to continue by marking "

WARNING:SPLIT_STRING: quoted string split across lines
#459: FILE: mm/slabifier.c:311:
+		printk(KERN_CRIT "****** Trying to continue by marking "
+			"all objects used (memory leak!)\n");

CHECK:CAMELCASE: Avoid CamelCase: <__ClearPageSlab>
#485: FILE: mm/slabifier.c:337:
+	__ClearPageSlab(page);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <__SetPageSlab>
#504: FILE: mm/slabifier.c:356:
+	__SetPageSlab(page);

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#515: FILE: mm/slabifier.c:367:
+static void __always_inline putback_slab(struct slab *s, struct page *page)

WARNING:MEMORY_BARRIER: memory barrier without comment
#534: FILE: mm/slabifier.c:386:
+	smp_wmb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#546: FILE: mm/slabifier.c:398:
+static __always_inline struct page *get_and_lock_active(struct slab *s,
+							 int cpu)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#591: FILE: mm/slabifier.c:443:
+	for_each_online_cpu(cpu) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#596: FILE: mm/slabifier.c:448:
+		if (PageReferenced(page)) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#599: FILE: mm/slabifier.c:451:
+		} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#647: FILE: mm/slabifier.c:499:
+static struct slab_cache *slab_create(struct slab_control *x,
+	const struct slab_cache *sc)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#653: FILE: mm/slabifier.c:505:
+	BUG_ON(sizeof(struct slab_control) < sizeof(struct slab));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#660: FILE: mm/slabifier.c:512:
+	if (sc->offset > s->size - sizeof(void *) ||
+			(sc->offset % sizeof(void*)))

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#660: FILE: mm/slabifier.c:512:
+			(sc->offset % sizeof(void*)))

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#693: FILE: mm/slabifier.c:545:
+static struct page *reload(struct slab *s, unsigned long cpu, gfp_t flags,
+							int node)

CHECK:BRACES: braces {} should be used on all arms of this statement
#710: FILE: mm/slabifier.c:562:
+	if ((flags & __GFP_WAIT)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#714: FILE: mm/slabifier.c:566:
+	} else

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cmpxchg"
#741: FILE: mm/slabifier.c:593:
+	if (cmpxchg(&s->active[cpu], NULL, page) != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#742: FILE: mm/slabifier.c:594:
+	if (cmpxchg(&s->active[cpu], NULL, page) != NULL) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#766: FILE: mm/slabifier.c:618:
+static __always_inline void *__slab_alloc(struct slab_cache *sc,
+					gfp_t gfpflags, int node)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#791: FILE: mm/slabifier.c:643:
+	while (unlikely(!get_object_pointer(page) ||
+		(node > 0 && page_to_nid(page) != node))) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#792: FILE: mm/slabifier.c:644:
+		(node > 0 && page_to_nid(page) != node))) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#819: FILE: mm/slabifier.c:671:
+static void *slab_alloc_node(struct slab_cache *sc, gfp_t gfpflags,
+							int node)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#827: FILE: mm/slabifier.c:679:
+	struct page * page = virt_to_page(x);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#841: FILE: mm/slabifier.c:693:
+	struct page * page;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#851: FILE: mm/slabifier.c:703:
+		printk(KERN_CRIT "slab_free %s size %d: attempt to free object"

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'slab_free', this function's name, in a string
#851: FILE: mm/slabifier.c:703:
+		printk(KERN_CRIT "slab_free %s size %d: attempt to free object"

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#852: FILE: mm/slabifier.c:704:
+		printk(KERN_CRIT "slab_free %s size %d: attempt to free object"
+			"(%p) outside of slab.\n", s->sc.name, s->size, object);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#860: FILE: mm/slabifier.c:712:
+			printk(KERN_CRIT

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'slab_free', this function's name, in a string
#861: FILE: mm/slabifier.c:713:
+				"slab_free : no slab(NULL) for object %p.\n",

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#865: FILE: mm/slabifier.c:717:
+	} else
+	if (unlikely(s != get_slab(page))) {

CHECK:BRACES: Unbalanced braces around else statement
#865: FILE: mm/slabifier.c:717:
+	} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#867: FILE: mm/slabifier.c:719:
+		printk(KERN_CRIT "slab_free %s: object at %p"

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'slab_free', this function's name, in a string
#867: FILE: mm/slabifier.c:719:
+		printk(KERN_CRIT "slab_free %s: object at %p"

WARNING:SPLIT_STRING: quoted string split across lines
#868: FILE: mm/slabifier.c:720:
+		printk(KERN_CRIT "slab_free %s: object at %p"
+				" belongs to slab %p\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#877: FILE: mm/slabifier.c:729:
+		printk(KERN_CRIT "***** Trying to continue by not"

WARNING:SPLIT_STRING: quoted string split across lines
#878: FILE: mm/slabifier.c:730:
+		printk(KERN_CRIT "***** Trying to continue by not"
+				"freeing object.\n");

WARNING:MISSING_SPACE: break quoted strings at a space character
#878: FILE: mm/slabifier.c:730:
+		printk(KERN_CRIT "***** Trying to continue by not"
+				"freeing object.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#892: FILE: mm/slabifier.c:744:
+		printk(KERN_CRIT "slab_free %s: object %p already free.\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'slab_free', this function's name, in a string
#892: FILE: mm/slabifier.c:744:
+		printk(KERN_CRIT "slab_free %s: object %p already free.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#893: FILE: mm/slabifier.c:745:
+		printk(KERN_CRIT "slab_free %s: object %p already free.\n",
+						s->sc.name, object);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#936: FILE: mm/slabifier.c:788:
+	struct page * page;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#958: FILE: mm/slabifier.c:810:
+static unsigned long slab_object_size(struct slab_cache *sc,
+						const void *object)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#966: FILE: mm/slabifier.c:818:
+		BUG_ON(sc && s != (void *)sc);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#970: FILE: mm/slabifier.c:822:
+	BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#981: FILE: mm/slabifier.c:833:
+static int move_slab_objects(struct slab *s, struct page *page,
+			 int (*move_objects)(struct slab_cache *, void *))

ERROR:SPACING: spaces required around that '+=' (ctx:VxW)
#989: FILE: mm/slabifier.c:841:
+		for (p = addr; p < addr + s->objects; p+= s->size) {
 		                                       ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1027: FILE: mm/slabifier.c:879:
+static int slab_shrink(struct slab_cache *sc,
+			int (*move_object)(struct slab_cache *, void *))

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1037: FILE: mm/slabifier.c:889:
+	for(i = 0; s->nr_partial > 1 && i < s->nr_partial - 1; i++ ) {

ERROR:SPACING: space required before the open parenthesis '('
#1037: FILE: mm/slabifier.c:889:
+	for(i = 0; s->nr_partial > 1 && i < s->nr_partial - 1; i++ ) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1038: FILE: mm/slabifier.c:890:
+		struct page * page;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1052: FILE: mm/slabifier.c:904:
+			if (move_slab_objects(s,
+					page, move_object) == 0)

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1065: FILE: mm/slabifier.c:917:
+
+}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1088: FILE: mm/slabifier.c:940:
+	struct slab * s = (void *)sc;

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1103: FILE: mm/slabifier.c:955:
+
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1122: FILE: mm/slabifier.c:974:
+static unsigned long slab_objects(struct slab_cache *sc,
+	unsigned long *p_total, unsigned long *p_active,

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.43709.commit.d3faf06bf69f7c759d6dffaa0f8d8b0fab06c7d9 total: 14 errors, 40 warnings, 32 checks, 1027 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.43709.commit.d3faf06bf69f7c759d6dffaa0f8d8b0fab06c7d9 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
