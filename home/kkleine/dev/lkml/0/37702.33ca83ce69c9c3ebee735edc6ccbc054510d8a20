WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#44: 
OpenPGP public key:              http://krystal.dyndns.org:8080/key/compudj.gpg

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#55: FILE: ltt/ltt-relay.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#102: FILE: ltt/ltt-relay.c:48:
+#include <asm/atomic.h>

WARNING:CONST_STRUCT: struct file_operations should normally be const
#105: FILE: ltt/ltt-relay.c:51:
+static struct file_operations ltt_file_operations;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#114: FILE: ltt/ltt-relay.c:60:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#118: FILE: ltt/ltt-relay.c:64:
+static void ltt_buffer_begin_callback(struct rchan_buf *buf,
+		      u64 tsc, unsigned int subbuf_idx)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#121: FILE: ltt/ltt-relay.c:67:
+		(struct ltt_channel_struct*)buf->chan->private_data;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#123: FILE: ltt/ltt-relay.c:69:
+		(struct ltt_block_start_header*)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#124: FILE: ltt/ltt-relay.c:70:
+			(buf->start + (subbuf_idx*buf->chan->subbuf_size));
 			                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#134: FILE: ltt/ltt-relay.c:80:
+static void ltt_buffer_end_callback(struct rchan_buf *buf,
+		      u64 tsc, unsigned int offset, unsigned int subbuf_idx)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#137: FILE: ltt/ltt-relay.c:83:
+		(struct ltt_block_start_header*)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#138: FILE: ltt/ltt-relay.c:84:
+			(buf->start + (subbuf_idx*buf->chan->subbuf_size));
 			                         ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#142: FILE: ltt/ltt-relay.c:88:
+	 * The lost size is between 0 and subbuf_size-1 */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#144: FILE: ltt/ltt-relay.c:90:
+	header->lost_size = SUBBUF_OFFSET((buf->chan->subbuf_size - offset),
+				buf->chan);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#150: FILE: ltt/ltt-relay.c:96:
+static int ltt_subbuf_start_callback(struct rchan_buf *buf,
+			     void *subbuf,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#157: FILE: ltt/ltt-relay.c:103:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#160: FILE: ltt/ltt-relay.c:106:
+static void ltt_deliver(struct rchan_buf *buf,
+		unsigned subbuf_idx,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#160: FILE: ltt/ltt-relay.c:106:
+		unsigned subbuf_idx,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#164: FILE: ltt/ltt-relay.c:110:
+		(struct ltt_channel_struct*)buf->chan->private_data;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#171: FILE: ltt/ltt-relay.c:117:
+		struct file *filp)
 		             ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#171: FILE: ltt/ltt-relay.c:117:
+static void ltt_buf_mapped_callback(struct rchan_buf *buf,
+		struct file *filp)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#176: FILE: ltt/ltt-relay.c:122:
+		struct file *filp)
 		             ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#176: FILE: ltt/ltt-relay.c:122:
+static void ltt_buf_unmapped_callback(struct rchan_buf *buf,
+		struct file *filp)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#181: FILE: ltt/ltt-relay.c:127:
+static struct dentry *ltt_create_buf_file_callback(const char *filename,
+				  struct dentry *parent,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#214: FILE: ltt/ltt-relay.c:160:
+static void ltt_buf_unfull(struct rchan_buf *buf,
+		unsigned subbuf_idx,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#214: FILE: ltt/ltt-relay.c:160:
+		unsigned subbuf_idx,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#218: FILE: ltt/ltt-relay.c:164:
+		(struct ltt_channel_struct*)buf->chan->private_data;

WARNING:LINE_SPACING: Missing a blank line after declarations
#220: FILE: ltt/ltt-relay.c:166:
+	struct ltt_channel_buf_struct *ltt_buf = &ltt_channel->buf[buf->cpu];
+	if (waitqueue_active(&ltt_buf->write_wait))

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#220: FILE: ltt/ltt-relay.c:166:
+	if (waitqueue_active(&ltt_buf->write_wait))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#224: FILE: ltt/ltt-relay.c:170:
+
+

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#227: FILE: ltt/ltt-relay.c:173:
+ *	@filp: the file
   	 ^^^^

WARNING:TYPO_SPELLING: 'implemention' may be misspelled - perhaps 'implementation'?
#230: FILE: ltt/ltt-relay.c:176:
+ *	Poll implemention.
   	     ^^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#232: FILE: ltt/ltt-relay.c:178:
+static unsigned int ltt_poll(struct file *filp, poll_table *wait)
                                           ^^^^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#238: FILE: ltt/ltt-relay.c:184:
+		(struct ltt_channel_struct*)buf->chan->private_data;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#241: FILE: ltt/ltt-relay.c:187:
+	//printk(KERN_DEBUG "DEBUG : in LTT poll %p\n", filp);
 	                                                ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#243: FILE: ltt/ltt-relay.c:189:
+		poll_wait(filp, &buf->read_wait, wait);
 		          ^^^^

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#247: FILE: ltt/ltt-relay.c:193:
+			return 0;
+		} else {

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#248: FILE: ltt/ltt-relay.c:194:
+			if (SUBBUF_TRUNC(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#250: FILE: ltt/ltt-relay.c:196:
+			- SUBBUF_TRUNC(

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#253: FILE: ltt/ltt-relay.c:199:
+				if (buf->finalized) return POLLHUP;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#254: FILE: ltt/ltt-relay.c:200:
+				else return 0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#257: FILE: ltt/ltt-relay.c:203:
+				struct rchan *rchan = ltt_channel->trans_channel_data;
+				if (SUBBUF_TRUNC(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#257: FILE: ltt/ltt-relay.c:203:
+				if (SUBBUF_TRUNC(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#259: FILE: ltt/ltt-relay.c:205:
+				- SUBBUF_TRUNC(

CHECK:LINE_SPACING: Please don't use multiple blank lines
#272: FILE: ltt/ltt-relay.c:218:
+
+

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#277: FILE: ltt/ltt-relay.c:223:
+ *	@filp: the file
   	 ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#294: FILE: ltt/ltt-relay.c:240:
+static int ltt_ioctl(struct inode *inode, struct file *filp,
                                                        ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#295: FILE: ltt/ltt-relay.c:241:
+static int ltt_ioctl(struct inode *inode, struct file *filp,
+		unsigned int cmd, unsigned long arg)

ERROR:CODE_INDENT: code indent should use tabs where possible
#299: FILE: ltt/ltt-relay.c:245:
+            (struct ltt_channel_struct*)buf->chan->private_data;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#299: FILE: ltt/ltt-relay.c:245:
+            (struct ltt_channel_struct*)buf->chan->private_data;$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#299: FILE: ltt/ltt-relay.c:245:
+            (struct ltt_channel_struct*)buf->chan->private_data;

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#303: FILE: ltt/ltt-relay.c:249:
+	switch(cmd) {
+		case RELAY_GET_SUBBUF:
[...]
+		case RELAY_PUT_SUBBUF:
[...]
+		case RELAY_GET_N_SUBBUFS:
[...]
+		case RELAY_GET_SUBBUF_SIZE:
[...]
+		default:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: space required before the open parenthesis '('
#303: FILE: ltt/ltt-relay.c:249:
+	switch(cmd) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#307: FILE: ltt/ltt-relay.c:253:
+			unsigned int consumed_old, consumed_idx;
+			atomic_inc(&ltt_buf->active_readers);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#315: FILE: ltt/ltt-relay.c:261:
+			if ((SUBBUF_TRUNC(

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#325: FILE: ltt/ltt-relay.c:271:
+			return put_user((u32)consumed_old, argp);
+			break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#334: FILE: ltt/ltt-relay.c:280:
+			if (ret) return ret; /* will return -EFAULT */

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#340: FILE: ltt/ltt-relay.c:286:
+			if (atomic_cmpxchg(

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#345: FILE: ltt/ltt-relay.c:291:
+				 * happen if this is a buffer we never got. */

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#349: FILE: ltt/ltt-relay.c:295:
+				return -EIO;
+			} else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#353: FILE: ltt/ltt-relay.c:299:
+				void *data;
+				index = SUBBUF_INDEX(consumed_old, buf->chan);

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#365: FILE: ltt/ltt-relay.c:311:
+			return put_user((u32)buf->chan->n_subbufs, argp);
+			break;

WARNING:UNNECESSARY_BREAK: break is not useful after a return
#369: FILE: ltt/ltt-relay.c:315:
+			return put_user((u32)buf->chan->subbuf_size, argp);
+			break;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#378: FILE: ltt/ltt-relay.c:324:
+static long ltt_compat_ioctl(struct file *file, unsigned cmd, unsigned long arg)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#394: FILE: ltt/ltt-relay.c:340:
+static int ltt_relay_create_channel(char *trace_name,
+		struct ltt_trace_struct *trace,

WARNING:USE_NEGATIVE_ERRNO: return of an errno should typically be negative (ie: return -EPERM)
#407: FILE: ltt/ltt-relay.c:353:
+	if(!tmpname) return EPERM;

ERROR:SPACING: space required before the open parenthesis '('
#407: FILE: ltt/ltt-relay.c:353:
+	if(!tmpname) return EPERM;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#407: FILE: ltt/ltt-relay.c:353:
+	if(!tmpname) return EPERM;

ERROR:SPACING: space required before the open parenthesis '('
#408: FILE: ltt/ltt-relay.c:354:
+	if(overwrite) {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#409: FILE: ltt/ltt-relay.c:355:
+		strncpy(tmpname, LTT_FLIGHT_PREFIX, PATH_MAX-1);
 		                                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#410: FILE: ltt/ltt-relay.c:356:
+		strncat(tmpname, channel_name, PATH_MAX-1-sizeof(LTT_FLIGHT_PREFIX));
 		                                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#410: FILE: ltt/ltt-relay.c:356:
+		strncat(tmpname, channel_name, PATH_MAX-1-sizeof(LTT_FLIGHT_PREFIX));
 		                                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#412: FILE: ltt/ltt-relay.c:358:
+		strncpy(tmpname, channel_name, PATH_MAX-1);
 		                                       ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*ltt_chan)...) over kzalloc(sizeof(struct ltt_channel_struct)...)
#415: FILE: ltt/ltt-relay.c:361:
+	*ltt_chan = kzalloc(sizeof(struct ltt_channel_struct), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:SPACING: space required before the open parenthesis '('
#416: FILE: ltt/ltt-relay.c:362:
+	if(!(*ltt_chan)) goto ltt_chan_alloc_error;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#416: FILE: ltt/ltt-relay.c:362:
+	if(!(*ltt_chan)) goto ltt_chan_alloc_error;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#425: FILE: ltt/ltt-relay.c:371:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!trans_channel_data"
#426: FILE: ltt/ltt-relay.c:372:
+	if ((*ltt_chan)->trans_channel_data == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#427: FILE: ltt/ltt-relay.c:373:
+		printk(KERN_ERR "LTT : Can't open %s channel for trace %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#428: FILE: ltt/ltt-relay.c:374:
+		printk(KERN_ERR "LTT : Can't open %s channel for trace %s\n",
+				tmpname, trace_name);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#439: FILE: ltt/ltt-relay.c:385:
+	strncpy((*ltt_chan)->channel_name, tmpname, PATH_MAX-1);
 	                                                    ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#441: FILE: ltt/ltt-relay.c:387:
+
+

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#442: FILE: ltt/ltt-relay.c:388:
+	for(i=0;i<NR_CPUS;i++) {
 	     ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#442: FILE: ltt/ltt-relay.c:388:
+	for(i=0;i<NR_CPUS;i++) {
 	       ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#442: FILE: ltt/ltt-relay.c:388:
+	for(i=0;i<NR_CPUS;i++) {
 	         ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#442: FILE: ltt/ltt-relay.c:388:
+	for(i=0;i<NR_CPUS;i++) {
 	                 ^

ERROR:SPACING: space required before the open parenthesis '('
#442: FILE: ltt/ltt-relay.c:388:
+	for(i=0;i<NR_CPUS;i++) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#442: FILE: ltt/ltt-relay.c:388:
+	for(i=0;i<NR_CPUS;i++) {

ERROR:SPACING: space required before the open parenthesis '('
#445: FILE: ltt/ltt-relay.c:391:
+		if(!(*ltt_chan)->buf[i].reserve_count)

ERROR:SPACING: space required before the open parenthesis '('
#449: FILE: ltt/ltt-relay.c:395:
+		if(!(*ltt_chan)->buf[i].commit_count)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#453: FILE: ltt/ltt-relay.c:399:
+	for(i=0;i<NR_CPUS;i++) {
 	     ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#453: FILE: ltt/ltt-relay.c:399:
+	for(i=0;i<NR_CPUS;i++) {
 	       ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#453: FILE: ltt/ltt-relay.c:399:
+	for(i=0;i<NR_CPUS;i++) {
 	         ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#453: FILE: ltt/ltt-relay.c:399:
+	for(i=0;i<NR_CPUS;i++) {
 	                 ^

ERROR:SPACING: space required before the open parenthesis '('
#453: FILE: ltt/ltt-relay.c:399:
+	for(i=0;i<NR_CPUS;i++) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#453: FILE: ltt/ltt-relay.c:399:
+	for(i=0;i<NR_CPUS;i++) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#458: FILE: ltt/ltt-relay.c:404:
+		atomic_set(&(*ltt_chan)->buf[i].offset,
+			ltt_subbuf_header_len());

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#461: FILE: ltt/ltt-relay.c:407:
+		for(j=0; j<n_subbufs; j++)
 		     ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#461: FILE: ltt/ltt-relay.c:407:
+		for(j=0; j<n_subbufs; j++)
 		          ^

ERROR:SPACING: space required before the open parenthesis '('
#461: FILE: ltt/ltt-relay.c:407:
+		for(j=0; j<n_subbufs; j++)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#463: FILE: ltt/ltt-relay.c:409:
+		for(j=0; j<n_subbufs; j++)
 		     ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#463: FILE: ltt/ltt-relay.c:409:
+		for(j=0; j<n_subbufs; j++)
 		          ^

ERROR:SPACING: space required before the open parenthesis '('
#463: FILE: ltt/ltt-relay.c:409:
+		for(j=0; j<n_subbufs; j++)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#468: FILE: ltt/ltt-relay.c:414:
+		INIT_WORK(&(*ltt_chan)->buf[i].wake_writers,
+				ltt_wakeup_writers, &(*ltt_chan)->buf[i]);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#471: FILE: ltt/ltt-relay.c:417:
+		 * we don't deal with concurrency (no delivery) */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#477: FILE: ltt/ltt-relay.c:423:
+		atomic_add(ltt_subbuf_header_len(),
+			&(*ltt_chan)->buf[i].commit_count[0]);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#483: FILE: ltt/ltt-relay.c:429:
+	for(i=0;i<NR_CPUS;i++) {
 	     ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#483: FILE: ltt/ltt-relay.c:429:
+	for(i=0;i<NR_CPUS;i++) {
 	       ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#483: FILE: ltt/ltt-relay.c:429:
+	for(i=0;i<NR_CPUS;i++) {
 	         ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#483: FILE: ltt/ltt-relay.c:429:
+	for(i=0;i<NR_CPUS;i++) {
 	                 ^

ERROR:SPACING: space required before the open parenthesis '('
#483: FILE: ltt/ltt-relay.c:429:
+	for(i=0;i<NR_CPUS;i++) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#483: FILE: ltt/ltt-relay.c:429:
+	for(i=0;i<NR_CPUS;i++) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#499: FILE: ltt/ltt-relay.c:445:
+	new_trace->dentry.trace_root = debugfs_create_dir(new_trace->trace_name,
+			ltt_root_dentry);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_trace->dentry.trace_root"
#500: FILE: ltt/ltt-relay.c:446:
+	if (new_trace->dentry.trace_root == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#501: FILE: ltt/ltt-relay.c:447:
+		printk(KERN_ERR "LTT : Trace directory name %s already taken\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#502: FILE: ltt/ltt-relay.c:448:
+		printk(KERN_ERR "LTT : Trace directory name %s already taken\n",
+				new_trace->trace_name);

WARNING:USE_NEGATIVE_ERRNO: return of an errno should typically be negative (ie: return -EEXIST)
#503: FILE: ltt/ltt-relay.c:449:
+		return EEXIST;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#507: FILE: ltt/ltt-relay.c:453:
+	new_trace->dentry.control_root = debugfs_create_dir(LTT_CONTROL_ROOT,
+			new_trace->dentry.trace_root);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_trace->dentry.control_root"
#508: FILE: ltt/ltt-relay.c:454:
+	if (new_trace->dentry.control_root == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#509: FILE: ltt/ltt-relay.c:455:
+		printk(KERN_ERR "LTT : Trace control subdirectory name "\

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#509: FILE: ltt/ltt-relay.c:455:
+		printk(KERN_ERR "LTT : Trace control subdirectory name "\

WARNING:USE_NEGATIVE_ERRNO: return of an errno should typically be negative (ie: return -EEXIST)
#513: FILE: ltt/ltt-relay.c:459:
+		return EEXIST;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#538: FILE: ltt/ltt-relay.c:484:
+			(struct ltt_channel_struct*)buf->chan->private_data;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#565: FILE: ltt/ltt-relay.c:511:
+		reserve_commit_diff = atomic_read(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#568: FILE: ltt/ltt-relay.c:514:
+			- atomic_read(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#574: FILE: ltt/ltt-relay.c:520:
+			if (mode == FORCE_ACTIVE && !ltt_channel->overwrite &&
+				(offset_begin-atomic_read(&ltt_buf->consumed))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#574: FILE: ltt/ltt-relay.c:520:
+				(offset_begin-atomic_read(&ltt_buf->consumed))
 				             ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#576: FILE: ltt/ltt-relay.c:522:
+^I  ^I^I^I/* We do not overwrite non consumed buffers$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#576: FILE: ltt/ltt-relay.c:522:
+^I  ^I^I^I/* We do not overwrite non consumed buffers$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#578: FILE: ltt/ltt-relay.c:524:
+				 * ignore switch while tracing is active. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#583: FILE: ltt/ltt-relay.c:529:
+			 * in normal mode */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#591: FILE: ltt/ltt-relay.c:537:
+			 * write seqlock on xtime. */

ERROR:SPACING: space required before the open parenthesis '('
#594: FILE: ltt/ltt-relay.c:540:
+	} while(atomic_cmpxchg(&ltt_buf->offset, offset_old, offset_end)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#610: FILE: ltt/ltt-relay.c:556:
+			 * reader only happen if a sub-buffer is corrupted */

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#611: FILE: ltt/ltt-relay.c:557:
+			if ((SUBBUF_TRUNC(offset_end-1, buf->chan)
 			                            ^

CHECK:BRACES: Unbalanced braces around else statement
#617: FILE: ltt/ltt-relay.c:563:
+			else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open parenthesis '('
#621: FILE: ltt/ltt-relay.c:567:
+		} while(atomic_cmpxchg(&ltt_buf->consumed, consumed_old,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#636: FILE: ltt/ltt-relay.c:582:
+			 * and the commit. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#639: FILE: ltt/ltt-relay.c:585:
+				 * count : a sub-buffer is corrupted */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#641: FILE: ltt/ltt-relay.c:587:
+				atomic_add(reserve_commit_diff,
+					&ltt_buf->commit_count[SUBBUF_INDEX(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#641: FILE: ltt/ltt-relay.c:587:
+					&ltt_buf->commit_count[SUBBUF_INDEX(

WARNING:TYPO_SPELLING: 'uncommited' may be misspelled - perhaps 'uncommitted'?
#664: FILE: ltt/ltt-relay.c:610:
+		 * old (uncommited) subbuffer will be declared corrupted, and
 		        ^^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#667: FILE: ltt/ltt-relay.c:613:
+		 * Offset old should never be 0. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#671: FILE: ltt/ltt-relay.c:617:
+		 * delivered by the last committer. */

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#672: FILE: ltt/ltt-relay.c:618:
+		reserve_count = atomic_add_return((SUBBUF_OFFSET((offset_old-1),
 		                                                            ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#673: FILE: ltt/ltt-relay.c:619:
+                                                      buf->chan) + 1),$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#673: FILE: ltt/ltt-relay.c:619:
+		reserve_count = atomic_add_return((SUBBUF_OFFSET((offset_old-1),
+                                                      buf->chan) + 1),

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#673: FILE: ltt/ltt-relay.c:619:
+                                                      buf->chan) + 1),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#675: FILE: ltt/ltt-relay.c:621:
+                                                          buf->chan)]);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#675: FILE: ltt/ltt-relay.c:621:
+                                                          buf->chan)]);$

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#676: FILE: ltt/ltt-relay.c:622:
+		if (reserve_count == atomic_read(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#677: FILE: ltt/ltt-relay.c:623:
+			&ltt_buf->commit_count[SUBBUF_INDEX(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#680: FILE: ltt/ltt-relay.c:626:
+			ltt_deliver(buf,
+				SUBBUF_INDEX((offset_old), buf->chan), NULL);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#688: FILE: ltt/ltt-relay.c:634:
+		 * executed, caution. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#690: FILE: ltt/ltt-relay.c:636:
+		 * deliver of this sub-buffer */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#695: FILE: ltt/ltt-relay.c:641:
+			atomic_add_return(ltt_subbuf_header_len(),
+			 &ltt_buf->commit_count[SUBBUF_INDEX(offset_begin,

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#698: FILE: ltt/ltt-relay.c:644:
+		if (commit_count	== atomic_read(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#702: FILE: ltt/ltt-relay.c:648:
+			ltt_deliver(buf,
+				SUBBUF_INDEX(offset_begin, buf->chan), NULL);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#710: FILE: ltt/ltt-relay.c:656:
+ * accesses across CPUs. */

WARNING:LINE_SPACING: Missing a blank line after declarations
#714: FILE: ltt/ltt-relay.c:660:
+	unsigned int i;
+	for(i=0;i<NR_CPUS;i++) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#714: FILE: ltt/ltt-relay.c:660:
+	for(i=0;i<NR_CPUS;i++) {
 	     ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#714: FILE: ltt/ltt-relay.c:660:
+	for(i=0;i<NR_CPUS;i++) {
 	       ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#714: FILE: ltt/ltt-relay.c:660:
+	for(i=0;i<NR_CPUS;i++) {
 	         ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#714: FILE: ltt/ltt-relay.c:660:
+	for(i=0;i<NR_CPUS;i++) {
 	                 ^

ERROR:SPACING: space required before the open parenthesis '('
#714: FILE: ltt/ltt-relay.c:660:
+	for(i=0;i<NR_CPUS;i++) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#714: FILE: ltt/ltt-relay.c:660:
+	for(i=0;i<NR_CPUS;i++) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#715: FILE: ltt/ltt-relay.c:661:
+		if (!chan->buf[i]) continue;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#726: FILE: ltt/ltt-relay.c:672:
+	for(i=0; i<NR_CPUS; i++) {
 	     ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#726: FILE: ltt/ltt-relay.c:672:
+	for(i=0; i<NR_CPUS; i++) {
 	          ^

ERROR:SPACING: space required before the open parenthesis '('
#726: FILE: ltt/ltt-relay.c:672:
+	for(i=0; i<NR_CPUS; i++) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#726: FILE: ltt/ltt-relay.c:672:
+	for(i=0; i<NR_CPUS; i++) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#739: FILE: ltt/ltt-relay.c:685:
+ * are no stalled writers. */

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#743: FILE: ltt/ltt-relay.c:689:
+		(struct ltt_channel_struct*)chan->private_data;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#747: FILE: ltt/ltt-relay.c:693:
+	for(i=0;i<NR_CPUS;i++) {
 	     ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#747: FILE: ltt/ltt-relay.c:693:
+	for(i=0;i<NR_CPUS;i++) {
 	       ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#747: FILE: ltt/ltt-relay.c:693:
+	for(i=0;i<NR_CPUS;i++) {
 	         ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#747: FILE: ltt/ltt-relay.c:693:
+	for(i=0;i<NR_CPUS;i++) {
 	                 ^

ERROR:SPACING: space required before the open parenthesis '('
#747: FILE: ltt/ltt-relay.c:693:
+	for(i=0;i<NR_CPUS;i++) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#747: FILE: ltt/ltt-relay.c:693:
+	for(i=0;i<NR_CPUS;i++) {

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#751: FILE: ltt/ltt-relay.c:697:
+		if (waitqueue_active(&ltt_buf->write_wait))

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#759: FILE: ltt/ltt-relay.c:705:
+#if 0

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#771: FILE: ltt/ltt-relay.c:717:
+#if 0

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#792: FILE: ltt/ltt-relay.c:738:
+ * ^I^I^I^I^Ito the beginning of the reserved slot. */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#792: FILE: ltt/ltt-relay.c:738:
+ * 					to the beginning of the reserved slot. */

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#793: FILE: ltt/ltt-relay.c:739:
+static void *ltt_relay_reserve_slot(

ERROR:SPACING: space required before the open parenthesis '('
#814: FILE: ltt/ltt-relay.c:760:
+	if(ltt_nesting[smp_processor_id()] > 4) {

ERROR:SPACING: space required before the open parenthesis '('
#827: FILE: ltt/ltt-relay.c:773:
+		if(SUBBUF_OFFSET(offset_begin, buf->chan) == 0) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#831: FILE: ltt/ltt-relay.c:777:
+			size = ltt_get_header_size(trace,
+					buf->start + offset_begin,

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#834: FILE: ltt/ltt-relay.c:780:
+			if((SUBBUF_OFFSET(offset_begin, buf->chan)+size)
 			                                          ^

ERROR:SPACING: space required before the open parenthesis '('
#834: FILE: ltt/ltt-relay.c:780:
+			if((SUBBUF_OFFSET(offset_begin, buf->chan)+size)

ERROR:SPACING: space required before the open parenthesis '('
#840: FILE: ltt/ltt-relay.c:786:
+		if(begin_switch) {

ERROR:SPACING: space required before the open parenthesis '('
#841: FILE: ltt/ltt-relay.c:787:
+			if(end_switch_old) {

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#849: FILE: ltt/ltt-relay.c:795:
+				atomic_read(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#850: FILE: ltt/ltt-relay.c:796:
+					&ltt_buf->reserve_count[SUBBUF_INDEX(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#853: FILE: ltt/ltt-relay.c:799:
+				- atomic_read(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#854: FILE: ltt/ltt-relay.c:800:
+					&ltt_buf->commit_count[SUBBUF_INDEX(

ERROR:SPACING: space required before the open parenthesis '('
#857: FILE: ltt/ltt-relay.c:803:
+			if(reserve_commit_diff == 0) {

ERROR:SPACING: space required before the open parenthesis '('
#859: FILE: ltt/ltt-relay.c:805:
+				if(!ltt_channel->overwrite &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#860: FILE: ltt/ltt-relay.c:806:
+				if(!ltt_channel->overwrite &&
+					(SUBBUF_TRUNC(offset_begin, buf->chan)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#861: FILE: ltt/ltt-relay.c:807:
+					- SUBBUF_TRUNC(

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#867: FILE: ltt/ltt-relay.c:813:
+					 * is lost. */

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#870: FILE: ltt/ltt-relay.c:816:
+					return NULL;
+				} else {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#874: FILE: ltt/ltt-relay.c:820:
+					 * write in this new subbuffer.*/

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#879: FILE: ltt/ltt-relay.c:825:
+				 * write in this new subbuffer. */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#882: FILE: ltt/ltt-relay.c:828:
+			size = ltt_get_header_size(trace,
+					buf->start + offset_begin,

ERROR:SPACING: space required after that ',' (ctx:VxV)
#885: FILE: ltt/ltt-relay.c:831:
+			if((SUBBUF_OFFSET(offset_begin,buf->chan) + size)
 			                              ^

ERROR:SPACING: space required before the open parenthesis '('
#885: FILE: ltt/ltt-relay.c:831:
+			if((SUBBUF_OFFSET(offset_begin,buf->chan) + size)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#888: FILE: ltt/ltt-relay.c:834:
+				 * don't complete the sub-buffer switch. */

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#891: FILE: ltt/ltt-relay.c:837:
+				return NULL;
+			} else {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#894: FILE: ltt/ltt-relay.c:840:
+				 * write. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#898: FILE: ltt/ltt-relay.c:844:
+			 * switch boundary. It's safe to write */

ERROR:SPACING: space required before the open parenthesis '('
#902: FILE: ltt/ltt-relay.c:848:
+		if((SUBBUF_OFFSET(offset_end, buf->chan)) == 0) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#904: FILE: ltt/ltt-relay.c:850:
+			 * the next subbuffer. */

ERROR:SPACING: space required before the open parenthesis '('
#908: FILE: ltt/ltt-relay.c:854:
+		if(begin_switch || end_switch_old || end_switch_current) {

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#908: FILE: ltt/ltt-relay.c:854:
+		if(begin_switch || end_switch_old || end_switch_current) {
[...]
+		} else {
[...]

ERROR:SPACING: space required before the open parenthesis '('
#916: FILE: ltt/ltt-relay.c:862:
+		if(*tsc == 0) {

ERROR:SPACING: space required before the open parenthesis '('
#922: FILE: ltt/ltt-relay.c:868:
+	} while(atomic_cmpxchg(&ltt_buf->offset, offset_old, offset_end)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#925: FILE: ltt/ltt-relay.c:871:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#935: FILE: ltt/ltt-relay.c:881:
+		 * which will win this loop. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#937: FILE: ltt/ltt-relay.c:883:
+		 * only happen if a sub-buffer is corrupted */

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#938: FILE: ltt/ltt-relay.c:884:
+		if((SUBBUF_TRUNC(offset_end-1, buf->chan)
 		                           ^

ERROR:SPACING: space required before the open parenthesis '('
#938: FILE: ltt/ltt-relay.c:884:
+		if((SUBBUF_TRUNC(offset_end-1, buf->chan)

CHECK:BRACES: Unbalanced braces around else statement
#942: FILE: ltt/ltt-relay.c:888:
+		else {

ERROR:SPACING: space required before the open parenthesis '('
#946: FILE: ltt/ltt-relay.c:892:
+	} while(atomic_cmpxchg(&ltt_buf->consumed, consumed_old, consumed_new)

ERROR:SPACING: space required before the open parenthesis '('
#949: FILE: ltt/ltt-relay.c:895:
+	if(consumed_old != consumed_new) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#958: FILE: ltt/ltt-relay.c:904:
+		 * who died between the reserve and the commit. */

ERROR:SPACING: space required before the open parenthesis '('
#959: FILE: ltt/ltt-relay.c:905:
+		if(reserve_commit_diff) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#961: FILE: ltt/ltt-relay.c:907:
+			 * sub-buffer is corrupted. We do not deliver it. */

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#962: FILE: ltt/ltt-relay.c:908:
+			atomic_add(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '['
#964: FILE: ltt/ltt-relay.c:910:
+				&ltt_buf->commit_count[

ERROR:SPACING: space required before the open parenthesis '('
#970: FILE: ltt/ltt-relay.c:916:
+	if(end_switch_old) {

WARNING:TYPO_SPELLING: 'uncommited' may be misspelled - perhaps 'uncommitted'?
#985: FILE: ltt/ltt-relay.c:931:
+		 * The result will be than the old (uncommited) subbuffer will
 		                                    ^^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#989: FILE: ltt/ltt-relay.c:935:
+		 * Note : offset_old should never be 0 here.*/

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#991: FILE: ltt/ltt-relay.c:937:
+			SUBBUF_INDEX((offset_old-1), buf->chan));
 			                        ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#993: FILE: ltt/ltt-relay.c:939:
+		 * delivered by the last committer. */

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#995: FILE: ltt/ltt-relay.c:941:
+			 atomic_add_return(

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#996: FILE: ltt/ltt-relay.c:942:
+				(SUBBUF_OFFSET((offset_old-1), buf->chan)+1),
 				                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#996: FILE: ltt/ltt-relay.c:942:
+				(SUBBUF_OFFSET((offset_old-1), buf->chan)+1),
 				                                         ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '['
#997: FILE: ltt/ltt-relay.c:943:
+				 &ltt_buf->reserve_count[

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#998: FILE: ltt/ltt-relay.c:944:
+				 SUBBUF_INDEX((offset_old-1), buf->chan)]);
 				                         ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#999: FILE: ltt/ltt-relay.c:945:
+		if(reserve_count == atomic_read(

ERROR:SPACING: space required before the open parenthesis '('
#999: FILE: ltt/ltt-relay.c:945:
+		if(reserve_count == atomic_read(

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1000: FILE: ltt/ltt-relay.c:946:
+			&ltt_buf->commit_count[SUBBUF_INDEX((offset_old-1),
 			                                               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1002: FILE: ltt/ltt-relay.c:948:
+			ltt_deliver(buf, SUBBUF_INDEX((offset_old-1),
 			                                         ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1003: FILE: ltt/ltt-relay.c:949:
+			ltt_deliver(buf, SUBBUF_INDEX((offset_old-1),
+						buf->chan), NULL);

ERROR:SPACING: space required before the open parenthesis '('
#1007: FILE: ltt/ltt-relay.c:953:
+	if(begin_switch) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1011: FILE: ltt/ltt-relay.c:957:
+		 * executed, caution. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1013: FILE: ltt/ltt-relay.c:959:
+		 * deliver of this sub-buffer */

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1016: FILE: ltt/ltt-relay.c:962:
+		commit_count = atomic_add_return(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '['
#1018: FILE: ltt/ltt-relay.c:964:
+				&ltt_buf->commit_count[

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1021: FILE: ltt/ltt-relay.c:967:
+		if(commit_count == atomic_read(

ERROR:SPACING: space required before the open parenthesis '('
#1021: FILE: ltt/ltt-relay.c:967:
+		if(commit_count == atomic_read(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1025: FILE: ltt/ltt-relay.c:971:
+			ltt_deliver(buf,
+				SUBBUF_INDEX(offset_begin, buf->chan), NULL);

ERROR:SPACING: space required before the open parenthesis '('
#1029: FILE: ltt/ltt-relay.c:975:
+	if(end_switch_current) {

WARNING:TYPO_SPELLING: 'uncommited' may be misspelled - perhaps 'uncommitted'?
#1044: FILE: ltt/ltt-relay.c:990:
+		 * The result will be than the old (uncommited) subbuffer will
 		                                    ^^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1047: FILE: ltt/ltt-relay.c:993:
+		 * adjustment. */

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1049: FILE: ltt/ltt-relay.c:995:
+			SUBBUF_INDEX((offset_end-1), buf->chan));
 			                        ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1051: FILE: ltt/ltt-relay.c:997:
+		 * delivered by the last committer. */

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1052: FILE: ltt/ltt-relay.c:998:
+		reserve_count = atomic_add_return(

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1053: FILE: ltt/ltt-relay.c:999:
+			(SUBBUF_OFFSET((offset_end-1), buf->chan)+1),
 			                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1053: FILE: ltt/ltt-relay.c:999:
+			(SUBBUF_OFFSET((offset_end-1), buf->chan)+1),
 			                                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1054: FILE: ltt/ltt-relay.c:1000:
+			&ltt_buf->reserve_count[SUBBUF_INDEX((offset_end-1),
 			                                                ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1056: FILE: ltt/ltt-relay.c:1002:
+		if(reserve_count == atomic_read(

ERROR:SPACING: space required before the open parenthesis '('
#1056: FILE: ltt/ltt-relay.c:1002:
+		if(reserve_count == atomic_read(

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1057: FILE: ltt/ltt-relay.c:1003:
+			&ltt_buf->commit_count[SUBBUF_INDEX((offset_end-1),
 			                                               ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1060: FILE: ltt/ltt-relay.c:1006:
+			ltt_deliver(buf,
+				SUBBUF_INDEX((offset_end-1), buf->chan), NULL);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1060: FILE: ltt/ltt-relay.c:1006:
+				SUBBUF_INDEX((offset_end-1), buf->chan), NULL);
 				                        ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1072: FILE: ltt/ltt-relay.c:1018:
+
+

WARNING:TYPO_SPELLING: 'beginnig' may be misspelled - perhaps 'beginning'?
#1081: FILE: ltt/ltt-relay.c:1027:
+ * @reserved : address of the beginnig of the reserved slot.
                               ^^^^^^^^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1085: FILE: ltt/ltt-relay.c:1031:
+static void ltt_relay_commit_slot(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1097: FILE: ltt/ltt-relay.c:1043:
+	commit_count = atomic_add_return(slot_size,
+			&ltt_buf->commit_count[SUBBUF_INDEX(offset_begin,

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1100: FILE: ltt/ltt-relay.c:1046:
+	if(commit_count	== atomic_read(

ERROR:SPACING: space required before the open parenthesis '('
#1100: FILE: ltt/ltt-relay.c:1046:
+	if(commit_count	== atomic_read(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '['
#1101: FILE: ltt/ltt-relay.c:1047:
+		&ltt_buf->reserve_count[

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1104: FILE: ltt/ltt-relay.c:1050:
+		ltt_deliver(buf,
+			SUBBUF_INDEX(offset_begin, buf->chan), NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1109: FILE: ltt/ltt-relay.c:1055:
+static void ltt_relay_print_subbuffer_errors(struct ltt_channel_struct *ltt_chan,
+		int cons_off, unsigned int i)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1114: FILE: ltt/ltt-relay.c:1060:
+	printk(KERN_WARNING

WARNING:SPLIT_STRING: quoted string split across lines
#1116: FILE: ltt/ltt-relay.c:1062:
+		"LTT : unread channel %s offset is %d "
+		"and cons_off : %d (cpu %u)\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#1123: FILE: ltt/ltt-relay.c:1069:
+		printk(KERN_ALERT

WARNING:SPLIT_STRING: quoted string split across lines
#1125: FILE: ltt/ltt-relay.c:1071:
+			"LTT : %s : subbuffer %u has unequal "
+			"reserve and commit counts.\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#1127: FILE: ltt/ltt-relay.c:1073:
+	printk(KERN_ALERT "LTT : %s : reserve count : %u, commit count : %u\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1128: FILE: ltt/ltt-relay.c:1074:
+	printk(KERN_ALERT "LTT : %s : reserve count : %u, commit count : %u\n",
+			ltt_chan->channel_name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1134: FILE: ltt/ltt-relay.c:1080:
+static void ltt_relay_print_errors(struct ltt_trace_struct *trace,
+		struct ltt_channel_struct *ltt_chan, int cpu)

ERROR:SPACING: space required before the open parenthesis '('
#1139: FILE: ltt/ltt-relay.c:1085:
+	for(cons_off = atomic_read(&ltt_chan->buf[cpu].consumed);

WARNING:TYPO_SPELLING: 'reenable' may be misspelled - perhaps 're-enable'?
#1150: FILE: ltt/ltt-relay.c:1096:
+ * specific threshold value, we reenable preemption and block.
                                 ^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1153: FILE: ltt/ltt-relay.c:1099:
+static int ltt_relay_user_blocking(struct ltt_trace_struct *trace,
+		unsigned int index, size_t data_size, struct user_dbg_data *dbg)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1166: FILE: ltt/ltt-relay.c:1112:
+	 * block for it */

ERROR:SPACING: space required before the open parenthesis '('
#1167: FILE: ltt/ltt-relay.c:1113:
+	if(LTT_RESERVE_CRITICAL + data_size

ERROR:SPACING: space required before the open parenthesis '('
#1176: FILE: ltt/ltt-relay.c:1122:
+	if(!channel->overwrite &&

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1176: FILE: ltt/ltt-relay.c:1122:
+	if(!channel->overwrite &&

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1177: FILE: ltt/ltt-relay.c:1123:
+	if(!channel->overwrite &&
+		(dbg->avail_size = (dbg->write=atomic_read(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1177: FILE: ltt/ltt-relay.c:1123:
+		(dbg->avail_size = (dbg->write=atomic_read(

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1177: FILE: ltt/ltt-relay.c:1123:
+		(dbg->avail_size = (dbg->write=atomic_read(
 		                              ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1180: FILE: ltt/ltt-relay.c:1126:
+		 - SUBBUF_TRUNC((dbg->read = atomic_read(

ERROR:CODE_INDENT: code indent should use tabs where possible
#1182: FILE: ltt/ltt-relay.c:1128:
+^I^I^I ^I^Irelay_buf->chan))$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1182: FILE: ltt/ltt-relay.c:1128:
+^I^I^I ^I^Irelay_buf->chan))$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1201: FILE: ltt/ltt-relay.c:1147:
+static void ltt_relay_print_user_errors(struct ltt_trace_struct *trace,
+		unsigned int index, size_t data_size, struct user_dbg_data *dbg)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1212: FILE: ltt/ltt-relay.c:1158:
+	printk(KERN_ERR "Error in LTT usertrace : "

WARNING:SPLIT_STRING: quoted string split across lines
#1213: FILE: ltt/ltt-relay.c:1159:
+	printk(KERN_ERR "Error in LTT usertrace : "
+	"buffer full : event lost in blocking "

WARNING:SPLIT_STRING: quoted string split across lines
#1214: FILE: ltt/ltt-relay.c:1160:
+	"buffer full : event lost in blocking "
+	"mode. Increase LTT_RESERVE_CRITICAL.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1215: FILE: ltt/ltt-relay.c:1161:
+	printk(KERN_ERR "LTT nesting level is %u.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1216: FILE: ltt/ltt-relay.c:1162:
+	printk(KERN_ERR "LTT nesting level is %u.\n",
+		ltt_nesting[smp_processor_id()]);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1217: FILE: ltt/ltt-relay.c:1163:
+	printk(KERN_ERR "LTT avail size %lu.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1218: FILE: ltt/ltt-relay.c:1164:
+	printk(KERN_ERR "LTT avail size %lu.\n",
+		dbg->avail_size);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1219: FILE: ltt/ltt-relay.c:1165:
+	printk(KERN_ERR "avai write : %lu, read : %lu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1220: FILE: ltt/ltt-relay.c:1166:
+	printk(KERN_ERR "avai write : %lu, read : %lu\n",
+			dbg->write, dbg->read);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1221: FILE: ltt/ltt-relay.c:1167:
+	printk(KERN_ERR "LTT cur size %lu.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1222: FILE: ltt/ltt-relay.c:1168:
+	printk(KERN_ERR "LTT cur size %lu.\n",
+		(dbg->write = atomic_read(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1222: FILE: ltt/ltt-relay.c:1168:
+		(dbg->write = atomic_read(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1225: FILE: ltt/ltt-relay.c:1171:
+	 - SUBBUF_TRUNC((dbg->read = atomic_read(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1228: FILE: ltt/ltt-relay.c:1174:
+	printk(KERN_ERR "cur write : %lu, read : %lu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1229: FILE: ltt/ltt-relay.c:1175:
+	printk(KERN_ERR "cur write : %lu, read : %lu\n",
+			dbg->write, dbg->read);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1252: FILE: ltt/ltt-relay.c:1198:
+	printk(KERN_INFO "LTT : ltt-relay init\n");

ERROR:SPACING: space required before the open parenthesis '('
#1254: FILE: ltt/ltt-relay.c:1200:
+	if(ltt_root_dentry == NULL) return -EEXIST;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1254: FILE: ltt/ltt-relay.c:1200:
+	if(ltt_root_dentry == NULL) return -EEXIST;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ltt_root_dentry"
#1254: FILE: ltt/ltt-relay.c:1200:
+	if(ltt_root_dentry == NULL) return -EEXIST;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1271: FILE: ltt/ltt-relay.c:1217:
+	printk(KERN_INFO "LTT : ltt-relay exit\n");

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.37702.commit.33ca83ce69c9c3ebee735edc6ccbc054510d8a20 total: 95 errors, 106 warnings, 116 checks, 1236 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.37702.commit.33ca83ce69c9c3ebee735edc6ccbc054510d8a20 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
