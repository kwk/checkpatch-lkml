WARNING:TYPO_SPELLING: 'Cotnainers' may be misspelled - perhaps 'Containers'?
#17: 
Subject: [patch05/05]: Cotnainers(V2)- Over the limit memory handler
                       ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#45: FILE: mm/container_mm.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#62: FILE: mm/container_mm.c:18:
+#if 0 $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#62: FILE: mm/container_mm.c:18:
+#if 0 

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#63: FILE: mm/container_mm.c:19:
+#define Cprintk(x...) do { printk(x); } while (0)

CHECK:CAMELCASE: Avoid CamelCase: <Cprintk>
#63: FILE: mm/container_mm.c:19:
+#define Cprintk(x...) do { printk(x); } while (0)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#63: FILE: mm/container_mm.c:19:
+#define Cprintk(x...) do { printk(x); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#65: FILE: mm/container_mm.c:21:
+#define Cprintk(x...) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#80: FILE: mm/container_mm.c:36:
+ * File size smaller than this number of pages is skipped in the $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#110: FILE: mm/container_mm.c:66:
+static int get_task_vmas(struct mm_struct *mm, struct vm_area_struct **vmas,
+		struct vm_area_struct *start_vma)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#115: FILE: mm/container_mm.c:71:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!start_vma"
#116: FILE: mm/container_mm.c:72:
+	if (start_vma == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#118: FILE: mm/container_mm.c:74:
+^Ielse $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "tmp"
#121: FILE: mm/container_mm.c:77:
+	while ((i < MAX_VMA_COUNT) && (tmp != NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "tmp->anon_vma"
#124: FILE: mm/container_mm.c:80:
+			if (tmp->anon_vma != NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#140: FILE: mm/container_mm.c:96:
+static long anonpages_init(struct container_struct *ctn,
+		struct vm_area_struct *vma)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'page->ctn == ctn'
#152: FILE: mm/container_mm.c:108:
+		if ((page) && (page->ctn == ctn)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:TRAILING_WHITESPACE: trailing whitespace
#175: FILE: mm/container_mm.c:131:
+ * We iterate over task's vmas and reinitialize the container pointer in $

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'anonpages_sub', this function's name, in a string
#189: FILE: mm/container_mm.c:145:
+	Cprintk("anonpages_sub scanning for task %d...  ", task->pid);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#200: FILE: mm/container_mm.c:156:
+^I^Ii = 0; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#201: FILE: mm/container_mm.c:157:
+^I^Iwhile (i < count) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#204: FILE: mm/container_mm.c:160:
+^I^Iif (count == MAX_VMA_COUNT) $

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#209: FILE: mm/container_mm.c:165:
+			start_vma = vmas[MAX_VMA_COUNT-1];
 			                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#215: FILE: mm/container_mm.c:171:
+	Cprintk("returning %ld \n", ret);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#246: FILE: mm/container_mm.c:202:
+^I^Iif (flushed >  DEACTIVATE_COUNT) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#253: FILE: mm/container_mm.c:209:
+ * If the page is active then this function marks it inactive, clears the $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'page->ctn == ctn'
#303: FILE: mm/container_mm.c:259:
+		if (page && (page->ctn == ctn) && PageAnon(page)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#316: FILE: mm/container_mm.c:272:
+ * whenever page_limit of a container is hit and we are not able to $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#352: FILE: mm/container_mm.c:308:
+^I^I^Ii = 0; $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#361: FILE: mm/container_mm.c:317:
+^I^I^Iif (count == MAX_VMA_COUNT) $

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#366: FILE: mm/container_mm.c:322:
+				start_vma = vmas[MAX_VMA_COUNT-1];
 				                              ^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#390: FILE: mm/container_mm.c:346:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#416: FILE: mm/container_mm.c:372:
+long filepages_to_new_container(struct address_space *mapping, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#417: FILE: mm/container_mm.c:373:
+long filepages_to_new_container(struct address_space *mapping, 
+		struct container_struct *ctn)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#428: FILE: mm/container_mm.c:384:
+		for (i=0; i< pagevec_count(&pvec); i++) {
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxW)
#428: FILE: mm/container_mm.c:384:
+		for (i=0; i< pagevec_count(&pvec); i++) {
 		           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#431: FILE: mm/container_mm.c:387:
+^I^I^I^I$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#432: FILE: mm/container_mm.c:388:
+			BUG_ON(page->ctn != ctn);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_WHITESPACE: trailing whitespace
#486: FILE: mm/container_mm.c:442:
+^I^Iwhile ((ret < (DEACTIVATE_COUNT * (small_files +1))) && $

CHECK:SPACING: spaces preferred around that '+' (ctx:WxV)
#486: FILE: mm/container_mm.c:442:
+		while ((ret < (DEACTIVATE_COUNT * (small_files +1))) && 
 		                                               ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#487: FILE: mm/container_mm.c:443:
+		while ((ret < (DEACTIVATE_COUNT * (small_files +1))) && 
+			pagevec_lookup(&pvec, map, next, PAGEVEC_SIZE)) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#488: FILE: mm/container_mm.c:444:
+			for (i=0; i< pagevec_count(&pvec); i++) {
 			      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxW)
#488: FILE: mm/container_mm.c:444:
+			for (i=0; i< pagevec_count(&pvec); i++) {
 			           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#491: FILE: mm/container_mm.c:447:
+^I^I^I^I$

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#535: FILE: mm/container_mm.c:491:
+	int ret =0;
 	        ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'total_swap_pages > 0'
#551: FILE: mm/container_mm.c:507:
+		if ((total_swap_pages > 0) &&
+				(anon_pages > (ctn->page_limit >> 6)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#552: FILE: mm/container_mm.c:508:
+		if ((total_swap_pages > 0) &&
+				(anon_pages > (ctn->page_limit >> 6)))

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.36835.commit.2edd0129e4bb9e8fe8099643101d748221ebd0af total: 22 errors, 8 warnings, 17 checks, 512 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.36835.commit.2edd0129e4bb9e8fe8099643101d748221ebd0af has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
