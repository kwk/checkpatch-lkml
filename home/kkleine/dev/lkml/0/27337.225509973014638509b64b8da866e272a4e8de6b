ERROR:CODE_INDENT: code indent should use tabs where possible
#71: FILE: include/asm-generic/vmlinux.lds.h:167:
+        ^I.eh_frame_hdr : AT(ADDR(.eh_frame_hdr) - LOAD_OFFSET) {^I\$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#71: FILE: include/asm-generic/vmlinux.lds.h:167:
+        ^I.eh_frame_hdr : AT(ADDR(.eh_frame_hdr) - LOAD_OFFSET) {^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#71: FILE: include/asm-generic/vmlinux.lds.h:167:
+        ^I.eh_frame_hdr : AT(ADDR(.eh_frame_hdr) - LOAD_OFFSET) {^I\$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#89: FILE: include/linux/unwind.h:29:
+extern void unwind_setup(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#126: FILE: kernel/unwind.c:22:
+extern const u8 __start_unwind_hdr[], __end_unwind_hdr[];

CHECK:CAMELCASE: Avoid CamelCase: <pLoc>
#143: FILE: kernel/unwind.c:152:
+static unsigned long read_pointer(const u8 **pLoc,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:CODE_INDENT: code indent should use tabs where possible
#144: FILE: kernel/unwind.c:153:
+                                  const void *end,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#144: FILE: kernel/unwind.c:153:
+                                  const void *end,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#145: FILE: kernel/unwind.c:154:
+                                  signed ptrType);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#145: FILE: kernel/unwind.c:154:
+                                  signed ptrType);$

WARNING:UNSPECIFIED_INT: Prefer 'signed int' to bare use of 'signed'
#145: FILE: kernel/unwind.c:154:
+                                  signed ptrType);

CHECK:CAMELCASE: Avoid CamelCase: <ptrType>
#145: FILE: kernel/unwind.c:154:
+                                  signed ptrType);

ERROR:CODE_INDENT: code indent should use tabs where possible
#155: FILE: kernel/unwind.c:163:
+                              unsigned long table_size,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#155: FILE: kernel/unwind.c:163:
+                              unsigned long table_size,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#156: FILE: kernel/unwind.c:164:
+                              const u8 *header_start,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#156: FILE: kernel/unwind.c:164:
+                              const u8 *header_start,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#157: FILE: kernel/unwind.c:165:
+                              unsigned long header_size)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#157: FILE: kernel/unwind.c:165:
+                              unsigned long header_size)$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#170: FILE: kernel/unwind.c:178:
+	if (header_size <= 4
+	    || header_start[0] != 1

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#171: FILE: kernel/unwind.c:179:
+	    || header_start[0] != 1
+	    || (void *)read_pointer(&ptr, end, header_start[1]) != table_start

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#172: FILE: kernel/unwind.c:180:
+	    || (void *)read_pointer(&ptr, end, header_start[1]) != table_start
+	    || header_start[2] == DW_EH_PE_omit

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#173: FILE: kernel/unwind.c:181:
+	    || header_start[2] == DW_EH_PE_omit
+	    || read_pointer(&ptr, end, header_start[2]) <= 0

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#174: FILE: kernel/unwind.c:182:
+	    || read_pointer(&ptr, end, header_start[2]) <= 0
+	    || header_start[3] == DW_EH_PE_omit)

WARNING:MEMORY_BARRIER: memory barrier without comment
#177: FILE: kernel/unwind.c:185:
+	smp_wmb();

ERROR:CODE_INDENT: code indent should use tabs where possible
#187: FILE: kernel/unwind.c:196:
+^I                  __start_unwind, __end_unwind - __start_unwind,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#188: FILE: kernel/unwind.c:197:
+^I                  __start_unwind_hdr, __end_unwind_hdr - __start_unwind_hdr);$

WARNING:UNSPECIFIED_INT: Prefer 'signed int' to bare use of 'signed'
#193: FILE: kernel/unwind.c:202:
+static signed fde_pointer_type(const u32 *cie);

ERROR:CODE_INDENT: code indent should use tabs where possible
#222: FILE: kernel/unwind.c:231:
+                               void *(*alloc)(unsigned long))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#222: FILE: kernel/unwind.c:231:
+                               void *(*alloc)(unsigned long))$

CHECK:CAMELCASE: Avoid CamelCase: <tableSize>
#225: FILE: kernel/unwind.c:234:
+	unsigned long tableSize = table->size, hdrSize;

CHECK:CAMELCASE: Avoid CamelCase: <hdrSize>
#225: FILE: kernel/unwind.c:234:
+	unsigned long tableSize = table->size, hdrSize;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#226: FILE: kernel/unwind.c:235:
+	unsigned n;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((__packed__))
#236: FILE: kernel/unwind.c:245:
+	} __attribute__((__packed__)) *header;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#242: FILE: kernel/unwind.c:251:
+		printk(KERN_WARNING ".eh_frame_hdr for '%s' present but unusable\n",

WARNING:UNSPECIFIED_INT: Prefer 'signed int' to bare use of 'signed'
#252: FILE: kernel/unwind.c:261:
+		signed ptrType;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#256: FILE: kernel/unwind.c:265:
+		if (cie == NULL

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cie"
#256: FILE: kernel/unwind.c:265:
+		if (cie == NULL

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#257: FILE: kernel/unwind.c:266:
+		if (cie == NULL
+		    || cie == &bad_cie

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#258: FILE: kernel/unwind.c:267:
+		    || cie == &bad_cie
+		    || (ptrType = fde_pointer_type(cie)) < 0)

ERROR:CODE_INDENT: code indent should use tabs where possible
#262: FILE: kernel/unwind.c:271:
+^I^I                  (const u8 *)(fde + 1) + *fde,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#263: FILE: kernel/unwind.c:272:
+^I^I                  ptrType))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#272: FILE: kernel/unwind.c:281:
+^I        + 2 * n * sizeof(unsigned long);$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#277: FILE: kernel/unwind.c:286:
+	header->eh_frame_ptr_enc = DW_EH_PE_abs|DW_EH_PE_native;
 	                                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#278: FILE: kernel/unwind.c:287:
+	header->fde_count_enc    = DW_EH_PE_abs|DW_EH_PE_data4;
 	                                       ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#279: FILE: kernel/unwind.c:288:
+	header->table_enc        = DW_EH_PE_abs|DW_EH_PE_native;
 	                                       ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#282: FILE: kernel/unwind.c:291:
+^I             % __alignof(typeof(header->fde_count)));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#286: FILE: kernel/unwind.c:295:
+^I             % __alignof(typeof(*header->table)));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#296: FILE: kernel/unwind.c:305:
+^I^I                                      (const u8 *)(fde + 1) + *fde,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#297: FILE: kernel/unwind.c:306:
+^I^I                                      fde_pointer_type(cie));$

WARNING:MEMORY_BARRIER: memory barrier without comment
#310: FILE: kernel/unwind.c:319:
+	smp_wmb();

ERROR:CODE_INDENT: code indent should use tabs where possible
#317: FILE: kernel/unwind.c:326:
+^I                               sizeof(unsigned int),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#318: FILE: kernel/unwind.c:327:
+^I                               __pa(MAX_DMA_ADDRESS));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#332: FILE: kernel/unwind.c:356:
+^I                  table_start, table_size,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#333: FILE: kernel/unwind.c:357:
+^I                  NULL, 0);$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#350: FILE: kernel/unwind.c:476:
+	if ((fde[1] & (sizeof(*fde) - 1))
+	    || fde[1] > (unsigned long)(fde + 1) - (unsigned long)table->address)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#354: FILE: kernel/unwind.c:480:
+	if (*cie <= sizeof(*cie) + 4
+	    || *cie >= fde[1] - sizeof(*fde)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#355: FILE: kernel/unwind.c:481:
+	    || *cie >= fde[1] - sizeof(*fde)
+	    || (*cie & (sizeof(*cie) - 1))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#356: FILE: kernel/unwind.c:482:
+	    || (*cie & (sizeof(*cie) - 1))
+	    || cie[1])

WARNING:MEMORY_BARRIER: memory barrier without comment
#400: FILE: kernel/unwind.c:804:
+		smp_rmb();

ERROR:SPACING: space required before the open parenthesis '('
#402: FILE: kernel/unwind.c:806:
+			switch(hdr[3] & DW_EH_PE_FORM) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#403: FILE: kernel/unwind.c:807:
+			case DW_EH_PE_native: tableSize = sizeof(unsigned long); break;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#404: FILE: kernel/unwind.c:808:
+			case DW_EH_PE_data2: tableSize = 2; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#405: FILE: kernel/unwind.c:809:
+			case DW_EH_PE_data4: tableSize = 4; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#406: FILE: kernel/unwind.c:810:
+			case DW_EH_PE_data8: tableSize = 8; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#407: FILE: kernel/unwind.c:811:
+			default: tableSize = 0; break;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#411: FILE: kernel/unwind.c:815:
+			if (tableSize

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#412: FILE: kernel/unwind.c:816:
+			if (tableSize
+			    && read_pointer(&ptr, end, hdr[1])

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#414: FILE: kernel/unwind.c:818:
+			       == (unsigned long)table->address
+			    && (i = read_pointer(&ptr, end, hdr[2])) > 0

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#415: FILE: kernel/unwind.c:819:
+			    && (i = read_pointer(&ptr, end, hdr[2])) > 0
+			    && i == (end - ptr) / (2 * tableSize)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#416: FILE: kernel/unwind.c:820:
+			    && i == (end - ptr) / (2 * tableSize)
+			    && !((end - ptr) % (2 * tableSize))) {

CHECK:CAMELCASE: Avoid CamelCase: <startLoc>
#420: FILE: kernel/unwind.c:824:
+					startLoc = read_pointer(&cur,

ERROR:CODE_INDENT: code indent should use tabs where possible
#421: FILE: kernel/unwind.c:825:
+^I^I^I^I^I                        cur + tableSize,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#422: FILE: kernel/unwind.c:826:
+^I^I^I^I^I                        hdr[3]);$

CHECK:BRACES: braces {} should be used on all arms of this statement
#423: FILE: kernel/unwind.c:827:
+					if (pc < startLoc)
[...]
+					else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#425: FILE: kernel/unwind.c:829:
+					else {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#430: FILE: kernel/unwind.c:834:
+				if (i == 1

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#431: FILE: kernel/unwind.c:835:
+				if (i == 1
+				    && (startLoc = read_pointer(&ptr,

ERROR:CODE_INDENT: code indent should use tabs where possible
#432: FILE: kernel/unwind.c:836:
+^I^I^I^I                                ptr + tableSize,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#433: FILE: kernel/unwind.c:837:
+^I^I^I^I                                hdr[3])) != 0$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#434: FILE: kernel/unwind.c:838:
+				                                hdr[3])) != 0
+				    && pc >= startLoc)

ERROR:CODE_INDENT: code indent should use tabs where possible
#436: FILE: kernel/unwind.c:840:
+^I^I^I^I^I                           ptr + tableSize,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#437: FILE: kernel/unwind.c:841:
+^I^I^I^I^I                           hdr[3]);$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "fde"
#441: FILE: kernel/unwind.c:845:
+		if (fde != NULL) {

ERROR:SPACING: space required before the open parenthesis '('
#456: FILE: kernel/unwind.c:848:
+			if(cie != NULL

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#456: FILE: kernel/unwind.c:848:
+			if(cie != NULL

CHECK:BRACES: braces {} should be used on all arms of this statement
#456: FILE: kernel/unwind.c:848:
+			if(cie != NULL
[...]
+			} else
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cie"
#456: FILE: kernel/unwind.c:848:
+			if(cie != NULL

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#457: FILE: kernel/unwind.c:849:
+			if(cie != NULL
+			   && cie != &bad_cie

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#458: FILE: kernel/unwind.c:850:
+			   && cie != &bad_cie
+			   && cie != &not_fde

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#459: FILE: kernel/unwind.c:851:
+			   && cie != &not_fde
+			   && (ptrType = fde_pointer_type(cie)) >= 0

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#460: FILE: kernel/unwind.c:852:
+			   && (ptrType = fde_pointer_type(cie)) >= 0
+			   && read_pointer(&ptr,

ERROR:CODE_INDENT: code indent should use tabs where possible
#461: FILE: kernel/unwind.c:853:
+^I^I^I                   (const u8 *)(fde + 1) + *fde,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#462: FILE: kernel/unwind.c:854:
+^I^I^I                   ptrType) == startLoc) {$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#464: FILE: kernel/unwind.c:856:
+					ptrType &= DW_EH_PE_FORM|DW_EH_PE_signed;
 					                        ^

CHECK:CAMELCASE: Avoid CamelCase: <endLoc>
#465: FILE: kernel/unwind.c:857:
+				endLoc = startLoc

ERROR:CODE_INDENT: code indent should use tabs where possible
#466: FILE: kernel/unwind.c:858:
+^I^I^I^I         + read_pointer(&ptr,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#467: FILE: kernel/unwind.c:859:
+^I^I^I^I                        (const u8 *)(fde + 1) + *fde,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#468: FILE: kernel/unwind.c:860:
+^I^I^I^I                        ptrType);$

ERROR:SPACING: space required before the open parenthesis '('
#469: FILE: kernel/unwind.c:861:
+				if(pc >= endLoc)

CHECK:BRACES: Unbalanced braces around else statement
#471: FILE: kernel/unwind.c:863:
+			} else

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!fde"
#474: FILE: kernel/unwind.c:866:
+		if (fde == NULL) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#477: FILE: kernel/unwind.c:869:
+			     cie = NULL, tableSize > sizeof(*fde)
+			     && tableSize - sizeof(*fde) >= *fde;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#485: FILE: kernel/unwind.c:877:
+				if (cie == NULL

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cie"
#485: FILE: kernel/unwind.c:877:
+				if (cie == NULL

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#486: FILE: kernel/unwind.c:878:
+				if (cie == NULL
+				    || cie == &not_fde

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#487: FILE: kernel/unwind.c:879:
+				    || cie == &not_fde
+				    || (ptrType = fde_pointer_type(cie)) < 0)

ERROR:CODE_INDENT: code indent should use tabs where possible
#491: FILE: kernel/unwind.c:883:
+^I^I^I^I                        (const u8 *)(fde + 1) + *fde,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#492: FILE: kernel/unwind.c:884:
+^I^I^I^I                        ptrType);$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#496: FILE: kernel/unwind.c:888:
+					ptrType &= DW_EH_PE_FORM|DW_EH_PE_signed;
 					                        ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#498: FILE: kernel/unwind.c:890:
+^I^I^I^I         + read_pointer(&ptr,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#499: FILE: kernel/unwind.c:891:
+^I^I^I^I                        (const u8 *)(fde + 1) + *fde,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#500: FILE: kernel/unwind.c:892:
+^I^I^I^I                        ptrType);$

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.27337.commit.225509973014638509b64b8da866e272a4e8de6b total: 49 errors, 18 warnings, 45 checks, 442 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.27337.commit.225509973014638509b64b8da866e272a4e8de6b has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
