WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
> http://sourceforge.net/mailarchive/forum.php?thread_id=13335072&forum_id=45866

WARNING:TYPO_SPELLING: 'accss' may be misspelled - perhaps 'access'?
#86: FILE: drivers/mmc/Kconfig:116:
+	  Some systems accss MMC/SD cards using the SPI protocol instead of
 	               ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#99: FILE: include/linux/spi/mmc_spi.h:1:
+#ifndef __LINUX_SPI_MMC_SPI_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#116: FILE: include/linux/spi/mmc_spi.h:18:
+	int (*init)(struct device *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#116: FILE: include/linux/spi/mmc_spi.h:18:
+	int (*init)(struct device *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#117: FILE: include/linux/spi/mmc_spi.h:19:
+	int (*init)(struct device *,
+		irqreturn_t (*)(int, void *, struct pt_regs *),

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#119: FILE: include/linux/spi/mmc_spi.h:21:
+	void (*exit)(struct device *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#119: FILE: include/linux/spi/mmc_spi.h:21:
+	void (*exit)(struct device *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#125: FILE: include/linux/spi/mmc_spi.h:27:
+	int (*get_ro)(struct device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#129: FILE: include/linux/spi/mmc_spi.h:31:
+	void (*setpower)(struct device *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#129: FILE: include/linux/spi/mmc_spi.h:31:
+	void (*setpower)(struct device *, unsigned int);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#150: FILE: drivers/mmc/mmc_spi.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#169: FILE: drivers/mmc/mmc_spi.c:20:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#170: FILE: drivers/mmc/mmc_spi.c:21:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#188: FILE: drivers/mmc/mmc_spi.c:39:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:REPEATED_WORD: Possible repeated word: 'folk'
#197: FILE: drivers/mmc/mmc_spi.c:48:
+ *   imply switching to a different driver.  Not many folk folk use

CHECK:LINE_SPACING: Please don't use multiple blank lines
#208: FILE: drivers/mmc/mmc_spi.c:59:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#253: FILE: drivers/mmc/mmc_spi.c:104:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#261: FILE: drivers/mmc/mmc_spi.c:112:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#266: FILE: drivers/mmc/mmc_spi.c:117:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#286: FILE: drivers/mmc/mmc_spi.c:137:
+
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#328: FILE: drivers/mmc/mmc_spi.c:179:
+static unsigned debug = 1;

WARNING:LINE_SPACING: Missing a blank line after declarations
#339: FILE: drivers/mmc/mmc_spi.c:190:
+	int status = spi_sync(host->spi, &host->readback);
+	if (status < 0)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#345: FILE: drivers/mmc/mmc_spi.c:196:
+mmc_spi_readbytes(struct mmc_spi_host *host, void *bytes, unsigned len)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#361: FILE: drivers/mmc/mmc_spi.c:212:
+
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#381: FILE: drivers/mmc/mmc_spi.c:232:
+mmc_spi_scanbyte(struct mmc_spi_host *host, int (*fail)(u8), unsigned delay)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#384: FILE: drivers/mmc/mmc_spi.c:235:
+	unsigned	wait;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#394: FILE: drivers/mmc/mmc_spi.c:245:
+				pr_debug("  mmc_spi: token %02x, wait %d\n",
+						value, wait);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#490: FILE: drivers/mmc/mmc_spi.c:341:
+	pr_debug("%sCMD%d response SPI_%s: ",
+		host->app_cmd ? "A" : "",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#505: FILE: drivers/mmc/mmc_spi.c:356:
+		dev_err(&host->spi->dev, "INVALID RESPONSE, %02x\n",
+					host->response[0]);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#514: FILE: drivers/mmc/mmc_spi.c:365:
+	switch (host->rsp_type) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#521: FILE: drivers/mmc/mmc_spi.c:372:
+		(void) mmc_spi_scanbyte(host, mmc_spi_busy, WRITE_TIMEOUT);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#522: FILE: drivers/mmc/mmc_spi.c:373:
+		/* FALLTHROUGH */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

CHECK:SPACING: No space is necessary after a cast
#539: FILE: drivers/mmc/mmc_spi.c:390:
+		(void) mmc_spi_readbytes(host, &cmd->resp[0], 4);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#552: FILE: drivers/mmc/mmc_spi.c:403:
+		pr_debug("  mmc_spi: resp %02x.%02x\n",
+				host->response[1],

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#568: FILE: drivers/mmc/mmc_spi.c:419:
+			if (cmd->error == MMC_ERR_NONE
+					&& cmd->opcode == MMC_APP_CMD)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#574: FILE: drivers/mmc/mmc_spi.c:425:
+			pr_debug("mmc_spi: no map SPI_%s --> MMC_%s/%02x\n",
+				maptype(host->rsp_type),

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#596: FILE: drivers/mmc/mmc_spi.c:447:
+		if (host->rsp_type != MMC_RSP_R3
+				&& cmd->error == MMC_ERR_NONE

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#597: FILE: drivers/mmc/mmc_spi.c:448:
+				&& cmd->error == MMC_ERR_NONE
+				&& !( (cmd->opcode == MMC_SEND_OP_COND

ERROR:SPACING: space prohibited after that open parenthesis '('
#597: FILE: drivers/mmc/mmc_spi.c:448:
+				&& !( (cmd->opcode == MMC_SEND_OP_COND

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#598: FILE: drivers/mmc/mmc_spi.c:449:
+				&& !( (cmd->opcode == MMC_SEND_OP_COND
+					&& !host->app_cmd)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#599: FILE: drivers/mmc/mmc_spi.c:450:
+					&& !host->app_cmd)
+				   || (cmd->opcode == SD_APP_OP_COND

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#600: FILE: drivers/mmc/mmc_spi.c:451:
+				   || (cmd->opcode == SD_APP_OP_COND
+					&& host->app_cmd))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#603: FILE: drivers/mmc/mmc_spi.c:454:
+			pr_debug("** MMC_R3 mismatch to SPI_%s\n",
+					maptype(host->rsp_type));

CHECK:BRACES: braces {} should be used on all arms of this statement
#608: FILE: drivers/mmc/mmc_spi.c:459:
+		if (cmd->opcode == MMC_GO_IDLE_STATE) {
[...]
+		} else
[...]

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#610: FILE: drivers/mmc/mmc_spi.c:461:
+			if (!(host->response[0] & SPI_MMC_R1_IDLE)
+					&& cmd->error == MMC_ERR_NONE) {

CHECK:BRACES: Unbalanced braces around else statement
#614: FILE: drivers/mmc/mmc_spi.c:465:
+		} else

ERROR:SPACING: space prohibited after that open square bracket '['
#624: FILE: drivers/mmc/mmc_spi.c:475:
+	[ 0] = MMC_RSP_R1,

ERROR:SPACING: space prohibited after that open square bracket '['
#625: FILE: drivers/mmc/mmc_spi.c:476:
+	[ 1] = MMC_RSP_R1,

ERROR:SPACING: space prohibited after that open square bracket '['
#626: FILE: drivers/mmc/mmc_spi.c:477:
+	[ 6] = MMC_RSP_R1,

ERROR:SPACING: space prohibited after that open square bracket '['
#627: FILE: drivers/mmc/mmc_spi.c:478:
+	[ 9] = MMC_RSP_R1,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#671: FILE: drivers/mmc/mmc_spi.c:522:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#680: FILE: drivers/mmc/mmc_spi.c:531:
+mmc_spi_command_send(struct mmc_spi_host *host,
+		struct mmc_request *mrq, u32 crc)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#686: FILE: drivers/mmc/mmc_spi.c:537:
+	unsigned		opcode;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#687: FILE: drivers/mmc/mmc_spi.c:538:
+	unsigned		opcond_retries = 25;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#698: FILE: drivers/mmc/mmc_spi.c:549:
+		pr_debug("  mmc_spi: INVALID %sCMD%d (%02x)\n",
+			host->app_cmd ? "A" : "",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#716: FILE: drivers/mmc/mmc_spi.c:567:
+	pr_debug("  mmc_spi: %scmd%d (%02x)\n",
+			host->app_cmd ? "a" : "", opcode, opcode);

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#745: FILE: drivers/mmc/mmc_spi.c:596:
+		/* FALLTHROUGH */

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#772: FILE: drivers/mmc/mmc_spi.c:623:
+mmc_spi_setup_message(

WARNING:SIZEOF_PARENTHESIS: sizeof *t should be sizeof(*t)
#789: FILE: drivers/mmc/mmc_spi.c:640:
+		memset(t, 0, sizeof *t);

WARNING:SIZEOF_PARENTHESIS: sizeof *t should be sizeof(*t)
#800: FILE: drivers/mmc/mmc_spi.c:651:
+	memset(t, 0, sizeof *t);

WARNING:SIZEOF_PARENTHESIS: sizeof t should be sizeof(t)
#804: FILE: drivers/mmc/mmc_spi.c:655:
+	memset(t, 0, sizeof t);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#822: FILE: drivers/mmc/mmc_spi.c:673:
+		t->tx_buf = host->t.tx_buf = &host->ones;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#826: FILE: drivers/mmc/mmc_spi.c:677:
+			t->tx_dma = host->t.tx_dma = host->dma

CHECK:LINE_SPACING: Please don't use multiple blank lines
#832: FILE: drivers/mmc/mmc_spi.c:683:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#847: FILE: drivers/mmc/mmc_spi.c:698:
+
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#857: FILE: drivers/mmc/mmc_spi.c:708:
+	unsigned		n_sg;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#877: FILE: drivers/mmc/mmc_spi.c:728:
+		unsigned		length = sg->length;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#890: FILE: drivers/mmc/mmc_spi.c:741:
+			dma_sync_single_for_device(host->dma_dev,
+				host->dma, sizeof *host, direction);

WARNING:SIZEOF_PARENTHESIS: sizeof *host should be sizeof(*host)
#890: FILE: drivers/mmc/mmc_spi.c:741:
+				host->dma, sizeof *host, direction);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#905: FILE: drivers/mmc/mmc_spi.c:756:
+			pr_debug("    mmc_spi: %s block, %d bytes\n",
+					(direction == DMA_TO_DEVICE)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#921: FILE: drivers/mmc/mmc_spi.c:772:
+				response = mmc_spi_scanbyte(host, mmc_spi_busy,
+							WRITE_TIMEOUT);

CHECK:SPACING: No space is necessary after a cast
#937: FILE: drivers/mmc/mmc_spi.c:788:
+				(void) mmc_spi_readbyte(host);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#941: FILE: drivers/mmc/mmc_spi.c:792:
+				status = mmc_spi_scanbyte(host, mmc_spi_delayed,
+							READ_TIMEOUT);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#945: FILE: drivers/mmc/mmc_spi.c:796:
+					dma_sync_single_for_cpu(host->dma_dev,
+						host->dma, sizeof *host,

WARNING:SIZEOF_PARENTHESIS: sizeof *host should be sizeof(*host)
#945: FILE: drivers/mmc/mmc_spi.c:796:
+						host->dma, sizeof *host,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#981: FILE: drivers/mmc/mmc_spi.c:832:
+			dma_unmap_page(dma_dev, dma_addr,
+					PAGE_SIZE, direction);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#994: FILE: drivers/mmc/mmc_spi.c:845:
+	if (direction == DMA_TO_DEVICE && multiple) {
+		/* FIXME send STOP_TRAN */
+	}

CHECK:CAMELCASE: Avoid CamelCase: <mmc_spi_send_cXd>
#1013: FILE: drivers/mmc/mmc_spi.c:864:
+mmc_spi_send_cXd(struct mmc_spi_host *host, struct mmc_request *mrq)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:BRACES: braces {} should be used on all arms of this statement
#1038: FILE: drivers/mmc/mmc_spi.c:889:
+		if (status < 0)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1040: FILE: drivers/mmc/mmc_spi.c:891:
+		else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1049: FILE: drivers/mmc/mmc_spi.c:900:
+			pr_debug("mmc_spi: read cXd err %02x\n",
+					status);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1058: FILE: drivers/mmc/mmc_spi.c:909:
+		pr_debug("mmc_spi: read cXd, %d \n", status);

CHECK:SPACING: No space is necessary after a cast
#1076: FILE: drivers/mmc/mmc_spi.c:927:
+	(void) mmc_spi_scanbyte(host, mmc_spi_busy, WRITE_TIMEOUT);

CHECK:SPACING: No space is necessary after a cast
#1077: FILE: drivers/mmc/mmc_spi.c:928:
+	(void) mmc_spi_readbytes(host, host->command.buf,

WARNING:SIZEOF_PARENTHESIS: sizeof host->command.buf should be sizeof(host->command.buf)
#1078: FILE: drivers/mmc/mmc_spi.c:929:
+				sizeof host->command.buf);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1120: FILE: drivers/mmc/mmc_spi.c:971:
+		dev_err(&host->spi->dev, "can't get exclusive access, %d\n",
+				status);

CHECK:SPACING: No space is necessary after a cast
#1172: FILE: drivers/mmc/mmc_spi.c:1023:
+			(void) mmc_spi_command_do(host, mrq);

CHECK:SPACING: No space is necessary after a cast
#1186: FILE: drivers/mmc/mmc_spi.c:1037:
+	(void) mmc_spi_readbyte(host);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1196: FILE: drivers/mmc/mmc_spi.c:1047:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1213: FILE: drivers/mmc/mmc_spi.c:1064:
+		pr_debug("mmc_spi:  clock to %d KHz, %d\n",
+			host->spi->max_speed_hz / 1000, status);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1227: FILE: drivers/mmc/mmc_spi.c:1078:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1234: FILE: drivers/mmc/mmc_spi.c:1085:
+
+

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1250: FILE: drivers/mmc/mmc_spi.c:1101:
+static int __devinit mmc_spi_probe(struct spi_device *spi)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1256: FILE: drivers/mmc/mmc_spi.c:1107:
+	spi->mode |= (SPI_CPOL|SPI_CPHA);
 	                      ^

WARNING:SIZEOF_PARENTHESIS: sizeof *host should be sizeof(*host)
#1263: FILE: drivers/mmc/mmc_spi.c:1114:
+	mmc = mmc_alloc_host(sizeof *host, &spi->dev);

WARNING:SIZEOF_PARENTHESIS: sizeof host->ones should be sizeof(host->ones)
#1277: FILE: drivers/mmc/mmc_spi.c:1128:
+	memset(host->ones, 0xff, sizeof host->ones);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1285: FILE: drivers/mmc/mmc_spi.c:1136:
+			: MMC_VDD_32_33|MMC_VDD_33_34;
 			               ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1299: FILE: drivers/mmc/mmc_spi.c:1150:
+		host->dma = dma_map_single(host->dma_dev, host,
+				sizeof *host, DMA_BIDIRECTIONAL);

WARNING:SIZEOF_PARENTHESIS: sizeof *host should be sizeof(*host)
#1299: FILE: drivers/mmc/mmc_spi.c:1150:
+				sizeof *host, DMA_BIDIRECTIONAL);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1321: FILE: drivers/mmc/mmc_spi.c:1172:
+
+

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#1322: FILE: drivers/mmc/mmc_spi.c:1173:
+static int __devexit mmc_spi_remove(struct spi_device *spi)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1335: FILE: drivers/mmc/mmc_spi.c:1186:
+			dma_unmap_single(host->dma_dev, host->dma,
+				sizeof *host, DMA_BIDIRECTIONAL);

WARNING:SIZEOF_PARENTHESIS: sizeof *host should be sizeof(*host)
#1335: FILE: drivers/mmc/mmc_spi.c:1186:
+				sizeof *host, DMA_BIDIRECTIONAL);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1343: FILE: drivers/mmc/mmc_spi.c:1194:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1354: FILE: drivers/mmc/mmc_spi.c:1205:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1361: FILE: drivers/mmc/mmc_spi.c:1212:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1368: FILE: drivers/mmc/mmc_spi.c:1219:
+
+

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.52459.commit.08ca486ca5086c008bb94af7a5a4e934d332805e total: 7 errors, 37 warnings, 64 checks, 1278 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.52459.commit.08ca486ca5086c008bb94af7a5a4e934d332805e has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
