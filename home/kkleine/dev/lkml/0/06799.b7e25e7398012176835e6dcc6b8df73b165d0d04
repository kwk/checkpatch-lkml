WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
--- linux-2.6.20-rc1.orig/include/linux/ext4_fs_i.h	2006-12-14 04:14:23.000000000 +0300

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#64: FILE: include/linux/ext4_fs.h:999:
+extern int ext4_wb_writepages(struct address_space *, struct writeback_control *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#65: FILE: include/linux/ext4_fs.h:1000:
+extern int ext4_wb_prepare_write(struct file *file, struct page *page,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#66: FILE: include/linux/ext4_fs.h:1001:
+extern int ext4_wb_prepare_write(struct file *file, struct page *page,
+			      unsigned from, unsigned to);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#66: FILE: include/linux/ext4_fs.h:1001:
+			      unsigned from, unsigned to);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#66: FILE: include/linux/ext4_fs.h:1001:
+			      unsigned from, unsigned to);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#67: FILE: include/linux/ext4_fs.h:1002:
+extern int ext4_wb_commit_write(struct file *, struct page *, unsigned, unsigned);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#67: FILE: include/linux/ext4_fs.h:1002:
+extern int ext4_wb_commit_write(struct file *, struct page *, unsigned, unsigned);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#67: FILE: include/linux/ext4_fs.h:1002:
+extern int ext4_wb_commit_write(struct file *, struct page *, unsigned, unsigned);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#67: FILE: include/linux/ext4_fs.h:1002:
+extern int ext4_wb_commit_write(struct file *, struct page *, unsigned, unsigned);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#67: FILE: include/linux/ext4_fs.h:1002:
+extern int ext4_wb_commit_write(struct file *, struct page *, unsigned, unsigned);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned' should also have an identifier name
#67: FILE: include/linux/ext4_fs.h:1002:
+extern int ext4_wb_commit_write(struct file *, struct page *, unsigned, unsigned);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned' should also have an identifier name
#67: FILE: include/linux/ext4_fs.h:1002:
+extern int ext4_wb_commit_write(struct file *, struct page *, unsigned, unsigned);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#68: FILE: include/linux/ext4_fs.h:1003:
+extern int ext4_wb_writepage(struct page *, struct writeback_control *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#68: FILE: include/linux/ext4_fs.h:1003:
+extern int ext4_wb_writepage(struct page *, struct writeback_control *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct writeback_control *' should also have an identifier name
#68: FILE: include/linux/ext4_fs.h:1003:
+extern int ext4_wb_writepage(struct page *, struct writeback_control *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#69: FILE: include/linux/ext4_fs.h:1004:
+extern void ext4_wb_invalidatepage(struct page *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#69: FILE: include/linux/ext4_fs.h:1004:
+extern void ext4_wb_invalidatepage(struct page *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#69: FILE: include/linux/ext4_fs.h:1004:
+extern void ext4_wb_invalidatepage(struct page *, unsigned long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#70: FILE: include/linux/ext4_fs.h:1005:
+extern int ext4_wb_releasepage(struct page *, gfp_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#70: FILE: include/linux/ext4_fs.h:1005:
+extern int ext4_wb_releasepage(struct page *, gfp_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gfp_t' should also have an identifier name
#70: FILE: include/linux/ext4_fs.h:1005:
+extern int ext4_wb_releasepage(struct page *, gfp_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#71: FILE: include/linux/ext4_fs.h:1006:
+extern int ext4_wb_block_truncate_page(handle_t *, struct page *, struct address_space *, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'handle_t *' should also have an identifier name
#71: FILE: include/linux/ext4_fs.h:1006:
+extern int ext4_wb_block_truncate_page(handle_t *, struct page *, struct address_space *, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#71: FILE: include/linux/ext4_fs.h:1006:
+extern int ext4_wb_block_truncate_page(handle_t *, struct page *, struct address_space *, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct address_space *' should also have an identifier name
#71: FILE: include/linux/ext4_fs.h:1006:
+extern int ext4_wb_block_truncate_page(handle_t *, struct page *, struct address_space *, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#71: FILE: include/linux/ext4_fs.h:1006:
+extern int ext4_wb_block_truncate_page(handle_t *, struct page *, struct address_space *, loff_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#72: FILE: include/linux/ext4_fs.h:1007:
+extern void ext4_wb_init(struct super_block *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#72: FILE: include/linux/ext4_fs.h:1007:
+extern void ext4_wb_init(struct super_block *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#73: FILE: include/linux/ext4_fs.h:1008:
+extern void ext4_wb_release(struct super_block *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#73: FILE: include/linux/ext4_fs.h:1008:
+extern void ext4_wb_release(struct super_block *);

ERROR:CODE_INDENT: code indent should use tabs where possible
#130: FILE: fs/ext4/super.c:512:
+ ^Iei->i_blocks_reserved = 0;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#130: FILE: fs/ext4/super.c:512:
+ ^Iei->i_blocks_reserved = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#130: FILE: fs/ext4/super.c:512:
+ ^Iei->i_blocks_reserved = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#131: FILE: fs/ext4/super.c:513:
+ ^Iei->i_md_reserved = 0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#131: FILE: fs/ext4/super.c:513:
+ ^Iei->i_md_reserved = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#131: FILE: fs/ext4/super.c:513:
+ ^Iei->i_md_reserved = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#132: FILE: fs/ext4/super.c:514:
+ ^Iatomic_set(&ei->i_wb_writers, 0);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#132: FILE: fs/ext4/super.c:514:
+ ^Iatomic_set(&ei->i_wb_writers, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#132: FILE: fs/ext4/super.c:514:
+ ^Iatomic_set(&ei->i_wb_writers, 0);$

CHECK:CAMELCASE: Avoid CamelCase: <Opt_grpquota>
#143: FILE: fs/ext4/super.c:740:
+	Opt_grpquota, Opt_extents, Opt_delayed_alloc,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Opt_extents>
#143: FILE: fs/ext4/super.c:740:
+	Opt_grpquota, Opt_extents, Opt_delayed_alloc,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_delayed_alloc>
#143: FILE: fs/ext4/super.c:740:
+	Opt_grpquota, Opt_extents, Opt_delayed_alloc,

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#195: FILE: fs/ext4/extents.c:2176:
+	num = leafs = (blocks + lcap - 1) / lcap;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#232: FILE: fs/ext4/writeback.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#246: FILE: fs/ext4/writeback.c:15:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#247: FILE: fs/ext4/writeback.c:16:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#292: FILE: fs/ext4/writeback.c:61:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#300: FILE: fs/ext4/writeback.c:69:
+#define WB_ASSERT(__x__) if (!(__x__)) BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#300: FILE: fs/ext4/writeback.c:69:
+#define WB_ASSERT(__x__) if (!(__x__)) BUG();

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#300: FILE: fs/ext4/writeback.c:69:
+#define WB_ASSERT(__x__) if (!(__x__)) BUG();

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#304: FILE: fs/ext4/writeback.c:73:
+#define wb_debug(fmt,a...)	printk(fmt, ##a);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#304: FILE: fs/ext4/writeback.c:73:
+#define wb_debug(fmt,a...)	printk(fmt, ##a);
                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#304: FILE: fs/ext4/writeback.c:73:
+#define wb_debug(fmt,a...)	printk(fmt, ##a);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#306: FILE: fs/ext4/writeback.c:75:
+#define wb_debug(fmt,a...)
                     ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#328: FILE: fs/ext4/writeback.c:97:
+
+

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#329: FILE: fs/ext4/writeback.c:98:
+void ext4_wb_invalidatepage(struct page *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#329: FILE: fs/ext4/writeback.c:98:
+void ext4_wb_invalidatepage(struct page *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#329: FILE: fs/ext4/writeback.c:98:
+void ext4_wb_invalidatepage(struct page *, unsigned long);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#330: FILE: fs/ext4/writeback.c:99:
+int ext4_get_block(struct inode *inode, sector_t iblock,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#331: FILE: fs/ext4/writeback.c:100:
+int ext4_get_block(struct inode *inode, sector_t iblock,
+			struct buffer_head *bh_result, int create);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#333: FILE: fs/ext4/writeback.c:102:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#334: FILE: fs/ext4/writeback.c:103:
+static struct page * ext4_wb_pull_page(struct ext4_wb_control *wc)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#338: FILE: fs/ext4/writeback.c:107:
+	BUG_ON(wp == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!wp"
#338: FILE: fs/ext4/writeback.c:107:
+	BUG_ON(wp == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#339: FILE: fs/ext4/writeback.c:108:
+	BUG_ON(list_empty(&wc->list));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#340: FILE: fs/ext4/writeback.c:109:
+	BUG_ON(list_empty(&wp->list));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#349: FILE: fs/ext4/writeback.c:118:
+	BUG_ON(list_empty(&wp->list));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#353: FILE: fs/ext4/writeback.c:122:
+static struct bio * ext4_wb_bio_alloc(struct inode *inode,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#354: FILE: fs/ext4/writeback.c:123:
+static struct bio * ext4_wb_bio_alloc(struct inode *inode,
+					sector_t first_block, int nr_vecs)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bio"
#366: FILE: fs/ext4/writeback.c:135:
+	if (bio == NULL && (current->flags & PF_MEMALLOC)) {

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#380: FILE: fs/ext4/writeback.c:149:
+	const int uptodate = test_bit(BIO_UPTODATE, &bio->bi_flags);
 	          ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#392: FILE: fs/ext4/writeback.c:161:
+		if (!uptodate)
 		     ^^^^^^^^

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#407: FILE: fs/ext4/writeback.c:176:
+int inline ext4_wb_reserve_space_page(struct page *page, int blocks)

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#413: FILE: fs/ext4/writeback.c:182:
+	wb_debug("reserve %d blocks for page %lu from inode %lu\n",
+			blocks, page->index, inode->i_ino);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#417: FILE: fs/ext4/writeback.c:186:
+^I * involve allocation index/leaf blocks for tree/blockmap. $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#419: FILE: fs/ext4/writeback.c:188:
+	 * case: block per extent */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#426: FILE: fs/ext4/writeback.c:195:
+	BUG_ON(mdb < EXT4_I(inode)->i_md_reserved);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#428: FILE: fs/ext4/writeback.c:197:
+^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#437: FILE: fs/ext4/writeback.c:206:
+	 * inode's fields are protected by inode->i_sem */

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#452: FILE: fs/ext4/writeback.c:221:
+int inline ext4_wb_release_space(struct inode *inode, int blocks, int used)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#462: FILE: fs/ext4/writeback.c:231:
+	BUG_ON(mdb > EXT4_I(inode)->i_md_reserved);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#470: FILE: fs/ext4/writeback.c:239:
+	wb_debug("%u %s: release %d/%d blocks from %u/%u reserved for inode %lu\n",
+			blocks, used ? "allocated" : "dropped", used ? 0 : blocks,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#477: FILE: fs/ext4/writeback.c:246:
+	BUG_ON(blocks > EXT4_I(inode)->i_blocks_reserved);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#479: FILE: fs/ext4/writeback.c:248:
+	BUG_ON(mdb > EXT4_I(inode)->i_md_reserved);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#494: FILE: fs/ext4/writeback.c:263:
+	 * now, but I'd prefer to make this once per several blocks */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#496: FILE: fs/ext4/writeback.c:265:
+	wb_debug("drop reservation from page %lu from inode %lu\n",
+			page->index, page->mapping->host->i_ino);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#497: FILE: fs/ext4/writeback.c:266:
+	BUG_ON(!PageBooked(page));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#503: FILE: fs/ext4/writeback.c:272:
+static int ext4_wb_submit_extent(struct ext4_wb_control *wc, handle_t *handle,
+					struct ext4_extent *ex, int new)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#518: FILE: fs/ext4/writeback.c:287:
+	BUG_ON(PAGE_CACHE_SHIFT < blkbits);

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#518: FILE: fs/ext4/writeback.c:287:
+	BUG_ON(PAGE_CACHE_SHIFT < blkbits);

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#519: FILE: fs/ext4/writeback.c:288:
+	BUG_ON(list_empty(&wc->list));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#522: FILE: fs/ext4/writeback.c:291:
+	wb_debug("cook and submit bios for %u/%u/%u for %lu/%u\n",
+		ex->ee_block, ex->ee_len, ex->ee_start, wc->start, wc->len);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page"
#530: FILE: fs/ext4/writeback.c:299:
+		if (page == NULL)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#537: FILE: fs/ext4/writeback.c:306:
+			 * to be written in the middle of it */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#538: FILE: fs/ext4/writeback.c:307:
+			BUG_ON(pstart - blk >= remain);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#542: FILE: fs/ext4/writeback.c:311:
+		BUG_ON(blk < pstart || blk >= pstart + plen);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#544: FILE: fs/ext4/writeback.c:313:
+		BUG_ON(!PageUptodate(page));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#545: FILE: fs/ext4/writeback.c:314:
+^I^I/* page can get here via mmap(2) $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#546: FILE: fs/ext4/writeback.c:315:
+		 * BUG_ON(!PagePrivate(page));*/

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#547: FILE: fs/ext4/writeback.c:316:
+		BUG_ON(new && PageMappedToDisk(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#548: FILE: fs/ext4/writeback.c:317:
+		BUG_ON(!new && !PageMappedToDisk(page));

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#554: FILE: fs/ext4/writeback.c:323:
+			 * via mmap. should we reserve it in ->mmap() ? */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bio"
#561: FILE: fs/ext4/writeback.c:330:
+		if (bio == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bio"
#567: FILE: fs/ext4/writeback.c:336:
+			if (bio == NULL)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#583: FILE: fs/ext4/writeback.c:352:
+			 * the tail. so, we leave page */

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#584: FILE: fs/ext4/writeback.c:353:
+			printk("blk %lu pstart %lu plen %lu remain %lu prev %lu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#585: FILE: fs/ext4/writeback.c:354:
+			printk("blk %lu pstart %lu plen %lu remain %lu prev %lu\n",
+				blk, pstart, plen, remain, prev);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#587: FILE: fs/ext4/writeback.c:356:
+			BUG_ON(remain != 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#592: FILE: fs/ext4/writeback.c:361:
+	BUG_ON(new && remain != 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#598: FILE: fs/ext4/writeback.c:367:
+ext4_wb_find_goal(struct inode *inode, struct ext4_ext_path *path,
+			ext4_fsblk_t block)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#604: FILE: fs/ext4/writeback.c:373:
+^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#607: FILE: fs/ext4/writeback.c:376:
+		struct ext4_extent *ex;
+		depth = path->p_depth;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#608: FILE: fs/ext4/writeback.c:377:
+^I^I$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#610: FILE: fs/ext4/writeback.c:379:
+		if ((ex = path[depth].p_ext))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#614: FILE: fs/ext4/writeback.c:383:
+		 * try to find starting from index itself */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#628: FILE: fs/ext4/writeback.c:397:
+static int ext4_wb_handle_extent(struct inode *inode,
+					struct ext4_ext_path *path,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#642: FILE: fs/ext4/writeback.c:411:
+^I^I/* $

WARNING:TYPO_SPELLING: 'correspondend' may be misspelled - perhaps 'correspondent'?
#644: FILE: fs/ext4/writeback.c:413:
+		 * we have to do is to flush correspondend pages.
 		                             ^^^^^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#647: FILE: fs/ext4/writeback.c:416:
+		wb_debug("extent %u/%u/%u exist\n",
+				(unsigned) ec->ec_block,

CHECK:SPACING: No space is necessary after a cast
#647: FILE: fs/ext4/writeback.c:416:
+				(unsigned) ec->ec_block,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#647: FILE: fs/ext4/writeback.c:416:
+				(unsigned) ec->ec_block,

CHECK:SPACING: No space is necessary after a cast
#648: FILE: fs/ext4/writeback.c:417:
+				(unsigned) ec->ec_len,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#648: FILE: fs/ext4/writeback.c:417:
+				(unsigned) ec->ec_len,

CHECK:SPACING: No space is necessary after a cast
#649: FILE: fs/ext4/writeback.c:418:
+				(unsigned) ec->ec_start);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#649: FILE: fs/ext4/writeback.c:418:
+				(unsigned) ec->ec_start);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#656: FILE: fs/ext4/writeback.c:425:
+		 * already allocated block */

CHECK:SPACING: No space is necessary after a cast
#657: FILE: fs/ext4/writeback.c:426:
+		new_i_size = (loff_t) nex.ee_block + nex.ee_len;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#671: FILE: fs/ext4/writeback.c:440:
+	 * yet. so, it's time to allocate space */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#685: FILE: fs/ext4/writeback.c:454:
+	 * plus this should improve overall performance */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#701: FILE: fs/ext4/writeback.c:470:
+	if (ec->ec_block + count == new_i_size &&
+			!atomic_read(&inode->i_writecount)) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#706: FILE: fs/ext4/writeback.c:475:
+	 * we are going to allocated are already reserved */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#714: FILE: fs/ext4/writeback.c:483:
+	BUG_ON(count > ec->ec_len);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#715: FILE: fs/ext4/writeback.c:484:
+	BUG_ON(count == 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#717: FILE: fs/ext4/writeback.c:486:
+	wb_debug("allocated %llu/%lu for %lu (asked %u)\n",
+			pblock, count, inode->i_ino, ec->ec_len);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#730: FILE: fs/ext4/writeback.c:499:
+^I * we are asking ext4_ext_walk_space() to continue $

WARNING:TYPO_SPELLING: 'scaning' may be misspelled - perhaps 'scanning'?
#731: FILE: fs/ext4/writeback.c:500:
+	 * scaning after that block
 	   ^^^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#734: FILE: fs/ext4/writeback.c:503:
+	BUG_ON(nex.ee_len == 0);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#741: FILE: fs/ext4/writeback.c:510:
+^I^I(unsigned long) nex.ee_block, (unsigned long) nex.ee_len, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#741: FILE: fs/ext4/writeback.c:510:
+	wb_debug("inserted %lu/%lu/%lu for %lu (asked %u)\n",
+		(unsigned long) nex.ee_block, (unsigned long) nex.ee_len, 

CHECK:SPACING: No space is necessary after a cast
#741: FILE: fs/ext4/writeback.c:510:
+		(unsigned long) nex.ee_block, (unsigned long) nex.ee_len, 

CHECK:SPACING: No space is necessary after a cast
#742: FILE: fs/ext4/writeback.c:511:
+		(unsigned long) nex.ee_start, inode->i_ino, ec->ec_len);

WARNING:TYPO_SPELLING: 'correspondend' may be misspelled - perhaps 'correspondent'?
#750: FILE: fs/ext4/writeback.c:519:
+	 * in correspondend buffer_heads to prevent corruptions */
 	      ^^^^^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#750: FILE: fs/ext4/writeback.c:519:
+	 * in correspondend buffer_heads to prevent corruptions */

CHECK:SPACING: No space is necessary after a cast
#756: FILE: fs/ext4/writeback.c:525:
+		new_i_size = (loff_t) nex.ee_block + nex.ee_len;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#772: FILE: fs/ext4/writeback.c:541:
+	 * each page. we may do this for each new extent */

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#779: FILE: fs/ext4/writeback.c:548:
+		printk("EXT4-fs: writeback error = %d\n", err);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#794: FILE: fs/ext4/writeback.c:563:
+	wb_debug("start flushing %lu/%u from inode %lu\n",
+			wc->start, wc->len, inode->i_ino);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#802: FILE: fs/ext4/writeback.c:571:
+	err = ext4_ext_walk_space(inode, wc->start, wc->len,
+					ext4_wb_handle_extent, wc);

WARNING:LINE_SPACING: Missing a blank line after declarations
#807: FILE: fs/ext4/writeback.c:576:
+		struct ext4_wb_pages *wp;
+		wp = list_entry(cur, struct ext4_wb_pages, list);

WARNING:LINE_SPACING: Missing a blank line after declarations
#811: FILE: fs/ext4/writeback.c:580:
+				struct page *page = wp->pages[wp->start];
+				BUG_ON(!PageWriteback(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#811: FILE: fs/ext4/writeback.c:580:
+				BUG_ON(!PageWriteback(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#817: FILE: fs/ext4/writeback.c:586:
+			BUG_ON(num != 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#818: FILE: fs/ext4/writeback.c:587:
+			BUG_ON(wp->start != wp->num - 1 &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#819: FILE: fs/ext4/writeback.c:588:
+			BUG_ON(wp->start != wp->num - 1 &&
+					wp->start != wp->num);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#828: FILE: fs/ext4/writeback.c:597:
+^I$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#834: FILE: fs/ext4/writeback.c:603:
+	struct ext4_wb_pages * wp = wc->pages;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!wp"
#836: FILE: fs/ext4/writeback.c:605:
+	if (wp == NULL || wp->num == WB_PAGES_PER_ARRAY) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*wp)...) over kmalloc(sizeof(struct ext4_wb_pages)...)
#837: FILE: fs/ext4/writeback.c:606:
+		wp = kmalloc(sizeof(struct ext4_wb_pages), GFP_NOFS);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!wp"
#838: FILE: fs/ext4/writeback.c:607:
+		if (wp == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#839: FILE: fs/ext4/writeback.c:608:
+			printk("no mem for ext4_wb_pages!\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#839: FILE: fs/ext4/writeback.c:608:
+		if (wp == NULL) {
+			printk("no mem for ext4_wb_pages!\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#868: FILE: fs/ext4/writeback.c:637:
+	if (wc->start + wc->len == next &&
+			wc->len <= WB_MAX_PAGES_PER_EXTENT)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#874: FILE: fs/ext4/writeback.c:643:
+int ext4_wb_writepages(struct address_space *mapping,
+				struct writeback_control *wbc)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#885: FILE: fs/ext4/writeback.c:654:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#887: FILE: fs/ext4/writeback.c:656:
+	wb_debug("->writepages on inode %lu (%u reserved)\n",
+		inode->i_ino, EXT4_I(inode)->i_blocks_reserved);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#901: FILE: fs/ext4/writeback.c:670:
+	 * XXX: what do we do if most of files hit the condition? */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#903: FILE: fs/ext4/writeback.c:672:
+	if (wbc->sync_mode == WB_SYNC_NONE &&
+			atomic_read(&inode->i_writecount) &&

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#904: FILE: fs/ext4/writeback.c:673:
+			i_size_read(inode) <= 64*1024) {
 			                        ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#912: FILE: fs/ext4/writeback.c:681:
+	while (!done && (nr_pages = pagevec_lookup_tag(&pvec, mapping, &index,
+					PAGECACHE_TAG_DIRTY, PAGEVEC_SIZE))) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#915: FILE: fs/ext4/writeback.c:684:
+^I^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#931: FILE: fs/ext4/writeback.c:700:
+			if (wc.len && ext4_wb_can_merge(&wc, page->index) &&
+					wbc->nr_to_write <= 0) {

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#941: FILE: fs/ext4/writeback.c:710:
+
+			}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#959: FILE: fs/ext4/writeback.c:728:
+#if 0

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#961: FILE: fs/ext4/writeback.c:730:
+					printk("#%u: wow! short extent %d for flush on #%lu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#962: FILE: fs/ext4/writeback.c:731:
+					printk("#%u: wow! short extent %d for flush on #%lu\n",
+						(unsigned) current->pid, wc.len, inode->i_ino);

CHECK:SPACING: No space is necessary after a cast
#962: FILE: fs/ext4/writeback.c:731:
+						(unsigned) current->pid, wc.len, inode->i_ino);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#962: FILE: fs/ext4/writeback.c:731:
+						(unsigned) current->pid, wc.len, inode->i_ino);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#963: FILE: fs/ext4/writeback.c:732:
+					printk("#%u: done = %d, nr_to_write %ld, sync = %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#964: FILE: fs/ext4/writeback.c:733:
+					printk("#%u: done = %d, nr_to_write %ld, sync = %d\n",
+						(unsigned) current->pid, done, wbc->nr_to_write,

CHECK:SPACING: No space is necessary after a cast
#964: FILE: fs/ext4/writeback.c:733:
+						(unsigned) current->pid, done, wbc->nr_to_write,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#964: FILE: fs/ext4/writeback.c:733:
+						(unsigned) current->pid, done, wbc->nr_to_write,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#966: FILE: fs/ext4/writeback.c:735:
+					printk("#%u: written %d, extents %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#967: FILE: fs/ext4/writeback.c:736:
+					printk("#%u: written %d, extents %d\n",
+						(unsigned) current->pid, written, extents);

CHECK:SPACING: No space is necessary after a cast
#967: FILE: fs/ext4/writeback.c:736:
+						(unsigned) current->pid, written, extents);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#967: FILE: fs/ext4/writeback.c:736:
+						(unsigned) current->pid, written, extents);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#968: FILE: fs/ext4/writeback.c:737:
+					printk("#%u: cur %lu, prev %lu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#969: FILE: fs/ext4/writeback.c:738:
+					printk("#%u: cur %lu, prev %lu\n",
+						(unsigned) current->pid,

CHECK:SPACING: No space is necessary after a cast
#969: FILE: fs/ext4/writeback.c:738:
+						(unsigned) current->pid,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#969: FILE: fs/ext4/writeback.c:738:
+						(unsigned) current->pid,

CHECK:SPACING: No space is necessary after a cast
#970: FILE: fs/ext4/writeback.c:739:
+						(unsigned long) page->index,

CHECK:SPACING: No space is necessary after a cast
#971: FILE: fs/ext4/writeback.c:740:
+						(unsigned long) pindex);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#982: FILE: fs/ext4/writeback.c:751:
+				BUG_ON(!PageWriteback(page));

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#998: FILE: fs/ext4/writeback.c:767:
+#if 0

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'wbc->nr_to_write'
#999: FILE: fs/ext4/writeback.c:768:
+			if ((--(wbc->nr_to_write) <= 0))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:LINE_SPACING: Missing a blank line after declarations
#1016: FILE: fs/ext4/writeback.c:785:
+			struct list_head *cur, *tmp;
+			list_for_each_safe(cur, tmp, &wc.list) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1018: FILE: fs/ext4/writeback.c:787:
+				struct ext4_wb_pages *wp;
+				wp = list_entry(cur, struct ext4_wb_pages, list);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1021: FILE: fs/ext4/writeback.c:790:
+					struct page *page = wp->pages[i];
+					BUG_ON(!PageWriteback(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1021: FILE: fs/ext4/writeback.c:790:
+					BUG_ON(!PageWriteback(page));

CHECK:BRACES: Unbalanced braces around else statement
#1029: FILE: fs/ext4/writeback.c:798:
+		} else

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1049: FILE: fs/ext4/writeback.c:818:
+		if (PAGE_CACHE_SIZE > to)

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1051: FILE: fs/ext4/writeback.c:820:
+		if (0 < from)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1059: FILE: fs/ext4/writeback.c:828:
+int ext4_wb_prepare_write(struct file *file, struct page *page,
+			      unsigned from, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1059: FILE: fs/ext4/writeback.c:828:
+			      unsigned from, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1059: FILE: fs/ext4/writeback.c:828:
+			      unsigned from, unsigned to)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1066: FILE: fs/ext4/writeback.c:835:
+	wb_debug("prepare page %lu (%u-%u) for inode %lu\n",
+			page->index, from, to, page->mapping->host->i_ino);

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1068: FILE: fs/ext4/writeback.c:837:
+	/* if page is uptodate this means that ->prepare_write() has
 	              ^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1075: FILE: fs/ext4/writeback.c:844:
+	 * when we're sure page is to be written */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1089: FILE: fs/ext4/writeback.c:858:
+^I^I} else { $

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1091: FILE: fs/ext4/writeback.c:860:
+			BUG_ON(PagePrivate(page));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1094: FILE: fs/ext4/writeback.c:863:
+				wb_debug("read block %u\n",
+						(unsigned) bhw->b_blocknr);

CHECK:SPACING: No space is necessary after a cast
#1094: FILE: fs/ext4/writeback.c:863:
+						(unsigned) bhw->b_blocknr);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1094: FILE: fs/ext4/writeback.c:863:
+						(unsigned) bhw->b_blocknr);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1107: FILE: fs/ext4/writeback.c:876:
+^I^I/* this page was a hole at time of mmap() calling $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1108: FILE: fs/ext4/writeback.c:877:
+		 * now someone wants to modify it by sys_write() */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1117: FILE: fs/ext4/writeback.c:886:
+int ext4_wb_commit_write(struct file *file, struct page *page,
+			     unsigned from, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1117: FILE: fs/ext4/writeback.c:886:
+			     unsigned from, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1117: FILE: fs/ext4/writeback.c:886:
+			     unsigned from, unsigned to)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1124: FILE: fs/ext4/writeback.c:893:
+	wb_debug("commit page %lu (%u-%u) for inode %lu\n",
+			page->index, from, to, inode->i_ino);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1127: FILE: fs/ext4/writeback.c:896:
+	 * called to invalidate/release page */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1133: FILE: fs/ext4/writeback.c:902:
+		 * asked to reserve block for later allocation */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1134: FILE: fs/ext4/writeback.c:903:
+		BUG_ON(page->private == 0);

WARNING:TYPO_SPELLING: 'succesfully' may be misspelled - perhaps 'successfully'?
#1142: FILE: fs/ext4/writeback.c:911:
+	 * been reserved succesfully. so, user may use it */
 	                 ^^^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1142: FILE: fs/ext4/writeback.c:911:
+	 * been reserved succesfully. so, user may use it */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1148: FILE: fs/ext4/writeback.c:917:
+	 * be corrected upon allocation */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1158: FILE: fs/ext4/writeback.c:927:
+int ext4_wb_write_single_page(struct page *page,
+					struct writeback_control *wbc)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1174: FILE: fs/ext4/writeback.c:943:
+	BUG_ON(PageWriteback(page));

WARNING:TYPO_SPELLING: 'cant' may be misspelled - perhaps 'can't'?
#1183: FILE: fs/ext4/writeback.c:952:
+		printk(KERN_ERR "EXT4-fs: cant add page at %s:%d - %d\n",
 		                          ^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1183: FILE: fs/ext4/writeback.c:952:
+		printk(KERN_ERR "EXT4-fs: cant add page at %s:%d - %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1184: FILE: fs/ext4/writeback.c:953:
+		printk(KERN_ERR "EXT4-fs: cant add page at %s:%d - %d\n",
+				__FILE__, __LINE__, err);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1199: FILE: fs/ext4/writeback.c:968:
+	unsigned offset;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1204: FILE: fs/ext4/writeback.c:973:
+^I/* $

WARNING:IF_1: Consider removing the #if 1 and its #endif
#1209: FILE: fs/ext4/writeback.c:978:
+#if 1

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1211: FILE: fs/ext4/writeback.c:980:
+	if (atomic_read(&EXT4_I(page->mapping->host)->i_wb_writers)
+			&& !PageMappedToDisk(page)) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1219: FILE: fs/ext4/writeback.c:988:
+	 * it might be for a different filesystem  */

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1231: FILE: fs/ext4/writeback.c:1000:
+	offset = i_size & (PAGE_CACHE_SIZE-1);
 	                                  ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1260: FILE: fs/ext4/writeback.c:1029:
+	wb_debug("release %sM%sR page %lu from inode %lu (wait %d)\n",
+			PageMappedToDisk(page) ? "" : "!",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1261: FILE: fs/ext4/writeback.c:1030:
+^I^I^IPageBooked(page) ? "" : "!", $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1278: FILE: fs/ext4/writeback.c:1047:
+^I * for our page being Private mean that space has been $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1280: FILE: fs/ext4/writeback.c:1049:
+	 * it's time to drop reservation */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1282: FILE: fs/ext4/writeback.c:1051:
+	wb_debug("invalidate %sM%sR page %lu from inode %lu (offset %lu)\n",
+			PageMappedToDisk(page) ? "" : "!",

WARNING:RETURN_VOID: void function return statements are not generally useful
#1295: FILE: fs/ext4/writeback.c:1064:
+	return;
+}

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1300: FILE: fs/ext4/writeback.c:1069:
+	unsigned offset = from & (PAGE_CACHE_SIZE-1);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1300: FILE: fs/ext4/writeback.c:1069:
+	unsigned offset = from & (PAGE_CACHE_SIZE-1);
 	                                         ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1303: FILE: fs/ext4/writeback.c:1072:
+	unsigned blocksize, length;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1308: FILE: fs/ext4/writeback.c:1077:
+	wb_debug("partial truncate from %lu on page %lu from inode %lu\n",
+			(unsigned long) from, page->index, inode->i_ino);

CHECK:SPACING: No space is necessary after a cast
#1308: FILE: fs/ext4/writeback.c:1077:
+			(unsigned long) from, page->index, inode->i_ino);

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1313: FILE: fs/ext4/writeback.c:1082:
+	/* if page isn't uptodate we have to check has it assigned block
 	                 ^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1314: FILE: fs/ext4/writeback.c:1083:
+	 * if it has then that block is to be read before memset() */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1316: FILE: fs/ext4/writeback.c:1085:
+		BUG_ON(PageMappedToDisk(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1321: FILE: fs/ext4/writeback.c:1090:
+		BUG_ON(buffer_new(bhw));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1325: FILE: fs/ext4/writeback.c:1094:
+			wb_debug("read block %u for part.trunc on %lu\n",
+					(unsigned) bhw->b_blocknr, page->index);

CHECK:SPACING: No space is necessary after a cast
#1325: FILE: fs/ext4/writeback.c:1094:
+					(unsigned) bhw->b_blocknr, page->index);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1325: FILE: fs/ext4/writeback.c:1094:
+					(unsigned) bhw->b_blocknr, page->index);

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1361: FILE: fs/ext4/writeback.c:1130:
+	if (PAGE_CACHE_SHIFT != sb->s_blocksize_bits) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1362: FILE: fs/ext4/writeback.c:1131:
+		printk(KERN_ERR "EXT4-fs: delayed allocation isn't"

WARNING:SPLIT_STRING: quoted string split across lines
#1363: FILE: fs/ext4/writeback.c:1132:
+		printk(KERN_ERR "EXT4-fs: delayed allocation isn't"
+			"supported for PAGE_CACHE_SIZE != blocksize yet\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:MISSING_SPACE: break quoted strings at a space character
#1363: FILE: fs/ext4/writeback.c:1132:
+		printk(KERN_ERR "EXT4-fs: delayed allocation isn't"
+			"supported for PAGE_CACHE_SIZE != blocksize yet\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1364: FILE: fs/ext4/writeback.c:1133:
+		clear_opt (EXT4_SB(sb)->s_mount_opt, DELAYED_ALLOC);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1367: FILE: fs/ext4/writeback.c:1136:
+	printk("EXT4-fs: delayed allocation enabled\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1381: FILE: fs/ext4/writeback.c:1150:
+	printk("EXT4-fs: writeback: %d blocks %d extents in %d reqs (%d ave)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1382: FILE: fs/ext4/writeback.c:1151:
+	printk("EXT4-fs: writeback: %d blocks %d extents in %d reqs (%d ave)\n",
+		atomic_read(&sbi->s_wb_blocks),

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1386: FILE: fs/ext4/writeback.c:1155:
+	printk("EXT4-fs: writeback: %d nr_to_write, %d congestions, %d singles\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1387: FILE: fs/ext4/writeback.c:1156:
+	printk("EXT4-fs: writeback: %d nr_to_write, %d congestions, %d singles\n",
+		atomic_read(&sbi->s_wb_nr_to_write),

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1390: FILE: fs/ext4/writeback.c:1159:
+	printk("EXT4-fs: writeback: %d collisions, %d single-page collisions\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1391: FILE: fs/ext4/writeback.c:1160:
+	printk("EXT4-fs: writeback: %d collisions, %d single-page collisions\n",
+		atomic_read(&sbi->s_wb_collisions),

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1393: FILE: fs/ext4/writeback.c:1162:
+	printk("EXT4-fs: writeback: %d allocated, %d dropped\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1394: FILE: fs/ext4/writeback.c:1163:
+	printk("EXT4-fs: writeback: %d allocated, %d dropped\n",
+		atomic_read(&sbi->s_wb_allocated),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1424: FILE: fs/ext4/inode.c:947:
+int ext4_get_block(struct inode *inode, sector_t iblock,
 			struct buffer_head *bh_result, int create)

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#1436: FILE: fs/ext4/inode.c:1815:
+static struct address_space_operations ext4_writeback_da_aops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1454: FILE: fs/ext4/inode.c:1832:
+^Iif (S_ISREG(inode->i_mode) && $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1455: FILE: fs/ext4/inode.c:1833:
+	if (S_ISREG(inode->i_mode) && 
+			(EXT4_I(inode)->i_flags & EXT4_EXTENTS_FL) &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1468: FILE: fs/ext4/inode.c:1863:
+	if ((EXT4_I(inode)->i_flags & EXT4_EXTENTS_FL) &&
+			test_opt(inode->i_sb, EXTENTS) &&

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.06799.commit.b7e25e7398012176835e6dcc6b8df73b165d0d04 total: 31 errors, 149 warnings, 93 checks, 1386 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.06799.commit.b7e25e7398012176835e6dcc6b8df73b165d0d04 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
