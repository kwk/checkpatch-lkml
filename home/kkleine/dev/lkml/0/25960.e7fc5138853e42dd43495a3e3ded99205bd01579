ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#73: FILE: include/linux/moduleparam.h:78:
+#define module_param_named_call(name, value, type, set, perm)		\
+	param_check_##type(name, &(value));				\
+	module_param_call(name, set, param_get_##type, &(value), perm); \
 	__MODULE_PARM_TYPE(name, #type)

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#73: FILE: include/linux/moduleparam.h:78:
+#define module_param_named_call(name, value, type, set, perm)		\
+	param_check_##type(name, &(value));				\
+	module_param_call(name, set, param_get_##type, &(value), perm); \
 	__MODULE_PARM_TYPE(name, #type)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'value' - possible side-effects?
#73: FILE: include/linux/moduleparam.h:78:
+#define module_param_named_call(name, value, type, set, perm)		\
+	param_check_##type(name, &(value));				\
+	module_param_call(name, set, param_get_##type, &(value), perm); \
 	__MODULE_PARM_TYPE(name, #type)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#81: FILE: include/linux/moduleparam.h:86:
+#define module_param_set_call(name, type, setfn, perm) \
+	module_param_named_call(name, name, type, setfn, perm)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#92: FILE: include/linux/numtasks.h:1:
+/* numtasks.h - No. of tasks resource controller for Resource Groups

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#112: FILE: include/linux/numtasks.h:21:
+extern int numtasks_allow_fork(struct task_struct *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#125: FILE: include/linux/res_group.h:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#153: FILE: include/linux/res_group.h:29:
+#define SHARE_UNCHANGED	(-1)	/* implicitly specified by userspace,
+					 * never stored in a resource group'

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#154: FILE: include/linux/res_group.h:30:
+					 * shares struct; never displayed */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#160: FILE: include/linux/res_group.h:36:
+					 * structure */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#163: FILE: include/linux/res_group.h:39:
+#define SHARE_DEFAULT_DIVISOR ^I(100)$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#180: FILE: include/linux/res_group.h:56:
+ * resource group need to be locked.
+*/

WARNING:TYPO_SPELLING: 'minimun' may be misspelled - perhaps 'minimum'?
#183: FILE: include/linux/res_group.h:59:
+	int min_shares; /* minimun fraction of parent's resources allowed */
 	                   ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#193: FILE: include/linux/res_group.h:69:
+^I^I * ^I^I^ISum of min_shares of children)$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#212: FILE: include/linux/res_group_rc.h:1:
+/*

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct container *' should also have an identifier name
#265: FILE: include/linux/res_group_rc.h:54:
+	struct res_shares *(*alloc_shares_struct)(struct container *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct res_shares *' should also have an identifier name
#267: FILE: include/linux/res_group_rc.h:56:
+	void (*free_shares_struct)(struct res_shares *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct res_shares *' should also have an identifier name
#270: FILE: include/linux/res_group_rc.h:59:
+	void (*shares_changed)(struct res_shares *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct res_shares *' should also have an identifier name
#273: FILE: include/linux/res_group_rc.h:62:
+	ssize_t (*show_stats)(struct res_shares *, char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#273: FILE: include/linux/res_group_rc.h:62:
+	ssize_t (*show_stats)(struct res_shares *, char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#273: FILE: include/linux/res_group_rc.h:62:
+	ssize_t (*show_stats)(struct res_shares *, char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct res_shares *' should also have an identifier name
#274: FILE: include/linux/res_group_rc.h:63:
+	int (*reset_stats)(struct res_shares *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#274: FILE: include/linux/res_group_rc.h:63:
+	int (*reset_stats)(struct res_shares *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#283: FILE: include/linux/res_group_rc.h:72:
+	void (*move_task)(struct task_struct *, struct res_shares *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct res_shares *' should also have an identifier name
#283: FILE: include/linux/res_group_rc.h:72:
+	void (*move_task)(struct task_struct *, struct res_shares *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct res_shares *' should also have an identifier name
#283: FILE: include/linux/res_group_rc.h:72:
+	void (*move_task)(struct task_struct *, struct res_shares *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#284: FILE: include/linux/res_group_rc.h:73:
+	void (*move_task)(struct task_struct *, struct res_shares *,
+				struct res_shares *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#287: FILE: include/linux/res_group_rc.h:76:
+extern int register_controller(struct res_controller *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct res_controller *' should also have an identifier name
#287: FILE: include/linux/res_group_rc.h:76:
+extern int register_controller(struct res_controller *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#288: FILE: include/linux/res_group_rc.h:77:
+extern int unregister_controller(struct res_controller *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct res_controller *' should also have an identifier name
#288: FILE: include/linux/res_group_rc.h:77:
+extern int unregister_controller(struct res_controller *);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rgroup->parent"
#292: FILE: include/linux/res_group_rc.h:81:
+	return (rgroup->parent == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'parent' may be better as '(parent)' to avoid precedence issues
#295: FILE: include/linux/res_group_rc.h:84:
+#define for_each_child(child, parent)	\
+	list_for_each_entry(child, &parent->children, sibling)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#299: FILE: include/linux/res_group_rc.h:88:
+static inline struct res_shares *get_controller_shares(

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#319: FILE: init/Kconfig:308:
+config RES_GROUPS
+	bool "Resource Groups"
+	depends on EXPERIMENTAL
+	select CONTAINERS
+	help
+	  Resource Groups is a framework for controlling and monitoring
+	  resource allocation of user-defined groups of tasks. For more
+	  information, please visit http://ckrm.sf.net.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#328: FILE: init/Kconfig:317:
+config RES_GROUPS_NUMTASKS
+	bool "Number of Tasks Resource Controller"
+	depends on RES_GROUPS
+	default y
+	help
+	  Provides a Resource Controller for Resource Groups that allows
+	  limiting number of tasks a resource group can have.
+
+	  Say N if unsure, Y to use the feature.
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#398: FILE: kernel/res_group/local.h:1:
+/*

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#405: FILE: kernel/res_group/local.h:8:
+extern struct res_controller *get_controller_by_name(const char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#406: FILE: kernel/res_group/local.h:9:
+extern struct res_controller *get_controller_by_id(unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#406: FILE: kernel/res_group/local.h:9:
+extern struct res_controller *get_controller_by_id(unsigned int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#407: FILE: kernel/res_group/local.h:10:
+extern void put_controller(struct res_controller *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct res_controller *' should also have an identifier name
#407: FILE: kernel/res_group/local.h:10:
+extern void put_controller(struct res_controller *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#408: FILE: kernel/res_group/local.h:11:
+extern struct resource_group *alloc_res_group(struct resource_group *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct resource_group *' should also have an identifier name
#408: FILE: kernel/res_group/local.h:11:
+extern struct resource_group *alloc_res_group(struct resource_group *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#408: FILE: kernel/res_group/local.h:11:
+extern struct resource_group *alloc_res_group(struct resource_group *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#409: FILE: kernel/res_group/local.h:12:
+extern struct resource_group *alloc_res_group(struct resource_group *,
+							const char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#410: FILE: kernel/res_group/local.h:13:
+extern int free_res_group(struct resource_group *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct resource_group *' should also have an identifier name
#410: FILE: kernel/res_group/local.h:13:
+extern int free_res_group(struct resource_group *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#411: FILE: kernel/res_group/local.h:14:
+extern void release_res_group(struct kref *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kref *' should also have an identifier name
#411: FILE: kernel/res_group/local.h:14:
+extern void release_res_group(struct kref *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#412: FILE: kernel/res_group/local.h:15:
+extern int set_controller_shares(struct resource_group *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct resource_group *' should also have an identifier name
#412: FILE: kernel/res_group/local.h:15:
+extern int set_controller_shares(struct resource_group *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct res_controller *' should also have an identifier name
#412: FILE: kernel/res_group/local.h:15:
+extern int set_controller_shares(struct resource_group *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct res_shares *' should also have an identifier name
#412: FILE: kernel/res_group/local.h:15:
+extern int set_controller_shares(struct resource_group *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#413: FILE: kernel/res_group/local.h:16:
+extern int set_controller_shares(struct resource_group *,
+			struct res_controller *, const struct res_shares *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#415: FILE: kernel/res_group/local.h:18:
+extern void set_shares_to_default(struct resource_group *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct resource_group *' should also have an identifier name
#415: FILE: kernel/res_group/local.h:18:
+extern void set_shares_to_default(struct resource_group *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct res_controller *' should also have an identifier name
#415: FILE: kernel/res_group/local.h:18:
+extern void set_shares_to_default(struct resource_group *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#416: FILE: kernel/res_group/local.h:19:
+extern void set_shares_to_default(struct resource_group *,
+						struct res_controller *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#417: FILE: kernel/res_group/local.h:20:
+extern void res_group_teardown(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#418: FILE: kernel/res_group/local.h:21:
+extern int set_res_group(pid_t, struct resource_group *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'pid_t' should also have an identifier name
#418: FILE: kernel/res_group/local.h:21:
+extern int set_res_group(pid_t, struct resource_group *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct resource_group *' should also have an identifier name
#418: FILE: kernel/res_group/local.h:21:
+extern int set_res_group(pid_t, struct resource_group *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#419: FILE: kernel/res_group/local.h:22:
+extern void move_tasks_to_parent(struct resource_group *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct resource_group *' should also have an identifier name
#419: FILE: kernel/res_group/local.h:22:
+extern void move_tasks_to_parent(struct resource_group *);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#441: FILE: kernel/res_group/numtasks.c:1:
+/* numtasks.c - "Number of tasks" resource controller for Resource Groups

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#469: FILE: kernel/res_group/numtasks.c:29:
+static int total_cnt_alloc = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#483: FILE: kernel/res_group/numtasks.c:43:
+				 * by resource group's group_lock */

ERROR:CODE_INDENT: code indent should use tabs where possible
#520: FILE: kernel/res_group/numtasks.c:80:
+ ^I^Ires->forkrate_failures++;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#520: FILE: kernel/res_group/numtasks.c:80:
+ ^I^Ires->forkrate_failures++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#520: FILE: kernel/res_group/numtasks.c:80:
+ ^I^Ires->forkrate_failures++;$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'numtasks_ctlr.ctlr_id == NO_RES_ID'
#538: FILE: kernel/res_group/numtasks.c:98:
+	if ((numtasks_ctlr.ctlr_id == NO_RES_ID) || (rgroup == NULL))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rgroup == NULL'
#538: FILE: kernel/res_group/numtasks.c:98:
+	if ((numtasks_ctlr.ctlr_id == NO_RES_ID) || (rgroup == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rgroup"
#538: FILE: kernel/res_group/numtasks.c:98:
+	if ((numtasks_ctlr.ctlr_id == NO_RES_ID) || (rgroup == NULL))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'res->cnt_unused == SHARE_DONT_CARE'
#575: FILE: kernel/res_group/numtasks.c:135:
+	if ((res->cnt_unused == SHARE_DONT_CARE) ||
+			(atomic_read(&res->cnt_cur_alloc) > res->cnt_unused)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#576: FILE: kernel/res_group/numtasks.c:136:
+	if ((res->cnt_unused == SHARE_DONT_CARE) ||
+			(atomic_read(&res->cnt_cur_alloc) > res->cnt_unused)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#581: FILE: kernel/res_group/numtasks.c:141:
+  ^I^Ires->successes++;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#581: FILE: kernel/res_group/numtasks.c:141:
+  ^I^Ires->successes++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#581: FILE: kernel/res_group/numtasks.c:141:
+  ^I^Ires->successes++;$

CHECK:BRACES: braces {} should be used on all arms of this statement
#590: FILE: kernel/res_group/numtasks.c:150:
+	if (atomic_read(&res->cnt_borrowed) > 0) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#593: FILE: kernel/res_group/numtasks.c:153:
+	} else

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#596: FILE: kernel/res_group/numtasks.c:156:
+
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#599: FILE: kernel/res_group/numtasks.c:159:
+static void numtasks_move_task(struct task_struct *task,
+		struct res_shares *old, struct res_shares *new)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#631: FILE: kernel/res_group/numtasks.c:191:
+static struct res_shares *numtasks_alloc_shares_struct(

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*res)...) over kzalloc(sizeof(struct numtasks)...)
#636: FILE: kernel/res_group/numtasks.c:196:
+	res = kzalloc(sizeof(struct numtasks), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'self_shares == SHARE_DONT_CARE'
#669: FILE: kernel/res_group/numtasks.c:229:
+	if ((self_shares == SHARE_DONT_CARE) ||
+				(parent_shares == SHARE_DONT_CARE))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'parent_shares == SHARE_DONT_CARE'
#669: FILE: kernel/res_group/numtasks.c:229:
+	if ((self_shares == SHARE_DONT_CARE) ||
+				(parent_shares == SHARE_DONT_CARE))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#670: FILE: kernel/res_group/numtasks.c:230:
+	if ((self_shares == SHARE_DONT_CARE) ||
+				(parent_shares == SHARE_DONT_CARE))

CHECK:SPACING: No space is necessary after a cast
#674: FILE: kernel/res_group/numtasks.c:234:
+	numerator = (u64) self_shares * parent_shares;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#688: FILE: kernel/res_group/numtasks.c:248:
+	numerator = (u64) self_unused_min_shares * self_cnt_min_shares;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#694: FILE: kernel/res_group/numtasks.c:254:
+static void recalc_self(struct numtasks *res,
+				struct numtasks *parres)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#700: FILE: kernel/res_group/numtasks.c:260:
+	res->cnt_min_shares = recalc_shares(self->min_shares,
+						parres->cnt_min_shares,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#703: FILE: kernel/res_group/numtasks.c:263:
+	res->cnt_max_shares = recalc_shares(self->max_shares,
+						parres->cnt_max_shares,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#711: FILE: kernel/res_group/numtasks.c:271:
+	res->cnt_unused = recalc_unused_shares(res->cnt_min_shares,
+						self->unused_min_shares,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#715: FILE: kernel/res_group/numtasks.c:275:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#722: FILE: kernel/res_group/numtasks.c:282:
+static void recalc_and_propagate(struct numtasks *res,
+				struct numtasks *parres)

WARNING:TYPO_SPELLING: 'childres' may be misspelled - perhaps 'children'?
#725: FILE: kernel/res_group/numtasks.c:285:
+	struct numtasks *childres;
 	                 ^^^^^^^^

WARNING:TYPO_SPELLING: 'childres' may be misspelled - perhaps 'children'?
#732: FILE: kernel/res_group/numtasks.c:292:
+		childres = get_numtasks(child);
 		^^^^^^^^

WARNING:TYPO_SPELLING: 'childres' may be misspelled - perhaps 'children'?
#733: FILE: kernel/res_group/numtasks.c:293:
+		BUG_ON(!childres);
 		        ^^^^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#733: FILE: kernel/res_group/numtasks.c:293:
+		BUG_ON(!childres);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:TYPO_SPELLING: 'childres' may be misspelled - perhaps 'children'?
#734: FILE: kernel/res_group/numtasks.c:294:
+		recalc_and_propagate(childres, res);
 		                     ^^^^^^^^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#756: FILE: kernel/res_group/numtasks.c:316:
+		parres->cnt_unused = recalc_unused_shares(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#764: FILE: kernel/res_group/numtasks.c:324:
+static ssize_t numtasks_show_stats(struct res_shares *my_res,
+					char *buf, size_t buf_size)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#774: FILE: kernel/res_group/numtasks.c:334:
+	i = snprintf(buf, buf_size, "%s: Current usage %d\n",
+					res_ctlr_name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#778: FILE: kernel/res_group/numtasks.c:338:
+	i = snprintf(buf, buf_size, "%s: Number of successes %d\n",
+					res_ctlr_name, res->successes);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#781: FILE: kernel/res_group/numtasks.c:341:
+	i = snprintf(buf, buf_size, "%s: Number of failures %d\n",
+					res_ctlr_name, res->failures);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#784: FILE: kernel/res_group/numtasks.c:344:
+	i = snprintf(buf, buf_size, "%s: Number of forkrate failures %d\n",
+					res_ctlr_name, res->forkrate_failures);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#804: FILE: kernel/res_group/numtasks.c:364:
+static int set_numtasks_config_val(int *var, int old_value, const char *val,
+				struct kernel_param *kp)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#841: FILE: kernel/res_group/numtasks.c:401:
+module_param_set_call(total_numtasks, int, set_total_numtasks,
+			S_IRUGO | S_IWUSR);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#841: FILE: kernel/res_group/numtasks.c:401:
+			S_IRUGO | S_IWUSR);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:LINE_SPACING: Missing a blank line after declarations
#862: FILE: kernel/res_group/numtasks.c:422:
+	int rc = set_numtasks_config_val(&forkrate, prev, val, kp);
+	if (rc < 0)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#869: FILE: kernel/res_group/numtasks.c:429:
+module_param_set_call(forkrate, int, set_forkrate, S_IRUGO | S_IWUSR);

WARNING:LINE_SPACING: Missing a blank line after declarations
#875: FILE: kernel/res_group/numtasks.c:435:
+	int rc = set_numtasks_config_val(&forkrate_interval, prev, val, kp);
+	if (rc < 0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#883: FILE: kernel/res_group/numtasks.c:443:
+module_param_set_call(forkrate_interval, int, set_forkrate_interval,
+			S_IRUGO | S_IWUSR);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#883: FILE: kernel/res_group/numtasks.c:443:
+			S_IRUGO | S_IWUSR);

WARNING:LINE_SPACING: Missing a blank line after declarations
#895: FILE: kernel/res_group/numtasks.c:455:
+	int rc;
+	do {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#898: FILE: kernel/res_group/numtasks.c:458:
+	BUG_ON(rc != 0);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#907: FILE: kernel/res_group/res_group.c:1:
+/* res_group.c - Resource Groups: Resource management through grouping of

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#929: FILE: kernel/res_group/res_group.c:23:
+#include <asm/uaccess.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#933: FILE: kernel/res_group/res_group.c:27:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#939: FILE: kernel/res_group/res_group.c:33:
+	struct res_shares *shares = ctlr->alloc_shares_struct(cont);
+	cont->subsys[ss->subsys_id] = shares;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#944: FILE: kernel/res_group/res_group.c:38:
+static void res_group_destroy(struct container_subsys *ss,
+			     struct container *cont)

WARNING:LINE_SPACING: Missing a blank line after declarations
#948: FILE: kernel/res_group/res_group.c:42:
+	struct res_shares *shares = cont->subsys[ss->subsys_id];
+	ctlr->free_shares_struct(shares);

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#951: FILE: kernel/res_group/res_group.c:45:
+static int res_group_populate(struct container_subsys *ss,
+			      struct container *cont) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#955: FILE: kernel/res_group/res_group.c:49:
+	struct res_controller *ctlr = container_of(ss, struct res_controller, subsys);
+	if ((err = container_add_file(cont, &ctlr->shares_cft.cft)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#955: FILE: kernel/res_group/res_group.c:49:
+	if ((err = container_add_file(cont, &ctlr->shares_cft.cft)) < 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#957: FILE: kernel/res_group/res_group.c:51:
+	if ((err = container_add_file(cont, &ctlr->stats_cft.cft)) < 0)

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#963: FILE: kernel/res_group/res_group.c:57:
+static void res_group_attach(struct container_subsys *ss,
+			     struct container *cont,
+			     struct container *old_cont,
+			     struct task_struct *tsk) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#971: FILE: kernel/res_group/res_group.c:65:
+	if (ctlr->move_task) {
+		ctlr->move_task(tsk, oldshares, newshares);
+	}

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#976: FILE: kernel/res_group/res_group.c:70:
+static void res_group_fork(struct container_subsys *ss, struct container *cont,
+			   struct task_struct *task) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#981: FILE: kernel/res_group/res_group.c:75:
+	struct res_shares *shares = cont->subsys[ss->subsys_id];
+	if (ctlr->move_task) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#981: FILE: kernel/res_group/res_group.c:75:
+	if (ctlr->move_task) {
+		ctlr->move_task(task, NULL, shares);
+	}

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#986: FILE: kernel/res_group/res_group.c:80:
+static void res_group_exit(struct container_subsys *ss, struct container *cont,
+			   struct task_struct *task) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#991: FILE: kernel/res_group/res_group.c:85:
+	struct res_shares *shares = cont->subsys[ss->subsys_id];
+	if (ctlr->move_task) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#991: FILE: kernel/res_group/res_group.c:85:
+	if (ctlr->move_task) {
+		ctlr->move_task(task, shares, NULL);
+	}

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1060: FILE: kernel/res_group/res_group.c:154:
+	BUG();

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1064: FILE: kernel/res_group/res_group.c:158:
+
+

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1065: FILE: kernel/res_group/res_group.c:159:
+EXPORT_SYMBOL_GPL(register_controller);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1066: FILE: kernel/res_group/res_group.c:160:
+EXPORT_SYMBOL_GPL(unregister_controller);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1067: FILE: kernel/res_group/res_group.c:161:
+EXPORT_SYMBOL_GPL(set_controller_shares);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1073: FILE: kernel/res_group/rgcs.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1074: FILE: kernel/res_group/rgcs.c:2:
+ * kernel/res_group/rgcs.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#1094: FILE: kernel/res_group/rgcs.c:22:
+#include <asm/uaccess.h>

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1104: FILE: kernel/res_group/rgcs.c:32:
+static ssize_t show_stats(struct resource_group *rgroup,
+		   struct res_controller *ctlr,

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1108: FILE: kernel/res_group/rgcs.c:36:
+	size_t buf_size = PAGE_SIZE-1; /* allow only PAGE_SIZE # of bytes */
 	                           ^

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1125: FILE: kernel/res_group/rgcs.c:53:
+	{parse_res_type, RES_STRING"=%s"},

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1130: FILE: kernel/res_group/rgcs.c:58:
+static int stats_parse(const char *options,
+				char **resname, char **remaining_line)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!remaining_line"
#1149: FILE: kernel/res_group/rgcs.c:77:
+			if (*remaining_line == NULL) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1182: FILE: kernel/res_group/rgcs.c:110:
+
+

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1193: FILE: kernel/res_group/rgcs.c:121:
+	{RESOURCE_TYPE_TOKEN, RES_STRING"=%s"},

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1194: FILE: kernel/res_group/rgcs.c:122:
+	{MIN_SHARES_TOKEN, MIN_SHARES_STRING"=%d"},

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1195: FILE: kernel/res_group/rgcs.c:123:
+	{MAX_SHARES_TOKEN, MAX_SHARES_STRING"=%d"},

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1196: FILE: kernel/res_group/rgcs.c:124:
+	{CHILD_SHARES_DIVISOR_TOKEN, CHILD_SHARES_DIVISOR_STRING"=%d"},

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1201: FILE: kernel/res_group/rgcs.c:129:
+static int shares_parse(const char *options, char **resname,
+					struct res_shares *shares)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1293: FILE: kernel/res_group/rgcs.c:221:
+ssize_t res_group_file_write(struct container *cont,
+				   struct cftype *cft,

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1309: FILE: kernel/res_group/rgcs.c:237:
+	if (!buf) return -ENOMEM;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:SPACING: space required before the open parenthesis '('
#1323: FILE: kernel/res_group/rgcs.c:251:
+	switch(filetype) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1333: FILE: kernel/res_group/rgcs.c:261:
+	if (!retval) retval = nbytes;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1343: FILE: kernel/res_group/rgcs.c:271:
+ssize_t res_group_file_read(struct container *cont,
+				   struct cftype *cft,

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1355: FILE: kernel/res_group/rgcs.c:283:
+	if (!page) return -ENOMEM;

ERROR:SPACING: space required before the open parenthesis '('
#1357: FILE: kernel/res_group/rgcs.c:285:
+	switch(filetype) {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1380: FILE: kernel/res_group/shares.c:1:
+/*

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1419: FILE: kernel/res_group/shares.c:40:
+	return ((share == SHARE_DONT_CARE) ||
+			(share == SHARE_UNSUPPORTED) ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1439: FILE: kernel/res_group/shares.c:60:
+static inline void child_min_shares_changed(struct res_shares *parent,
+				   int child_cur_min_shares,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'min_shares_increase > parent->unused_min_shares'
#1486: FILE: kernel/res_group/shares.c:107:
+	if (parent &&
+	    ((is_share_quantitative(child->min_shares) &&
+	      (min_shares_increase > parent->unused_min_shares)) ||
+	     (is_share_quantitative(child->max_shares) &&
+	      (child->max_shares > parent->child_shares_divisor))))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'child->max_shares > parent->child_shares_divisor'
#1486: FILE: kernel/res_group/shares.c:107:
+	if (parent &&
+	    ((is_share_quantitative(child->min_shares) &&
+	      (min_shares_increase > parent->unused_min_shares)) ||
+	     (is_share_quantitative(child->max_shares) &&
+	      (child->max_shares > parent->child_shares_divisor))))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current_usage > child->child_shares_divisor'
#1505: FILE: kernel/res_group/shares.c:126:
+	if (!is_share_quantitative(child->child_shares_divisor) ||
+			(current_usage > child->child_shares_divisor))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1506: FILE: kernel/res_group/shares.c:127:
+	if (!is_share_quantitative(child->child_shares_divisor) ||
+			(current_usage > child->child_shares_divisor))

WARNING:TYPO_SPELLING: 'accomodate' may be misspelled - perhaps 'accommodate'?
#1511: FILE: kernel/res_group/shares.c:132:
+	 * enough to accomodate largest max_shares of any of my child
 	             ^^^^^^^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'child->min_shares > child->max_shares'
#1517: FILE: kernel/res_group/shares.c:138:
+	if (is_share_quantitative(child->min_shares) &&
+			is_share_quantitative(child->max_shares) &&
+			(child->min_shares > child->max_shares))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1518: FILE: kernel/res_group/shares.c:139:
+	if (is_share_quantitative(child->min_shares) &&
+			is_share_quantitative(child->max_shares) &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1534: FILE: kernel/res_group/shares.c:155:
+static int set_shares(const struct res_shares *new,
+		    struct res_shares *child_shares,

ERROR:CODE_INDENT: code indent should use tabs where possible
#1535: FILE: kernel/res_group/shares.c:156:
+    ^I^I    struct res_shares *parent_shares)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1535: FILE: kernel/res_group/shares.c:156:
+    ^I^I    struct res_shares *parent_shares)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1535: FILE: kernel/res_group/shares.c:156:
+    ^I^I    struct res_shares *parent_shares)$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1540: FILE: kernel/res_group/shares.c:161:
+	BUG_ON(!new || !child_shares);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1544: FILE: kernel/res_group/shares.c:165:
+	if (did_share_change(new->child_shares_divisor) &&
+			change_supported(child_shares->child_shares_divisor))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1547: FILE: kernel/res_group/shares.c:168:
+	if (did_share_change(new->min_shares) &&
+			change_supported(child_shares->min_shares))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1550: FILE: kernel/res_group/shares.c:171:
+	if (did_share_change(new->max_shares) &&
+			change_supported(child_shares->max_shares))

ERROR:CODE_INDENT: code indent should use tabs where possible
#1554: FILE: kernel/res_group/shares.c:175:
+^I    ^I^I child_shares->unused_min_shares;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1554: FILE: kernel/res_group/shares.c:175:
+^I    ^I^I child_shares->unused_min_shares;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1560: FILE: kernel/res_group/shares.c:181:
+   ^I^I^I      min_shares_increase);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1560: FILE: kernel/res_group/shares.c:181:
+   ^I^I^I      min_shares_increase);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1560: FILE: kernel/res_group/shares.c:181:
+	rc = are_shares_valid(&final_shares, parent_shares, current_usage,
+   			      min_shares_increase);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1560: FILE: kernel/res_group/shares.c:181:
+   ^I^I^I      min_shares_increase);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1598: FILE: kernel/res_group/shares.c:219:
+	child_min_shares_changed(parent_shares, prev_min,
+				      shares->min_shares);

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.25960.commit.e7fc5138853e42dd43495a3e3ded99205bd01579 total: 18 errors, 83 warnings, 85 checks, 1479 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.25960.commit.e7fc5138853e42dd43495a3e3ded99205bd01579 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
