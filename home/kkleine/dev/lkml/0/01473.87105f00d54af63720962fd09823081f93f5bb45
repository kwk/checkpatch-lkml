CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#51: FILE: include/linux/rcupreempt.h:66:
+extern int *rcupreempt_flipctr(int cpu);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#52: FILE: include/linux/rcupreempt.h:67:
+extern long rcupreempt_data_completed(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#53: FILE: include/linux/rcupreempt.h:68:
+extern int rcupreempt_flip_flag(int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#54: FILE: include/linux/rcupreempt.h:69:
+extern int rcupreempt_mb_flag(int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#55: FILE: include/linux/rcupreempt.h:70:
+extern char *rcupreempt_try_flip_state_name(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#56: FILE: include/linux/rcupreempt.h:71:
+extern struct rcupreempt_trace *rcupreempt_trace(void);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#65: FILE: include/linux/rcupreempt_trace.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#79: FILE: include/linux/rcupreempt_trace.h:15:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#80: FILE: include/linux/rcupreempt_trace.h:16:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#85: FILE: include/linux/rcupreempt_trace.h:21:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#93: FILE: include/linux/rcupreempt_trace.h:29:
+ * ^I^Ihttp://lse.sourceforge.net/locking/rcupdate.html$

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#104: FILE: include/linux/rcupreempt_trace.h:40:
+#include <asm/atomic.h>

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#139: FILE: include/linux/rcupreempt_trace.h:75:
+#define RCU_TRACE(fn, arg) ^Ifn(arg);$

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#139: FILE: include/linux/rcupreempt_trace.h:75:
+#define RCU_TRACE(fn, arg) 	fn(arg);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#144: FILE: include/linux/rcupreempt_trace.h:80:
+extern void rcupreempt_trace_move2done(struct rcupreempt_trace *trace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#145: FILE: include/linux/rcupreempt_trace.h:81:
+extern void rcupreempt_trace_move2wait(struct rcupreempt_trace *trace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#146: FILE: include/linux/rcupreempt_trace.h:82:
+extern void rcupreempt_trace_try_flip1(struct rcupreempt_trace *trace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#147: FILE: include/linux/rcupreempt_trace.h:83:
+extern void rcupreempt_trace_try_flip_e1(struct rcupreempt_trace *trace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#148: FILE: include/linux/rcupreempt_trace.h:84:
+extern void rcupreempt_trace_try_flip_i1(struct rcupreempt_trace *trace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#149: FILE: include/linux/rcupreempt_trace.h:85:
+extern void rcupreempt_trace_try_flip_ie1(struct rcupreempt_trace *trace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#150: FILE: include/linux/rcupreempt_trace.h:86:
+extern void rcupreempt_trace_try_flip_g1(struct rcupreempt_trace *trace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#151: FILE: include/linux/rcupreempt_trace.h:87:
+extern void rcupreempt_trace_try_flip_a1(struct rcupreempt_trace *trace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#152: FILE: include/linux/rcupreempt_trace.h:88:
+extern void rcupreempt_trace_try_flip_ae1(struct rcupreempt_trace *trace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#153: FILE: include/linux/rcupreempt_trace.h:89:
+extern void rcupreempt_trace_try_flip_a2(struct rcupreempt_trace *trace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#154: FILE: include/linux/rcupreempt_trace.h:90:
+extern void rcupreempt_trace_try_flip_z1(struct rcupreempt_trace *trace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#155: FILE: include/linux/rcupreempt_trace.h:91:
+extern void rcupreempt_trace_try_flip_ze1(struct rcupreempt_trace *trace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#156: FILE: include/linux/rcupreempt_trace.h:92:
+extern void rcupreempt_trace_try_flip_z2(struct rcupreempt_trace *trace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#157: FILE: include/linux/rcupreempt_trace.h:93:
+extern void rcupreempt_trace_try_flip_m1(struct rcupreempt_trace *trace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#158: FILE: include/linux/rcupreempt_trace.h:94:
+extern void rcupreempt_trace_try_flip_me1(struct rcupreempt_trace *trace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#159: FILE: include/linux/rcupreempt_trace.h:95:
+extern void rcupreempt_trace_try_flip_m2(struct rcupreempt_trace *trace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#160: FILE: include/linux/rcupreempt_trace.h:96:
+extern void rcupreempt_trace_check_callbacks(struct rcupreempt_trace *trace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#161: FILE: include/linux/rcupreempt_trace.h:97:
+extern void rcupreempt_trace_done_remove(struct rcupreempt_trace *trace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#162: FILE: include/linux/rcupreempt_trace.h:98:
+extern void rcupreempt_trace_invoke(struct rcupreempt_trace *trace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#163: FILE: include/linux/rcupreempt_trace.h:99:
+extern void rcupreempt_trace_next_add(struct rcupreempt_trace *trace);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#182: FILE: kernel/Kconfig.preempt:100:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#213: FILE: kernel/rcupreempt.c:68:
+#ifdef CONFIG_RCU_TRACE $

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#225: FILE: kernel/rcupreempt.c:96:
+static char *rcu_try_flip_state_names[] =
+	{ "idle", "gp", "waitack", "waitzero", "waitmb" };

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#254: FILE: kernel/rcupreempt.c:291:
+  ^I^Ireturn 1;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#254: FILE: kernel/rcupreempt.c:291:
+  ^I^Ireturn 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#254: FILE: kernel/rcupreempt.c:291:
+  ^I^Ireturn 1;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#277: FILE: kernel/rcupreempt.c:335:
+^I^I^IRCU_TRACE(rcupreempt_trace_try_flip_ae1, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#278: FILE: kernel/rcupreempt.c:336:
+			RCU_TRACE(rcupreempt_trace_try_flip_ae1, 
+							&rcu_data.trace);

ERROR:CODE_INDENT: code indent should use tabs where possible
#279: FILE: kernel/rcupreempt.c:337:
+  ^I^I^Ireturn 1;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#279: FILE: kernel/rcupreempt.c:337:
+  ^I^I^Ireturn 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#279: FILE: kernel/rcupreempt.c:337:
+  ^I^I^Ireturn 1;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#317: FILE: kernel/rcupreempt.c:390:
+^I^I^IRCU_TRACE(rcupreempt_trace_try_flip_me1, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#318: FILE: kernel/rcupreempt.c:391:
+			RCU_TRACE(rcupreempt_trace_try_flip_me1, 
+							&rcu_data.trace);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#379: FILE: kernel/rcupreempt.c:627:
+}
+long rcupreempt_data_completed(void)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#383: FILE: kernel/rcupreempt.c:631:
+}
+int rcupreempt_flip_flag(int cpu)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#387: FILE: kernel/rcupreempt.c:635:
+}
+int rcupreempt_mb_flag(int cpu)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#391: FILE: kernel/rcupreempt.c:639:
+}
+char *rcupreempt_try_flip_state_name(void)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#395: FILE: kernel/rcupreempt.c:643:
+}
+struct rcupreempt_trace *rcupreempt_trace(void)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#400: FILE: kernel/rcupreempt.c:648:
+EXPORT_SYMBOL_GPL(rcupreempt_data_completed);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#401: FILE: kernel/rcupreempt.c:649:
+EXPORT_SYMBOL_GPL(rcupreempt_flip_flag);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#402: FILE: kernel/rcupreempt.c:650:
+EXPORT_SYMBOL_GPL(rcupreempt_mb_flag);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#403: FILE: kernel/rcupreempt.c:651:
+EXPORT_SYMBOL_GPL(rcupreempt_try_flip_state_name);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#412: FILE: kernel/rcupreempt_trace.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#426: FILE: kernel/rcupreempt_trace.c:15:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#427: FILE: kernel/rcupreempt_trace.c:16:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#434: FILE: kernel/rcupreempt_trace.c:23:
+ * ^I^IDocumentation/RCU/ *.txt$

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#445: FILE: kernel/rcupreempt_trace.c:34:
+#include <asm/atomic.h>

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#468: FILE: kernel/rcupreempt_trace.c:57:
+}
+void rcupreempt_trace_move2wait(struct rcupreempt_trace *trace)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#474: FILE: kernel/rcupreempt_trace.c:63:
+}
+void rcupreempt_trace_try_flip1(struct rcupreempt_trace *trace)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#478: FILE: kernel/rcupreempt_trace.c:67:
+}
+void rcupreempt_trace_try_flip_e1(struct rcupreempt_trace *trace)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#482: FILE: kernel/rcupreempt_trace.c:71:
+}
+void rcupreempt_trace_try_flip2(struct rcupreempt_trace *trace)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#486: FILE: kernel/rcupreempt_trace.c:75:
+}
+void rcupreempt_trace_try_flip3(struct rcupreempt_trace *trace)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#490: FILE: kernel/rcupreempt_trace.c:79:
+}
+void rcupreempt_trace_try_flip_i1(struct rcupreempt_trace *trace)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#494: FILE: kernel/rcupreempt_trace.c:83:
+}
+void rcupreempt_trace_try_flip_ie1(struct rcupreempt_trace *trace)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#498: FILE: kernel/rcupreempt_trace.c:87:
+}
+void rcupreempt_trace_try_flip_g1(struct rcupreempt_trace *trace)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#502: FILE: kernel/rcupreempt_trace.c:91:
+}
+void rcupreempt_trace_try_flip_a1(struct rcupreempt_trace *trace)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#506: FILE: kernel/rcupreempt_trace.c:95:
+}
+void rcupreempt_trace_try_flip_ae1(struct rcupreempt_trace *trace)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#510: FILE: kernel/rcupreempt_trace.c:99:
+}
+void rcupreempt_trace_try_flip_a2(struct rcupreempt_trace *trace)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#514: FILE: kernel/rcupreempt_trace.c:103:
+}
+void rcupreempt_trace_try_flip_z1(struct rcupreempt_trace *trace)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#518: FILE: kernel/rcupreempt_trace.c:107:
+}
+void rcupreempt_trace_try_flip_ze1(struct rcupreempt_trace *trace)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#522: FILE: kernel/rcupreempt_trace.c:111:
+}
+void rcupreempt_trace_try_flip_z2(struct rcupreempt_trace *trace)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#526: FILE: kernel/rcupreempt_trace.c:115:
+}
+void rcupreempt_trace_try_flip_m1(struct rcupreempt_trace *trace)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#530: FILE: kernel/rcupreempt_trace.c:119:
+}
+void rcupreempt_trace_try_flip_me1(struct rcupreempt_trace *trace)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#534: FILE: kernel/rcupreempt_trace.c:123:
+}
+void rcupreempt_trace_try_flip_m2(struct rcupreempt_trace *trace)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#538: FILE: kernel/rcupreempt_trace.c:127:
+}
+void rcupreempt_trace_check_callbacks(struct rcupreempt_trace *trace)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#542: FILE: kernel/rcupreempt_trace.c:131:
+}
+void rcupreempt_trace_done_remove(struct rcupreempt_trace *trace)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#547: FILE: kernel/rcupreempt_trace.c:136:
+}
+void rcupreempt_trace_invoke(struct rcupreempt_trace *trace)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#551: FILE: kernel/rcupreempt_trace.c:140:
+}
+void rcupreempt_trace_next_add(struct rcupreempt_trace *trace)

ERROR:CODE_INDENT: code indent should use tabs where possible
#553: FILE: kernel/rcupreempt_trace.c:142:
+        trace->next_add++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#553: FILE: kernel/rcupreempt_trace.c:142:
+        trace->next_add++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#554: FILE: kernel/rcupreempt_trace.c:143:
+        trace->next_length++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#554: FILE: kernel/rcupreempt_trace.c:143:
+        trace->next_length++;$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#557: FILE: kernel/rcupreempt_trace.c:146:
+static ssize_t rcustats_read(struct file *filp, char __user *buffer,
                                           ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#558: FILE: kernel/rcupreempt_trace.c:147:
+static ssize_t rcustats_read(struct file *filp, char __user *buffer,
+				size_t count, loff_t *ppos)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#565: FILE: kernel/rcupreempt_trace.c:154:
+	snprintf(rcupreempt_trace_buf, RCUPREEMPT_TRACE_BUF_SIZE,
+		       "ggp=%ld lgp=%ld rcc=%ld\n"

ERROR:TRAILING_WHITESPACE: trailing whitespace
#595: FILE: kernel/rcupreempt_trace.c:184:
+^Ibcount = simple_read_from_buffer(buffer, count, ppos, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#596: FILE: kernel/rcupreempt_trace.c:185:
+	bcount = simple_read_from_buffer(buffer, count, ppos, 
+			rcupreempt_trace_buf, strlen(rcupreempt_trace_buf));

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#601: FILE: kernel/rcupreempt_trace.c:190:
+static ssize_t rcugp_read(struct file *filp, char __user *buffer,
                                        ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#602: FILE: kernel/rcupreempt_trace.c:191:
+static ssize_t rcugp_read(struct file *filp, char __user *buffer,
+				size_t count, loff_t *ppos)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#609: FILE: kernel/rcupreempt_trace.c:198:
+^Isnprintf(rcupreempt_trace_buf, RCUPREEMPT_TRACE_BUF_SIZE, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#610: FILE: kernel/rcupreempt_trace.c:199:
+	snprintf(rcupreempt_trace_buf, RCUPREEMPT_TRACE_BUF_SIZE, 
+		"oldggp=%ld  newggp=%ld\n", oldgp, rcu_batches_completed());

ERROR:TRAILING_WHITESPACE: trailing whitespace
#611: FILE: kernel/rcupreempt_trace.c:200:
+^Ibcount = simple_read_from_buffer(buffer, count, ppos, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#612: FILE: kernel/rcupreempt_trace.c:201:
+	bcount = simple_read_from_buffer(buffer, count, ppos, 
+			rcupreempt_trace_buf, strlen(rcupreempt_trace_buf));

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#617: FILE: kernel/rcupreempt_trace.c:206:
+static ssize_t rcuctrs_read(struct file *filp, char __user *buffer,
                                          ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#618: FILE: kernel/rcupreempt_trace.c:207:
+static ssize_t rcuctrs_read(struct file *filp, char __user *buffer,
+				size_t count, loff_t *ppos)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#627: FILE: kernel/rcupreempt_trace.c:216:
+^Icnt += snprintf(&rcupreempt_trace_buf[cnt], RCUPREEMPT_TRACE_BUF_SIZE, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#631: FILE: kernel/rcupreempt_trace.c:220:
+^I^Icnt += snprintf(&rcupreempt_trace_buf[cnt], $

WARNING:LINE_SPACING: Missing a blank line after declarations
#631: FILE: kernel/rcupreempt_trace.c:220:
+		int *flipctr = rcupreempt_flipctr(cpu);
+		cnt += snprintf(&rcupreempt_trace_buf[cnt], 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#643: FILE: kernel/rcupreempt_trace.c:232:
+^I^I^Ircupreempt_data_completed(), $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#645: FILE: kernel/rcupreempt_trace.c:234:
+^Icnt += snprintf(&rcupreempt_trace_buf[cnt], $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#648: FILE: kernel/rcupreempt_trace.c:237:
+^Ibcount = simple_read_from_buffer(buffer, count, ppos, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#649: FILE: kernel/rcupreempt_trace.c:238:
+	bcount = simple_read_from_buffer(buffer, count, ppos, 
+			rcupreempt_trace_buf, strlen(rcupreempt_trace_buf));

WARNING:CONST_STRUCT: struct file_operations should normally be const
#654: FILE: kernel/rcupreempt_trace.c:243:
+static struct file_operations rcustats_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#659: FILE: kernel/rcupreempt_trace.c:248:
+static struct file_operations rcugp_fops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#664: FILE: kernel/rcupreempt_trace.c:253:
+static struct file_operations rcuctrs_fops = {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#675: FILE: kernel/rcupreempt_trace.c:264:
+^Istatdir = debugfs_create_file("rcustats", 0444, rcudir, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#676: FILE: kernel/rcupreempt_trace.c:265:
+	statdir = debugfs_create_file("rcustats", 0444, rcudir, 
+						NULL, &rcustats_fops);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#684: FILE: kernel/rcupreempt_trace.c:273:
+^Ictrsdir = debugfs_create_file("rcuctrs", 0444, rcudir, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#685: FILE: kernel/rcupreempt_trace.c:274:
+	ctrsdir = debugfs_create_file("rcuctrs", 0444, rcudir, 
+						NULL, &rcuctrs_fops);

WARNING:NEEDLESS_IF: debugfs_remove(NULL) is safe and this check is probably not required
#691: FILE: kernel/rcupreempt_trace.c:280:
+	if (statdir)
+		debugfs_remove(statdir);

WARNING:NEEDLESS_IF: debugfs_remove(NULL) is safe and this check is probably not required
#693: FILE: kernel/rcupreempt_trace.c:282:
+	if (gpdir)
+		debugfs_remove(gpdir);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#717: FILE: kernel/rcupreempt_trace.c:306:
+
+

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.01473.commit.87105f00d54af63720962fd09823081f93f5bb45 total: 24 errors, 27 warnings, 65 checks, 641 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.01473.commit.87105f00d54af63720962fd09823081f93f5bb45 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
