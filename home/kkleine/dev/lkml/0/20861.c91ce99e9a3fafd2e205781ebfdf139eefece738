WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#52: 
> assemble/create arrays only?  i mean literally "mdx" not "mdX" where X is 

WARNING:TYPO_SPELLING: 'paramters' may be misspelled - perhaps 'parameters'?
#96: 
 echo 10 > /sys/module/md-mod/paramters/create
                              ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'paramters' may be misspelled - perhaps 'parameters'?
#98: 
 echo d10 > /sys/module/md-mod/paramters/create
                               ^^^^^^^^^

WARNING:TYPO_SPELLING: 'paramters' may be misspelled - perhaps 'parameters'?
#100: 
 cat /sys/module/md-mod/paramters/next_free_legacy
                        ^^^^^^^^^

WARNING:TYPO_SPELLING: 'paramters' may be misspelled - perhaps 'parameters'?
#102: 
 cat /sys/module/md-mod/paramters/next_free_partitionable
                        ^^^^^^^^^

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:LINE_SPACING: Missing a blank line after declarations
#125: FILE: drivers/md/md.c:5534:
+	char *e;
+	if (*val == 'd' || *val == 'p') {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#129: FILE: drivers/md/md.c:5538:
+	num = simple_strtoul(val, &e, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:LINE_SPACING: Missing a blank line after declarations
#133: FILE: drivers/md/md.c:5542:
+		dev_t dev;
+		if (part)

CHECK:CAMELCASE: Avoid CamelCase: <MdpMinorShift>
#134: FILE: drivers/md/md.c:5543:
+			dev = MKDEV(mdp_major, num << MdpMinorShift);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#142: FILE: drivers/md/md.c:5551:
+}
+static int md_next_free(char *buffer, struct kernel_param *kp)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#147: FILE: drivers/md/md.c:5556:
+	int next = MKDEV(MD_MAJOR,0);
 	                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#148: FILE: drivers/md/md.c:5557:
+	int next = MKDEV(MD_MAJOR,0);
+	if (kp->arg) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#149: FILE: drivers/md/md.c:5558:
+		next = MKDEV(mdp_major,0);
 		                      ^

ERROR:SPACING: spaces required around that '<=' (ctx:VxV)
#156: FILE: drivers/md/md.c:5565:
+			if (atomic_read(&mddev->active)<=1 &&
 			                               ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#156: FILE: drivers/md/md.c:5565:
+			if (atomic_read(&mddev->active)<=1 &&
[...]
+			} else if (mddev->unit >= next)
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#157: FILE: drivers/md/md.c:5566:
+			if (atomic_read(&mddev->active)<=1 &&
+				mddev->pers == NULL &&

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mddev->pers"
#157: FILE: drivers/md/md.c:5566:
+				mddev->pers == NULL &&

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#168: FILE: drivers/md/md.c:5577:
+}
+static int ignore(const char *val, struct kernel_param *kp) { return -EINVAL; }

CHECK:LINE_SPACING: Please don't use multiple blank lines
#170: FILE: drivers/md/md.c:5579:
+
+

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#172: FILE: drivers/md/md.c:5581:
+module_param_call(next_free_legacy, ignore, md_next_free, (void*)0, 0400);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#173: FILE: drivers/md/md.c:5582:
+module_param_call(next_free_partitionable, ignore, md_next_free, (void*)1, 0400);

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.20861.commit.c91ce99e9a3fafd2e205781ebfdf139eefece738 total: 5 errors, 10 warnings, 7 checks, 62 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.20861.commit.c91ce99e9a3fafd2e205781ebfdf139eefece738 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
