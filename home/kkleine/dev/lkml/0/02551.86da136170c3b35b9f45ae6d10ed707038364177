WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#49: FILE: block/ll_rw_blk.c:383:
+static int blk_uptodate_to_error(int uptodate)
                                      ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#54: FILE: block/ll_rw_blk.c:388:
+	 * extend uptodate bool to allow < 0 value to be direct io error
 	          ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#56: FILE: block/ll_rw_blk.c:390:
+	if (end_io_error(uptodate))
 	                 ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#57: FILE: block/ll_rw_blk.c:391:
+		error = !uptodate ? -EIO : uptodate;
 		         ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#57: FILE: block/ll_rw_blk.c:391:
+		error = !uptodate ? -EIO : uptodate;
 		                           ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#62: FILE: block/ll_rw_blk.c:396:
+static int pre_flush_end_io(struct request *rq, int uptodate, int nr_bytes,
                                                     ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#67: FILE: block/ll_rw_blk.c:401:
+	BLK_ENDIO_PRE(rq, uptodate, nr_bytes, locked, callback, arg);
 	                  ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#69: FILE: block/ll_rw_blk.c:403:
+	error = blk_uptodate_to_error(uptodate);
 	                              ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#79: FILE: block/ll_rw_blk.c:412:
+static int bar_end_io(struct request *rq, int uptodate, int nr_bytes,
                                               ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#84: FILE: block/ll_rw_blk.c:417:
+	BLK_ENDIO_PRE(rq, uptodate, nr_bytes, locked, callback, arg);
 	                  ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#86: FILE: block/ll_rw_blk.c:419:
+	error = blk_uptodate_to_error(uptodate);
 	                              ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#96: FILE: block/ll_rw_blk.c:428:
+static int post_flush_end_io(struct request *rq, int uptodate, int nr_bytes,
                                                      ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#101: FILE: block/ll_rw_blk.c:433:
+	BLK_ENDIO_PRE(rq, uptodate, nr_bytes, locked, callback, arg);
 	                  ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#103: FILE: block/ll_rw_blk.c:435:
+	error = blk_uptodate_to_error(uptodate);
 	                              ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#118: FILE: block/ll_rw_blk.c:2750:
+int blk_end_sync_rq(struct request *rq, int uptodate, int nr_bytes,
                                             ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#123: FILE: block/ll_rw_blk.c:2755:
+	BLK_ENDIO_PRE(rq, uptodate, nr_bytes, locked, callback, arg);
 	                  ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#143: FILE: block/ll_rw_blk.c:2882:
+static int blk_end_io(struct request *rq, int uptodate, int nr_bytes,
                                               ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#146: FILE: block/ll_rw_blk.c:2885:
+	BLK_ENDIO_PRE(rq, uptodate, nr_bytes, locked, callback, arg);
 	                  ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#221: FILE: drivers/scsi/scsi_lib.c:246:
+static int scsi_end_async(struct request *req, int uptodate, int nr_bytes,
                                                    ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#226: FILE: drivers/scsi/scsi_lib.c:251:
+	BLK_ENDIO_PRE(req, uptodate, nr_bytes, locked, callback, arg);
 	                   ^^^^^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#248: FILE: include/linux/blkdev.h:645:
+extern int blk_end_sync_rq(struct request *rq, int, int, int, int (void *),

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#248: FILE: include/linux/blkdev.h:645:
+extern int blk_end_sync_rq(struct request *rq, int, int, int, int (void *),

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#248: FILE: include/linux/blkdev.h:645:
+extern int blk_end_sync_rq(struct request *rq, int, int, int, int (void *),

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#248: FILE: include/linux/blkdev.h:645:
+extern int blk_end_sync_rq(struct request *rq, int, int, int, int (void *),

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#248: FILE: include/linux/blkdev.h:645:
+extern int blk_end_sync_rq(struct request *rq, int, int, int, int (void *),

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#248: FILE: include/linux/blkdev.h:645:
+extern int blk_end_sync_rq(struct request *rq, int, int, int, int (void *),

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#248: FILE: include/linux/blkdev.h:645:
+extern int blk_end_sync_rq(struct request *rq, int, int, int, int (void *),

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#258: FILE: include/linux/blkdev.h:722:
+extern void end_that_request_last(struct request *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request *' should also have an identifier name
#258: FILE: include/linux/blkdev.h:722:
+extern void end_that_request_last(struct request *);

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#269: FILE: include/linux/blkdev.h:733:
+#define BLK_ENDIO_PRE(rq, uptodate, nr_bytes, locked, callback, arg)	\
                           ^^^^^^^^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'rq' - possible side-effects?
#269: FILE: include/linux/blkdev.h:733:
+#define BLK_ENDIO_PRE(rq, uptodate, nr_bytes, locked, callback, arg)	\
+	struct request_queue *q = (rq)->q;				\
+	unsigned long flags = 0UL;					\
+									\
+	if (end_that_request_chunk(rq, uptodate, nr_bytes))		\
+		return 1;						\
+									\
+	if (callback && callback(arg))					\
+		return 1;						\
+									\
+	if (!locked)							\
+		spin_lock_irqsave(q->queue_lock, flags);		\
+									\
+	end_that_request_last(rq)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'locked' may be better as '(locked)' to avoid precedence issues
#269: FILE: include/linux/blkdev.h:733:
+#define BLK_ENDIO_PRE(rq, uptodate, nr_bytes, locked, callback, arg)	\
+	struct request_queue *q = (rq)->q;				\
+	unsigned long flags = 0UL;					\
+									\
+	if (end_that_request_chunk(rq, uptodate, nr_bytes))		\
+		return 1;						\
+									\
+	if (callback && callback(arg))					\
+		return 1;						\
+									\
+	if (!locked)							\
+		spin_lock_irqsave(q->queue_lock, flags);		\
+									\
+	end_that_request_last(rq)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'callback' - possible side-effects?
#269: FILE: include/linux/blkdev.h:733:
+#define BLK_ENDIO_PRE(rq, uptodate, nr_bytes, locked, callback, arg)	\
+	struct request_queue *q = (rq)->q;				\
+	unsigned long flags = 0UL;					\
+									\
+	if (end_that_request_chunk(rq, uptodate, nr_bytes))		\
+		return 1;						\
+									\
+	if (callback && callback(arg))					\
+		return 1;						\
+									\
+	if (!locked)							\
+		spin_lock_irqsave(q->queue_lock, flags);		\
+									\
+	end_that_request_last(rq)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'callback' may be better as '(callback)' to avoid precedence issues
#269: FILE: include/linux/blkdev.h:733:
+#define BLK_ENDIO_PRE(rq, uptodate, nr_bytes, locked, callback, arg)	\
+	struct request_queue *q = (rq)->q;				\
+	unsigned long flags = 0UL;					\
+									\
+	if (end_that_request_chunk(rq, uptodate, nr_bytes))		\
+		return 1;						\
+									\
+	if (callback && callback(arg))					\
+		return 1;						\
+									\
+	if (!locked)							\
+		spin_lock_irqsave(q->queue_lock, flags);		\
+									\
+	end_that_request_last(rq)

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#269: FILE: include/linux/blkdev.h:733:
+#define BLK_ENDIO_PRE(rq, uptodate, nr_bytes, locked, callback, arg)	\
+	struct request_queue *q = (rq)->q;				\
+	unsigned long flags = 0UL;					\
+									\
+	if (end_that_request_chunk(rq, uptodate, nr_bytes))		\
+		return 1;						\
+									\
+	if (callback && callback(arg))					\
+		return 1;						\
+									\
+	if (!locked)							\
+		spin_lock_irqsave(q->queue_lock, flags);		\
+									\
+	end_that_request_last(rq)

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#273: FILE: include/linux/blkdev.h:737:
+	if (end_that_request_chunk(rq, uptodate, nr_bytes))		\
 	                               ^^^^^^^^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#284: FILE: include/linux/blkdev.h:748:
+#define BLK_ENDIO_POST(locked)						\
+	if (!locked)							\
+		spin_unlock_irqrestore(q->queue_lock, flags)

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'locked' may be better as '(locked)' to avoid precedence issues
#284: FILE: include/linux/blkdev.h:748:
+#define BLK_ENDIO_POST(locked)						\
+	if (!locked)							\
+		spin_unlock_irqrestore(q->queue_lock, flags)

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.02551.commit.86da136170c3b35b9f45ae6d10ed707038364177 total: 1 errors, 30 warnings, 7 checks, 231 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.02551.commit.86da136170c3b35b9f45ae6d10ed707038364177 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
