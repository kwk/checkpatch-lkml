WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
>     network events (epoll) and disk file AIO in the same loop. With POSIX AIO

WARNING:TYPO_SPELLING: 'noticible' may be misspelled - perhaps 'noticeable'?
#74: 
to the extra step of submitting the epoll wait iocb, most noticible when
                                                          ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'safetly' may be misspelled - perhaps 'safely'?
#84: 
excludes ctx->wait or ep->wq wait queues, which can safetly be nested
                                                    ^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#150: FILE: fs/aio.c:1423:
+int aio_setup_iocb_timer(struct kiocb *iocb, unsigned long expires,
+	void (*function)(unsigned long))

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*timer)...) over kmalloc(sizeof(struct timer_list)...)
#157: FILE: fs/aio.c:1430:
+	timer = kmalloc(sizeof(struct timer_list), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:LINE_SPACING: Please don't use multiple blank lines
#171: FILE: fs/aio.c:1444:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#181: FILE: fs/aio.c:1532:
+^I ^I *  Note that we unconditionally allocate a timer, but we$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#181: FILE: fs/aio.c:1532:
+^I ^I *  Note that we unconditionally allocate a timer, but we$

ERROR:CODE_INDENT: code indent should use tabs where possible
#182: FILE: fs/aio.c:1533:
+^I ^I *  only use it if a timeout was specified.  Otherwise, it$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#182: FILE: fs/aio.c:1533:
+^I ^I *  only use it if a timeout was specified.  Otherwise, it$

ERROR:CODE_INDENT: code indent should use tabs where possible
#183: FILE: fs/aio.c:1534:
+^I ^I *  is just a holder for the "infinite" value.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#183: FILE: fs/aio.c:1534:
+^I ^I *  is just a holder for the "infinite" value.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#184: FILE: fs/aio.c:1535:
+^I ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#184: FILE: fs/aio.c:1535:
+^I ^I */$

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#185: FILE: fs/aio.c:1536:
+		ret = aio_setup_iocb_timer(kiocb, ep_relative_ms_to_jiffies(

CHECK:LINE_SPACING: Please don't use multiple blank lines
#235: FILE: fs/eventpoll.c:671:
+
+

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#241: FILE: fs/eventpoll.c:677:
+	event->res = event->res2 = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:BRACES: braces {} are not necessary for single statement blocks
#273: FILE: fs/eventpoll.c:709:
+	if (ret == -EIOCBRETRY) {
+		mod_timer(timer, expires);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#332: FILE: fs/eventpoll.c:1661:
+			if ((jtimeout = schedule_timeout_wait(jtimeout, wait))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#334: FILE: fs/eventpoll.c:1663:
+				if ((res = jtimeout) == -EIOCBRETRY)

WARNING:TYPO_SPELLING: 'storeable' may be misspelled - perhaps 'storable'?
#387: FILE: include/linux/eventpoll.h:51:
+/* Maximum msec timeout value storeable in a long int */
                               ^^^^^^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#421: FILE: include/linux/eventpoll.h:120:
+extern void eventpoll_aio_timer(unsigned long data);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#422: FILE: include/linux/eventpoll.h:121:
+extern int eventpoll_aio_cancel(struct kiocb *iocb, struct io_event *event);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#423: FILE: include/linux/eventpoll.h:122:
+extern ssize_t eventpoll_aio_wait(struct kiocb *iocb);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#435: FILE: include/linux/sched.h:250:
+extern signed long FASTCALL(schedule_timeout_wait(signed long timeout,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#436: FILE: include/linux/sched.h:251:
+extern signed long FASTCALL(schedule_timeout_wait(signed long timeout,
+				wait_queue_t *wait));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#453: FILE: kernel/timer.c:1378:
+fastcall signed long __sched schedule_timeout_wait(signed long timeout,
+	wait_queue_t *wait)

WARNING:LINE_SPACING: Missing a blank line after declarations
#456: FILE: kernel/timer.c:1381:
+	struct kiocb *iocb;
+	if (is_sync_wait(wait))

CHECK:CAMELCASE: Avoid CamelCase: <kiocbIsCancelled>
#460: FILE: kernel/timer.c:1385:
+	if (kiocbIsCancelled(iocb))

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:LINE_SPACING: Please don't use multiple blank lines
#466: FILE: kernel/timer.c:1391:
+
+

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.04926.commit.02ceb57c802f517ff8a910e4c13017be2de48405 total: 6 errors, 10 warnings, 14 checks, 328 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.04926.commit.02ceb57c802f517ff8a910e4c13017be2de48405 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
