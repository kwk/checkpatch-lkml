WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#37: 
> > The implementation comes from Zach's [RFC, PATCH 10/24] i386 Vmi descriptor changes:

WARNING:BAD_SIGN_OFF: Do not use whitespace before Signed-off-by:
#66: 
  Signed-off-by: Zachary Amsden <zach@vmware.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#126: FILE: arch/i386/kernel/traps.c:1146:
+	_set_gate(n, DESCTYPE_TASK, (void *)0, (gdt_entry<<3));
 	                                                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#174: FILE: include/asm-i386/desc.h:45:
+static inline void pack_descriptor(__u32 *a, __u32 *b,
+	unsigned long base, unsigned long limit, unsigned char type, unsigned char flags)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#182: FILE: include/asm-i386/desc.h:53:
+static inline void pack_gate(__u32 *a, __u32 *b,
+	unsigned long base, unsigned short seg, unsigned char type, unsigned char flags)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#188: FILE: include/asm-i386/desc.h:59:
+#define DESCTYPE_LDT ^I0x82^I/* present, system, DPL-0, LDT */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#189: FILE: include/asm-i386/desc.h:60:
+#define DESCTYPE_TSS ^I0x89^I/* present, system, DPL-0, 32-bit TSS */$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#196: FILE: include/asm-i386/desc.h:67:
+#define load_TR_desc() __asm__ __volatile__("ltr %w0"::"q" (GDT_ENTRY_TSS*8))
                                                                          ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#196: FILE: include/asm-i386/desc.h:67:
+#define load_TR_desc() __asm__ __volatile__("ltr %w0"::"q" (GDT_ENTRY_TSS*8))

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#197: FILE: include/asm-i386/desc.h:68:
+#define load_LDT_desc() __asm__ __volatile__("lldt %w0"::"q" (GDT_ENTRY_LDT*8))
                                                                            ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#197: FILE: include/asm-i386/desc.h:68:
+#define load_LDT_desc() __asm__ __volatile__("lldt %w0"::"q" (GDT_ENTRY_LDT*8))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#199: FILE: include/asm-i386/desc.h:70:
+#define load_gdt(dtr) __asm__ __volatile("lgdt %0"::"m" (*dtr))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'dtr' may be better as '(dtr)' to avoid precedence issues
#199: FILE: include/asm-i386/desc.h:70:
+#define load_gdt(dtr) __asm__ __volatile("lgdt %0"::"m" (*dtr))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#200: FILE: include/asm-i386/desc.h:71:
+#define load_idt(dtr) __asm__ __volatile("lidt %0"::"m" (*dtr))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'dtr' may be better as '(dtr)' to avoid precedence issues
#200: FILE: include/asm-i386/desc.h:71:
+#define load_idt(dtr) __asm__ __volatile("lidt %0"::"m" (*dtr))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#201: FILE: include/asm-i386/desc.h:72:
+#define load_tr(tr) __asm__ __volatile("ltr %0"::"m" (tr))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#202: FILE: include/asm-i386/desc.h:73:
+#define load_ldt(ldt) __asm__ __volatile("lldt %0"::"m" (ldt))

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#204: FILE: include/asm-i386/desc.h:75:
+#define store_gdt(dtr) __asm__ ("sgdt %0":"=m" (*dtr))
                                          ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#204: FILE: include/asm-i386/desc.h:75:
+#define store_gdt(dtr) __asm__ ("sgdt %0":"=m" (*dtr))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'dtr' may be better as '(dtr)' to avoid precedence issues
#204: FILE: include/asm-i386/desc.h:75:
+#define store_gdt(dtr) __asm__ ("sgdt %0":"=m" (*dtr))

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#205: FILE: include/asm-i386/desc.h:76:
+#define store_idt(dtr) __asm__ ("sidt %0":"=m" (*dtr))
                                          ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#205: FILE: include/asm-i386/desc.h:76:
+#define store_idt(dtr) __asm__ ("sidt %0":"=m" (*dtr))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'dtr' may be better as '(dtr)' to avoid precedence issues
#205: FILE: include/asm-i386/desc.h:76:
+#define store_idt(dtr) __asm__ ("sidt %0":"=m" (*dtr))

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#206: FILE: include/asm-i386/desc.h:77:
+#define store_tr(tr) __asm__ ("str %0":"=m" (tr))
                                       ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#206: FILE: include/asm-i386/desc.h:77:
+#define store_tr(tr) __asm__ ("str %0":"=m" (tr))

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#207: FILE: include/asm-i386/desc.h:78:
+#define store_ldt(ldt) __asm__ ("sldt %0":"=m" (ldt))
                                          ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#207: FILE: include/asm-i386/desc.h:78:
+#define store_ldt(ldt) __asm__ ("sldt %0":"=m" (ldt))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#215: FILE: include/asm-i386/desc.h:86:
+#define C(i) get_cpu_gdt_table(cpu)[GDT_ENTRY_TLS_MIN + i] = t->tls_array[i]

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#215: FILE: include/asm-i386/desc.h:86:
+#define C(i) get_cpu_gdt_table(cpu)[GDT_ENTRY_TLS_MIN + i] = t->tls_array[i]

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'i' may be better as '(i)' to avoid precedence issues
#215: FILE: include/asm-i386/desc.h:86:
+#define C(i) get_cpu_gdt_table(cpu)[GDT_ENTRY_TLS_MIN + i] = t->tls_array[i]

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#222: FILE: include/asm-i386/desc.h:93:
+	__u32 *lp = (__u32 *)((char *)dt + entry*8);
 	                                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#224: FILE: include/asm-i386/desc.h:95:
+	*(lp+1) = entry_b;
 	    ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#234: FILE: include/asm-i386/desc.h:105:
+	__u32 a, b;
+	pack_gate(&a, &b, (unsigned long)addr, seg, type, 0);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#241: FILE: include/asm-i386/desc.h:112:
+	__u32 a, b;
+	pack_descriptor(&a, &b, (unsigned long)addr,

WARNING:LINE_SPACING: Missing a blank line after declarations
#250: FILE: include/asm-i386/desc.h:121:
+	__u32 a, b;
+	pack_descriptor(&a, &b, (unsigned long)addr,

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.50737.commit.5ace9d99ee8765992990f6428938642d250325ce total: 11 errors, 7 warnings, 17 checks, 209 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.50737.commit.5ace9d99ee8765992990f6428938642d250325ce has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
