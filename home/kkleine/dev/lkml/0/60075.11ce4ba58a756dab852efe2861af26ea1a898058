WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#34: FILE: arch/um/kernel/exec.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:CODE_INDENT: code indent should use tabs where possible
#74: FILE: arch/um/kernel/exec.c:41:
+        long error;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#74: FILE: arch/um/kernel/exec.c:41:
+        long error;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#81: FILE: arch/um/kernel/exec.c:48:
+        error = do_execve(file, argv, env, &current->thread.regs);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#81: FILE: arch/um/kernel/exec.c:48:
+        error = do_execve(file, argv, env, &current->thread.regs);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#82: FILE: arch/um/kernel/exec.c:49:
+        if (error == 0){$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#82: FILE: arch/um/kernel/exec.c:49:
+        if (error == 0){$

ERROR:SPACING: space required before the open brace '{'
#82: FILE: arch/um/kernel/exec.c:49:
+        if (error == 0){

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#84: FILE: arch/um/kernel/exec.c:51:
+                current->ptrace &= ~PT_DTRACE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#84: FILE: arch/um/kernel/exec.c:51:
+                current->ptrace &= ~PT_DTRACE;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#89: FILE: arch/um/kernel/exec.c:56:
+                set_cmdline(current_cmd());$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#89: FILE: arch/um/kernel/exec.c:56:
+                set_cmdline(current_cmd());$

ERROR:CODE_INDENT: code indent should use tabs where possible
#90: FILE: arch/um/kernel/exec.c:57:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#90: FILE: arch/um/kernel/exec.c:57:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#91: FILE: arch/um/kernel/exec.c:58:
+        return(error);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#91: FILE: arch/um/kernel/exec.c:58:
+        return(error);$

ERROR:SPACING: space required before the open parenthesis '('
#99: FILE: arch/um/kernel/exec.c:66:
+	if(!err)

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#101: FILE: arch/um/kernel/exec.c:68:
+	return(err);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#113: FILE: arch/um/kernel/exec.c:80:
+	if (IS_ERR(filename)) goto out;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#118: FILE: arch/um/kernel/exec.c:85:
+	return(error);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#125: FILE: arch/um/kernel/sigio.c:1:
+/*

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#150: FILE: arch/um/kernel/sigio.c:26:
+	return(IRQ_HANDLED);

ERROR:SPACING: space required before the open brace '{'
#160: FILE: arch/um/kernel/sigio.c:36:
+	if(err){

ERROR:SPACING: space required before the open parenthesis '('
#160: FILE: arch/um/kernel/sigio.c:36:
+	if(err){

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#161: FILE: arch/um/kernel/sigio.c:37:
+		printk("write_sigio_irq : um_request_irq failed, err = %d\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'write_sigio_irq', this function's name, in a string
#161: FILE: arch/um/kernel/sigio.c:37:
+		printk("write_sigio_irq : um_request_irq failed, err = %d\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#166: FILE: arch/um/kernel/sigio.c:42:
+	return(0);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#185: FILE: arch/um/kernel/signal.c:1:
+/*

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#214: FILE: arch/um/kernel/signal.c:30:
+EXPORT_SYMBOL(block_signals);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#215: FILE: arch/um/kernel/signal.c:31:
+EXPORT_SYMBOL(unblock_signals);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#217: FILE: arch/um/kernel/signal.c:33:
+#define _S(nr) (1<<((nr)-1))
                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#217: FILE: arch/um/kernel/signal.c:33:
+#define _S(nr) (1<<((nr)-1))
                         ^

ERROR:SPACING: space required before the open brace '{'
#235: FILE: arch/um/kernel/signal.c:51:
+	if(PT_REGS_SYSCALL_NR(regs) >= 0){

ERROR:SPACING: space required before the open parenthesis '('
#235: FILE: arch/um/kernel/signal.c:51:
+	if(PT_REGS_SYSCALL_NR(regs) >= 0){

ERROR:SPACING: space required before the open brace '{'
#237: FILE: arch/um/kernel/signal.c:53:
+		switch(PT_REGS_SYSCALL_RET(regs)){

ERROR:SPACING: space required before the open parenthesis '('
#237: FILE: arch/um/kernel/signal.c:53:
+		switch(PT_REGS_SYSCALL_RET(regs)){

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#248: FILE: arch/um/kernel/signal.c:64:
+		/* fallthrough */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

ERROR:SPACING: space required before the open parenthesis '('
#257: FILE: arch/um/kernel/signal.c:73:
+	if((ka->sa.sa_flags & SA_ONSTACK) && (sas_ss_flags(sp) == 0))

ERROR:SPACING: space required before the open parenthesis '('
#261: FILE: arch/um/kernel/signal.c:77:
+	if(!(ka->sa.sa_flags & SA_SIGINFO))

ERROR:SPACING: space required before the open brace '{'
#267: FILE: arch/um/kernel/signal.c:83:
+	if(err){

ERROR:SPACING: space required before the open parenthesis '('
#267: FILE: arch/um/kernel/signal.c:83:
+	if(err){

WARNING:TABSTOP: Statements should start on a tabstop
#277: FILE: arch/um/kernel/signal.c:93:
+		 if(!(ka->sa.sa_flags & SA_NODEFER))

ERROR:SPACING: space required before the open parenthesis '('
#277: FILE: arch/um/kernel/signal.c:93:
+		 if(!(ka->sa.sa_flags & SA_NODEFER))

ERROR:SPACING: space required before the open brace '{'
#298: FILE: arch/um/kernel/signal.c:114:
+	while((sig = get_signal_to_deliver(&info, &ka_copy, regs, NULL)) > 0){

ERROR:SPACING: space required before the open parenthesis '('
#298: FILE: arch/um/kernel/signal.c:114:
+	while((sig = get_signal_to_deliver(&info, &ka_copy, regs, NULL)) > 0){

ERROR:SPACING: space required before the open brace '{'
#301: FILE: arch/um/kernel/signal.c:117:
+		if(!handle_signal(regs, sig, &ka_copy, &info, oldset)){

ERROR:SPACING: space required before the open parenthesis '('
#301: FILE: arch/um/kernel/signal.c:117:
+		if(!handle_signal(regs, sig, &ka_copy, &info, oldset)){

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#305: FILE: arch/um/kernel/signal.c:121:
+			 * clear the TIF_RESTORE_SIGMASK flag */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:SPACING: space required before the open brace '{'
#313: FILE: arch/um/kernel/signal.c:129:
+	if(!handled_sig && (PT_REGS_SYSCALL_NR(regs) >= 0)){

ERROR:SPACING: space required before the open parenthesis '('
#313: FILE: arch/um/kernel/signal.c:129:
+	if(!handled_sig && (PT_REGS_SYSCALL_NR(regs) >= 0)){

ERROR:SPACING: space required before the open brace '{'
#315: FILE: arch/um/kernel/signal.c:131:
+		switch(PT_REGS_SYSCALL_RET(regs)){

ERROR:SPACING: space required before the open parenthesis '('
#315: FILE: arch/um/kernel/signal.c:131:
+		switch(PT_REGS_SYSCALL_RET(regs)){

ERROR:CODE_INDENT: code indent should use tabs where possible
#326: FILE: arch/um/kernel/signal.c:142:
+ ^I^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#326: FILE: arch/um/kernel/signal.c:142:
+ ^I^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#326: FILE: arch/um/kernel/signal.c:142:
+ ^I^I}$

ERROR:SPACING: space required before the open parenthesis '('
#336: FILE: arch/um/kernel/signal.c:152:
+	if(current->ptrace & PT_DTRACE)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#341: FILE: arch/um/kernel/signal.c:157:
+	 * back */

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#351: FILE: arch/um/kernel/signal.c:167:
+	return(kern_do_signal(&current->thread.regs));

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#374: FILE: arch/um/kernel/signal.c:190:
+	return(do_sigaltstack(uss, uoss, PT_REGS_SP(&current->thread.regs)));

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#381: FILE: arch/um/kernel/time.c:1:
+/*

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#407: FILE: arch/um/kernel/time.c:27:
+	return(HZ);

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#419: FILE: arch/um/kernel/time.c:39:
+int timer_irq_inited = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#423: FILE: arch/um/kernel/time.c:43:
+static long long delta;   ^I^I/* Deviation per interval */$

ERROR:SPACING: space required before the open brace '{'
#431: FILE: arch/um/kernel/time.c:51:
+	if(prev_nsecs){

ERROR:SPACING: space required before the open parenthesis '('
#431: FILE: arch/um/kernel/time.c:51:
+	if(prev_nsecs){

CHECK:BRACES: braces {} should be used on all arms of this statement
#431: FILE: arch/um/kernel/time.c:51:
+	if(prev_nsecs){
[...]
+	else prev_nsecs = os_nsecs();
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open parenthesis '('
#439: FILE: arch/um/kernel/time.c:59:
+		if(delta < 0)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#445: FILE: arch/um/kernel/time.c:65:
+	else prev_nsecs = os_nsecs();

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#445: FILE: arch/um/kernel/time.c:65:
+	}
+	else prev_nsecs = os_nsecs();

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open brace '{'
#449: FILE: arch/um/kernel/time.c:69:
+	while(ticks > 0){

ERROR:SPACING: space required before the open parenthesis '('
#449: FILE: arch/um/kernel/time.c:69:
+	while(ticks > 0){

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#457: FILE: arch/um/kernel/time.c:77:
+static unsigned long long local_offset = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:SPACING: space required before the open parenthesis '('
#495: FILE: arch/um/kernel/time.c:115:
+	if(err != 0)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#496: FILE: arch/um/kernel/time.c:116:
+		printk(KERN_ERR "timer_init : request_irq failed - "

WARNING:SPLIT_STRING: quoted string split across lines
#497: FILE: arch/um/kernel/time.c:117:
+		printk(KERN_ERR "timer_init : request_irq failed - "
+		       "errno = %d\n", -err);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:SPACING: No space is necessary after a cast
#528: FILE: arch/um/kernel/time.c:148:
+	tv->tv_usec = (unsigned long) nsecs / NSEC_PER_USEC;

CHECK:SPACING: No space is necessary after a cast
#546: FILE: arch/um/kernel/time.c:166:
+	set_time((unsigned long long) tv->tv_sec * NSEC_PER_SEC + tv->tv_nsec);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#555: FILE: arch/um/kernel/time.c:175:
+	update_process_times(CHOOSE_MODE(

ERROR:CODE_INDENT: code indent should use tabs where possible
#556: FILE: arch/um/kernel/time.c:176:
+^I                     (UPT_SC(regs) && user_context(UPT_SP(regs))),$

ERROR:SPACING: space required before the open parenthesis '('
#560: FILE: arch/um/kernel/time.c:180:
+	if(current_thread->cpu == 0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#755: FILE: arch/um/kernel/trap.c:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#806: FILE: arch/um/kernel/trap.c:52:
+	 * fail. */

WARNING:IN_ATOMIC: use of in_atomic() is incorrect outside core kernel code
#807: FILE: arch/um/kernel/trap.c:53:
+	if (in_atomic())

in_atomic() is not for driver use so any such use is reported as an ERROR.
Also in_atomic() is often used to determine if sleeping is permitted,
but it is not reliable in this use model.  Therefore its use is
strongly discouraged.

However, in_atomic() is ok for core kernel use.

See: https://lore.kernel.org/lkml/20080320201723.b87b3732.akpm@linux-foundation.org/

ERROR:SPACING: space required before the open parenthesis '('
#812: FILE: arch/um/kernel/trap.c:58:
+	if(!vma)

ERROR:SPACING: space required before the open parenthesis '('
#814: FILE: arch/um/kernel/trap.c:60:
+	else if(vma->vm_start <= address)

ERROR:SPACING: space required before the open parenthesis '('
#816: FILE: arch/um/kernel/trap.c:62:
+	else if(!(vma->vm_flags & VM_GROWSDOWN))

ERROR:SPACING: space required before the open parenthesis '('
#818: FILE: arch/um/kernel/trap.c:64:
+	else if(is_user && !ARCH_IS_STACKGROW(address))

ERROR:SPACING: space required before the open parenthesis '('
#820: FILE: arch/um/kernel/trap.c:66:
+	else if(expand_stack(vma, address))

ERROR:SPACING: space required before the open parenthesis '('
#825: FILE: arch/um/kernel/trap.c:71:
+	if(is_write && !(vma->vm_flags & VM_WRITE))

ERROR:CODE_INDENT: code indent should use tabs where possible
#829: FILE: arch/um/kernel/trap.c:75:
+        if(!is_write && !(vma->vm_flags & (VM_READ | VM_EXEC)))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#829: FILE: arch/um/kernel/trap.c:75:
+        if(!is_write && !(vma->vm_flags & (VM_READ | VM_EXEC)))$

ERROR:SPACING: space required before the open parenthesis '('
#829: FILE: arch/um/kernel/trap.c:75:
+        if(!is_write && !(vma->vm_flags & (VM_READ | VM_EXEC)))

ERROR:CODE_INDENT: code indent should use tabs where possible
#830: FILE: arch/um/kernel/trap.c:76:
+                goto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#830: FILE: arch/um/kernel/trap.c:76:
+                goto out;$

ERROR:SPACING: space required before the open brace '{'
#834: FILE: arch/um/kernel/trap.c:80:
+		switch (handle_mm_fault(mm, vma, address, is_write)){

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#848: FILE: arch/um/kernel/trap.c:94:
+			BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:SPACING: space required before the open parenthesis '('
#854: FILE: arch/um/kernel/trap.c:100:
+	} while(!pte_present(*pte));

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#863: FILE: arch/um/kernel/trap.c:109:
+#if 0

WARNING:YIELD: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#879: FILE: arch/um/kernel/trap.c:125:
+		yield();

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#888: FILE: arch/um/kernel/trap.c:134:
+	struct faultinfo * fi = UPT_FAULTINFO(regs);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open brace '{'
#890: FILE: arch/um/kernel/trap.c:136:
+	if(UPT_IS_USER(regs) && !SEGV_IS_FIXABLE(fi)){

ERROR:SPACING: space required before the open parenthesis '('
#890: FILE: arch/um/kernel/trap.c:136:
+	if(UPT_IS_USER(regs) && !SEGV_IS_FIXABLE(fi)){

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#905: FILE: arch/um/kernel/trap.c:151:
+};
+/*

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#916: FILE: arch/um/kernel/trap.c:162:
+        int is_write = FAULT_WRITE(fi);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#916: FILE: arch/um/kernel/trap.c:162:
+        int is_write = FAULT_WRITE(fi);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#917: FILE: arch/um/kernel/trap.c:163:
+        unsigned long address = FAULT_ADDRESS(fi);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#917: FILE: arch/um/kernel/trap.c:163:
+        unsigned long address = FAULT_ADDRESS(fi);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#919: FILE: arch/um/kernel/trap.c:165:
+        if(!is_user && (address >= start_vm) && (address < end_vm)){$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#919: FILE: arch/um/kernel/trap.c:165:
+        if(!is_user && (address >= start_vm) && (address < end_vm)){$

ERROR:SPACING: space required before the open brace '{'
#919: FILE: arch/um/kernel/trap.c:165:
+        if(!is_user && (address >= start_vm) && (address < end_vm)){

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'address >= start_vm'
#919: FILE: arch/um/kernel/trap.c:165:
+        if(!is_user && (address >= start_vm) && (address < end_vm)){

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'address < end_vm'
#919: FILE: arch/um/kernel/trap.c:165:
+        if(!is_user && (address >= start_vm) && (address < end_vm)){

ERROR:SPACING: space required before the open parenthesis '('
#919: FILE: arch/um/kernel/trap.c:165:
+        if(!is_user && (address >= start_vm) && (address < end_vm)){

CHECK:BRACES: braces {} should be used on all arms of this statement
#919: FILE: arch/um/kernel/trap.c:165:
+        if(!is_user && (address >= start_vm) && (address < end_vm)){
[...]
+	else if(current->mm == NULL)
[...]

ERROR:CODE_INDENT: code indent should use tabs where possible
#920: FILE: arch/um/kernel/trap.c:166:
+                flush_tlb_kernel_vm();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#920: FILE: arch/um/kernel/trap.c:166:
+                flush_tlb_kernel_vm();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#921: FILE: arch/um/kernel/trap.c:167:
+                return(0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#921: FILE: arch/um/kernel/trap.c:167:
+                return(0);$

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#921: FILE: arch/um/kernel/trap.c:167:
+                return(0);

ERROR:CODE_INDENT: code indent should use tabs where possible
#922: FILE: arch/um/kernel/trap.c:168:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#922: FILE: arch/um/kernel/trap.c:168:
+        }$

ERROR:SPACING: space required before the open parenthesis '('
#923: FILE: arch/um/kernel/trap.c:169:
+	else if(current->mm == NULL)

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#923: FILE: arch/um/kernel/trap.c:169:
+        }
+	else if(current->mm == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!current->mm"
#923: FILE: arch/um/kernel/trap.c:169:
+	else if(current->mm == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: braces {} should be used on all arms of this statement
#926: FILE: arch/um/kernel/trap.c:172:
+	if (SEGV_IS_FIXABLE(&fi) || SEGV_MAYBE_FIXABLE(&fi))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#928: FILE: arch/um/kernel/trap.c:174:
+	else {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#931: FILE: arch/um/kernel/trap.c:177:
+		 * This code is used in __do_copy_from_user() of TT mode. */

ERROR:SPACING: space required before the open parenthesis '('
#936: FILE: arch/um/kernel/trap.c:182:
+	if(!err)

CHECK:BRACES: braces {} should be used on all arms of this statement
#936: FILE: arch/um/kernel/trap.c:182:
+	if(!err)
[...]
+	else if(catcher != NULL){
[...]
+	else if(current->thread.fault_addr != NULL)
[...]
+        else if(!is_user && arch_fixup(ip, sc))
[...]

ERROR:SPACING: space required before the open brace '{'
#938: FILE: arch/um/kernel/trap.c:184:
+	else if(catcher != NULL){

ERROR:SPACING: space required before the open parenthesis '('
#938: FILE: arch/um/kernel/trap.c:184:
+	else if(catcher != NULL){

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "catcher"
#938: FILE: arch/um/kernel/trap.c:184:
+	else if(catcher != NULL){

CHECK:SPACING: No space is necessary after a cast
#939: FILE: arch/um/kernel/trap.c:185:
+		current->thread.fault_addr = (void *) address;

ERROR:SPACING: space required before the open parenthesis '('
#942: FILE: arch/um/kernel/trap.c:188:
+	else if(current->thread.fault_addr != NULL)

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#942: FILE: arch/um/kernel/trap.c:188:
+	}
+	else if(current->thread.fault_addr != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "current->thread.fault_addr"
#942: FILE: arch/um/kernel/trap.c:188:
+	else if(current->thread.fault_addr != NULL)

ERROR:CODE_INDENT: code indent should use tabs where possible
#944: FILE: arch/um/kernel/trap.c:190:
+        else if(!is_user && arch_fixup(ip, sc))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#944: FILE: arch/um/kernel/trap.c:190:
+        else if(!is_user && arch_fixup(ip, sc))$

ERROR:SPACING: space required before the open parenthesis '('
#944: FILE: arch/um/kernel/trap.c:190:
+        else if(!is_user && arch_fixup(ip, sc))

ERROR:CODE_INDENT: code indent should use tabs where possible
#947: FILE: arch/um/kernel/trap.c:193:
+ ^Iif(!is_user)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#947: FILE: arch/um/kernel/trap.c:193:
+ ^Iif(!is_user)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#947: FILE: arch/um/kernel/trap.c:193:
+ ^Iif(!is_user)$

ERROR:SPACING: space required before the open parenthesis '('
#947: FILE: arch/um/kernel/trap.c:193:
+ 	if(!is_user)

ERROR:CODE_INDENT: code indent should use tabs where possible
#956: FILE: arch/um/kernel/trap.c:202:
+                current->thread.arch.faultinfo = fi;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#956: FILE: arch/um/kernel/trap.c:202:
+                current->thread.arch.faultinfo = fi;$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#959: FILE: arch/um/kernel/trap.c:205:
+		printk("VM: killing process %s\n", current->comm);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#962: FILE: arch/um/kernel/trap.c:208:
+		BUG_ON(err != -EFAULT);

CHECK:SPACING: No space is necessary after a cast
#964: FILE: arch/um/kernel/trap.c:210:
+		si.si_addr = (void __user *) address;

ERROR:CODE_INDENT: code indent should use tabs where possible
#965: FILE: arch/um/kernel/trap.c:211:
+                current->thread.arch.faultinfo = fi;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#965: FILE: arch/um/kernel/trap.c:211:
+                current->thread.arch.faultinfo = fi;$

CHECK:SPACING: No space is necessary after a cast
#977: FILE: arch/um/kernel/trap.c:223:
+	si.si_addr = (void __user *) FAULT_ADDRESS(fi);

ERROR:SPACING: space required before the open parenthesis '('
#984: FILE: arch/um/kernel/trap.c:230:
+	if(arch_handle_signal(sig, regs)) return;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#984: FILE: arch/um/kernel/trap.c:230:
+	if(arch_handle_signal(sig, regs)) return;

ERROR:SPACING: space required before the open parenthesis '('
#985: FILE: arch/um/kernel/trap.c:231:
+	if(!UPT_IS_USER(regs))

ERROR:CODE_INDENT: code indent should use tabs where possible
#987: FILE: arch/um/kernel/trap.c:233:
+        current->thread.arch.faultinfo = *UPT_FAULTINFO(regs);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#987: FILE: arch/um/kernel/trap.c:233:
+        current->thread.arch.faultinfo = *UPT_FAULTINFO(regs);$

ERROR:SPACING: space required before the open parenthesis '('
#993: FILE: arch/um/kernel/trap.c:239:
+	if(current->thread.fault_catcher != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "current->thread.fault_catcher"
#993: FILE: arch/um/kernel/trap.c:239:
+	if(current->thread.fault_catcher != NULL)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#995: FILE: arch/um/kernel/trap.c:241:
+	else relay_signal(sig, regs);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1267: FILE: arch/um/kernel/syscall.c:1:
+/*

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#1293: FILE: arch/um/kernel/syscall.c:27:
+int nsyscalls = 0;

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1303: FILE: arch/um/kernel/syscall.c:37:
+	return(ret);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1315: FILE: arch/um/kernel/syscall.c:49:
+	return(ret);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1324: FILE: arch/um/kernel/syscall.c:58:
+	struct file * file = NULL;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1348: FILE: arch/um/kernel/syscall.c:82:
+	long err = -EINVAL;
+	if (offset & ~PAGE_MASK)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1355: FILE: arch/um/kernel/syscall.c:89:
+}
+/*

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1359: FILE: arch/um/kernel/syscall.c:93:
+long sys_pipe(unsigned long __user * fildes)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1361: FILE: arch/um/kernel/syscall.c:95:
+        int fd[2];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1361: FILE: arch/um/kernel/syscall.c:95:
+        int fd[2];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1362: FILE: arch/um/kernel/syscall.c:96:
+        long error;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1362: FILE: arch/um/kernel/syscall.c:96:
+        long error;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1364: FILE: arch/um/kernel/syscall.c:98:
+        error = do_pipe(fd);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1364: FILE: arch/um/kernel/syscall.c:98:
+        error = do_pipe(fd);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1365: FILE: arch/um/kernel/syscall.c:99:
+        if (!error) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1365: FILE: arch/um/kernel/syscall.c:99:
+        if (!error) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1367: FILE: arch/um/kernel/syscall.c:101:
+                        error = -EFAULT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1367: FILE: arch/um/kernel/syscall.c:101:
+                        error = -EFAULT;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1368: FILE: arch/um/kernel/syscall.c:102:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1368: FILE: arch/um/kernel/syscall.c:102:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1369: FILE: arch/um/kernel/syscall.c:103:
+        return error;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1369: FILE: arch/um/kernel/syscall.c:103:
+        return error;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1372: FILE: arch/um/kernel/syscall.c:106:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1373: FILE: arch/um/kernel/syscall.c:107:
+long sys_uname(struct old_utsname __user * name)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1376: FILE: arch/um/kernel/syscall.c:110:
+	long err;
+	if (!name)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1379: FILE: arch/um/kernel/syscall.c:113:
+	err = copy_to_user(name, utsname(), sizeof (*name));

ERROR:SPACING: spaces required around that '?' (ctx:VxO)
#1381: FILE: arch/um/kernel/syscall.c:115:
+	return err?-EFAULT:0;
 	          ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#1381: FILE: arch/um/kernel/syscall.c:115:
+	return err?-EFAULT:0;
 	           ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#1381: FILE: arch/um/kernel/syscall.c:115:
+	return err?-EFAULT:0;
 	                  ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1384: FILE: arch/um/kernel/syscall.c:118:
+long sys_olduname(struct oldold_utsname __user * name)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1390: FILE: arch/um/kernel/syscall.c:124:
+	if (!access_ok(VERIFY_WRITE,name,sizeof(struct oldold_utsname)))
 	                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1390: FILE: arch/um/kernel/syscall.c:124:
+	if (!access_ok(VERIFY_WRITE,name,sizeof(struct oldold_utsname)))
 	                                ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1393: FILE: arch/um/kernel/syscall.c:127:
+  ^Idown_read(&uts_sem);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1393: FILE: arch/um/kernel/syscall.c:127:
+  ^Idown_read(&uts_sem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1393: FILE: arch/um/kernel/syscall.c:127:
+  ^Idown_read(&uts_sem);$

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1420: FILE: arch/um/kernel/syscall.c:154:
+static int syscall_index = 0;

ERROR:SPACING: space required before the open parenthesis '('
#1428: FILE: arch/um/kernel/syscall.c:162:
+	if(++syscall_index == limit)

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1431: FILE: arch/um/kernel/syscall.c:165:
+	return(ret);

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.60075.commit.11ce4ba58a756dab852efe2861af26ea1a898058 total: 114 errors, 60 warnings, 23 checks, 946 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.60075.commit.11ce4ba58a756dab852efe2861af26ea1a898058 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
