WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#62: FILE: include/linux/mm.h:977:
+ * ^Iadd_active_range(node_id, start_pfn, end_pfn)$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#74: FILE: include/linux/mm.h:989:
+extern void free_area_init_nodes(unsigned long max_dma_pfn,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#75: FILE: include/linux/mm.h:990:
+extern void free_area_init_nodes(unsigned long max_dma_pfn,
+					unsigned long max_dma32_pfn,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#78: FILE: include/linux/mm.h:993:
+extern void add_active_range(unsigned int nid, unsigned long start_pfn,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#79: FILE: include/linux/mm.h:994:
+extern void add_active_range(unsigned int nid, unsigned long start_pfn,
+					unsigned long end_pfn);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#80: FILE: include/linux/mm.h:995:
+extern void shrink_active_range(unsigned int nid, unsigned long old_end_pfn,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#81: FILE: include/linux/mm.h:996:
+extern void shrink_active_range(unsigned int nid, unsigned long old_end_pfn,
+						unsigned long new_end_pfn);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#82: FILE: include/linux/mm.h:997:
+extern void remove_all_active_ranges(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#83: FILE: include/linux/mm.h:998:
+extern unsigned long absent_pages_in_range(unsigned long start_pfn,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#84: FILE: include/linux/mm.h:999:
+extern unsigned long absent_pages_in_range(unsigned long start_pfn,
+						unsigned long end_pfn);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#85: FILE: include/linux/mm.h:1000:
+extern void get_pfn_range_for_nid(unsigned int nid,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#86: FILE: include/linux/mm.h:1001:
+extern void get_pfn_range_for_nid(unsigned int nid,
+			unsigned long *start_pfn, unsigned long *end_pfn);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#87: FILE: include/linux/mm.h:1002:
+extern unsigned long find_min_pfn_with_active_regions(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#88: FILE: include/linux/mm.h:1003:
+extern unsigned long find_max_pfn_with_active_regions(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#89: FILE: include/linux/mm.h:1004:
+extern void free_bootmem_with_active_regions(int nid,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#90: FILE: include/linux/mm.h:1005:
+extern void free_bootmem_with_active_regions(int nid,
+						unsigned long max_low_pfn);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#91: FILE: include/linux/mm.h:1006:
+extern void sparse_memory_present_with_active_regions(int nid);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#153: FILE: mm/page_alloc.c:105:
+      #define MAX_ACTIVE_REGIONS (MAX_NUMNODES*50)
                                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#160: FILE: mm/page_alloc.c:112:
+  struct node_active_region __initdata early_node_map[MAX_ACTIVE_REGIONS];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#161: FILE: mm/page_alloc.c:113:
+  int __initdata nr_nodemap_entries;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#162: FILE: mm/page_alloc.c:114:
+  unsigned long __initdata arch_zone_lowest_possible_pfn[MAX_NR_ZONES];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#163: FILE: mm/page_alloc.c:115:
+  unsigned long __initdata arch_zone_highest_possible_pfn[MAX_NR_ZONES];$

WARNING:TYPO_SPELLING: 'regardles' may be misspelled - perhaps 'regardless'?
#217: FILE: mm/page_alloc.c:2095:
+ * Note: nid == MAX_NUMNODES returns next region regardles of node
                                                  ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#252: FILE: mm/page_alloc.c:2130:
+#define for_each_active_range_index_in_nid(i, nid) \
+	for (i = first_active_region_index_in_nid(nid); i != -1; \
+				i = next_active_region_index_in_nid(i, nid))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'nid' - possible side-effects?
#252: FILE: mm/page_alloc.c:2130:
+#define for_each_active_range_index_in_nid(i, nid) \
+	for (i = first_active_region_index_in_nid(nid); i != -1; \
+				i = next_active_region_index_in_nid(i, nid))

WARNING:REPEATED_WORD: Possible repeated word: 'this'
#263: FILE: mm/page_alloc.c:2141:
+ * add_active_ranges() contain no holes and may be freed, this
+ * this function may be used instead of calling free_bootmem() manually.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#266: FILE: mm/page_alloc.c:2144:
+void __init free_bootmem_with_active_regions(int nid,
+						unsigned long max_low_pfn)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#282: FILE: mm/page_alloc.c:2160:
+		free_bootmem_node(NODE_DATA(early_node_map[i].nid),
+				PFN_PHYS(early_node_map[i].start_pfn),

WARNING:REPEATED_WORD: Possible repeated word: 'this'
#293: FILE: mm/page_alloc.c:2171:
+ * add_active_ranges() contain no holes and may be freed, this
+ * this function may be used instead of calling memory_present() manually.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#301: FILE: mm/page_alloc.c:2179:
+		memory_present(early_node_map[i].nid,
+				early_node_map[i].start_pfn,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#317: FILE: mm/page_alloc.c:2195:
+void __init get_pfn_range_for_nid(unsigned int nid,
+			unsigned long *start_pfn, unsigned long *end_pfn)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#329: FILE: mm/page_alloc.c:2207:
+		printk(KERN_WARNING "Node %u active with no memory\n", nid);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#339: FILE: mm/page_alloc.c:2217:
+unsigned long __init zone_spanned_pages_in_node(int nid,
+					unsigned long zone_type,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#367: FILE: mm/page_alloc.c:2245:
+unsigned long __init __absent_pages_in_range(int nid,
+				unsigned long range_start_pfn,

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#383: FILE: mm/page_alloc.c:2261:
+	for (; i != -1; i = next_active_region_index_in_nid(i, nid)) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'cound' may be misspelled - perhaps 'could'?
#392: FILE: mm/page_alloc.c:2270:
+		/* Update the hole size cound and move on */
 		                        ^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#394: FILE: mm/page_alloc.c:2272:
+			BUG_ON(prev_end_pfn > start_pfn);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#411: FILE: mm/page_alloc.c:2289:
+unsigned long __init absent_pages_in_range(unsigned long start_pfn,
+							unsigned long end_pfn)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#418: FILE: mm/page_alloc.c:2296:
+unsigned long __init zone_absent_pages_in_node(int nid,
+					unsigned long zone_type,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#427: FILE: mm/page_alloc.c:2305:
+static inline unsigned long zone_spanned_pages_in_node(int nid,
+					unsigned long zone_type,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#434: FILE: mm/page_alloc.c:2312:
+static inline unsigned long zone_absent_pages_in_node(int nid,
+						unsigned long zone_type,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#445: FILE: mm/page_alloc.c:2323:
+static void __init calculate_node_totalpages(struct pglist_data *pgdat,
+		unsigned long *zones_size, unsigned long *zholes_size)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#459: FILE: mm/page_alloc.c:2337:
+			zone_absent_pages_in_node(pgdat->node_id, i,
+								zholes_size);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#461: FILE: mm/page_alloc.c:2339:
+	printk(KERN_DEBUG "On node %d totalpages: %lu\n", pgdat->node_id,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#462: FILE: mm/page_alloc.c:2340:
+	printk(KERN_DEBUG "On node %d totalpages: %lu\n", pgdat->node_id,
+							realtotalpages);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#523: FILE: mm/page_alloc.c:2475:
+void __init add_active_range(unsigned int nid, unsigned long start_pfn,
+						unsigned long end_pfn)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#527: FILE: mm/page_alloc.c:2479:
+	printk(KERN_DEBUG "Entering add_active_range(%d, %lu, %lu) "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'add_active_range', this function's name, in a string
#527: FILE: mm/page_alloc.c:2479:
+	printk(KERN_DEBUG "Entering add_active_range(%d, %lu, %lu) "

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#528: FILE: mm/page_alloc.c:2480:
+	printk(KERN_DEBUG "Entering add_active_range(%d, %lu, %lu) "
+			  "%d entries of %d used\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#539: FILE: mm/page_alloc.c:2491:
+		if (start_pfn >= early_node_map[i].start_pfn &&
+				end_pfn <= early_node_map[i].end_pfn)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#544: FILE: mm/page_alloc.c:2496:
+		if (start_pfn <= early_node_map[i].end_pfn &&
+				end_pfn > early_node_map[i].end_pfn) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#551: FILE: mm/page_alloc.c:2503:
+		if (start_pfn < early_node_map[i].end_pfn &&
+				end_pfn >= early_node_map[i].start_pfn) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#559: FILE: mm/page_alloc.c:2511:
+		printk(KERN_CRIT "More than %d memory regions, truncating\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#560: FILE: mm/page_alloc.c:2512:
+		printk(KERN_CRIT "More than %d memory regions, truncating\n",
+							MAX_ACTIVE_REGIONS);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#582: FILE: mm/page_alloc.c:2534:
+void __init shrink_active_range(unsigned int nid, unsigned long old_end_pfn,
+						unsigned long new_end_pfn)

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - void __init remove_all_active_ranges() should probably be void __init remove_all_active_ranges(void)
#600: FILE: mm/page_alloc.c:2552:
+void __init remove_all_active_ranges()

Function declarations without arguments like::

  int foo()

should be::

  int foo(void)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#625: FILE: mm/page_alloc.c:2577:
+	sort(early_node_map, (size_t)nr_nodemap_entries,
+			sizeof(struct node_active_region),

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#638: FILE: mm/page_alloc.c:2590:
+	printk(KERN_WARNING "Could not find start_pfn for node %lu\n", nid);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#687: FILE: mm/page_alloc.c:2639:
+void __init free_area_init_nodes(unsigned long arch_max_dma_pfn,
+				unsigned long arch_max_dma32_pfn,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#696: FILE: mm/page_alloc.c:2648:
+	memset(arch_zone_lowest_possible_pfn, 0,
+				sizeof(arch_zone_lowest_possible_pfn));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#698: FILE: mm/page_alloc.c:2650:
+	memset(arch_zone_highest_possible_pfn, 0,
+				sizeof(arch_zone_highest_possible_pfn));

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#707: FILE: mm/page_alloc.c:2659:
+			arch_zone_highest_possible_pfn[i-1];
 			                                ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#713: FILE: mm/page_alloc.c:2665:
+	printk("Zone PFN ranges:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#715: FILE: mm/page_alloc.c:2667:
+		printk("  %-8s %8lu -> %8lu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#716: FILE: mm/page_alloc.c:2668:
+		printk("  %-8s %8lu -> %8lu\n",
+				zone_names[i],

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#721: FILE: mm/page_alloc.c:2673:
+	printk("early_node_map[%d] active PFN ranges\n", nr_nodemap_entries);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#723: FILE: mm/page_alloc.c:2675:
+		printk("  %3d: %8lu -> %8lu\n", early_node_map[i].nid,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#724: FILE: mm/page_alloc.c:2676:
+		printk("  %3d: %8lu -> %8lu\n", early_node_map[i].nid,
+						early_node_map[i].start_pfn,

WARNING:LINE_SPACING: Missing a blank line after declarations
#730: FILE: mm/page_alloc.c:2682:
+		pg_data_t *pgdat = NODE_DATA(nid);
+		free_area_init_node(nid, pgdat, NULL,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#731: FILE: mm/page_alloc.c:2683:
+		free_area_init_node(nid, pgdat, NULL,
+				find_min_pfn_for_node(nid), NULL);

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.59550.commit.a9e89149904420f6da95eb361c47e37a33235ff6 total: 1 errors, 22 warnings, 47 checks, 679 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.59550.commit.a9e89149904420f6da95eb361c47e37a33235ff6 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
