CHECK:CAMELCASE: Avoid CamelCase: <extAlloc>
#74: FILE: fs/jfs/inode.c:230:
+	rc = extAlloc(ip, xlen, lblock64, &xad, 0);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#147: FILE: fs/jfs/jfs_extent.c:86:
+extAlloc(struct inode *ip, s64 xlen, s64 pno, xad_t * xp, int abnr)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#183: FILE: fs/jfs/jfs_extent.c:214:
+int extRealloc(struct inode *ip, s64 nxlen, xad_t * xp, int abnr)

CHECK:CAMELCASE: Avoid CamelCase: <extRealloc>
#183: FILE: fs/jfs/jfs_extent.c:214:
+int extRealloc(struct inode *ip, s64 nxlen, xad_t * xp, int abnr)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#192: FILE: fs/jfs/jfs_extent.c:479:
+	if ((rc = extAlloc(ip, nbperpage, blkno, xp, 0)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#205: FILE: fs/jfs/jfs_extent.h:25:
+extern int	extAlloc(struct inode *, s64, s64, xad_t *, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#205: FILE: fs/jfs/jfs_extent.h:25:
+extern int	extAlloc(struct inode *, s64, s64, xad_t *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 's64' should also have an identifier name
#205: FILE: fs/jfs/jfs_extent.h:25:
+extern int	extAlloc(struct inode *, s64, s64, xad_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 's64' should also have an identifier name
#205: FILE: fs/jfs/jfs_extent.h:25:
+extern int	extAlloc(struct inode *, s64, s64, xad_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'xad_t *' should also have an identifier name
#205: FILE: fs/jfs/jfs_extent.h:25:
+extern int	extAlloc(struct inode *, s64, s64, xad_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#205: FILE: fs/jfs/jfs_extent.h:25:
+extern int	extAlloc(struct inode *, s64, s64, xad_t *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#209: FILE: fs/jfs/jfs_extent.h:28:
+extern int	extRealloc(struct inode *, s64, xad_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#209: FILE: fs/jfs/jfs_extent.h:28:
+extern int	extRealloc(struct inode *, s64, xad_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 's64' should also have an identifier name
#209: FILE: fs/jfs/jfs_extent.h:28:
+extern int	extRealloc(struct inode *, s64, xad_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'xad_t *' should also have an identifier name
#209: FILE: fs/jfs/jfs_extent.h:28:
+extern int	extRealloc(struct inode *, s64, xad_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#209: FILE: fs/jfs/jfs_extent.h:28:
+extern int	extRealloc(struct inode *, s64, xad_t *, int);

CHECK:CAMELCASE: Avoid CamelCase: <diAllocAG>
#223: FILE: fs/jfs/jfs_imap.c:81:
+static int diAllocAG(struct inomap *, int, int, struct inode *);

CHECK:CAMELCASE: Avoid CamelCase: <diAllocAny>
#224: FILE: fs/jfs/jfs_imap.c:82:
+static int diAllocAny(struct inomap *, int, int, struct inode *);

CHECK:CAMELCASE: Avoid CamelCase: <diAlloc>
#242: FILE: fs/jfs/jfs_imap.c:1356:
+int diAlloc(struct inode *pip, int dir, struct inode *ip)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#269: FILE: fs/jfs/jfs_imap.c:1665:
+diAllocAG(struct inomap * imap, int agno, int dir, struct inode *ip)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#296: FILE: fs/jfs/jfs_imap.c:1735:
+diAllocAny(struct inomap * imap, int agno, int dir, struct inode *ip)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#314: FILE: fs/jfs/jfs_imap.c:2760:
+	     unsigned long inum, int is_free, struct tblock * tblk)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#336: FILE: fs/jfs/jfs_imap.h:162:
+extern int diAlloc(struct inode *, int, struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#336: FILE: fs/jfs/jfs_imap.h:162:
+extern int diAlloc(struct inode *, int, struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#336: FILE: fs/jfs/jfs_imap.h:162:
+extern int diAlloc(struct inode *, int, struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#336: FILE: fs/jfs/jfs_imap.h:162:
+extern int diAlloc(struct inode *, int, struct inode *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#341: FILE: fs/jfs/jfs_imap.h:166:
+			int is_free, struct tblock * tblk);

CHECK:CAMELCASE: Avoid CamelCase: <diUpdatePMap>
#371: FILE: fs/jfs/jfs_txnmgr.c:2396:
+		diUpdatePMap(ipimap, tblk->ino, 0, tblk);

CHECK:CAMELCASE: Avoid CamelCase: <dbUpdatePMap>
#389: FILE: fs/jfs/jfs_txnmgr.c:2454:
+				dbUpdatePMap(ipbmap, 0, xaddr,

CHECK:SPACING: No space is necessary after a cast
#398: FILE: fs/jfs/jfs_txnmgr.c:2465:
+		dbUpdatePMap(ipbmap, 0, xaddr, (s64) xlen, tblk);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#407: FILE: fs/jfs/jfs_txnmgr.c:2474:
+			dbUpdatePMap(ipbmap, 0, xaddr, (s64) xlen,

CHECK:SPACING: No space is necessary after a cast
#425: FILE: fs/jfs/jfs_txnmgr.c:2527:
+			dbUpdatePMap(ipbmap, 1, xaddr, (s64) xlen,

CHECK:CAMELCASE: Avoid CamelCase: <cmPut>
#462: FILE: fs/jfs/jfs_xtree.c:2967:
+			cmPut(cp, 1);

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.43358.commit.c524c15b7d92e76527a2bb491a0e808be799adb5 total: 7 errors, 12 warnings, 14 checks, 361 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.43358.commit.c524c15b7d92e76527a2bb491a0e808be799adb5 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
