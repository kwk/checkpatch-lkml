WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
> > > But maybe I'm misunderstanding the motivation for using cpu 0 here.  I

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#295: FILE: include/linux/cpu.h:93:
+extern int disable_nonboot_cpus(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#296: FILE: include/linux/cpu.h:94:
+extern void enable_nonboot_cpus(void);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#382: FILE: kernel/cpu.c:201:
+static int __devinit _cpu_up(unsigned int cpu)

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#405: FILE: kernel/cpu.c:236:
+int __devinit cpu_up(unsigned int cpu)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#431: FILE: kernel/cpu.c:262:
+			printk(KERN_ERR "Could not bring CPU%d up.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#432: FILE: kernel/cpu.c:263:
+			printk(KERN_ERR "Could not bring CPU%d up.\n",
+				first_cpu);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#438: FILE: kernel/cpu.c:269:
+		printk(KERN_ERR "Could not run on CPU%d\n", first_cpu);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#445: FILE: kernel/cpu.c:276:
+	printk("Disabling non-boot CPUs ...\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#452: FILE: kernel/cpu.c:283:
+			printk("CPU%d is down\n", cpu);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#454: FILE: kernel/cpu.c:285:
+			printk(KERN_ERR "Error taking CPU%d down: %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#455: FILE: kernel/cpu.c:286:
+			printk(KERN_ERR "Error taking CPU%d down: %d\n",
+				cpu, error);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#460: FILE: kernel/cpu.c:291:
+		BUG_ON(num_online_cpus() > 1);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#464: FILE: kernel/cpu.c:295:
+		printk(KERN_ERR "Non-boot CPUs are not disabled");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#481: FILE: kernel/cpu.c:311:
+	printk("Enabling non-boot CPUs ...\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#485: FILE: kernel/cpu.c:315:
+			printk("CPU%d is up\n", cpu);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#488: FILE: kernel/cpu.c:318:
+		printk(KERN_WARNING "Error taking CPU%d up: %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#489: FILE: kernel/cpu.c:319:
+		printk(KERN_WARNING "Error taking CPU%d up: %d\n",
+			cpu, error);

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.53499.commit.8f5fe86942a54967e861e3aa72a955d4ba58bca4 total: 0 errors, 13 warnings, 5 checks, 296 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.53499.commit.8f5fe86942a54967e861e3aa72a955d4ba58bca4 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
