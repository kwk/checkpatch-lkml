WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
 > > > Then you might consider slightly changing the debug messages, because they

WARNING:TYPO_SPELLING: 'differenciate' may be misspelled - perhaps 'differentiate'?
#33: 
 > > > are identical in list_add and list_del. Having a way to differenciate
                                                               ^^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#67: FILE: include/linux/list.h:66:
+extern void list_add(struct list_head *new, struct list_head *head);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#85: FILE: include/linux/list.h:169:
+extern void list_del(struct list_head *entry);

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#98: FILE: lib/Kconfig.debug:314:
+config DEBUG_LIST
+	bool "Debug linked list manipulation"
+	depends on DEBUG_KERNEL
+	help
+	  Enable this to turn on extended checks in the linked-list
+	  walking routines.
+
+	  If unsure, say N.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#123: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#128: FILE: lib/list_debug.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#150: FILE: lib/list_debug.c:23:
+		printk("List corruption. next->prev should be %p, but was %p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#151: FILE: lib/list_debug.c:24:
+		printk("List corruption. next->prev should be %p, but was %p\n",
+			head, head->next->prev);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#152: FILE: lib/list_debug.c:25:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#155: FILE: lib/list_debug.c:28:
+		printk("List corruption. prev->next should be %p, but was %p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#156: FILE: lib/list_debug.c:29:
+		printk("List corruption. prev->next should be %p, but was %p\n",
+			head, head->prev->next);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#157: FILE: lib/list_debug.c:30:
+		BUG();

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#173: FILE: lib/list_debug.c:46:
+		printk("List corruption. prev->next should be %p, but was %p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#174: FILE: lib/list_debug.c:47:
+		printk("List corruption. prev->next should be %p, but was %p\n",
+			entry, entry->prev->next);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#175: FILE: lib/list_debug.c:48:
+		BUG();

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#178: FILE: lib/list_debug.c:51:
+		printk("List corruption. next->prev should be %p, but was %p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#179: FILE: lib/list_debug.c:52:
+		printk("List corruption. next->prev should be %p, but was %p\n",
+			entry, entry->next->prev);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#180: FILE: lib/list_debug.c:53:
+		BUG();

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.57213.commit.f0511bc594220dd0df9c2f2b11736bb72c1c5c28 total: 0 errors, 13 warnings, 6 checks, 113 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.57213.commit.f0511bc594220dd0df9c2f2b11736bb72c1c5c28 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
