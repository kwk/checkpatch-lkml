WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#44: FILE: kernel/unwind.c:140:
+static unsigned unwind_debug;

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#47: FILE: kernel/unwind.c:143:
+	unwind_debug = simple_strtoul(s, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#50: FILE: kernel/unwind.c:146:
+__setup("unwind_debug=", unwind_debug_setup);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'lvl' may be better as '(lvl)' to avoid precedence issues
#51: FILE: kernel/unwind.c:147:
+#define dprintk(lvl, fmt, args...) \
+	((void)(lvl > unwind_debug \
+	 || printk(KERN_DEBUG "unwind: " fmt "\n", ##args)))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#53: FILE: kernel/unwind.c:149:
+	((void)(lvl > unwind_debug \
+	 || printk(KERN_DEBUG "unwind: " fmt "\n", ##args)))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#53: FILE: kernel/unwind.c:149:
+	 || printk(KERN_DEBUG "unwind: " fmt "\n", ##args)))

CHECK:CAMELCASE: Avoid CamelCase: <hdrSize>
#62: FILE: kernel/unwind.c:295:
+	dprintk(2, "Binary lookup table size for %s: %lu bytes", table->name, hdrSize);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <ptrType>
#71: FILE: kernel/unwind.c:515:
+	if (ptrType < 0 || ptrType == DW_EH_PE_omit) {

CHECK:CAMELCASE: Avoid CamelCase: <pLoc>
#72: FILE: kernel/unwind.c:516:
+		dprintk(1, "Invalid pointer encoding %02X (%p,%p).", ptrType, *pLoc, end);

ERROR:CODE_INDENT: code indent should use tabs where possible
#122: FILE: kernel/unwind.c:566:
+^I^I        ptrType, ptr.p8, end);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#131: FILE: kernel/unwind.c:577:
+^I^I        ptrType, *pLoc, end);$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#136: FILE: kernel/unwind.c:581:
 	if ((ptrType & DW_EH_PE_indirect)
+	    && probe_kernel_address((unsigned long *)value, value)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#138: FILE: kernel/unwind.c:583:
+^I^I        value, *pLoc, end);$

CHECK:CAMELCASE: Avoid CamelCase: <stackDepth>
#149: FILE: kernel/unwind.c:734:
+				if (state->stackDepth >= MAX_STACK_DEPTH) {

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#172: FILE: kernel/unwind.c:787:
+				dprintk(1, "Unrecognized CFI op %02X (%p,%p).", ptr.p8[-1], ptr.p8 - 1, end);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: space required before the open parenthesis '('
#199: FILE: kernel/unwind.c:885:
+		if(hdr && !fde)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#208: FILE: kernel/unwind.c:908:
+			if(!fde)

ERROR:SPACING: space required before the open parenthesis '('
#217: FILE: kernel/unwind.c:941:
+			if(!fde)

ERROR:SPACING: space required before the open parenthesis '('
#226: FILE: kernel/unwind.c:976:
+		if(!cie)

ERROR:CODE_INDENT: code indent should use tabs where possible
#236: FILE: kernel/unwind.c:988:
+^I^I         || UNW_SP(frame) % sleb128abs(state.dataAlign)) {$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#236: FILE: kernel/unwind.c:988:
 		else if (UNW_PC(frame) % state.codeAlign
+		         || UNW_SP(frame) % sleb128abs(state.dataAlign)) {

CHECK:CAMELCASE: Avoid CamelCase: <dataAlign>
#236: FILE: kernel/unwind.c:988:
+		         || UNW_SP(frame) % sleb128abs(state.dataAlign)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#238: FILE: kernel/unwind.c:990:
+^I^I^I        UNW_PC(frame), UNW_SP(frame));$

ERROR:SPACING: space required before the open parenthesis '('
#249: FILE: kernel/unwind.c:1006:
+		if(!cie)

ERROR:SPACING: space required before the open parenthesis '('
#258: FILE: kernel/unwind.c:1021:
+		if(!fde)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#268: FILE: kernel/unwind.c:1081:
 	   || FRAME_REG(state.cfa.reg, unsigned long) % sizeof(unsigned long)
+	   || state.cfa.offs % sizeof(unsigned long)) {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'unwind', this function's name, in a string
#269: FILE: kernel/unwind.c:1082:
+		dprintk(1, "Unusable unwind info (%p,%p).", ptr, end);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:CODE_INDENT: code indent should use tabs where possible
#280: FILE: kernel/unwind.c:1110:
+^I^I^I        i, state.regs[i].where);$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#289: FILE: kernel/unwind.c:1119:
 			   || REG_INVALID(state.regs[i].value)
+			   || reg_info[i].width > reg_info[state.regs[i].value].width) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#291: FILE: kernel/unwind.c:1121:
+^I^I^I^I        i, state.regs[i].value);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#302: FILE: kernel/unwind.c:1134:
+^I^I^I^I        reg_info[state.regs[i].value].width,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#303: FILE: kernel/unwind.c:1135:
+^I^I^I^I        state.regs[i].value);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#312: FILE: kernel/unwind.c:1161:
+^I^I^I^I        reg_info[i].width, i);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#320: FILE: kernel/unwind.c:1168:
+^I^I^I^I        reg_info[i].width, i);$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#331: FILE: kernel/unwind.c:1182:
 				    || addr + sizeof(unsigned long) < addr
+				    || addr + sizeof(unsigned long) > endLoc) {

CHECK:CAMELCASE: Avoid CamelCase: <endLoc>
#331: FILE: kernel/unwind.c:1182:
+				    || addr + sizeof(unsigned long) > endLoc) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#333: FILE: kernel/unwind.c:1184:
+^I^I^I^I^I        addr, state.regs[i].value);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#344: FILE: kernel/unwind.c:1195:
+^I^I^I^I^I        reg_info[i].width, i);$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#354: FILE: kernel/unwind.c:1204:
 	if (UNW_PC(frame) % state.codeAlign
+	    || UNW_SP(frame) % sleb128abs(state.dataAlign)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#356: FILE: kernel/unwind.c:1206:
+^I^I        UNW_PC(frame), UNW_SP(frame));$

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.12658.commit.9cef3e96bcee34a51600169804be1556689c8272 total: 20 errors, 5 warnings, 15 checks, 300 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.12658.commit.9cef3e96bcee34a51600169804be1556689c8272 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
