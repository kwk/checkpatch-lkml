WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#35: 
One particular design issue with the current slab is that it is build on the

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#137: FILE: mm/slabifier.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#217: FILE: mm/slabifier.c:81:
+static void __always_inline add_partial(struct slab *s, struct page *page)

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#225: FILE: mm/slabifier.c:89:
+static void __always_inline remove_partial(struct slab *s,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#226: FILE: mm/slabifier.c:90:
+static void __always_inline remove_partial(struct slab *s,
+						struct page *page)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#240: FILE: mm/slabifier.c:104:
+static __always_inline int lock_and_del_slab(struct slab *s,
+						struct page *page)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#264: FILE: mm/slabifier.c:128:
+		if (likely(page_to_nid(page) == searchnode) &&
[...]
+				goto out;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#265: FILE: mm/slabifier.c:129:
+		if (likely(page_to_nid(page) == searchnode) &&
+			lock_and_del_slab(s, page))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#302: FILE: mm/slabifier.c:166:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#310: FILE: mm/slabifier.c:174:
+		printk(KERN_CRIT "Not a valid slab page @%p flags=%lx"

WARNING:SPLIT_STRING: quoted string split across lines
#311: FILE: mm/slabifier.c:175:
+		printk(KERN_CRIT "Not a valid slab page @%p flags=%lx"
+			" mapping=%p count=%d \n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#311: FILE: mm/slabifier.c:175:
+			" mapping=%p count=%d \n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#313: FILE: mm/slabifier.c:177:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#319: FILE: mm/slabifier.c:183:
+static int check_valid_pointer(struct slab *s, struct page *page,
+					 void *object, void *origin)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#325: FILE: mm/slabifier.c:189:
+		printk(KERN_CRIT "slab %s size %d: pointer %p->%p\nnot in"

WARNING:SPLIT_STRING: quoted string split across lines
#326: FILE: mm/slabifier.c:190:
+		printk(KERN_CRIT "slab %s size %d: pointer %p->%p\nnot in"
+			" range (%p-%p) in page %p\n", s->sc.name, s->size,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#333: FILE: mm/slabifier.c:197:
+		printk(KERN_CRIT "slab %s size %d: pointer %p->%p\n"

WARNING:SPLIT_STRING: quoted string split across lines
#335: FILE: mm/slabifier.c:199:
+			"does not properly point"
+			"to an object in page %p\n",

WARNING:MISSING_SPACE: break quoted strings at a space character
#335: FILE: mm/slabifier.c:199:
+			"does not properly point"
+			"to an object in page %p\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#370: FILE: mm/slabifier.c:234:
+		printk(KERN_CRIT "slab %s: page %p wrong object count."

WARNING:SPLIT_STRING: quoted string split across lines
#371: FILE: mm/slabifier.c:235:
+		printk(KERN_CRIT "slab %s: page %p wrong object count."
+			" counter is %d but counted were %d\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#375: FILE: mm/slabifier.c:239:
+		printk(KERN_CRIT "****** Trying to continue by marking "

WARNING:SPLIT_STRING: quoted string split across lines
#376: FILE: mm/slabifier.c:240:
+		printk(KERN_CRIT "****** Trying to continue by marking "
+			"all objects in the slab used (memory leak!)\n");

CHECK:CAMELCASE: Avoid CamelCase: <__ClearPageSlab>
#399: FILE: mm/slabifier.c:263:
+	__ClearPageSlab(page);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <__ClearPageSlabsingle>
#400: FILE: mm/slabifier.c:264:
+	__ClearPageSlabsingle(page);

CHECK:CAMELCASE: Avoid CamelCase: <__SetPageSlab>
#426: FILE: mm/slabifier.c:290:
+	__SetPageSlab(page);

CHECK:BRACES: braces {} should be used on all arms of this statement
#428: FILE: mm/slabifier.c:292:
+	if (s->objects > 1) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#443: FILE: mm/slabifier.c:307:
+	} else

CHECK:CAMELCASE: Avoid CamelCase: <__SetPageSlabsingle>
#444: FILE: mm/slabifier.c:308:
+		__SetPageSlabsingle(page);

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#459: FILE: mm/slabifier.c:323:
+static void __always_inline putback_slab(struct slab *s, struct page *page)

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#474: FILE: mm/slabifier.c:338:
+static void __always_inline deactivate_slab(struct slab *s,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#475: FILE: mm/slabifier.c:339:
+static void __always_inline deactivate_slab(struct slab *s,
+						struct page *page, int cpu)

CHECK:CAMELCASE: Avoid CamelCase: <__ClearPageActive>
#478: FILE: mm/slabifier.c:342:
+	__ClearPageActive(page);

CHECK:CAMELCASE: Avoid CamelCase: <__ClearPageReferenced>
#479: FILE: mm/slabifier.c:343:
+	__ClearPageReferenced(page);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#513: FILE: mm/slabifier.c:377:
+	for_each_online_cpu(cpu) {
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#518: FILE: mm/slabifier.c:382:
+		if (PageReferenced(page)) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#521: FILE: mm/slabifier.c:385:
+		} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#549: FILE: mm/slabifier.c:413:
+static __always_inline void *__slab_alloc(struct slab_cache *sc,
+					gfp_t gfpflags, int node)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#574: FILE: mm/slabifier.c:438:
+	page->freelist = next_object = object[page->offset];

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:CAMELCASE: Avoid CamelCase: <__SetPageReferenced>
#575: FILE: mm/slabifier.c:439:
+	__SetPageReferenced(page);

CHECK:BRACES: braces {} should be used on all arms of this statement
#617: FILE: mm/slabifier.c:481:
+	if (s->active[cpu]) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#622: FILE: mm/slabifier.c:486:
+	} else

CHECK:CAMELCASE: Avoid CamelCase: <__SetPageActive>
#625: FILE: mm/slabifier.c:489:
+	__SetPageActive(page);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#643: FILE: mm/slabifier.c:507:
+static void *slab_alloc_node(struct slab_cache *sc, gfp_t gfpflags,
+							int node)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#655: FILE: mm/slabifier.c:519:
+	struct page * page;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#689: FILE: mm/slabifier.c:553:
+	prior = object[page->offset] = page->freelist;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#724: FILE: mm/slabifier.c:588:
+	printk(KERN_CRIT "slab_free %s: object %p already free.\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'slab_free', this function's name, in a string
#724: FILE: mm/slabifier.c:588:
+	printk(KERN_CRIT "slab_free %s: object %p already free.\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#725: FILE: mm/slabifier.c:589:
+	printk(KERN_CRIT "slab_free %s: object %p already free.\n",
+					s->sc.name, object);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#731: FILE: mm/slabifier.c:595:
+		printk(KERN_CRIT "slab_free %s size %d: attempt to free "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'slab_free', this function's name, in a string
#731: FILE: mm/slabifier.c:595:
+		printk(KERN_CRIT "slab_free %s size %d: attempt to free "

WARNING:SPLIT_STRING: quoted string split across lines
#732: FILE: mm/slabifier.c:596:
+		printk(KERN_CRIT "slab_free %s size %d: attempt to free "
+			"object(%p) outside of slab.\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#738: FILE: mm/slabifier.c:602:
+		printk(KERN_CRIT

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'slab_free', this function's name, in a string
#739: FILE: mm/slabifier.c:603:
+			"slab_free : no slab(NULL) for object %p.\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#744: FILE: mm/slabifier.c:608:
+	printk(KERN_CRIT "slab_free %s(%d): object at %p"

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'slab_free', this function's name, in a string
#744: FILE: mm/slabifier.c:608:
+	printk(KERN_CRIT "slab_free %s(%d): object at %p"

WARNING:SPLIT_STRING: quoted string split across lines
#745: FILE: mm/slabifier.c:609:
+	printk(KERN_CRIT "slab_free %s(%d): object at %p"
+			" belongs to slab %s(%d)\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#751: FILE: mm/slabifier.c:615:
+	printk(KERN_CRIT "***** Trying to continue by not "

WARNING:SPLIT_STRING: quoted string split across lines
#752: FILE: mm/slabifier.c:616:
+	printk(KERN_CRIT "***** Trying to continue by not "
+			"freeing object.\n");

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#760: FILE: mm/slabifier.c:624:
+	struct page * page = virt_to_page(x);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#793: FILE: mm/slabifier.c:657:
+static struct slab_cache *slab_create(struct slab_control *x,
+	const struct slab_cache *sc)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#799: FILE: mm/slabifier.c:663:
+	BUG_ON(sizeof(struct slab_control) < sizeof(struct slab));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#806: FILE: mm/slabifier.c:670:
+	if (sc->offset > s->size - sizeof(void *) ||
+			(sc->offset % sizeof(void*)))

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#806: FILE: mm/slabifier.c:670:
+			(sc->offset % sizeof(void*)))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#810: FILE: mm/slabifier.c:674:
+	BUG_ON(s->offset > 65535);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#812: FILE: mm/slabifier.c:676:
+	BUG_ON(s->objects > 65535);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#838: FILE: mm/slabifier.c:702:
+	struct page * page;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#860: FILE: mm/slabifier.c:724:
+static unsigned long slab_object_size(struct slab_cache *sc,
+						const void *object)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#865: FILE: mm/slabifier.c:729:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#869: FILE: mm/slabifier.c:733:
+		BUG_ON(sc && s != sc);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#873: FILE: mm/slabifier.c:737:
+	BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#884: FILE: mm/slabifier.c:748:
+static int move_slab_objects(struct slab *s, struct page *page,
+			 int (*move_objects)(struct slab_cache *, void *))

ERROR:SPACING: spaces required around that '+=' (ctx:VxW)
#892: FILE: mm/slabifier.c:756:
+		for (p = addr; p < addr + s->objects; p+= s->size) {
 		                                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#929: FILE: mm/slabifier.c:793:
+static int slab_shrink(struct slab_cache *sc,
+			int (*move_object)(struct slab_cache *, void *))

ERROR:SPACING: space prohibited before that close parenthesis ')'
#939: FILE: mm/slabifier.c:803:
+	for(i = 0; s->nr_partial > 1 && i < s->nr_partial - 1; i++ ) {

ERROR:SPACING: space required before the open parenthesis '('
#939: FILE: mm/slabifier.c:803:
+	for(i = 0; s->nr_partial > 1 && i < s->nr_partial - 1; i++ ) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#940: FILE: mm/slabifier.c:804:
+		struct page * page;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#954: FILE: mm/slabifier.c:818:
+			if (move_slab_objects(s,
+					page, move_object) == 0)

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#967: FILE: mm/slabifier.c:831:
+
+}

CHECK:BRACES: braces {} should be used on all arms of this statement
#985: FILE: mm/slabifier.c:849:
+		if (!page->inuse) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#988: FILE: mm/slabifier.c:852:
+		} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1026: FILE: mm/slabifier.c:890:
+static unsigned long slab_objects(struct slab_cache *sc,
+	unsigned long *p_total, unsigned long *p_active,

WARNING:MISORDERED_TYPE: type 'short unsigned' should be specified in [[un]signed] [short|int|long|long long] order
#1098: FILE: include/linux/mm.h:235:
+			short unsigned int inuse;

WARNING:MISORDERED_TYPE: type 'short unsigned' should be specified in [[un]signed] [short|int|long|long long] order
#1099: FILE: include/linux/mm.h:236:
+			short unsigned int offset;

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.41715.commit.b747b23e16ae9cfa06261da4f8da503bc01f1186 total: 12 errors, 35 warnings, 37 checks, 1007 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.41715.commit.b747b23e16ae9cfa06261da4f8da503bc01f1186 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
