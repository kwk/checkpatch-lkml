WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#69: FILE: fs/proc/base.c:1787:
+	REG("container",  S_IRUGO, container),

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#79: FILE: fs/proc/base.c:2064:
+	REG("container",  S_IRUGO, container),

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#89: FILE: include/linux/container.h:1:
+#ifndef _LINUX_CONTAINER_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#107: FILE: include/linux/container.h:19:
+extern int container_init_early(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#108: FILE: include/linux/container.h:20:
+extern int container_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#109: FILE: include/linux/container.h:21:
+extern void container_init_smp(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#110: FILE: include/linux/container.h:22:
+extern void container_fork(struct task_struct *p);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#111: FILE: include/linux/container.h:23:
+extern void container_exit(struct task_struct *p);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#113: FILE: include/linux/container.h:25:
+extern struct file_operations proc_container_operations;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#115: FILE: include/linux/container.h:27:
+extern void container_lock(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#116: FILE: include/linux/container.h:28:
+extern void container_unlock(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#118: FILE: include/linux/container.h:30:
+extern void container_manage_lock(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#119: FILE: include/linux/container.h:31:
+extern void container_manage_unlock(void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#157: FILE: include/linux/container.h:69:
+	int (*open) (struct inode *inode, struct file *file);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: Unnecessary space before function pointer arguments
#158: FILE: include/linux/container.h:70:
+	ssize_t (*read) (struct container *cont, struct cftype *cft,

WARNING:SPACING: Unnecessary space before function pointer arguments
#161: FILE: include/linux/container.h:73:
+	ssize_t (*write) (struct container *cont, struct cftype *cft,

WARNING:SPACING: Unnecessary space before function pointer arguments
#164: FILE: include/linux/container.h:76:
+	int (*release) (struct inode *inode, struct file *file);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#262: FILE: kernel/container.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#263: FILE: kernel/container.c:2:
+ *  kernel/container.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#320: FILE: kernel/container.c:59:
+#include <asm/uaccess.h>

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#321: FILE: kernel/container.c:60:
+#include <asm/atomic.h>

WARNING:NEW_TYPEDEFS: do not add new typedefs
#334: FILE: kernel/container.c:73:
+typedef enum {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#468: FILE: kernel/container.c:207:
+		inode->i_atime = inode->i_mtime = inode->i_ctime = CURRENT_TIME;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:LINE_SPACING: Missing a blank line after declarations
#479: FILE: kernel/container.c:218:
+		struct container *cont = dentry->d_fsdata;
+		BUG_ON(!(container_is_removed(cont)));

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#479: FILE: kernel/container.c:218:
+		BUG_ON(!(container_is_removed(cont)));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#482: FILE: kernel/container.c:221:
+	iput(inode);
 	^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:CONST_STRUCT: struct dentry_operations should normally be const
#485: FILE: kernel/container.c:224:
+static struct dentry_operations container_dops = {

WARNING:LINE_SPACING: Missing a blank line after declarations
#492: FILE: kernel/container.c:231:
+	struct dentry *d = lookup_one_len(name, parent, strlen(name));
+	if (!IS_ERR(d))

WARNING:LINE_SPACING: Missing a blank line after declarations
#517: FILE: kernel/container.c:256:
+		struct dentry *d = list_entry(node, struct dentry, d_u.d_child);
+		list_del_init(node);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#539: FILE: kernel/container.c:278:
+static int container_fill_super(struct super_block *sb, void *unused_data,
+							int unused_silent)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IXUGO | S_IWUSR' are not preferred. Consider using octal permissions '0755'.
#550: FILE: kernel/container.c:289:
+	inode = container_new_inode(S_IFDIR | S_IRUGO | S_IXUGO | S_IWUSR);

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#562: FILE: kernel/container.c:301:
+		iput(inode);
 		^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#570: FILE: kernel/container.c:309:
+static int container_get_sb(struct file_system_type *fs_type,
+			 int flags, const char *unused_dev_name,

WARNING:LINE_SPACING: Missing a blank line after declarations
#606: FILE: kernel/container.c:345:
+		int len = cont->dentry->d_name.len;
+		if ((start -= len) < buf)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#606: FILE: kernel/container.c:345:
+		if ((start -= len) < buf)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'container_release_agent', this function's name, in a string
#661: FILE: kernel/container.c:400:
+	argv[i++] = "/sbin/container_release_agent";

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#709: FILE: kernel/container.c:448:
+
+

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#723: FILE: kernel/container.c:462:
+	turning_on = (simple_strtoul(buf, NULL, 10) != 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:LINE_SPACING: Please don't use multiple blank lines
#735: FILE: kernel/container.c:474:
+
+

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#752: FILE: kernel/container.c:491:
+	if (sscanf(pidbuf, "%d", &pid) != 1)
+		return -EIO;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->euid'
#767: FILE: kernel/container.c:506:
+		if ((current->euid) && (current->euid != tsk->uid)
+		    && (current->euid != tsk->suid)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->euid != tsk->uid'
#767: FILE: kernel/container.c:506:
+		if ((current->euid) && (current->euid != tsk->uid)
+		    && (current->euid != tsk->suid)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->euid != tsk->suid'
#767: FILE: kernel/container.c:506:
+		if ((current->euid) && (current->euid != tsk->uid)
+		    && (current->euid != tsk->suid)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#768: FILE: kernel/container.c:507:
+		if ((current->euid) && (current->euid != tsk->uid)
+		    && (current->euid != tsk->suid)) {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#808: FILE: kernel/container.c:547:
+typedef enum {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#827: FILE: kernel/container.c:566:
+	if (nbytes > 100 + 6 * NR_CPUS)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#831: FILE: kernel/container.c:570:
+	if ((buffer = kmalloc(nbytes + 1, GFP_KERNEL)) == 0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#870: FILE: kernel/container.c:609:
+static ssize_t container_file_write(struct file *file, const char __user *buf,
+						size_t nbytes, loff_t *ppos)

WARNING:LINE_SPACING: Missing a blank line after declarations
#875: FILE: kernel/container.c:614:
+	struct container *cont = __d_cont(file->f_dentry->d_parent);
+	if (!cft)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#898: FILE: kernel/container.c:637:
+	if (!(page = (char *)__get_free_page(GFP_KERNEL)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#920: FILE: kernel/container.c:659:
+static ssize_t container_file_read(struct file *file, char __user *buf, size_t nbytes,
+								loff_t *ppos)

WARNING:LINE_SPACING: Missing a blank line after declarations
#925: FILE: kernel/container.c:664:
+	struct container *cont = __d_cont(file->f_dentry->d_parent);
+	if (!cft)

WARNING:LINE_SPACING: Missing a blank line after declarations
#960: FILE: kernel/container.c:699:
+	struct cftype *cft = __d_cft(file->f_dentry);
+	if (cft->release)

WARNING:CONST_STRUCT: struct file_operations should normally be const
#980: FILE: kernel/container.c:719:
+static struct file_operations container_file_operations = {

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#988: FILE: kernel/container.c:727:
+static struct inode_operations container_dir_inode_operations = {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1062: FILE: kernel/container.c:801:
+	if (!IS_ERR(dentry)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1067: FILE: kernel/container.c:806:
+	} else

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#1169: FILE: kernel/container.c:908:
+	pidarray = kmalloc(npids * sizeof(pid_t), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1246: FILE: kernel/container.c:985:
+	if ((err = container_add_file(cont, &cft_notify_on_release)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1248: FILE: kernel/container.c:987:
+	if ((err = container_add_file(cont, &cft_tasks)) < 0)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1399: FILE: kernel/container.c:1138:
+		printk(KERN_ERR "container: could not mount!\n");

WARNING:TYPO_SPELLING: 'derefencing' may be misspelled - perhaps 'dereferencing'?
#1453: FILE: kernel/container.c:1192:
+ * Don't even think about derefencing 'cont' after the container use count
                           ^^^^^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1596: FILE: kernel/container.c:1335:
+	struct pid *pid = PROC_I(inode)->pid;
+	return single_open(file, proc_container_show, pid);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1599: FILE: kernel/container.c:1338:
+struct file_operations proc_container_operations = {

WARNING:REPEATED_WORD: Possible repeated word: 'container'
#1807: FILE: Documentation/containers.txt:138:
+ 2) mount -t container container /dev/container

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.17329.commit.f70afee7717a07bacfecc8f7b288f9057cd74fff total: 5 errors, 38 warnings, 22 checks, 1789 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.17329.commit.f70afee7717a07bacfecc8f7b288f9057cd74fff has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
