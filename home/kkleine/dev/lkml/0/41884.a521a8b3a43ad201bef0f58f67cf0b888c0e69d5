WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#33: 
uptodate page cache pages. The host can choose to discard volatile
^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#66: 
7) The page is not uptodate.
                   ^^^^^^^^

WARNING:TYPO_SPELLING: 'noticable' may be misspelled - perhaps 'noticeable'?
#109: 
Another noticable change is that the first few lines of code in
        ^^^^^^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#203: FILE: include/linux/pagemap.h:117:
+extern void __remove_from_page_cache_nocheck(struct page *page);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#262: FILE: include/linux/page-states.h:67:
+extern void page_unmap_all(struct page *page);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#263: FILE: include/linux/page-states.h:68:
+extern void page_discard(struct page *page);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#267: FILE: include/linux/page-states.h:72:
+	extern int  __page_make_stable(struct page *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#267: FILE: include/linux/page-states.h:72:
+	extern int  __page_make_stable(struct page *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#275: FILE: include/linux/page-states.h:80:
+	extern void __page_make_volatile(struct page *, unsigned int offset);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#275: FILE: include/linux/page-states.h:80:
+	extern void __page_make_volatile(struct page *, unsigned int offset);

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#291: FILE: mm/filemap.c:121:
+void inline __remove_from_page_cache_nocheck(struct page *page)

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

ERROR:SPACING: space prohibited before that close parenthesis ')'
#531: FILE: mm/page_alloc.c:219:
+			1 << PG_discarded );

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#539: FILE: mm/page-discard.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#540: FILE: mm/page-discard.c:2:
+ * mm/page-discard.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#565: FILE: mm/page-discard.c:27:
+static inline int __page_discardable(struct page *page,unsigned int offset)
                                                       ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#595: FILE: mm/page-discard.c:57:
+	BUG_ON(page_mapcount(page) > page_count(page) - offset);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#665: FILE: mm/page-discard.c:127:
+	BUG_ON(PageWriteback(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#666: FILE: mm/page-discard.c:128:
+	BUG_ON(PageDirty(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#667: FILE: mm/page-discard.c:129:
+	BUG_ON(PagePrivate(page));

CHECK:CAMELCASE: Avoid CamelCase: <__ClearPageLRU>
#685: FILE: mm/page-discard.c:147:
+		__ClearPageLRU(page);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#691: FILE: mm/page-discard.c:153:
+	BUG_ON(PageSwapCache(page));

ERROR:CODE_INDENT: code indent should use tabs where possible
#694: FILE: mm/page-discard.c:156:
+ ^Imapping = page->mapping;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#694: FILE: mm/page-discard.c:156:
+ ^Imapping = page->mapping;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#694: FILE: mm/page-discard.c:156:
+ ^Imapping = page->mapping;$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#822: FILE: mm/rmap.c:943:
+void page_unmap_all(struct page* page)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#830: FILE: mm/rmap.c:951:
+	BUG_ON(!PageLocked(page) || PageReserved(page) || PageAnon(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#837: FILE: mm/rmap.c:958:
+		BUG_ON(try_to_unmap_one(page, vma, address, 0) == SWAP_FAIL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#851: FILE: mm/rmap.c:972:
+			BUG_ON(try_to_unmap_one(page, vma, address, 0) == SWAP_FAIL);

CHECK:BRACES: Unbalanced braces around else statement
#910: FILE: mm/vmscan.c:834:
+		} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#937: FILE: mm/vmscan.c:870:
+		} else

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.41884.commit.a521a8b3a43ad201bef0f58f67cf0b888c0e69d5 total: 5 errors, 17 warnings, 8 checks, 736 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.41884.commit.a521a8b3a43ad201bef0f58f67cf0b888c0e69d5 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
