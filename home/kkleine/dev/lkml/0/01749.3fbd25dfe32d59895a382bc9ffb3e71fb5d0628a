WARNING:TYPO_SPELLING: 'degredation' may be misspelled - perhaps 'degradation'?
#39: 
> the degredation in cached timings appears to be due to the 16 byte stack
      ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#40: 
> frame set up for the sidt instruction.  apparently due to -mno-red-zone...

WARNING:TYPO_SPELLING: 'degredation' may be misspelled - perhaps 'degradation'?
#44: 
which enables red-zone for vsyscall.  it fixes the cache degredation 
                                                         ^^^^^^^^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#243: FILE: arch/x86_64/kernel/vsyscall.c:46:
+extern int vgettimeofday(struct timeval * tv, struct timezone * tz);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#243: FILE: arch/x86_64/kernel/vsyscall.c:46:
+extern int vgettimeofday(struct timeval * tv, struct timezone * tz);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#244: FILE: arch/x86_64/kernel/vsyscall.c:47:
+extern time_t vtime(time_t *t);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#245: FILE: arch/x86_64/kernel/vsyscall.c:48:
+extern long vgetcpu(unsigned *cpu, unsigned *node, struct getcpu_cache *tcache);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#245: FILE: arch/x86_64/kernel/vsyscall.c:48:
+extern long vgetcpu(unsigned *cpu, unsigned *node, struct getcpu_cache *tcache);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#245: FILE: arch/x86_64/kernel/vsyscall.c:48:
+extern long vgetcpu(unsigned *cpu, unsigned *node, struct getcpu_cache *tcache);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#266: FILE: arch/x86_64/kernel/vsyscall_user.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#267: FILE: arch/x86_64/kernel/vsyscall_user.c:2:
+ *  linux/arch/x86_64/kernel/vsyscall_user.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#300: FILE: arch/x86_64/kernel/vsyscall_user.c:35:
+#include <asm/pgtable.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#304: FILE: arch/x86_64/kernel/vsyscall_user.c:39:
+#include <asm/io.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/topology.h> instead of <asm/topology.h>
#307: FILE: arch/x86_64/kernel/vsyscall_user.c:42:
+#include <asm/topology.h>

ERROR:SPACING: space required after that ',' (ctx:VxV)
#309: FILE: arch/x86_64/kernel/vsyscall_user.c:44:
+#define __vsyscall(nr) __attribute__ ((unused,__section__(".vsyscall_" #nr)))
                                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#309: FILE: arch/x86_64/kernel/vsyscall_user.c:44:
+#define __vsyscall(nr) __attribute__ ((unused,__section__(".vsyscall_" #nr)))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".vsyscall_" #nr) over __attribute__((__section__(".vsyscall_" #nr)))
#309: FILE: arch/x86_64/kernel/vsyscall_user.c:44:
+#define __vsyscall(nr) __attribute__ ((unused,__section__(".vsyscall_" #nr)))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: __always_unused or __maybe_unused is preferred over __attribute__((__unused__))
#309: FILE: arch/x86_64/kernel/vsyscall_user.c:44:
+#define __vsyscall(nr) __attribute__ ((unused,__section__(".vsyscall_" #nr)))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#310: FILE: arch/x86_64/kernel/vsyscall_user.c:45:
+#define __syscall_clobber "r11","rcx","memory"
                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#310: FILE: arch/x86_64/kernel/vsyscall_user.c:45:
+#define __syscall_clobber "r11","rcx","memory"
                                      ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#317: FILE: arch/x86_64/kernel/vsyscall_user.c:52:
+static __always_inline void timeval_normalize(struct timeval * tv)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#328: FILE: arch/x86_64/kernel/vsyscall_user.c:63:
+static __always_inline void do_vgettimeofday(struct timeval * tv)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#358: FILE: arch/x86_64/kernel/vsyscall_user.c:93:
+static __always_inline void do_get_tz(struct timezone * tz)

WARNING:LINE_SPACING: Missing a blank line after declarations
#366: FILE: arch/x86_64/kernel/vsyscall_user.c:101:
+	int ret;
+	asm volatile(

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#366: FILE: arch/x86_64/kernel/vsyscall_user.c:101:
+	asm volatile(

ERROR:CODE_INDENT: code indent should use tabs where possible
#367: FILE: arch/x86_64/kernel/vsyscall_user.c:102:
+                ".globl vsysc2\n"$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#367: FILE: arch/x86_64/kernel/vsyscall_user.c:102:
+                ".globl vsysc2\n"$

ERROR:CODE_INDENT: code indent should use tabs where possible
#368: FILE: arch/x86_64/kernel/vsyscall_user.c:103:
+                "vsysc2: syscall\n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#368: FILE: arch/x86_64/kernel/vsyscall_user.c:103:
+                "vsysc2: syscall\n"$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#370: FILE: arch/x86_64/kernel/vsyscall_user.c:105:
+		: "0" (__NR_gettimeofday),"D" (tv),"S" (tz) : __syscall_clobber );
 		                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#370: FILE: arch/x86_64/kernel/vsyscall_user.c:105:
+		: "0" (__NR_gettimeofday),"D" (tv),"S" (tz) : __syscall_clobber );
 		                                  ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#370: FILE: arch/x86_64/kernel/vsyscall_user.c:105:
+		: "0" (__NR_gettimeofday),"D" (tv),"S" (tz) : __syscall_clobber );

WARNING:LINE_SPACING: Missing a blank line after declarations
#377: FILE: arch/x86_64/kernel/vsyscall_user.c:112:
+	long secs;
+	asm volatile(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#377: FILE: arch/x86_64/kernel/vsyscall_user.c:112:
+	asm volatile(

ERROR:CODE_INDENT: code indent should use tabs where possible
#378: FILE: arch/x86_64/kernel/vsyscall_user.c:113:
+                ".globl vsysc1\n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#378: FILE: arch/x86_64/kernel/vsyscall_user.c:113:
+                ".globl vsysc1\n"$

ERROR:CODE_INDENT: code indent should use tabs where possible
#379: FILE: arch/x86_64/kernel/vsyscall_user.c:114:
+                "vsysc1: syscall\n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#379: FILE: arch/x86_64/kernel/vsyscall_user.c:114:
+                "vsysc1: syscall\n"$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#381: FILE: arch/x86_64/kernel/vsyscall_user.c:116:
+		: "0" (__NR_time),"D" (t) : __syscall_clobber);
 		                 ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#385: FILE: arch/x86_64/kernel/vsyscall_user.c:120:
+int __vsyscall(0) vgettimeofday(struct timeval * tv, struct timezone * tz)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#385: FILE: arch/x86_64/kernel/vsyscall_user.c:120:
+int __vsyscall(0) vgettimeofday(struct timeval * tv, struct timezone * tz)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#388: FILE: arch/x86_64/kernel/vsyscall_user.c:123:
+		return gettimeofday(tv,tz);
 		                      ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#397: FILE: arch/x86_64/kernel/vsyscall_user.c:132:
+ * unlikely */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#413: FILE: arch/x86_64/kernel/vsyscall_user.c:148:
+/* Fast way to get current CPU and node.
+   This helps to do per node and per CPU caches in user space.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#419: FILE: arch/x86_64/kernel/vsyscall_user.c:154:
+   All arguments can be NULL. */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#421: FILE: arch/x86_64/kernel/vsyscall_user.c:156:
+vgetcpu(unsigned *cpu, unsigned *node, struct getcpu_cache *tcache)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#421: FILE: arch/x86_64/kernel/vsyscall_user.c:156:
+vgetcpu(unsigned *cpu, unsigned *node, struct getcpu_cache *tcache)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#427: FILE: arch/x86_64/kernel/vsyscall_user.c:162:
+	/* Fast cache - only recompute value once per jiffies and avoid
+	   relatively costly lsl/sidt otherwise.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#433: FILE: arch/x86_64/kernel/vsyscall_user.c:168:
+	   If you don't like it pass NULL. */

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#434: FILE: arch/x86_64/kernel/vsyscall_user.c:169:
+	if (tcache && tcache->blob[0] == (j = __jiffies)) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#437: FILE: arch/x86_64/kernel/vsyscall_user.c:172:
+	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#437: FILE: arch/x86_64/kernel/vsyscall_user.c:172:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#439: FILE: arch/x86_64/kernel/vsyscall_user.c:174:
+                struct {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#439: FILE: arch/x86_64/kernel/vsyscall_user.c:174:
+                struct {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#440: FILE: arch/x86_64/kernel/vsyscall_user.c:175:
+                        char pad[6];^I/* avoid unaligned stores */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#440: FILE: arch/x86_64/kernel/vsyscall_user.c:175:
+                        char pad[6];^I/* avoid unaligned stores */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#441: FILE: arch/x86_64/kernel/vsyscall_user.c:176:
+                        u16 size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#441: FILE: arch/x86_64/kernel/vsyscall_user.c:176:
+                        u16 size;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#442: FILE: arch/x86_64/kernel/vsyscall_user.c:177:
+                        u64 address;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#442: FILE: arch/x86_64/kernel/vsyscall_user.c:177:
+                        u64 address;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#443: FILE: arch/x86_64/kernel/vsyscall_user.c:178:
+                } idt;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#443: FILE: arch/x86_64/kernel/vsyscall_user.c:178:
+                } idt;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#445: FILE: arch/x86_64/kernel/vsyscall_user.c:180:
+                asm("sidt %0" : "=m" (idt.size));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#445: FILE: arch/x86_64/kernel/vsyscall_user.c:180:
+                asm("sidt %0" : "=m" (idt.size));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#446: FILE: arch/x86_64/kernel/vsyscall_user.c:181:
+                p = idt.size - 0x1000;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#446: FILE: arch/x86_64/kernel/vsyscall_user.c:181:
+                p = idt.size - 0x1000;$

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#459: FILE: arch/x86_64/kernel/vsyscall_user.c:194:
+		*node = p & ((1<<CONFIG_NODES_SHIFT) - 1);
 		               ^

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#465: FILE: arch/x86_64/kernel/vsyscall_user.c:200:
+	return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.01749.commit.3fbd25dfe32d59895a382bc9ffb3e71fb5d0628a total: 29 errors, 32 warnings, 7 checks, 392 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.01749.commit.3fbd25dfe32d59895a382bc9ffb3e71fb5d0628a has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
