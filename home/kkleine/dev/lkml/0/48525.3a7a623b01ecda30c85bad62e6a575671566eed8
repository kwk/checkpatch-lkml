WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
>From the 'user' side of things it provides a function to mark a 'struct sock'

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#76: FILE: include/linux/gfp.h:58:
+			__GFP_NOMEMALLOC|__GFP_HARDWALL|__GFP_MEMALLOC)
 			                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#76: FILE: include/linux/gfp.h:58:
+			__GFP_NOMEMALLOC|__GFP_HARDWALL|__GFP_MEMALLOC)
 			                               ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#168: FILE: include/net/sock.h:453:
+extern int sk_adjust_memalloc(int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#169: FILE: include/net/sock.h:454:
+extern int sk_set_memalloc(struct sock *sk);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#193: FILE: mm/page_alloc.c:975:
+	if ((((p->flags & PF_MEMALLOC) || unlikely(test_thread_flag(TIF_MEMDIE)))
+			&& !in_interrupt()) || (gfp_mask & __GFP_MEMALLOC)) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#202: FILE: mm/page_alloc.c:2200:
+	unsigned pages_min = (min_free_kbytes + var_free_kbytes)

WARNING:LINE_SPACING: Missing a blank line after declarations
#233: FILE: mm/page_alloc.c:2275:
+		struct zone *zone;
+		for_each_zone(zone)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#236: FILE: mm/page_alloc.c:2278:
+	printk(KERN_DEBUG "RX reserve: %d\n", var_free_kbytes);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#242: FILE: mm/page_alloc.c:2284:
+EXPORT_SYMBOL_GPL(adjust_memalloc_reserve);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#291: FILE: net/core/skbuff.c:160:
+		/*
+		 * Allocate the data section first because we know the first

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#296: FILE: net/core/skbuff.c:165:
+		data = srog_alloc(NULL, size + sizeof(struct skb_shared_info),
+				gfp_mask);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#301: FILE: net/core/skbuff.c:170:
+				? 2*sizeof(struct sk_buff) + sizeof(atomic_t)
 				   ^

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#389: FILE: net/core/skbuff.c:370:
+	/*
+	 * This complication is necessary because we need a valid SROG

WARNING:LINE_SPACING: Missing a blank line after declarations
#395: FILE: net/core/skbuff.c:376:
+	u8 *data = skb->head;
+	srog_free(data, objp);

WARNING:LINE_SPACING: Missing a blank line after declarations
#406: FILE: net/core/skbuff.c:387:
+	u8 *data = skb->head;
+	kmem_cache_free(cache, objp);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kmem_cache *' should also have an identifier name
#416: FILE: net/core/skbuff.c:399:
+	void (*free_skb)(struct kmem_cache *, void *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#416: FILE: net/core/skbuff.c:399:
+	void (*free_skb)(struct kmem_cache *, void *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#416: FILE: net/core/skbuff.c:399:
+	void (*free_skb)(struct kmem_cache *, void *, int);

CHECK:BRACES: braces {} should be used on all arms of this statement
#472: FILE: net/core/skbuff.c:774:
+	if (skb->memalloc) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#476: FILE: net/core/skbuff.c:778:
+		/*
+		 * Unfortunately we have to assume skb->head is in the first

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#480: FILE: net/core/skbuff.c:782:
+		data = srog_alloc(NULL,
+				size + sizeof(struct skb_shared_info),

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#487: FILE: net/core/skbuff.c:789:
+		/*
+		 * But they must end up in the same SROG otherwise we cannot

CHECK:BRACES: Unbalanced braces around else statement
#491: FILE: net/core/skbuff.c:793:
+	} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#615: FILE: net/core/sock.c:234:
+	BUG_ON(memalloc_socks < 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#622: FILE: net/core/sock.c:241:
+		printk(KERN_WARNING

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#646: FILE: net/core/sock.c:265:
+	if (!(err = sk_adjust_memalloc(1)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.48525.commit.3a7a623b01ecda30c85bad62e6a575671566eed8 total: 1 errors, 16 warnings, 10 checks, 521 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.48525.commit.3a7a623b01ecda30c85bad62e6a575671566eed8 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
