WARNING:BAD_SIGN_OFF: Unexpected content after email: 'Christoph Lameter <clameter@sgi.com>?', should be: 'Christoph Lameter <clameter@sgi.com>'
#49: 
Signed-off-by: Christoph Lameter <clameter@sgi.com>?

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#63: FILE: include/linux/slab.h:5:
+ * ^ICleaned up and restructured to ease the addition of alternative$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#64: FILE: include/linux/slab.h:6:
+ * ^Iimplementations of SLAB allocators.$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#131: FILE: include/linux/slab.h:45:
+extern int slab_is_available(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#134: FILE: include/linux/slab.h:47:
+struct kmem_cache *kmem_cache_create(const char *, size_t, size_t,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#134: FILE: include/linux/slab.h:47:
+struct kmem_cache *kmem_cache_create(const char *, size_t, size_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#134: FILE: include/linux/slab.h:47:
+struct kmem_cache *kmem_cache_create(const char *, size_t, size_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#134: FILE: include/linux/slab.h:47:
+struct kmem_cache *kmem_cache_create(const char *, size_t, size_t,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#135: FILE: include/linux/slab.h:48:
+struct kmem_cache *kmem_cache_create(const char *, size_t, size_t,
 			unsigned long,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kmem_cache *' should also have an identifier name
#153: FILE: include/linux/slab.h:51:
+void kmem_cache_destroy(struct kmem_cache *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kmem_cache *' should also have an identifier name
#154: FILE: include/linux/slab.h:52:
+int kmem_cache_shrink(struct kmem_cache *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kmem_cache *' should also have an identifier name
#155: FILE: include/linux/slab.h:53:
+void *kmem_cache_alloc(struct kmem_cache *, gfp_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gfp_t' should also have an identifier name
#155: FILE: include/linux/slab.h:53:
+void *kmem_cache_alloc(struct kmem_cache *, gfp_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kmem_cache *' should also have an identifier name
#156: FILE: include/linux/slab.h:54:
+void *kmem_cache_zalloc(struct kmem_cache *, gfp_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gfp_t' should also have an identifier name
#156: FILE: include/linux/slab.h:54:
+void *kmem_cache_zalloc(struct kmem_cache *, gfp_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kmem_cache *' should also have an identifier name
#157: FILE: include/linux/slab.h:55:
+void kmem_cache_free(struct kmem_cache *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#157: FILE: include/linux/slab.h:55:
+void kmem_cache_free(struct kmem_cache *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kmem_cache *' should also have an identifier name
#158: FILE: include/linux/slab.h:56:
+unsigned int kmem_cache_size(struct kmem_cache *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kmem_cache *' should also have an identifier name
#159: FILE: include/linux/slab.h:57:
+const char *kmem_cache_name(struct kmem_cache *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#164: FILE: include/linux/slab.h:61:
+extern void *kmem_cache_alloc_node(struct kmem_cache *, gfp_t flags, int node);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#167: FILE: include/linux/slab.h:64:
+static inline void *kmem_cache_alloc_node(struct kmem_cache *cachep,
+					gfp_t flags, int node)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#177: FILE: include/linux/slab.h:74:
+void *__kzalloc(size_t, gfp_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gfp_t' should also have an identifier name
#177: FILE: include/linux/slab.h:74:
+void *__kzalloc(size_t, gfp_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const void *' should also have an identifier name
#178: FILE: include/linux/slab.h:75:
+void kfree(const void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const void *' should also have an identifier name
#179: FILE: include/linux/slab.h:76:
+unsigned int ksize(const void *);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#477: FILE: include/linux/slab_def.h:1:
+#ifndef _LINUX_SLAB_DEF_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/cache.h> instead of <asm/cache.h>
#491: FILE: include/linux/slab_def.h:15:
+#include <asm/cache.h>		/* kmalloc_sizes.h needs L1_CACHE_BYTES */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#496: FILE: include/linux/slab_def.h:20:
+^Isize_t^I^I ^Ics_size;$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#500: FILE: include/linux/slab_def.h:24:
+};
+extern struct cache_sizes malloc_sizes[];

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#506: FILE: include/linux/slab_def.h:30:
+#define CACHE(x) \
+		if (size <= x) \
+			goto found; \
+		else \
+			i++;

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#506: FILE: include/linux/slab_def.h:30:
+#define CACHE(x) \
+		if (size <= x) \
+			goto found; \
+		else \
+			i++;

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#506: FILE: include/linux/slab_def.h:30:
+#define CACHE(x) \
+		if (size <= x) \
+			goto found; \
+		else \
+			i++;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#506: FILE: include/linux/slab_def.h:30:
+#define CACHE(x) \
+		if (size <= x) \
+			goto found; \
+		else \
+			i++;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#514: FILE: include/linux/slab_def.h:38:
+			extern void __you_cannot_kmalloc_that_much(void);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#529: FILE: include/linux/slab_def.h:53:
+#define CACHE(x) \
+		if (size <= x) \
+			goto found; \
+		else \
+			i++;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#529: FILE: include/linux/slab_def.h:53:
+#define CACHE(x) \
+		if (size <= x) \
+			goto found; \
+		else \
+			i++;

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#529: FILE: include/linux/slab_def.h:53:
+#define CACHE(x) \
+		if (size <= x) \
+			goto found; \
+		else \
+			i++;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#529: FILE: include/linux/slab_def.h:53:
+#define CACHE(x) \
+		if (size <= x) \
+			goto found; \
+		else \
+			i++;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#537: FILE: include/linux/slab_def.h:61:
+			extern void __you_cannot_kzalloc_that_much(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#549: FILE: include/linux/slab_def.h:73:
+extern void *__kmalloc_node(size_t size, gfp_t flags, int node);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#555: FILE: include/linux/slab_def.h:79:
+#define CACHE(x) \
+		if (size <= x) \
+			goto found; \
+		else \
+			i++;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#555: FILE: include/linux/slab_def.h:79:
+#define CACHE(x) \
+		if (size <= x) \
+			goto found; \
+		else \
+			i++;

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#555: FILE: include/linux/slab_def.h:79:
+#define CACHE(x) \
+		if (size <= x) \
+			goto found; \
+		else \
+			i++;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#555: FILE: include/linux/slab_def.h:79:
+#define CACHE(x) \
+		if (size <= x) \
+			goto found; \
+		else \
+			i++;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#563: FILE: include/linux/slab_def.h:87:
+			extern void __you_cannot_kmalloc_that_much(void);

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.11045.commit.07dce03ca0dce20812a19d7ea60cbd6c2129bffc total: 3 errors, 30 warnings, 12 checks, 505 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.11045.commit.07dce03ca0dce20812a19d7ea60cbd6c2129bffc has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
