WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#89: FILE: arch/x86_64/pci/mmconfig.c:189:
+	/* When Type1 access is not available don't check because
+	   we really need MCFG then and it's hopefully ok*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#89: FILE: arch/x86_64/pci/mmconfig.c:189:
+	   we really need MCFG then and it's hopefully ok*/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#93: FILE: arch/x86_64/pci/mmconfig.c:193:
+		printk(KERN_ERR

WARNING:BAD_SIGN_OFF: Duplicate signature
#129: 
Signed-off-by: Rajesh Shah <rajesh.shah@intel.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#147: FILE: arch/i386/pci/acpi.c:10:
+       acpi_status status;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#148: FILE: arch/i386/pci/acpi.c:11:
+       struct acpi_device_info *info;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#149: FILE: arch/i386/pci/acpi.c:12:
+       struct acpi_buffer buffer = {ACPI_ALLOCATE_BUFFER, NULL};$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#150: FILE: arch/i386/pci/acpi.c:13:
+       int i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#152: FILE: arch/i386/pci/acpi.c:15:
+       status = acpi_get_object_info(handle, &buffer);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#153: FILE: arch/i386/pci/acpi.c:16:
+       if (ACPI_FAILURE(status))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#153: FILE: arch/i386/pci/acpi.c:16:
+       if (ACPI_FAILURE(status))
+	       return 0;

WARNING:TABSTOP: Statements should start on a tabstop
#154: FILE: arch/i386/pci/acpi.c:17:
+	       return 0;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#155: FILE: arch/i386/pci/acpi.c:18:
+       info = buffer.pointer;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#156: FILE: arch/i386/pci/acpi.c:19:
+       if ((info->valid & ACPI_VALID_HID) &&$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#156: FILE: arch/i386/pci/acpi.c:19:
+       if ((info->valid & ACPI_VALID_HID) &&
[...]
+	       kfree(buffer.pointer);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#157: FILE: arch/i386/pci/acpi.c:20:
+       if ((info->valid & ACPI_VALID_HID) &&
+		       (!strcmp(ACPI_MB_HID1, info->hardware_id.value) ||

WARNING:TABSTOP: Statements should start on a tabstop
#160: FILE: arch/i386/pci/acpi.c:23:
+	       return 1;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#161: FILE: arch/i386/pci/acpi.c:24:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#162: FILE: arch/i386/pci/acpi.c:25:
+       if (info->valid & ACPI_VALID_CID) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#162: FILE: arch/i386/pci/acpi.c:25:
+       if (info->valid & ACPI_VALID_CID) {
+	       for (i=0; i < info->compatibility_id.count; i++) {

WARNING:TABSTOP: Statements should start on a tabstop
#163: FILE: arch/i386/pci/acpi.c:26:
+	       for (i=0; i < info->compatibility_id.count; i++) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#163: FILE: arch/i386/pci/acpi.c:26:
+	       for (i=0; i < info->compatibility_id.count; i++) {
+		       if (!strcmp(ACPI_MB_HID1,

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#163: FILE: arch/i386/pci/acpi.c:26:
+	       for (i=0; i < info->compatibility_id.count; i++) {
 	             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TABSTOP: Statements should start on a tabstop
#164: FILE: arch/i386/pci/acpi.c:27:
+		       if (!strcmp(ACPI_MB_HID1,

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 40)
#164: FILE: arch/i386/pci/acpi.c:27:
+		       if (!strcmp(ACPI_MB_HID1,
[...]
+                                        kfree(buffer.pointer);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#165: FILE: arch/i386/pci/acpi.c:28:
+		       if (!strcmp(ACPI_MB_HID1,
+				info->compatibility_id.id[i].value) ||

ERROR:CODE_INDENT: code indent should use tabs where possible
#168: FILE: arch/i386/pci/acpi.c:31:
+                                        kfree(buffer.pointer);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#168: FILE: arch/i386/pci/acpi.c:31:
+                                        kfree(buffer.pointer);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#169: FILE: arch/i386/pci/acpi.c:32:
+                                        return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#169: FILE: arch/i386/pci/acpi.c:32:
+                                        return 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#174: FILE: arch/i386/pci/acpi.c:37:
+        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#174: FILE: arch/i386/pci/acpi.c:37:
+        return 0;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#178: FILE: arch/i386/pci/acpi.c:41:
+static acpi_status __init check_mcfg_resource(struct acpi_resource *res,
+		void *data)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mcfg_res->start >= fixmem32->address'
#190: FILE: arch/i386/pci/acpi.c:53:
+		if ((mcfg_res->start >= fixmem32->address) &&
+			(mcfg_res->end <= (fixmem32->address +
+					   fixmem32->address_length))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#191: FILE: arch/i386/pci/acpi.c:54:
+		if ((mcfg_res->start >= fixmem32->address) &&
+			(mcfg_res->end <= (fixmem32->address +

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'res->type != ACPI_RESOURCE_TYPE_ADDRESS32'
#197: FILE: arch/i386/pci/acpi.c:60:
+	if ((res->type != ACPI_RESOURCE_TYPE_ADDRESS32) &&
+			(res->type != ACPI_RESOURCE_TYPE_ADDRESS64))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'res->type != ACPI_RESOURCE_TYPE_ADDRESS64'
#197: FILE: arch/i386/pci/acpi.c:60:
+	if ((res->type != ACPI_RESOURCE_TYPE_ADDRESS32) &&
+			(res->type != ACPI_RESOURCE_TYPE_ADDRESS64))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#198: FILE: arch/i386/pci/acpi.c:61:
+	if ((res->type != ACPI_RESOURCE_TYPE_ADDRESS32) &&
+			(res->type != ACPI_RESOURCE_TYPE_ADDRESS64))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'address.address_length <= 0'
#202: FILE: arch/i386/pci/acpi.c:65:
+	if (ACPI_FAILURE(status) || (address.address_length <= 0) ||
+			(address.resource_type != ACPI_MEMORY_RANGE))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'address.resource_type != ACPI_MEMORY_RANGE'
#202: FILE: arch/i386/pci/acpi.c:65:
+	if (ACPI_FAILURE(status) || (address.address_length <= 0) ||
+			(address.resource_type != ACPI_MEMORY_RANGE))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#203: FILE: arch/i386/pci/acpi.c:66:
+	if (ACPI_FAILURE(status) || (address.address_length <= 0) ||
+			(address.resource_type != ACPI_MEMORY_RANGE))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mcfg_res->start >= address.minimum'
#206: FILE: arch/i386/pci/acpi.c:69:
+	if ((mcfg_res->start >= address.minimum) &&
+			(mcfg_res->end <=
+			 (address.minimum +address.address_length))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#207: FILE: arch/i386/pci/acpi.c:70:
+	if ((mcfg_res->start >= address.minimum) &&
+			(mcfg_res->end <=

CHECK:SPACING: spaces preferred around that '+' (ctx:WxV)
#208: FILE: arch/i386/pci/acpi.c:71:
+			 (address.minimum +address.address_length))) {
 			                  ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#216: FILE: arch/i386/pci/acpi.c:79:
+static acpi_status __init find_mboard_resource(acpi_handle handle, u32 lvl,
+		void *context, void **rv)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#227: FILE: arch/i386/pci/acpi.c:90:
+		status = acpi_walk_resources(handle, METHOD_NAME__CRS,
+				check_mcfg_resource, context);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#241: FILE: arch/i386/pci/acpi.c:104:
+	acpi_walk_namespace(ACPI_TYPE_DEVICE, ACPI_ROOT_OBJECT,
+			ACPI_UINT32_MAX, find_mboard_resource,

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#246: FILE: arch/i386/pci/acpi.c:109:
 struct pci_bus * __devinit pci_acpi_scan_root(struct acpi_device *device, int domain, int busnum)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#258: FILE: arch/i386/pci/mmconfig.c:225:
+	/* When Type1 access is not available don't check because
+	   we really need MCFG then and it's hopefully ok*/

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#258: FILE: arch/i386/pci/mmconfig.c:225:
+	   we really need MCFG then and it's hopefully ok*/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#262: FILE: arch/i386/pci/mmconfig.c:229:
+		printk(KERN_ERR

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#309: FILE: arch/i386/pci/pci.h:91:
+extern int is_acpi_reserved(unsigned long start, unsigned long end);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#337: FILE: arch/i386/pci/direct.c:259:
+	printk(KERN_INFO "PCI: Using configuration type %d\n", type);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#395: FILE: arch/i386/pci/init.c:11:
+#endif^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#434: FILE: arch/i386/pci/pci.h:85:
+extern int pci_direct_probe(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#435: FILE: arch/i386/pci/pci.h:86:
+extern void pci_direct_init(int type);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#438: FILE: arch/i386/pci/pci.h:88:
+extern void pci_mmcfg_init(int type);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#441: FILE: arch/i386/pci/pci.h:91:
+extern int is_acpi_reserved(unsigned long start, unsigned long end)

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#478: FILE: arch/i386/pci/mmconfig.c:191:
+#if 0

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#508: FILE: arch/x86_64/pci/mmconfig.c:168:
+#if 0

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.39062.commit.b51ce5d10552b44508039891eb80b094cdf93715 total: 5 errors, 33 warnings, 22 checks, 318 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.39062.commit.b51ce5d10552b44508039891eb80b094cdf93715 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
