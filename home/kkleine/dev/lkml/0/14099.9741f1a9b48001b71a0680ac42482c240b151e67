WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#70: 
    do_sync_read will wait for I/O completion only if lower function returned

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#98: FILE: fs/block_dev.c:134:
+	struct kiocb* iocb = bio->bi_private;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#99: FILE: fs/block_dev.c:135:
+	atomic_t* bio_count = (atomic_t*) &iocb->private;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#99: FILE: fs/block_dev.c:135:
+	atomic_t* bio_count = (atomic_t*) &iocb->private;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#99: FILE: fs/block_dev.c:135:
+	atomic_t* bio_count = (atomic_t*) &iocb->private;

CHECK:BRACES: braces {} should be used on all arms of this statement
#102: FILE: fs/block_dev.c:138:
+	if ((bio->bi_rw & 1) == READ)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#104: FILE: fs/block_dev.c:140:
+	else {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#143: FILE: fs/block_dev.c:163:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#148: FILE: fs/block_dev.c:168:
+	int ret, nr_pages;
+	if (pvec->idx == pvec->nr) {

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#154: FILE: fs/block_dev.c:174:
+				     rw==READ, 0, pvec->page, NULL);
 				       ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#172: FILE: fs/block_dev.c:189:
+	unsigned blkbits = blksize_bits(bdev_hardsect_size(I_BDEV(inode)));

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#173: FILE: fs/block_dev.c:190:
+	unsigned blocksize_mask = (1<< blkbits) - 1;

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxW)
#173: FILE: fs/block_dev.c:190:
+	unsigned blocksize_mask = (1<< blkbits) - 1;
 	                            ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#179: FILE: fs/block_dev.c:196:
+	struct bio * bio;

CHECK:SPACING: No space is necessary after a cast
#180: FILE: fs/block_dev.c:197:
+	atomic_t *bio_count = (atomic_t *) &iocb->private;

CHECK:SPACING: No space is necessary after a cast
#189: FILE: fs/block_dev.c:206:
+	addr = (unsigned long) iov[0].iov_base;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#195: FILE: fs/block_dev.c:212:
+	if (addr & blocksize_mask || count & blocksize_mask ||
+		pos & blocksize_mask)

CHECK:SPACING: No space is necessary after a cast
#202: FILE: fs/block_dev.c:219:
+		nvec = min(nvec, (unsigned long) BIO_MAX_PAGES);

WARNING:MINMAX: min() should probably be min_t(unsigned long, nvec, BIO_MAX_PAGES)
#202: FILE: fs/block_dev.c:219:
+		nvec = min(nvec, (unsigned long) BIO_MAX_PAGES);

CHECK:SPACING: No space is necessary after a cast
#233: FILE: fs/block_dev.c:250:
+				addr = (unsigned long) iov[seg].iov_base;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#248: FILE: fs/block_dev.c:265:
+	nbytes = iocb->ki_nbytes = iocb->ki_nbytes - nbytes;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#268: FILE: fs/read_write.c:238:
+	kiocb.ki_nbytes = kiocb.ki_left = len;

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#289: FILE: include/linux/bio.h:312:
+extern void bio_release_pages(struct bio *bio);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.14099.commit.9741f1a9b48001b71a0680ac42482c240b151e67 total: 5 errors, 9 warnings, 13 checks, 196 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.14099.commit.9741f1a9b48001b71a0680ac42482c240b151e67 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
