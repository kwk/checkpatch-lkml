WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#210: FILE: drivers/mtd/devices/pmc551.c:118:
+	printk(KERN_DEBUG "pmc551_erase(pos:%ld, len:%ld)\n", (long)instr->addr,

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pmc551_erase', this function's name, in a string
#210: FILE: drivers/mtd/devices/pmc551.c:118:
+	printk(KERN_DEBUG "pmc551_erase(pos:%ld, len:%ld)\n", (long)instr->addr,

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#211: FILE: drivers/mtd/devices/pmc551.c:119:
+	printk(KERN_DEBUG "pmc551_erase(pos:%ld, len:%ld)\n", (long)instr->addr,
+		(long)instr->len);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#223: FILE: drivers/mtd/devices/pmc551.c:127:
+		printk(KERN_DEBUG "pmc551_erase() out of bounds (%ld > %ld)\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pmc551_erase', this function's name, in a string
#223: FILE: drivers/mtd/devices/pmc551.c:127:
+		printk(KERN_DEBUG "pmc551_erase() out of bounds (%ld > %ld)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#224: FILE: drivers/mtd/devices/pmc551.c:128:
+		printk(KERN_DEBUG "pmc551_erase() out of bounds (%ld > %ld)\n",
+			(long)end, (long)mtd->size);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#256: FILE: drivers/mtd/devices/pmc551.c:142:
+		/* The whole thing fits within one access, so just one shot
+		   will do it. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#256: FILE: drivers/mtd/devices/pmc551.c:142:
+		   will do it. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#260: FILE: drivers/mtd/devices/pmc551.c:146:
+		/* We have to do multiple writes to get all the data
+		   written. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#260: FILE: drivers/mtd/devices/pmc551.c:146:
+		   written. */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#264: FILE: drivers/mtd/devices/pmc551.c:149:
+			printk(KERN_DEBUG "pmc551_erase() soff_hi: %ld, "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pmc551_erase', this function's name, in a string
#264: FILE: drivers/mtd/devices/pmc551.c:149:
+			printk(KERN_DEBUG "pmc551_erase() soff_hi: %ld, "

WARNING:SPLIT_STRING: quoted string split across lines
#265: FILE: drivers/mtd/devices/pmc551.c:150:
+			printk(KERN_DEBUG "pmc551_erase() soff_hi: %ld, "
+				"eoff_hi: %ld\n", (long)soff_hi, (long)eoff_hi);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:BRACES: braces {} are not necessary for single statement blocks
#280: FILE: drivers/mtd/devices/pmc551.c:153:
+			if (soff_hi + priv->asize >= mtd->size) {
+				goto out;
+			}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:INDENTED_LABEL: labels should not be indented
#290: FILE: drivers/mtd/devices/pmc551.c:163:
+      out:

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#305: FILE: drivers/mtd/devices/pmc551.c:174:
+			size_t * retlen, u_char ** mtdbuf)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo ** bar" should be "foo **bar"
#305: FILE: drivers/mtd/devices/pmc551.c:174:
+			size_t * retlen, u_char ** mtdbuf)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#321: FILE: drivers/mtd/devices/pmc551.c:186:
+		printk(KERN_DEBUG "pmc551_point() out of bounds (%ld > %ld)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#322: FILE: drivers/mtd/devices/pmc551.c:187:
+		printk(KERN_DEBUG "pmc551_point() out of bounds (%ld > %ld)\n",
+			(long)from + len, (long)mtd->size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#338: FILE: drivers/mtd/devices/pmc551.c:198:
+		pci_write_config_dword(priv->dev, PMC551_PCI_MEM_MAP0,
+					(priv->base_map0 | soff_hi));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#348: FILE: drivers/mtd/devices/pmc551.c:207:
+static void pmc551_unpoint(struct mtd_info *mtd, u_char * addr, loff_t from,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#359: FILE: drivers/mtd/devices/pmc551.c:216:
+static int pmc551_read(struct mtd_info *mtd, loff_t from, size_t len,
+			size_t * retlen, u_char * buf)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#359: FILE: drivers/mtd/devices/pmc551.c:216:
+			size_t * retlen, u_char * buf)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#359: FILE: drivers/mtd/devices/pmc551.c:216:
+			size_t * retlen, u_char * buf)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#375: FILE: drivers/mtd/devices/pmc551.c:226:
+	printk(KERN_DEBUG "pmc551_read(pos:%ld, len:%ld) asize: %ld\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pmc551_read', this function's name, in a string
#375: FILE: drivers/mtd/devices/pmc551.c:226:
+	printk(KERN_DEBUG "pmc551_read(pos:%ld, len:%ld) asize: %ld\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#376: FILE: drivers/mtd/devices/pmc551.c:227:
+	printk(KERN_DEBUG "pmc551_read(pos:%ld, len:%ld) asize: %ld\n",
+		(long)from, (long)len, (long)priv->asize);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#388: FILE: drivers/mtd/devices/pmc551.c:235:
+		printk(KERN_DEBUG "pmc551_read() out of bounds (%ld > %ld)\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pmc551_read', this function's name, in a string
#388: FILE: drivers/mtd/devices/pmc551.c:235:
+		printk(KERN_DEBUG "pmc551_read() out of bounds (%ld > %ld)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#389: FILE: drivers/mtd/devices/pmc551.c:236:
+		printk(KERN_DEBUG "pmc551_read() out of bounds (%ld > %ld)\n",
+			(long)end, (long)mtd->size);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#422: FILE: drivers/mtd/devices/pmc551.c:250:
+		/* The whole thing fits within one access, so just one shot
+		   will do it. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#422: FILE: drivers/mtd/devices/pmc551.c:250:
+		   will do it. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#427: FILE: drivers/mtd/devices/pmc551.c:255:
+		/* We have to do multiple writes to get all the data
+		   written. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#427: FILE: drivers/mtd/devices/pmc551.c:255:
+		   written. */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#431: FILE: drivers/mtd/devices/pmc551.c:258:
+			printk(KERN_DEBUG "pmc551_read() soff_hi: %ld, "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pmc551_read', this function's name, in a string
#431: FILE: drivers/mtd/devices/pmc551.c:258:
+			printk(KERN_DEBUG "pmc551_read() soff_hi: %ld, "

WARNING:SPLIT_STRING: quoted string split across lines
#432: FILE: drivers/mtd/devices/pmc551.c:259:
+			printk(KERN_DEBUG "pmc551_read() soff_hi: %ld, "
+				"eoff_hi: %ld\n", (long)soff_hi, (long)eoff_hi);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#449: FILE: drivers/mtd/devices/pmc551.c:263:
+			if (soff_hi + priv->asize >= mtd->size) {
+				goto out;
+			}

WARNING:INDENTED_LABEL: labels should not be indented
#459: FILE: drivers/mtd/devices/pmc551.c:273:
+      out:

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#471: FILE: drivers/mtd/devices/pmc551.c:282:
+			size_t * retlen, const u_char * buf)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#471: FILE: drivers/mtd/devices/pmc551.c:282:
+			size_t * retlen, const u_char * buf)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#488: FILE: drivers/mtd/devices/pmc551.c:292:
+	printk(KERN_DEBUG "pmc551_write(pos:%ld, len:%ld) asize:%ld\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pmc551_write', this function's name, in a string
#488: FILE: drivers/mtd/devices/pmc551.c:292:
+	printk(KERN_DEBUG "pmc551_write(pos:%ld, len:%ld) asize:%ld\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#489: FILE: drivers/mtd/devices/pmc551.c:293:
+	printk(KERN_DEBUG "pmc551_write(pos:%ld, len:%ld) asize:%ld\n",
+		(long)to, (long)len, (long)priv->asize);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#500: FILE: drivers/mtd/devices/pmc551.c:300:
+		printk(KERN_DEBUG "pmc551_write() out of bounds (end: %ld, "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pmc551_write', this function's name, in a string
#500: FILE: drivers/mtd/devices/pmc551.c:300:
+		printk(KERN_DEBUG "pmc551_write() out of bounds (end: %ld, "

WARNING:SPLIT_STRING: quoted string split across lines
#501: FILE: drivers/mtd/devices/pmc551.c:301:
+		printk(KERN_DEBUG "pmc551_write() out of bounds (end: %ld, "
+			"size: %ld, to: %ld)\n", (long)end, (long)mtd->size,

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#535: FILE: drivers/mtd/devices/pmc551.c:316:
+		/* The whole thing fits within one access, so just one shot
+		   will do it. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#535: FILE: drivers/mtd/devices/pmc551.c:316:
+		   will do it. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#540: FILE: drivers/mtd/devices/pmc551.c:321:
+		/* We have to do multiple writes to get all the data
+		   written. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#540: FILE: drivers/mtd/devices/pmc551.c:321:
+		   written. */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#544: FILE: drivers/mtd/devices/pmc551.c:324:
+			printk(KERN_DEBUG "pmc551_write() soff_hi: %ld, "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pmc551_write', this function's name, in a string
#544: FILE: drivers/mtd/devices/pmc551.c:324:
+			printk(KERN_DEBUG "pmc551_write() soff_hi: %ld, "

WARNING:SPLIT_STRING: quoted string split across lines
#545: FILE: drivers/mtd/devices/pmc551.c:325:
+			printk(KERN_DEBUG "pmc551_write() soff_hi: %ld, "
+				"eoff_hi: %ld\n", (long)soff_hi, (long)eoff_hi);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#562: FILE: drivers/mtd/devices/pmc551.c:329:
+			if (soff_hi >= mtd->size) {
+				goto out;
+			}

WARNING:INDENTED_LABEL: labels should not be indented
#572: FILE: drivers/mtd/devices/pmc551.c:339:
+      out:

WARNING:BRACES: braces {} are not necessary for single statement blocks
#605: FILE: drivers/mtd/devices/pmc551.c:369:
+	if (!dev) {
+		return -ENODEV;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#628: FILE: drivers/mtd/devices/pmc551.c:386:
+		while (counter++ < 100) {
 			pci_write_config_byte(dev, PMC551_SYS_CTRL_REG, bcmd);
 		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#635: FILE: drivers/mtd/devices/pmc551.c:391:
+		while (counter++ < 100) {
 			pci_write_config_byte(dev, PMC551_SYS_CTRL_REG, bcmd);
 		}

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#759: FILE: drivers/mtd/devices/pmc551.c:464:
+	if ((size &= PCI_BASE_ADDRESS_MEM_MASK) == 0) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#759: FILE: drivers/mtd/devices/pmc551.c:464:
+	if ((size &= PCI_BASE_ADDRESS_MEM_MASK) == 0) {
+		return -ENODEV;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#764: FILE: drivers/mtd/devices/pmc551.c:469:
+	if ((cfg & PCI_BASE_ADDRESS_SPACE) != PCI_BASE_ADDRESS_SPACE_MEMORY) {
+		return -ENODEV;
 	}

WARNING:TYPO_SPELLING: 'tendancy' may be misspelled - perhaps 'tendency'?
#901: FILE: drivers/mtd/devices/pmc551.c:540:
+	 * has a tendancy to assert DEVSEL and TRDY when a write is performed
 	         ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#915: FILE: drivers/mtd/devices/pmc551.c:553:
+	/*
+	   cfg |= PCI_BASE_ADDRESS_MEM_PREFETCH;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1006: FILE: drivers/mtd/devices/pmc551.c:566:
+	printk(KERN_DEBUG "pmc551: %d%c (0x%x) of %sprefetchable memory at "

WARNING:SPLIT_STRING: quoted string split across lines
#1007: FILE: drivers/mtd/devices/pmc551.c:567:
+	printk(KERN_DEBUG "pmc551: %d%c (0x%x) of %sprefetchable memory at "
+		"0x%llx\n", (size < 1024) ? size : (size < 1048576) ?

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1018: FILE: drivers/mtd/devices/pmc551.c:578:
+	printk(KERN_DEBUG "pmc551: DRAM_BLK0 Flags: %s,%s\n"

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1028: FILE: drivers/mtd/devices/pmc551.c:588:
+	printk(KERN_DEBUG "pmc551: DRAM_BLK1 Flags: %s,%s\n"

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1038: FILE: drivers/mtd/devices/pmc551.c:598:
+	printk(KERN_DEBUG "pmc551: DRAM_BLK2 Flags: %s,%s\n"

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1048: FILE: drivers/mtd/devices/pmc551.c:608:
+	printk(KERN_DEBUG "pmc551: DRAM_BLK3 Flags: %s,%s\n"

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1058: FILE: drivers/mtd/devices/pmc551.c:618:
+	printk(KERN_DEBUG "pmc551: Memory Access %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1059: FILE: drivers/mtd/devices/pmc551.c:619:
+	printk(KERN_DEBUG "pmc551: Memory Access %s\n",
+		(((0x1 << 1) & cmd) == 0) ? "off" : "on");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1060: FILE: drivers/mtd/devices/pmc551.c:620:
+	printk(KERN_DEBUG "pmc551: I/O Access %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1061: FILE: drivers/mtd/devices/pmc551.c:621:
+	printk(KERN_DEBUG "pmc551: I/O Access %s\n",
+		(((0x1 << 0) & cmd) == 0) ? "off" : "on");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1064: FILE: drivers/mtd/devices/pmc551.c:624:
+	printk(KERN_DEBUG "pmc551: Devsel %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1065: FILE: drivers/mtd/devices/pmc551.c:625:
+	printk(KERN_DEBUG "pmc551: Devsel %s\n",
+		((PCI_STATUS_DEVSEL_MASK & cmd) == 0x000) ? "Fast" :

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1069: FILE: drivers/mtd/devices/pmc551.c:629:
+	printk(KERN_DEBUG "pmc551: %sFast Back-to-Back\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1070: FILE: drivers/mtd/devices/pmc551.c:630:
+	printk(KERN_DEBUG "pmc551: %sFast Back-to-Back\n",
+		((PCI_COMMAND_FAST_BACK & cmd) == 0) ? "Not " : "");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1073: FILE: drivers/mtd/devices/pmc551.c:633:
+	printk(KERN_DEBUG "pmc551: EEPROM is under %s control\n"

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1096: FILE: drivers/mtd/devices/pmc551.c:653:
+static int msize = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1102: FILE: drivers/mtd/devices/pmc551.c:657:
+static int asize = 0;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#1129: FILE: drivers/mtd/devices/pmc551.c:679:
+			printk(KERN_NOTICE "pmc551: Invalid memory size [%d]\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1130: FILE: drivers/mtd/devices/pmc551.c:680:
+			printk(KERN_NOTICE "pmc551: Invalid memory size [%d]\n",
+				msize);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#1142: FILE: drivers/mtd/devices/pmc551.c:688:
+			printk(KERN_NOTICE "pmc551: Invalid aperture size "

WARNING:SPLIT_STRING: quoted string split across lines
#1143: FILE: drivers/mtd/devices/pmc551.c:689:
+			printk(KERN_NOTICE "pmc551: Invalid aperture size "
+				"[%d]\n", asize);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1176: FILE: drivers/mtd/devices/pmc551.c:694:
+	printk(KERN_INFO PMC551_VERSION);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1182: FILE: drivers/mtd/devices/pmc551.c:700:
+	for (count = 0; count < MAX_MTD_DEVICES; count++) {
+

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1183: FILE: drivers/mtd/devices/pmc551.c:701:
+		if ((PCI_Device = pci_find_device(PCI_VENDOR_ID_V3_SEMI,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#1189: FILE: drivers/mtd/devices/pmc551.c:707:
+		printk(KERN_NOTICE "pmc551: Found PCI V370PDC at 0x%llx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1190: FILE: drivers/mtd/devices/pmc551.c:708:
+		printk(KERN_NOTICE "pmc551: Found PCI V370PDC at 0x%llx\n",
+			(unsigned long long)PCI_Device->resource[0].start);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1200: FILE: drivers/mtd/devices/pmc551.c:718:
+		if ((length = fixup_pmc551(PCI_Device)) <= 0) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#1201: FILE: drivers/mtd/devices/pmc551.c:719:
+			printk(KERN_NOTICE "pmc551: Cannot init SDRAM\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#1213: FILE: drivers/mtd/devices/pmc551.c:729:
+			printk(KERN_NOTICE "pmc551: Using specified memory "

WARNING:SPLIT_STRING: quoted string split across lines
#1214: FILE: drivers/mtd/devices/pmc551.c:730:
+			printk(KERN_NOTICE "pmc551: Using specified memory "
+				"size 0x%x\n", length);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*mtd)...) over kmalloc(sizeof(struct mtd_info)...)
#1239: FILE: drivers/mtd/devices/pmc551.c:735:
+		mtd = kmalloc(sizeof(struct mtd_info), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#1241: FILE: drivers/mtd/devices/pmc551.c:737:
+			printk(KERN_NOTICE "pmc551: Cannot allocate new MTD "

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#1241: FILE: drivers/mtd/devices/pmc551.c:737:
+		if (!mtd) {
+			printk(KERN_NOTICE "pmc551: Cannot allocate new MTD "

WARNING:SPLIT_STRING: quoted string split across lines
#1242: FILE: drivers/mtd/devices/pmc551.c:738:
+			printk(KERN_NOTICE "pmc551: Cannot allocate new MTD "
+				"device.\n");

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*priv)...) over kmalloc(sizeof(struct mypriv)...)
#1248: FILE: drivers/mtd/devices/pmc551.c:744:
+		priv = kmalloc(sizeof(struct mypriv), GFP_KERNEL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#1250: FILE: drivers/mtd/devices/pmc551.c:746:
+			printk(KERN_NOTICE "pmc551: Cannot allocate new MTD "

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#1250: FILE: drivers/mtd/devices/pmc551.c:746:
+		if (!priv) {
+			printk(KERN_NOTICE "pmc551: Cannot allocate new MTD "

WARNING:SPLIT_STRING: quoted string split across lines
#1251: FILE: drivers/mtd/devices/pmc551.c:747:
+			printk(KERN_NOTICE "pmc551: Cannot allocate new MTD "
+				"device.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#1260: FILE: drivers/mtd/devices/pmc551.c:756:
+			printk(KERN_NOTICE "pmc551: reducing aperture size to

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#1265: FILE: drivers/mtd/devices/pmc551.c:760:
+			printk(KERN_NOTICE "pmc551: Using existing aperture "

WARNING:SPLIT_STRING: quoted string split across lines
#1266: FILE: drivers/mtd/devices/pmc551.c:761:
+			printk(KERN_NOTICE "pmc551: Using existing aperture "
+				"size %dM\n", length >> 20);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#1270: FILE: drivers/mtd/devices/pmc551.c:764:
+			printk(KERN_NOTICE "pmc551: Using specified aperture "

WARNING:SPLIT_STRING: quoted string split across lines
#1271: FILE: drivers/mtd/devices/pmc551.c:765:
+			printk(KERN_NOTICE "pmc551: Using specified aperture "
+				"size %dM\n", asize >> 20);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1293: FILE: drivers/mtd/devices/pmc551.c:779:
+		printk(KERN_DEBUG "pmc551: setting aperture to %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1294: FILE: drivers/mtd/devices/pmc551.c:780:
+		printk(KERN_DEBUG "pmc551: setting aperture to %d\n",
+			ffs(priv->asize >> 20) - 1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1308: FILE: drivers/mtd/devices/pmc551.c:788:
+		pci_write_config_dword(priv->dev, PMC551_PCI_MEM_MAP0,
+					priv->curr_map0);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1313: FILE: drivers/mtd/devices/pmc551.c:791:
+		printk(KERN_DEBUG "pmc551: aperture set to %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1314: FILE: drivers/mtd/devices/pmc551.c:792:
+		printk(KERN_DEBUG "pmc551: aperture set to %d\n",
+			(priv->base_map0 & 0xF0) >> 4);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#1346: FILE: drivers/mtd/devices/pmc551.c:809:
+			printk(KERN_NOTICE "pmc551: Failed to register new "

WARNING:SPLIT_STRING: quoted string split across lines
#1347: FILE: drivers/mtd/devices/pmc551.c:810:
+			printk(KERN_NOTICE "pmc551: Failed to register new "
+				"device\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#1366: FILE: drivers/mtd/devices/pmc551.c:816:
+		printk(KERN_NOTICE "Registered pmc551 memory device.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#1367: FILE: drivers/mtd/devices/pmc551.c:817:
+		printk(KERN_NOTICE "Mapped %dM of memory from 0x%p to 0x%p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1368: FILE: drivers/mtd/devices/pmc551.c:818:
+		printk(KERN_NOTICE "Mapped %dM of memory from 0x%p to 0x%p\n",
+			priv->asize >> 20,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#1370: FILE: drivers/mtd/devices/pmc551.c:820:
+		printk(KERN_NOTICE "Total memory is %d%c\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1371: FILE: drivers/mtd/devices/pmc551.c:821:
+		printk(KERN_NOTICE "Total memory is %d%c\n",
+			(length < 1024) ? length :

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#1385: FILE: drivers/mtd/devices/pmc551.c:830:
+		printk(KERN_NOTICE "pmc551: not detected\n");

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1387: FILE: drivers/mtd/devices/pmc551.c:832:
+		return -ENODEV;
+	} else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1414: FILE: drivers/mtd/devices/pmc551.c:852:
+			printk(KERN_DEBUG "pmc551: unmapping %dM starting at "

WARNING:SPLIT_STRING: quoted string split across lines
#1415: FILE: drivers/mtd/devices/pmc551.c:853:
+			printk(KERN_DEBUG "pmc551: unmapping %dM starting at "
+				"0x%p\n", priv->asize >> 20, priv->start);

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.37163.commit.4eb72c038d9fc912ecbdbbbf1b754e12c7d784d3 total: 12 errors, 89 warnings, 22 checks, 1376 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.37163.commit.4eb72c038d9fc912ecbdbbbf1b754e12c7d784d3 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
