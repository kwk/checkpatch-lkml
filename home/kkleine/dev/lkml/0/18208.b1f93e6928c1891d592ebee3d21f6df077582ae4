WARNING:REPEATED_WORD: Possible repeated word: 'that'
#33: 
only hides a shortcoming in the MTRR code itself, in that that code is not

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#67: FILE: arch/i386/kernel/cpu/mtrr/amd.c:10:
+	     unsigned long *size, mtrr_type * type)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#101: FILE: arch/i386/kernel/cpu/mtrr/centaur.c:53:
+		unsigned long *size, mtrr_type * type)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#112: FILE: arch/i386/kernel/cpu/mtrr/cyrix.c:12:
+	      unsigned long *size, mtrr_type * type)

WARNING:MISPLACED_INIT: __initdata should be placed after mtrr_show
#185: FILE: arch/i386/kernel/cpu/mtrr/generic.c:29:
+static __initdata int mtrr_show;

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#195: FILE: arch/i386/kernel/cpu/mtrr/generic.c:54:
+static void __init print_fixed(unsigned base, unsigned step, const mtrr_type*types)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#195: FILE: arch/i386/kernel/cpu/mtrr/generic.c:54:
+static void __init print_fixed(unsigned base, unsigned step, const mtrr_type*types)

ERROR:POINTER_LOCATION: "foo*bar" should be "foo *bar"
#195: FILE: arch/i386/kernel/cpu/mtrr/generic.c:54:
+static void __init print_fixed(unsigned base, unsigned step, const mtrr_type*types)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#197: FILE: arch/i386/kernel/cpu/mtrr/generic.c:56:
+	unsigned i;

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#200: FILE: arch/i386/kernel/cpu/mtrr/generic.c:59:
+		printk(KERN_INFO "MTRR %05X-%05X %s\n", base, base + step - 1, mtrr_attrib_to_str(*types));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#200: FILE: arch/i386/kernel/cpu/mtrr/generic.c:59:
+		printk(KERN_INFO "MTRR %05X-%05X %s\n", base, base + step - 1, mtrr_attrib_to_str(*types));

CHECK:CAMELCASE: Avoid CamelCase: <MTRRcap_MSR>
#210: FILE: arch/i386/kernel/cpu/mtrr/generic.c:77:
+	rdmsr(MTRRcap_MSR, lo, dummy);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#226: FILE: arch/i386/kernel/cpu/mtrr/generic.c:92:
+		printk(KERN_INFO "MTRR default type: %s\n", mtrr_attrib_to_str(mtrr_state.def_type));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#226: FILE: arch/i386/kernel/cpu/mtrr/generic.c:92:
+		printk(KERN_INFO "MTRR default type: %s\n", mtrr_attrib_to_str(mtrr_state.def_type));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#228: FILE: arch/i386/kernel/cpu/mtrr/generic.c:94:
+			printk(KERN_INFO "MTRR fixed ranges %sabled:\n",

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#232: FILE: arch/i386/kernel/cpu/mtrr/generic.c:98:
+				print_fixed(0x80000 + i * 0x20000, 0x04000, mtrr_state.fixed_ranges + (i + 1) * 8);

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#234: FILE: arch/i386/kernel/cpu/mtrr/generic.c:100:
+				print_fixed(0xC0000 + i * 0x08000, 0x01000, mtrr_state.fixed_ranges + (i + 3) * 8);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#236: FILE: arch/i386/kernel/cpu/mtrr/generic.c:102:
+		printk(KERN_INFO "MTRR variable ranges %sabled:\n",

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#238: FILE: arch/i386/kernel/cpu/mtrr/generic.c:104:
+		high_width = ((size_or_mask ? ffs(size_or_mask) - 1 : 32) - (32 - PAGE_SHIFT) + 3) / 4;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#241: FILE: arch/i386/kernel/cpu/mtrr/generic.c:107:
+				printk(KERN_INFO "MTRR %u base %0*X%05X000 mask %0*X%05X000 %s\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#251: FILE: arch/i386/kernel/cpu/mtrr/generic.c:117:
+				printk(KERN_INFO "MTRR %u disabled\n", i);

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#313: FILE: arch/i386/kernel/cpu/mtrr/generic.c:282:
+		deftype_lo = (deftype_lo & ~0xcff) | mtrr_state.def_type | (mtrr_state.enabled << 10);

CHECK:CAMELCASE: Avoid CamelCase: <MTRRdefType_MSR>
#330: FILE: arch/i386/kernel/cpu/mtrr/generic.c:328:
+	mtrr_wrmsr(MTRRdefType_MSR, deftype_lo & ~0xcff, deftype_hi);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#391: FILE: arch/i386/kernel/cpu/mtrr/if.c:243:
+		if (gentry.base + size - 1 >= (1UL << (8 * sizeof(gentry.size) - PAGE_SHIFT))
+		    || size >= (1UL << (8 * sizeof(gentry.size) - PAGE_SHIFT)))

CHECK:BRACES: braces {} should be used on all arms of this statement
#408: FILE: arch/i386/kernel/cpu/mtrr/if.c:279:
+		if (size != (__typeof__(gentry.size))size)
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#409: FILE: arch/i386/kernel/cpu/mtrr/if.c:280:
+			gentry.base = gentry.size = gentry.type = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:BRACES: Unbalanced braces around else statement
#410: FILE: arch/i386/kernel/cpu/mtrr/if.c:281:
+		else {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#442: FILE: arch/i386/kernel/cpu/mtrr/main.c:171:
+static inline int types_compatible(mtrr_type type1, mtrr_type type2) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#471: FILE: arch/i386/kernel/cpu/mtrr/main.c:333:
+		printk(KERN_WARNING "mtrr: zero sized request\n");

CHECK:BRACES: braces {} should be used on all arms of this statement
#499: FILE: arch/i386/kernel/cpu/mtrr/main.c:357:
+				if (type == ltype) {
[...]
+				else if (types_compatible(type, ltype))
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#503: FILE: arch/i386/kernel/cpu/mtrr/main.c:361:
+				}
+				else if (types_compatible(type, ltype))

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPLIT_STRING: quoted string split across lines
#509: FILE: arch/i386/kernel/cpu/mtrr/main.c:366:
 			       "mtrr: 0x%lx000,0x%lx000 overlaps existing"
+			       " 0x%lx000,0x%lx000\n", base, size, lbase,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:BRACES: braces {} should be used on all arms of this statement
#529: FILE: arch/i386/kernel/cpu/mtrr/main.c:388:
+		if (likely(replace < 0))
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#531: FILE: arch/i386/kernel/cpu/mtrr/main.c:390:
+		else {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#569: FILE: arch/i386/kernel/cpu/mtrr/mtrr.h:46:
+		       unsigned long *size, mtrr_type * type);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#578: FILE: arch/i386/kernel/cpu/mtrr/mtrr.h:54:
+extern int generic_get_free_region(unsigned long base, unsigned long size,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.18208.commit.b1f93e6928c1891d592ebee3d21f6df077582ae4 total: 7 errors, 19 warnings, 10 checks, 504 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.18208.commit.b1f93e6928c1891d592ebee3d21f6df077582ae4 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
