WARNING:TYPO_SPELLING: 'als' may be misspelled - perhaps 'also'?
#37: 
in the block layer. The bsg conversions als should fix
                                        ^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: No space is necessary after a cast
#86: FILE: block/ll_rw_blk.c:2308:
+	uaddr = (unsigned long) ubuf;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#92: FILE: block/ll_rw_blk.c:2314:
+	if (IS_ERR(bio)) {
+		return PTR_ERR(bio);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#111: FILE: block/ll_rw_blk.c:2333:
+	if (!rq->bio)
[...]
+	else if (!q->back_merge_fn(q, rq, bio)) {
[...]
+	} else {
[...]

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#159: FILE: block/ll_rw_blk.c:2390:
+	rq->bio = rq->biohead_orig = NULL;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#202: FILE: block/ll_rw_blk.c:2414:
+	rq->buffer = rq->data = NULL;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#253: FILE: block/ll_rw_blk.c:2481:
+^Istruct bio *bio, *mapped_bio; $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#293: FILE: block/ll_rw_blk.c:3560:
+	rq->bio = rq->biotail = rq->biohead_orig = bio;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#357: FILE: include/linux/blkdev.h:609:
 }
+static inline struct bio *blk_get_bounced_bio(struct bio *bio)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#370: FILE: include/linux/blkdev.h:646:
+extern int blk_rq_map_user(request_queue_t *, struct request *, void __user *, unsigned long);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'request_queue_t *' should also have an identifier name
#370: FILE: include/linux/blkdev.h:646:
+extern int blk_rq_map_user(request_queue_t *, struct request *, void __user *, unsigned long);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request *' should also have an identifier name
#370: FILE: include/linux/blkdev.h:646:
+extern int blk_rq_map_user(request_queue_t *, struct request *, void __user *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void __user *' should also have an identifier name
#370: FILE: include/linux/blkdev.h:646:
+extern int blk_rq_map_user(request_queue_t *, struct request *, void __user *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#370: FILE: include/linux/blkdev.h:646:
+extern int blk_rq_map_user(request_queue_t *, struct request *, void __user *, unsigned long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#371: FILE: include/linux/blkdev.h:647:
+extern int blk_rq_unmap_user(struct request *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request *' should also have an identifier name
#371: FILE: include/linux/blkdev.h:647:
+extern int blk_rq_unmap_user(struct request *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#374: FILE: include/linux/blkdev.h:649:
+extern int blk_rq_map_user_iov(request_queue_t *, struct request *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'request_queue_t *' should also have an identifier name
#374: FILE: include/linux/blkdev.h:649:
+extern int blk_rq_map_user_iov(request_queue_t *, struct request *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request *' should also have an identifier name
#374: FILE: include/linux/blkdev.h:649:
+extern int blk_rq_map_user_iov(request_queue_t *, struct request *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sg_iovec *' should also have an identifier name
#374: FILE: include/linux/blkdev.h:649:
+extern int blk_rq_map_user_iov(request_queue_t *, struct request *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#374: FILE: include/linux/blkdev.h:649:
+extern int blk_rq_map_user_iov(request_queue_t *, struct request *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#374: FILE: include/linux/blkdev.h:649:
+extern int blk_rq_map_user_iov(request_queue_t *, struct request *,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#385: FILE: include/linux/blkdev.h:658:
+extern int blk_complete_sghdr_rq(struct request *, struct sg_io_hdr *); $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#385: FILE: include/linux/blkdev.h:658:
+extern int blk_complete_sghdr_rq(struct request *, struct sg_io_hdr *); 

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request *' should also have an identifier name
#385: FILE: include/linux/blkdev.h:658:
+extern int blk_complete_sghdr_rq(struct request *, struct sg_io_hdr *); 

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sg_io_hdr *' should also have an identifier name
#385: FILE: include/linux/blkdev.h:658:
+extern int blk_complete_sghdr_rq(struct request *, struct sg_io_hdr *); 

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#393: FILE: include/linux/blkdev.h:740:
+extern struct bio *blk_get_bounced_bio(struct bio *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bio *' should also have an identifier name
#393: FILE: include/linux/blkdev.h:740:
+extern struct bio *blk_get_bounced_bio(struct bio *);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#410: FILE: mm/highmem.c:460:
+EXPORT_SYMBOL(blk_get_bounced_bio);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.39696.commit.9a698fb161870b865463efe101ef0380fc891a31 total: 2 errors, 16 warnings, 11 checks, 332 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.39696.commit.9a698fb161870b865463efe101ef0380fc891a31 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
