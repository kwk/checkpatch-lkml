WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#43: FILE: fs/unionfs/rdstate.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#65: FILE: fs/unionfs/rdstate.c:23:
+ * of the second structure which is a filldir_node. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#70: FILE: fs/unionfs/rdstate.c:28:
+ * space. */

WARNING:NEEDLESS_IF: kmem_cache_destroy(NULL) is safe and this check is probably not required
#87: FILE: fs/unionfs/rdstate.c:45:
+	if (unionfs_filldir_cachep)
+		kmem_cache_destroy(unionfs_filldir_cachep);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#112: FILE: fs/unionfs/rdstate.c:70:
+		if (!(hidden_inode = itohi_index(inode, bindex)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#128: FILE: fs/unionfs/rdstate.c:86:
+	BUG_ON(sizeof(loff_t) != (sizeof(unsigned int) + sizeof(unsigned int)));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#129: FILE: fs/unionfs/rdstate.c:87:
+	BUG_ON(ftopd(file)->rdstate != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rdstate"
#129: FILE: fs/unionfs/rdstate.c:87:
+	BUG_ON(ftopd(file)->rdstate != NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around state->uds_list[i]
#221: FILE: fs/unionfs/rdstate.c:179:
+		struct list_head *head = &(state->uds_list[i]);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#245: FILE: fs/unionfs/rdstate.c:203:
+	BUG_ON(namelen <= 0);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around rdstate->uds_list[index]
#250: FILE: fs/unionfs/rdstate.c:208:
+	head = &(rdstate->uds_list[index]);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#255: FILE: fs/unionfs/rdstate.c:213:
+		if (cursor->namelen == namelen && cursor->hash == hash
+		    && !strncmp(cursor->name, name, namelen)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#261: FILE: fs/unionfs/rdstate.c:219:
+				printk(KERN_DEBUG

WARNING:BRACES: braces {} are not necessary for single statement blocks
#269: FILE: fs/unionfs/rdstate.c:227:
+	if (!found) {
+		cursor = NULL;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#299: FILE: fs/unionfs/rdstate.c:257:
+	BUG_ON(namelen <= 0);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around rdstate->uds_list[index]
#303: FILE: fs/unionfs/rdstate.c:261:
+	head = &(rdstate->uds_list[index]);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around new->file_list
#333: FILE: fs/unionfs/rdstate.c:291:
+	list_add(&(new->file_list), head);

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.30557.commit.8cfd02feaa39639da585ee0963c554cc8211db9c total: 1 errors, 10 warnings, 6 checks, 295 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.30557.commit.8cfd02feaa39639da585ee0963c554cc8211db9c has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
