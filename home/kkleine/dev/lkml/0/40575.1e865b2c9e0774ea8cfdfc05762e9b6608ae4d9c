CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#121: FILE: include/linux/security.h:54:
+extern int cap_task_kill(struct task_struct *p, struct siginfo *info, int sig, u32 secid);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#122: FILE: include/linux/security.h:55:
+extern int cap_task_setscheduler (struct task_struct *p, int policy, struct sched_param *lp);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#122: FILE: include/linux/security.h:55:
+extern int cap_task_setscheduler (struct task_struct *p, int policy, struct sched_param *lp);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#123: FILE: include/linux/security.h:56:
+extern int cap_task_setioprio (struct task_struct *p, int ioprio);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#123: FILE: include/linux/security.h:56:
+extern int cap_task_setioprio (struct task_struct *p, int ioprio);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#124: FILE: include/linux/security.h:57:
+extern int cap_task_setnice (struct task_struct *p, int nice);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#124: FILE: include/linux/security.h:57:
+extern int cap_task_setnice (struct task_struct *p, int nice);

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#197: FILE: security/commoncap.c:113:
+#define XATTR_NAME_CAPS XATTR_SECURITY_PREFIX XATTR_CAPS_SUFFIX

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#220: FILE: security/commoncap.c:136:
+	for (i=CAP_NUMCAPS; i<sizeof(cap->effective); i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#220: FILE: security/commoncap.c:136:
+	for (i=CAP_NUMCAPS; i<sizeof(cap->effective); i++) {
 	                     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#224: FILE: security/commoncap.c:140:
+	for (i=CAP_NUMCAPS; i<sizeof(cap->permitted); i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#224: FILE: security/commoncap.c:140:
+	for (i=CAP_NUMCAPS; i<sizeof(cap->permitted); i++) {
 	                     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#228: FILE: security/commoncap.c:144:
+	for (i=CAP_NUMCAPS; i<sizeof(cap->inheritable); i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#228: FILE: security/commoncap.c:144:
+	for (i=CAP_NUMCAPS; i<sizeof(cap->inheritable); i++) {
 	                     ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#272: FILE: security/commoncap.c:200:
+		printk(KERN_NOTICE "%s: Error (%d) getting xattr\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#273: FILE: security/commoncap.c:201:
+		printk(KERN_NOTICE "%s: Error (%d) getting xattr\n",
+				__FUNCTION__, rc);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#273: FILE: security/commoncap.c:201:
+				__FUNCTION__, rc);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#278: FILE: security/commoncap.c:206:
+		printk(KERN_NOTICE "%s: got wrong size for getxattr (%d)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#279: FILE: security/commoncap.c:207:
+		printk(KERN_NOTICE "%s: got wrong size for getxattr (%d)\n",
+					__FUNCTION__, rc);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#279: FILE: security/commoncap.c:207:
+					__FUNCTION__, rc);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#282: FILE: security/commoncap.c:210:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#325: FILE: security/commoncap.c:395:
+ *   ^Ithen those actions should be allowed$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#338: FILE: security/commoncap.c:408:
+int cap_task_setscheduler (struct task_struct *p, int policy,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#344: FILE: security/commoncap.c:414:
+int cap_task_setioprio (struct task_struct *p, int ioprio)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#349: FILE: security/commoncap.c:419:
+int cap_task_setnice (struct task_struct *p, int nice)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#355: FILE: security/commoncap.c:425:
+int cap_task_kill(struct task_struct *p, struct siginfo *info,
+				int sig, u32 secid)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#384: FILE: security/commoncap.c:484:
+EXPORT_SYMBOL(cap_task_setscheduler);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#385: FILE: security/commoncap.c:485:
+EXPORT_SYMBOL(cap_task_setioprio);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#386: FILE: security/commoncap.c:486:
+EXPORT_SYMBOL(cap_task_setnice);

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.40575.commit.1e865b2c9e0774ea8cfdfc05762e9b6608ae4d9c total: 8 errors, 14 warnings, 7 checks, 259 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.40575.commit.1e865b2c9e0774ea8cfdfc05762e9b6608ae4d9c has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
