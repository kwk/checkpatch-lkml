CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#78: FILE: include/linux/slab.h:161:
+extern void *__kmalloc_track_caller(size_t, gfp_t, void*);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#78: FILE: include/linux/slab.h:161:
+extern void *__kmalloc_track_caller(size_t, gfp_t, void*);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gfp_t' should also have an identifier name
#78: FILE: include/linux/slab.h:161:
+extern void *__kmalloc_track_caller(size_t, gfp_t, void*);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void*' should also have an identifier name
#78: FILE: include/linux/slab.h:161:
+extern void *__kmalloc_track_caller(size_t, gfp_t, void*);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#162: FILE: net/core/skbuff.c:160:
+	data = kmalloc_track_caller(size + sizeof(struct skb_shared_info),
+			gfp_mask);

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.33573.commit.ab84e659e6e6c82371721230e6c62268511be0b5 total: 0 errors, 3 warnings, 2 checks, 99 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.33573.commit.ab84e659e6e6c82371721230e6c62268511be0b5 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
