WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
This patchs extends cpusets to support creation of metered cpusets. Changes 

WARNING:TYPO_SPELLING: 'patchs' may be misspelled - perhaps 'patches'?
#34: 
This patchs extends cpusets to support creation of metered cpusets. Changes 
     ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:REPEATED_WORD: Possible repeated word: 'container'
#76: 
	# mount -t container container container

WARNING:REPEATED_WORD: Possible repeated word: 'container'
#76: 
	# mount -t container container container

WARNING:TYPO_SPELLING: 'Cant' may be misspelled - perhaps 'Can't'?
#219: FILE: kernel/cpuset.c:185:
+	/* Cant change meter setting if a cpuset already has children */
 	   ^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#231: FILE: kernel/cpuset.c:197:
+^I^I       ^I^I^I^I^I!is_cpu_exclusive(cur))$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#231: FILE: kernel/cpuset.c:197:
+^I^I       ^I^I^I^I^I!is_cpu_exclusive(cur))$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#231: FILE: kernel/cpuset.c:197:
+	if (parent && !is_metered(parent) && is_metered(trial) &&
+		       					!is_cpu_exclusive(cur))

WARNING:TYPO_SPELLING: 'Cant' may be misspelled - perhaps 'Can't'?
#234: FILE: kernel/cpuset.c:200:
+	/* Cant change exclusive setting if a cpuset is metered */
 	   ^^^^

WARNING:TYPO_SPELLING: 'Cant' may be misspelled - perhaps 'Can't'?
#238: FILE: kernel/cpuset.c:204:
+	/* Cant change cpus_allowed of a metered cpuset */
 	   ^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#254: FILE: kernel/cpuset.c:220:
+	if (is_metered(cs))
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#256: FILE: kernel/cpuset.c:222:
+	else {

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#270: FILE: kernel/cpuset.c:236:
+	limit = simple_strtoul(buf, NULL, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#283: FILE: kernel/cpuset.c:249:
+	c += sprintf (c, "%lu", limit);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#296: FILE: kernel/cpuset.c:262:
+void cpu_ctlr_move_task(struct task_struct *p, struct cpuset *old,
+						 struct cpuset *new)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'cs' may be better as '(cs)' to avoid precedence issues
#301: FILE: kernel/cpuset.c:267:
+#define init_cpu_ctlr_data(cs)	(cs->cpu_ctlr_data = NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#328: FILE: kernel/cpuset.c:294:
+static void cpu_ctlr_move_task(struct task_struct *p, struct cpuset *old,
+						 struct cpuset *new)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#343: FILE: kernel/cpuset.c:519:
+	if ((rc = validate_meters(cur, trial)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#454: FILE: kernel/cpuset.c:1346:
+	if ((err = container_add_file(cont, &cft_meter_flag)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#456: FILE: kernel/cpuset.c:1348:
+	if ((err = container_add_file(cont, &cft_meter_limit)) < 0)

WARNING:TYPO_SPELLING: 'cant' may be misspelled - perhaps 'can't'?
#467: FILE: kernel/cpuset.c:1378:
+	/* metered cpusets cant have grand-children! */
 	                   ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#609: FILE: kernel/sched.c:901:
+static void sched_move_task(struct task_struct *p, struct task_grp *old,
+							struct task_grp *new)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#649: FILE: include/linux/sched.h:1707:
+	void (*move_task)(struct task_struct *p, struct task_grp *old,
+						struct task_grp *new);

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#665: FILE: init/Kconfig:268:
+config CPUMETER
+	bool "CPU resource control"
+	depends on CPUSETS && EXPERIMENTAL
+	help
+	  This options lets you create cpu resource partitions within
+	  cpusets. Each resource partition can be given a different quota
+	  of CPU usage.
+

Kconfig symbols should have a help text which fully describes
it.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.13459.commit.e8bd019d9b3d57e188d142ff216a57e91014f19b total: 4 errors, 12 warnings, 8 checks, 510 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.13459.commit.e8bd019d9b3d57e188d142ff216a57e91014f19b has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
