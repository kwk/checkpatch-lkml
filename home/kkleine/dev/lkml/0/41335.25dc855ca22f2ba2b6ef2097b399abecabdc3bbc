WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:PATCH_PREFIX: patch prefix 'kernel' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#42: FILE: drivers/net/ehea/ehea_main.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#43: FILE: drivers/net/ehea/ehea_main.c:2:
+ *  linux/drivers/net/ehea/ehea_main.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#66: FILE: drivers/net/ehea/ehea_main.c:25:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#67: FILE: drivers/net/ehea/ehea_main.c:26:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#83: FILE: drivers/net/ehea/ehea_main.c:42:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#89: FILE: drivers/net/ehea/ehea_main.c:48:
+
+

WARNING:SPLIT_STRING: quoted string split across lines
#104: FILE: drivers/net/ehea/ehea_main.c:63:
+MODULE_PARM_DESC(rq3_entries, "Number of entries for Receive Queue 3 "
+		 "[2^x - 1], x = [6..14]. Default = "

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#107: FILE: drivers/net/ehea/ehea_main.c:66:
+MODULE_PARM_DESC(rq2_entries, "Number of entries for Receive Queue 2 "
+		 "[2^x - 1], x = [6..14]. Default = "

WARNING:SPLIT_STRING: quoted string split across lines
#110: FILE: drivers/net/ehea/ehea_main.c:69:
+MODULE_PARM_DESC(rq1_entries, "Number of entries for Receive Queue 1 "
+		 "[2^x - 1], x = [6..14]. Default = "

WARNING:SPLIT_STRING: quoted string split across lines
#113: FILE: drivers/net/ehea/ehea_main.c:72:
+MODULE_PARM_DESC(sq_entries, " Number of entries for the Send Queue  "
+		 "[2^x - 1], x = [6..14]. Default = "

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#116: FILE: drivers/net/ehea/ehea_main.c:75:
+void ehea_dump(void *adr, int len, char *msg) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#119: FILE: drivers/net/ehea/ehea_main.c:78:
+	unsigned char *deb = adr;
+	for (x = 0; x < len; x += 16) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#120: FILE: drivers/net/ehea/ehea_main.c:79:
+		printk(DRV_NAME "%s adr=%p ofs=%04x %016lx %016lx\n", msg,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#121: FILE: drivers/net/ehea/ehea_main.c:80:
+		printk(DRV_NAME "%s adr=%p ofs=%04x %016lx %016lx\n", msg,
+			  deb, x, *((u64 *)&deb[0]), *((u64 *)&deb[8]));

ERROR:CODE_INDENT: code indent should use tabs where possible
#165: FILE: drivers/net/ehea/ehea_main.c:124:
+        kfree(cb2);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#165: FILE: drivers/net/ehea/ehea_main.c:124:
+        kfree(cb2);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#240: FILE: drivers/net/ehea/ehea_main.c:199:
+		struct sk_buff *skb = dev_alloc_skb(packet_size);
+		if (!skb) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#252: FILE: drivers/net/ehea/ehea_main.c:211:
+^I^I            | EHEA_BMASK_SET(EHEA_WR_ID_INDEX, index);$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#273: FILE: drivers/net/ehea/ehea_main.c:232:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#281: FILE: drivers/net/ehea/ehea_main.c:240:
+
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cqe->header_length == 0'
#294: FILE: drivers/net/ehea/ehea_main.c:253:
+	if (((cqe->status & EHEA_CQE_STAT_ERR_TCP) != 0)
+	    && (cqe->header_length == 0))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#295: FILE: drivers/net/ehea/ehea_main.c:254:
+	if (((cqe->status & EHEA_CQE_STAT_ERR_TCP) != 0)
+	    && (cqe->header_length == 0))

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#323: FILE: drivers/net/ehea/ehea_main.c:282:
+	pref = (void*)skb_array[x];

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#327: FILE: drivers/net/ehea/ehea_main.c:286:
+	pref = (void*)(skb_array[x]->data);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#347: FILE: drivers/net/ehea/ehea_main.c:306:
+	pref = (void*)skb_array[x];

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#351: FILE: drivers/net/ehea/ehea_main.c:310:
+	pref = (void*)(skb_array[x]->data);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#406: FILE: drivers/net/ehea/ehea_main.c:365:
+	processed = processed_rq1 = processed_rq2 = processed_rq3 = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:MEMORY_BARRIER: memory barrier without comment
#422: FILE: drivers/net/ehea/ehea_main.c:381:
+		rmb();

ERROR:CODE_INDENT: code indent should use tabs where possible
#431: FILE: drivers/net/ehea/ehea_main.c:390:
+     ^I^I^I^I^Iskb = dev_alloc_skb(EHEA_LL_PKT_SIZE);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#431: FILE: drivers/net/ehea/ehea_main.c:390:
+     ^I^I^I^I^Iskb = dev_alloc_skb(EHEA_LL_PKT_SIZE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#431: FILE: drivers/net/ehea/ehea_main.c:390:
+     ^I^I^I^I^Iskb = dev_alloc_skb(EHEA_LL_PKT_SIZE);$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#435: FILE: drivers/net/ehea/ehea_main.c:394:
+				memcpy(skb->data, ((char*)cqe) + 64,

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#466: FILE: drivers/net/ehea/ehea_main.c:425:
+		} else { /* Error occured */
 		                  ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#526: FILE: drivers/net/ehea/ehea_main.c:485:
+	struct ehea_port_res *pr = (struct ehea_port_res*)data;

WARNING:MEMORY_BARRIER: memory barrier without comment
#544: FILE: drivers/net/ehea/ehea_main.c:503:
+		rmb();

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#582: FILE: drivers/net/ehea/ehea_main.c:541:
+	struct ehea_port_res *pr = (struct ehea_port_res*)param;

WARNING:LINE_SPACING: Missing a blank line after declarations
#583: FILE: drivers/net/ehea/ehea_main.c:542:
+	struct ehea_port_res *pr = (struct ehea_port_res*)param;
+	tasklet_hi_schedule(&pr->send_comp_task);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#587: FILE: drivers/net/ehea/ehea_main.c:546:
+irqreturn_t ehea_recv_irq_handler(int irq, void *param, struct pt_regs * regs)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#589: FILE: drivers/net/ehea/ehea_main.c:548:
+	struct ehea_port_res *pr = (struct ehea_port_res*)param;

WARNING:LINE_SPACING: Missing a blank line after declarations
#591: FILE: drivers/net/ehea/ehea_main.c:550:
+	struct ehea_port *port = pr->port;
+	netif_rx_schedule(port->netdev);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#595: FILE: drivers/net/ehea/ehea_main.c:554:
+irqreturn_t ehea_qp_aff_irq_handler(int irq, void *param, struct pt_regs * regs)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#597: FILE: drivers/net/ehea/ehea_main.c:556:
+	struct ehea_port *port = (struct ehea_port*)param;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#604: FILE: drivers/net/ehea/ehea_main.c:563:
+		ehea_debug("*eqe=%lx", *(u64*)eqe);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#649: FILE: drivers/net/ehea/ehea_main.c:608:
+	if (!is_valid_ether_addr((u8*)&port->mac_addr)) {

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#771: FILE: drivers/net/ehea/ehea_main.c:730:
+		if (hret == H_AUTHORITY)
+		{

WARNING:SPLIT_STRING: quoted string split across lines
#774: FILE: drivers/net/ehea/ehea_main.c:733:
+			ehea_info("Hypervisor denied setting port speed. Either"
+				  " this partition is not authorized to set "

WARNING:SPLIT_STRING: quoted string split across lines
#775: FILE: drivers/net/ehea/ehea_main.c:734:
+				  " this partition is not authorized to set "
+				  "port speed or another partition has modified"

WARNING:SPLIT_STRING: quoted string split across lines
#776: FILE: drivers/net/ehea/ehea_main.c:735:
+				  "port speed or another partition has modified"
+				  " port speed first.");

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#778: FILE: drivers/net/ehea/ehea_main.c:737:
+		} else
+		{

CHECK:BRACES: Unbalanced braces around else statement
#778: FILE: drivers/net/ehea/ehea_main.c:737:
+		} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#812: FILE: drivers/net/ehea/ehea_main.c:771:
+				ret = ehea_sense_port_attr(

WARNING:SPLIT_STRING: quoted string split across lines
#816: FILE: drivers/net/ehea/ehea_main.c:775:
+					ehea_error("failed resensing port "
+						   "attributes");

WARNING:SPLIT_STRING: quoted string split across lines
#822: FILE: drivers/net/ehea/ehea_main.c:781:
+					ehea_info("%s: Logical port up: %dMbps "
+						  "%s Duplex",

CHECK:BRACES: Unbalanced braces around else statement
#831: FILE: drivers/net/ehea/ehea_main.c:790:
+		} else

WARNING:TYPO_SPELLING: 'Externel' may be misspelled - perhaps 'External'?
#851: FILE: drivers/net/ehea/ehea_main.c:810:
+			ehea_info("Externel switch port is primary port");
 			           ^^^^^^^^

WARNING:TYPO_SPELLING: 'Externel' may be misspelled - perhaps 'External'?
#853: FILE: drivers/net/ehea/ehea_main.c:812:
+			ehea_info("Externel switch port is backup port");
 			           ^^^^^^^^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#870: FILE: drivers/net/ehea/ehea_main.c:829:
+	struct ehea_adapter *adapter = (struct ehea_adapter*)data;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#894: FILE: drivers/net/ehea/ehea_main.c:853:
+	struct ehea_adapter *adapter = (struct ehea_adapter*)param;

WARNING:LINE_SPACING: Missing a blank line after declarations
#895: FILE: drivers/net/ehea/ehea_main.c:854:
+	struct ehea_adapter *adapter = (struct ehea_adapter*)param;
+	tasklet_hi_schedule(&adapter->neq_tasklet);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#899: FILE: drivers/net/ehea/ehea_main.c:858:
+
+

WARNING:TYPO_SPELLING: 'ist' may be misspelled - perhaps 'is'?
#933: FILE: drivers/net/ehea/ehea_main.c:892:
+				   "port_res_nr:%d, ist=%X", i,
 				                    ^^^

WARNING:SPLIT_STRING: quoted string split across lines
#933: FILE: drivers/net/ehea/ehea_main.c:892:
+			ehea_error("failed registering irq for ehea_recv_int:"
+				   "port_res_nr:%d, ist=%X", i,

WARNING:TYPO_SPELLING: 'ist' may be misspelled - perhaps 'is'?
#936: FILE: drivers/net/ehea/ehea_main.c:895:
+				u32 ist = port->port_res[k].recv_eq->attr.ist1;
 				    ^^^

WARNING:TYPO_SPELLING: 'ist' may be misspelled - perhaps 'is'?
#937: FILE: drivers/net/ehea/ehea_main.c:896:
+				ibmebus_free_irq(NULL, ist, &port->port_res[k]);
 				                       ^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#937: FILE: drivers/net/ehea/ehea_main.c:896:
+				u32 ist = port->port_res[k].recv_eq->attr.ist1;
+				ibmebus_free_irq(NULL, ist, &port->port_res[k]);

WARNING:SPLIT_STRING: quoted string split across lines
#943: FILE: drivers/net/ehea/ehea_main.c:902:
+			ehea_info("irq_handle 0x%X for funct ehea_recv_int %d "
+				  "registered", pr->recv_eq->attr.ist1, i);

WARNING:TYPO_SPELLING: 'ist' may be misspelled - perhaps 'is'?
#953: FILE: drivers/net/ehea/ehea_main.c:912:
+			   " ist=%X", port->qp_eq->attr.ist1);
 			     ^^^

WARNING:SPLIT_STRING: quoted string split across lines
#953: FILE: drivers/net/ehea/ehea_main.c:912:
+		ehea_error("failed registering irq for qp_aff_irq_handler:"
+			   " ist=%X", port->qp_eq->attr.ist1);

WARNING:SPLIT_STRING: quoted string split across lines
#958: FILE: drivers/net/ehea/ehea_main.c:917:
+		ehea_info("irq_handle 0x%X for function qp_aff_irq_handler "
+			  "registered", port->qp_eq->attr.ist1);

WARNING:TYPO_SPELLING: 'ist' may be misspelled - perhaps 'is'?
#970: FILE: drivers/net/ehea/ehea_main.c:929:
+				   " port_res_nr:%d, ist=%X", i,
 				                     ^^^

WARNING:SPLIT_STRING: quoted string split across lines
#970: FILE: drivers/net/ehea/ehea_main.c:929:
+			ehea_error("failed registering irq for ehea_send"
+				   " port_res_nr:%d, ist=%X", i,

WARNING:TYPO_SPELLING: 'ist' may be misspelled - perhaps 'is'?
#973: FILE: drivers/net/ehea/ehea_main.c:932:
+				u32 ist = port->port_res[k].send_eq->attr.ist1;
 				    ^^^

WARNING:TYPO_SPELLING: 'ist' may be misspelled - perhaps 'is'?
#974: FILE: drivers/net/ehea/ehea_main.c:933:
+				ibmebus_free_irq(NULL, ist, &port->port_res[i]);
 				                       ^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#974: FILE: drivers/net/ehea/ehea_main.c:933:
+				u32 ist = port->port_res[k].send_eq->attr.ist1;
+				ibmebus_free_irq(NULL, ist, &port->port_res[i]);

WARNING:SPLIT_STRING: quoted string split across lines
#980: FILE: drivers/net/ehea/ehea_main.c:939:
+			ehea_info("irq_handle 0x%X for function ehea_send_int "
+				  "%d registered", pr->send_eq->attr.ist1, i);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1038: FILE: drivers/net/ehea/ehea_main.c:997:
+                     | EHEA_BMASK_SET(PXLY_RC_VLAN_XTRACT, 1)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1038: FILE: drivers/net/ehea/ehea_main.c:997:
+                     | EHEA_BMASK_SET(PXLY_RC_VLAN_XTRACT, 1)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1039: FILE: drivers/net/ehea/ehea_main.c:998:
+                     | EHEA_BMASK_SET(PXLY_RC_VLAN_TAG_FILTER,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1039: FILE: drivers/net/ehea/ehea_main.c:998:
+                     | EHEA_BMASK_SET(PXLY_RC_VLAN_TAG_FILTER,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1040: FILE: drivers/net/ehea/ehea_main.c:999:
+^I^I                      PXLY_RC_VLAN_FILTER)$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1121: FILE: drivers/net/ehea/ehea_main.c:1080:
+	int arr_size = sizeof(void*) * max_q_entries;

WARNING:SPLIT_STRING: quoted string split across lines
#1224: FILE: drivers/net/ehea/ehea_main.c:1183:
+		ehea_info("QP: qp_nr=%d\n act_nr_snd_wqe=%d\n nr_rwqe_rq1=%d\n "
+			  "nr_rwqe_rq2=%d\n nr_rwqe_rq3=%d", init_attr->qp_nr,

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1302: FILE: drivers/net/ehea/ehea_main.c:1261:
+/*
+ * The write_* functions store information in swqe which is used by

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1331: FILE: drivers/net/ehea/ehea_main.c:1290:
+
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#1351: FILE: drivers/net/ehea/ehea_main.c:1310:
+	if (skb_data_size >= headersize) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1365: FILE: drivers/net/ehea/ehea_main.c:1324:
+	} else

CHECK:CAMELCASE: Avoid CamelCase: <write_swqe2_nonTSO>
#1369: FILE: drivers/net/ehea/ehea_main.c:1328:
+static inline void write_swqe2_nonTSO(struct sk_buff *skb,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1412: FILE: drivers/net/ehea/ehea_main.c:1371:
+	sg_list = (struct ehea_vsgentry*)&swqe->u.immdata_desc.sg_list;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1438: FILE: drivers/net/ehea/ehea_main.c:1397:
+		for (i = sg1entry_contains_frag_data; i < nfrags; i++) {
+

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1486: FILE: drivers/net/ehea/ehea_main.c:1445:
+	struct sockaddr *mac_addr = (struct sockaddr*)sa;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around cb0->port_mac_addr
#1503: FILE: drivers/net/ehea/ehea_main.c:1462:
+	memcpy(&(cb0->port_mac_addr), &(mac_addr->sa_data[0]), ETH_ALEN);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around mac_addr->sa_data[0]
#1503: FILE: drivers/net/ehea/ehea_main.c:1462:
+	memcpy(&(cb0->port_mac_addr), &(mac_addr->sa_data[0]), ETH_ALEN);

WARNING:SPLIT_STRING: quoted string split across lines
#1541: FILE: drivers/net/ehea/ehea_main.c:1500:
+		  hret != H_AUTHORITY ? "" : " Another partition owning a "
+		  "logical port on the same physical port might have altered "

WARNING:SPLIT_STRING: quoted string split across lines
#1542: FILE: drivers/net/ehea/ehea_main.c:1501:
+		  "logical port on the same physical port might have altered "
+		  "promiscuous mode first.");

WARNING:RETURN_VOID: void function return statements are not generally useful
#1610: FILE: drivers/net/ehea/ehea_main.c:1569:
+	return;
+}

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around port->mc_list->list
#1646: FILE: drivers/net/ehea/ehea_main.c:1605:
+	list_for_each_safe(pos, temp, &(port->mc_list->list)) {

CHECK:BRACES: Unbalanced braces around else statement
#1677: FILE: drivers/net/ehea/ehea_main.c:1636:
+	} else

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1688: FILE: drivers/net/ehea/ehea_main.c:1647:
+static void ehea_add_multicast_entry(struct ehea_port* port, u8* mc_mac_addr)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1688: FILE: drivers/net/ehea/ehea_main.c:1647:
+static void ehea_add_multicast_entry(struct ehea_port* port, u8* mc_mac_addr)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1705: FILE: drivers/net/ehea/ehea_main.c:1664:
+	if (!hret)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1707: FILE: drivers/net/ehea/ehea_main.c:1666:
+	else {

WARNING:SPLIT_STRING: quoted string split across lines
#1742: FILE: drivers/net/ehea/ehea_main.c:1701:
+			ehea_info("Mcast registration limit reached (0x%lx). "
+				  "Use ALLMULTI!",

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'new_mtu < 68'
#1759: FILE: drivers/net/ehea/ehea_main.c:1718:
+	if ((new_mtu < 68) || (new_mtu > EHEA_MAX_PACKET_SIZE))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'new_mtu > EHEA_MAX_PACKET_SIZE'
#1759: FILE: drivers/net/ehea/ehea_main.c:1718:
+	if ((new_mtu < 68) || (new_mtu > EHEA_MAX_PACKET_SIZE))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1780: FILE: drivers/net/ehea/ehea_main.c:1739:
+			if ((skb->nh.iph->frag_off & IP_MF)
+			    || (skb->nh.iph->frag_off & IP_OFFSET))

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1791: FILE: drivers/net/ehea/ehea_main.c:1750:
+		/* icmp (big data) and ip segmentation packets (all other ip
+		   packets) do not require any special handling */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1791: FILE: drivers/net/ehea/ehea_main.c:1750:
+		   packets) do not require any special handling */

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1825: FILE: drivers/net/ehea/ehea_main.c:1784:
+			if ((skb->nh.iph->frag_off & IP_MF)
+			    || (skb->nh.iph->frag_off & IP_OFFSET))

CHECK:BRACES: Unbalanced braces around else statement
#1829: FILE: drivers/net/ehea/ehea_main.c:1788:
+			else {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1839: FILE: drivers/net/ehea/ehea_main.c:1798:
+			/* icmp (big data) and
+			   ip segmentation packets (all other ip packets) */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1839: FILE: drivers/net/ehea/ehea_main.c:1798:
+			   ip segmentation packets (all other ip packets) */

WARNING:LINE_SPACING: Missing a blank line after declarations
#1901: FILE: drivers/net/ehea/ehea_main.c:1860:
+		u32 swqe_num = pr->swqe_id_counter;
+		ehea_xmit3(skb, dev, swqe);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1904: FILE: drivers/net/ehea/ehea_main.c:1863:
+		if (pr->swqe_ll_count >= (sig_iv - 1)) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1909: FILE: drivers/net/ehea/ehea_main.c:1868:
+		} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#1924: FILE: drivers/net/ehea/ehea_main.c:1883:
+		if (pr->swqe_count >= (EHEA_SIG_IV_LONG - 1)) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1929: FILE: drivers/net/ehea/ehea_main.c:1888:
+		} else

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2016: FILE: drivers/net/ehea/ehea_main.c:1975:
+
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#2052: FILE: drivers/net/ehea/ehea_main.c:2011:
+	return;
+}

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#2060: FILE: drivers/net/ehea/ehea_main.c:2019:
+	struct hcp_modify_qp_cb0* cb0;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2138: FILE: drivers/net/ehea/ehea_main.c:2097:
+	port->qp_eq = ehea_create_eq(port->adapter, eq_type,
+				   EHEA_MAX_ENTRIES_EQ, 1);

ERROR:SPACING: space required before the open parenthesis '('
#2173: FILE: drivers/net/ehea/ehea_main.c:2132:
+	for(k = 0; k < i; k++) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2173: FILE: drivers/net/ehea/ehea_main.c:2132:
+	for(k = 0; k < i; k++) {
+		ehea_clean_port_res(port, &port->port_res[k]);
+	}

ERROR:SPACING: space required before the open parenthesis '('
#2186: FILE: drivers/net/ehea/ehea_main.c:2145:
+	for(i = 0; i < port->num_def_qps + port->num_add_tx_qps; i++)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2223: FILE: drivers/net/ehea/ehea_main.c:2182:
+	mac_addr = (*(u64*)dev->dev_addr) >> 16;

ERROR:SPACING: space required before the open parenthesis '('
#2231: FILE: drivers/net/ehea/ehea_main.c:2190:
+	for(i = 0; i < port->num_def_qps + port->num_add_tx_qps; i++) {

ERROR:SPACING: space required before the open parenthesis '('
#2239: FILE: drivers/net/ehea/ehea_main.c:2198:
+	for(i = 0; i < port->num_def_qps; i++) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#2272: FILE: drivers/net/ehea/ehea_main.c:2231:
+        ret = ehea_up(dev);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2272: FILE: drivers/net/ehea/ehea_main.c:2231:
+        ret = ehea_up(dev);$

WARNING:TYPO_SPELLING: 'resetted' may be misspelled - perhaps 'reset'?
#2333: FILE: drivers/net/ehea/ehea_main.c:2292:
+		ehea_info("Device %s resetted successfully", dev->name);
 		                     ^^^^^^^^

WARNING:RETURN_VOID: void function return statements are not generally useful
#2339: FILE: drivers/net/ehea/ehea_main.c:2298:
+	return;
+}

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2402: FILE: drivers/net/ehea/ehea_main.c:2361:
+	dn_log_port_id = (u32*)get_property(dn, "ibm,hea-port-no", NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2406: FILE: drivers/net/ehea/ehea_main.c:2365:
+		ehea_error("bad device node: dn_log_port_id=%p",
+		       dn_log_port_id);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*port->mc_list)...) over kzalloc(sizeof(struct ehea_mc_list)...)
#2412: FILE: drivers/net/ehea/ehea_main.c:2371:
+	port->mc_list = kzalloc(sizeof(struct ehea_mc_list), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2436: FILE: drivers/net/ehea/ehea_main.c:2395:
+		if (hret != H_SUCCESS) {
+			ehea_info("Jumbo frames not activated");
+		}

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2498: FILE: drivers/net/ehea/ehea_main.c:2457:
+	for (i = 0; i < adapter->num_ports; i++) {
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2520: FILE: drivers/net/ehea/ehea_main.c:2479:
+			/* Free mem for this port struct. The others will be
+			   processed on rollback */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2520: FILE: drivers/net/ehea/ehea_main.c:2479:
+			   processed on rollback */

WARNING:TYPO_SPELLING: 'succesfully' may be misspelled - perhaps 'successfully'?
#2529: FILE: drivers/net/ehea/ehea_main.c:2488:
+	/* Check for succesfully set up ports */
 	             ^^^^^^^^^^^

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#2542: FILE: drivers/net/ehea/ehea_main.c:2501:
+static int __devinit ehea_probe(struct ibmebus_dev *dev,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2556: FILE: drivers/net/ehea/ehea_main.c:2515:
+	adapter_handle = (u64*)get_property(dev->ofdev.node, "ibm,hea-handle",

WARNING:SPLIT_STRING: quoted string split across lines
#2560: FILE: drivers/net/ehea/ehea_main.c:2519:
+		dev_err(&dev->ofdev.dev, "failed getting handle for adapter"
+			" '%s'\n", dev->ofdev.node->full_name);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2597: FILE: drivers/net/ehea/ehea_main.c:2556:
+				  (void*)adapter);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2620: FILE: drivers/net/ehea/ehea_main.c:2579:
+	ibmebus_free_irq(NULL, adapter->neq->attr.ist1, (void*)adapter);

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#2644: FILE: drivers/net/ehea/ehea_main.c:2603:
+static int __devexit ehea_remove(struct ibmebus_dev *dev)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rq1_entries < EHEA_MIN_ENTRIES_QP'
#2673: FILE: drivers/net/ehea/ehea_main.c:2632:
+	if ((rq1_entries < EHEA_MIN_ENTRIES_QP)
+	    || (rq1_entries > EHEA_MAX_ENTRIES_RQ1)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rq1_entries > EHEA_MAX_ENTRIES_RQ1'
#2673: FILE: drivers/net/ehea/ehea_main.c:2632:
+	if ((rq1_entries < EHEA_MIN_ENTRIES_QP)
+	    || (rq1_entries > EHEA_MAX_ENTRIES_RQ1)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2674: FILE: drivers/net/ehea/ehea_main.c:2633:
+	if ((rq1_entries < EHEA_MIN_ENTRIES_QP)
+	    || (rq1_entries > EHEA_MAX_ENTRIES_RQ1)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rq2_entries < EHEA_MIN_ENTRIES_QP'
#2678: FILE: drivers/net/ehea/ehea_main.c:2637:
+	if ((rq2_entries < EHEA_MIN_ENTRIES_QP)
+	    || (rq2_entries > EHEA_MAX_ENTRIES_RQ2)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rq2_entries > EHEA_MAX_ENTRIES_RQ2'
#2678: FILE: drivers/net/ehea/ehea_main.c:2637:
+	if ((rq2_entries < EHEA_MIN_ENTRIES_QP)
+	    || (rq2_entries > EHEA_MAX_ENTRIES_RQ2)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2679: FILE: drivers/net/ehea/ehea_main.c:2638:
+	if ((rq2_entries < EHEA_MIN_ENTRIES_QP)
+	    || (rq2_entries > EHEA_MAX_ENTRIES_RQ2)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rq3_entries < EHEA_MIN_ENTRIES_QP'
#2683: FILE: drivers/net/ehea/ehea_main.c:2642:
+	if ((rq3_entries < EHEA_MIN_ENTRIES_QP)
+	    || (rq3_entries > EHEA_MAX_ENTRIES_RQ3)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rq3_entries > EHEA_MAX_ENTRIES_RQ3'
#2683: FILE: drivers/net/ehea/ehea_main.c:2642:
+	if ((rq3_entries < EHEA_MIN_ENTRIES_QP)
+	    || (rq3_entries > EHEA_MAX_ENTRIES_RQ3)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2684: FILE: drivers/net/ehea/ehea_main.c:2643:
+	if ((rq3_entries < EHEA_MIN_ENTRIES_QP)
+	    || (rq3_entries > EHEA_MAX_ENTRIES_RQ3)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sq_entries < EHEA_MIN_ENTRIES_QP'
#2688: FILE: drivers/net/ehea/ehea_main.c:2647:
+	if ((sq_entries < EHEA_MIN_ENTRIES_QP)
+	    || (sq_entries > EHEA_MAX_ENTRIES_SQ)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sq_entries > EHEA_MAX_ENTRIES_SQ'
#2688: FILE: drivers/net/ehea/ehea_main.c:2647:
+	if ((sq_entries < EHEA_MIN_ENTRIES_QP)
+	    || (sq_entries > EHEA_MAX_ENTRIES_SQ)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2689: FILE: drivers/net/ehea/ehea_main.c:2648:
+	if ((sq_entries < EHEA_MIN_ENTRIES_QP)
+	    || (sq_entries > EHEA_MAX_ENTRIES_SQ)) {

WARNING:CONST_STRUCT: struct of_device_id should normally be const
#2697: FILE: drivers/net/ehea/ehea_main.c:2656:
+static struct of_device_id ehea_device_table[] = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:UNDOCUMENTED_DT_STRING: DT compatible string "IBM,lhea" appears un-documented -- check /home/kkleine/dev/linux/Documentation/devicetree/bindings/
#2700: FILE: drivers/net/ehea/ehea_main.c:2659:
+	 .compatible = "IBM,lhea",

WARNING:UNDOCUMENTED_DT_STRING: DT compatible string vendor "IBM" appears un-documented -- check /home/kkleine/dev/linux/Documentation/devicetree/bindings/vendor-prefixes.yaml
#2700: FILE: drivers/net/ehea/ehea_main.c:2659:
+	 .compatible = "IBM,lhea",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2716: FILE: drivers/net/ehea/ehea_main.c:2675:
+	printk("IBM eHEA ethernet device driver (Release %s)\n", DRV_VERSION);

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.41335.commit.25dc855ca22f2ba2b6ef2097b399abecabdc3bbc total: 42 errors, 71 warnings, 49 checks, 2694 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.41335.commit.25dc855ca22f2ba2b6ef2097b399abecabdc3bbc has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
