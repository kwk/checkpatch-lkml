WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#61: 
Signed-Off-By: Pavel Emelianov <xemul@sw.ru>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#62: 
Signed-Off-By: Kirill Korotaev <dev@sw.ru>

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#115: FILE: include/bc/vmrss.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:BIT_MACRO: Prefer using the BIT macro
#133: FILE: include/bc/vmrss.h:19:
+#define PB_PAGE_WEIGHT (1 << PB_PAGE_WEIGHT_SHIFT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#141: FILE: include/bc/vmrss.h:27:
+struct page_beancounter * __must_check bc_alloc_rss_counter_list(long num,
+		struct page_beancounter *list);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#146: FILE: include/bc/vmrss.h:32:
+void bc_vmrss_page_add(struct page *pg, struct mm_struct *mm,
+		struct vm_area_struct *vma, struct page_beancounter **ppb);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#148: FILE: include/bc/vmrss.h:34:
+void bc_vmrss_page_del(struct page *pg, struct mm_struct *mm,
+		struct vm_area_struct *vma);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#150: FILE: include/bc/vmrss.h:36:
+void bc_vmrss_page_dup(struct page *pg, struct mm_struct *mm,
+		struct vm_area_struct *vma, struct page_beancounter **ppb);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#152: FILE: include/bc/vmrss.h:38:
+void bc_vmrss_page_add_noref(struct page *pg, struct mm_struct *mm,
+		struct vm_area_struct *vma);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#155: FILE: include/bc/vmrss.h:41:
+unsigned long mm_rss_pages(struct mm_struct *mm, unsigned long start,
+		unsigned long end);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#166: FILE: include/bc/vmrss.h:52:
+static inline struct page_beancounter * __must_check bc_alloc_rss_counter_list(

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:TYPO_SPELLING: 'alghorithm' may be misspelled - perhaps 'algorithm'?
#245: FILE: kernel/bc/Kconfig:31:
+	  Implemented alghorithm accounts shared pages of memory as well,
 	              ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#271: FILE: kernel/bc/beancounter.c:117:
+		printk("BC: %d has %lu of unused pages held on put", bc->bc_id,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#272: FILE: kernel/bc/beancounter.c:118:
+		printk("BC: %d has %lu of unused pages held on put", bc->bc_id,
+			bc->unused_privvmpages);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#275: FILE: kernel/bc/beancounter.c:121:
+		printk("BC: %d hash %llu of rss pages held on put", bc->bc_id,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#276: FILE: kernel/bc/beancounter.c:122:
+		printk("BC: %d hash %llu of rss pages held on put", bc->bc_id,
+			bc->rss_pages);

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#305: FILE: kernel/bc/vmrss.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#306: FILE: kernel/bc/vmrss.c:2:
+ *  kernel/bc/vmrss.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:INCLUDE_LINUX: Use #include <linux/pgtable.h> instead of <asm/pgtable.h>
#324: FILE: kernel/bc/vmrss.c:20:
+#include <asm/pgtable.h>

WARNING:TYPO_SPELLING: 'splitted' may be misspelled - perhaps 'split'?
#330: FILE: kernel/bc/vmrss.c:26:
+ * shared between bcs then it's size is splitted between all of
                                         ^^^^^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#347: FILE: kernel/bc/vmrss.c:43:
+	unsigned refcount;

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#354: FILE: kernel/bc/vmrss.c:50:
+#define pb_shift_inc(p)	do { ((p)->refcount += (1 << PB_REFC_BITS)); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#355: FILE: kernel/bc/vmrss.c:51:
+#define pb_shift_dec(p)	do { ((p)->refcount -= (1 << PB_REFC_BITS)); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#358: FILE: kernel/bc/vmrss.c:54:
+#define pb_get(p)	do { ((p)->refcount++); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#359: FILE: kernel/bc/vmrss.c:55:
+#define pb_put(p)	do { ((p)->refcount--); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#361: FILE: kernel/bc/vmrss.c:57:
+#define pb_refcount_init(p, shift) do {					\
+		(p)->refcount = ((shift) << PB_REFC_BITS) + (1);	\
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'p' may be better as '(p)' to avoid precedence issues
#378: FILE: kernel/bc/vmrss.c:74:
+#define next_page_pb(p) list_entry(p->page_list.next,	\
+		struct page_beancounter, page_list);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#378: FILE: kernel/bc/vmrss.c:74:
+#define next_page_pb(p) list_entry(p->page_list.next,	\
+		struct page_beancounter, page_list);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'p' may be better as '(p)' to avoid precedence issues
#380: FILE: kernel/bc/vmrss.c:76:
+#define prev_page_pb(p) list_entry(p->page_list.prev,	\
+		struct page_beancounter, page_list);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#380: FILE: kernel/bc/vmrss.c:76:
+#define prev_page_pb(p) list_entry(p->page_list.prev,	\
+		struct page_beancounter, page_list);

WARNING:TYPO_SPELLING: 'requred' may be misspelled - perhaps 'required'?
#385: FILE: kernel/bc/vmrss.c:81:
+ * initialises requred fields.
                ^^^^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pb"
#398: FILE: kernel/bc/vmrss.c:94:
+	if (pb == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#415: FILE: kernel/bc/vmrss.c:111:
+struct page_beancounter *bc_alloc_rss_counter_list(long num,
+		struct page_beancounter *list)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#419: FILE: kernel/bc/vmrss.c:115:
+	for (pb = list; pb != NULL && num != 0; pb = pb->next_hash, num--);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pb"
#419: FILE: kernel/bc/vmrss.c:115:
+	for (pb = list; pb != NULL && num != 0; pb = pb->next_hash, num--);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pb"
#424: FILE: kernel/bc/vmrss.c:120:
+		if (pb == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#458: FILE: kernel/bc/vmrss.c:154:
+static void mod_rss_pages(struct beancounter *bc, int val,
+		struct vm_area_struct *vma, int unused)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#465: FILE: kernel/bc/vmrss.c:161:
+			printk("BC: overuncharging %d unused pages: "

WARNING:SPLIT_STRING: quoted string split across lines
#466: FILE: kernel/bc/vmrss.c:162:
+			printk("BC: overuncharging %d unused pages: "
+					"val %i, held %lu\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#492: FILE: kernel/bc/vmrss.c:188:
+	for (p = pb_hash_table[hash];
[...]
+			p = p->next_hash);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p"
#493: FILE: kernel/bc/vmrss.c:189:
+			p != NULL && (p->page != pg || p->bc != bc);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p"
#495: FILE: kernel/bc/vmrss.c:191:
+	if (p == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#503: FILE: kernel/bc/vmrss.c:199:
+static int __pb_add_ref(struct page *pg, struct beancounter *bc,
+		int hash, struct page_beancounter **ppb)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "head"
#517: FILE: kernel/bc/vmrss.c:213:
+	if (head != NULL) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#518: FILE: kernel/bc/vmrss.c:214:
+		BUG_ON(head->magic != PB_MAGIC);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:TRAILING_WHITESPACE: trailing whitespace
#519: FILE: kernel/bc/vmrss.c:215:
+^I^I/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#558: FILE: kernel/bc/vmrss.c:254:
+	BUG_ON(page_pb(page) != NULL && page_pb(page)->magic != PB_MAGIC);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "page_pb"
#558: FILE: kernel/bc/vmrss.c:254:
+	BUG_ON(page_pb(page) != NULL && page_pb(page)->magic != PB_MAGIC);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#559: FILE: kernel/bc/vmrss.c:255:
+	for (q = pb_hash_table + hash, p = *q;
[...]
+			q = &p->next_hash, p = *q);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p"
#560: FILE: kernel/bc/vmrss.c:256:
+			p != NULL && (p->page != page || p->bc != bc);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p"
#562: FILE: kernel/bc/vmrss.c:258:
+	if (p == NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#601: FILE: kernel/bc/vmrss.c:297:
+^I * removed one's, repeat the procedure for one more tail beancounter $

WARNING:TYPO_SPELLING: 'substracted' may be misspelled - perhaps 'subtracted'?
#615: FILE: kernel/bc/vmrss.c:311:
+ *   of any mm. In this case page is substracted from unused_privvmpages
                                      ^^^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#635: FILE: kernel/bc/vmrss.c:331:
+void bc_vmrss_page_add(struct page *pg, struct mm_struct *mm,
+		struct vm_area_struct *vma, struct page_beancounter **ppb)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#656: FILE: kernel/bc/vmrss.c:352:
+void bc_vmrss_page_del(struct page *pg, struct mm_struct *mm,
+		struct vm_area_struct *vma)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#674: FILE: kernel/bc/vmrss.c:370:
+void bc_vmrss_page_dup(struct page *pg, struct mm_struct *mm,
+		struct vm_area_struct *vma, struct page_beancounter **ppb)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page_pb"
#687: FILE: kernel/bc/vmrss.c:383:
+	if (page_pb(pg) == NULL)

CHECK:BRACES: braces {} should be used on all arms of this statement
#694: FILE: kernel/bc/vmrss.c:390:
+	if (*ppb == PB_COPY_SAME) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#697: FILE: kernel/bc/vmrss.c:393:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#706: FILE: kernel/bc/vmrss.c:402:
+void bc_vmrss_page_add_noref(struct page *pg, struct mm_struct *mm,
+		struct vm_area_struct *vma)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#721: FILE: kernel/bc/vmrss.c:417:
+static unsigned long pages_in_pte_range(struct mm_struct *mm, pmd_t *pmd,
+				unsigned long addr, unsigned long end,

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#725: FILE: kernel/bc/vmrss.c:421:
+	spinlock_t *ptl;

WARNING:LINE_SPACING: Missing a blank line after declarations
#730: FILE: kernel/bc/vmrss.c:426:
+		pte_t ptent = *pte;
+		if (!pte_none(ptent) && pte_present(ptent))

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#738: FILE: kernel/bc/vmrss.c:434:
+static inline unsigned long pages_in_pmd_range(struct mm_struct *mm, pud_t *pud,
+				unsigned long addr, unsigned long end,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#756: FILE: kernel/bc/vmrss.c:452:
+static inline unsigned long pages_in_pud_range(struct mm_struct *mm, pgd_t *pgd,
+				unsigned long addr, unsigned long end,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#774: FILE: kernel/bc/vmrss.c:470:
+unsigned long mm_rss_pages(struct mm_struct *mm,
+		unsigned long addr, unsigned long end)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#780: FILE: kernel/bc/vmrss.c:476:
+	BUG_ON(addr >= end);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#799: FILE: kernel/bc/vmrss.c:495:
+	pb_cachep = kmem_cache_create("page_beancounter",
+			sizeof(struct page_beancounter), 0,

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#803: FILE: kernel/bc/vmrss.c:499:
+	for (pb_hash_mask = 1;
[...]
+			pb_hash_mask = (pb_hash_mask << 1) + 1);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#808: FILE: kernel/bc/vmrss.c:504:
+	printk(KERN_INFO "BC: Page beancounter hash is %lu entries.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#809: FILE: kernel/bc/vmrss.c:505:
+	printk(KERN_INFO "BC: Page beancounter hash is %lu entries.\n",
+			hash_size);

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "mapping"
#822: FILE: mm/shmem.c:2242:
+	return (mapping != NULL && mapping->a_ops == &shmem_aops);

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.40972.commit.8ea445e9db1a80ca9979f6fef59ecfadbef43ae6 total: 6 errors, 39 warnings, 39 checks, 709 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.40972.commit.8ea445e9db1a80ca9979f6fef59ecfadbef43ae6 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
