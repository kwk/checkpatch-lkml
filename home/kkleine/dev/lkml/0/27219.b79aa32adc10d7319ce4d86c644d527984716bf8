WARNING:TYPO_SPELLING: 'developped' may be misspelled - perhaps 'developed'?
#29: 
avoid confusion with other namespaces being developped for the
                                            ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#219: FILE: fs/namespace.c:1443:
+struct mnt_namespace *dup_mnt_ns(struct task_struct *tsk,
+		struct fs_struct *fs)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*new_ns)...) over kmalloc(sizeof(struct mnt_namespace)...)
#229: FILE: fs/namespace.c:1450:
+	new_ns = kmalloc(sizeof(struct mnt_namespace), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#239: FILE: fs/namespace.c:1462:
+	new_ns->root = copy_tree(mnt_ns->root, mnt_ns->root->mnt_root,
 					CL_COPY_ALL | CL_EXPIRE);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'mnt' may be better as '(mnt)' to avoid precedence issues
#401: FILE: fs/pnode.h:16:
+#define IS_MNT_NEW(mnt)  (!mnt->mnt_ns)

WARNING:LINE_SPACING: Missing a blank line after declarations
#467: FILE: fs/proc/base.c:402:
+	struct mnt_namespace *ns = m->private;
+	put_mnt_ns(ns);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#537: FILE: include/linux/mnt_namespace.h:1:
+#ifndef _NAMESPACE_H_

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#547: FILE: include/linux/mnt_namespace.h:11:
+	struct vfsmount *	root;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#553: FILE: include/linux/mnt_namespace.h:17:
+extern int copy_mnt_ns(int, struct task_struct *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#553: FILE: include/linux/mnt_namespace.h:17:
+extern int copy_mnt_ns(int, struct task_struct *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#553: FILE: include/linux/mnt_namespace.h:17:
+extern int copy_mnt_ns(int, struct task_struct *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#554: FILE: include/linux/mnt_namespace.h:18:
+extern void __put_mnt_ns(struct mnt_namespace *ns);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#555: FILE: include/linux/mnt_namespace.h:19:
+extern struct mnt_namespace *dup_mnt_ns(struct task_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#555: FILE: include/linux/mnt_namespace.h:19:
+extern struct mnt_namespace *dup_mnt_ns(struct task_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fs_struct *' should also have an identifier name
#555: FILE: include/linux/mnt_namespace.h:19:
+extern struct mnt_namespace *dup_mnt_ns(struct task_struct *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#556: FILE: include/linux/mnt_namespace.h:20:
+extern struct mnt_namespace *dup_mnt_ns(struct task_struct *,
+		struct fs_struct *);

WARNING:LINE_SPACING: Missing a blank line after declarations
#568: FILE: include/linux/mnt_namespace.h:32:
+	struct mnt_namespace *ns = p->nsproxy->mnt_ns;
+	if (ns)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#705: FILE: kernel/fork.c:1513:
+static int unshare_mnt_namespace(unsigned long unshare_flags,
+		struct mnt_namespace **new_nsp, struct fs_struct *new_fs)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#733: FILE: kernel/fork.c:1633:
+	if ((err = unshare_mnt_namespace(unshare_flags, &new_ns, new_fs)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.27219.commit.b79aa32adc10d7319ce4d86c644d527984716bf8 total: 2 errors, 8 warnings, 9 checks, 644 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.27219.commit.b79aa32adc10d7319ce4d86c644d527984716bf8 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
