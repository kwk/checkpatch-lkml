WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#55: 
1 and 2). To counteract it, a tunable parameter readahead_ratio is introduced

WARNING:BAD_SIGN_OFF: Duplicate signature
#68: 
Signed-off-by: Wu Fengguang <wfg@mail.ustc.edu.cn>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#92: FILE: mm/readahead.c:976:
+static int adjust_rala(unsigned long ra_max,
+			unsigned long *ra_size, unsigned long *la_size)

WARNING:TYPO_SPELLING: 'Substract' may be misspelled - perhaps 'Subtract'?
#95: FILE: mm/readahead.c:979:
+	 * Substract the old look-ahead to get real safe size for the next
 	   ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:BRACES: braces {} should be used on all arms of this statement
#98: FILE: mm/readahead.c:982:
+	if (*ra_size > *la_size)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#100: FILE: mm/readahead.c:984:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#114: FILE: mm/readahead.c:998:
+static void limit_rala(unsigned long ra_max, unsigned long la_old,
+			unsigned long *ra_size, unsigned long *la_size)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#147: FILE: mm/readahead.c:1031:
+ * ^IWhile the stream reads stream_shift pages inside the chunks,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#148: FILE: mm/readahead.c:1032:
+ * ^Ithe chunks are shifted global_shift pages inside inactive_list.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#150: FILE: mm/readahead.c:1034:
+ * ^Ithrashing_threshold = free_mem * stream_shift / global_shift;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#163: FILE: mm/readahead.c:1047:
+static unsigned long compute_thrashing_threshold(struct file_ra_state *ra,
+							unsigned long *remain)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#169: FILE: mm/readahead.c:1053:
+	uint64_t ll;

CHECK:SPACING: No space is necessary after a cast
#177: FILE: mm/readahead.c:1061:
+	ll = (uint64_t) stream_shift * (global_size >> 9) * readahead_ratio * 5;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#182: FILE: mm/readahead.c:1066:
+	if (global_size > global_shift) {
[...]
+	} else
[...]

CHECK:SPACING: No space is necessary after a cast
#183: FILE: mm/readahead.c:1067:
+		ll = (uint64_t) stream_shift * (global_size - global_shift);

CHECK:BRACES: Unbalanced braces around else statement
#186: FILE: mm/readahead.c:1070:
+	} else

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'compute_thrashing_threshold', this function's name, in a string
#189: FILE: mm/readahead.c:1073:
+	ddprintk("compute_thrashing_threshold: "

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#190: FILE: mm/readahead.c:1074:
+	ddprintk("compute_thrashing_threshold: "
+			"at %lu ra %lu=%lu*%lu/%lu, remain %lu for %lu\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#202: FILE: mm/readahead.c:1086:
+state_based_readahead(struct address_space *mapping, struct file *filp,
                                                                   ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#203: FILE: mm/readahead.c:1087:
+state_based_readahead(struct address_space *mapping, struct file *filp,
+			struct file_ra_state *ra,

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#212: FILE: mm/readahead.c:1096:
+	la_old = la_size = ra->readahead_index - offset;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#224: FILE: mm/readahead.c:1108:
+	if (growth_limit > ra_max)
+	    growth_limit = ra_max;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#236: FILE: mm/readahead.c:1120:
+	return ra_submit(ra, mapping, filp);
 	                              ^^^^

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.18309.commit.3b809ccde37768758a6e304e669ad97f2ec70aaf total: 0 errors, 11 warnings, 12 checks, 169 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.18309.commit.3b809ccde37768758a6e304e669ad97f2ec70aaf has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
