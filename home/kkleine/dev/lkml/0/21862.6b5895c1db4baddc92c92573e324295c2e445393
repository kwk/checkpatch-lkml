CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#81: FILE: arch/x86_64/kernel/pci-calgary.c:141:
+static struct rio_detail	*rio_devs[MAX_NUMNODES*4] __initdata;
                         	                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#95: FILE: arch/x86_64/kernel/pci-calgary.c:500:
+static inline void __iomem * busno_to_bbar(unsigned char num)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#165: FILE: arch/x86_64/kernel/pci-calgary.c:910:
+	for (rio = 0; rio < rio_table_hdr->num_rio_dev; rio++) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space prohibited after that open parenthesis '('
#166: FILE: arch/x86_64/kernel/pci-calgary.c:911:
+		if ( (rio_devs[rio]->type != COMPAT_CALGARY) &&

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rio_devs[rio]->type != COMPAT_CALGARY'
#166: FILE: arch/x86_64/kernel/pci-calgary.c:911:
+		if ( (rio_devs[rio]->type != COMPAT_CALGARY) &&
+		     (rio_devs[rio]->type != ALT_CALGARY) )

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rio_devs[rio]->type != ALT_CALGARY'
#166: FILE: arch/x86_64/kernel/pci-calgary.c:911:
+		if ( (rio_devs[rio]->type != COMPAT_CALGARY) &&
+		     (rio_devs[rio]->type != ALT_CALGARY) )

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#167: FILE: arch/x86_64/kernel/pci-calgary.c:912:
+		if ( (rio_devs[rio]->type != COMPAT_CALGARY) &&
+		     (rio_devs[rio]->type != ALT_CALGARY) )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#167: FILE: arch/x86_64/kernel/pci-calgary.c:912:
+		     (rio_devs[rio]->type != ALT_CALGARY) )

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#174: FILE: arch/x86_64/kernel/pci-calgary.c:919:
+		for (phb = 0; phb < PHBS_PER_CALGARY; phb++) {
+

ERROR:SPACING: space required before the open brace '{'
#199: FILE: arch/x86_64/kernel/pci-calgary.c:1001:
+	if (rio_table_hdr->num_scal_dev > MAX_NUMNODES){

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#200: FILE: arch/x86_64/kernel/pci-calgary.c:1002:
+		printk(KERN_WARNING

WARNING:SPLIT_STRING: quoted string split across lines
#202: FILE: arch/x86_64/kernel/pci-calgary.c:1004:
+			"Calgary: MAX_NUMNODES too low!  Defined as %d, "
+			"but system has %d nodes.\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:SPACING: space required before the open brace '{'
#207: FILE: arch/x86_64/kernel/pci-calgary.c:1009:
+	switch (rio_table_hdr->version){

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#209: FILE: arch/x86_64/kernel/pci-calgary.c:1011:
+		printk(KERN_WARNING

ERROR:SPACING: space required before the open brace '{'
#257: FILE: arch/x86_64/kernel/pci-calgary.c:1062:
+		if (*((unsigned short *)(ptr + offset + 2)) == 0x4752){

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#259: FILE: arch/x86_64/kernel/pci-calgary.c:1064:
+			rio_table_hdr = (struct rio_table_hdr *)(ptr+offset+4);
 			                                            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#259: FILE: arch/x86_64/kernel/pci-calgary.c:1064:
+			rio_table_hdr = (struct rio_table_hdr *)(ptr+offset+4);
 			                                                   ^

ERROR:SPACING: space required before the open brace '{'
#265: FILE: arch/x86_64/kernel/pci-calgary.c:1070:
+	if (!rio_table_hdr){

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#266: FILE: arch/x86_64/kernel/pci-calgary.c:1071:
+		printk(KERN_ERR "Calgary: Unable to locate "

WARNING:SPLIT_STRING: quoted string split across lines
#267: FILE: arch/x86_64/kernel/pci-calgary.c:1072:
+		printk(KERN_ERR "Calgary: Unable to locate "
+				"Rio Grande Table in EBDA - bailing!\n");

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#299: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#304: FILE: include/asm-x86_64/rio.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#321: FILE: include/asm-x86_64/rio.h:18:
+} __attribute__((packed));

ERROR:CODE_INDENT: code indent should use tabs where possible
#328: FILE: include/asm-x86_64/rio.h:25:
+^I                 /* 0xFF=None                              */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#331: FILE: include/asm-x86_64/rio.h:28:
+^I                 /* 0xFF=None                              */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#334: FILE: include/asm-x86_64/rio.h:31:
+^I                 /* 0xFF=None                              */$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#336: FILE: include/asm-x86_64/rio.h:33:
+} __attribute__((packed));

ERROR:CODE_INDENT: code indent should use tabs where possible
#343: FILE: include/asm-x86_64/rio.h:40:
+^I                 /* node                                   */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#346: FILE: include/asm-x86_64/rio.h:43:
+^I                 /* 0xFF=None                              */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#349: FILE: include/asm-x86_64/rio.h:46:
+^I                 /* 0xFF=None                              */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#352: FILE: include/asm-x86_64/rio.h:49:
+^I                 /*       = 0 : the XAPIC is not used, ie: */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#353: FILE: include/asm-x86_64/rio.h:50:
+^I                 /*            ints fwded to another XAPIC */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#354: FILE: include/asm-x86_64/rio.h:51:
+^I                 /*           Bits1:7 Reserved             */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#356: FILE: include/asm-x86_64/rio.h:53:
+^I                 /*     lower slot numbers/PCI bus numbers */$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#358: FILE: include/asm-x86_64/rio.h:55:
+} __attribute__((packed));

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#374: FILE: include/asm-x86_64/rio.h:71:
+	unsigned long address= *(unsigned short *)phys_to_virt(0x40Eul);
 	                     ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#375: FILE: include/asm-x86_64/rio.h:72:
+	unsigned long address= *(unsigned short *)phys_to_virt(0x40Eul);
+	address <<= 4;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.21862.commit.6b5895c1db4baddc92c92573e324295c2e445393 total: 18 errors, 11 warnings, 8 checks, 317 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.21862.commit.6b5895c1db4baddc92c92573e324295c2e445393 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
