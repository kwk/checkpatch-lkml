WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#40: 
> > >> I managed to get all this done in head.S before going into C code; is 

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/smp.h> instead of <asm/smp.h>
#96: FILE: arch/i386/kernel/cpu/common.c:16:
+#include <asm/smp.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#160: FILE: arch/i386/kernel/smpboot.c:925:
+	unsigned limit, flags;

CHECK:CAMELCASE: Avoid CamelCase: <Xgt_desc_struct>
#174: FILE: arch/i386/kernel/smpboot.c:939:
+	struct Xgt_desc_struct *cpu_gdt_descr = &per_cpu(cpu_gdt_descr, cpu);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#182: FILE: arch/i386/kernel/smpboot.c:947:
 static int __devinit do_boot_cpu(int apicid, int cpu)

ERROR:CODE_INDENT: code indent should use tabs where possible
#190: FILE: arch/i386/kernel/smpboot.c:972:
+ ^Isetup_percpu(cpu);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#190: FILE: arch/i386/kernel/smpboot.c:972:
+ ^Isetup_percpu(cpu);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#190: FILE: arch/i386/kernel/smpboot.c:972:
+ ^Isetup_percpu(cpu);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#191: FILE: arch/i386/kernel/smpboot.c:973:
+ ^Ibooting_cpu_gdt_desc_ptr = &per_cpu(cpu_gdt_descr, cpu);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#191: FILE: arch/i386/kernel/smpboot.c:973:
+ ^Ibooting_cpu_gdt_desc_ptr = &per_cpu(cpu_gdt_descr, cpu);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#191: FILE: arch/i386/kernel/smpboot.c:973:
+ ^Ibooting_cpu_gdt_desc_ptr = &per_cpu(cpu_gdt_descr, cpu);$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#203: FILE: arch/i386/kernel/smpboot.c:1341:
+	/* Set %gs for this CPU's per-cpu area.  Memory clobber is to create a
+	   barrier with respect to any per-cpu operations, so the compiler

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#204: FILE: arch/i386/kernel/smpboot.c:1342:
+	   doesn't move any before here. */

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#213: FILE: arch/i386/kernel/smpboot.c:1356:
 void __devinit smp_prepare_boot_cpu(void)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#246: FILE: include/asm-i386/percpu.h:12:
+#define DECLARE_PER_CPU(type, name) extern __typeof__(type) per_cpu__##name

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#247: FILE: include/asm-i386/percpu.h:13:
+#define DEFINE_PER_CPU(type, name) \
+    __attribute__((__section__(".data.percpu"))) __typeof__(type) per_cpu__##name

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#248: FILE: include/asm-i386/percpu.h:14:
+    __attribute__((__section__(".data.percpu"))) __typeof__(type) per_cpu__##name$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".data.percpu") over __attribute__((__section__(".data.percpu")))
#248: FILE: include/asm-i386/percpu.h:14:
+    __attribute__((__section__(".data.percpu"))) __typeof__(type) per_cpu__##name

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#255: FILE: include/asm-i386/percpu.h:21:
+	extern int simple_indentifier_##var(void);	\

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#259: FILE: include/asm-i386/percpu.h:25:
+	extern int simple_indentifier_##var(void);			\

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#270: FILE: include/asm-i386/percpu.h:36:
+		memcpy((pcpudst)+__per_cpu_offset[__i],		\
 		                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#274: FILE: include/asm-i386/percpu.h:40:
+#define EXPORT_PER_CPU_SYMBOL(var) EXPORT_SYMBOL(per_cpu__##var)

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#275: FILE: include/asm-i386/percpu.h:41:
+#define EXPORT_PER_CPU_SYMBOL_GPL(var) EXPORT_SYMBOL_GPL(per_cpu__##var)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#285: FILE: include/asm-i386/percpu.h:51:
+ * don't give an lvalue though). */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#286: FILE: include/asm-i386/percpu.h:52:
+extern void __bad_percpu_size(void);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#288: FILE: include/asm-i386/percpu.h:54:
+#define percpu_to_op(op,var,val)				\
                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#288: FILE: include/asm-i386/percpu.h:54:
+#define percpu_to_op(op,var,val)				\
                            ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'op' - possible side-effects?
#288: FILE: include/asm-i386/percpu.h:54:
+#define percpu_to_op(op,var,val)				\
+	do {							\
+		typedef typeof(var) T__;			\
+		if (0) { T__ tmp__; tmp__ = (val); }		\
+		switch (sizeof(var)) {				\
+		case 1:						\
+			asm(op "b %1,"__percpu_seg"%0"		\
+			    : "+m" (var)			\
+			    :"ri" ((T__)val));			\
+			break;					\
+		case 2:						\
+			asm(op "w %1,"__percpu_seg"%0"		\
+			    : "+m" (var)			\
+			    :"ri" ((T__)val));			\
+			break;					\
+		case 4:						\
+			asm(op "l %1,"__percpu_seg"%0"		\
+			    : "+m" (var)			\
+			    :"ri" ((T__)val));			\
+			break;					\
+		default: __bad_percpu_size();			\
+		}						\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'var' - possible side-effects?
#288: FILE: include/asm-i386/percpu.h:54:
+#define percpu_to_op(op,var,val)				\
+	do {							\
+		typedef typeof(var) T__;			\
+		if (0) { T__ tmp__; tmp__ = (val); }		\
+		switch (sizeof(var)) {				\
+		case 1:						\
+			asm(op "b %1,"__percpu_seg"%0"		\
+			    : "+m" (var)			\
+			    :"ri" ((T__)val));			\
+			break;					\
+		case 2:						\
+			asm(op "w %1,"__percpu_seg"%0"		\
+			    : "+m" (var)			\
+			    :"ri" ((T__)val));			\
+			break;					\
+		case 4:						\
+			asm(op "l %1,"__percpu_seg"%0"		\
+			    : "+m" (var)			\
+			    :"ri" ((T__)val));			\
+			break;					\
+		default: __bad_percpu_size();			\
+		}						\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'val' - possible side-effects?
#288: FILE: include/asm-i386/percpu.h:54:
+#define percpu_to_op(op,var,val)				\
+	do {							\
+		typedef typeof(var) T__;			\
+		if (0) { T__ tmp__; tmp__ = (val); }		\
+		switch (sizeof(var)) {				\
+		case 1:						\
+			asm(op "b %1,"__percpu_seg"%0"		\
+			    : "+m" (var)			\
+			    :"ri" ((T__)val));			\
+			break;					\
+		case 2:						\
+			asm(op "w %1,"__percpu_seg"%0"		\
+			    : "+m" (var)			\
+			    :"ri" ((T__)val));			\
+			break;					\
+		case 4:						\
+			asm(op "l %1,"__percpu_seg"%0"		\
+			    : "+m" (var)			\
+			    :"ri" ((T__)val));			\
+			break;					\
+		default: __bad_percpu_size();			\
+		}						\
+	} while (0)

WARNING:NEW_TYPEDEFS: do not add new typedefs
#290: FILE: include/asm-i386/percpu.h:56:
+		typedef typeof(var) T__;			\

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#291: FILE: include/asm-i386/percpu.h:57:
+		if (0) { T__ tmp__; tmp__ = (val); }		\

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#294: FILE: include/asm-i386/percpu.h:60:
+			asm(op "b %1,"__percpu_seg"%0"		\

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#296: FILE: include/asm-i386/percpu.h:62:
+			    :"ri" ((T__)val));			\
 			    ^

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#299: FILE: include/asm-i386/percpu.h:65:
+			asm(op "w %1,"__percpu_seg"%0"		\

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#301: FILE: include/asm-i386/percpu.h:67:
+			    :"ri" ((T__)val));			\
 			    ^

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#304: FILE: include/asm-i386/percpu.h:70:
+			asm(op "l %1,"__percpu_seg"%0"		\

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#306: FILE: include/asm-i386/percpu.h:72:
+			    :"ri" ((T__)val));			\
 			    ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#308: FILE: include/asm-i386/percpu.h:74:
+		default: __bad_percpu_size();			\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#312: FILE: include/asm-i386/percpu.h:78:
+#define percpu_from_op(op,var)					\
                          ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'op' - possible side-effects?
#312: FILE: include/asm-i386/percpu.h:78:
+#define percpu_from_op(op,var)					\
+	({							\
+		typeof(var) ret__;				\
+		switch (sizeof(var)) {				\
+		case 1:						\
+			asm(op "b "__percpu_seg"%1,%0"		\
+			    : "=r" (ret__)			\
+			    : "m" (var));			\
+			break;					\
+		case 2:						\
+			asm(op "w "__percpu_seg"%1,%0"		\
+			    : "=r" (ret__)			\
+			    : "m" (var));			\
+			break;					\
+		case 4:						\
+			asm(op "l "__percpu_seg"%1,%0"		\
+			    : "=r" (ret__)			\
+			    : "m" (var));			\
+			break;					\
+		default: __bad_percpu_size();			\
+		}						\
+		ret__; })

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'var' - possible side-effects?
#312: FILE: include/asm-i386/percpu.h:78:
+#define percpu_from_op(op,var)					\
+	({							\
+		typeof(var) ret__;				\
+		switch (sizeof(var)) {				\
+		case 1:						\
+			asm(op "b "__percpu_seg"%1,%0"		\
+			    : "=r" (ret__)			\
+			    : "m" (var));			\
+			break;					\
+		case 2:						\
+			asm(op "w "__percpu_seg"%1,%0"		\
+			    : "=r" (ret__)			\
+			    : "m" (var));			\
+			break;					\
+		case 4:						\
+			asm(op "l "__percpu_seg"%1,%0"		\
+			    : "=r" (ret__)			\
+			    : "m" (var));			\
+			break;					\
+		default: __bad_percpu_size();			\
+		}						\
+		ret__; })

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#317: FILE: include/asm-i386/percpu.h:83:
+			asm(op "b "__percpu_seg"%1,%0"		\

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#322: FILE: include/asm-i386/percpu.h:88:
+			asm(op "w "__percpu_seg"%1,%0"		\

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#327: FILE: include/asm-i386/percpu.h:93:
+			asm(op "l "__percpu_seg"%1,%0"		\

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#331: FILE: include/asm-i386/percpu.h:97:
+		default: __bad_percpu_size();			\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#336: FILE: include/asm-i386/percpu.h:102:
+#define x86_write_percpu(var,val) percpu_to_op("mov", per_cpu__##var, val)
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#337: FILE: include/asm-i386/percpu.h:103:
+#define x86_add_percpu(var,val) percpu_to_op("add", per_cpu__##var, val)
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#338: FILE: include/asm-i386/percpu.h:104:
+#define x86_sub_percpu(var,val) percpu_to_op("sub", per_cpu__##var, val)
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#339: FILE: include/asm-i386/percpu.h:105:
+#define x86_or_percpu(var,val) percpu_to_op("or", per_cpu__##var, val)
                          ^

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.35236.commit.0eec8e0c454ac5c1f993780356369fae89c0caf3 total: 17 errors, 16 warnings, 17 checks, 287 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.35236.commit.0eec8e0c454ac5c1f993780356369fae89c0caf3 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
