WARNING:TYPO_SPELLING: 'knowlege' may be misspelled - perhaps 'knowledge'?
#31: 
This patch removes all cpuset-specific knowlege from the container
                                       ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#80: FILE: include/linux/container.h:54:
+^Istruct dentry *dentry;^I  ^I/* container fs entry */$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#108: FILE: include/linux/container.h:106:
+	void (*attach)(struct container_subsys *ss, struct container *cont,
+			struct container *old_cont, struct task_struct *tsk);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#128: FILE: include/linux/container.h:126:
+static inline struct container_subsys_state *container_subsys_state(

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#135: FILE: include/linux/container.h:133:
+static inline struct container* task_container(struct task_struct *task,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#141: FILE: include/linux/container.h:139:
+static inline struct container_subsys_state *task_subsys_state(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#169: FILE: include/linux/cpuset.h:63:
+extern int current_cpuset_is_being_rebound(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#208: FILE: kernel/container.c:66:
+static int subsys_count = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:TYPO_SPELLING: 'Hierachy' may be misspelled - perhaps 'Hierarchy'?
#224: FILE: kernel/container.c:82:
+/* The set of hierarchies in use. Hierachy 0 is reserved for the
                                   ^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#225: FILE: kernel/container.c:83:
+ * subsystems that are otherwise unattached. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#240: FILE: kernel/container.c:104:
+#define for_each_subsys(_hierarchy, _ss) list_for_each_entry(_ss, &rootnode[_hierarchy].subsys_list, sibling)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#260: FILE: kernel/container.c:214:
+static struct inode_operations container_dir_inode_operations;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#261: FILE: kernel/container.c:215:
+struct file_operations proc_containerstats_operations;

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#286: FILE: kernel/container.c:302:
+static void container_put_super(struct super_block *sb) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#287: FILE: kernel/container.c:303:
+static void container_put_super(struct super_block *sb) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#300: FILE: kernel/container.c:316:
+	BUG_ON(root->number_of_containers != 1);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#301: FILE: kernel/container.c:317:
+	BUG_ON(!list_empty(&cont->children));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#302: FILE: kernel/container.c:318:
+	BUG_ON(!list_empty(&cont->sibling));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#303: FILE: kernel/container.c:319:
+	BUG_ON(!root->subsys_bits);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#311: FILE: kernel/container.c:327:
+		BUG_ON(!p->container[hierarchy]);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#312: FILE: kernel/container.c:328:
+		BUG_ON(p->container[hierarchy] != cont);

WARNING:LINE_SPACING: Missing a blank line after declarations
#323: FILE: kernel/container.c:339:
+			struct container_subsys *ss = subsys[i];
+			BUG_ON(cont->subsys[i] != dummytop->subsys[i]);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#323: FILE: kernel/container.c:339:
+			BUG_ON(cont->subsys[i] != dummytop->subsys[i]);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#324: FILE: kernel/container.c:340:
+			BUG_ON(cont->subsys[i]->container != cont);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#330: FILE: kernel/container.c:346:
+			BUG_ON(cont->subsys[i]);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IXUGO | S_IWUSR' are not preferred. Consider using octal permissions '0755'.
#368: FILE: kernel/container.c:374:
+	inode = container_new_inode(S_IFDIR | S_IRUGO | S_IXUGO | S_IWUSR, sb);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#437: FILE: kernel/container.c:441:
+		if (root->subsys_bits == subsys_bits) break;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#447: FILE: kernel/container.c:451:
+		 * know that all the subsystems are free */

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#450: FILE: kernel/container.c:454:
+			if (!root->sb && !root->subsys_bits) break;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#468: FILE: kernel/container.c:472:
+		BUG_ON(root->subsys_bits);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#475: FILE: kernel/container.c:479:
+		BUG_ON(!list_empty(&cont->sibling));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#476: FILE: kernel/container.c:480:
+		BUG_ON(!list_empty(&cont->children));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#477: FILE: kernel/container.c:481:
+		BUG_ON(root->number_of_containers != 1);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#486: FILE: kernel/container.c:490:
+			BUG_ON(p->container[hierarchy]);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#488: FILE: kernel/container.c:492:
+			if (!(p->flags & PF_EXITING)) {
+				atomic_inc(&cont->count);
+			}

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#497: FILE: kernel/container.c:501:
+			if (!(subsys_bits & (1 << i))) continue;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#501: FILE: kernel/container.c:505:
+			BUG_ON(cont->subsys[i]);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#502: FILE: kernel/container.c:506:
+			BUG_ON(dummytop->subsys[i]->container != dummytop);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#576: FILE: kernel/container.c:759:
+		if (ss->attach) {
+			ss->attach(ss, cont, oldcont, tsk);
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#587: FILE: kernel/container.c:767:
+		if (ss->post_attach) {
+			ss->post_attach(ss, cont, oldcont, tsk);
+		}

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cont == cont->top_container'
#663: FILE: kernel/container.c:1256:
+	if ((cont == cont->top_container) &&
 	    (err = container_add_file(cont, &cft_release_agent)) < 0)

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#663: FILE: kernel/container.c:1256:
+	if ((cont == cont->top_container) &&

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#672: FILE: kernel/container.c:1261:
+		if (ss->populate && (err = ss->populate(ss, cont)) < 0)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#697: FILE: kernel/container.c:1293:
+	 * fs */

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#719: FILE: kernel/container.c:1311:
+		if (err) goto err_destroy;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#799: FILE: kernel/container.c:1420:
+	 * created the container */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#809: FILE: kernel/container.c:1426:
 
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#824: FILE: kernel/container.c:1440:
+		struct container *cont = &root->top_container;
+		INIT_LIST_HEAD(&root->subsys_list);

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#882: FILE: kernel/container.c:1477:
+int container_register_subsys(struct container_subsys *new_subsys) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#887: FILE: kernel/container.c:1482:
+	BUG_ON(new_subsys->hierarchy);

WARNING:LINE_SPACING: Missing a blank line after declarations
#933: FILE: kernel/container.c:1539:
+		struct container *cont = current->container[i];
+		if (!cont) continue;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#933: FILE: kernel/container.c:1539:
+		if (!cont) continue;

WARNING:LINE_SPACING: Missing a blank line after declarations
#959: FILE: kernel/container.c:1609:
+	int i;
+	for (i = 0; i < CONFIG_MAX_CONTAINER_HIERARCHIES; i++) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#961: FILE: kernel/container.c:1611:
+		if (!cont) continue;

WARNING:LINE_SPACING: Missing a blank line after declarations
#966: FILE: kernel/container.c:1616:
+			char *pathbuf = NULL;
+			mutex_lock(&manage_mutex);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1011: FILE: kernel/container.c:1712:
+		int count = 0;
+		if (!root->subsys_bits) continue;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1011: FILE: kernel/container.c:1712:
+		if (!root->subsys_bits) continue;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1033: FILE: kernel/container.c:1748:
+	int i;
+	mutex_lock(&manage_mutex);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1039: FILE: kernel/container.c:1754:
+		int first = 1;
+		seq_printf(m, "%d: topcount=%d bits=%lx containers=%d (",

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1047: FILE: kernel/container.c:1762:
+		if (root->sb) {
+			seq_printf(m, " s_active=%d", atomic_read(&root->sb->s_active));
+		}

WARNING:LINE_SPACING: Missing a blank line after declarations
#1055: FILE: kernel/container.c:1770:
+		struct container_subsys *ss = subsys[i];
+		seq_printf(m, "%d: name=%s hierarchy=%d\n",

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1067: FILE: kernel/container.c:1782:
+struct file_operations proc_containerstats_operations = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1141: FILE: kernel/cpuset.c:116:
+
+

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1228: FILE: kernel/cpuset.c:535:
+	guarantee_online_mems(task_cs(tsk),&tsk->mems_allowed);
 	                                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1228: FILE: kernel/cpuset.c:535:
+	guarantee_online_mems(task_cs(tsk),&tsk->mems_allowed);
 	                                   ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1413: FILE: kernel/cpuset.c:1194:
+	struct cpuset *cs = state;
+	cs->css.container = cont;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1463: FILE: kernel/cpuset.c:1245:
 
+

WARNING:TYPO_SPELLING: 'hierachies' may be misspelled - perhaps 'hierarchies'?
#1582: FILE: Documentation/containers.txt:43:
+active hierachies of tasks.  Each task has a pointer to a container in
        ^^^^^^^^^^

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.17323.commit.272b935fd9b63f79ca90ce578bf183822ae26912 total: 15 errors, 44 warnings, 9 checks, 1720 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.17323.commit.272b935fd9b63f79ca90ce578bf183822ae26912 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
