WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
this is a new 2.6.20 module implementing a user inactivity trigger. Basical=

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#100: FILE: acpi_enumerator.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#117: FILE: acpi_enumerator.c:18:
+ *  with SIN; if not, write to the Free Software Foundation, Inc., 51 Franklin$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

WARNING:BRACES: braces {} are not necessary for single statement blocks
#165: FILE: acpi_enumerator.c:66:
+		if (err >= PAGE_SIZE - size) {
+			err = PAGE_SIZE - size;
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#169: FILE: acpi_enumerator.c:70:
+		if (err > 0) {
+			size += err;
+		}

CHECK:SPACING: No space is necessary after a cast
#184: FILE: acpi_enumerator.c:85:
+	(void) acpi_bus_register_driver(&ad);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#188: FILE: acpi_enumerator.c:89:
+		printk(KERN_NOTICE "no acpi handlers found\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#192: FILE: acpi_enumerator.c:93:
+	ah = kmalloc(ahsize * sizeof (struct acpi_handlers), GFP_KERNEL);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#196: FILE: acpi_enumerator.c:97:
+	if (!ah) {
+		return -ENOMEM;
+	}

CHECK:SPACING: No space is necessary after a cast
#201: FILE: acpi_enumerator.c:102:
+	(void) acpi_bus_register_driver(&ad);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#218: FILE: acpi_enumerator.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#235: FILE: acpi_enumerator.h:18:
+ *  with SIN; if not, write to the Free Software Foundation, Inc., 51 Franklin$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#248: FILE: acpi_enumerator.h:31:
+extern int get_handlers(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#249: FILE: acpi_enumerator.h:32:
+extern char *get_hardware_id(int handle);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#250: FILE: acpi_enumerator.h:33:
+extern int acpi_enum(char *page);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#251: FILE: acpi_enumerator.h:34:
+extern void free_acpi_enum(void);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 2
#259: FILE: gentable:2:
+

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#271: FILE: gentable:14:
+# SIN; if not, write to the Free Software Foundation, Inc., 51 Franklin St,$

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#311: FILE: gentable:54:
+echo -e "Specify the the input devices you want to monitor from the list below:\n"

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#432: FILE: input_enumerator.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#449: FILE: input_enumerator.c:18:
+ *  with SIN; if not, write to the Free Software Foundation, Inc., 51 Franklin$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#557: FILE: input_enumerator.c:126:
+	if (err >= left) {
+		err = left;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#561: FILE: input_enumerator.c:130:
+	if (err > 0) {
+		size += err;
+	}

CHECK:SPACING: No space is necessary after a cast
#584: FILE: input_enumerator.c:153:
+	(void) input_register_handler(&ih);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#587: FILE: input_enumerator.c:156:
+		printk(KERN_NOTICE "no input devices found\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#591: FILE: input_enumerator.c:160:
+	id = kmalloc(idsize * sizeof (struct input_devices), GFP_KERNEL);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#595: FILE: input_enumerator.c:164:
+	if (!id) {
+		return -ENOMEM;
+	}

CHECK:SPACING: No space is necessary after a cast
#600: FILE: input_enumerator.c:169:
+	(void) input_register_handler(&ih);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#616: FILE: input_enumerator.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#633: FILE: input_enumerator.h:18:
+ *  with SIN; if not, write to the Free Software Foundation, Inc., 51 Franklin$

CHECK:SPACING: spaces preferred around that '|' (ctx:ExV)
#650: FILE: input_enumerator.h:35:
+		     |INPUT_DEVICE_ID_MATCH_VENDOR	\
 		     ^

CHECK:SPACING: spaces preferred around that '|' (ctx:ExV)
#651: FILE: input_enumerator.h:36:
+		     |INPUT_DEVICE_ID_MATCH_PRODUCT	\
 		     ^

CHECK:SPACING: spaces preferred around that '|' (ctx:ExV)
#652: FILE: input_enumerator.h:37:
+		     |INPUT_DEVICE_ID_MATCH_VERSION)
 		     ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#654: FILE: input_enumerator.h:39:
+extern int get_devices(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#655: FILE: input_enumerator.h:40:
+extern void fill_input_device(struct input_device_id *idi, int i);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#657: FILE: input_enumerator.h:42:
+extern int input_enum(char *page);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#658: FILE: input_enumerator.h:43:
+extern void free_input_enum(void);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#665: FILE: procfs.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#682: FILE: procfs.c:18:
+ *  with SIN; if not, write to the Free Software Foundation, Inc., 51 Franklin$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#705: FILE: procfs.c:41:
+	if (count > left) {
+		count = left;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#711: FILE: procfs.c:47:
+	if (!count) {
+		*eof = 1;
+	}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#725: FILE: procfs.c:61:
+	buf = kmalloc(count * sizeof (char), GFP_KERNEL);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#725: FILE: procfs.c:61:
+	buf = kmalloc(count * sizeof (char), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:BRACES: braces {} are not necessary for single statement blocks
#739: FILE: procfs.c:75:
+	if (err < 0) {
+		goto cleanout;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#746: FILE: procfs.c:82:
+	if (bs->size < 0) {
+		err = bs->size;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#763: FILE: procfs.c:99:
+	if (!ibs.page) {
+		goto out;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#774: FILE: procfs.c:110:
+	if (!abs.page) {
+		goto cleanout2;
+	}

WARNING:SIZEOF_PARENTHESIS: sizeof RT_HELP should be sizeof(RT_HELP)
#784: FILE: procfs.c:120:
+	tbs.size = sizeof RT_HELP;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#787: FILE: procfs.c:123:
+	if (!tbs.page) {
+		goto cleanout4;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#794: FILE: procfs.c:130:
+	if (!rootdir) {
+		goto cleanout5;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#802: FILE: procfs.c:138:
+	if (!inputd) {
+		goto cleanout6;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#810: FILE: procfs.c:146:
+	if (!acpid) {
+		goto cleanout7;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#817: FILE: procfs.c:153:
+	if (!table) {
+		goto cleanout8;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#827: FILE: procfs.c:163:
+	if (!ilink) {
+		goto cleanout9;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#834: FILE: procfs.c:170:
+	if (!alink) {
+		goto cleanout10;
+	}

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#884: FILE: procfs.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#901: FILE: procfs.h:18:
+ *  with Procfs; if not, write to the Free Software Foundation, Inc., 51$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#915: FILE: procfs.h:32:
+extern int start_procfs(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#916: FILE: procfs.h:33:
+extern void stop_procfs(void);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#923: FILE: sin.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#940: FILE: sin.c:18:
+ *  with SIN; if not, write to the Free Software Foundation, Inc., 51 Franklin$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#991: FILE: sin.c:69:
+	if (!(handle = kzalloc(sizeof(struct input_handle), GFP_KERNEL))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#991: FILE: sin.c:69:
+	if (!(handle = kzalloc(sizeof(struct input_handle), GFP_KERNEL))) {
+		return NULL;
+	}

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*handle)...) over kzalloc(sizeof(struct input_handle)...)
#991: FILE: sin.c:69:
+	if (!(handle = kzalloc(sizeof(struct input_handle), GFP_KERNEL))) {

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1053: FILE: sin.c:131:
+		printk("couldn't find system ACPI device\n");

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1066: FILE: sin.c:144:
+	if  (err < 0) {
+		return err;
+	}

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1101: FILE: sin.c:179:
+	printk("System Inactivity Notifier 1.0 - (c) Alessandro Di Marco <dmr@c0nc3pt.com>\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1117: FILE: sin.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1134: FILE: sin.h:18:
+ *  with SIN; if not, write to the Free Software Foundation, Inc., 51 Franklin$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1145: FILE: sin.h:29:
+extern int start_monitor(char *ids, struct input_device_id *idi, unsigned long pace);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1146: FILE: sin.h:30:
+extern void stop_monitor(void);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1153: FILE: table.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1170: FILE: table.c:18:
+ *  with SIN; if not, write to the Free Software Foundation, Inc., 51 Franklin$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1198: FILE: table.c:46:
+		printk("generating special event [%d, %d]\n",

CHECK:SPACING: No space is necessary after a cast
#1202: FILE: table.c:50:
+	(void) acpi_bus_generate_event(acpi_device, rt.rules[rt.rnum].type,

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1212: FILE: table.c:60:
+		if (unlikely(debug)) {
+			printk("user activity detected, counter reset!\n");
+		}

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1213: FILE: table.c:61:
+			printk("user activity detected, counter reset!\n");

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1216: FILE: table.c:64:
+		counter = action = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1220: FILE: table.c:68:
+		printk("global counter %d, next rule is [%d %d %d]\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1229: FILE: table.c:77:
+			printk("generating event [%d, %d]\n",

CHECK:SPACING: No space is necessary after a cast
#1234: FILE: table.c:82:
+		(void) acpi_bus_generate_event(acpi_device,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1243: FILE: table.c:91:
+			printk("last rule reached, restarting from %d\n",

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'endp' - possible side-effects?
#1256: FILE: table.c:104:
+#define parse_num(endp) ({				\
+			char *cp = endp;		\
+							\
+			while (*cp && isspace(*cp)) {	\
+				++cp;			\
+			}				\
+							\
+			simple_strtol(cp, &endp, 10);	\
+		})

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#1263: FILE: table.c:111:
+			simple_strtol(cp, &endp, 10);	\

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:SPACING: No space is necessary after a cast
#1268: FILE: table.c:116:
+	int lc = ((struct rule *) l)->counter;

CHECK:SPACING: No space is necessary after a cast
#1269: FILE: table.c:117:
+	int rc = ((struct rule *) r)->counter;

CHECK:SPACING: No space is necessary after a cast
#1276: FILE: table.c:124:
+	struct rule t = *((struct rule *) l);

CHECK:SPACING: No space is necessary after a cast
#1278: FILE: table.c:126:
+	*((struct rule *) l) = *((struct rule *) r);

CHECK:SPACING: No space is necessary after a cast
#1279: FILE: table.c:127:
+	*((struct rule *) r) = t;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1304: FILE: table.c:152:
+	rt.devices = kmalloc(rt.dnum * sizeof (int), GFP_KERNEL);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1305: FILE: table.c:153:
+	if (!rt.devices) {
+		goto out;
+	}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1309: FILE: table.c:157:
+	rt.rules = kmalloc((rt.rnum + 1) * sizeof (struct rule), GFP_KERNEL);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1310: FILE: table.c:158:
+	if (!rt.rules) {
+		goto cleanout1;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1314: FILE: table.c:162:
+	if (uniq_alloc(&uniq, devices) < 0) {
+		goto cleanout2;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1320: FILE: table.c:168:
+		if (uniq_check(&uniq, rt.devices[i])) {
+			break;
+		}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1355: FILE: table.c:203:
+	sort(rt.rules, rt.rnum, sizeof (struct rule), cmp, swap);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1371: FILE: table.c:219:
+		      sizeof (struct input_device_id), GFP_KERNEL);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1372: FILE: table.c:220:
+	if (!idi) {
+		goto cleanout2;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1376: FILE: table.c:224:
+	for (i = 0; i < rt.dnum; i++) {
+		fill_input_device(&idi[i], rt.devices[i]);
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1381: FILE: table.c:229:
+	if (err < 0) {
+		goto cleanout3;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1403: FILE: table.c:251:
+	if (!b) {
+		return -EFAULT;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1410: FILE: table.c:258:
+	for (i = 0; i < rt.dnum; i++) {
+		b += sprintf(b, "%d ", rt.devices[i]);
+	}

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1431: FILE: table.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1448: FILE: table.h:18:
+ *  with SIN; if not, write to the Free Software Foundation, Inc., 51 Franklin$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1472: FILE: table.h:42:
+#define TABLE_SIZE (sizeof (struct table) - 2 * sizeof (void *)	  \

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1472: FILE: table.h:42:
+#define TABLE_SIZE (sizeof (struct table) - 2 * sizeof (void *)	  \

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1473: FILE: table.h:43:
+		    + rt.dnum * sizeof (int)			  \

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1474: FILE: table.h:44:
+		    + rt.rnum * sizeof (struct rule))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1478: FILE: table.h:48:
+extern void occasionally_generate_event(struct acpi_device *acpi_device);

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#1479: FILE: table.h:49:
+extern void timely_generate_event(struct acpi_device *acpi_device, int interactions, unsigned long *notify);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1479: FILE: table.h:49:
+extern void timely_generate_event(struct acpi_device *acpi_device, int interactions, unsigned long *notify);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1481: FILE: table.h:51:
+extern int push_table(char *buf, unsigned long count);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1482: FILE: table.h:52:
+extern int pull_table(char **buf);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1489: FILE: uniq.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1506: FILE: uniq.h:18:
+ *  with SIN; if not, write to the Free Software Foundation, Inc., 51 Franklin$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#1515: FILE: uniq.h:27:
+#define out_of_range(l, x, u) ((x) < (l) || (x) >= (u))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1524: FILE: uniq.h:36:
+	int size = (1 + elm / sizeof (unsigned long)) * sizeof (unsigned long);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1524: FILE: uniq.h:36:
+	int size = (1 + elm / sizeof (unsigned long)) * sizeof (unsigned long);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1529: FILE: uniq.h:41:
+	if (!ci->bitmap) {
+		return -ENOMEM;
+	}

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1544: FILE: uniq.h:56:
+	return out_of_range(0, index, ci->elements)
+		|| test_and_set_bit(index, ci->bitmap);

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.00697.commit.53d4da0d463b96b7f2a270b848fb5cdfe21174e5 total: 13 errors, 72 warnings, 35 checks, 1445 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.00697.commit.53d4da0d463b96b7f2a270b848fb5cdfe21174e5 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
