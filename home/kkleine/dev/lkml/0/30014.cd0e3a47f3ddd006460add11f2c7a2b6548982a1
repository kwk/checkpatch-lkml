WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#46: 
we guarantee switching always occurs in the context of the monitored thread.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#69: FILE: perfmon/perfmon_sets.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#90: FILE: perfmon/perfmon_sets.c:22:
+ * ^Ihttp://perfmon2.sf.net$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#102: FILE: perfmon/perfmon_sets.c:34:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#103: FILE: perfmon/perfmon_sets.c:35:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#105: FILE: perfmon/perfmon_sets.c:37:
+ * 02111-1307 USA
+  */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:SPACING: spaces required around that '<' (ctx:VxW)
#127: FILE: perfmon/perfmon_sets.c:59:
+	for (i = first_cnt_pmd; i< max_cnt_pmd; i++) {
 	                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#138: FILE: perfmon/perfmon_sets.c:70:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#152: FILE: perfmon/perfmon_sets.c:84:
+	list_for_each_entry(set1, &ctx->list, list) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!set2"
#170: FILE: perfmon/perfmon_sets.c:102:
+			if (set2 == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:SPLIT_STRING: quoted string split across lines
#172: FILE: perfmon/perfmon_sets.c:104:
+				PFM_DBG("set%u points to set%u "
+					"which does not exist",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#194: FILE: perfmon/perfmon_sets.c:126:
+		set1->priv_flags &= ~(PFM_SETFL_PRIV_MOD_BOTH|PFM_SETFL_PRIV_SWITCH);
 		                                             ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#241: FILE: perfmon/perfmon_sets.c:173:
+	if (ctx == NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#247: FILE: perfmon/perfmon_sets.c:179:
+	BUG_ON(set == NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!set"
#247: FILE: perfmon/perfmon_sets.c:179:
+	BUG_ON(set == NULL);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#276: FILE: perfmon/perfmon_sets.c:208:
+ * ^I- new_set: new set to switch to, if NULL follow normal chain$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#279: FILE: perfmon/perfmon_sets.c:211:
+void pfm_switch_sets(struct pfm_context *ctx,
+		    struct pfm_event_set *new_set,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#294: FILE: perfmon/perfmon_sets.c:226:
+	BUG_ON(!ctx->flags.system && ctx->task != current);

WARNING:TYPO_SPELLING: 'explicitely' may be misspelled - perhaps 'explicitly'?
#297: FILE: perfmon/perfmon_sets.c:229:
+	 * if no set is explicitely requested,
 	                ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_set"
#300: FILE: perfmon/perfmon_sets.c:232:
+	if (new_set == NULL) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#302: FILE: perfmon/perfmon_sets.c:234:
+^I ^I * we use round-robin unless the user specified$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#302: FILE: perfmon/perfmon_sets.c:234:
+^I ^I * we use round-robin unless the user specified$

ERROR:CODE_INDENT: code indent should use tabs where possible
#304: FILE: perfmon/perfmon_sets.c:236:
+^I ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#304: FILE: perfmon/perfmon_sets.c:236:
+^I ^I */$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#306: FILE: perfmon/perfmon_sets.c:238:
+		BUG_ON(new_set == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_set"
#306: FILE: perfmon/perfmon_sets.c:238:
+		BUG_ON(new_set == NULL);

WARNING:SPLIT_STRING: quoted string split across lines
#310: FILE: perfmon/perfmon_sets.c:242:
+	PFM_DBG("state=%d prev_set=%u prev_runs=%llu new_set=%u "
+		  "new_runs=%llu reset_mode=%d reset_pmds=%llx",

ERROR:CODE_INDENT: code indent should use tabs where possible
#346: FILE: perfmon/perfmon_sets.c:278:
+^I ^I * compute elapsed ns for active set$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#346: FILE: perfmon/perfmon_sets.c:278:
+^I ^I * compute elapsed ns for active set$

ERROR:CODE_INDENT: code indent should use tabs where possible
#347: FILE: perfmon/perfmon_sets.c:279:
+^I ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#347: FILE: perfmon/perfmon_sets.c:279:
+^I ^I */$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#351: FILE: perfmon/perfmon_sets.c:283:
+
+	}

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#382: FILE: perfmon/perfmon_sets.c:314:
+	if (reset_mode != PFM_PMD_RESET_NONE
+	    && !bitmap_empty(ulp(new_set->reset_pmds), pfm_pmu_conf->max_pmd))

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#424: FILE: perfmon/perfmon_sets.c:356:
+#define PFM_SETFL_BOTH_SWITCH	(PFM_SETFL_OVFL_SWITCH|PFM_SETFL_TIME_SWITCH)
                              	                      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#442: FILE: perfmon/perfmon_sets.c:374:
+static int __pfm_change_evtset(struct pfm_context *ctx,
+				  struct pfm_event_set *set,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#450: FILE: perfmon/perfmon_sets.c:382:
+	BUG_ON(ctx->state == PFM_CTX_LOADED);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#495: FILE: perfmon/perfmon_sets.c:427:
+	set->timeout_sw_ref = set->timeout_sw_left = ji;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:SPLIT_STRING: quoted string split across lines
#503: FILE: perfmon/perfmon_sets.c:435:
+	PFM_DBG("set %u flags=0x%x id_next=%u req_usec=%u"
+		"jiffies=%lu runs=%llu HZ=%u TICK_NSEC=%lu eff_usec=%u",

WARNING:MISSING_SPACE: break quoted strings at a space character
#503: FILE: perfmon/perfmon_sets.c:435:
+	PFM_DBG("set %u flags=0x%x id_next=%u req_usec=%u"
+		"jiffies=%lu runs=%llu HZ=%u TICK_NSEC=%lu eff_usec=%u",

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#530: FILE: perfmon/perfmon_sets.c:462:
+	for (i=0; i < max_pmc;  i++) {
 	      ^

WARNING:TYPO_SPELLING: 'explicitely' may be misspelled - perhaps 'explicitly'?
#542: FILE: perfmon/perfmon_sets.c:474:
+	 * hence we do not need to explicitely initialize them.
 	                           ^^^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#550: FILE: perfmon/perfmon_sets.c:482:
+struct pfm_event_set *pfm_find_set(struct pfm_context *ctx, u16 set_id,
+					  int alloc)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#560: FILE: perfmon/perfmon_sets.c:492:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!view"
#595: FILE: perfmon/perfmon_sets.c:527:
+		if (view == NULL) {

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#601: FILE: perfmon/perfmon_sets.c:533:
+		     + (set_id*PFM_SET_REMAP_SCALAR);
 		              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#604: FILE: perfmon/perfmon_sets.c:536:
+		view = (struct pfm_set_view *)(new_set+1);
 		                                      ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!prev"
#616: FILE: perfmon/perfmon_sets.c:548:
+	if (prev == NULL) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around new_set->list
#617: FILE: perfmon/perfmon_sets.c:549:
+		list_add(&(new_set->list), &ctx->list);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around new_set->list
#620: FILE: perfmon/perfmon_sets.c:552:
+		list_add(&(new_set->list), &prev->list);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#623: FILE: perfmon/perfmon_sets.c:555:
+	PFM_DBG("set_id=%u size=%zu view=%p remap=%d mmap_offs=%lu",
+			set_id,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#631: FILE: perfmon/perfmon_sets.c:563:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#636: FILE: perfmon/perfmon_sets.c:568:
+int __pfm_create_evtsets(struct pfm_context *ctx, struct pfarg_setdesc *req,
+			int count)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!set"
#648: FILE: perfmon/perfmon_sets.c:580:
+		if (set == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#668: FILE: perfmon/perfmon_sets.c:600:
+int __pfm_getinfo_evtsets(struct pfm_context *ctx, struct pfarg_setinfo *req,
+				 int count)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#682: FILE: perfmon/perfmon_sets.c:614:
+	for (i = 0; i < count; i++, req++) {
+

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#707: FILE: perfmon/perfmon_sets.c:639:
+		if (is_system && is_loaded && ctx->flags.started
+		    && set == ctx->active_set)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#757: FILE: perfmon/perfmon_sets.c:689:
+	BUG_ON(ctx->state != PFM_CTX_UNLOADED);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#833: FILE: perfmon/perfmon_sets.c:765:
+{
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#835: FILE: perfmon/perfmon_sets.c:767:
+	pfm_lg_set_cachep = kmem_cache_create("pfm_large_event_set",
+			sizeof(struct pfm_event_set)+sizeof(struct pfm_set_view),

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#835: FILE: perfmon/perfmon_sets.c:767:
+			sizeof(struct pfm_event_set)+sizeof(struct pfm_set_view),
 			                            ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pfm_lg_set_cachep"
#837: FILE: perfmon/perfmon_sets.c:769:
+	if (pfm_lg_set_cachep == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#843: FILE: perfmon/perfmon_sets.c:775:
+	pfm_set_cachep = kmem_cache_create("pfm_event_set",
+			sizeof(struct pfm_event_set),

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pfm_set_cachep"
#845: FILE: perfmon/perfmon_sets.c:777:
+	if (pfm_set_cachep == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!kaddr"
#859: FILE: perfmon/perfmon_sets.c:791:
+	if (kaddr == NULL) {

CHECK:SPACING: No space is necessary after a cast
#864: FILE: perfmon/perfmon_sets.c:796:
+	if ( (address < (unsigned long) vma->vm_start) ||

ERROR:SPACING: space prohibited after that open parenthesis '('
#864: FILE: perfmon/perfmon_sets.c:796:
+	if ( (address < (unsigned long) vma->vm_start) ||

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'address < (unsigned long) vma->vm_start'
#864: FILE: perfmon/perfmon_sets.c:796:
+	if ( (address < (unsigned long) vma->vm_start) ||
+	     (address >= (unsigned long) (vma->vm_start + PAGE_SIZE)) )

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#865: FILE: perfmon/perfmon_sets.c:797:
+	if ( (address < (unsigned long) vma->vm_start) ||
+	     (address >= (unsigned long) (vma->vm_start + PAGE_SIZE)) )

CHECK:SPACING: No space is necessary after a cast
#865: FILE: perfmon/perfmon_sets.c:797:
+	     (address >= (unsigned long) (vma->vm_start + PAGE_SIZE)) )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#865: FILE: perfmon/perfmon_sets.c:797:
+	     (address >= (unsigned long) (vma->vm_start + PAGE_SIZE)) )

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#877: FILE: perfmon/perfmon_sets.c:809:
+	PFM_DBG("[%d] start=%p ref_count=%d",
+		  current->pid,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#882: FILE: perfmon/perfmon_sets.c:814:
+}
+struct vm_operations_struct pfm_view_map_vm_ops = {

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#882: FILE: perfmon/perfmon_sets.c:814:
+struct vm_operations_struct pfm_view_map_vm_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#898: FILE: perfmon/perfmon_sets.c:830:
+	if (vma->vm_pgoff < PFM_SET_REMAP_OFFS
+			|| vma->vm_pgoff >= PFM_SET_REMAP_OFFS_MAX) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!set"
#910: FILE: perfmon/perfmon_sets.c:842:
+	if (set == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#936: FILE: perfmon/perfmon_sets.c:868:
+	if (ctx == NULL)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#939: FILE: perfmon/perfmon_sets.c:871:
+	sz = count*sizeof(*ureq);
 	          ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#953: FILE: perfmon/perfmon_sets.c:885:
+	if (!ret) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#966: FILE: perfmon/perfmon_sets.c:898:
+	} else

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#993: FILE: perfmon/perfmon_sets.c:925:
+	if (ctx == NULL)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#996: FILE: perfmon/perfmon_sets.c:928:
+	sz = count*sizeof(*ureq);
 	          ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctx"
#1038: FILE: perfmon/perfmon_sets.c:970:
+	if (ctx == NULL)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1041: FILE: perfmon/perfmon_sets.c:973:
+	sz = count*sizeof(*ureq);
 	          ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1054: FILE: perfmon/perfmon_sets.c:986:
+	if (!ret) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1065: FILE: perfmon/perfmon_sets.c:997:
+	} else

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.30014.commit.cd0e3a47f3ddd006460add11f2c7a2b6548982a1 total: 10 errors, 21 warnings, 54 checks, 1009 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.30014.commit.cd0e3a47f3ddd006460add11f2c7a2b6548982a1 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
