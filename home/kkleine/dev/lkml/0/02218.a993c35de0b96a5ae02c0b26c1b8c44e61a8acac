WARNING:NEW_TYPEDEFS: do not add new typedefs
#42: FILE: include/asm-alpha/local.h:7:
+typedef struct

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#43: FILE: include/asm-alpha/local.h:8:
+typedef struct
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#52: FILE: include/asm-alpha/local.h:14:
+#define local_set(l,i)	atomic_long_set(&(l)->a, (i))
                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#55: FILE: include/asm-alpha/local.h:17:
+#define local_add(i,l)	atomic_long_add((i),(&(l)->a))
                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#55: FILE: include/asm-alpha/local.h:17:
+#define local_add(i,l)	atomic_long_add((i),(&(l)->a))
                       	                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#56: FILE: include/asm-alpha/local.h:18:
+#define local_sub(i,l)	atomic_long_sub((i),(&(l)->a))
                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#56: FILE: include/asm-alpha/local.h:18:
+#define local_sub(i,l)	atomic_long_sub((i),(&(l)->a))
                       	                   ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#62: FILE: include/asm-alpha/local.h:20:
+static __inline__ long local_add_return(long i, local_t * l)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INLINE: plain inline is preferred over __inline__
#62: FILE: include/asm-alpha/local.h:20:
+static __inline__ long local_add_return(long i, local_t * l)

WARNING:LINE_SPACING: Missing a blank line after declarations
#65: FILE: include/asm-alpha/local.h:23:
+	long temp, result;
+	__asm__ __volatile__(

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#65: FILE: include/asm-alpha/local.h:23:
+	__asm__ __volatile__(

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#74: FILE: include/asm-alpha/local.h:32:
+	:"=&r" (temp), "=m" (l->a.counter), "=&r" (result)
 	^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#75: FILE: include/asm-alpha/local.h:33:
+	:"Ir" (i), "m" (l->a.counter) : "memory");
 	^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#83: FILE: include/asm-alpha/local.h:37:
+static __inline__ long local_sub_return(long i, local_t * v)

WARNING:INLINE: plain inline is preferred over __inline__
#83: FILE: include/asm-alpha/local.h:37:
+static __inline__ long local_sub_return(long i, local_t * v)

WARNING:LINE_SPACING: Missing a blank line after declarations
#86: FILE: include/asm-alpha/local.h:40:
+	long temp, result;
+	__asm__ __volatile__(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#86: FILE: include/asm-alpha/local.h:40:
+	__asm__ __volatile__(

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#95: FILE: include/asm-alpha/local.h:49:
+	:"=&r" (temp), "=m" (l->a.counter), "=&r" (result)
 	^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#96: FILE: include/asm-alpha/local.h:50:
+	:"Ir" (i), "m" (l->a.counter) : "memory");
 	^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'l' - possible side-effects?
#113: FILE: include/asm-alpha/local.h:67:
+#define local_add_unless(l, a, u)				\
+({								\
+	long c, old;						\
+	c = local_read(l);					\
+	for (;;) {						\
+		if (unlikely(c == (u)))				\
+			break;					\
+		old = local_cmpxchg((l), c, c + (a));	\
+		if (likely(old == c))				\
+			break;					\
+		c = old;					\
+	}							\
+	c != (u);						\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'u' - possible side-effects?
#113: FILE: include/asm-alpha/local.h:67:
+#define local_add_unless(l, a, u)				\
+({								\
+	long c, old;						\
+	c = local_read(l);					\
+	for (;;) {						\
+		if (unlikely(c == (u)))				\
+			break;					\
+		old = local_cmpxchg((l), c, c + (a));	\
+		if (likely(old == c))				\
+			break;					\
+		c = old;					\
+	}							\
+	c != (u);						\
+})

ERROR:SPACING: space required after that ',' (ctx:VxV)
#131: FILE: include/asm-alpha/local.h:85:
+#define local_dec_return(l) local_sub_return(1,(l))
                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#133: FILE: include/asm-alpha/local.h:87:
+#define local_inc_return(l) local_add_return(1,(l))
                                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#135: FILE: include/asm-alpha/local.h:89:
+#define local_sub_and_test(i,l) (local_sub_return((i), (l)) == 0)
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#144: FILE: include/asm-alpha/local.h:98:
+#define __local_add(i,l)	((l)->a.counter+=(i))
                      ^

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#144: FILE: include/asm-alpha/local.h:98:
+#define __local_add(i,l)	((l)->a.counter+=(i))
                         	               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#145: FILE: include/asm-alpha/local.h:99:
+#define __local_sub(i,l)	((l)->a.counter-=(i))
                      ^

ERROR:SPACING: spaces required around that '-=' (ctx:VxV)
#145: FILE: include/asm-alpha/local.h:99:
+#define __local_sub(i,l)	((l)->a.counter-=(i))
                         	               ^

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#184: FILE: include/asm-alpha/system.h:447:
+__xchg_u8_local(volatile char *m, unsigned long val)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#188: FILE: include/asm-alpha/system.h:451:
+	__asm__ __volatile__(

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#207: FILE: include/asm-alpha/system.h:470:
+__xchg_u16_local(volatile short *m, unsigned long val)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#211: FILE: include/asm-alpha/system.h:474:
+	__asm__ __volatile__(

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#230: FILE: include/asm-alpha/system.h:493:
+__xchg_u32_local(volatile int *m, unsigned long val)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#234: FILE: include/asm-alpha/system.h:497:
+	__asm__ __volatile__(

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#249: FILE: include/asm-alpha/system.h:512:
+__xchg_u64_local(volatile long *m, unsigned long val)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#253: FILE: include/asm-alpha/system.h:516:
+	__asm__ __volatile__(

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#267: FILE: include/asm-alpha/system.h:530:
+#define __xchg_local(ptr, x, size) \
+({ \
+	unsigned long __xchg__res; \
+	volatile void *__xchg__ptr = (ptr); \
+	switch (size) { \
+		case 1: __xchg__res = __xchg_u8_local(__xchg__ptr, x); break; \
+		case 2: __xchg__res = __xchg_u16_local(__xchg__ptr, x); break; \
+		case 4: __xchg__res = __xchg_u32_local(__xchg__ptr, x); break; \
+		case 8: __xchg__res = __xchg_u64_local(__xchg__ptr, x); break; \
+		default: __xchg_called_with_bad_pointer(); __xchg__res = x; \
+	} \
+	__xchg__res; \
+})

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#270: FILE: include/asm-alpha/system.h:533:
+	volatile void *__xchg__ptr = (ptr); \

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#271: FILE: include/asm-alpha/system.h:534:
+	switch (size) { \
+		case 1: __xchg__res = __xchg_u8_local(__xchg__ptr, x); break; \
+		case 2: __xchg__res = __xchg_u16_local(__xchg__ptr, x); break; \
+		case 4: __xchg__res = __xchg_u32_local(__xchg__ptr, x); break; \
+		case 8: __xchg__res = __xchg_u64_local(__xchg__ptr, x); break; \
+		default: __xchg_called_with_bad_pointer(); __xchg__res = x; \

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#272: FILE: include/asm-alpha/system.h:535:
+		case 1: __xchg__res = __xchg_u8_local(__xchg__ptr, x); break; \

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#273: FILE: include/asm-alpha/system.h:536:
+		case 2: __xchg__res = __xchg_u16_local(__xchg__ptr, x); break; \

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#274: FILE: include/asm-alpha/system.h:537:
+		case 4: __xchg__res = __xchg_u32_local(__xchg__ptr, x); break; \

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#275: FILE: include/asm-alpha/system.h:538:
+		case 8: __xchg__res = __xchg_u64_local(__xchg__ptr, x); break; \

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#276: FILE: include/asm-alpha/system.h:539:
+		default: __xchg_called_with_bad_pointer(); __xchg__res = x; \

ERROR:SPACING: space required after that ',' (ctx:VxV)
#281: FILE: include/asm-alpha/system.h:544:
+#define xchg_local(ptr,x)						     \
                       ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#281: FILE: include/asm-alpha/system.h:544:
+#define xchg_local(ptr,x)						     \
+  ({									     \
+     __typeof__(*(ptr)) _x_ = (x);					     \
+     (__typeof__(*(ptr))) __xchg_local((ptr), (unsigned long)_x_,	     \
+     		sizeof(*(ptr))); \
+  })

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#282: FILE: include/asm-alpha/system.h:545:
+  ({^I^I^I^I^I^I^I^I^I     \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#283: FILE: include/asm-alpha/system.h:546:
+     __typeof__(*(ptr)) _x_ = (x);^I^I^I^I^I     \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#284: FILE: include/asm-alpha/system.h:547:
+     (__typeof__(*(ptr))) __xchg_local((ptr), (unsigned long)_x_,^I     \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#285: FILE: include/asm-alpha/system.h:548:
+     ^I^Isizeof(*(ptr))); \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#285: FILE: include/asm-alpha/system.h:548:
+     ^I^Isizeof(*(ptr))); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#285: FILE: include/asm-alpha/system.h:548:
+     ^I^Isizeof(*(ptr))); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#286: FILE: include/asm-alpha/system.h:549:
+  })$

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#296: FILE: include/asm-alpha/system.h:705:
+__cmpxchg_u8_local(volatile char *m, long old, long new)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#300: FILE: include/asm-alpha/system.h:709:
+	__asm__ __volatile__(

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#322: FILE: include/asm-alpha/system.h:731:
+__cmpxchg_u16_local(volatile short *m, long old, long new)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#326: FILE: include/asm-alpha/system.h:735:
+	__asm__ __volatile__(

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#348: FILE: include/asm-alpha/system.h:757:
+__cmpxchg_u32_local(volatile int *m, int old, int new)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#352: FILE: include/asm-alpha/system.h:761:
+	__asm__ __volatile__(

CHECK:SPACING: No space is necessary after a cast
#364: FILE: include/asm-alpha/system.h:773:
+	: "r"((long) old), "r"(new), "m"(*m) : "memory");

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#370: FILE: include/asm-alpha/system.h:779:
+__cmpxchg_u64_local(volatile long *m, unsigned long old, unsigned long new)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#374: FILE: include/asm-alpha/system.h:783:
+	__asm__ __volatile__(

CHECK:SPACING: No space is necessary after a cast
#386: FILE: include/asm-alpha/system.h:795:
+	: "r"((long) old), "r"(new), "m"(*m) : "memory");

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#392: FILE: include/asm-alpha/system.h:801:
+__cmpxchg_local(volatile void *ptr, unsigned long old, unsigned long new,

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#395: FILE: include/asm-alpha/system.h:804:
+	switch (size) {
+		case 1:
[...]
+		case 2:
[...]
+		case 4:
[...]
+		case 8:

ERROR:SPACING: space required after that ',' (ctx:VxV)
#409: FILE: include/asm-alpha/system.h:818:
+#define cmpxchg_local(ptr,o,n)						 \
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#409: FILE: include/asm-alpha/system.h:818:
+#define cmpxchg_local(ptr,o,n)						 \
                            ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#409: FILE: include/asm-alpha/system.h:818:
+#define cmpxchg_local(ptr,o,n)						 \
+  ({									 \
+     __typeof__(*(ptr)) _o_ = (o);					 \
+     __typeof__(*(ptr)) _n_ = (n);					 \
+     (__typeof__(*(ptr))) __cmpxchg_local((ptr), (unsigned long)_o_,	 \
+				    (unsigned long)_n_, sizeof(*(ptr))); \
+  })

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#410: FILE: include/asm-alpha/system.h:819:
+  ({^I^I^I^I^I^I^I^I^I \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#411: FILE: include/asm-alpha/system.h:820:
+     __typeof__(*(ptr)) _o_ = (o);^I^I^I^I^I \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#412: FILE: include/asm-alpha/system.h:821:
+     __typeof__(*(ptr)) _n_ = (n);^I^I^I^I^I \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#413: FILE: include/asm-alpha/system.h:822:
+     (__typeof__(*(ptr))) __cmpxchg_local((ptr), (unsigned long)_o_,^I \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#415: FILE: include/asm-alpha/system.h:824:
+  })$

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.02218.commit.a993c35de0b96a5ae02c0b26c1b8c44e61a8acac total: 30 errors, 26 warnings, 17 checks, 378 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.02218.commit.a993c35de0b96a5ae02c0b26c1b8c44e61a8acac has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
