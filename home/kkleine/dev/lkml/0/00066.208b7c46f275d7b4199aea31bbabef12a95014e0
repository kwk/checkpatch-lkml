WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#45: 
   > +SIN wakes up periodically and checks for user activity occurred in the

CHECK:SPACING: No space is necessary after a cast
#213: FILE: procfs.c:177:
+	interact->data = (void *) simulate_event;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#273: FILE: sin.c:71:
+	(void) simulate_activity();

WARNING:BRACES: braces {} are not necessary for single statement blocks
#309: FILE: sin.c:117:
+		if (unlikely(test_and_clear_bit(RULE_MARK, &status))) {
+			signal_interaction();
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#355: FILE: sin.c:205:
+	printk("System Inactivity Notifier 1.3 - (c) Alessandro Di Marco <dmr@c0nc3pt.com>\n");

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#373: FILE: sin.h:35:
+	spinlock_t lock;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#382: FILE: sin.h:44:
+	last = uact->last = jiffies;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#399: FILE: sin.h:61:
+extern unsigned long simulate_activity(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#401: FILE: sin.h:63:
+extern void simulate_event(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#404: FILE: sin.h:65:
+extern int start_monitor(char *ids, struct input_device_id *idi);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#451: FILE: table.c:62:
+	for (; next_rule < rt.rnum &&
+		     time_after_eq(jiffies, last + rt.rules[next_rule].target);

CHECK:SPACING: No space is necessary after a cast
#456: FILE: table.c:67:
+			(void) acpi_bus_generate_event(acpi_device,

CHECK:SPACING: No space is necessary after a cast
#525: FILE: table.c:105:
+	long lt = ((struct rule *) l)->target;

CHECK:SPACING: No space is necessary after a cast
#526: FILE: table.c:106:
+	long rt = ((struct rule *) r)->target;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#675: FILE: table.h:42:
+#define printd(fmt...)				\
+	if (unlikely(rt.debug)) {		\
+		printk(fmt);			\
+	}

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#677: FILE: table.h:44:
+		printk(fmt);			\

WARNING:LONG_LINE: line length of 119 exceeds 100 columns
#704: FILE: table.h:75:
+extern unsigned long timely_generate_event(struct acpi_device *acpi_device, unsigned long last, unsigned long *notify);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#704: FILE: table.h:75:
+extern unsigned long timely_generate_event(struct acpi_device *acpi_device, unsigned long last, unsigned long *notify);

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.00066.commit.208b7c46f275d7b4199aea31bbabef12a95014e0 total: 1 errors, 5 warnings, 12 checks, 579 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.00066.commit.208b7c46f275d7b4199aea31bbabef12a95014e0 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
