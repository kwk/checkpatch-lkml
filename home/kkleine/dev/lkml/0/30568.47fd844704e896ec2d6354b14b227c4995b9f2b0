WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#45: FILE: fs/unionfs/union.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:CONST_STRUCT: struct file_operations should normally be const
#108: FILE: fs/unionfs/union.h:64:
+extern struct file_operations unionfs_main_fops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#109: FILE: fs/unionfs/union.h:65:
+extern struct file_operations unionfs_dir_fops;

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#110: FILE: fs/unionfs/union.h:66:
+extern struct inode_operations unionfs_main_iops;

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#111: FILE: fs/unionfs/union.h:67:
+extern struct inode_operations unionfs_dir_iops;

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#112: FILE: fs/unionfs/union.h:68:
+extern struct inode_operations unionfs_symlink_iops;

WARNING:CONST_STRUCT: struct dentry_operations should normally be const
#114: FILE: fs/unionfs/union.h:70:
+extern struct dentry_operations unionfs_dops;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#117: FILE: fs/unionfs/union.h:73:
+#define RDCACHE_JIFFIES 5*HZ
                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#117: FILE: fs/unionfs/union.h:73:
+#define RDCACHE_JIFFIES 5*HZ

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#155: FILE: fs/unionfs/union.h:111:
+	 * go before their parents. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LONG_LINE_COMMENT: line length of 125 exceeds 100 columns
#194: FILE: fs/unionfs/union.h:150:
+	int bindex;		// we can check for duplicate whiteouts and files in the same branch in order to return -EIO.

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE_COMMENT: line length of 113 exceeds 100 columns
#196: FILE: fs/unionfs/union.h:152:
+	char iname[DNAME_INLINE_LEN_MIN];	// Inline name, so we don't need to separately kmalloc small ones

WARNING:LINE_SPACING: Missing a blank line after declarations
#246: FILE: fs/unionfs/union.h:202:
+	off_t tmp;
+	tmp = ((buf->uds_cookie & MAXRDCOOKIE) << RDOFFBITS)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#257: FILE: fs/unionfs/union.h:213:
+ * dtopd is defined.  */

WARNING:LINE_SPACING: Missing a blank line after declarations
#262: FILE: fs/unionfs/union.h:218:
+		struct dentry *tmp = d1;
+		d1 = d2;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#269: FILE: fs/unionfs/union.h:225:
+extern int new_dentry_private_data(struct dentry *dentry);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:TYPO_SPELLING: 'upto' may be misspelled - perhaps 'up to'?
#277: FILE: fs/unionfs/union.h:233:
+/* replicates the directory structure upto given dentry in given branch */
                                       ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#278: FILE: fs/unionfs/union.h:234:
+extern struct dentry *create_parents(struct inode *dir, struct dentry *dentry,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#284: FILE: fs/unionfs/union.h:240:
+extern int is_branch_overlap(struct dentry *dent1, struct dentry *dent2);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#287: FILE: fs/unionfs/union.h:243:
+extern int unionfs_partial_lookup(struct dentry *dentry);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#290: FILE: fs/unionfs/union.h:246:
+/* Pass an unionfs dentry and an index and it will try to create a whiteout in branch 'index'.
+   On error, it will proceed to a branch to the left */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#290: FILE: fs/unionfs/union.h:246:
+   On error, it will proceed to a branch to the left */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#291: FILE: fs/unionfs/union.h:247:
+extern int create_whiteout(struct dentry *dentry, int start);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#293: FILE: fs/unionfs/union.h:249:
+extern int copyup_file(struct inode *dir, struct file *file, int bstart,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#295: FILE: fs/unionfs/union.h:251:
+extern int copyup_named_file(struct inode *dir, struct file *file,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#299: FILE: fs/unionfs/union.h:255:
+extern int copyup_dentry(struct inode *dir, struct dentry *dentry, int bstart,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#301: FILE: fs/unionfs/union.h:257:
+extern int copyup_named_dentry(struct inode *dir, struct dentry *dentry,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#306: FILE: fs/unionfs/union.h:262:
+extern int remove_whiteouts(struct dentry *dentry, struct dentry *hidden_dentry,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#309: FILE: fs/unionfs/union.h:265:
+extern int do_delete_whiteouts(struct dentry *dentry, int bindex,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#310: FILE: fs/unionfs/union.h:266:
+extern int do_delete_whiteouts(struct dentry *dentry, int bindex,
+		     struct unionfs_dir_state *namelist);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#313: FILE: fs/unionfs/union.h:269:
+extern int check_empty(struct dentry *dentry,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#316: FILE: fs/unionfs/union.h:272:
+extern int delete_whiteouts(struct dentry *dentry, int bindex,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#320: FILE: fs/unionfs/union.h:276:
+extern int unionfs_refresh_hidden_dentry(struct dentry *dentry, int bindex);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#322: FILE: fs/unionfs/union.h:278:
+extern void unionfs_reinterpose(struct dentry *this_dentry);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#323: FILE: fs/unionfs/union.h:279:
+extern struct super_block *unionfs_duplicate_super(struct super_block *sb);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#326: FILE: fs/unionfs/union.h:282:
+extern int unionfs_setlk(struct file *file, int cmd, struct file_lock *fl);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#327: FILE: fs/unionfs/union.h:283:
+extern int unionfs_getlk(struct file *file, struct file_lock *fl);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#330: FILE: fs/unionfs/union.h:286:
+extern int unionfs_file_revalidate(struct file *file, int willwrite);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#331: FILE: fs/unionfs/union.h:287:
+extern int unionfs_open(struct inode *inode, struct file *file);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#332: FILE: fs/unionfs/union.h:288:
+extern int unionfs_file_release(struct inode *inode, struct file *file);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#333: FILE: fs/unionfs/union.h:289:
+extern int unionfs_flush(struct file *file, fl_owner_t id);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#334: FILE: fs/unionfs/union.h:290:
+extern long unionfs_ioctl(struct file *file, unsigned int cmd,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#338: FILE: fs/unionfs/union.h:294:
+extern int unionfs_rename(struct inode *old_dir, struct dentry *old_dentry,

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#343: FILE: fs/unionfs/union.h:299:
+int unionfs_d_revalidate(struct dentry *dentry, struct nameidata *nd);
                                                                   ^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#352: FILE: fs/unionfs/union.h:308:
+extern int unionfs_interpose(struct dentry *this_dentry, struct super_block *sb,

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#362: FILE: fs/unionfs/union.h:318:
+int check_branch(struct nameidata *nd);
                                    ^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#385: FILE: fs/unionfs/union.h:341:
+		BUG_ON(hidden_inode->i_nlink < 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#446: FILE: fs/unionfs/union.h:402:
+struct dentry *unionfs_lookup_backend(struct dentry *dentry, struct nameidata *nd, int lookupmode);
                                                                                ^^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'check_flag' may be better as '(check_flag)' to avoid precedence issues
#450: FILE: fs/unionfs/union.h:406:
+#define IS_SET(sb, check_flag) (check_flag & MOUNT_FLAG(sb))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#461: FILE: fs/unionfs/union.h:417:
+	BUG_ON(index < 0);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#465: FILE: fs/unionfs/union.h:421:
+}
+static inline int set_branchperms(struct super_block *sb, int index, int perms)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#467: FILE: fs/unionfs/union.h:423:
+	BUG_ON(index < 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#495: FILE: fs/unionfs/union.h:451:
+	BUG_ON(index < 0);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#500: FILE: fs/unionfs/union.h:456:
+	if ((!(perms & MAY_WRITE))
+	    || (IS_RDONLY(dtohd_index(dentry, index)->d_inode)))

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#505: FILE: fs/unionfs/union.h:461:
+}
+static inline int __is_robranch(struct dentry *dentry, char *file,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#512: FILE: fs/unionfs/union.h:468:
+	BUG_ON(index < 0);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#519: FILE: fs/unionfs/union.h:475:
+#define is_robranch(d) __is_robranch(d, __FILE__, __FUNCTION__, __LINE__)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#520: FILE: fs/unionfs/union.h:476:
+#define is_robranch_super(s, n) __is_robranch_super(s, n, __FILE__, __FUNCTION__, __LINE__)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#529: FILE: fs/unionfs/union.h:485:
+#define UNIONFS_DIR_OPAQUE UNIONFS_WHPFX UNIONFS_DIR_OPAQUE_NAME

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#577: FILE: fs/unionfs/union.h:533:
+extern int make_dir_opaque(struct dentry *dir, int bindex);

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.30568.commit.47fd844704e896ec2d6354b14b227c4995b9f2b0 total: 2 errors, 26 warnings, 32 checks, 536 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.30568.commit.47fd844704e896ec2d6354b14b227c4995b9f2b0 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
