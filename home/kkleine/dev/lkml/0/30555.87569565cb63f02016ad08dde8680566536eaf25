WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#43: FILE: fs/unionfs/file.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#65: FILE: fs/unionfs/file.c:23:
+extern ssize_t unionfs_write(struct file *, const char __user *, size_t,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#65: FILE: fs/unionfs/file.c:23:
+extern ssize_t unionfs_write(struct file *, const char __user *, size_t,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char __user *' should also have an identifier name
#65: FILE: fs/unionfs/file.c:23:
+extern ssize_t unionfs_write(struct file *, const char __user *, size_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#65: FILE: fs/unionfs/file.c:23:
+extern ssize_t unionfs_write(struct file *, const char __user *, size_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t *' should also have an identifier name
#65: FILE: fs/unionfs/file.c:23:
+extern ssize_t unionfs_write(struct file *, const char __user *, size_t,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#77: FILE: fs/unionfs/file.c:35:
+	if ((err = unionfs_file_revalidate(file, 0)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#102: FILE: fs/unionfs/file.c:60:
+ssize_t __unionfs_read(struct file * file, char __user * buf, size_t count,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#102: FILE: fs/unionfs/file.c:60:
+ssize_t __unionfs_read(struct file * file, char __user * buf, size_t count,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#103: FILE: fs/unionfs/file.c:61:
+		       loff_t * ppos)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#120: FILE: fs/unionfs/file.c:78:
+ssize_t unionfs_read(struct file * file, char __user * buf, size_t count,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#120: FILE: fs/unionfs/file.c:78:
+ssize_t unionfs_read(struct file * file, char __user * buf, size_t count,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#121: FILE: fs/unionfs/file.c:79:
+		     loff_t * ppos)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#125: FILE: fs/unionfs/file.c:83:
+	if ((err = unionfs_file_revalidate(file, 0)))

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#134: FILE: fs/unionfs/file.c:92:
+ssize_t __unionfs_write(struct file * file, const char __user * buf,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#134: FILE: fs/unionfs/file.c:92:
+ssize_t __unionfs_write(struct file * file, const char __user * buf,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#135: FILE: fs/unionfs/file.c:93:
+			size_t count, loff_t * ppos)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#149: FILE: fs/unionfs/file.c:107:
+	BUG_ON(bstart == -1);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#179: FILE: fs/unionfs/file.c:137:
+ssize_t unionfs_write(struct file * file, const char __user * buf, size_t count,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#179: FILE: fs/unionfs/file.c:137:
+ssize_t unionfs_write(struct file * file, const char __user * buf, size_t count,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#180: FILE: fs/unionfs/file.c:138:
+		      loff_t * ppos)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#184: FILE: fs/unionfs/file.c:142:
+	if ((err = unionfs_file_revalidate(file, 1)))

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#199: FILE: fs/unionfs/file.c:157:
+static unsigned int unionfs_poll(struct file *file, poll_table * wait)

WARNING:TYPO_SPELLING: 'happend' may be misspelled - perhaps 'happened'?
#205: FILE: fs/unionfs/file.c:163:
+		/* We should pretend an error happend. */
 		                              ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#252: FILE: fs/unionfs/file.c:210:
+	if ((err = unionfs_file_revalidate(file, willwrite)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#266: FILE: fs/unionfs/file.c:224:
+	if ((err = unionfs_file_revalidate(file, 1)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#290: FILE: fs/unionfs/file.c:248:
+	if ((err = unionfs_file_revalidate(file, 1)))

WARNING:CONST_STRUCT: struct file_operations should normally be const
#302: FILE: fs/unionfs/file.c:260:
+struct file_operations unionfs_main_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.30555.commit.87569565cb63f02016ad08dde8680566536eaf25 total: 19 errors, 9 warnings, 0 checks, 274 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.30555.commit.87569565cb63f02016ad08dde8680566536eaf25 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
