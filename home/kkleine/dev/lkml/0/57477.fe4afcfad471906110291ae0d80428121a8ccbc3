WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#48: FILE: block/elevator.c:242:
+EXPORT_SYMBOL(elevator_init);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#57: FILE: block/elevator.c:255:
+EXPORT_SYMBOL(elevator_exit);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#92: FILE: block/elevator.c:331:
+EXPORT_SYMBOL(elv_rb_add);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#96: FILE: block/elevator.c:335:
+	BUG_ON(RB_EMPTY_NODE(&rq->rb_node));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#101: FILE: block/elevator.c:340:
+EXPORT_SYMBOL(elv_rb_del);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#122: FILE: block/elevator.c:361:
+EXPORT_SYMBOL(elv_rb_find);

WARNING:TYPO_SPELLING: 'insted' may be misspelled - perhaps 'instead'?
#128: FILE: block/elevator.c:365:
+ * entry.  rq is sort insted into the dispatch queue. To be used by
                       ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#137: FILE: block/elevator.c:401:
+EXPORT_SYMBOL(elv_dispatch_sort);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#151: FILE: block/elevator.c:422:
+EXPORT_SYMBOL(elv_dispatch_add_tail);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#179: FILE: block/elevator.c:650:
+EXPORT_SYMBOL(__elv_add_request);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#188: FILE: block/elevator.c:662:
+EXPORT_SYMBOL(elv_add_request);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#197: FILE: block/elevator.c:747:
+EXPORT_SYMBOL(elv_next_request);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#206: FILE: block/elevator.c:765:
+EXPORT_SYMBOL(elv_dequeue_request);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#215: FILE: block/elevator.c:780:
+EXPORT_SYMBOL(elv_queue_empty);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#242: FILE: block/elevator.c:1117:
+EXPORT_SYMBOL(elv_rb_former_request);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#254: FILE: block/elevator.c:1129:
+EXPORT_SYMBOL(elv_rb_latter_request);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#321: FILE: include/linux/elevator.h:99:
+extern void elv_merged_request(request_queue_t *, struct request *, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'request_queue_t *' should also have an identifier name
#321: FILE: include/linux/elevator.h:99:
+extern void elv_merged_request(request_queue_t *, struct request *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request *' should also have an identifier name
#321: FILE: include/linux/elevator.h:99:
+extern void elv_merged_request(request_queue_t *, struct request *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#321: FILE: include/linux/elevator.h:99:
+extern void elv_merged_request(request_queue_t *, struct request *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#331: FILE: include/linux/elevator.h:132:
+extern struct request *elv_rb_former_request(request_queue_t *, struct request *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'request_queue_t *' should also have an identifier name
#331: FILE: include/linux/elevator.h:132:
+extern struct request *elv_rb_former_request(request_queue_t *, struct request *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request *' should also have an identifier name
#331: FILE: include/linux/elevator.h:132:
+extern struct request *elv_rb_former_request(request_queue_t *, struct request *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#332: FILE: include/linux/elevator.h:133:
+extern struct request *elv_rb_latter_request(request_queue_t *, struct request *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'request_queue_t *' should also have an identifier name
#332: FILE: include/linux/elevator.h:133:
+extern struct request *elv_rb_latter_request(request_queue_t *, struct request *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request *' should also have an identifier name
#332: FILE: include/linux/elevator.h:133:
+extern struct request *elv_rb_latter_request(request_queue_t *, struct request *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#337: FILE: include/linux/elevator.h:138:
+extern struct request *elv_rb_add(struct rb_root *, struct request *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rb_root *' should also have an identifier name
#337: FILE: include/linux/elevator.h:138:
+extern struct request *elv_rb_add(struct rb_root *, struct request *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request *' should also have an identifier name
#337: FILE: include/linux/elevator.h:138:
+extern struct request *elv_rb_add(struct rb_root *, struct request *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#338: FILE: include/linux/elevator.h:139:
+extern void elv_rb_del(struct rb_root *, struct request *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rb_root *' should also have an identifier name
#338: FILE: include/linux/elevator.h:139:
+extern void elv_rb_del(struct rb_root *, struct request *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request *' should also have an identifier name
#338: FILE: include/linux/elevator.h:139:
+extern void elv_rb_del(struct rb_root *, struct request *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#339: FILE: include/linux/elevator.h:140:
+extern struct request *elv_rb_find(struct rb_root *, sector_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rb_root *' should also have an identifier name
#339: FILE: include/linux/elevator.h:140:
+extern struct request *elv_rb_find(struct rb_root *, sector_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'sector_t' should also have an identifier name
#339: FILE: include/linux/elevator.h:140:
+extern struct request *elv_rb_find(struct rb_root *, sector_t);

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.57477.commit.fe4afcfad471906110291ae0d80428121a8ccbc3 total: 0 errors, 29 warnings, 6 checks, 276 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.57477.commit.fe4afcfad471906110291ae0d80428121a8ccbc3 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
