WARNING:TYPO_SPELLING: 'havent' may be misspelled - perhaps 'haven't'?
#45: 
something i havent been able to do for years ;-)
            ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#239: FILE: fs/compat.c:1406:
+		if (MAX_ARG_STRLEN < len) {

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:TYPO_SPELLING: 'backwords' may be misspelled - perhaps 'backwards'?
#246: FILE: fs/compat.c:1411:
+		/* We're going to work our way backwords. */
 		                               ^^^^^^^^^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#312: FILE: fs/compat.c:1451:
+			if (copy_from_user(kaddr+offset, compat_ptr(str),
 			                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#313: FILE: fs/compat.c:1452:
+			if (copy_from_user(kaddr+offset, compat_ptr(str),
+						bytes_to_copy)) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#398: FILE: fs/compat.c:1529:
+	retval = search_binary_handler(bprm,regs);
 	                                   ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#422: FILE: fs/compat.c:1544:
+		mmput (bprm->mm);

WARNING:TYPO_SPELLING: 'fixe' may be misspelled - perhaps 'fixed'?
#437: FILE: fs/exec.c:180:
+	set.  Please fixe this or send me a machine which I can test this on. \
 	             ^^^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#443: FILE: fs/exec.c:186:
+ * vm_area_struct.  We don't have enough context at this point to set the$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#444: FILE: fs/exec.c:187:
+ * stack flags, permissions, and offset, so we use temporary values.  We'll$

CHECK:CAMELCASE: Avoid CamelCase: <We>
#444: FILE: fs/exec.c:187:
+ * stack flags, permissions, and offset, so we use temporary values.  We'll

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#445: FILE: fs/exec.c:188:
+ * update them later in setup_arg_pages(). */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#445: FILE: fs/exec.c:188:
+ * update them later in setup_arg_pages(). */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#472: FILE: fs/exec.c:215:
+		 * configured yet. */

CHECK:SPACING: spaces preferred around that '*' (ctx:WxO)
#472: FILE: fs/exec.c:215:
+		 * configured yet. */
 		                   ^

CHECK:SPACING: space preferred before that '/' (ctx:OxE)
#472: FILE: fs/exec.c:215:
+		 * configured yet. */
 		                    ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#478: FILE: fs/exec.c:221:
+		if ((err = insert_vm_struct(mm, vma))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#483: FILE: fs/exec.c:226:
+		mm->stack_vm = mm->total_vm = 1;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#505: FILE: fs/exec.c:248:
+EXPORT_SYMBOL(bprm_mm_init);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#541: FILE: fs/exec.c:298:
+		if (MAX_ARG_STRLEN < len) {

WARNING:TYPO_SPELLING: 'backwords' may be misspelled - perhaps 'backwards'?
#548: FILE: fs/exec.c:303:
+		/* We're going to work our way backwords. */
 		                               ^^^^^^^^^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#613: FILE: fs/exec.c:343:
+			if (copy_from_user(kaddr+offset, str, bytes_to_copy)) {
 			                        ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#699: FILE: fs/exec.c:386:
+	BUG_ON(stack_top > TASK_SIZE);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#700: FILE: fs/exec.c:387:
+	BUG_ON(stack_top & ~PAGE_MASK);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#741: FILE: fs/exec.c:389:
+	stack_base = arch_align_stack(stack_top - mm->stack_vm*PAGE_SIZE);
 	                                                      ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#750: FILE: fs/exec.c:393:
+	BUG_ON(stack_shift < 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#797: FILE: fs/exec.c:417:
+		ret = mprotect_fixup(vma, &prev, vma->vm_start, vma->vm_end,
+				vm_flags);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#805: FILE: fs/exec.c:422:
+		BUG_ON(prev != vma);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#810: FILE: fs/exec.c:427:
+			 * are shifting down. */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#812: FILE: fs/exec.c:429:
+			ret = move_vma(vma, vma->vm_start,
+					vma->vm_end - vma->vm_start,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#828: FILE: fs/exec.c:440:
+		BUG_ON(!vma || bprm->p < vma->vm_start);

ERROR:CODE_INDENT: code indent should use tabs where possible
#904: FILE: fs/exec.c:1034:
+^I        loader = bprm->vma->vm_end - sizeof(void *);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#973: FILE: fs/exec.c:1192:
+		mmput (bprm->mm);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1011: FILE: include/linux/binfmts.h:65:
+extern int __must_check remove_arg_zero(struct linux_binprm *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct linux_binprm *' should also have an identifier name
#1011: FILE: include/linux/binfmts.h:65:
+extern int __must_check remove_arg_zero(struct linux_binprm *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1019: FILE: include/linux/binfmts.h:82:
+extern int bprm_mm_init(struct linux_binprm *bprm);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1039: FILE: include/linux/mm.h:793:
+extern unsigned long move_vma(struct vm_area_struct *vma,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1040: FILE: include/linux/mm.h:794:
+extern unsigned long move_vma(struct vm_area_struct *vma,
+		unsigned long old_addr, unsigned long old_len,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1045: FILE: include/linux/mm.h:799:
+extern int mprotect_fixup(struct vm_area_struct *vma,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1061: FILE: kernel/auditsc.c:1760:
+	 * scenarios. */

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1062: FILE: kernel/auditsc.c:1761:
+#if 0

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1097: FILE: mm/mremap.c:159:
+unsigned long move_vma(struct vm_area_struct *vma,
 		unsigned long old_addr, unsigned long old_len,

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.05831.commit.19a48b7a9177c70b3b55c215e4fb740818a6e2c7 total: 3 errors, 23 warnings, 16 checks, 945 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.05831.commit.19a48b7a9177c70b3b55c215e4fb740818a6e2c7 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
