WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
The allocator abstraction layer provides sources of pages for the slabifier.

ERROR:BAD_SIGN_OFF: Unrecognized email address: 'Christoph Lameter <clameter>.'
#34: 
Signed-off-by: Christoph Lameter <clameter>.

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#51: FILE: include/linux/allocator.h:1:
+#ifndef _LINUX_ALLOCATOR_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct page_allocator *' should also have an identifier name
#75: FILE: include/linux/allocator.h:25:
+	struct page *(*allocate)(const struct page_allocator *, int order,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#76: FILE: include/linux/allocator.h:26:
+	struct page *(*allocate)(const struct page_allocator *, int order,
+		gfp_t mask, int node);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct page_allocator *' should also have an identifier name
#77: FILE: include/linux/allocator.h:27:
+	void (*free)(const struct page_allocator *, struct page *, int order);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#77: FILE: include/linux/allocator.h:27:
+	void (*free)(const struct page_allocator *, struct page *, int order);

WARNING:SPACING: Unnecessary space before function pointer arguments
#78: FILE: include/linux/allocator.h:28:
+	void (*destructor) (struct page_allocator *);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page_allocator *' should also have an identifier name
#78: FILE: include/linux/allocator.h:28:
+	void (*destructor) (struct page_allocator *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct page_allocator *' should also have an identifier name
#118: FILE: include/linux/allocator.h:68:
+struct page_allocator *ctor_and_dtor_for_page_allocator

ERROR:CODE_INDENT: code indent should use tabs where possible
#121: FILE: include/linux/allocator.h:71:
+                void (*dtor)(void *, void *, unsigned long));$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#121: FILE: include/linux/allocator.h:71:
+                void (*dtor)(void *, void *, unsigned long));$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#132: FILE: include/linux/allocator.h:82:
+struct page_allocator *numactl_allocator(const struct page_allocator *,
+						int node, gfp_t flags);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#143: FILE: include/linux/allocator.h:93:
+struct derived_page_allocator *derive_page_allocator(

CHECK:LINE_SPACING: Please don't use multiple blank lines
#150: FILE: include/linux/allocator.h:100:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct slab_allocator *' should also have an identifier name
#172: FILE: include/linux/allocator.h:122:
+	struct slab_cache *(*create)(const struct slab_allocator *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#173: FILE: include/linux/allocator.h:123:
+	struct slab_cache *(*create)(const struct slab_allocator *,
+		const struct page_allocator *a, int node, const char *name,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct slab_cache *' should also have an identifier name
#178: FILE: include/linux/allocator.h:128:
+	void *(*alloc)(struct slab_cache *, gfp_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gfp_t' should also have an identifier name
#178: FILE: include/linux/allocator.h:128:
+	void *(*alloc)(struct slab_cache *, gfp_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct slab_cache *' should also have an identifier name
#179: FILE: include/linux/allocator.h:129:
+	void *(*alloc_node)(struct slab_cache *, gfp_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gfp_t' should also have an identifier name
#179: FILE: include/linux/allocator.h:129:
+	void *(*alloc_node)(struct slab_cache *, gfp_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#179: FILE: include/linux/allocator.h:129:
+	void *(*alloc_node)(struct slab_cache *, gfp_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct slab_cache *' should also have an identifier name
#180: FILE: include/linux/allocator.h:130:
+	void (*free)(struct slab_cache *, const void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const void *' should also have an identifier name
#180: FILE: include/linux/allocator.h:130:
+	void (*free)(struct slab_cache *, const void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct slab_cache *' should also have an identifier name
#183: FILE: include/linux/allocator.h:133:
+	int (*valid_pointer)(struct slab_cache *, const void *object);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct slab_cache *' should also have an identifier name
#184: FILE: include/linux/allocator.h:134:
+	unsigned long (*object_size)(struct slab_cache *, const void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const void *' should also have an identifier name
#184: FILE: include/linux/allocator.h:134:
+	unsigned long (*object_size)(struct slab_cache *, const void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct slab_cache *' should also have an identifier name
#192: FILE: include/linux/allocator.h:142:
+	unsigned long (*objects)(struct slab_cache *, unsigned long *active,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#193: FILE: include/linux/allocator.h:143:
+	unsigned long (*objects)(struct slab_cache *, unsigned long *active,
+			unsigned long *partial);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct slab_cache *' should also have an identifier name
#209: FILE: include/linux/allocator.h:159:
+	int (*shrink)(struct slab_cache *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#210: FILE: include/linux/allocator.h:160:
+	int (*shrink)(struct slab_cache *,
+			int (*move_object)(struct slab_cache *, void *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct slab_cache *' should also have an identifier name
#217: FILE: include/linux/allocator.h:167:
+	struct slab_cache *(*node)(struct slab_cache *, int node);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct slab_cache *' should also have an identifier name
#223: FILE: include/linux/allocator.h:173:
+	struct slab_cache * (*dup)(struct slab_cache *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct slab_cache *' should also have an identifier name
#224: FILE: include/linux/allocator.h:174:
+	int (*destroy)(struct slab_cache *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct slab_allocator *' should also have an identifier name
#225: FILE: include/linux/allocator.h:175:
+	void (*destructor)(struct slab_allocator *);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#253: FILE: include/linux/allocator.h:203:
+static inline void slab_allocator_fill(struct slab_cache *sc,
+	const struct slab_allocator *slab_alloc,

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#280: FILE: include/linux/allocator.h:230:
+struct derived_slab_allocator *derive_slab_allocator(

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#289: FILE: mm/allocator.c:1:
+/*

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#315: FILE: mm/allocator.c:27:
+static struct page *gen_alloc(const struct page_allocator *a, int order,
+		gfp_t flags, int node)

ERROR:SPACING: spaces required around that '>=' (ctx:WxV)
#320: FILE: mm/allocator.c:32:
+	if (node >=0)
 	         ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#327: FILE: mm/allocator.c:39:
+static void gen_free(const struct page_allocator *a, struct page *page,
+							int order)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#343: FILE: mm/allocator.c:55:
+static struct page *vmalloc_alloc(const struct page_allocator *a, int order,
+		gfp_t flags, int node)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#350: FILE: mm/allocator.c:62:
+	else
[...]
+	addr = vmalloc(PAGE_SIZE << order);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#361: FILE: mm/allocator.c:73:
+static void vmalloc_free(const struct page_allocator *a,
+				 struct page *page, int order)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#414: FILE: mm/allocator.c:126:
+	struct page_allocator * base;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#417: FILE: mm/allocator.c:129:
+ ^Ipage = container_of((struct list_head *)h, struct page, lru);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#417: FILE: mm/allocator.c:129:
+ ^Ipage = container_of((struct list_head *)h, struct page, lru);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#417: FILE: mm/allocator.c:129:
+ ^Ipage = container_of((struct list_head *)h, struct page, lru);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#429: FILE: mm/allocator.c:141:
+static void rcu_free(const struct page_allocator *a, struct page *page,
+							 int order)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#453: FILE: mm/allocator.c:165:
+static struct page *dma_alloc(const struct page_allocator *a, int order,
+						gfp_t flags, int node)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#479: FILE: mm/allocator.c:191:
+	void (*ctor)(void *, void *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#479: FILE: mm/allocator.c:191:
+	void (*ctor)(void *, void *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#479: FILE: mm/allocator.c:191:
+	void (*ctor)(void *, void *, unsigned long);

ERROR:CODE_INDENT: code indent should use tabs where possible
#480: FILE: mm/allocator.c:192:
+        void (*dtor)(void *, void *, unsigned long);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#480: FILE: mm/allocator.c:192:
+        void (*dtor)(void *, void *, unsigned long);$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#480: FILE: mm/allocator.c:192:
+        void (*dtor)(void *, void *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#480: FILE: mm/allocator.c:192:
+        void (*dtor)(void *, void *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#480: FILE: mm/allocator.c:192:
+        void (*dtor)(void *, void *, unsigned long);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#484: FILE: mm/allocator.c:196:
+static struct page *ctor_alloc(const struct page_allocator *a,
+				int order, gfp_t flags, int node)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#487: FILE: mm/allocator.c:199:
+	struct page * page = d->base->allocate(d->base, order, flags, node);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#502: FILE: mm/allocator.c:214:
+static void dtor_free(const struct page_allocator *a,
+				struct page *page, int order)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#538: FILE: mm/allocator.c:250:
+
+

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#548: FILE: mm/allocator.c:260:
+void derived_slab_destructor(struct slab_allocator *a) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#555: FILE: mm/allocator.c:267:
+struct derived_slab_allocator *derive_slab_allocator(

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#555: FILE: mm/allocator.c:267:
+struct derived_slab_allocator *derive_slab_allocator(
+			const struct slab_allocator *base) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#589: FILE: mm/allocator.c:301:
+struct slab_cache *rcuify_slab_create(const struct slab_allocator *sa,
+	const struct page_allocator *pa, int node,

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#595: FILE: mm/allocator.c:307:
+	inuse = d->rcu_offset = ALIGN(inuse, sizeof(void *));

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:SPACING: No space is necessary after a cast
#606: FILE: mm/allocator.c:318:
+	struct slabr *r = (void *) rcu;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#632: FILE: mm/allocator.c:344:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#639: FILE: mm/allocator.c:351:
+struct slab_cache *dmaify_slab_create(const struct slab_allocator *s,
+		const struct page_allocator *a, int node, const char *name,

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#659: FILE: mm/allocator.c:371:
+#if 0

CHECK:CAMELCASE: Avoid CamelCase: <aL>
#676: FILE: mm/allocator.c:388:
+	return &d->aL;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:LINE_SPACING: Please don't use multiple blank lines
#699: FILE: mm/allocator.c:411:
+
+

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.47442.commit.ad461c693aedfc99b6e491958be32965f05b5322 total: 9 errors, 38 warnings, 26 checks, 649 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.47442.commit.ad461c693aedfc99b6e491958be32965f05b5322 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
