WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#45: 
#include <stdio.h>

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#46: 
#include <stdlib.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#47: 
#include <sched.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#48: 
#include <unistd.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#49: 
#include <string.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#50: 
#include <errno.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#52: 
#include <linux/unistd.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#54: 
#ifndef __NR_execns

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#55: 
#if __i386__

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#56: 
#    define __NR_execns 318

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#57: 
#elif __x86_64__

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#58: 
#    define __NR_execns 280

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#59: 
#elif __s390x__

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#60: 
#    define __NR_execns 310

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#61: 
#else

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#62: 
#    error "Architecture not supported"

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#63: 
#endif

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#64: 
#endif

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#66: 
static inline _syscall4(int,execns,int,flags,const char *,file,char **,argv,char **,envp)

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#68: 
#ifndef CLONE_NEWIPC

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#69: 
#define CLONE_NEWIPC	0x08000000

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#70: 
#endif

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#72: 
#ifndef CLONE_NEWUSER

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#73: 
#define CLONE_NEWUSER	0x10000000

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#74: 
#endif

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#144: FILE: fs/exec.c:809:
+static void flush_all_old_files(struct files_struct * files)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#160: FILE: fs/exec.c:1248:
+int do_execns(int unshare_flags, char * filename,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#161: FILE: fs/exec.c:1249:
+int do_execns(int unshare_flags, char * filename,
+	char __user *__user *argv,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#163: FILE: fs/exec.c:1251:
+	struct pt_regs * regs)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#194: FILE: fs/exec.c:1282:
+	if (new_uts || new_ipc) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#243: FILE: include/linux/sched.h:1338:
+extern int do_execns(int, char *, char __user * __user *, char __user * __user *, struct pt_regs *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#243: FILE: include/linux/sched.h:1338:
+extern int do_execns(int, char *, char __user * __user *, char __user * __user *, struct pt_regs *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#243: FILE: include/linux/sched.h:1338:
+extern int do_execns(int, char *, char __user * __user *, char __user * __user *, struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char __user * __user' should also have an identifier name
#243: FILE: include/linux/sched.h:1338:
+extern int do_execns(int, char *, char __user * __user *, char __user * __user *, struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char __user * __user' should also have an identifier name
#243: FILE: include/linux/sched.h:1338:
+extern int do_execns(int, char *, char __user * __user *, char __user * __user *, struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#243: FILE: include/linux/sched.h:1338:
+extern int do_execns(int, char *, char __user * __user *, char __user * __user *, struct pt_regs *);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#264: FILE: include/linux/syscalls.h:602:
+asmlinkage long sys_execns(int flags, char *name, char **argv, char **envp,
+			struct pt_regs regs);

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.58527.commit.e6d8ac2ce0cd9231dd2283eb22513c10c94c3276 total: 3 errors, 30 warnings, 4 checks, 125 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.58527.commit.e6d8ac2ce0cd9231dd2283eb22513c10c94c3276 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
