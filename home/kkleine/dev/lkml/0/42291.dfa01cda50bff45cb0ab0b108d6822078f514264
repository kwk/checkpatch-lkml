WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#53: FILE: fs/gfs2/daemon.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#83: FILE: fs/gfs2/daemon.c:31:
+/* This uses schedule_timeout() instead of msleep() because it's good for
+   the daemons to wake up more often than the timeout when unmounting so

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:TRAILING_WHITESPACE: trailing whitespace
#85: FILE: fs/gfs2/daemon.c:33:
+   $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#86: FILE: fs/gfs2/daemon.c:34:
+   The kthread functions used to start these daemons block and flush signals. */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#252: FILE: fs/gfs2/daemon.h:1:
+/*

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#274: FILE: fs/gfs2/lops.c:1:
+/*

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#391: FILE: fs/gfs2/lops.c:118:
+	unsigned n;

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#396: FILE: fs/gfs2/lops.c:123:
+	limit = (sdp->sd_sb.sb_bsize - offset)/sizeof(__be64);
 	                                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#399: FILE: fs/gfs2/lops.c:126:
+	bd1 = bd2 = list_prepare_entry(bd1, &sdp->sd_log_le_buf, bd_le.le_list);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:SPACING: space required before the open parenthesis '('
#400: FILE: fs/gfs2/lops.c:127:
+	while(total) {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#478: FILE: fs/gfs2/lops.c:205:
+	uint64_t blkno;

ERROR:CODE_INDENT: code indent should use tabs where possible
#495: FILE: fs/gfs2/lops.c:222:
+                if (error)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#495: FILE: fs/gfs2/lops.c:222:
+                if (error)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#496: FILE: fs/gfs2/lops.c:223:
+                        return error;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#496: FILE: fs/gfs2/lops.c:223:
+                        return error;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#534: FILE: fs/gfs2/lops.c:261:
+^I        jd->jd_jid, sdp->sd_replayed_blocks, sdp->sd_found_blocks);$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#625: FILE: fs/gfs2/lops.c:352:
+	uint64_t blkno;

ERROR:CODE_INDENT: code indent should use tabs where possible
#676: FILE: fs/gfs2/lops.c:403:
+^I        jd->jd_jid, sdp->sd_found_revokes);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#697: FILE: fs/gfs2/lops.c:424:
+^Igfs2_log_unlock(sdp);^I$

WARNING:TYPO_SPELLING: 'thats' may be misspelled - perhaps 'that's'?
#778: FILE: fs/gfs2/lops.c:505:
+ * that any buffer thats been pinned is being journaled, and that
                    ^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#795: FILE: fs/gfs2/lops.c:522:
+	offset += (2*sizeof(__be64) - 1);
 	            ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#796: FILE: fs/gfs2/lops.c:523:
+	offset &= ~(2*sizeof(__be64) - 1);
 	             ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#797: FILE: fs/gfs2/lops.c:524:
+	limit = (sdp->sd_sb.sb_bsize - offset)/sizeof(__be64);
 	                                      ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#804: FILE: fs/gfs2/lops.c:531:
+	bd2 = bd1 = list_prepare_entry(bd1, &sdp->sd_log_le_databuf,

ERROR:SPACING: space required before the open parenthesis '('
#806: FILE: fs/gfs2/lops.c:533:
+	while(total_dbuf) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#820: FILE: fs/gfs2/lops.c:547:
+					bd2 = list_prepare_entry(bd2,
+							&sdp->sd_log_le_databuf,

WARNING:LINE_SPACING: Missing a blank line after declarations
#839: FILE: fs/gfs2/lops.c:566:
+				int magic;
+				gfs2_log_unlock(sdp);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#875: FILE: fs/gfs2/lops.c:602:
+					bd2 = list_prepare_entry(bd2,
+						&sdp->sd_log_le_databuf,

ERROR:CODE_INDENT: code indent should use tabs where possible
#877: FILE: fs/gfs2/lops.c:604:
+                                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#877: FILE: fs/gfs2/lops.c:604:
+                                }$

WARNING:LINE_SPACING: Missing a blank line after declarations
#898: FILE: fs/gfs2/lops.c:625:
+				struct page *page = bd2->bd_bh->b_page;
+				bh = gfs2_log_get_buf(sdp);

CHECK:BRACES: braces {} should be used on all arms of this statement
#928: FILE: fs/gfs2/lops.c:655:
+		if (bh) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#934: FILE: fs/gfs2/lops.c:661:
+		} else

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#953: FILE: fs/gfs2/lops.c:680:
+	uint64_t blkno;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#954: FILE: fs/gfs2/lops.c:681:
+	uint64_t esc;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1033: FILE: fs/gfs2/lops.c:760:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1088: FILE: fs/gfs2/lops.h:1:
+/*

WARNING:LINE_SPACING: Missing a blank line after declarations
#1125: FILE: fs/gfs2/lops.h:38:
+	int x;
+	for (x = 0; gfs2_log_ops[x]; x++)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1133: FILE: fs/gfs2/lops.h:46:
+	int x;
+	for (x = 0; gfs2_log_ops[x]; x++)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1141: FILE: fs/gfs2/lops.h:54:
+	int x;
+	for (x = 0; gfs2_log_ops[x]; x++)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1151: FILE: fs/gfs2/lops.h:64:
+	int x;
+	for (x = 0; gfs2_log_ops[x]; x++)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1162: FILE: fs/gfs2/lops.h:75:
+	int x, error;
+	for (x = 0; gfs2_log_ops[x]; x++)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1177: FILE: fs/gfs2/lops.h:90:
+	int x;
+	for (x = 0; gfs2_log_ops[x]; x++)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1187: FILE: fs/gfs2/main.c:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#1204: FILE: fs/gfs2/main.c:18:
+#include <asm/atomic.h>

WARNING:LINE_SPACING: Missing a blank line after declarations
#1216: FILE: fs/gfs2/main.c:30:
+	struct gfs2_inode *ip = foo;
+	if ((flags & (SLAB_CTOR_VERIFY|SLAB_CTOR_CONSTRUCTOR)) ==

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1216: FILE: fs/gfs2/main.c:30:
+	if ((flags & (SLAB_CTOR_VERIFY|SLAB_CTOR_CONSTRUCTOR)) ==
 	                              ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1228: FILE: fs/gfs2/main.c:42:
+	struct gfs2_glock *gl = foo;
+	if ((flags & (SLAB_CTOR_VERIFY|SLAB_CTOR_CONSTRUCTOR)) ==

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1228: FILE: fs/gfs2/main.c:42:
+	if ((flags & (SLAB_CTOR_VERIFY|SLAB_CTOR_CONSTRUCTOR)) ==
 	                              ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1264: FILE: fs/gfs2/main.c:78:
+^I^I^I^I^I      0, 0, $

CHECK:SPACING: space preferred before that '|' (ctx:VxE)
#1271: FILE: fs/gfs2/main.c:85:
+					      0, (SLAB_RECLAIM_ACCOUNT|
 					                              ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1272: FILE: fs/gfs2/main.c:86:
+					      SLAB_PANIC|SLAB_MEM_SPREAD),
 					                ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1279: FILE: fs/gfs2/main.c:93:
+^I^I^I^I^I        0, 0, NULL, NULL);$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1291: FILE: fs/gfs2/main.c:105:
+	printk("GFS2 (built %s %s) installed\n", __DATE__, __TIME__);

ERROR:DATE_TIME: Use of the '__DATE__' macro makes the build non-deterministic
#1291: FILE: fs/gfs2/main.c:105:
+	printk("GFS2 (built %s %s) installed\n", __DATE__, __TIME__);

It is generally desirable that building the same source code with
the same set of tools is reproducible, i.e. the output is always
exactly the same.

The kernel does *not* use the ``__DATE__`` and ``__TIME__`` macros,
and enables warnings if they are used as they can lead to
non-deterministic builds.

See: https://www.kernel.org/doc/html/latest/kbuild/reproducible-builds.html#timestamps

ERROR:DATE_TIME: Use of the '__TIME__' macro makes the build non-deterministic
#1291: FILE: fs/gfs2/main.c:105:
+	printk("GFS2 (built %s %s) installed\n", __DATE__, __TIME__);

WARNING:NEEDLESS_IF: kmem_cache_destroy(NULL) is safe and this check is probably not required
#1299: FILE: fs/gfs2/main.c:113:
+	if (gfs2_bufdata_cachep)
+		kmem_cache_destroy(gfs2_bufdata_cachep);

WARNING:NEEDLESS_IF: kmem_cache_destroy(NULL) is safe and this check is probably not required
#1302: FILE: fs/gfs2/main.c:116:
+	if (gfs2_inode_cachep)
+		kmem_cache_destroy(gfs2_inode_cachep);

WARNING:NEEDLESS_IF: kmem_cache_destroy(NULL) is safe and this check is probably not required
#1305: FILE: fs/gfs2/main.c:119:
+	if (gfs2_glock_cachep)
+		kmem_cache_destroy(gfs2_glock_cachep);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1338: FILE: fs/gfs2/meta_io.c:1:
+/*

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1427: FILE: fs/gfs2/meta_io.c:90:
+	iput(aspace);
 	^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1443: FILE: fs/gfs2/meta_io.c:106:
+	BUG_ON(!spin_is_locked(&sdp->sd_log_lock));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#1443: FILE: fs/gfs2/meta_io.c:106:
+	BUG_ON(!spin_is_locked(&sdp->sd_log_lock));

lockdep_assert_held() annotations should be preferred over
assertions based on spin_is_locked()

See: https://www.kernel.org/doc/html/latest/locking/lockdep-design.html#annotations

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1553: FILE: fs/gfs2/meta_io.c:216:
+	uint64_t blkno;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1643: FILE: fs/gfs2/meta_io.c:306:
+				  uint64_t blkno, int create)

WARNING:YIELD: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#1660: FILE: fs/gfs2/meta_io.c:323:
+			yield();

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 32)
#1672: FILE: fs/gfs2/meta_io.c:335:
+	for (bh = page_buffers(page); bufnum--; bh = bh->b_this_page)
+		/* Do nothing */;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1709: FILE: fs/gfs2/meta_io.c:372:
+	struct buffer_head *bh;
+	bh = getbuf(gl->gl_sbd, gl->gl_aspace, blkno, CREATE);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1762: FILE: fs/gfs2/meta_io.c:425:
+			struct gfs2_trans *tr = current->journal_info;
+			if (tr && tr->tr_touched)

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1800: FILE: fs/gfs2/meta_io.c:463:
+	if (meta) {
[...]
+	} else {
[...]

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1830: FILE: fs/gfs2/meta_io.c:493:
+	/* If this buffer is in the AIL and it has already been written
+	   to in-place disk block, remove it from the AIL. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1830: FILE: fs/gfs2/meta_io.c:493:
+	   to in-place disk block, remove it from the AIL. */

ERROR:CODE_INDENT: code indent should use tabs where possible
#1855: FILE: fs/gfs2/meta_io.c:518:
+^I        struct gfs2_ail *ai)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1855: FILE: fs/gfs2/meta_io.c:518:
+void gfs2_unpin(struct gfs2_sbd *sdp, struct buffer_head *bh,
+	        struct gfs2_ail *ai)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1873: FILE: fs/gfs2/meta_io.c:536:
+		struct gfs2_glock *gl = bd->bd_gl;
+		list_add(&bd->bd_ail_gl_list, &gl->gl_ail_list);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1902: FILE: fs/gfs2/meta_io.c:565:
+				struct gfs2_trans *tr = current->journal_info;
+				gfs2_log_lock(sdp);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1912: FILE: fs/gfs2/meta_io.c:575:
+				if (bd->bd_ail) {
[...]
+				} else
[...]

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1913: FILE: fs/gfs2/meta_io.c:576:
+					uint64_t blkno = bh->b_blocknr;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1914: FILE: fs/gfs2/meta_io.c:577:
+					uint64_t blkno = bh->b_blocknr;
+					bd->bd_ail = NULL;

CHECK:BRACES: Unbalanced braces around else statement
#1921: FILE: fs/gfs2/meta_io.c:584:
+				} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#1994: FILE: fs/gfs2/meta_io.c:657:
+		if (new)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1996: FILE: fs/gfs2/meta_io.c:659:
+		else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#2005: FILE: fs/gfs2/meta_io.c:668:
+		if (new)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2007: FILE: fs/gfs2/meta_io.c:670:
+		else {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2056: FILE: fs/gfs2/meta_io.c:719:
+	uint32_t max_ra = gfs2_tune_get(sdp, gt_max_readahead) >>

CHECK:BRACES: braces {} should be used on all arms of this statement
#2081: FILE: fs/gfs2/meta_io.c:744:
+		if (!buffer_uptodate(bh) && !buffer_locked(bh)) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2086: FILE: fs/gfs2/meta_io.c:749:
+		} else

WARNING:MSLEEP: msleep < 20ms can sleep for up to 20ms; see Documentation/timers/timers-howto.rst
#2113: FILE: fs/gfs2/meta_io.c:776:
+		msleep(10);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2120: FILE: fs/gfs2/meta_io.h:1:
+/*

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2139: FILE: fs/gfs2/meta_io.h:20:
+	BUG_ON(head > bh->b_size);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2148: FILE: fs/gfs2/meta_io.h:29:
+	BUG_ON(from_head < to_head);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2197: FILE: fs/gfs2/ondisk.c:1:
+/*

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2215: FILE: fs/gfs2/ondisk.c:19:
+#define pv(struct, member, fmt) printk(KERN_INFO "  "#member" = "fmt"\n", \

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'struct' may be better as '(struct)' to avoid precedence issues
#2215: FILE: fs/gfs2/ondisk.c:19:
+#define pv(struct, member, fmt) printk(KERN_INFO "  "#member" = "fmt"\n", \
+				       struct->member);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'member' may be better as '(member)' to avoid precedence issues
#2215: FILE: fs/gfs2/ondisk.c:19:
+#define pv(struct, member, fmt) printk(KERN_INFO "  "#member" = "fmt"\n", \
+				       struct->member);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2215: FILE: fs/gfs2/ondisk.c:19:
+#define pv(struct, member, fmt) printk(KERN_INFO "  "#member" = "fmt"\n", \
+				       struct->member);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#2215: FILE: fs/gfs2/ondisk.c:19:
+#define pv(struct, member, fmt) printk(KERN_INFO "  "#member" = "fmt"\n", \

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2249: FILE: fs/gfs2/ondisk.c:53:
+	printk(KERN_INFO "  no_formal_ino = %llu\n", (unsigned long long)no->no_formal_ino);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2250: FILE: fs/gfs2/ondisk.c:54:
+	printk(KERN_INFO "  no_addr = %llu\n", (unsigned long long)no->no_addr);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2306: FILE: fs/gfs2/ondisk.c:110:
+
+}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2310: FILE: fs/gfs2/ondisk.c:114:
+	printk(KERN_INFO "  ri_addr = %llu\n", (unsigned long long)ri->ri_addr);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2313: FILE: fs/gfs2/ondisk.c:117:
+	printk(KERN_INFO "  ri_data0 = %llu\n", (unsigned long long)ri->ri_data0);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2384: FILE: fs/gfs2/ondisk.c:188:
+
+}

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2418: FILE: fs/gfs2/ondisk.c:222:
+
+}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2429: FILE: fs/gfs2/ondisk.c:233:
+	printk(KERN_INFO "  di_size = %llu\n", (unsigned long long)di->di_size);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2430: FILE: fs/gfs2/ondisk.c:234:
+	printk(KERN_INFO "  di_blocks = %llu\n", (unsigned long long)di->di_blocks);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2431: FILE: fs/gfs2/ondisk.c:235:
+	printk(KERN_INFO "  di_atime = %lld\n", (long long)di->di_atime);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2432: FILE: fs/gfs2/ondisk.c:236:
+	printk(KERN_INFO "  di_mtime = %lld\n", (long long)di->di_mtime);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2433: FILE: fs/gfs2/ondisk.c:237:
+	printk(KERN_INFO "  di_ctime = %lld\n", (long long)di->di_ctime);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2437: FILE: fs/gfs2/ondisk.c:241:
+	printk(KERN_INFO "  di_goal_meta = %llu\n", (unsigned long long)di->di_goal_meta);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2438: FILE: fs/gfs2/ondisk.c:242:
+	printk(KERN_INFO "  di_goal_data = %llu\n", (unsigned long long)di->di_goal_data);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2447: FILE: fs/gfs2/ondisk.c:251:
+	printk(KERN_INFO "  di_eattr = %llu\n", (unsigned long long)di->di_eattr);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2508: FILE: fs/gfs2/ops_address.c:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2544: FILE: fs/gfs2/ops_address.c:37:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#2573: FILE: fs/gfs2/ops_address.c:66:
+^I           struct buffer_head *bh_result, int create)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2573: FILE: fs/gfs2/ops_address.c:66:
+int gfs2_get_block(struct inode *inode, sector_t lblock,
+	           struct buffer_head *bh_result, int create)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#2576: FILE: fs/gfs2/ops_address.c:69:
+	uint64_t dblock;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#2610: FILE: fs/gfs2/ops_address.c:103:
+	uint64_t dblock;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2647: FILE: fs/gfs2/ops_address.c:140:
+}
+/**

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2664: FILE: fs/gfs2/ops_address.c:157:
+	unsigned offset;

ERROR:CODE_INDENT: code indent should use tabs where possible
#2676: FILE: fs/gfs2/ops_address.c:169:
+        offset = i_size & (PAGE_CACHE_SIZE-1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2676: FILE: fs/gfs2/ops_address.c:169:
+        offset = i_size & (PAGE_CACHE_SIZE-1);$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2676: FILE: fs/gfs2/ops_address.c:169:
+        offset = i_size & (PAGE_CACHE_SIZE-1);
                                           ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2689: FILE: fs/gfs2/ops_address.c:182:
+					     (1 << BH_Dirty)|(1 << BH_Uptodate));
 					                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2691: FILE: fs/gfs2/ops_address.c:184:
+		gfs2_page_add_databufs(ip, page, 0, sdp->sd_vfs->s_blocksize-1);
 		                                                            ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2754: FILE: fs/gfs2/ops_address.c:247:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#2775: FILE: fs/gfs2/ops_address.c:268:
+			struct gfs2_file *gf = file->private_data;
+			if (test_bit(GFF_EXLOCK, &gf->f_flags))

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2778: FILE: fs/gfs2/ops_address.c:271:
+		gfs2_holder_init(ip->i_gl, LM_ST_SHARED, GL_ATIME|GL_AOP, &gh);
 		                                                 ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#2786: FILE: fs/gfs2/ops_address.c:279:
+	if (gfs2_is_stuffed(ip)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2789: FILE: fs/gfs2/ops_address.c:282:
+	} else

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2824: FILE: fs/gfs2/ops_address.c:317:
+			  struct list_head *pages, unsigned nr_pages)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2830: FILE: fs/gfs2/ops_address.c:323:
+	unsigned page_idx;

WARNING:LINE_SPACING: Missing a blank line after declarations
#2837: FILE: fs/gfs2/ops_address.c:330:
+			struct gfs2_file *gf = file->private_data;
+			if (test_bit(GFF_EXLOCK, &gf->f_flags))

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2841: FILE: fs/gfs2/ops_address.c:334:
+				 LM_FLAG_TRY_1CB|GL_ATIME|GL_AOP, &gh);
 				                ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2841: FILE: fs/gfs2/ops_address.c:334:
+				 LM_FLAG_TRY_1CB|GL_ATIME|GL_AOP, &gh);
 				                         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2844: FILE: fs/gfs2/ops_address.c:337:
+^I^Iif (ret == GLR_TRYFAILED) $

WARNING:LINE_SPACING: Missing a blank line after declarations
#2852: FILE: fs/gfs2/ops_address.c:345:
+		struct pagevec lru_pvec;
+		pagevec_init(&lru_pvec, 0);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2855: FILE: fs/gfs2/ops_address.c:348:
+			struct page *page = list_entry(pages->prev, struct page, lru);
+			prefetchw(&page->flags);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (32, 41)
#2861: FILE: fs/gfs2/ops_address.c:354:
+				if (!pagevec_add(&lru_pvec, page))
+					 __pagevec_lru_add(&lru_pvec);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2888: FILE: fs/gfs2/ops_address.c:381:
+		struct page *page = list_entry(pages->prev, struct page, lru);
+		list_del(&page->lru);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2908: FILE: fs/gfs2/ops_address.c:401:
+			      unsigned from, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2908: FILE: fs/gfs2/ops_address.c:401:
+			      unsigned from, unsigned to)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2919: FILE: fs/gfs2/ops_address.c:412:
+	gfs2_holder_init(ip->i_gl, LM_ST_EXCLUSIVE, GL_ATIME|GL_AOP, &ip->i_gh);
 	                                                    ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2930: FILE: fs/gfs2/ops_address.c:423:
+
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#2959: FILE: fs/gfs2/ops_address.c:452:
+		if (end > sdp->sd_sb.sb_bsize - sizeof(struct gfs2_dinode)) {
[...]
+		} else if (!PageUptodate(page))
[...]

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3001: FILE: fs/gfs2/ops_address.c:494:
+			     unsigned from, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3001: FILE: fs/gfs2/ops_address.c:494:
+			     unsigned from, unsigned to)

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#3008: FILE: fs/gfs2/ops_address.c:501:
+	struct gfs2_alloc *al = &ip->i_alloc;;

ERROR:CODE_INDENT: code indent should use tabs where possible
#3011: FILE: fs/gfs2/ops_address.c:504:
+                goto fail_nounlock;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3011: FILE: fs/gfs2/ops_address.c:504:
+                goto fail_nounlock;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#3020: FILE: fs/gfs2/ops_address.c:513:
+		uint64_t file_size;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3129: FILE: fs/gfs2/ops_address.c:622:
+	BUG_ON(!PageLocked(page));

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#3133: FILE: fs/gfs2/ops_address.c:626:
+	bh = head = page_buffers(page);

WARNING:LINE_SPACING: Missing a blank line after declarations
#3136: FILE: fs/gfs2/ops_address.c:629:
+		unsigned int next_off = curr_off + bh->b_size;
+		next = bh->b_this_page;

WARNING:RETURN_VOID: void function return statements are not generally useful
#3149: FILE: fs/gfs2/ops_address.c:642:
+	return;
+}

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3212: FILE: fs/gfs2/ops_address.c:705:
+static unsigned limit = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#3212: FILE: fs/gfs2/ops_address.c:705:
+static unsigned limit = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3228: FILE: fs/gfs2/ops_address.c:721:
+^Ifs_warn(sdp, "gl = (%u, %llu)\n", $

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#3274: FILE: fs/gfs2/ops_address.c:767:
+	head = bh = page_buffers(page);

WARNING:YIELD: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#3286: FILE: fs/gfs2/ops_address.c:779:
+			yield();

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3330: FILE: fs/gfs2/ops_address.h:1:
+/*

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3343: FILE: fs/gfs2/ops_address.h:14:
+extern int gfs2_get_block(struct inode *inode, sector_t lblock,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3345: FILE: fs/gfs2/ops_address.h:16:
+extern int gfs2_releasepage(struct page *page, gfp_t gfp_mask);

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.42291.commit.dfa01cda50bff45cb0ab0b108d6822078f514264 total: 20 errors, 83 warnings, 60 checks, 3268 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.42291.commit.dfa01cda50bff45cb0ab0b108d6822078f514264 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
