ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#198: FILE: drivers/net/s2io.c:6083:
+static int s2io_add_isr(nic_t * sp)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#206: FILE: drivers/net/s2io.c:6086:
+	struct net_device *dev = (struct net_device *) sp->dev;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#239: FILE: drivers/net/s2io.c:6103:
+		err = request_irq((int) sp->pdev->irq, s2io_msi_handle,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#240: FILE: drivers/net/s2io.c:6104:
+		err = request_irq((int) sp->pdev->irq, s2io_msi_handle,
+			SA_SHIRQ, sp->name, dev);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#252: FILE: drivers/net/s2io.c:6115:
+		for (i=1; (sp->s2io_entries[i].in_use == MSIX_FLG); i++) {
 		      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#257: FILE: drivers/net/s2io.c:6120:
+				err = request_irq(sp->entries[i].vector,
+					  s2io_msix_fifo_handle, 0, sp->desc[i],

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#260: FILE: drivers/net/s2io.c:6123:
+				DBG_PRINT(ERR_DBG, "%s @ 0x%llx\n", sp->desc[i],
+				(unsigned long long)sp->msix_info[i].addr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#265: FILE: drivers/net/s2io.c:6128:
+				err = request_irq(sp->entries[i].vector,
+					  s2io_msix_ring_handle, 0, sp->desc[i],

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#268: FILE: drivers/net/s2io.c:6131:
+				DBG_PRINT(ERR_DBG, "%s @ 0x%llx\n", sp->desc[i],
+				(unsigned long long)sp->msix_info[i].addr);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#279: FILE: drivers/net/s2io.c:6134:
+				DBG_PRINT(ERR_DBG,"%s:MSI-X-%d registration "
 				                 ^

WARNING:SPLIT_STRING: quoted string split across lines
#280: FILE: drivers/net/s2io.c:6135:
+				DBG_PRINT(ERR_DBG,"%s:MSI-X-%d registration "
+					  "failed\n", dev->name, i);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:SPACING: No space is necessary after a cast
#288: FILE: drivers/net/s2io.c:6143:
+		err = request_irq((int) sp->pdev->irq, s2io_isr, SA_SHIRQ,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#289: FILE: drivers/net/s2io.c:6144:
+		err = request_irq((int) sp->pdev->irq, s2io_isr, SA_SHIRQ,
+				sp->name, dev);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#298: FILE: drivers/net/s2io.c:6153:
+}
+static void s2io_rem_isr(nic_t * sp)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#298: FILE: drivers/net/s2io.c:6153:
+static void s2io_rem_isr(nic_t * sp)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#307: FILE: drivers/net/s2io.c:6162:
+		for (i=1; (sp->s2io_entries[i].in_use ==
 		      ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#337: FILE: drivers/net/s2io.c:6195:
+static void s2io_card_down(nic_t * sp)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around sp->link_state
#346: FILE: drivers/net/s2io.c:6204:
+	while (test_and_set_bit(0, &(sp->link_state))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:BRACES: braces {} are not necessary for single statement blocks
#346: FILE: drivers/net/s2io.c:6204:
+	while (test_and_set_bit(0, &(sp->link_state))) {
+		msleep(50);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#413: FILE: drivers/net/s2io.c:6324:
+	tasklet_init(&sp->task, s2io_tasklet, (unsigned long) dev);

CHECK:BRACES: braces {} should be used on all arms of this statement
#416: FILE: drivers/net/s2io.c:6327:
+	if (sp->intr_type != INTA)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#418: FILE: drivers/net/s2io.c:6329:
+	else {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#425: FILE: drivers/net/s2io.c:6336:
+
+

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.66647.commit.d857e4f749f37d9e481de9ecdaccba7a63612c77 total: 6 errors, 2 warnings, 15 checks, 400 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.66647.commit.d857e4f749f37d9e481de9ecdaccba7a63612c77 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
