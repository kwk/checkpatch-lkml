WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#41: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#46: FILE: fs/unionfs/lookup.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#69: FILE: fs/unionfs/lookup.c:24:
+struct dentry *unionfs_lookup_backend(struct dentry *dentry, struct nameidata *nd,
                                                                                ^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:BRACES: Unbalanced braces around else statement
#97: FILE: fs/unionfs/lookup.c:52:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#98: FILE: fs/unionfs/lookup.c:53:
+		BUG_ON(UNIONFS_D(dentry) != NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "UNIONFS_D"
#98: FILE: fs/unionfs/lookup.c:53:
+		BUG_ON(UNIONFS_D(dentry) != NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#102: FILE: fs/unionfs/lookup.c:57:
+		if ((err = new_dentry_private_data(dentry)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#131: FILE: fs/unionfs/lookup.c:86:
+	BUG_ON(bstart < 0);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bopaque < bend'
#139: FILE: fs/unionfs/lookup.c:94:
+		if ((bopaque != -1) && (bopaque < bend))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#147: FILE: fs/unionfs/lookup.c:102:
+		BUG_ON(hidden_dentry != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "hidden_dentry"
#147: FILE: fs/unionfs/lookup.c:102:
+		BUG_ON(hidden_dentry != NULL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#187: FILE: fs/unionfs/lookup.c:142:
+			printk(KERN_NOTICE "EIO: Invalid whiteout entry type"

WARNING:SPLIT_STRING: quoted string split across lines
#188: FILE: fs/unionfs/lookup.c:143:
+			printk(KERN_NOTICE "EIO: Invalid whiteout entry type"
+			       " %d.\n", wh_hidden_dentry->d_inode->i_mode);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#204: FILE: fs/unionfs/lookup.c:159:
+					       namelen, nd);
 					                ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#204: FILE: fs/unionfs/lookup.c:159:
+		hidden_dentry = lookup_one_len_nd(name, hidden_dir_dentry,
+					       namelen, nd);

CHECK:BRACES: braces {} should be used on all arms of this statement
#216: FILE: fs/unionfs/lookup.c:171:
+			if (!first_hidden_dentry && (dbstart(dentry) == -1)) {
[...]
+			} else
[...]

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#221: FILE: fs/unionfs/lookup.c:176:
+				first_hidden_mnt = mntget(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#223: FILE: fs/unionfs/lookup.c:178:
+					unionfs_lower_mnt_idx(parent_dentry,
+								bindex));

CHECK:BRACES: Unbalanced braces around else statement
#225: FILE: fs/unionfs/lookup.c:180:
+			} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#242: FILE: fs/unionfs/lookup.c:197:
+		unionfs_set_lower_mnt_idx(dentry, bindex,
+			mntget(unionfs_lower_mnt_idx(parent_dentry, bindex)));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#247: FILE: fs/unionfs/lookup.c:202:
+		fsstack_copy_attr_atime(parent_dentry->d_inode,
+				     hidden_dir_dentry->d_inode);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#256: FILE: fs/unionfs/lookup.c:211:
+			BUG_ON(!S_ISDIR(unionfs_lower_dentry(dentry)->d_inode->i_mode));

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#296: FILE: fs/unionfs/lookup.c:251:
+						     namelen, nd);
 						              ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#296: FILE: fs/unionfs/lookup.c:251:
+		first_hidden_dentry = lookup_one_len_nd(name, hidden_dir_dentry,
+						     namelen, nd);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#302: FILE: fs/unionfs/lookup.c:257:
+^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#314: FILE: fs/unionfs/lookup.c:269:
+		BUG_ON(dentry->d_inode != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "dentry->d_inode"
#314: FILE: fs/unionfs/lookup.c:269:
+		BUG_ON(dentry->d_inode != NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#321: FILE: fs/unionfs/lookup.c:276:
+	BUG_ON(dentry_count <= 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#372: FILE: fs/unionfs/lookup.c:327:
+		BUG_ON(dbend(dentry) > UNIONFS_D(dentry)->bcount);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#373: FILE: fs/unionfs/lookup.c:328:
+		BUG_ON(dbend(dentry) > sbmax(dentry->d_sb));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#374: FILE: fs/unionfs/lookup.c:329:
+		BUG_ON(dbstart(dentry) < 0);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#389: FILE: fs/unionfs/lookup.c:344:
+	struct nameidata nd = { .flags = 0 };
 	                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#391: FILE: fs/unionfs/lookup.c:346:
+	tmp = unionfs_lookup_backend(dentry, &nd, INTERPOSE_PARTIAL);
 	                                      ^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#397: FILE: fs/unionfs/lookup.c:352:
+	BUG_ON(tmp != dentry);

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#398: FILE: fs/unionfs/lookup.c:353:
+	return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#413: FILE: fs/unionfs/lookup.c:368:
+	BUG_ON(!S_ISDIR(hidden_inode->i_mode));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#419: FILE: fs/unionfs/lookup.c:374:
+		wh_hidden_dentry = lookup_one_len(UNIONFS_DIR_OPAQUE, hidden_dentry,
+					sizeof(UNIONFS_DIR_OPAQUE) - 1);

CHECK:BRACES: Unbalanced braces around else statement
#420: FILE: fs/unionfs/lookup.c:375:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#457: FILE: fs/unionfs/lookup.c:412:
+	unionfs_dentry_cachep = kmem_cache_create("unionfs_dentry",
+					sizeof(struct unionfs_dentry_info), 0,

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#460: FILE: fs/unionfs/lookup.c:415:
+	return (unionfs_dentry_cachep ? 0 : -ENOMEM);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

WARNING:NEEDLESS_IF: kmem_cache_destroy(NULL) is safe and this check is probably not required
#466: FILE: fs/unionfs/lookup.c:421:
+	if (unionfs_dentry_cachep)
+		kmem_cache_destroy(unionfs_dentry_cachep);

CHECK:BRACES: braces {} should be used on all arms of this statement
#484: FILE: fs/unionfs/lookup.c:439:
+	if (!info) {
[...]
+	} else
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#486: FILE: fs/unionfs/lookup.c:441:
+		dentry->d_fsdata = kmem_cache_alloc(unionfs_dentry_cachep,
+						GFP_ATOMIC);

CHECK:BRACES: Unbalanced braces around else statement
#494: FILE: fs/unionfs/lookup.c:449:
+	} else

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'oldsize < newsize'
#512: FILE: fs/unionfs/lookup.c:467:
+		if (!newsize || ((oldsize < newsize) && (newsize > minsize))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'newsize > minsize'
#512: FILE: fs/unionfs/lookup.c:467:
+		if (!newsize || ((oldsize < newsize) && (newsize > minsize))) {

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.03540.commit.9f1d92ee63d92687754589c8ab59bbeef4fe490b total: 3 errors, 22 warnings, 21 checks, 516 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.03540.commit.9f1d92ee63d92687754589c8ab59bbeef4fe490b has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
