WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#30: 
In order to provide robust networked block devices there must be a guarantee

WARNING:REPEATED_WORD: Possible repeated word: 'with'
#48: 
is a promise the socket will never block on receive. Along with with a memory

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#116: FILE: include/linux/gfp.h:58:
+			__GFP_NOMEMALLOC|__GFP_HARDWALL|__GFP_EMERGENCY)
 			                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#116: FILE: include/linux/gfp.h:58:
+			__GFP_NOMEMALLOC|__GFP_HARDWALL|__GFP_EMERGENCY)
 			                               ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#222: FILE: include/net/sock.h:443:
+extern void * sk_emergency_rx_alloc(size_t size, gfp_t gfp_mask);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#222: FILE: include/net/sock.h:443:
+extern void * sk_emergency_rx_alloc(size_t size, gfp_t gfp_mask);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#230: FILE: include/net/sock.h:451:
+extern void sk_adjust_memalloc(int socks, int tx_reserve_pages);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#231: FILE: include/net/sock.h:452:
+extern int sk_set_vmio(struct sock *sk);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#232: FILE: include/net/sock.h:453:
+extern int sk_clear_vmio(struct sock *sk);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#256: FILE: mm/page_alloc.c:976:
+	if ((((p->flags & PF_MEMALLOC) || unlikely(test_thread_flag(TIF_MEMDIE)))
+			&& !in_interrupt()) || (gfp_mask & __GFP_EMERGENCY)) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#265: FILE: mm/page_alloc.c:2201:
+	unsigned pages_min = (min_free_kbytes + var_free_kbytes)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#287: FILE: mm/page_alloc.c:2276:
+	BUG_ON(var_free_kbytes < 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LINE_SPACING: Missing a blank line after declarations
#291: FILE: mm/page_alloc.c:2280:
+		struct zone *zone;
+		for_each_zone(zone)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#295: FILE: mm/page_alloc.c:2284:
+		printk(KERN_DEBUG "Emergency reserve: %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#296: FILE: mm/page_alloc.c:2285:
+		printk(KERN_DEBUG "Emergency reserve: %d\n",
+				var_free_kbytes);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#299: FILE: mm/page_alloc.c:2288:
+EXPORT_SYMBOL_GPL(adjust_memalloc_reserve);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#372: FILE: net/core/skbuff.c:204:
+	skb = sk_emergency_rx_alloc(kmem_cache_size(cache),
+			gfp_mask | __GFP_EMERGENCY);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#377: FILE: net/core/skbuff.c:209:
+	data = sk_emergency_rx_alloc(size + sizeof(struct skb_shared_info),
+			gfp_mask | __GFP_EMERGENCY);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#405: FILE: net/core/skbuff.c:343:
+			sk_emergency_rx_free(skb->head,
+					(skb->end - skb->head) +

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#469: FILE: net/core/skbuff.c:476:
+		n = sk_emergency_rx_alloc(kmem_cache_size(skbuff_head_cache),
+				gfp_mask | __GFP_EMERGENCY);

CHECK:BRACES: braces {} should be used on all arms of this statement
#489: FILE: net/core/skbuff.c:736:
+	if (skb->emergency) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#491: FILE: net/core/skbuff.c:738:
+		data = sk_emergency_rx_alloc(size + sizeof(struct skb_shared_info),
+				gfp_mask | __GFP_EMERGENCY);

CHECK:BRACES: Unbalanced braces around else statement
#494: FILE: net/core/skbuff.c:741:
+	} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#587: FILE: net/core/sock.c:224:
+		BUG_ON(nr_socks < 0);

WARNING:LINE_SPACING: Missing a blank line after declarations
#609: FILE: net/core/sock.c:246:
+	int set = sock_flag(sk, SOCK_VMIO);
+	if (!set) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#621: FILE: net/core/sock.c:258:
+	int set = sock_flag(sk, SOCK_VMIO);
+	if (set) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#630: FILE: net/core/sock.c:267:
+void * sk_emergency_rx_alloc(size_t size, gfp_t gfp_mask)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#632: FILE: net/core/sock.c:269:
+	void * page = NULL;

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.38946.commit.ba691af6d9dfda04ab4da0baba6bedba78499688 total: 3 errors, 10 warnings, 15 checks, 527 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.38946.commit.ba691af6d9dfda04ab4da0baba6bedba78499688 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
