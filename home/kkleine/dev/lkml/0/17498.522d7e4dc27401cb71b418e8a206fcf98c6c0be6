WARNING:TYPO_SPELLING: 'implemention' may be misspelled - perhaps 'implementation'?
#46: 
It currently includes a new gettimeofday implemention and optimized
                                         ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#233: FILE: arch/x86_64/mm/init.c:156:
+set_kernel_map(void *vaddr,unsigned long len,unsigned long phys,pgprot_t prot)
                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#233: FILE: arch/x86_64/mm/init.c:156:
+set_kernel_map(void *vaddr,unsigned long len,unsigned long phys,pgprot_t prot)
                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#233: FILE: arch/x86_64/mm/init.c:156:
+set_kernel_map(void *vaddr,unsigned long len,unsigned long phys,pgprot_t prot)
                                                                ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#236: FILE: arch/x86_64/mm/init.c:159:
+	void *end = vaddr + ALIGN(len, PAGE_SIZE);
+	for (; vaddr < end; vaddr += PAGE_SIZE, phys += PAGE_SIZE)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#261: FILE: arch/x86_64/vdso/vdso-note.S:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#291: FILE: arch/x86_64/vdso/vdso.lds.S:1:
+/*

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#424: FILE: arch/x86_64/vdso/vclock_gettime.c:1:
+/*

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#442: FILE: arch/x86_64/vdso/vclock_gettime.c:19:
+#include <asm/io.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#468: FILE: arch/x86_64/vdso/vclock_gettime.c:45:
+/* noinline to get only a single patch point for CPUID. Besides
+   it saves icache. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#468: FILE: arch/x86_64/vdso/vclock_gettime.c:45:
+   it saves icache. */

WARNING:LINE_SPACING: Missing a blank line after declarations
#472: FILE: arch/x86_64/vdso/vclock_gettime.c:49:
+	unsigned long nsec = vdso_xtime->tv_nsec;
+	if (vdso_vxtime->mode == VXTIME_HPET) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#475: FILE: arch/x86_64/vdso/vclock_gettime.c:52:
+		long count = hpet_readl(HPET_COUNTER);
+		nsec += vhpet_2_ns(count - vdso_vxtime->last);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#479: FILE: arch/x86_64/vdso/vclock_gettime.c:56:
+		/* Synchronize the pipeline on CPUs where RDTSC can be
+		   speculated to avoid non monoticities. Normal alternative

ERROR:CODE_INDENT: code indent should use tabs where possible
#481: FILE: arch/x86_64/vdso/vclock_gettime.c:58:
+^I           by hand in vma.c */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#481: FILE: arch/x86_64/vdso/vclock_gettime.c:58:
+	           by hand in vma.c */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#482: FILE: arch/x86_64/vdso/vclock_gettime.c:59:
+		unsigned eax;

WARNING:LINE_SPACING: Missing a blank line after declarations
#483: FILE: arch/x86_64/vdso/vclock_gettime.c:60:
+		unsigned eax;
+		asm volatile(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#483: FILE: arch/x86_64/vdso/vclock_gettime.c:60:
+		asm volatile(

ERROR:CODE_INDENT: code indent should use tabs where possible
#485: FILE: arch/x86_64/vdso/vclock_gettime.c:62:
+^I^I        "vdso_sync_cpuid: cpuid"$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#488: FILE: arch/x86_64/vdso/vclock_gettime.c:65:
+			: "ebx","ecx","edx","memory");
 			       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#488: FILE: arch/x86_64/vdso/vclock_gettime.c:65:
+			: "ebx","ecx","edx","memory");
 			             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#488: FILE: arch/x86_64/vdso/vclock_gettime.c:65:
+			: "ebx","ecx","edx","memory");
 			                   ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#492: FILE: arch/x86_64/vdso/vclock_gettime.c:69:
+		/* Mostly broken hack to handle unsynchronized TSCs
+		   that should go away. Really need per CPU

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#494: FILE: arch/x86_64/vdso/vclock_gettime.c:71:
+		   machines which are known to do this. */

WARNING:LINE_SPACING: Missing a blank line after declarations
#506: FILE: arch/x86_64/vdso/vclock_gettime.c:83:
+	unsigned long seq;
+	do {

WARNING:LINE_SPACING: Missing a blank line after declarations
#517: FILE: arch/x86_64/vdso/vclock_gettime.c:94:
+	unsigned long seq;
+	do {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#541: FILE: arch/x86_64/vdso/vclock_gettime.c:118:
+	    "0" (__NR_clock_gettime),"D" (clock), "S" (ts));
 	                            ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#544: FILE: arch/x86_64/vdso/vclock_gettime.c:121:
+}
+int clock_gettime(clockid_t, struct timespec *)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#545: FILE: arch/x86_64/vdso/vclock_gettime.c:122:
+	__attribute__((weak, alias("__vdso_clock_gettime")));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __alias("__vdso_clock_gettime") over __attribute__((alias("__vdso_clock_gettime")))
#545: FILE: arch/x86_64/vdso/vclock_gettime.c:122:
+	__attribute__((weak, alias("__vdso_clock_gettime")));

WARNING:LINE_SPACING: Missing a blank line after declarations
#550: FILE: arch/x86_64/vdso/vclock_gettime.c:127:
+	long ret;
+	if (likely(*vdso_sysctl_vsyscall)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "tz"
#556: FILE: arch/x86_64/vdso/vclock_gettime.c:133:
+		if (unlikely(tz != NULL)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#558: FILE: arch/x86_64/vdso/vclock_gettime.c:135:
+			/* This relies on gcc inlining the memcpy. We'll notice
+			   if it ever fails to do so. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#558: FILE: arch/x86_64/vdso/vclock_gettime.c:135:
+			   if it ever fails to do so. */

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#567: FILE: arch/x86_64/vdso/vclock_gettime.c:144:
+}
+int gettimeofday(struct timeval *, struct timezone *)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#568: FILE: arch/x86_64/vdso/vclock_gettime.c:145:
+	__attribute__((weak, alias("__vdso_gettimeofday")));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __alias("__vdso_gettimeofday") over __attribute__((alias("__vdso_gettimeofday")))
#568: FILE: arch/x86_64/vdso/vclock_gettime.c:145:
+	__attribute__((weak, alias("__vdso_gettimeofday")));

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#574: FILE: arch/x86_64/vdso/vma.c:1:
+/*

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#584: FILE: arch/x86_64/vdso/vma.c:11:
+#define VEXTERN(x) extern typeof(__ ## x) *vdso_ ## x;

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#584: FILE: arch/x86_64/vdso/vma.c:11:
+#define VEXTERN(x) extern typeof(__ ## x) *vdso_ ## x;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#595: FILE: arch/x86_64/vdso/vma.c:22:
+extern unsigned short vdso_sync_cpuid;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#599: FILE: arch/x86_64/vdso/vma.c:26:
+	set_kernel_map(vdso_kernel_start, vdso_end-vdso_start,
 	                                          ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#601: FILE: arch/x86_64/vdso/vma.c:28:
+#define VEXTERN(x) check(#x, (unsigned long)vdso_ ## x); vdso_ ## x = &__ ## x;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#601: FILE: arch/x86_64/vdso/vma.c:28:
+#define VEXTERN(x) check(#x, (unsigned long)vdso_ ## x); vdso_ ## x = &__ ## x;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#606: FILE: arch/x86_64/vdso/vma.c:33:
+	/* Remove pipeline synchronization on CPUs which have synchronized
+	   RDTSC like Intel Netburst.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#609: FILE: arch/x86_64/vdso/vma.c:36:
+	   into the main kernel image. So do it by hand instead. -AK */

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#611: FILE: arch/x86_64/vdso/vma.c:38:
+		printk("vdso_sync_cpuid %p:%x\n", &vdso_sync_cpuid, vdso_sync_cpuid);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#612: FILE: arch/x86_64/vdso/vma.c:39:
+^I^Ivdso_sync_cpuid = 0x9090; ^I/* NOP it out */$

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#617: FILE: arch/x86_64/vdso/vma.c:44:
+__initcall(init_vdso_vars);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#620: FILE: arch/x86_64/vdso/vma.c:47:
+static struct page *syscall_nopage(struct vm_area_struct *vma,
+				unsigned long adr, int *type)

WARNING:LINE_SPACING: Missing a blank line after declarations
#623: FILE: arch/x86_64/vdso/vma.c:50:
+	struct page *p = virt_to_page(adr - vma->vm_start + vdso_start);
+	get_page(p);

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#632: FILE: arch/x86_64/vdso/vma.c:59:
+static struct vm_operations_struct syscall_vm_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#666: FILE: arch/x86_64/vdso/vma.c:93:
+	vma->vm_flags = VM_READ|VM_EXEC|VM_MAYREAD|VM_MAYEXEC|VM_MAYWRITE;
 	                       ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#666: FILE: arch/x86_64/vdso/vma.c:93:
+	vma->vm_flags = VM_READ|VM_EXEC|VM_MAYREAD|VM_MAYEXEC|VM_MAYWRITE;
 	                               ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#666: FILE: arch/x86_64/vdso/vma.c:93:
+	vma->vm_flags = VM_READ|VM_EXEC|VM_MAYREAD|VM_MAYEXEC|VM_MAYWRITE;
 	                                          ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#666: FILE: arch/x86_64/vdso/vma.c:93:
+	vma->vm_flags = VM_READ|VM_EXEC|VM_MAYREAD|VM_MAYEXEC|VM_MAYWRITE;
 	                                                     ^

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#687: FILE: arch/x86_64/vdso/vma.c:114:
+	vdso_enabled = simple_strtoul(s, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#690: FILE: arch/x86_64/vdso/vma.c:117:
+__setup("vdso=", vdso_setup);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#696: FILE: arch/x86_64/vdso/vdso.S:1:
+	.section ".vdso","a"

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#703: FILE: arch/x86_64/vdso/vdso-start.S:1:
+	.globl vdso_kernel_start

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#727: FILE: include/asm-x86_64/pgtable.h:422:
+extern void set_kernel_map(void *vaddr, unsigned long len,

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#761: FILE: include/asm-x86_64/vsyscall.h:26:
+#define __section_wall_to_monotonic __attribute__ ((unused, __section__ (".wall_to_monotonic"), aligned(16)))

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#761: FILE: include/asm-x86_64/vsyscall.h:26:
+#define __section_wall_to_monotonic __attribute__ ((unused, __section__ (".wall_to_monotonic"), aligned(16)))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#761: FILE: include/asm-x86_64/vsyscall.h:26:
+#define __section_wall_to_monotonic __attribute__ ((unused, __section__ (".wall_to_monotonic"), aligned(16)))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".wall_to_monotonic") over __attribute__((__section__(".wall_to_monotonic")))
#761: FILE: include/asm-x86_64/vsyscall.h:26:
+#define __section_wall_to_monotonic __attribute__ ((unused, __section__ (".wall_to_monotonic"), aligned(16)))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(16) over __attribute__((aligned(16)))
#761: FILE: include/asm-x86_64/vsyscall.h:26:
+#define __section_wall_to_monotonic __attribute__ ((unused, __section__ (".wall_to_monotonic"), aligned(16)))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: __always_unused or __maybe_unused is preferred over __attribute__((__unused__))
#761: FILE: include/asm-x86_64/vsyscall.h:26:
+#define __section_wall_to_monotonic __attribute__ ((unused, __section__ (".wall_to_monotonic"), aligned(16)))

WARNING:TYPO_SPELLING: 'arbitralrily' may be misspelled - perhaps 'arbitrarily'?
#822: FILE: include/asm-x86_64/timex.h:54:
+#define US_SCALE	32 /* 2^32, arbitralrily chosen */
                 	            ^^^^^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#833: FILE: include/asm-x86_64/elf.h:166:
 
+

ERROR:DEFINE_ARCH_HAS: #define of 'ARCH_HAS_SETUP_ADDITIONAL_PAGES' is wrong - use Kconfig variables or standard guards instead
#834: FILE: include/asm-x86_64/elf.h:167:
+#define ARCH_HAS_SETUP_ADDITIONAL_PAGES 1

The ARCH_HAS_xyz and ARCH_HAVE_xyz patterns are wrong.

For big conceptual features use Kconfig symbols instead.  And for
smaller things where we have compatibility fallback functions but
want architectures able to override them with optimized ones, we
should either use weak functions (appropriate for some cases), or
the symbol that protects them should be the same symbol we use.

See: https://lore.kernel.org/lkml/CA+55aFycQ9XJvEOsiM3txHL5bjUc8CeKWJNR_H+MiicaddB42Q@mail.gmail.com/

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#836: FILE: include/asm-x86_64/elf.h:169:
+extern int arch_setup_additional_pages(struct linux_binprm *bprm,

ERROR:CODE_INDENT: code indent should use tabs where possible
#837: FILE: include/asm-x86_64/elf.h:170:
+                                       int executable_stack);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#837: FILE: include/asm-x86_64/elf.h:170:
+                                       int executable_stack);$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#841: FILE: include/asm-x86_64/elf.h:174:
+#define ARCH_DLINFO						\
+do if (vdso_enabled) {						\
+	NEW_AUX_ENT(AT_SYSINFO_EHDR,(unsigned long)current->mm->context.vdso);\
+} while (0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#843: FILE: include/asm-x86_64/elf.h:176:
+	NEW_AUX_ENT(AT_SYSINFO_EHDR,(unsigned long)current->mm->context.vdso);\
 	                           ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#854: FILE: arch/x86_64/vdso/vextern.h:1:
+#ifndef VEXTERN

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#856: FILE: arch/x86_64/vdso/vextern.h:3:
+#define VEXTERN(x) \
+	extern typeof(x) *vdso_ ## x __attribute__((visibility("hidden")));

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#856: FILE: arch/x86_64/vdso/vextern.h:3:
+#define VEXTERN(x) \
+	extern typeof(x) *vdso_ ## x __attribute__((visibility("hidden")));

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#863: FILE: arch/x86_64/vdso/vextern.h:10:
+/* Any kernel variables used in the vDSO must be exported in the main
+   kernel's vmlinux.lds.S/vsyscall.h/proper __section and

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#865: FILE: arch/x86_64/vdso/vextern.h:12:
+   The main kernel later fills in the values.   */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#880: FILE: arch/x86_64/vdso/vgetcpu.c:1:
+/*

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#894: FILE: arch/x86_64/vdso/vgetcpu.c:15:
+long __vdso_getcpu(unsigned *cpu, unsigned *node, struct getcpu_cache *tcache)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#894: FILE: arch/x86_64/vdso/vgetcpu.c:15:
+long __vdso_getcpu(unsigned *cpu, unsigned *node, struct getcpu_cache *tcache)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#900: FILE: arch/x86_64/vdso/vgetcpu.c:21:
+	/* Fast cache - only recompute value once per jiffies and avoid
+	   relatively costly rdtscp/cpuid otherwise.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#906: FILE: arch/x86_64/vdso/vgetcpu.c:27:
+	   If you don't like it pass NULL. */

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#907: FILE: arch/x86_64/vdso/vgetcpu.c:28:
+	if (tcache && tcache->blob[0] == (j = __jiffies)) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#927: FILE: arch/x86_64/vdso/vgetcpu.c:48:
+long getcpu(unsigned *cpu, unsigned *node, struct getcpu_cache *tcache)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#927: FILE: arch/x86_64/vdso/vgetcpu.c:48:
+long getcpu(unsigned *cpu, unsigned *node, struct getcpu_cache *tcache)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#928: FILE: arch/x86_64/vdso/vgetcpu.c:49:
+	__attribute__((weak, alias("__vdso_getcpu")));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __alias("__vdso_getcpu") over __attribute__((alias("__vdso_getcpu")))
#928: FILE: arch/x86_64/vdso/vgetcpu.c:49:
+	__attribute__((weak, alias("__vdso_getcpu")));

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#934: FILE: arch/x86_64/vdso/vvar.c:1:
+/* Define vDSO variables. These are part of the vDSO */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#942: FILE: arch/x86_64/vdso/vvar.c:9:
+#define VEXTERN(x) typeof (__ ## x) *vdso_ ## x __hidden = (void *)VMAGIC;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#942: FILE: arch/x86_64/vdso/vvar.c:9:
+#define VEXTERN(x) typeof (__ ## x) *vdso_ ## x __hidden = (void *)VMAGIC;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#942: FILE: arch/x86_64/vdso/vvar.c:9:
+#define VEXTERN(x) typeof (__ ## x) *vdso_ ## x __hidden = (void *)VMAGIC;

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.17498.commit.522d7e4dc27401cb71b418e8a206fcf98c6c0be6 total: 19 errors, 61 warnings, 15 checks, 704 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.17498.commit.522d7e4dc27401cb71b418e8a206fcf98c6c0be6 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
