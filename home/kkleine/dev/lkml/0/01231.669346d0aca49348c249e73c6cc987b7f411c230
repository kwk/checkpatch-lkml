WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#52: FILE: arch/i386/kernel/debugreg.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#54: FILE: arch/i386/kernel/debugreg.c:3:
+ *  arch/i386/kernel/debugreg.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#67: FILE: arch/i386/kernel/debugreg.c:16:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#68: FILE: arch/i386/kernel/debugreg.c:17:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#112: FILE: arch/i386/kernel/debugreg.c:61:
+	if (flag == DR_ALLOC_LOCAL &&
+			dr_list[regnum].flag != DR_ALLOC_GLOBAL) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#137: FILE: arch/i386/kernel/debugreg.c:86:
+	if (regnum >= 0 && regnum < DR_MAX)
[...]
+	else if (regnum == DR_ANY) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#140: FILE: arch/i386/kernel/debugreg.c:89:
+	else if (regnum == DR_ANY) {
+

CHECK:BRACES: Unbalanced braces around else statement
#149: FILE: arch/i386/kernel/debugreg.c:98:
+	} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#150: FILE: arch/i386/kernel/debugreg.c:99:
+		printk(KERN_ERR "dr_alloc: "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dr_alloc', this function's name, in a string
#150: FILE: arch/i386/kernel/debugreg.c:99:
+		printk(KERN_ERR "dr_alloc: "

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#151: FILE: arch/i386/kernel/debugreg.c:100:
+		printk(KERN_ERR "dr_alloc: "
+				"Cannot allocate debug register %d\n", regnum);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#160: FILE: arch/i386/kernel/debugreg.c:109:
+		printk(KERN_ERR "dr_free: "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dr_free', this function's name, in a string
#160: FILE: arch/i386/kernel/debugreg.c:109:
+		printk(KERN_ERR "dr_free: "

WARNING:SPLIT_STRING: quoted string split across lines
#161: FILE: arch/i386/kernel/debugreg.c:110:
+		printk(KERN_ERR "dr_free: "
+				"Cannot free debug register %d\n", regnum);

WARNING:TYPO_SPELLING: 'succeds' may be misspelled - perhaps 'succeeds'?
#203: FILE: arch/i386/kernel/debugreg.c:152:
+ * a debug register always succeds and it doesn't check the return value of
                            ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#232: FILE: arch/i386/kernel/debugreg.c:181:
+EXPORT_SYMBOL(dr_alloc);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#233: FILE: arch/i386/kernel/debugreg.c:182:
+EXPORT_SYMBOL(dr_free);

ERROR:CODE_INDENT: code indent should use tabs where possible
#262: FILE: arch/i386/kernel/process.c:381:
+ ^Iif (unlikely(tsk->thread.debugreg[7]))$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#262: FILE: arch/i386/kernel/process.c:381:
+ ^Iif (unlikely(tsk->thread.debugreg[7]))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#262: FILE: arch/i386/kernel/process.c:381:
+ ^Iif (unlikely(tsk->thread.debugreg[7]))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#263: FILE: arch/i386/kernel/process.c:382:
+ ^I^Idr_dec_use_count(tsk->thread.debugreg[7]);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#263: FILE: arch/i386/kernel/process.c:382:
+ ^I^Idr_dec_use_count(tsk->thread.debugreg[7]);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#263: FILE: arch/i386/kernel/process.c:382:
+ ^I^Idr_dec_use_count(tsk->thread.debugreg[7]);$

CHECK:SPACING: No space is necessary after a cast
#333: FILE: arch/i386/kernel/ptrace.c:425:
+			addr -= (long) &dummy->u_debugreg;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#335: FILE: arch/i386/kernel/ptrace.c:427:
+			if (addr < 4) {
[...]
+			else if (addr == 4 || addr == 5)
[...]

CHECK:SPACING: No space is necessary after a cast
#336: FILE: arch/i386/kernel/ptrace.c:428:
+				if ((unsigned long) data >= TASK_SIZE-3)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#336: FILE: arch/i386/kernel/ptrace.c:428:
+				if ((unsigned long) data >= TASK_SIZE-3)
 				                                     ^

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#343: FILE: arch/i386/kernel/ptrace.c:435:
+			}
+			else if (addr == 4 || addr == 5)

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dr' - possible side-effects?
#442: FILE: include/asm-i386/debugreg.h:75:
+#define SET_DR7(dr, regnum, type, len)	do {		\
+		dr &= ~(0xf << (16 + (regnum) * 4));	\
+		dr |= (((((len) - 1) << 2) | (type)) <<	\
+				(16 + (regnum) * 4)) |	\
+			(0x2 << ((regnum) * 2));	\
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'dr' may be better as '(dr)' to avoid precedence issues
#442: FILE: include/asm-i386/debugreg.h:75:
+#define SET_DR7(dr, regnum, type, len)	do {		\
+		dr &= ~(0xf << (16 + (regnum) * 4));	\
+		dr |= (((((len) - 1) << 2) | (type)) <<	\
+				(16 + (regnum) * 4)) |	\
+			(0x2 << ((regnum) * 2));	\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'regnum' - possible side-effects?
#442: FILE: include/asm-i386/debugreg.h:75:
+#define SET_DR7(dr, regnum, type, len)	do {		\
+		dr &= ~(0xf << (16 + (regnum) * 4));	\
+		dr |= (((((len) - 1) << 2) | (type)) <<	\
+				(16 + (regnum) * 4)) |	\
+			(0x2 << ((regnum) * 2));	\
+	} while (0)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#450: FILE: include/asm-i386/debugreg.h:83:
+#define RESET_DR7(dr, regnum)	dr &= ~(0x3 << ((regnum) * 2))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'dr' may be better as '(dr)' to avoid precedence issues
#450: FILE: include/asm-i386/debugreg.h:83:
+#define RESET_DR7(dr, regnum)	dr &= ~(0x3 << ((regnum) * 2))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#452: FILE: include/asm-i386/debugreg.h:85:
+extern int dr_alloc(int regnum, int flag);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#453: FILE: include/asm-i386/debugreg.h:86:
+extern void dr_free(int regnum);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#454: FILE: include/asm-i386/debugreg.h:87:
+extern void dr_inc_use_count(unsigned long mask);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#455: FILE: include/asm-i386/debugreg.h:88:
+extern void dr_dec_use_count(unsigned long mask);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#456: FILE: include/asm-i386/debugreg.h:89:
+extern int dr_is_global(int regnum);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#458: FILE: include/asm-i386/debugreg.h:91:
+extern int enable_debugreg(unsigned long old_dr7, unsigned long new_dr7);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#474: FILE: include/asm-i386/debugreg.h:107:
+}
+static inline void dr_dec_use_count(unsigned long mask)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#477: FILE: include/asm-i386/debugreg.h:110:
+}
+static inline int dr_is_global(int regnum)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#481: FILE: include/asm-i386/debugreg.h:114:
+}
+static inline int enable_debugreg(unsigned long old_dr7, unsigned long new_dr7)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#485: FILE: include/asm-i386/debugreg.h:118:
+}
+static inline void set_process_dr7(unsigned long new_dr7)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#497: FILE: arch/i386/kernel/kwatch.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#499: FILE: arch/i386/kernel/kwatch.c:3:
+ *  arch/i386/kernel/kwatch.c

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#512: FILE: arch/i386/kernel/kwatch.c:16:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#513: FILE: arch/i386/kernel/kwatch.c:17:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:REPEATED_WORD: Possible repeated word: 'to'
#520: FILE: arch/i386/kernel/kwatch.c:24:
+ * 2004-Oct	Updated by Prasanna S Panchamukhi <prasanna@in.ibm.com> to
+ *		to make use of notifiers.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/kdebug.h> instead of <asm/kdebug.h>
#528: FILE: arch/i386/kernel/kwatch.c:32:
+#include <asm/kdebug.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/bitops.h> instead of <asm/bitops.h>
#530: FILE: arch/i386/kernel/kwatch.c:34:
+#include <asm/bitops.h>

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#546: FILE: arch/i386/kernel/kwatch.c:50:
+	switch (debugreg) {
+		case 0:	set_debugreg(addr, 0);	break;
+		case 1:	set_debugreg(addr, 1);	break;
+		case 2:	set_debugreg(addr, 2);	break;
+		case 3:	set_debugreg(addr, 3);	break;
+		case 6:	set_debugreg(addr, 6);	break;
+		case 7:	set_debugreg(addr, 7);	break;

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#547: FILE: arch/i386/kernel/kwatch.c:51:
+		case 0:	set_debugreg(addr, 0);	break;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#548: FILE: arch/i386/kernel/kwatch.c:52:
+		case 1:	set_debugreg(addr, 1);	break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#549: FILE: arch/i386/kernel/kwatch.c:53:
+		case 2:	set_debugreg(addr, 2);	break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#550: FILE: arch/i386/kernel/kwatch.c:54:
+		case 3:	set_debugreg(addr, 3);	break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#551: FILE: arch/i386/kernel/kwatch.c:55:
+		case 6:	set_debugreg(addr, 6);	break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#552: FILE: arch/i386/kernel/kwatch.c:56:
+		case 7:	set_debugreg(addr, 7);	break;

WARNING:LINE_SPACING: Missing a blank line after declarations
#572: FILE: arch/i386/kernel/kwatch.c:76:
+	struct dr_info dr;
+	dr.debugreg = debugreg;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#588: FILE: arch/i386/kernel/kwatch.c:92:
+	 * number and the address for which the trap occurred. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:BRACES: braces {} should be used on all arms of this statement
#589: FILE: arch/i386/kernel/kwatch.c:93:
+	if (condition & DR_TRAP0) {
[...]
+	} else if (condition & DR_TRAP1) {
[...]
+	} else if (condition & DR_TRAP2) {
[...]
+	} else if (condition & DR_TRAP3) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#601: FILE: arch/i386/kernel/kwatch.c:105:
+	} else

CHECK:SPACING: No space is necessary after a cast
#614: FILE: arch/i386/kernel/kwatch.c:118:
+	if ((unsigned long) kwatch_list[debugreg].addr != addr)

WARNING:INDENTED_LABEL: labels should not be indented
#622: FILE: arch/i386/kernel/kwatch.c:126:
+      out:

WARNING:INDENTED_LABEL: labels should not be indented
#628: FILE: arch/i386/kernel/kwatch.c:132:
+      recursed:

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#683: FILE: arch/i386/kernel/kwatch.c:187:
+		/* FALL THROUGH */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

CHECK:SPACING: No space is necessary after a cast
#703: FILE: arch/i386/kernel/kwatch.c:207:
+	write_dr(debugreg, (unsigned long) addr);

CHECK:SPACING: No space is necessary after a cast
#704: FILE: arch/i386/kernel/kwatch.c:208:
+	sync_dr(debugreg, (unsigned long) addr, type);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#727: FILE: arch/i386/kernel/kwatch.c:231:
+	if (debugreg < 0 || debugreg >= DR_MAX ||
+			!kwatch_list[debugreg].handler)

WARNING:LINE_SPACING: Missing a blank line after declarations
#750: FILE: arch/i386/kernel/kwatch.c:254:
+	struct die_args *args = (struct die_args *)data;
+	switch (val) {

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#774: FILE: arch/i386/kernel/kwatch.c:278:
+__initcall(init_kwatch);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#776: FILE: arch/i386/kernel/kwatch.c:280:
+EXPORT_SYMBOL_GPL(register_kwatch);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#777: FILE: arch/i386/kernel/kwatch.c:281:
+EXPORT_SYMBOL_GPL(unregister_kwatch);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#795: FILE: include/asm-i386/kwatch.h:1:
+#ifndef _ASM_KWATCH_H

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#799: FILE: include/asm-i386/kwatch.h:5:
+ *  include/asm-i386/kwatch.h

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#812: FILE: include/asm-i386/kwatch.h:18:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#813: FILE: include/asm-i386/kwatch.h:19:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#833: FILE: include/asm-i386/kwatch.h:39:
+#define DR_TYPE_EXECUTE ^I0x0^I/* Watchpoint types */$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#839: FILE: include/asm-i386/kwatch.h:45:
+extern int register_kwatch(void *addr, u8 length, u8 type,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#840: FILE: include/asm-i386/kwatch.h:46:
+extern int register_kwatch(void *addr, u8 length, u8 type,
+		kwatch_handler_t handler);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#841: FILE: include/asm-i386/kwatch.h:47:
+extern void unregister_kwatch(int debugreg);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#846: FILE: include/asm-i386/kwatch.h:52:
+static inline int register_kwatch(void *addr, u8 length, u8 type,
+		kwatch_handler_t handler)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#848: FILE: include/asm-i386/kwatch.h:54:
+	return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#850: FILE: include/asm-i386/kwatch.h:56:
+}
+static inline void unregister_kwatch(int debugreg)

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.01231.commit.669346d0aca49348c249e73c6cc987b7f411c230 total: 17 errors, 31 warnings, 35 checks, 768 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.01231.commit.669346d0aca49348c249e73c6cc987b7f411c230 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
