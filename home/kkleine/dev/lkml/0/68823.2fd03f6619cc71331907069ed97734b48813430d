WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#26: 
--- linux-2.6.17-rc6.orig/perfmon/perfmon_sysfs.c	1969-12-31 16:00:00.000000000 -0800

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#29: FILE: perfmon/perfmon_sysfs.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#50: FILE: perfmon/perfmon_sysfs.c:22:
+ * ^Ihttp://www.hpl.hp.com/research/linux/perfmon$

WARNING:INCLUDE_LINUX: Use #include <linux/bitops.h> instead of <asm/bitops.h>
#63: FILE: perfmon/perfmon_sysfs.c:35:
+#include <asm/bitops.h>

WARNING:INCLUDE_LINUX: Use #include <linux/processor.h> instead of <asm/processor.h>
#65: FILE: perfmon/perfmon_sysfs.c:37:
+#include <asm/processor.h>

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#69: FILE: perfmon/perfmon_sysfs.c:41:
+	ssize_t (*show)(void *, char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#69: FILE: perfmon/perfmon_sysfs.c:41:
+	ssize_t (*show)(void *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#70: FILE: perfmon/perfmon_sysfs.c:42:
+	ssize_t (*store)(void *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#70: FILE: perfmon/perfmon_sysfs.c:42:
+	ssize_t (*store)(void *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#70: FILE: perfmon/perfmon_sysfs.c:42:
+	ssize_t (*store)(void *, const char *, size_t);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#72: FILE: perfmon/perfmon_sysfs.c:44:
+};
+#define to_attr(n) container_of(n, struct pfm_attribute, attr);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#72: FILE: perfmon/perfmon_sysfs.c:44:
+#define to_attr(n) container_of(n, struct pfm_attribute, attr);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#77: FILE: perfmon/perfmon_sysfs.c:49:
+#define PFM_RW_ATTR(_name,_mode,_show,_store) ^I^I^I\$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#77: FILE: perfmon/perfmon_sysfs.c:49:
+#define PFM_RW_ATTR(_name,_mode,_show,_store) 			\
                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#77: FILE: perfmon/perfmon_sysfs.c:49:
+#define PFM_RW_ATTR(_name,_mode,_show,_store) 			\
                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#77: FILE: perfmon/perfmon_sysfs.c:49:
+#define PFM_RW_ATTR(_name,_mode,_show,_store) 			\
                                      ^

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#77: FILE: perfmon/perfmon_sysfs.c:49:
+#define PFM_RW_ATTR(_name,_mode,_show,_store) 			\
+struct pfm_attribute attr_##_name = __ATTR(_name,_mode,_show,_store);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#78: FILE: perfmon/perfmon_sysfs.c:50:
+struct pfm_attribute attr_##_name = __ATTR(_name,_mode,_show,_store);
                                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#78: FILE: perfmon/perfmon_sysfs.c:50:
+struct pfm_attribute attr_##_name = __ATTR(_name,_mode,_show,_store);
                                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#78: FILE: perfmon/perfmon_sysfs.c:50:
+struct pfm_attribute attr_##_name = __ATTR(_name,_mode,_show,_store);
                                                             ^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#84: FILE: perfmon/perfmon_sysfs.c:56:
+int pfm_sysfs_add_pmu(struct _pfm_pmu_config *pmu);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#104: FILE: perfmon/perfmon_sysfs.c:76:
+	for_each_online_cpu(m) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#105: FILE: perfmon/perfmon_sysfs.c:77:
+		st = &per_cpu(pfm_stats,m);
 		                       ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#124: FILE: perfmon/perfmon_sysfs.c:96:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#126: FILE: perfmon/perfmon_sysfs.c:98:
+static ssize_t pfm_fmt_attr_show(struct kobject *kobj,
+		struct attribute *attr, char *buf)

WARNING:LINE_SPACING: Missing a blank line after declarations
#130: FILE: perfmon/perfmon_sysfs.c:102:
+	struct pfm_attribute *attribute = to_attr(attr);
+	return attribute->show ? attribute->show(fmt, buf) : -EIO;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#134: FILE: perfmon/perfmon_sysfs.c:106:
+static ssize_t pfm_pmu_attr_show(struct kobject *kobj,
+		struct attribute *attr, char *buf)

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#136: FILE: perfmon/perfmon_sysfs.c:108:
+	struct _pfm_pmu_config *pmu= to_pmu(kobj);
 	                           ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#138: FILE: perfmon/perfmon_sysfs.c:110:
+	struct pfm_attribute *attribute = to_attr(attr);
+	return attribute->show ? attribute->show(pmu, buf) : -EIO;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#142: FILE: perfmon/perfmon_sysfs.c:114:
+static ssize_t pfm_stats_attr_show(struct kobject *kobj,
+		struct attribute *attr, char *buf)

WARNING:LINE_SPACING: Missing a blank line after declarations
#146: FILE: perfmon/perfmon_sysfs.c:118:
+	struct pfm_attribute *attribute = to_attr(attr);
+	return attribute->show ? attribute->show(st, buf) : -EIO;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#150: FILE: perfmon/perfmon_sysfs.c:122:
+static ssize_t pfm_stats_attr_store(struct kobject *kobj,
+		struct attribute *attr, const char *buf, size_t count)

WARNING:LINE_SPACING: Missing a blank line after declarations
#154: FILE: perfmon/perfmon_sysfs.c:126:
+	struct pfm_attribute *attribute = to_attr(attr);
+	return attribute->store ? attribute->store(st, buf, count) : -EIO;

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#157: FILE: perfmon/perfmon_sysfs.c:129:
+static struct sysfs_ops pfm_fmt_sysfs_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#161: FILE: perfmon/perfmon_sysfs.c:133:
+static struct sysfs_ops pfm_pmu_sysfs_ops = {

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#165: FILE: perfmon/perfmon_sysfs.c:137:
+static struct sysfs_ops pfm_stats_sysfs_ops = {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#225: FILE: perfmon/perfmon_sysfs.c:197:
+	if (sscanf(buf,"%d", &d) != 1)
 	              ^

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#225: FILE: perfmon/perfmon_sysfs.c:197:
+	if (sscanf(buf,"%d", &d) != 1)
+		return -EINVAL;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#244: FILE: perfmon/perfmon_sysfs.c:216:
+	if (sscanf(buf,"%d", &d) != 1)
 	              ^

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#244: FILE: perfmon/perfmon_sysfs.c:216:
+	if (sscanf(buf,"%d", &d) != 1)
+		return -EINVAL;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#254: FILE: perfmon/perfmon_sysfs.c:226:
+	buf[0]='0';
 	      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#255: FILE: perfmon/perfmon_sysfs.c:227:
+	buf[1]='\0';
 	      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#274: FILE: perfmon/perfmon_sysfs.c:246:
+	if (sscanf(buf,"%d", &d) != 1)
 	              ^

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#274: FILE: perfmon/perfmon_sysfs.c:246:
+	if (sscanf(buf,"%d", &d) != 1)
+		return -EINVAL;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#291: FILE: perfmon/perfmon_sysfs.c:263:
+	if (sscanf(buf,"%d", &d) != 1)
 	              ^

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#291: FILE: perfmon/perfmon_sysfs.c:263:
+	if (sscanf(buf,"%d", &d) != 1)
+		return -EINVAL;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#308: FILE: perfmon/perfmon_sysfs.c:280:
+	if (sscanf(buf,"%d", &d) != 1)
 	              ^

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#308: FILE: perfmon/perfmon_sysfs.c:280:
+	if (sscanf(buf,"%d", &d) != 1)
+		return -EINVAL;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#325: FILE: perfmon/perfmon_sysfs.c:297:
+	if (sscanf(buf,"%zu", &d) != 1)
 	              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#347: FILE: perfmon/perfmon_sysfs.c:319:
+	if (sscanf(buf,"%zu", &d) != 1)
 	              ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#402: FILE: perfmon/perfmon_sysfs.c:374:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#406: FILE: perfmon/perfmon_sysfs.c:378:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#480: FILE: perfmon/perfmon_sysfs.c:452:
+	struct pfm_stats *st = info;
+	return snprintf(buf, PAGE_SIZE, "%llu\n",

WARNING:LINE_SPACING: Missing a blank line after declarations
#488: FILE: perfmon/perfmon_sysfs.c:460:
+	struct pfm_stats *st = info;
+	return snprintf(buf, PAGE_SIZE, "%llu\n",

WARNING:SPLIT_STRING: quoted string split across lines
#541: FILE: perfmon/perfmon_sysfs.c:513:
+	return snprintf(buf, PAGE_SIZE, "%02x-%02x-%02x-%02x-%02x-%02x-%02x-%02x"
+			   "-%02x-%02x-%02x-%02x-%02x-%02x-%02x-%02x\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#603: FILE: perfmon/perfmon_sysfs.c:575:
+	for (i = 0; i < PFM_MAX_PMCS;  i++) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#619: FILE: perfmon/perfmon_sysfs.c:591:
+	for (i = 0; i < PFM_MAX_PMDS;  i++) {
+

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.68823.commit.2fd03f6619cc71331907069ed97734b48813430d total: 18 errors, 29 warnings, 10 checks, 636 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.68823.commit.2fd03f6619cc71331907069ed97734b48813430d has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
