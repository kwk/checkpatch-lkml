WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#76: FILE: arch/powerpc/platforms/cell/spu_coredump.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#94: FILE: arch/powerpc/platforms/cell/spu_coredump.c:19:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#95: FILE: arch/powerpc/platforms/cell/spu_coredump.c:20:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#112: FILE: arch/powerpc/platforms/cell/spu_coredump.c:37:
+	ret = -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#150: FILE: arch/powerpc/platforms/cell/spu_coredump.c:75:
+	BUG_ON(spu_coredump_calls.owner != calls->owner);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#162: FILE: arch/powerpc/platforms/cell/spufs/coredump.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#180: FILE: arch/powerpc/platforms/cell/spufs/coredump.c:19:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#181: FILE: arch/powerpc/platforms/cell/spufs/coredump.c:20:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/uaccess.h> instead of <asm/uaccess.h>
#191: FILE: arch/powerpc/platforms/cell/spufs/coredump.c:30:
+#include <asm/uaccess.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:BRACES: braces {} should be used on all arms of this statement
#229: FILE: arch/powerpc/platforms/cell/spufs/coredump.c:68:
+	if (file->f_op->llseek) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#232: FILE: arch/powerpc/platforms/cell/spufs/coredump.c:71:
+	} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#317: FILE: arch/powerpc/platforms/cell/spufs/coredump.c:156:
+				int rval = spufs_add_one_context(file, fd);
+				if (rval < 0)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#328: FILE: arch/powerpc/platforms/cell/spufs/coredump.c:167:
+static void spufs_arch_write_note(struct spufs_ctx_info *ctx_info, int i,
+				struct file *file)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#351: FILE: arch/powerpc/platforms/cell/spufs/coredump.c:190:
+	if (!ctx) {
+		return;
+	}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#417: FILE: arch/powerpc/platforms/cell/spufs/file.c:55:
+__spufs_mem_read(struct spu_context *ctx, char __user *buffer,
+			size_t size, loff_t *pos)

WARNING:LINE_SPACING: Missing a blank line after declarations
#420: FILE: arch/powerpc/platforms/cell/spufs/file.c:58:
+	char *local_store = ctx->ops->get_ls(ctx);
+	return simple_read_from_buffer(buffer, size, pos, local_store,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#447: FILE: arch/powerpc/platforms/cell/spufs/file.c:270:
+__spufs_regs_read(struct spu_context *ctx, char __user *buffer,
+			size_t size, loff_t *pos)

WARNING:LINE_SPACING: Missing a blank line after declarations
#450: FILE: arch/powerpc/platforms/cell/spufs/file.c:273:
+	struct spu_lscsa *lscsa = ctx->csa.lscsa;
+	return simple_read_from_buffer(buffer, size, pos,

WARNING:SIZEOF_PARENTHESIS: sizeof lscsa->gprs should be sizeof(lscsa->gprs)
#451: FILE: arch/powerpc/platforms/cell/spufs/file.c:274:
+				      lscsa->gprs, sizeof lscsa->gprs);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#476: FILE: arch/powerpc/platforms/cell/spufs/file.c:320:
+__spufs_fpcr_read(struct spu_context *ctx, char __user * buffer,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#477: FILE: arch/powerpc/platforms/cell/spufs/file.c:321:
+__spufs_fpcr_read(struct spu_context *ctx, char __user * buffer,
+			size_t size, loff_t * pos)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#477: FILE: arch/powerpc/platforms/cell/spufs/file.c:321:
+			size_t size, loff_t * pos)

WARNING:LINE_SPACING: Missing a blank line after declarations
#480: FILE: arch/powerpc/platforms/cell/spufs/file.c:324:
+	struct spu_lscsa *lscsa = ctx->csa.lscsa;
+	return simple_read_from_buffer(buffer, size, pos,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#508: FILE: arch/powerpc/platforms/cell/spufs/file.c:737:
+static ssize_t __spufs_signal1_read(struct spu_context *ctx, char __user *buf,
 			size_t len, loff_t *pos)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#531: FILE: arch/powerpc/platforms/cell/spufs/file.c:761:
+static ssize_t spufs_signal1_read(struct file *file, char __user *buf,
+			size_t len, loff_t *pos)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#552: FILE: arch/powerpc/platforms/cell/spufs/file.c:844:
+static ssize_t __spufs_signal2_read(struct spu_context *ctx, char __user *buf,
 			size_t len, loff_t *pos)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#579: FILE: arch/powerpc/platforms/cell/spufs/file.c:868:
+static ssize_t spufs_signal2_read(struct file *file, char __user *buf,
+			size_t len, loff_t *pos)

WARNING:LINE_SPACING: Missing a blank line after declarations
#599: FILE: arch/powerpc/platforms/cell/spufs/file.c:956:
+	struct spu_context *ctx = data;
+	return ctx->ops->signal1_type_get(ctx);

WARNING:LINE_SPACING: Missing a blank line after declarations
#620: FILE: arch/powerpc/platforms/cell/spufs/file.c:985:
+	struct spu_context *ctx = data;
+	return ctx->ops->signal2_type_get(ctx);

WARNING:LINE_SPACING: Missing a blank line after declarations
#756: FILE: arch/powerpc/platforms/cell/spufs/file.c:1597:
+	struct spu_context *ctx = data;
+	return ctx->csa.priv2.spu_lslr_RW;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#775: FILE: arch/powerpc/platforms/cell/spufs/file.c:1622:
+static ssize_t __spufs_mbox_info_read(struct spu_context *ctx,
+			char __user *buf, size_t len, loff_t *pos)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#781: FILE: arch/powerpc/platforms/cell/spufs/file.c:1628:
+	if (mbox_stat & 0x0000ff) {
+		data = ctx->csa.prob.pu_mb_R;
+	}

WARNING:SIZEOF_PARENTHESIS: sizeof data should be sizeof(data)
#785: FILE: arch/powerpc/platforms/cell/spufs/file.c:1632:
+	return simple_read_from_buffer(buf, len, pos, &data, sizeof data);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#819: FILE: arch/powerpc/platforms/cell/spufs/file.c:1660:
+static ssize_t __spufs_ibox_info_read(struct spu_context *ctx,
+				char __user *buf, size_t len, loff_t *pos)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#825: FILE: arch/powerpc/platforms/cell/spufs/file.c:1666:
+	if (ibox_stat & 0xff0000) {
+		data = ctx->csa.priv2.puint_mb_R;
+	}

WARNING:SIZEOF_PARENTHESIS: sizeof data should be sizeof(data)
#829: FILE: arch/powerpc/platforms/cell/spufs/file.c:1670:
+	return simple_read_from_buffer(buf, len, pos, &data, sizeof data);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#865: FILE: arch/powerpc/platforms/cell/spufs/file.c:1698:
+static ssize_t __spufs_wbox_info_read(struct spu_context *ctx,
+			char __user *buf, size_t len, loff_t *pos)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#874: FILE: arch/powerpc/platforms/cell/spufs/file.c:1706:
+	for (i = 0; i < cnt; i++) {
+		data[i] = ctx->csa.spu_mailbox_data[i];
+	}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#883: FILE: arch/powerpc/platforms/cell/spufs/file.c:1715:
+static ssize_t spufs_wbox_info_read(struct file *file, char __user *buf,
+				   size_t len, loff_t *pos)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#915: FILE: arch/powerpc/platforms/cell/spufs/file.c:1739:
+static ssize_t __spufs_dma_info_read(struct spu_context *ctx,
+			char __user *buf, size_t len, loff_t *pos)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#942: FILE: arch/powerpc/platforms/cell/spufs/file.c:1765:
+static ssize_t spufs_dma_info_read(struct file *file, char __user *buf,
+			      size_t len, loff_t *pos)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#967: FILE: arch/powerpc/platforms/cell/spufs/file.c:1788:
+static ssize_t __spufs_proxydma_info_read(struct spu_context *ctx,
+			char __user *buf, size_t len, loff_t *pos)

WARNING:SIZEOF_PARENTHESIS: sizeof info should be sizeof(info)
#973: FILE: arch/powerpc/platforms/cell/spufs/file.c:1792:
+	int ret = sizeof info;

WARNING:SIZEOF_PARENTHESIS: sizeof info should be sizeof(info)
#992: FILE: arch/powerpc/platforms/cell/spufs/file.c:1815:
+				sizeof info);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#996: FILE: arch/powerpc/platforms/cell/spufs/file.c:1819:
+static ssize_t spufs_proxydma_info_read(struct file *file, char __user *buf,
+				   size_t len, loff_t *pos)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1039: FILE: arch/powerpc/platforms/cell/spufs/file.c:1916:
+};
+int spufs_coredump_num_notes = ARRAY_SIZE(spufs_coredump_read) - 1;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1111: FILE: arch/powerpc/platforms/cell/spufs/spufs.h:234:
+};
+extern struct spufs_coredump_reader spufs_coredump_read[];

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1153: FILE: include/asm-powerpc/elf.h:418:
+extern int arch_notes_size(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1154: FILE: include/asm-powerpc/elf.h:419:
+extern void arch_write_notes(struct file *file);

ERROR:DEFINE_ARCH_HAS: #define of 'ARCH_HAVE_EXTRA_ELF_NOTES' is wrong - use Kconfig variables or standard guards instead
#1159: FILE: include/asm-powerpc/elf.h:424:
+#define ARCH_HAVE_EXTRA_ELF_NOTES

The ARCH_HAS_xyz and ARCH_HAVE_xyz patterns are wrong.

For big conceptual features use Kconfig symbols instead.  And for
smaller things where we have compatibility fallback functions but
want architectures able to override them with optimized ones, we
should either use weak functions (appropriate for some cases), or
the symbol that protects them should be the same symbol we use.

See: https://lore.kernel.org/lkml/CA+55aFycQ9XJvEOsiM3txHL5bjUc8CeKWJNR_H+MiicaddB42Q@mail.gmail.com/

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.16608.commit.e3048704e824ad5620ec7f093eb76930acb73793 total: 7 errors, 20 warnings, 23 checks, 1066 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.16608.commit.e3048704e824ad5620ec7f093eb76930acb73793 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
