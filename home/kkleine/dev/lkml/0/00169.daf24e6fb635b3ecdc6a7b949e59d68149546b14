WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
- Introduce a new enum dma_data_direction data_dir member in struct request.

ERROR:SPACING: space required before the open brace '{'
#125: FILE: arch/um/drivers/ubd_kern.c:1015:
+	if((rq_write_dir(req) == WRITE) && !ubd_dev->openflags.w){

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#125: FILE: arch/um/drivers/ubd_kern.c:1015:
+	if((rq_write_dir(req) == WRITE) && !ubd_dev->openflags.w){

ERROR:SPACING: space prohibited after that open parenthesis '('
#257: FILE: block/elevator.c:722:
+		if ( (!q->boundary_rq || q->boundary_rq == rq) &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#258: FILE: block/elevator.c:723:
+		if ( (!q->boundary_rq || q->boundary_rq == rq) &&
+			!rq_bidi_dir(rq)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#299: FILE: block/ll_rw_blk.c:1963:
+blk_alloc_request(request_queue_t *q, enum dma_data_direction dir,
+	int priv, gfp_t gfp_mask)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#313: FILE: block/ll_rw_blk.c:1972:
+	BUG_ON( !(dma_uni_dir(dir) || (dir == DMA_BIDIRECTIONAL)) );

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:SPACING: space prohibited after that open parenthesis '('
#313: FILE: block/ll_rw_blk.c:1972:
+	BUG_ON( !(dma_uni_dir(dir) || (dir == DMA_BIDIRECTIONAL)) );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#313: FILE: block/ll_rw_blk.c:1972:
+	BUG_ON( !(dma_uni_dir(dir) || (dir == DMA_BIDIRECTIONAL)) );

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#329: FILE: block/ll_rw_blk.c:2064:
+static struct request *get_request(request_queue_t *q,
+	enum dma_data_direction dir, struct bio *bio, gfp_t gfp_mask)

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#337: FILE: block/ll_rw_blk.c:2071:
+	int is_sync = (rw==READ) ? 1 : (bio ? bio_sync(bio) : 0);
 	                 ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#360: FILE: block/ll_rw_blk.c:2170:
+static struct request *get_request_wait(request_queue_t *q,
+	enum dma_data_direction dir, struct bio *bio)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#386: FILE: block/ll_rw_blk.c:2212:
+struct request *blk_get_request(request_queue_t *q,
+	enum dma_data_direction dir, gfp_t gfp_mask)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#414: FILE: block/ll_rw_blk.c:2239:
+void blk_rq_init_unqueued_req(struct request * rq)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#420: FILE: block/ll_rw_blk.c:2245:
+EXPORT_SYMBOL(blk_rq_init_unqueued_req);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

ERROR:SPACING: spaces required around that '==' (ctx:VxW)
#440: FILE: block/ll_rw_blk.c:2504:
+	bio = bio_map_user_iov(q, NULL, iov, iov_count, rq_write_dir(rq)== READ);
 	                                                                ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#506: FILE: block/ll_rw_blk.c:3011:
+	req = get_request_wait(q,
+		bio_data_dir(bio) ? DMA_TO_DEVICE : DMA_FROM_DEVICE, bio);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#536: FILE: block/ll_rw_blk.c:3624:
+	if (bio->bi_rw & (1<<BIO_RW_SYNC))
 	                   ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#542: FILE: block/ll_rw_blk.c:3630:
+	/*
+	BIO_RW_AHEAD	==> ??

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:CAMELCASE: Avoid CamelCase: <Request>
#594: FILE: drivers/block/DAC960.c:3326:
+	if (rq_uni_write_dir(Request) == READ) {

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:SPACING: space prohibited after that open parenthesis '('
#607: FILE: drivers/block/amiflop.c:1382:
+		if ( !dma_uni_dir(CURRENT->data_dir) ) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#607: FILE: drivers/block/amiflop.c:1382:
+		if ( !dma_uni_dir(CURRENT->data_dir) ) {

CHECK:CAMELCASE: Avoid CamelCase: <ReqCmd>
#629: FILE: drivers/block/ataflop.c:1456:
+	ReqCmd = rq_uni_write_dir(CURRENT);

CHECK:CAMELCASE: Avoid CamelCase: <Fail>
#782: FILE: drivers/block/paride/pd.c:449:
+		return Fail;

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#925: FILE: drivers/block/swim3.c:621:
+	       (rq_write_dir(fd_req)==WRITE? "writ": "read"), (long)fd_req->sector);
 	                            ^

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#925: FILE: drivers/block/swim3.c:621:
+	       (rq_write_dir(fd_req)==WRITE? "writ": "read"), (long)fd_req->sector);
 	                                   ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#925: FILE: drivers/block/swim3.c:621:
+	       (rq_write_dir(fd_req)==WRITE? "writ": "read"), (long)fd_req->sector);
 	                                           ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#935: FILE: drivers/block/swim3.c:639:
+		printk(KERN_ERR "swim3_interrupt, state=%d, dir=%d, intr=%x, err=%x\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'swim3_interrupt', this function's name, in a string
#935: FILE: drivers/block/swim3.c:639:
+		printk(KERN_ERR "swim3_interrupt, state=%d, dir=%d, intr=%x, err=%x\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#954: FILE: drivers/block/swim3.c:736:
+				       rq_write_dir(fd_req) == WRITE? "writ": "read",
 				                                    ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#954: FILE: drivers/block/swim3.c:736:
+				       rq_write_dir(fd_req) == WRITE? "writ": "read",
 				                                            ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#964: FILE: drivers/block/swim3.c:745:
+				printk(KERN_ERR "  state=%d, dir=%d, intr=%x, err=%x\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1109: FILE: drivers/cdrom/gscd.c:269:
+		printk("GSCD: bad cmd %u\n", rq_dma_dir(req));

WARNING:LONG_LINE: line length of 140 exceeds 100 columns
#1226: FILE: drivers/ide/ide-cd.c:2023:
+		if ((rq_uni_write_dir(rq) == READ) && IDE_LARGE_SEEK(info->last_block, block, IDECD_SEEK_THRESHOLD) && drive->dsc_overlap) {

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1549: FILE: drivers/ide/ppc/pmac.c:1863:
+		writel(pmif->timings[unit] + (!rq_uni_write_dir(rq) ? 0x00800000UL : 0),
 			PMAC_IDE_REG(IDE_TIMING_CONFIG));

ERROR:CODE_INDENT: code indent should use tabs where possible
#1650: FILE: drivers/mmc/mmc_block.c:357:
+ ^Iif (rq_uni_write_dir(req) != READ && mmc_card_sd(card)) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1650: FILE: drivers/mmc/mmc_block.c:357:
+ ^Iif (rq_uni_write_dir(req) != READ && mmc_card_sd(card)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1650: FILE: drivers/mmc/mmc_block.c:357:
+ ^Iif (rq_uni_write_dir(req) != READ && mmc_card_sd(card)) {$

ERROR:SPACING: space required before the open parenthesis '('
#1673: FILE: drivers/mtd/mtd_blkdevs.c:55:
+	switch(rq_dma_dir(req)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#1690: FILE: drivers/mtd/mtd_blkdevs.c:72:
+		printk(KERN_NOTICE "Unknown request %u\n", rq_dma_dir(req));

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1775: FILE: drivers/s390/block/dasd_fba.c:247:
+	if (rq_dma_dir(req) == DMA_FROM_DEVICE) {
[...]
-	} else if (rq_data_dir(req) == WRITE) {
[...]
 		cmd = DASD_FBA_CCW_WRITE;
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1862: FILE: drivers/scsi/aic7xxx_old.c:2853:
+    if (rq_write_dir(cmd->request) == WRITE)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#1862: FILE: drivers/scsi/aic7xxx_old.c:2853:
+    if (rq_write_dir(cmd->request) == WRITE)
     {

ERROR:CODE_INDENT: code indent should use tabs where possible
#1871: FILE: drivers/scsi/aic7xxx_old.c:3862:
+          (rq_write_dir(cmd->request) == WRITE) ? "wrote" : "read", actual,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1871: FILE: drivers/scsi/aic7xxx_old.c:3862:
+          (rq_write_dir(cmd->request) == WRITE) ? "wrote" : "read", actual,$

CHECK:CAMELCASE: Avoid CamelCase: <SCpnt>
#2051: FILE: drivers/scsi/sd.c:437:
+	SCpnt->sc_data_direction = rq_dma_dir(rq);

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#2068: FILE: drivers/scsi/sd.c:449:
+		printk(KERN_ERR "sd: Unknown command %x data_dir %d\n", rq->cmd_flags ,rq_dma_dir(rq));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2068: FILE: drivers/scsi/sd.c:449:
+		printk(KERN_ERR "sd: Unknown command %x data_dir %d\n", rq->cmd_flags ,rq_dma_dir(rq));

ERROR:SPACING: space prohibited before that ',' (ctx:WxV)
#2068: FILE: drivers/scsi/sd.c:449:
+		printk(KERN_ERR "sd: Unknown command %x data_dir %d\n", rq->cmd_flags ,rq_dma_dir(rq));
 		                                                                      ^

ERROR:SPACING: space required after that ',' (ctx:WxV)
#2068: FILE: drivers/scsi/sd.c:449:
+		printk(KERN_ERR "sd: Unknown command %x data_dir %d\n", rq->cmd_flags ,rq_dma_dir(rq));
 		                                                                      ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2139: FILE: drivers/scsi/sun3_NCR5380.c:1209:
+    if((sun3scsi_dma_finish(rq_uni_write_dir(hostdata->connected->request)))) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 12)
#2139: FILE: drivers/scsi/sun3_NCR5380.c:1209:
+    if((sun3scsi_dma_finish(rq_uni_write_dir(hostdata->connected->request)))) {
 	    printk("scsi%d: overrun in UDC counter -- not prepared to deal with this!\n", HOSTNO);

ERROR:SPACING: space required before the open parenthesis '('
#2139: FILE: drivers/scsi/sun3_NCR5380.c:1209:
+    if((sun3scsi_dma_finish(rq_uni_write_dir(hostdata->connected->request)))) {

CHECK:BIT_MACRO: Prefer using the BIT macro
#2193: FILE: include/linux/blkdev.h:206:
+#define REQ_BIDI	(1 << __REQ_BIDI)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#2213: FILE: include/linux/blkdev.h:554:
+static inline int rq_bidi_dir(struct request* rq)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#2219: FILE: include/linux/blkdev.h:560:
+static inline int rq_write_dir(struct request* rq)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#2224: FILE: include/linux/blkdev.h:565:
+static inline int rq_uni_write_dir(struct request* rq)

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#2234: FILE: include/linux/blkdev.h:574:
+#define rq_is_sync(rq)		(rq_dma_dir((rq)) == DMA_FROM_DEVICE || (rq)->cmd_flags & REQ_RW_SYNC)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'rq' - possible side-effects?
#2234: FILE: include/linux/blkdev.h:574:
+#define rq_is_sync(rq)		(rq_dma_dir((rq)) == DMA_FROM_DEVICE || (rq)->cmd_flags & REQ_RW_SYNC)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2243: FILE: include/linux/blkdev.h:654:
+extern struct request *blk_get_request(request_queue_t *, enum dma_data_direction, gfp_t);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'request_queue_t *' should also have an identifier name
#2243: FILE: include/linux/blkdev.h:654:
+extern struct request *blk_get_request(request_queue_t *, enum dma_data_direction, gfp_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gfp_t' should also have an identifier name
#2243: FILE: include/linux/blkdev.h:654:
+extern struct request *blk_get_request(request_queue_t *, enum dma_data_direction, gfp_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2244: FILE: include/linux/blkdev.h:655:
+extern void blk_rq_init_unqueued_req(struct request *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request *' should also have an identifier name
#2244: FILE: include/linux/blkdev.h:655:
+extern void blk_rq_init_unqueued_req(struct request *);

ERROR:CODE_INDENT: code indent should use tabs where possible
#2259: FILE: include/linux/blktrace_api.h:166:
+^I          (((rq->cmd_flags & (REQ_SOFTBARRIER|REQ_HARDBARRIER)) != 0) <<$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2259: FILE: include/linux/blktrace_api.h:166:
+	          (((rq->cmd_flags & (REQ_SOFTBARRIER|REQ_HARDBARRIER)) != 0) <<
 	                                             ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2260: FILE: include/linux/blktrace_api.h:167:
+^I           BIO_RW_BARRIER) |$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2261: FILE: include/linux/blktrace_api.h:168:
+^I          (((rq->cmd_flags & REQ_FAILFAST) != 0) << BIO_RW_FAILFAST) |$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2262: FILE: include/linux/blktrace_api.h:169:
+^I          (((rq->cmd_flags & REQ_RW_SYNC) != 0) << BIO_RW_SYNC) |$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2263: FILE: include/linux/blktrace_api.h:170:
+^I          (((rq->cmd_flags & REQ_RW_META) != 0) << BIO_RW_META));$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#2286: FILE: include/linux/dma-mapping.h:27:
+static inline char* dma_dir_to_string(enum dma_data_direction dir)

ERROR:SPACING: space required before the open brace '{'
#2288: FILE: include/linux/dma-mapping.h:29:
+	switch(dir){

ERROR:SPACING: space required before the open parenthesis '('
#2288: FILE: include/linux/dma-mapping.h:29:
+	switch(dir){

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2318: FILE: include/linux/elevator.h:114:
+extern int elv_may_queue(request_queue_t *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'request_queue_t *' should also have an identifier name
#2318: FILE: include/linux/elevator.h:114:
+extern int elv_may_queue(request_queue_t *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2318: FILE: include/linux/elevator.h:114:
+extern int elv_may_queue(request_queue_t *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2318: FILE: include/linux/elevator.h:114:
+extern int elv_may_queue(request_queue_t *, int, int);

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.00169.commit.daf24e6fb635b3ecdc6a7b949e59d68149546b14 total: 32 errors, 27 warnings, 18 checks, 1748 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.00169.commit.daf24e6fb635b3ecdc6a7b949e59d68149546b14 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
