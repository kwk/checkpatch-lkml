WARNING:TYPO_SPELLING: 'useable' may be misspelled - perhaps 'usable'?
#30: 
Implement CLONE_NEWUSER flag useable at clone and unshare.
                             ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#61: FILE: include/linux/user_namespace.h:28:
+extern int unshare_user_ns(unsigned long flags, struct user_namespace **new_user);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#70: FILE: include/linux/user_namespace.h:45:
+static inline int unshare_user_ns(unsigned long flags,
+			 struct user_namespace **new_user)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#106: FILE: kernel/fork.c:1632:
+				CLONE_NEWUTS|CLONE_NEWIPC|CLONE_NEWUSER))
 				            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#106: FILE: kernel/fork.c:1632:
+				CLONE_NEWUTS|CLONE_NEWIPC|CLONE_NEWUSER))
 				                         ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#114: FILE: kernel/fork.c:1653:
+	if ((err = unshare_user_ns(unshare_flags, &new_user)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#185: FILE: kernel/user_namespace.c:30:
+       struct user_namespace *ns;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#186: FILE: kernel/user_namespace.c:31:
+       struct user_struct *new_user;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#187: FILE: kernel/user_namespace.c:32:
+       int n;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#189: FILE: kernel/user_namespace.c:34:
+       ns = kmalloc(sizeof(struct user_namespace), GFP_KERNEL);$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ns)...) over kmalloc(sizeof(struct user_namespace)...)
#189: FILE: kernel/user_namespace.c:34:
+       ns = kmalloc(sizeof(struct user_namespace), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#190: FILE: kernel/user_namespace.c:35:
+       if (!ns)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#190: FILE: kernel/user_namespace.c:35:
+       if (!ns)
+               return NULL;

ERROR:CODE_INDENT: code indent should use tabs where possible
#191: FILE: kernel/user_namespace.c:36:
+               return NULL;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#191: FILE: kernel/user_namespace.c:36:
+               return NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#193: FILE: kernel/user_namespace.c:38:
+       kref_init(&ns->kref);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#195: FILE: kernel/user_namespace.c:40:
+       for(n = 0; n < UIDHASH_SZ; ++n)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#195: FILE: kernel/user_namespace.c:40:
+       for(n = 0; n < UIDHASH_SZ; ++n)
+               INIT_LIST_HEAD(ns->uidhash_table + n);

ERROR:SPACING: space required before the open parenthesis '('
#195: FILE: kernel/user_namespace.c:40:
+       for(n = 0; n < UIDHASH_SZ; ++n)

ERROR:CODE_INDENT: code indent should use tabs where possible
#196: FILE: kernel/user_namespace.c:41:
+               INIT_LIST_HEAD(ns->uidhash_table + n);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#196: FILE: kernel/user_namespace.c:41:
+               INIT_LIST_HEAD(ns->uidhash_table + n);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#199: FILE: kernel/user_namespace.c:44:
+       ns->root_user = alloc_uid(ns, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#200: FILE: kernel/user_namespace.c:45:
+       if (!ns->root_user) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#200: FILE: kernel/user_namespace.c:45:
+       if (!ns->root_user) {
+               kfree(ns);

ERROR:CODE_INDENT: code indent should use tabs where possible
#201: FILE: kernel/user_namespace.c:46:
+               kfree(ns);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#201: FILE: kernel/user_namespace.c:46:
+               kfree(ns);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#202: FILE: kernel/user_namespace.c:47:
+               return NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#202: FILE: kernel/user_namespace.c:47:
+               return NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#203: FILE: kernel/user_namespace.c:48:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#206: FILE: kernel/user_namespace.c:51:
+       new_user = alloc_uid(ns, current->uid);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#207: FILE: kernel/user_namespace.c:52:
+       if (!new_user) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#207: FILE: kernel/user_namespace.c:52:
+       if (!new_user) {
+               free_uid(ns->root_user);

ERROR:CODE_INDENT: code indent should use tabs where possible
#208: FILE: kernel/user_namespace.c:53:
+               free_uid(ns->root_user);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#208: FILE: kernel/user_namespace.c:53:
+               free_uid(ns->root_user);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#209: FILE: kernel/user_namespace.c:54:
+               kfree(ns);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#209: FILE: kernel/user_namespace.c:54:
+               kfree(ns);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#210: FILE: kernel/user_namespace.c:55:
+               return NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#210: FILE: kernel/user_namespace.c:55:
+               return NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#211: FILE: kernel/user_namespace.c:56:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#213: FILE: kernel/user_namespace.c:58:
+       switch_uid(new_user);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#214: FILE: kernel/user_namespace.c:59:
+       return ns;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#221: FILE: kernel/user_namespace.c:66:
+int unshare_user_ns(unsigned long flags,
+			struct user_namespace **new_user)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#223: FILE: kernel/user_namespace.c:68:
+       if (flags & CLONE_NEWUSER) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#223: FILE: kernel/user_namespace.c:68:
+       if (flags & CLONE_NEWUSER) {
+               if (!capable(CAP_SYS_ADMIN))

ERROR:CODE_INDENT: code indent should use tabs where possible
#224: FILE: kernel/user_namespace.c:69:
+               if (!capable(CAP_SYS_ADMIN))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#224: FILE: kernel/user_namespace.c:69:
+               if (!capable(CAP_SYS_ADMIN))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#224: FILE: kernel/user_namespace.c:69:
+               if (!capable(CAP_SYS_ADMIN))
+                       return -EPERM;

ERROR:CODE_INDENT: code indent should use tabs where possible
#225: FILE: kernel/user_namespace.c:70:
+                       return -EPERM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#225: FILE: kernel/user_namespace.c:70:
+                       return -EPERM;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#227: FILE: kernel/user_namespace.c:72:
+               *new_user = clone_user_ns(current->nsproxy->user_ns);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#227: FILE: kernel/user_namespace.c:72:
+               *new_user = clone_user_ns(current->nsproxy->user_ns);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#228: FILE: kernel/user_namespace.c:73:
+               if (!*new_user)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#228: FILE: kernel/user_namespace.c:73:
+               if (!*new_user)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#228: FILE: kernel/user_namespace.c:73:
+               if (!*new_user)
+                       return -ENOMEM;

ERROR:CODE_INDENT: code indent should use tabs where possible
#229: FILE: kernel/user_namespace.c:74:
+                       return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#229: FILE: kernel/user_namespace.c:74:
+                       return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#230: FILE: kernel/user_namespace.c:75:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#232: FILE: kernel/user_namespace.c:77:
+       return 0;$

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.07789.commit.6aa7ab26ff80284277c002a20f2fe0d486052b46 total: 14 errors, 38 warnings, 6 checks, 193 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.07789.commit.6aa7ab26ff80284277c002a20f2fe0d486052b46 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
