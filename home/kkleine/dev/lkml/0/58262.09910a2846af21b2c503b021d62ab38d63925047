ERROR:TRAILING_WHITESPACE: trailing whitespace
#80: FILE: kernel/sys.c:417:
+ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#80: FILE: kernel/sys.c:417:
+ $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#82: FILE: kernel/sys.c:419:
+int srcu_notifier_chain_register(struct srcu_notifier_head *nh,
+		struct notifier_block *n)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#100: FILE: kernel/sys.c:437:
+EXPORT_SYMBOL_GPL(srcu_notifier_chain_register);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#113: FILE: kernel/sys.c:450:
+int srcu_notifier_chain_unregister(struct srcu_notifier_head *nh,
+		struct notifier_block *n)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#132: FILE: kernel/sys.c:469:
+EXPORT_SYMBOL_GPL(srcu_notifier_chain_unregister);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#150: FILE: kernel/sys.c:487:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#150: FILE: kernel/sys.c:487:
+ $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#152: FILE: kernel/sys.c:489:
+int srcu_notifier_call_chain(struct srcu_notifier_head *nh,
+		unsigned long val, void *v)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#163: FILE: kernel/sys.c:500:
+EXPORT_SYMBOL_GPL(srcu_notifier_call_chain);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#185: FILE: kernel/sys.c:522:
+EXPORT_SYMBOL_GPL(srcu_init_notifier_head);

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#243: FILE: include/linux/notifier.h:71:
+	struct mutex mutex;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#256: FILE: include/linux/notifier.h:89:
+extern void srcu_init_notifier_head(struct srcu_notifier_head *nh);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#257: FILE: include/linux/notifier.h:90:
+#define srcu_cleanup_notifier_head(name)	\
+		cleanup_srcu_struct(&(name)->srcu);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#275: FILE: include/linux/notifier.h:121:
+extern int srcu_notifier_chain_register(struct srcu_notifier_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct srcu_notifier_head *' should also have an identifier name
#275: FILE: include/linux/notifier.h:121:
+extern int srcu_notifier_chain_register(struct srcu_notifier_head *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct notifier_block *' should also have an identifier name
#275: FILE: include/linux/notifier.h:121:
+extern int srcu_notifier_chain_register(struct srcu_notifier_head *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#276: FILE: include/linux/notifier.h:122:
+extern int srcu_notifier_chain_register(struct srcu_notifier_head *,
+		struct notifier_block *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#284: FILE: include/linux/notifier.h:130:
+extern int srcu_notifier_chain_unregister(struct srcu_notifier_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct srcu_notifier_head *' should also have an identifier name
#284: FILE: include/linux/notifier.h:130:
+extern int srcu_notifier_chain_unregister(struct srcu_notifier_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct notifier_block *' should also have an identifier name
#284: FILE: include/linux/notifier.h:130:
+extern int srcu_notifier_chain_unregister(struct srcu_notifier_head *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#285: FILE: include/linux/notifier.h:131:
+extern int srcu_notifier_chain_unregister(struct srcu_notifier_head *,
+		struct notifier_block *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#293: FILE: include/linux/notifier.h:139:
+extern int srcu_notifier_call_chain(struct srcu_notifier_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct srcu_notifier_head *' should also have an identifier name
#293: FILE: include/linux/notifier.h:139:
+extern int srcu_notifier_call_chain(struct srcu_notifier_head *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#294: FILE: include/linux/notifier.h:140:
+extern int srcu_notifier_call_chain(struct srcu_notifier_head *,
+		unsigned long val, void *v);

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.58262.commit.09910a2846af21b2c503b021d62ab38d63925047 total: 2 errors, 12 warnings, 11 checks, 246 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.58262.commit.09910a2846af21b2c503b021d62ab38d63925047 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
