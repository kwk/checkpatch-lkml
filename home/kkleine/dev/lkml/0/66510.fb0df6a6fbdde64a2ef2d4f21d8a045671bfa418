WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
1. To minimize the overhead incurred when testing to skip caps processing for

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#143: FILE: kernel/Kconfig.caps:5:
+config CPU_RATE_CAPS
+	bool "Support (soft) CPU rate caps"
+	default y
+	---help---
+	  Say y here if you wish to be able to put a (soft) upper limit on
+	  the rate of CPU usage by individual tasks.  A task which has been
+	  allocated a soft CPU rate cap will be limited to that rate of CPU
+	  usage unless there is spare CPU resources available after the needs
+	  of uncapped tasks are met.

Kconfig symbols should have a help text which fully describes
it.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#189: FILE: kernel/sched.c:212:
+#define safe_to_enforce_cap(p) \
+	(!((p)->mutexes_held || (p)->flags & (PF_FREEZE | PF_UIWAKE)))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#230: FILE: kernel/sched.c:253:
+	if (task_being_capped(thisp))
+	    return thisp->prio < thatp->prio;

WARNING:TABSTOP: Statements should start on a tabstop
#231: FILE: kernel/sched.c:254:
+	    return thisp->prio < thatp->prio;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#233: FILE: kernel/sched.c:256:
+	if (task_being_capped(thatp))
+	    return 1;

WARNING:TABSTOP: Statements should start on a tabstop
#234: FILE: kernel/sched.c:257:
+	    return 1;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#350: FILE: kernel/sched.c:375:
+	DECLARE_BITMAP(bitmap, IDLE_PRIO+1); /* include 1 bit for delimiter */
 	                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 40)
#546: FILE: kernel/sched.c:3421:
+			if (task_priority_gt(smt_curr, p) &&
[...]
 					ret = 1;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#547: FILE: kernel/sched.c:3422:
+			if (task_priority_gt(smt_curr, p) &&
 				!TASK_PREEMPTS_CURR(p, smt_rq) &&

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#647: FILE: kernel/sched.c:4106:
+	BUG_ON(prio < 0 || prio > IDLE_PRIO);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->euid != p->uid'
#681: FILE: kernel/sched.c:4559:
+		if (((current->euid != p->uid) && (current->uid != p->uid)) || (delta > 0)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->uid != p->uid'
#681: FILE: kernel/sched.c:4559:
+		if (((current->euid != p->uid) && (current->uid != p->uid)) || (delta > 0)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta > 0'
#681: FILE: kernel/sched.c:4559:
+		if (((current->euid != p->uid) && (current->uid != p->uid)) || (delta > 0)) {

WARNING:TYPO_SPELLING: 'wont' may be misspelled - perhaps 'won't'?
#688: FILE: kernel/sched.c:4566:
+	 * set - but as expected it wont have any effect on scheduling until
 	                            ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#715: FILE: kernel/sched.c:4593:
+EXPORT_SYMBOL(set_cpu_rate_cap);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#726: FILE: kernel/sched.c:5120:
+	idle->prio = idle->normal_prio = IDLE_PRIO;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.66510.commit.fb0df6a6fbdde64a2ef2d4f21d8a045671bfa418 total: 0 errors, 10 warnings, 7 checks, 743 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.66510.commit.fb0df6a6fbdde64a2ef2d4f21d8a045671bfa418 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
