WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#42: 
1. max_shares currently works like a soft limit. The RSS can grow beyond it's

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#127: FILE: mm/vmscan.c:1391:
+unsigned long memctlr_shrink_container_memory(unsigned long nr_pages,
+						struct container *container,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#258: FILE: kernel/res_group/memctlr.c:139:
+	BUG_ON(!res);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rss > res->nr_pages'
#264: FILE: kernel/res_group/memctlr.c:143:
+	if ((rss > res->nr_pages) && (res->nr_pages > 0))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'res->nr_pages > 0'
#264: FILE: kernel/res_group/memctlr.c:143:
+	if ((rss > res->nr_pages) && (res->nr_pages > 0))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'res->nr_pages < rss'
#294: FILE: kernel/res_group/memctlr.c:170:
+	if ((res->nr_pages < rss) && (res->nr_pages > 0)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'res->nr_pages > 0'
#294: FILE: kernel/res_group/memctlr.c:170:
+	if ((res->nr_pages < rss) && (res->nr_pages > 0)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#298: FILE: kernel/res_group/memctlr.c:174:
+^I ^I*/$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#298: FILE: kernel/res_group/memctlr.c:174:
+^I ^I*/$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#298: FILE: kernel/res_group/memctlr.c:174:
+		 * Schedule a job to do so
+	 	*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LINE_SPACING: Missing a blank line after declarations
#314: FILE: kernel/res_group/memctlr.c:190:
+	struct mm_struct *mm = get_task_mm(current);
+	memctlr_inc_rss_mm(page, mm);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#352: FILE: kernel/res_group/memctlr.c:395:
+	i = snprintf(buf, len, "Failed INC RSS Pages %ld\n",
+			atomic_long_read(&failed_inc_rss));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#359: FILE: kernel/res_group/memctlr.c:402:
+	i = snprintf(buf, len, "Failed DEC RSS Pages %ld\n",
+			atomic_long_read(&failed_dec_rss));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rss > res->nr_pages'
#385: FILE: kernel/res_group/memctlr.c:504:
+	if ((rss > res->nr_pages) && (res->nr_pages > 0))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'res->nr_pages > 0'
#385: FILE: kernel/res_group/memctlr.c:504:
+	if ((rss > res->nr_pages) && (res->nr_pages > 0))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#428: FILE: include/linux/memctlr.h:37:
+extern unsigned long memctlr_shrink_container_memory(unsigned long nr_pages,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#429: FILE: include/linux/memctlr.h:38:
+extern unsigned long memctlr_shrink_container_memory(unsigned long nr_pages,
+						struct container *container,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#431: FILE: include/linux/memctlr.h:40:
+extern int memctlr_page_reclaim(struct page *page, void *container,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#433: FILE: include/linux/memctlr.h:42:
+extern int memctlr_over_limit(struct container *container);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!container"
#475: FILE: mm/rmap.c:617:
+	if (container == NULL && overlimit != SC_OVERLIMIT_ALL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'container == vma->vm_mm->container'
#490: FILE: mm/rmap.c:632:
+			if (memctlr_over_limit(vma->vm_mm->container) &&
+				((container == vma->vm_mm->container) ||
+				  (overlimit == SC_OVERLIMIT_ALL))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'overlimit == SC_OVERLIMIT_ALL'
#490: FILE: mm/rmap.c:632:
+			if (memctlr_over_limit(vma->vm_mm->container) &&
+				((container == vma->vm_mm->container) ||
+				  (overlimit == SC_OVERLIMIT_ALL))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#491: FILE: mm/rmap.c:633:
+			if (memctlr_over_limit(vma->vm_mm->container) &&
+				((container == vma->vm_mm->container) ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#509: FILE: mm/rmap.c:651:
+		vma_prio_tree_foreach(vma, &iter, &mapping->i_mmap, pgoff,
+								pgoff) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'container == vma->vm_mm->container'
#510: FILE: mm/rmap.c:652:
+			if (memctlr_over_limit(vma->vm_mm->container) &&
+				((container == vma->vm_mm->container) ||
+				  (overlimit == SC_OVERLIMIT_ALL))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'overlimit == SC_OVERLIMIT_ALL'
#510: FILE: mm/rmap.c:652:
+			if (memctlr_over_limit(vma->vm_mm->container) &&
+				((container == vma->vm_mm->container) ||
+				  (overlimit == SC_OVERLIMIT_ALL))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#511: FILE: mm/rmap.c:653:
+			if (memctlr_over_limit(vma->vm_mm->container) &&
+				((container == vma->vm_mm->container) ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#521: FILE: mm/rmap.c:663:
+		list_for_each_entry(vma, &mapping->i_mmap_nonlinear,
+					shared.vm_set.list) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'container == vma->vm_mm->container'
#522: FILE: mm/rmap.c:664:
+			if (memctlr_over_limit(vma->vm_mm->container) &&
+				((container == vma->vm_mm->container) ||
+				  (overlimit == SC_OVERLIMIT_ALL))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'overlimit == SC_OVERLIMIT_ALL'
#522: FILE: mm/rmap.c:664:
+			if (memctlr_over_limit(vma->vm_mm->container) &&
+				((container == vma->vm_mm->container) ||
+				  (overlimit == SC_OVERLIMIT_ALL))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#523: FILE: mm/rmap.c:665:
+			if (memctlr_over_limit(vma->vm_mm->container) &&
+				((container == vma->vm_mm->container) ||

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.19838.commit.8ba2c3738fc116eb28aa32a544eeb5945903ce6b total: 1 errors, 5 warnings, 25 checks, 455 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.19838.commit.8ba2c3738fc116eb28aa32a544eeb5945903ce6b has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
