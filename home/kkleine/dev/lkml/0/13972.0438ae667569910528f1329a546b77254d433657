CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#64: FILE: fs/buffer.c:2012:
+int generic_cont_expand(struct inode *inode, loff_t size, loff_t *bytes,
+						get_block_t *get_block)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#124: FILE: fs/buffer.c:2048:
+		if (zerofrom & (blocksize-1))
 		                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#125: FILE: fs/buffer.c:2049:
+			*bytes = (*bytes + blocksize-1) & (blocksize-1);
 			                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#125: FILE: fs/buffer.c:2049:
+			*bytes = (*bytes + blocksize-1) & (blocksize-1);
 			                                            ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#135: FILE: fs/buffer.c:2054:
+		status = __block_prepare_write(inode, page, zerofrom,
+						zeroto, get_block);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#139: FILE: fs/buffer.c:2058:
+		memset(kaddr+zerofrom, 0, PAGE_CACHE_SIZE-zerofrom);
 		            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#139: FILE: fs/buffer.c:2058:
+		memset(kaddr+zerofrom, 0, PAGE_CACHE_SIZE-zerofrom);
 		                                         ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#155: FILE: fs/buffer.c:2067:
+			BUG_ON(status == AOP_TRUNCATED_PAGE);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:FUNCTION_ARGUMENTS: function definition argument 'get_block_t *' should also have an identifier name
#304: FILE: include/linux/buffer_head.h:205:
+int generic_cont_expand(struct inode *inode, loff_t size, loff_t *bytes, get_block_t *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#323: FILE: fs/fat/inode.c:127:
+	err = generic_cont_expand(inode, size,
+			&MSDOS_I(inode)->mmu_private, fat_get_block);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#327: FILE: fs/fat/inode.c:131:
+	inode->i_ctime = inode->i_mtime = CURRENT_TIME_SEC;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#391: FILE: include/linux/msdos_fs.h:409:
+extern int fat_cont_expand(struct inode *inode, loff_t size);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.13972.commit.0438ae667569910528f1329a546b77254d433657 total: 0 errors, 2 warnings, 10 checks, 321 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.13972.commit.0438ae667569910528f1329a546b77254d433657 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
