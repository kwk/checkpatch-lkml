WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
This is a driver for the iop DMA/AAU/ADMA units which are capable of pq_xor,

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#85: FILE: drivers/dma/Kconfig:34:
+config RAID5_DMA_WAIT_VIA_REQUEUE
+	bool "raid5-dma: Non-blocking channel switching"
+	depends on RAID5_DMA_ARCH_NEEDS_CHAN_SWITCH && RAID5_DMA && BROKEN
+	default n
+	---help---
+	  This enables the raid5-dma driver to continue to operate on incoming
+	  stripes when it determines that the current stripe must wait for a
+	  a hardware channel to finish operations.  This code is a work in
+	  progress, only say Y to debug the implementation, otherwise say N.
+
 comment "DMA Devices"
 

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#102: FILE: drivers/dma/Kconfig:53:
+config INTEL_IOP_ADMA
+        tristate "Intel IOP ADMA support"
+        depends on DMA_ENGINE && (ARCH_IOP32X || ARCH_IOP33X || ARCH_IOP13XX)
+	select RAID5_DMA_ARCH_NEEDS_CHAN_SWITCH if (ARCH_IOP32X || ARCH_IOP33X)
+        default m
+        ---help---
+          Enable support for the Intel(R) IOP Series RAID engines.
+

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#124: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#129: FILE: drivers/dma/iop-adma.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#143: FILE: drivers/dma/iop-adma.c:15:
+ * this program; if not, write to the Free Software Foundation, Inc., 59$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

WARNING:TYPO_SPELLING: 'asynchrounous' may be misspelled - perhaps 'asynchronous'?
#151: FILE: drivers/dma/iop-adma.c:23:
+ * This driver supports the asynchrounous DMA copy and RAID engines available
                             ^^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#171: FILE: drivers/dma/iop-adma.c:43:
+#define PRINTK(x...) ((void)(IOP_ADMA_DEBUG && printk(x)))

WARNING:TYPO_SPELLING: 'implemenation' may be misspelled - perhaps 'implementation'?
#173: FILE: drivers/dma/iop-adma.c:45:
+/* software zero sum implemenation bits for iop32x */
                      ^^^^^^^^^^^^^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(256) over __attribute__((aligned(256)))
#175: FILE: drivers/dma/iop-adma.c:47:
+char iop32x_zero_result_buffer[PAGE_SIZE] __attribute__((aligned(256)));

WARNING:LINE_SPACING: Missing a blank line after declarations
#187: FILE: drivers/dma/iop-adma.c:59:
+	int stride = slot->stride;
+	while (stride--) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#190: FILE: drivers/dma/iop-adma.c:62:
+		slot = list_entry(slot->slot_node.next,
+				struct iop_adma_desc_slot,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#208: FILE: drivers/dma/iop-adma.c:80:
+	list_for_each_entry_safe(iter, _iter, &iop_chan->chain,
+					chain_node) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#210: FILE: drivers/dma/iop-adma.c:82:
+		PRINTK("%s: [%d] cookie: %d busy: %x next: %x\n",
+			__FUNCTION__, iter->idx, iter->cookie, busy,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#210: FILE: drivers/dma/iop-adma.c:82:
+			__FUNCTION__, iter->idx, iter->cookie, busy,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#213: FILE: drivers/dma/iop-adma.c:85:
+^I^I/* do not advance past the current descriptor loaded into the $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#225: FILE: drivers/dma/iop-adma.c:97:
+			BUG_ON(seen_current++);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#236: FILE: drivers/dma/iop-adma.c:108:
+			PRINTK("%s: add to zero sum group acc: %d this: %d\n", __FUNCTION__,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#237: FILE: drivers/dma/iop-adma.c:109:
+			PRINTK("%s: add to zero sum group acc: %d this: %d\n", __FUNCTION__,
+				iop_chan->result_accumulator, iop_desc_get_zero_result(iter));

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#258: FILE: drivers/dma/iop-adma.c:130:
+					PRINTK("%s: start zero sum group acc: %d this: %d\n", __FUNCTION__,

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#258: FILE: drivers/dma/iop-adma.c:130:
+					PRINTK("%s: start zero sum group acc: %d this: %d\n", __FUNCTION__,

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#259: FILE: drivers/dma/iop-adma.c:131:
+						iop_chan->result_accumulator, iop_desc_get_zero_result(iter));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#259: FILE: drivers/dma/iop-adma.c:131:
+					PRINTK("%s: start zero sum group acc: %d this: %d\n", __FUNCTION__,
+						iop_chan->result_accumulator, iop_desc_get_zero_result(iter));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#266: FILE: drivers/dma/iop-adma.c:138:
+^I$

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#270: FILE: drivers/dma/iop-adma.c:142:
+					PRINTK("%s: end zero sum group acc: %d this: %d\n", __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#270: FILE: drivers/dma/iop-adma.c:142:
+					PRINTK("%s: end zero sum group acc: %d this: %d\n", __FUNCTION__,

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#271: FILE: drivers/dma/iop-adma.c:143:
+						*iter->xor_check_result, iop_desc_get_zero_result(iter));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#271: FILE: drivers/dma/iop-adma.c:143:
+					PRINTK("%s: end zero sum group acc: %d this: %d\n", __FUNCTION__,
+						*iter->xor_check_result, iop_desc_get_zero_result(iter));

ERROR:SPACING: space required before the open parenthesis '('
#302: FILE: drivers/dma/iop-adma.c:174:
+				while(src_cnt--) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#304: FILE: drivers/dma/iop-adma.c:176:
+					addr = iop_desc_get_src_addr(iter,
+								iop_chan,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#307: FILE: drivers/dma/iop-adma.c:179:
+					dma_unmap_page(dev, addr, len,
+						DMA_TO_DEVICE);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#316: FILE: drivers/dma/iop-adma.c:188:
+^I^I/* leave the last descriptor in the chain $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#323: FILE: drivers/dma/iop-adma.c:195:
+		PRINTK("iop adma%d: cleanup %d stride %d\n",
+		iop_chan->device->id, iter->idx, iter->stride);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#329: FILE: drivers/dma/iop-adma.c:201:
+	BUG_ON(!seen_current);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#335: FILE: drivers/dma/iop-adma.c:207:
+		PRINTK("iop adma%d: completed cookie %d\n",
+		iop_chan->device->id, cookie);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#348: FILE: drivers/dma/iop-adma.c:220:
+__iop_adma_alloc_slots(struct iop_adma_chan *iop_chan, int num_slots,
+			int slots_per_op, int recurse)

WARNING:LINE_SPACING: Missing a blank line after declarations
#359: FILE: drivers/dma/iop-adma.c:231:
+		int slots_found = 0;
+		if (i == 0)

CHECK:BRACES: braces {} should be used on all arms of this statement
#359: FILE: drivers/dma/iop-adma.c:231:
+		if (i == 0)
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#361: FILE: drivers/dma/iop-adma.c:233:
+		else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#363: FILE: drivers/dma/iop-adma.c:235:
+			iter = list_entry(&iop_chan->all_slots,
+				struct iop_adma_desc_slot,

CHECK:BRACES: braces {} should be used on all arms of this statement
#381: FILE: drivers/dma/iop-adma.c:253:
+				if (iop_desc_is_aligned(iter, slots_per_op))
[...]
+				else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#383: FILE: drivers/dma/iop-adma.c:255:
+				else {

WARNING:SPLIT_STRING: quoted string split across lines
#393: FILE: drivers/dma/iop-adma.c:265:
+					PRINTK("iop adma%d: allocated [%d] "
+						"(desc %p phys: %#x) stride %d\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#399: FILE: drivers/dma/iop-adma.c:271:
+					list_add_tail(&iter->chain_node,
+							&iop_chan->chain);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#407: FILE: drivers/dma/iop-adma.c:279:
+						iter = list_entry(iter->slot_node.next,
+								struct iop_adma_desc_slot,

CHECK:BRACES: braces {} should be used on all arms of this statement
#418: FILE: drivers/dma/iop-adma.c:290:
+	if (recurse) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#421: FILE: drivers/dma/iop-adma.c:293:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#427: FILE: drivers/dma/iop-adma.c:299:
+iop_adma_alloc_slots(struct iop_adma_chan *iop_chan,
+			int num_slots,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#445: FILE: drivers/dma/iop-adma.c:317:
+^I$

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#451: FILE: drivers/dma/iop-adma.c:323:
+	for (; i < (plat_data->pool_size/IOP_ADMA_SLOT_SIZE); i++) {
 	                                ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#454: FILE: drivers/dma/iop-adma.c:326:
+			printk(KERN_INFO "IOP ADMA Channel only initialized"

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#454: FILE: drivers/dma/iop-adma.c:326:
+		if (!slot) {
+			printk(KERN_INFO "IOP ADMA Channel only initialized"

WARNING:SPLIT_STRING: quoted string split across lines
#455: FILE: drivers/dma/iop-adma.c:327:
+			printk(KERN_INFO "IOP ADMA Channel only initialized"
+				" %d descriptor slots", i--);

CHECK:SPACING: No space is necessary after a cast
#458: FILE: drivers/dma/iop-adma.c:330:
+		hw_desc = (char *) iop_chan->device->dma_desc_pool_virt;

CHECK:SPACING: No space is necessary after a cast
#459: FILE: drivers/dma/iop-adma.c:331:
+		slot->hw_desc = (void *) &hw_desc[i * IOP_ADMA_SLOT_SIZE];

CHECK:SPACING: No space is necessary after a cast
#463: FILE: drivers/dma/iop-adma.c:335:
+		hw_desc = (char *) iop_chan->device->dma_desc_pool;

CHECK:SPACING: No space is necessary after a cast
#464: FILE: drivers/dma/iop-adma.c:336:
+		slot->phys = (dma_addr_t) &hw_desc[i * IOP_ADMA_SLOT_SIZE];

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#473: FILE: drivers/dma/iop-adma.c:345:
+		iop_chan->last_used = list_entry(iop_chan->all_slots.next,
+					struct iop_adma_desc_slot,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#478: FILE: drivers/dma/iop-adma.c:350:
+	PRINTK("iop adma%d: allocated %d descriptor slots last_used: %p\n",
+		iop_chan->device->id, i, iop_chan->last_used);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#488: FILE: drivers/dma/iop-adma.c:360:
+			BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#496: FILE: drivers/dma/iop-adma.c:368:
+static inline void iop_chan_chain_desc(struct iop_adma_chan *iop_chan,
+					struct iop_adma_desc_slot *desc)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#505: FILE: drivers/dma/iop-adma.c:377:
+static inline void iop_desc_assign_cookie(struct iop_adma_chan *iop_chan,
+					struct iop_adma_desc_slot *desc)

WARNING:LINE_SPACING: Missing a blank line after declarations
#508: FILE: drivers/dma/iop-adma.c:380:
+	dma_cookie_t cookie = iop_chan->common.cookie;
+	cookie++;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#511: FILE: drivers/dma/iop-adma.c:383:
+	iop_chan->common.cookie = desc->cookie = cookie;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#513: FILE: drivers/dma/iop-adma.c:385:
+	PRINTK("iop adma%d: %s cookie %d slot %d\n",
+	iop_chan->device->id, __FUNCTION__, cookie, desc->idx);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#513: FILE: drivers/dma/iop-adma.c:385:
+	iop_chan->device->id, __FUNCTION__, cookie, desc->idx);

ERROR:CODE_INDENT: code indent should use tabs where possible
#525: FILE: drivers/dma/iop-adma.c:397:
+                                       union dmaengine_addr dest,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#525: FILE: drivers/dma/iop-adma.c:397:
+                                       union dmaengine_addr dest,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#527: FILE: drivers/dma/iop-adma.c:399:
+                                       union dmaengine_addr src,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#527: FILE: drivers/dma/iop-adma.c:399:
+                                       union dmaengine_addr src,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#529: FILE: drivers/dma/iop-adma.c:401:
+                                       size_t len,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#529: FILE: drivers/dma/iop-adma.c:401:
+                                       size_t len,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#530: FILE: drivers/dma/iop-adma.c:402:
+                                       unsigned long flags)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#530: FILE: drivers/dma/iop-adma.c:402:
+                                       unsigned long flags)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#543: FILE: drivers/dma/iop-adma.c:415:
+	PRINTK("iop adma%d: %s len: %u flags: %#lx\n",
+	iop_chan->device->id, __FUNCTION__, len, flags);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#543: FILE: drivers/dma/iop-adma.c:415:
+	iop_chan->device->id, __FUNCTION__, len, flags);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#548: FILE: drivers/dma/iop-adma.c:420:
+		src.dma = dma_map_single(&iop_chan->device->pdev->dev,
+			src.buf, len, DMA_TO_DEVICE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#552: FILE: drivers/dma/iop-adma.c:424:
+		src.dma = dma_map_page(&iop_chan->device->pdev->dev,
+			src.pg, src_off, len, DMA_TO_DEVICE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#563: FILE: drivers/dma/iop-adma.c:435:
+		dest.dma = dma_map_single(&iop_chan->device->pdev->dev,
+			dest.buf, len, DMA_FROM_DEVICE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#567: FILE: drivers/dma/iop-adma.c:439:
+		dest.dma = dma_map_page(&iop_chan->device->pdev->dev,
+			dest.pg, dest_off, len, DMA_FROM_DEVICE);

ERROR:CODE_INDENT: code indent should use tabs where possible
#599: FILE: drivers/dma/iop-adma.c:471:
+                                       union dmaengine_addr dest,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#599: FILE: drivers/dma/iop-adma.c:471:
+                                       union dmaengine_addr dest,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#601: FILE: drivers/dma/iop-adma.c:473:
+                                       int val,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#601: FILE: drivers/dma/iop-adma.c:473:
+                                       int val,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#602: FILE: drivers/dma/iop-adma.c:474:
+                                       size_t len,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#602: FILE: drivers/dma/iop-adma.c:474:
+                                       size_t len,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#603: FILE: drivers/dma/iop-adma.c:475:
+                                       unsigned long flags)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#603: FILE: drivers/dma/iop-adma.c:475:
+                                       unsigned long flags)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#616: FILE: drivers/dma/iop-adma.c:488:
+	PRINTK("iop adma%d: %s len: %u flags: %#lx\n",
+	iop_chan->device->id, __FUNCTION__, len, flags);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#616: FILE: drivers/dma/iop-adma.c:488:
+	iop_chan->device->id, __FUNCTION__, len, flags);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#621: FILE: drivers/dma/iop-adma.c:493:
+		dest.dma = dma_map_single(&iop_chan->device->pdev->dev,
+			dest.buf, len, DMA_FROM_DEVICE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#625: FILE: drivers/dma/iop-adma.c:497:
+		dest.dma = dma_map_page(&iop_chan->device->pdev->dev,
+			dest.pg, dest_off, len, DMA_FROM_DEVICE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#668: FILE: drivers/dma/iop-adma.c:540:
+static dma_cookie_t do_iop_adma_xor(struct dma_chan *chan,
+					union dmaengine_addr dest,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#689: FILE: drivers/dma/iop-adma.c:561:
+	PRINTK("iop adma%d: %s src_cnt: %d len: %u flags: %lx\n",
+	iop_chan->device->id, __FUNCTION__, src_cnt, len, flags);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#689: FILE: drivers/dma/iop-adma.c:561:
+	iop_chan->device->id, __FUNCTION__, src_cnt, len, flags);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#697: FILE: drivers/dma/iop-adma.c:569:
+		if ((flags & DMA_DEST_BUF) &&
+			dest.buf == (void *) iop32x_zero_result_buffer) {

CHECK:SPACING: No space is necessary after a cast
#697: FILE: drivers/dma/iop-adma.c:569:
+			dest.buf == (void *) iop32x_zero_result_buffer) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#699: FILE: drivers/dma/iop-adma.c:571:
+			PRINTK("%s: iop32x zero sum emulation requested\n",
+				__FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#699: FILE: drivers/dma/iop-adma.c:571:
+				__FUNCTION__);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#712: FILE: drivers/dma/iop-adma.c:584:
+			dest.dma = dma_map_page(dev, dest.pg, dest_off, len,
+					DMA_FROM_DEVICE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#716: FILE: drivers/dma/iop-adma.c:588:
+			dest.dma = dma_map_single(dev, dest.buf, len,
+					DMA_FROM_DEVICE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#732: FILE: drivers/dma/iop-adma.c:604:
+				iop_desc_set_xor_src_addr(sw_desc,
+							src_cnt,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#741: FILE: drivers/dma/iop-adma.c:613:
+				iop_desc_set_xor_src_addr(sw_desc,
+							src_cnt,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#776: FILE: drivers/dma/iop-adma.c:648:
+static dma_cookie_t do_iop_adma_zero_sum(struct dma_chan *chan,
+					union dmaengine_addr src,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#795: FILE: drivers/dma/iop-adma.c:667:
+	PRINTK("iop adma%d: %s src_cnt: %d len: %u flags: %lx\n",
+	iop_chan->device->id, __FUNCTION__, src_cnt, len, flags);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#795: FILE: drivers/dma/iop-adma.c:667:
+	iop_chan->device->id, __FUNCTION__, src_cnt, len, flags);

WARNING:LINE_SPACING: Missing a blank line after declarations
#802: FILE: drivers/dma/iop-adma.c:674:
+		struct device *dev = &iop_chan->device->pdev->dev;
+		iop_chan->pending += iop_desc_init_zero_sum(sw_desc, src_cnt,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#815: FILE: drivers/dma/iop-adma.c:687:
+				iop_desc_set_zero_sum_src_addr(sw_desc,
+						src_cnt,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#824: FILE: drivers/dma/iop-adma.c:696:
+				iop_desc_set_zero_sum_src_addr(sw_desc,
+						src_cnt,

WARNING:LINE_SPACING: Missing a blank line after declarations
#847: FILE: drivers/dma/iop-adma.c:719:
+			struct iop_adma_desc_slot *desc;
+			desc = list_entry(iop_chan->chain.prev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#848: FILE: drivers/dma/iop-adma.c:720:
+			desc = list_entry(iop_chan->chain.prev,
+				struct iop_adma_desc_slot,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#869: FILE: drivers/dma/iop-adma.c:741:
+/* iop32x does not support zero sum in hardware, so we simulate $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#874: FILE: drivers/dma/iop-adma.c:746:
+static dma_cookie_t do_iop_adma_zero_sum(struct dma_chan *chan,
+					union dmaengine_addr src,

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#882: FILE: drivers/dma/iop-adma.c:754:
+	static dma_cookie_t last_zero_result_cookie = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#893: FILE: drivers/dma/iop-adma.c:765:
+		printk(KERN_ERR "iop32x performs zero sum with a %d byte buffer, %d"

ERROR:CODE_INDENT: code indent should use tabs where possible
#894: FILE: drivers/dma/iop-adma.c:766:
+^I^I  ^I" bytes is too large\n", sizeof(iop32x_zero_result_buffer),$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#894: FILE: drivers/dma/iop-adma.c:766:
+^I^I  ^I" bytes is too large\n", sizeof(iop32x_zero_result_buffer),$

WARNING:SPLIT_STRING: quoted string split across lines
#894: FILE: drivers/dma/iop-adma.c:766:
+		printk(KERN_ERR "iop32x performs zero sum with a %d byte buffer, %d"
+		  	" bytes is too large\n", sizeof(iop32x_zero_result_buffer),

ERROR:CODE_INDENT: code indent should use tabs where possible
#895: FILE: drivers/dma/iop-adma.c:767:
+^I^I  ^Ilen);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#895: FILE: drivers/dma/iop-adma.c:767:
+^I^I  ^Ilen);$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#896: FILE: drivers/dma/iop-adma.c:768:
+		BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#903: FILE: drivers/dma/iop-adma.c:775:
+		PRINTK("%s: waiting for last_zero_result_cookie: %d\n",
+			__FUNCTION__, last_zero_result_cookie);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#903: FILE: drivers/dma/iop-adma.c:775:
+			__FUNCTION__, last_zero_result_cookie);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#909: FILE: drivers/dma/iop-adma.c:781:
+	PRINTK("iop adma%d: %s src_cnt: %d len: %u flags: %lx\n",
+	iop_chan->device->id, __FUNCTION__, src_cnt, len, flags);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#909: FILE: drivers/dma/iop-adma.c:781:
+	iop_chan->device->id, __FUNCTION__, src_cnt, len, flags);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#915: FILE: drivers/dma/iop-adma.c:787:
+	ret = do_iop_adma_xor(chan, dest_addr, 0, src, src_cnt, src_off,
+				len, flags);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#934: FILE: drivers/dma/iop-adma.c:806:
+	list_for_each_entry_safe(iter, _iter, &iop_chan->chain,
+					chain_node) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#946: FILE: drivers/dma/iop-adma.c:818:
+	PRINTK("iop adma%d %s slots_allocated %d\n", iop_chan->device->id,
+		__FUNCTION__, iop_chan->slots_allocated);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#946: FILE: drivers/dma/iop-adma.c:818:
+		__FUNCTION__, iop_chan->slots_allocated);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#951: FILE: drivers/dma/iop-adma.c:823:
+		printk(KERN_ERR "IOP: Freeing %d in use descriptors!\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#952: FILE: drivers/dma/iop-adma.c:824:
+		printk(KERN_ERR "IOP: Freeing %d in use descriptors!\n",
+			in_use_descs - 1);

ERROR:CODE_INDENT: code indent should use tabs where possible
#961: FILE: drivers/dma/iop-adma.c:833:
+                                            dma_cookie_t cookie,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#961: FILE: drivers/dma/iop-adma.c:833:
+                                            dma_cookie_t cookie,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#962: FILE: drivers/dma/iop-adma.c:834:
+                                            dma_cookie_t *done,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#962: FILE: drivers/dma/iop-adma.c:834:
+                                            dma_cookie_t *done,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#963: FILE: drivers/dma/iop-adma.c:835:
+                                            dma_cookie_t *used)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#963: FILE: drivers/dma/iop-adma.c:835:
+                                            dma_cookie_t *used)$

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#974: FILE: drivers/dma/iop-adma.c:846:
+		*done= last_complete;
 		     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#988: FILE: drivers/dma/iop-adma.c:860:
+		*done= last_complete;
 		     ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1014: FILE: drivers/dma/iop-adma.c:886:
+	struct iop_adma_chan *iop_chan = to_iop_adma_chan(chan);
+	spin_lock(&iop_chan->lock);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1027: FILE: drivers/dma/iop-adma.c:899:
+static int __devinit iop_adma_memcpy_self_test(struct iop_adma_device *device)

CHECK:SPACING: No space is necessary after a cast
#1047: FILE: drivers/dma/iop-adma.c:919:
+		((u8 *) src.buf)[i] = (u8)i;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1053: FILE: drivers/dma/iop-adma.c:925:
+^I                        struct dma_chan,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1054: FILE: drivers/dma/iop-adma.c:926:
+^I                        device_node);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1061: FILE: drivers/dma/iop-adma.c:933:
+	cookie = do_iop_adma_memcpy(dma_chan, dest, 0, src, 0,
+		IOP_ADMA_TEST_SIZE, DMA_SRC_BUF | DMA_DEST_BUF);

WARNING:MSLEEP: msleep < 20ms can sleep for up to 20ms; see Documentation/timers/timers-howto.rst
#1063: FILE: drivers/dma/iop-adma.c:935:
+	msleep(1);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1066: FILE: drivers/dma/iop-adma.c:938:
+		printk(KERN_ERR "iop adma%d: Self-test copy timed out, disabling\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1067: FILE: drivers/dma/iop-adma.c:939:
+		printk(KERN_ERR "iop adma%d: Self-test copy timed out, disabling\n",
+			device->id);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1074: FILE: drivers/dma/iop-adma.c:946:
+		printk(KERN_ERR "iop adma%d: Self-test copy failed compare, disabling\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1075: FILE: drivers/dma/iop-adma.c:947:
+		printk(KERN_ERR "iop adma%d: Self-test copy failed compare, disabling\n",
+			device->id);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1089: FILE: drivers/dma/iop-adma.c:961:
+static int __devinit iop_adma_xor_zero_sum_self_test(struct iop_adma_device *device)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1122: FILE: drivers/dma/iop-adma.c:994:
+		u8 *ptr = page_address(xor_srcs[src_idx]);
+		for (i = 0; i < PAGE_SIZE; i++)

CHECK:SPACING: No space is necessary after a cast
#1127: FILE: drivers/dma/iop-adma.c:999:
+		cmp_byte ^= (u8) (1 << src_idx);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1134: FILE: drivers/dma/iop-adma.c:1006:
+^I                        struct dma_chan,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1135: FILE: drivers/dma/iop-adma.c:1007:
+^I                        device_node);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1144: FILE: drivers/dma/iop-adma.c:1016:
+	cookie = do_iop_adma_xor(dma_chan, dest, 0, src,
+		IOP_ADMA_NUM_SRC_TST, 0, PAGE_SIZE, DMA_DEST_PAGE | DMA_SRC_PAGES);

WARNING:MSLEEP: msleep < 20ms can sleep for up to 20ms; see Documentation/timers/timers-howto.rst
#1146: FILE: drivers/dma/iop-adma.c:1018:
+	msleep(8);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1149: FILE: drivers/dma/iop-adma.c:1021:
+		printk(KERN_ERR "iop_adma: Self-test xor timed out, disabling\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#1157: FILE: drivers/dma/iop-adma.c:1029:
+		u32 *ptr = page_address(dest.pg);
+		if (ptr[i] != cmp_word) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1158: FILE: drivers/dma/iop-adma.c:1030:
+			printk(KERN_ERR "iop_adma: Self-test xor failed compare, disabling\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1172: FILE: drivers/dma/iop-adma.c:1044:
+	cookie = do_iop_adma_zero_sum(dma_chan, src, IOP_ADMA_NUM_SRC_TST + 1,
+				0, PAGE_SIZE, &zero_sum_result, DMA_SRC_PAGES);

WARNING:MSLEEP: msleep < 20ms can sleep for up to 20ms; see Documentation/timers/timers-howto.rst
#1174: FILE: drivers/dma/iop-adma.c:1046:
+	msleep(8);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1177: FILE: drivers/dma/iop-adma.c:1049:
+		printk(KERN_ERR "iop_adma: Self-test zero sum timed out, disabling\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1183: FILE: drivers/dma/iop-adma.c:1055:
+		printk(KERN_ERR "iop_adma: Self-test zero sum failed compare, disabling\n");

WARNING:MSLEEP: msleep < 20ms can sleep for up to 20ms; see Documentation/timers/timers-howto.rst
#1191: FILE: drivers/dma/iop-adma.c:1063:
+	msleep(8);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1194: FILE: drivers/dma/iop-adma.c:1066:
+		printk(KERN_ERR "iop_adma: Self-test memset timed out, disabling\n");

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1200: FILE: drivers/dma/iop-adma.c:1072:
+	for (i = 0; i < PAGE_SIZE/sizeof(u32); i++) {
 	                         ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1202: FILE: drivers/dma/iop-adma.c:1074:
+		u32 *ptr = page_address(dest.pg);
+		if (ptr[i]) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1203: FILE: drivers/dma/iop-adma.c:1075:
+			printk(KERN_ERR "iop_adma: Self-test memset failed compare, disabling\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1212: FILE: drivers/dma/iop-adma.c:1084:
+	cookie = do_iop_adma_zero_sum(dma_chan, src, IOP_ADMA_NUM_SRC_TST + 1,
+				0, PAGE_SIZE, &zero_sum_result, DMA_SRC_PAGES);

WARNING:MSLEEP: msleep < 20ms can sleep for up to 20ms; see Documentation/timers/timers-howto.rst
#1214: FILE: drivers/dma/iop-adma.c:1086:
+	msleep(8);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1217: FILE: drivers/dma/iop-adma.c:1089:
+		printk(KERN_ERR "iop_adma: Self-test non-zero sum timed out, disabling\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1223: FILE: drivers/dma/iop-adma.c:1095:
+		printk(KERN_ERR "iop_adma: Self-test non-zero sum failed compare, disabling\n");

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#1238: FILE: drivers/dma/iop-adma.c:1110:
+static int __devexit iop_adma_remove(struct platform_device *dev)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1246: FILE: drivers/dma/iop-adma.c:1118:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#1251: FILE: drivers/dma/iop-adma.c:1123:
+		unsigned int irq;
+		irq = platform_get_irq(dev, i);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1256: FILE: drivers/dma/iop-adma.c:1128:
+	dma_free_coherent(&dev->dev, plat_data->pool_size,
+			device->dma_desc_pool_virt, device->dma_desc_pool);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1260: FILE: drivers/dma/iop-adma.c:1132:
+		struct resource *res;
+		res = platform_get_resource(dev, IORESOURCE_MEM, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1265: FILE: drivers/dma/iop-adma.c:1137:
+	list_for_each_entry_safe(chan, _chan, &device->common.channels,
+				device_node) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1276: FILE: drivers/dma/iop-adma.c:1148:
+static dma_addr_t iop_adma_map_page(struct dma_chan *chan, struct page *page,
+					unsigned long offset, size_t size,

WARNING:LINE_SPACING: Missing a blank line after declarations
#1280: FILE: drivers/dma/iop-adma.c:1152:
+	struct iop_adma_chan *iop_chan = to_iop_adma_chan(chan);
+	return dma_map_page(&iop_chan->device->pdev->dev, page, offset, size,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1285: FILE: drivers/dma/iop-adma.c:1157:
+static dma_addr_t iop_adma_map_single(struct dma_chan *chan, void *cpu_addr,
+					size_t size, int direction)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1288: FILE: drivers/dma/iop-adma.c:1160:
+	struct iop_adma_chan *iop_chan = to_iop_adma_chan(chan);
+	return dma_map_single(&iop_chan->device->pdev->dev, cpu_addr, size,

WARNING:LINE_SPACING: Missing a blank line after declarations
#1296: FILE: drivers/dma/iop-adma.c:1168:
+	struct iop_adma_chan *iop_chan = to_iop_adma_chan(chan);
+	dma_unmap_page(&iop_chan->device->pdev->dev, handle, size, direction);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1300: FILE: drivers/dma/iop-adma.c:1172:
+static void iop_adma_unmap_single(struct dma_chan *chan, dma_addr_t handle,
+				size_t size, int direction)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1303: FILE: drivers/dma/iop-adma.c:1175:
+	struct iop_adma_chan *iop_chan = to_iop_adma_chan(chan);
+	dma_unmap_single(&iop_chan->device->pdev->dev, handle, size, direction);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1306: FILE: drivers/dma/iop-adma.c:1178:
+extern dma_cookie_t dma_async_do_memcpy_err(struct dma_chan *chan,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1307: FILE: drivers/dma/iop-adma.c:1179:
+extern dma_cookie_t dma_async_do_memcpy_err(struct dma_chan *chan,
+		union dmaengine_addr dest, unsigned int dest_off,

ERROR:CODE_INDENT: code indent should use tabs where possible
#1309: FILE: drivers/dma/iop-adma.c:1181:
+                size_t len, unsigned long flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1309: FILE: drivers/dma/iop-adma.c:1181:
+                size_t len, unsigned long flags);$

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1311: FILE: drivers/dma/iop-adma.c:1183:
+extern dma_cookie_t dma_async_do_xor_err(struct dma_chan *chan,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1312: FILE: drivers/dma/iop-adma.c:1184:
+extern dma_cookie_t dma_async_do_xor_err(struct dma_chan *chan,
+		union dmaengine_addr dest, unsigned int dest_off,

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1316: FILE: drivers/dma/iop-adma.c:1188:
+extern dma_cookie_t dma_async_do_zero_sum_err(struct dma_chan *chan,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1317: FILE: drivers/dma/iop-adma.c:1189:
+extern dma_cookie_t dma_async_do_zero_sum_err(struct dma_chan *chan,
+		union dmaengine_addr src, unsigned int src_cnt,

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1321: FILE: drivers/dma/iop-adma.c:1193:
+extern dma_cookie_t dma_async_do_memset_err(struct dma_chan *chan,

ERROR:CODE_INDENT: code indent should use tabs where possible
#1322: FILE: drivers/dma/iop-adma.c:1194:
+                union dmaengine_addr dest, unsigned int dest_off,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1322: FILE: drivers/dma/iop-adma.c:1194:
+extern dma_cookie_t dma_async_do_memset_err(struct dma_chan *chan,
+                union dmaengine_addr dest, unsigned int dest_off,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1322: FILE: drivers/dma/iop-adma.c:1194:
+                union dmaengine_addr dest, unsigned int dest_off,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1323: FILE: drivers/dma/iop-adma.c:1195:
+                int val, size_t len, unsigned long flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1323: FILE: drivers/dma/iop-adma.c:1195:
+                int val, size_t len, unsigned long flags);$

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1325: FILE: drivers/dma/iop-adma.c:1197:
+static int __devinit iop_adma_probe(struct platform_device *pdev)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1328: FILE: drivers/dma/iop-adma.c:1200:
+	int ret=0, irq_eot=0, irq_eoc=0, irq_err=0, irq, i;
 	       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1328: FILE: drivers/dma/iop-adma.c:1200:
+	int ret=0, irq_eot=0, irq_eoc=0, irq_err=0, irq, i;
 	                  ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1328: FILE: drivers/dma/iop-adma.c:1200:
+	int ret=0, irq_eot=0, irq_eoc=0, irq_err=0, irq, i;
 	                             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1328: FILE: drivers/dma/iop-adma.c:1200:
+	int ret=0, irq_eot=0, irq_eoc=0, irq_err=0, irq, i;
 	                                        ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1340: FILE: drivers/dma/iop-adma.c:1212:
+	if ((adev = kzalloc(sizeof(*adev), GFP_KERNEL)) == NULL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1345: FILE: drivers/dma/iop-adma.c:1217:
+	if ((adev->dma_desc_pool_virt = dma_alloc_writecombine(&pdev->dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1346: FILE: drivers/dma/iop-adma.c:1218:
+	if ((adev->dma_desc_pool_virt = dma_alloc_writecombine(&pdev->dev,
+					plat_data->pool_size,

WARNING:TYPO_SPELLING: 'allocted' may be misspelled - perhaps 'allocated'?
#1353: FILE: drivers/dma/iop-adma.c:1225:
+	PRINTK("%s: allocted descriptor pool virt %p phys %p\n",
 	            ^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1354: FILE: drivers/dma/iop-adma.c:1226:
+	PRINTK("%s: allocted descriptor pool virt %p phys %p\n",
+	__FUNCTION__, adev->dma_desc_pool_virt, (void *) adev->dma_desc_pool);

CHECK:SPACING: No space is necessary after a cast
#1354: FILE: drivers/dma/iop-adma.c:1226:
+	__FUNCTION__, adev->dma_desc_pool_virt, (void *) adev->dma_desc_pool);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1354: FILE: drivers/dma/iop-adma.c:1226:
+	__FUNCTION__, adev->dma_desc_pool_virt, (void *) adev->dma_desc_pool);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1361: FILE: drivers/dma/iop-adma.c:1233:
+		if (irq < 0)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1363: FILE: drivers/dma/iop-adma.c:1235:
+		else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1368: FILE: drivers/dma/iop-adma.c:1240:
+				ret = request_irq(irq, iop_adma_eot_handler,
+					 0, pdev->name, adev);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1377: FILE: drivers/dma/iop-adma.c:1249:
+				ret = request_irq(irq, iop_adma_eoc_handler,
+					0, pdev->name, adev);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1386: FILE: drivers/dma/iop-adma.c:1258:
+				ret = request_irq(irq, iop_adma_err_handler,
+					0, pdev->name, adev);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1429: FILE: drivers/dma/iop-adma.c:1301:
+	if ((iop_chan = kzalloc(sizeof(*iop_chan), GFP_KERNEL)) == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1455: FILE: drivers/dma/iop-adma.c:1327:
+	printk(KERN_INFO "Intel(R) IOP ADMA Engine found [%d]: "

WARNING:SPLIT_STRING: quoted string split across lines
#1456: FILE: drivers/dma/iop-adma.c:1328:
+	printk(KERN_INFO "Intel(R) IOP ADMA Engine found [%d]: "
+		"( %s%s%s%s%s%s%s%s%s)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1480: FILE: drivers/dma/iop-adma.c:1352:
+	dma_free_coherent(&adev->pdev->dev, plat_data->pool_size,
+			adev->dma_desc_pool_virt, adev->dma_desc_pool);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1513: FILE: drivers/dma/iop-adma.c:1385:
+		iop_chan->common.cookie = sw_desc->cookie = cookie;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1516: FILE: drivers/dma/iop-adma.c:1388:
+		BUG_ON(iop_chan_is_busy(iop_chan));

CHECK:BRACES: Unbalanced braces around else statement
#1529: FILE: drivers/dma/iop-adma.c:1401:
+	} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1530: FILE: drivers/dma/iop-adma.c:1402:
+		printk(KERN_ERR "iop adma%d failed to allocate null descriptor\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1531: FILE: drivers/dma/iop-adma.c:1403:
+		printk(KERN_ERR "iop adma%d failed to allocate null descriptor\n",
+			iop_chan->device->id);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1560: FILE: drivers/dma/iop-adma.c:1432:
+		iop_chan->common.cookie = sw_desc->cookie = cookie;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1563: FILE: drivers/dma/iop-adma.c:1435:
+		BUG_ON(iop_chan_is_busy(iop_chan));

CHECK:BRACES: Unbalanced braces around else statement
#1576: FILE: drivers/dma/iop-adma.c:1448:
+	} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1577: FILE: drivers/dma/iop-adma.c:1449:
+		printk(KERN_ERR "iop adma%d failed to allocate null descriptor\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1578: FILE: drivers/dma/iop-adma.c:1450:
+		printk(KERN_ERR "iop adma%d failed to allocate null descriptor\n",
+			iop_chan->device->id);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1591: FILE: drivers/dma/iop-adma.c:1463:
+static int __init iop_adma_init (void)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1596: FILE: drivers/dma/iop-adma.c:1468:
+static void __exit iop_adma_exit (void)

WARNING:RETURN_VOID: void function return statements are not generally useful
#1600: FILE: drivers/dma/iop-adma.c:1472:
+	return;
+}

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1620: FILE: drivers/dma/iop-adma.c:1492:
+EXPORT_SYMBOL_GPL(__arch_raid5_dma_chan_request);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1621: FILE: drivers/dma/iop-adma.c:1493:
+EXPORT_SYMBOL_GPL(__arch_raid5_dma_next_channel);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1622: FILE: drivers/dma/iop-adma.c:1494:
+EXPORT_SYMBOL_GPL(__arch_raid5_dma_check_channel);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1636: FILE: include/asm-arm/hardware/iop_adma.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1650: FILE: include/asm-arm/hardware/iop_adma.h:15:
+ * this program; if not, write to the Free Software Foundation, Inc., 59$

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1694: FILE: include/asm-arm/hardware/iop_adma.h:59:
+	spinlock_t lock;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1726: FILE: include/asm-arm/hardware/iop_adma.h:91:
+        int hw_id;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1726: FILE: include/asm-arm/hardware/iop_adma.h:91:
+        int hw_id;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1727: FILE: include/asm-arm/hardware/iop_adma.h:92:
+        unsigned long capabilities;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1727: FILE: include/asm-arm/hardware/iop_adma.h:92:
+        unsigned long capabilities;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1728: FILE: include/asm-arm/hardware/iop_adma.h:93:
+        size_t pool_size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1728: FILE: include/asm-arm/hardware/iop_adma.h:93:
+        size_t pool_size;$

CHECK:SPACING: No space is necessary after a cast
#1732: FILE: include/asm-arm/hardware/iop_adma.h:97:
+#define iop_hw_desc_slot_idx(hw_desc, idx) ( (void *) (((unsigned long) hw_desc) + ((idx) << 5)) )

ERROR:SPACING: space prohibited after that open parenthesis '('
#1732: FILE: include/asm-arm/hardware/iop_adma.h:97:
+#define iop_hw_desc_slot_idx(hw_desc, idx) ( (void *) (((unsigned long) hw_desc) + ((idx) << 5)) )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1732: FILE: include/asm-arm/hardware/iop_adma.h:97:
+#define iop_hw_desc_slot_idx(hw_desc, idx) ( (void *) (((unsigned long) hw_desc) + ((idx) << 5)) )

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.39178.commit.e68e1e714675cafc86d0c24cd2b873f3276825ef total: 43 errors, 109 warnings, 97 checks, 1648 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.39178.commit.e68e1e714675cafc86d0c24cd2b873f3276825ef has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
