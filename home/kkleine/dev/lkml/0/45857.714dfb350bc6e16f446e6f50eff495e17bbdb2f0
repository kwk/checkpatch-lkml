WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
This patch splits the single main runqueue into several runqueues on each CPU.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#146: FILE: kernel/sched.c:720:
+static void enqueue_task_grp(struct task_grp_rq *tgrq, struct prio_array *array,
+				int head)

ERROR:CODE_INDENT: code indent should use tabs where possible
#151: FILE: kernel/sched.c:725:
+        ^Ilist_add(&tgrq->list, array->queue + tgrq->prio);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#151: FILE: kernel/sched.c:725:
+        ^Ilist_add(&tgrq->list, array->queue + tgrq->prio);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#151: FILE: kernel/sched.c:725:
+        ^Ilist_add(&tgrq->list, array->queue + tgrq->prio);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#152: FILE: kernel/sched.c:726:
+        __set_bit(tgrq->prio, array->bitmap);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#152: FILE: kernel/sched.c:726:
+        __set_bit(tgrq->prio, array->bitmap);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#153: FILE: kernel/sched.c:727:
+        array->nr_active++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#153: FILE: kernel/sched.c:727:
+        array->nr_active++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#154: FILE: kernel/sched.c:728:
+        tgrq->rq_array = array;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#154: FILE: kernel/sched.c:728:
+        tgrq->rq_array = array;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#164: FILE: kernel/sched.c:738:
+static inline void update_task_grp_prio(struct task_grp_rq *tgrq, struct rq *rq,
+								 int head)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'rq' - possible side-effects?
#266: FILE: kernel/sched.c:2206:
+#define rq_best_prio(rq) min((rq)->curr->prio, (rq)->expired->best_static_prio)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'tgrq' - possible side-effects?
#274: FILE: kernel/sched.c:3013:
+#define nr_tasks(tgrq)	(tgrq->active->nr_active + tgrq->expired->nr_active)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'tgrq' may be better as '(tgrq)' to avoid precedence issues
#274: FILE: kernel/sched.c:3013:
+#define nr_tasks(tgrq)	(tgrq->active->nr_active + tgrq->expired->nr_active)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#499: FILE: kernel/sched.c:6925:
+		tgrq = init_task_grp.rq[i] = &per_cpu(init_tg_rq, i);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#517: FILE: init/Kconfig:251:
+config CPUMETER
+	bool "CPU resource control"
+	depends on CPUSETS
+	help
+	  This options lets you create cpu resource partitions within
+	  cpusets. Each resource partition can be given a different quota
+	  of CPU usage.
+

Kconfig symbols should have a help text which fully describes
it.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.45857.commit.714dfb350bc6e16f446e6f50eff495e17bbdb2f0 total: 4 errors, 7 warnings, 6 checks, 455 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.45857.commit.714dfb350bc6e16f446e6f50eff495e17bbdb2f0 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
