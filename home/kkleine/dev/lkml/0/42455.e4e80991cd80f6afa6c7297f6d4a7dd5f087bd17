WARNING:TYPO_SPELLING: 'dependant' may be misspelled - perhaps 'dependent'?
#40: 
10- LTTng architecture dependant instrumentation : i386
                       ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#43: 
OpenPGP public key:              http://krystal.dyndns.org:8080/key/compudj.gpg

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#51: 
--- a/arch/i386/kernel/entry.S

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#76: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#93: FILE: arch/i386/kernel/ltt.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#97: FILE: arch/i386/kernel/ltt.c:5:
+ * ^I^IMathieu Desnoyers (mathieu.desnoyers@polymtl.ca)$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#107: FILE: arch/i386/kernel/ltt.c:15:
+void _trace_locking_irq_save(const void * lttng_param_EIP,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#108: FILE: arch/i386/kernel/ltt.c:16:
+void _trace_locking_irq_save(const void * lttng_param_EIP,
+		unsigned long lttng_param_flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#113: FILE: arch/i386/kernel/ltt.c:21:
+void _trace_locking_irq_restore(const void * lttng_param_EIP,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#114: FILE: arch/i386/kernel/ltt.c:22:
+void _trace_locking_irq_restore(const void * lttng_param_EIP,
+		unsigned long lttng_param_flags)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#119: FILE: arch/i386/kernel/ltt.c:27:
+void _trace_locking_irq_disable(const void * lttng_param_EIP)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#124: FILE: arch/i386/kernel/ltt.c:32:
+void _trace_locking_irq_enable(const void * lttng_param_EIP)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#129: FILE: arch/i386/kernel/ltt.c:37:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#130: FILE: arch/i386/kernel/ltt.c:38:
+EXPORT_SYMBOL(_trace_locking_irq_save);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#131: FILE: arch/i386/kernel/ltt.c:39:
+EXPORT_SYMBOL(_trace_locking_irq_restore);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#132: FILE: arch/i386/kernel/ltt.c:40:
+EXPORT_SYMBOL(_trace_locking_irq_disable);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#133: FILE: arch/i386/kernel/ltt.c:41:
+EXPORT_SYMBOL(_trace_locking_irq_enable);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#172: FILE: arch/i386/kernel/process.c:358:
+	pid = do_fork(flags | CLONE_VM | CLONE_UNTRACED,
+			0, &regs, 0, NULL, NULL);

ERROR:SPACING: space required before the open parenthesis '('
#174: FILE: arch/i386/kernel/process.c:360:
+	if(pid >= 0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#234: FILE: arch/i386/kernel/traps.c:345:
+	trace_kernel_arch_syscall_entry(

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#236: FILE: arch/i386/kernel/traps.c:347:
+			(void*)regs->eip);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#242: FILE: arch/i386/kernel/traps.c:353:
+
+

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#257: FILE: arch/i386/kernel/traps.c:415:
+		printk("LTT NESTING LEVEL : %u ",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#258: FILE: arch/i386/kernel/traps.c:416:
+		printk("LTT NESTING LEVEL : %u ",
+				ltt_nesting[smp_processor_id()]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#259: FILE: arch/i386/kernel/traps.c:417:
+		printk("\n");

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#268: FILE: arch/i386/kernel/traps.c:475:
+	trace_kernel_trap_entry(trapnr, (void*)regs->eip);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#302: FILE: arch/i386/kernel/traps.c:616:
+	trace_kernel_trap_entry(13, (void*)regs->eip);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#309: FILE: arch/i386/kernel/traps.c:623:
+	trace_kernel_trap_entry(13, (void*)regs->eip);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#320: FILE: arch/i386/kernel/traps.c:722:
+	trace_kernel_trap_entry(2, (void*)regs->eip);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#368: FILE: arch/i386/kernel/traps.c:877:
+	trace_kernel_trap_entry(1, (void*)regs->eip);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#378: FILE: arch/i386/kernel/traps.c:889:
+	trace_kernel_trap_entry(1, (void*)regs->eip);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#388: FILE: arch/i386/kernel/traps.c:1045:
+	trace_kernel_trap_entry(16, (void*)regs->eip);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#401: FILE: arch/i386/kernel/traps.c:1126:
+	trace_kernel_trap_entry(7, (void*)0);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#456: FILE: arch/i386/mm/fault.c:324:
+			trace_kernel_trap_entry(14, (void*)regs->eip);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#467: FILE: arch/i386/mm/fault.c:356:
+	trace_kernel_trap_entry(14, (void*)regs->eip);

ERROR:CODE_INDENT: code indent should use tabs where possible
#512: FILE: arch/i386/mm/fault.c:513:
+ ^Iif (is_prefetch(regs, address, error_code)) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#512: FILE: arch/i386/mm/fault.c:513:
+ ^Iif (is_prefetch(regs, address, error_code)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#512: FILE: arch/i386/mm/fault.c:513:
+ ^Iif (is_prefetch(regs, address, error_code)) {$

WARNING:LONG_LINE: line length of 159 exceeds 100 columns
#570: FILE: include/asm-i386/system.h:463:
+#define _local_irq_restore(x) 	do { typecheck(unsigned long,x); __asm__ __volatile__("pushl %0 ; popfl": /* no output */ :"g" (x):"memory", "cc"); } while (0)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#570: FILE: include/asm-i386/system.h:463:
+#define _local_irq_restore(x) ^Ido { typecheck(unsigned long,x); __asm__ __volatile__("pushl %0 ; popfl": /* no output */ :"g" (x):"memory", "cc"); } while (0)$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#570: FILE: include/asm-i386/system.h:463:
+#define _local_irq_restore(x) 	do { typecheck(unsigned long,x); __asm__ __volatile__("pushl %0 ; popfl": /* no output */ :"g" (x):"memory", "cc"); } while (0)
                               	                            ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#570: FILE: include/asm-i386/system.h:463:
+#define _local_irq_restore(x) 	do { typecheck(unsigned long,x); __asm__ __volatile__("pushl %0 ; popfl": /* no output */ :"g" (x):"memory", "cc"); } while (0)
                               	                                                                        ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#570: FILE: include/asm-i386/system.h:463:
+#define _local_irq_restore(x) 	do { typecheck(unsigned long,x); __asm__ __volatile__("pushl %0 ; popfl": /* no output */ :"g" (x):"memory", "cc"); } while (0)
                               	                                                                                          ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#570: FILE: include/asm-i386/system.h:463:
+#define _local_irq_restore(x) 	do { typecheck(unsigned long,x); __asm__ __volatile__("pushl %0 ; popfl": /* no output */ :"g" (x):"memory", "cc"); } while (0)
                               	                                                                                                  ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#571: FILE: include/asm-i386/system.h:464:
+#define _local_irq_disable() ^I__asm__ __volatile__("cli": : :"memory")$

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#571: FILE: include/asm-i386/system.h:464:
+#define _local_irq_disable() 	__asm__ __volatile__("cli": : :"memory")
                              	                          ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#571: FILE: include/asm-i386/system.h:464:
+#define _local_irq_disable() 	__asm__ __volatile__("cli": : :"memory")
                              	                              ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#571: FILE: include/asm-i386/system.h:464:
+#define _local_irq_disable() 	__asm__ __volatile__("cli": : :"memory")

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#572: FILE: include/asm-i386/system.h:465:
+#define _local_irq_enable()	__asm__ __volatile__("sti": : :"memory")
                            	                          ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#572: FILE: include/asm-i386/system.h:465:
+#define _local_irq_enable()	__asm__ __volatile__("sti": : :"memory")
                            	                              ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#572: FILE: include/asm-i386/system.h:465:
+#define _local_irq_enable()	__asm__ __volatile__("sti": : :"memory")

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#575: FILE: include/asm-i386/system.h:468:
+#define local_irq_restore(x) do { \
+	__label__ address;\
+address: \
+	_trace_locking_irq_restore(&&address,x); \
+	_local_irq_restore(x); \
+} while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#578: FILE: include/asm-i386/system.h:471:
+	_trace_locking_irq_restore(&&address,x); \
 	                                    ^

ERROR:SPACING: space required before the open parenthesis '('
#580: FILE: include/asm-i386/system.h:473:
+} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#586: FILE: include/asm-i386/system.h:479:
+} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#592: FILE: include/asm-i386/system.h:485:
+} while(0)

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#607: FILE: include/asm-i386/system.h:505:
+#define _local_irq_save(x)	__asm__ __volatile__("pushfl ; popl %0 ; cli":"=g" (x): /* no input */ :"memory")

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#607: FILE: include/asm-i386/system.h:505:
+#define _local_irq_save(x)	__asm__ __volatile__("pushfl ; popl %0 ; cli":"=g" (x): /* no input */ :"memory")
                           	                                             ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#607: FILE: include/asm-i386/system.h:505:
+#define _local_irq_save(x)	__asm__ __volatile__("pushfl ; popl %0 ; cli":"=g" (x): /* no input */ :"memory")
                           	                                                      ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#607: FILE: include/asm-i386/system.h:505:
+#define _local_irq_save(x)	__asm__ __volatile__("pushfl ; popl %0 ; cli":"=g" (x): /* no input */ :"memory")
                           	                                                                       ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#607: FILE: include/asm-i386/system.h:505:
+#define _local_irq_save(x)	__asm__ __volatile__("pushfl ; popl %0 ; cli":"=g" (x): /* no input */ :"memory")

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#610: FILE: include/asm-i386/system.h:508:
+#define local_irq_save(x) do { \
+	__label__ address;\
+address: \
+	_local_irq_save(x); \
+	_trace_locking_irq_save(&&address,x); \
+} while(0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#614: FILE: include/asm-i386/system.h:512:
+	_trace_locking_irq_save(&&address,x); \
 	                                 ^

ERROR:SPACING: space required before the open parenthesis '('
#615: FILE: include/asm-i386/system.h:513:
+} while(0)

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.42455.commit.e4e80991cd80f6afa6c7297f6d4a7dd5f087bd17 total: 36 errors, 17 warnings, 11 checks, 489 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.42455.commit.e4e80991cd80f6afa6c7297f6d4a7dd5f087bd17 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
