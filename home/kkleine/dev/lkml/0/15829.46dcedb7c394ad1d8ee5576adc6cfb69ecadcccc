WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#44: 
timers are fairly low resolution and there are much better options available.

WARNING:BAD_SIGN_OFF: Use a single space after Signed-off-by:
#75: 
Signed-off-by:  Jordan Crouse <jordan.crouse@amd.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#92: FILE: drivers/char/Kconfig:1037:
+config MFGPT
+	tristate "AMD Geode multi-purpose timers"
+	default m
+	depends on X86 && PCI
+	help
+	  AMD Geode processors have several multi-purpose timers available.
+	  Say Y here to define an API for other kernel drivers to use
+	  the timers.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#117: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#122: FILE: drivers/char/mfgpt.c:1:
+/*     Driver/API for AMD Geode Multi-Function General Purpose Timers (MFGPT)

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#139: FILE: drivers/char/mfgpt.c:18:
+#include <asm/io.h>

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#141: FILE: drivers/char/mfgpt.c:20:
+#include <asm/uaccess.h>

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#144: FILE: drivers/char/mfgpt.c:23:
+#define ERR(str, args...) printk(KERN_ERR NAME ": [ERROR]" str, ##args)

CHECK:BIT_MACRO: Prefer using the BIT macro
#157: FILE: drivers/char/mfgpt.c:36:
+#define MFGPT_SETUP_CNTEN  (1 << 15)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#158: FILE: drivers/char/mfgpt.c:37:
+#define MFGPT_SETUP_CMP2   (1 << 14)

CHECK:BIT_MACRO: Prefer using the BIT macro
#159: FILE: drivers/char/mfgpt.c:38:
+#define MFGPT_SETUP_CMP1   (1 << 13)

CHECK:BIT_MACRO: Prefer using the BIT macro
#160: FILE: drivers/char/mfgpt.c:39:
+#define MFGPT_SETUP_SETUP  (1 << 12)

CHECK:BIT_MACRO: Prefer using the BIT macro
#161: FILE: drivers/char/mfgpt.c:40:
+#define MFGPT_SETUP_STOPEN (1 << 11)

CHECK:BIT_MACRO: Prefer using the BIT macro
#162: FILE: drivers/char/mfgpt.c:41:
+#define MFGPT_SETUP_EXTEN  (1 << 10)

CHECK:BIT_MACRO: Prefer using the BIT macro
#163: FILE: drivers/char/mfgpt.c:42:
+#define MFGPT_SETUP_REVEN  (1 << 5)

CHECK:BIT_MACRO: Prefer using the BIT macro
#164: FILE: drivers/char/mfgpt.c:43:
+#define MFGPT_SETUP_CLKSEL (1 << 4)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#175: FILE: drivers/char/mfgpt.c:54:
+#define INDEX_VALID(i)    ((i) >= 0 && (i) < MFGPT_TIMER_COUNT)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "timers[i]"
#176: FILE: drivers/char/mfgpt.c:55:
+#define TIMER_VALID(i)    (timers[i] != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'r' - possible side-effects?
#182: FILE: drivers/char/mfgpt.c:61:
+#define REGISTER_VALID(r) \
+        (((r) == MFGPT_REG_CMP1) || ((r) == MFGPT_REG_CMP2) || \
+         ((r) == MFGPT_REG_COUNTER) || ((r) == MFGPT_REG_SETUP))

ERROR:CODE_INDENT: code indent should use tabs where possible
#183: FILE: drivers/char/mfgpt.c:62:
+        (((r) == MFGPT_REG_CMP1) || ((r) == MFGPT_REG_CMP2) || \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#183: FILE: drivers/char/mfgpt.c:62:
+        (((r) == MFGPT_REG_CMP1) || ((r) == MFGPT_REG_CMP2) || \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#184: FILE: drivers/char/mfgpt.c:63:
+         ((r) == MFGPT_REG_COUNTER) || ((r) == MFGPT_REG_SETUP))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#184: FILE: drivers/char/mfgpt.c:63:
+         ((r) == MFGPT_REG_COUNTER) || ((r) == MFGPT_REG_SETUP))$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#186: FILE: drivers/char/mfgpt.c:65:
+#define IS_TIMER_VALID(i)    (INDEX_VALID(i) && TIMER_VALID(i))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#187: FILE: drivers/char/mfgpt.c:66:
+#define IS_TIMER_SETUP(i)    (IS_TIMER_VALID(i) && TIMER_SETUP(i))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#188: FILE: drivers/char/mfgpt.c:67:
+#define IS_TIMER_RUNNING(i)  (IS_TIMER_SETUP(i) && TIMER_RUNNING(i))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#190: FILE: drivers/char/mfgpt.c:69:
+#define IS_CMP1_IRQ_EVENT(i) \
+	((timers[i]->setup.cmp1mode == MFGPT_MODE_EVENT) && \
+	(timers[i]->setup.cmp1event == MFGPT_EVENT_IRQ))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#194: FILE: drivers/char/mfgpt.c:73:
+#define IS_CMP2_IRQ_EVENT(i) \
+	((timers[i]->setup.cmp2mode == MFGPT_MODE_EVENT) && \
+	(timers[i]->setup.cmp2event == MFGPT_EVENT_IRQ))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#220: FILE: drivers/char/mfgpt.c:99:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#255: FILE: drivers/char/mfgpt.c:134:
+	__ATTR(setup, S_IRUGO, sys_show_setup, NULL),

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#256: FILE: drivers/char/mfgpt.c:135:
+	__ATTR(counter, S_IRUGO, sys_show_counter, NULL),

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#257: FILE: drivers/char/mfgpt.c:136:
+	__ATTR(cmp1, S_IRUGO, sys_show_cmp1, NULL),

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#258: FILE: drivers/char/mfgpt.c:137:
+	__ATTR(cmp2, S_IRUGO, sys_show_cmp2, NULL),

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#262: FILE: drivers/char/mfgpt.c:141:
+/* mfgpt_find_timer
+   Locate an unused timer

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#278: FILE: drivers/char/mfgpt.c:157:
+/* mfgpt_set_events
+   Set up the event bits (reset, nmi, irq) and later set the GPIO states too

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#286: FILE: drivers/char/mfgpt.c:165:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#350: FILE: drivers/char/mfgpt.c:229:
+	if (!TIMER_RUNNING(index)) {
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#381: FILE: drivers/char/mfgpt.c:260:
+int mfgpt_get_register(int index, int reg, u16 * value)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#416: FILE: drivers/char/mfgpt.c:295:
+	 * to the max */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'timers[index]->setup.cmp1mode == MFGPT_MODE_DISABLE'
#418: FILE: drivers/char/mfgpt.c:297:
+	if ((timers[index]->setup.cmp1mode == MFGPT_MODE_DISABLE) &&
+	    (cmp1 != MFGPT_MAX_CMP_VALUE)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cmp1 != MFGPT_MAX_CMP_VALUE'
#418: FILE: drivers/char/mfgpt.c:297:
+	if ((timers[index]->setup.cmp1mode == MFGPT_MODE_DISABLE) &&
+	    (cmp1 != MFGPT_MAX_CMP_VALUE)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#420: FILE: drivers/char/mfgpt.c:299:
+		printk(KERN_INFO NAME ":  Warning - cmp1 is disabled.  Setting value to max.\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'timers[index]->setup.cmp2mode == MFGPT_MODE_DISABLE'
#424: FILE: drivers/char/mfgpt.c:303:
+	if ((timers[index]->setup.cmp2mode == MFGPT_MODE_DISABLE) &&
+	    cmp2 != MFGPT_MAX_CMP_VALUE) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#426: FILE: drivers/char/mfgpt.c:305:
+		printk(KERN_INFO NAME ":  Warning - cmp2 is disabled.  Setting value to max.\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cmp2 < cmp1'
#434: FILE: drivers/char/mfgpt.c:313:
+	if((cmp2 < cmp1) && timers[index]->setup.cmp1mode != MFGPT_MODE_DISABLE)

ERROR:SPACING: space required before the open parenthesis '('
#434: FILE: drivers/char/mfgpt.c:313:
+	if((cmp2 < cmp1) && timers[index]->setup.cmp1mode != MFGPT_MODE_DISABLE)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#446: FILE: drivers/char/mfgpt.c:325:
+{
+

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#462: FILE: drivers/char/mfgpt.c:341:
+		if ((in = mfgpt_find_timer()) == -1)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#536: FILE: drivers/char/mfgpt.c:415:
+	printk("DEBUG:  Write %x\n", val);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#541: FILE: drivers/char/mfgpt.c:420:
+	/* Set both the comparators to the highest value - these need to be
+	   rewritten by the app before the timer starts

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#548: FILE: drivers/char/mfgpt.c:427:
+	/* Set a flag that indicates that the kernel owns this structure
+	   If this is called from the IOCTL, it will be cleared there.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#552: FILE: drivers/char/mfgpt.c:431:
+	printk(KERN_INFO NAME ": Timer %d has been setup.\n", in);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "timers[index]->callback"
#584: FILE: drivers/char/mfgpt.c:463:
+			if (timers[index]->callback != NULL)

WARNING:TYPO_SPELLING: 'commmunicate' may be misspelled - perhaps 'communicate'?
#593: FILE: drivers/char/mfgpt.c:472:
+/* This array is used to commmunicate the interrupt status through
                          ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:REPEATED_WORD: Possible repeated word: 'to'
#594: FILE: drivers/char/mfgpt.c:473:
+ * to to the wait event */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#594: FILE: drivers/char/mfgpt.c:473:
+ * to to the wait event */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#611: FILE: drivers/char/mfgpt.c:490:
+static int mfgpt_ioctl_alloc_timer(int index, void __user * p)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#628: FILE: drivers/char/mfgpt.c:507:
+	/* If the setup is waiting for an interrupt to come back, we need
+	   to register a callback */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#628: FILE: drivers/char/mfgpt.c:507:
+	   to register a callback */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#636: FILE: drivers/char/mfgpt.c:515:
+static int mfgpt_ioctl_set_counter(int index, void __user * p)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#646: FILE: drivers/char/mfgpt.c:525:
+static int mfgpt_ioctl_set_comparators(int index, void __user * p)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#656: FILE: drivers/char/mfgpt.c:535:
+static int mfgpt_ioctl_get_register(int index, int reg, void __user * p)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#735: FILE: drivers/char/mfgpt.c:614:
+{
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#788: FILE: drivers/char/mfgpt.c:667:
+{
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#808: FILE: drivers/char/mfgpt.c:687:
+	u32 index = iminor(inode);
+	up(&timers[index]->mutex);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#812: FILE: drivers/char/mfgpt.c:691:
+static struct file_operations mfgpt_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!timers[index]"
#825: FILE: drivers/char/mfgpt.c:704:
+	if (timers[index] == NULL)

ERROR:SPACING: space required before the open parenthesis '('
#828: FILE: drivers/char/mfgpt.c:707:
+	for(i = 0; i < ARRAY_SIZE(mfgpt_attrs); i++)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#838: FILE: drivers/char/mfgpt.c:717:
+static void __devexit $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#838: FILE: drivers/char/mfgpt.c:717:
+static void __devexit 

CHECK:SPACING: No space is necessary after a cast
#844: FILE: drivers/char/mfgpt.c:723:
+	free_irq(irq, (void *) mfgpt_iobase);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#859: FILE: drivers/char/mfgpt.c:738:
+static int __devinit mfgpt_alloc_dev(struct pci_dev *dev, int index)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*timers[index])...) over kzalloc(sizeof(struct mfgpt_timer_t)...)
#865: FILE: drivers/char/mfgpt.c:744:
+	timers[index] = kzalloc(sizeof(struct mfgpt_timer_t), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!timers[index]"
#867: FILE: drivers/char/mfgpt.c:746:
+	if (timers[index] == NULL) {

ERROR:SPACING: space required before the open parenthesis '('
#887: FILE: drivers/char/mfgpt.c:766:
+	for(i = 0; i < ARRAY_SIZE(mfgpt_attrs) && !ret; i++)

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#903: FILE: drivers/char/mfgpt.c:782:
+static void __devinit

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#903: FILE: drivers/char/mfgpt.c:782:
+static void __devinit
+mfgpt_setup_irq(int irq, u8 mask) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#905: FILE: drivers/char/mfgpt.c:784:
+mfgpt_setup_irq(int irq, u8 mask) {
+

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#929: FILE: drivers/char/mfgpt.c:808:
+static int __devinit

ERROR:TRAILING_WHITESPACE: trailing whitespace
#930: FILE: drivers/char/mfgpt.c:809:
+mfgpt_setup_device(struct pci_dev *dev, int bar) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#933: FILE: drivers/char/mfgpt.c:812:
+^Idev_t devid;^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#939: FILE: drivers/char/mfgpt.c:818:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#960: FILE: drivers/char/mfgpt.c:839:
+^I$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#961: FILE: drivers/char/mfgpt.c:840:
+	if ((ret = pci_enable_device_bars(dev, 1 << bar))) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#966: FILE: drivers/char/mfgpt.c:845:
+	if ((ret = pci_request_region(dev, bar, NAME))) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mfgpt_iobase"
#975: FILE: drivers/char/mfgpt.c:854:
+	if (mfgpt_iobase == NULL) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#981: FILE: drivers/char/mfgpt.c:860:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#981: FILE: drivers/char/mfgpt.c:860:
+
+	

ERROR:TRAILING_WHITESPACE: trailing whitespace
#983: FILE: drivers/char/mfgpt.c:862:
+^I$

ERROR:SPACING: space required before the open parenthesis '('
#984: FILE: drivers/char/mfgpt.c:863:
+	for(i = 0; i < MFGPT_TIMER_COUNT; i++) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#988: FILE: drivers/char/mfgpt.c:867:
+^I^I^I$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#988: FILE: drivers/char/mfgpt.c:867:
+		if (!(val & MFGPT_SETUP_SETUP)) {
+			

ERROR:TRAILING_WHITESPACE: trailing whitespace
#993: FILE: drivers/char/mfgpt.c:872:
+^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#997: FILE: drivers/char/mfgpt.c:876:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1004: FILE: drivers/char/mfgpt.c:883:
+
+

CHECK:SPACING: No space is necessary after a cast
#1006: FILE: drivers/char/mfgpt.c:885:
+			  SA_INTERRUPT | SA_SHIRQ, NAME, (void *) mfgpt_iobase);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1009: FILE: drivers/char/mfgpt.c:888:
+		printk(KERN_INFO NAME ": %d timers available.\n", active);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1040: FILE: drivers/char/mfgpt.c:919:
+
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1049: FILE: drivers/char/mfgpt.c:928:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1056: FILE: drivers/char/mfgpt.c:935:
+^I$

ERROR:SPACING: space required before the open parenthesis '('
#1057: FILE: drivers/char/mfgpt.c:936:
+	for(dev = 0; dev < ARRAY_SIZE(geode_sbdevs); dev++) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1060: FILE: drivers/char/mfgpt.c:939:
+^I^I$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pdev"
#1061: FILE: drivers/char/mfgpt.c:940:
+		if (pdev == NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1066: FILE: drivers/char/mfgpt.c:945:
+^I^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1066: FILE: drivers/char/mfgpt.c:945:
+
+		

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1092: FILE: include/linux/mfgpt.h:1:
+#ifndef MFGPT_H_

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#1175: FILE: include/linux/mfgpt.h:84:
+int mfgpt_alloc_timer(int *, struct mfgpt_setup_t *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mfgpt_setup_t *' should also have an identifier name
#1175: FILE: include/linux/mfgpt.h:84:
+int mfgpt_alloc_timer(int *, struct mfgpt_setup_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'mfgpt_callback' should also have an identifier name
#1176: FILE: include/linux/mfgpt.h:85:
+int mfgpt_register_callback(int index, mfgpt_callback, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1176: FILE: include/linux/mfgpt.h:85:
+int mfgpt_register_callback(int index, mfgpt_callback, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1178: FILE: include/linux/mfgpt.h:87:
+int mfgpt_set_counter(int, u16);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u16' should also have an identifier name
#1178: FILE: include/linux/mfgpt.h:87:
+int mfgpt_set_counter(int, u16);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1179: FILE: include/linux/mfgpt.h:88:
+int mfgpt_set_comparators(int, u16, u16);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u16' should also have an identifier name
#1179: FILE: include/linux/mfgpt.h:88:
+int mfgpt_set_comparators(int, u16, u16);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u16' should also have an identifier name
#1179: FILE: include/linux/mfgpt.h:88:
+int mfgpt_set_comparators(int, u16, u16);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1180: FILE: include/linux/mfgpt.h:89:
+int mfgpt_get_register(int, int, u16 *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1180: FILE: include/linux/mfgpt.h:89:
+int mfgpt_get_register(int, int, u16 *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u16 *' should also have an identifier name
#1180: FILE: include/linux/mfgpt.h:89:
+int mfgpt_get_register(int, int, u16 *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1181: FILE: include/linux/mfgpt.h:90:
+int mfgpt_get_status(int, u8);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u8' should also have an identifier name
#1181: FILE: include/linux/mfgpt.h:90:
+int mfgpt_get_status(int, u8);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1182: FILE: include/linux/mfgpt.h:91:
+int mfgpt_start_timer(int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1183: FILE: include/linux/mfgpt.h:92:
+int mfgpt_stop_timer(int);

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.15829.commit.46dcedb7c394ad1d8ee5576adc6cfb69ecadcccc total: 29 errors, 52 warnings, 41 checks, 1081 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.15829.commit.46dcedb7c394ad1d8ee5576adc6cfb69ecadcccc has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
