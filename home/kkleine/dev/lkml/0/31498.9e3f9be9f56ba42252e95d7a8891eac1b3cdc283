WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#85: FILE: arch/ia64/pci/pci.c:472:
+void __devinit pcibios_fixup_device_resources(struct pci_dev *dev)

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#91: FILE: arch/ia64/pci/pci.c:478:
 static void __devinit pcibios_fixup_bridge_resources(struct pci_dev *dev)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#306: FILE: arch/ia64/sn/kernel/io_init.c:67:
 {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#312: FILE: arch/ia64/sn/kernel/io_init.c:72:
+	int i;
+	extern void sn_common_hubdev_init(struct hubdev_info *);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#312: FILE: arch/ia64/sn/kernel/io_init.c:72:
+	extern void sn_common_hubdev_init(struct hubdev_info *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct hubdev_info *' should also have an identifier name
#312: FILE: arch/ia64/sn/kernel/io_init.c:72:
+	extern void sn_common_hubdev_init(struct hubdev_info *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!controller->window"
#354: FILE: arch/ia64/sn/kernel/io_init.c:112:
+		if (controller->window == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:CODE_INDENT: code indent should use tabs where possible
#398: FILE: arch/ia64/sn/kernel/io_init.c:119:
+^I    ^I^I^Icontroller->window[0].resource.start + 0xffff;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#398: FILE: arch/ia64/sn/kernel/io_init.c:119:
+^I    ^I^I^Icontroller->window[0].resource.start + 0xffff;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#405: FILE: arch/ia64/sn/kernel/io_init.c:126:
+^I    ^I       controller->window[1].resource.start + (1024 * 1024) - 1;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#405: FILE: arch/ia64/sn/kernel/io_init.c:126:
+^I    ^I       controller->window[1].resource.start + (1024 * 1024) - 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#594: FILE: arch/ia64/sn/kernel/io_init.c:251:
+ ^Iif (bus == NULL)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#594: FILE: arch/ia64/sn/kernel/io_init.c:251:
+ ^Iif (bus == NULL)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#594: FILE: arch/ia64/sn/kernel/io_init.c:251:
+ ^Iif (bus == NULL)$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bus"
#594: FILE: arch/ia64/sn/kernel/io_init.c:251:
+ 	if (bus == NULL)

ERROR:CODE_INDENT: code indent should use tabs where possible
#595: FILE: arch/ia64/sn/kernel/io_init.c:252:
+ ^I^Igoto error_return; /* error, or bus already scanned */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#595: FILE: arch/ia64/sn/kernel/io_init.c:252:
+ ^I^Igoto error_return; /* error, or bus already scanned */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#595: FILE: arch/ia64/sn/kernel/io_init.c:252:
+ ^I^Igoto error_return; /* error, or bus already scanned */$

WARNING:LINE_SPACING: Missing a blank line after declarations
#679: FILE: arch/ia64/sn/kernel/io_init.c:272:
+	struct pcibus_bussoft *prom_bussoft_ptr;
+	extern void sn_common_bus_fixup(struct pci_bus *,

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#679: FILE: arch/ia64/sn/kernel/io_init.c:272:
+	extern void sn_common_bus_fixup(struct pci_bus *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pci_bus *' should also have an identifier name
#679: FILE: arch/ia64/sn/kernel/io_init.c:272:
+	extern void sn_common_bus_fixup(struct pci_bus *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pcibus_bussoft *' should also have an identifier name
#679: FILE: arch/ia64/sn/kernel/io_init.c:272:
+	extern void sn_common_bus_fixup(struct pci_bus *,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!prom_bussoft_ptr"
#697: FILE: arch/ia64/sn/kernel/io_init.c:278:
+		if (prom_bussoft_ptr == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#698: FILE: arch/ia64/sn/kernel/io_init.c:279:
+			printk(KERN_ERR

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'sn_bus_fixup', this function's name, in a string
#699: FILE: arch/ia64/sn/kernel/io_init.c:280:
+			       "sn_bus_fixup: 0x%04x:0x%02x Unable to "

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#700: FILE: arch/ia64/sn/kernel/io_init.c:281:
+			       "sn_bus_fixup: 0x%04x:0x%02x Unable to "
+			       "obtain prom_bussoft_ptr\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:CODE_INDENT: code indent should use tabs where possible
#708: FILE: arch/ia64/sn/kernel/io_init.c:289:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#708: FILE: arch/ia64/sn/kernel/io_init.c:289:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#709: FILE: arch/ia64/sn/kernel/io_init.c:290:
+        list_for_each_entry(pci_dev, &bus->devices, bus_list) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#709: FILE: arch/ia64/sn/kernel/io_init.c:290:
+        list_for_each_entry(pci_dev, &bus->devices, bus_list) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#710: FILE: arch/ia64/sn/kernel/io_init.c:291:
+                sn_pci_fixup_slot(pci_dev);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#710: FILE: arch/ia64/sn/kernel/io_init.c:291:
+                sn_pci_fixup_slot(pci_dev);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#711: FILE: arch/ia64/sn/kernel/io_init.c:292:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#711: FILE: arch/ia64/sn/kernel/io_init.c:292:
+        }$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#919: FILE: arch/ia64/sn/kernel/setup.c:428:
+^I * ^Ibus containing the VGA console.$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1001: FILE: include/asm-ia64/machvec.h:100:
+machvec_noop_bus (struct pci_bus *bus)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1066: FILE: include/asm-ia64/sn/acpi.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1257: FILE: arch/ia64/sn/kernel/io_acpi_init.c:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1273: FILE: arch/ia64/sn/kernel/io_acpi_init.c:17:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1279: FILE: arch/ia64/sn/kernel/io_acpi_init.c:23:
+
+

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1296: FILE: arch/ia64/sn/kernel/io_acpi_init.c:40:
+	struct ia64_sal_retval isrv = {0,0,0,0};
 	                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1296: FILE: arch/ia64/sn/kernel/io_acpi_init.c:40:
+	struct ia64_sal_retval isrv = {0,0,0,0};
 	                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1296: FILE: arch/ia64/sn/kernel/io_acpi_init.c:40:
+	struct ia64_sal_retval isrv = {0,0,0,0};
 	                                    ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1322: FILE: arch/ia64/sn/kernel/io_acpi_init.c:66:
+	struct acpi_resource_vendor_typed *vendor;
+	extern void sn_common_hubdev_init(struct hubdev_info *);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1322: FILE: arch/ia64/sn/kernel/io_acpi_init.c:66:
+	extern void sn_common_hubdev_init(struct hubdev_info *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct hubdev_info *' should also have an identifier name
#1322: FILE: arch/ia64/sn/kernel/io_acpi_init.c:66:
+	extern void sn_common_hubdev_init(struct hubdev_info *);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1327: FILE: arch/ia64/sn/kernel/io_acpi_init.c:71:
+		printk(KERN_ERR

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'sn_hubdev_add', this function's name, in a string
#1328: FILE: arch/ia64/sn/kernel/io_acpi_init.c:72:
+		       "sn_hubdev_add: acpi_get_vendor_resource() failed: %d\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#1329: FILE: arch/ia64/sn/kernel/io_acpi_init.c:73:
+^I^I        status);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1337: FILE: arch/ia64/sn/kernel/io_acpi_init.c:81:
+		printk(KERN_ERR

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'sn_hubdev_add', this function's name, in a string
#1338: FILE: arch/ia64/sn/kernel/io_acpi_init.c:82:
+		       "sn_hubdev_add: Invalid vendor data length: %d\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#1339: FILE: arch/ia64/sn/kernel/io_acpi_init.c:83:
+^I^I        vendor->byte_length);$

CHECK:SPACING: No space is necessary after a cast
#1345: FILE: arch/ia64/sn/kernel/io_acpi_init.c:89:
+	hubdev_ptr = __va((struct hubdev_info *) addr);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1373: FILE: arch/ia64/sn/kernel/io_acpi_init.c:117:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1378: FILE: arch/ia64/sn/kernel/io_acpi_init.c:122:
+		printk(KERN_ERR "get_acpi_pcibus_ptr: "

WARNING:SPLIT_STRING: quoted string split across lines
#1379: FILE: arch/ia64/sn/kernel/io_acpi_init.c:123:
+		printk(KERN_ERR "get_acpi_pcibus_ptr: "
+		       "get_acpi_bussoft_info() failed: %d\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1388: FILE: arch/ia64/sn/kernel/io_acpi_init.c:132:
+		printk(KERN_ERR

WARNING:SPLIT_STRING: quoted string split across lines
#1390: FILE: arch/ia64/sn/kernel/io_acpi_init.c:134:
+		       "get_acpi_bussoft_ptr: Invalid vendor data "
+		       "length %d\n", vendor->byte_length);

CHECK:SPACING: No space is necessary after a cast
#1395: FILE: arch/ia64/sn/kernel/io_acpi_init.c:139:
+	prom_bussoft_ptr = __va((struct pcibus_bussoft *) addr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1409: FILE: arch/ia64/sn/kernel/io_acpi_init.c:153:
+	struct pcibus_bussoft *prom_bussoft_ptr;
+	extern void sn_common_bus_fixup(struct pci_bus *,

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1409: FILE: arch/ia64/sn/kernel/io_acpi_init.c:153:
+	extern void sn_common_bus_fixup(struct pci_bus *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pci_bus *' should also have an identifier name
#1409: FILE: arch/ia64/sn/kernel/io_acpi_init.c:153:
+	extern void sn_common_bus_fixup(struct pci_bus *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pcibus_bussoft *' should also have an identifier name
#1409: FILE: arch/ia64/sn/kernel/io_acpi_init.c:153:
+	extern void sn_common_bus_fixup(struct pci_bus *,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!prom_bussoft_ptr"
#1414: FILE: arch/ia64/sn/kernel/io_acpi_init.c:158:
+		if (prom_bussoft_ptr == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1415: FILE: arch/ia64/sn/kernel/io_acpi_init.c:159:
+			printk(KERN_ERR

WARNING:SPLIT_STRING: quoted string split across lines
#1417: FILE: arch/ia64/sn/kernel/io_acpi_init.c:161:
+			       "sn_pci_fixup_bus: 0x%04x:0x%02x Unable to "
+			       "obtain prom_bussoft_ptr\n",

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1436: FILE: arch/ia64/sn/kernel/io_acpi_init.c:180:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1460: FILE: arch/ia64/sn/kernel/io_common.c:1:
+/*

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1490: FILE: arch/ia64/sn/kernel/io_common.c:31:
+extern void register_sn_procfs(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1491: FILE: arch/ia64/sn/kernel/io_common.c:32:
+extern void sn_acpi_bus_fixup(struct pci_bus *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pci_bus *' should also have an identifier name
#1491: FILE: arch/ia64/sn/kernel/io_common.c:32:
+extern void sn_acpi_bus_fixup(struct pci_bus *);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1492: FILE: arch/ia64/sn/kernel/io_common.c:33:
+extern void sn_bus_fixup(struct pci_bus *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pci_bus *' should also have an identifier name
#1492: FILE: arch/ia64/sn/kernel/io_common.c:33:
+extern void sn_bus_fixup(struct pci_bus *);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1493: FILE: arch/ia64/sn/kernel/io_common.c:34:
+extern void sn_acpi_slot_fixup(struct pci_dev *, struct pcidev_info *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pci_dev *' should also have an identifier name
#1493: FILE: arch/ia64/sn/kernel/io_common.c:34:
+extern void sn_acpi_slot_fixup(struct pci_dev *, struct pcidev_info *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pcidev_info *' should also have an identifier name
#1493: FILE: arch/ia64/sn/kernel/io_common.c:34:
+extern void sn_acpi_slot_fixup(struct pci_dev *, struct pcidev_info *);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1494: FILE: arch/ia64/sn/kernel/io_common.c:35:
+extern void sn_more_slot_fixup(struct pci_dev *, struct pcidev_info *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pci_dev *' should also have an identifier name
#1494: FILE: arch/ia64/sn/kernel/io_common.c:35:
+extern void sn_more_slot_fixup(struct pci_dev *, struct pcidev_info *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pcidev_info *' should also have an identifier name
#1494: FILE: arch/ia64/sn/kernel/io_common.c:35:
+extern void sn_more_slot_fixup(struct pci_dev *, struct pcidev_info *);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1495: FILE: arch/ia64/sn/kernel/io_common.c:36:
+extern void sn_legacy_pci_window_fixup(struct pci_controller *, u64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pci_controller *' should also have an identifier name
#1495: FILE: arch/ia64/sn/kernel/io_common.c:36:
+extern void sn_legacy_pci_window_fixup(struct pci_controller *, u64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#1495: FILE: arch/ia64/sn/kernel/io_common.c:36:
+extern void sn_legacy_pci_window_fixup(struct pci_controller *, u64, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#1495: FILE: arch/ia64/sn/kernel/io_common.c:36:
+extern void sn_legacy_pci_window_fixup(struct pci_controller *, u64, u64);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1496: FILE: arch/ia64/sn/kernel/io_common.c:37:
+extern void sn_io_acpi_init(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1497: FILE: arch/ia64/sn/kernel/io_common.c:38:
+extern void sn_io_init(void);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1499: FILE: arch/ia64/sn/kernel/io_common.c:40:
+
+

WARNING:RETURN_VOID: void function return statements are not generally useful
#1526: FILE: arch/ia64/sn/kernel/io_common.c:67:
+	return;
+}

WARNING:LINE_SPACING: Missing a blank line after declarations
#1550: FILE: arch/ia64/sn/kernel/io_common.c:91:
+	struct ia64_sal_retval ret_stuff;
+	ret_stuff.status = 0;

CHECK:SPACING: No space is necessary after a cast
#1554: FILE: arch/ia64/sn/kernel/io_common.c:95:
+			(u64) SN_SAL_IOIF_GET_DEVICE_DMAFLUSH_LIST,

CHECK:SPACING: No space is necessary after a cast
#1555: FILE: arch/ia64/sn/kernel/io_common.c:96:
+			(u64) nasid, (u64) widget_num,

CHECK:SPACING: No space is necessary after a cast
#1556: FILE: arch/ia64/sn/kernel/io_common.c:97:
+			(u64) device_num, (u64) address, 0, 0, 0);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1568: FILE: arch/ia64/sn/kernel/io_common.c:109:
+	struct ia64_sal_retval ret_stuff;
+	ret_stuff.status = 0;

CHECK:SPACING: No space is necessary after a cast
#1572: FILE: arch/ia64/sn/kernel/io_common.c:113:
+			(u64) SN_SAL_IOIF_GET_PCIDEV_INFO,

CHECK:SPACING: No space is necessary after a cast
#1573: FILE: arch/ia64/sn/kernel/io_common.c:114:
+			(u64) segment, (u64) bus_number, (u64) devfn,

CHECK:SPACING: No space is necessary after a cast
#1574: FILE: arch/ia64/sn/kernel/io_common.c:115:
+			(u64) pci_dev,

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1602: FILE: arch/ia64/sn/kernel/io_common.c:143:
+static u8 war_implemented = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1609: FILE: arch/ia64/sn/kernel/io_common.c:150:
+	struct ia64_sal_retval isrv = {0,0,0,0};
 	                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1609: FILE: arch/ia64/sn/kernel/io_common.c:150:
+	struct ia64_sal_retval isrv = {0,0,0,0};
 	                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1609: FILE: arch/ia64/sn/kernel/io_common.c:150:
+	struct ia64_sal_retval isrv = {0,0,0,0};
 	                                    ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1612: FILE: arch/ia64/sn/kernel/io_common.c:153:
+		printk(KERN_WARNING "PROM version < 4.50 -- implementing old "

WARNING:SPLIT_STRING: quoted string split across lines
#1613: FILE: arch/ia64/sn/kernel/io_common.c:154:
+		printk(KERN_WARNING "PROM version < 4.50 -- implementing old "
+		       "PROM flush WAR\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1619: FILE: arch/ia64/sn/kernel/io_common.c:160:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:SPACING: space prohibited before that ',' (ctx:WxV)
#1622: FILE: arch/ia64/sn/kernel/io_common.c:163:
+			nasid, widget, __pa(war_list), 0, 0, 0 ,0);
 			                                       ^

ERROR:SPACING: space required after that ',' (ctx:WxV)
#1622: FILE: arch/ia64/sn/kernel/io_common.c:163:
+			nasid, widget, __pa(war_list), 0, 0, 0 ,0);
 			                                       ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'sn_device_fixup_war', this function's name, in a string
#1624: FILE: arch/ia64/sn/kernel/io_common.c:165:
+		panic("sn_device_fixup_war failed: %s\n",

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1628: FILE: arch/ia64/sn/kernel/io_common.c:169:
+	memcpy(common,dev_entry, sizeof(*common));
 	             ^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1641: FILE: arch/ia64/sn/kernel/io_common.c:182:
+{
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1664: FILE: arch/ia64/sn/kernel/io_common.c:205:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1671: FILE: arch/ia64/sn/kernel/io_common.c:212:
+			BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1679: FILE: arch/ia64/sn/kernel/io_common.c:220:
+				BUG();

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1681: FILE: arch/ia64/sn/kernel/io_common.c:222:
+				status = sal_get_device_dmaflush_list(

ERROR:CODE_INDENT: code indent should use tabs where possible
#1721: FILE: arch/ia64/sn/kernel/io_common.c:262:
+ ^Istruct pci_bus *host_pci_bus;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1721: FILE: arch/ia64/sn/kernel/io_common.c:262:
+ ^Istruct pci_bus *host_pci_bus;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1721: FILE: arch/ia64/sn/kernel/io_common.c:262:
+ ^Istruct pci_bus *host_pci_bus;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1722: FILE: arch/ia64/sn/kernel/io_common.c:263:
+ ^Istruct pci_dev *host_pci_dev;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1722: FILE: arch/ia64/sn/kernel/io_common.c:263:
+ ^Istruct pci_dev *host_pci_dev;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1722: FILE: arch/ia64/sn/kernel/io_common.c:263:
+ ^Istruct pci_dev *host_pci_dev;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1724: FILE: arch/ia64/sn/kernel/io_common.c:265:
+ ^Istruct sn_irq_info *sn_irq_info;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1724: FILE: arch/ia64/sn/kernel/io_common.c:265:
+ ^Istruct sn_irq_info *sn_irq_info;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1724: FILE: arch/ia64/sn/kernel/io_common.c:265:
+ ^Istruct sn_irq_info *sn_irq_info;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1725: FILE: arch/ia64/sn/kernel/io_common.c:266:
+ ^Iunsigned int bus_no, devfn;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1725: FILE: arch/ia64/sn/kernel/io_common.c:266:
+ ^Iunsigned int bus_no, devfn;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1725: FILE: arch/ia64/sn/kernel/io_common.c:266:
+ ^Iunsigned int bus_no, devfn;$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*pcidev_info)...) over kzalloc(sizeof(struct pcidev_info)...)
#1728: FILE: arch/ia64/sn/kernel/io_common.c:269:
+	pcidev_info = kzalloc(sizeof(struct pcidev_info), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1730: FILE: arch/ia64/sn/kernel/io_common.c:271:
+		BUG();		/* Cannot afford to run out of memory */

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*sn_irq_info)...) over kzalloc(sizeof(struct sn_irq_info)...)
#1732: FILE: arch/ia64/sn/kernel/io_common.c:273:
+	sn_irq_info = kzalloc(sizeof(struct sn_irq_info), GFP_KERNEL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1734: FILE: arch/ia64/sn/kernel/io_common.c:275:
+		BUG();		/* Cannot afford to run out of memory */

CHECK:SPACING: No space is necessary after a cast
#1737: FILE: arch/ia64/sn/kernel/io_common.c:278:
+	status = sal_get_pcidev_info((u64) segment, (u64) dev->bus->number,

CHECK:SPACING: No space is necessary after a cast
#1739: FILE: arch/ia64/sn/kernel/io_common.c:280:
+				     (u64) __pa(pcidev_info),

CHECK:SPACING: No space is necessary after a cast
#1740: FILE: arch/ia64/sn/kernel/io_common.c:281:
+				     (u64) __pa(sn_irq_info));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1742: FILE: arch/ia64/sn/kernel/io_common.c:283:
+		BUG(); /* Cannot get platform pci device information */

ERROR:CODE_INDENT: code indent should use tabs where possible
#1753: FILE: arch/ia64/sn/kernel/io_common.c:294:
+ ^I * PCI host_pci_dev struct and set up host bus linkages$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1753: FILE: arch/ia64/sn/kernel/io_common.c:294:
+ ^I * PCI host_pci_dev struct and set up host bus linkages$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1754: FILE: arch/ia64/sn/kernel/io_common.c:295:
+ ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1754: FILE: arch/ia64/sn/kernel/io_common.c:295:
+ ^I */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1758: FILE: arch/ia64/sn/kernel/io_common.c:299:
+ ^Ihost_pci_bus = pci_find_bus(segment, bus_no);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1758: FILE: arch/ia64/sn/kernel/io_common.c:299:
+ ^Ihost_pci_bus = pci_find_bus(segment, bus_no);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1758: FILE: arch/ia64/sn/kernel/io_common.c:299:
+ ^Ihost_pci_bus = pci_find_bus(segment, bus_no);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1759: FILE: arch/ia64/sn/kernel/io_common.c:300:
+ ^Ihost_pci_dev = pci_get_slot(host_pci_bus, devfn);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1759: FILE: arch/ia64/sn/kernel/io_common.c:300:
+ ^Ihost_pci_dev = pci_get_slot(host_pci_bus, devfn);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1759: FILE: arch/ia64/sn/kernel/io_common.c:300:
+ ^Ihost_pci_dev = pci_get_slot(host_pci_bus, devfn);$

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1767: FILE: arch/ia64/sn/kernel/io_common.c:308:
+	if (bs && bs->bs_asic_type < PCIIO_ASIC_MAX_TYPES) {
[...]
+	} else {
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1808: FILE: arch/ia64/sn/kernel/io_common.c:349:
+		printk(KERN_WARNING "sn_common_bus_fixup: Unsupported asic type, %d",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'sn_common_bus_fixup', this function's name, in a string
#1808: FILE: arch/ia64/sn/kernel/io_common.c:349:
+		printk(KERN_WARNING "sn_common_bus_fixup: Unsupported asic type, %d",

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!provider"
#1817: FILE: arch/ia64/sn/kernel/io_common.c:358:
+	if (provider == NULL)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'sn_common_bus_fixup', this function's name, in a string
#1818: FILE: arch/ia64/sn/kernel/io_common.c:359:
+		panic("sn_common_bus_fixup: No provider registered for this asic type, %d",

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*controller->platform_data)...) over kzalloc(sizeof(struct sn_platform_data)...)
#1831: FILE: arch/ia64/sn/kernel/io_common.c:372:
+	controller->platform_data = kzalloc(sizeof(struct sn_platform_data),

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!controller->platform_data"
#1833: FILE: arch/ia64/sn/kernel/io_common.c:374:
+	if (controller->platform_data == NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1834: FILE: arch/ia64/sn/kernel/io_common.c:375:
+		BUG();

CHECK:SPACING: No space is necessary after a cast
#1836: FILE: arch/ia64/sn/kernel/io_common.c:377:
+			(struct sn_platform_data *) controller->platform_data;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around hubdev_info->hdi_xwidget_info[SN_PCIBUS_BUSSOFT(bus)->bs_xid]
#1844: FILE: arch/ia64/sn/kernel/io_common.c:385:
+	    &(hubdev_info->hdi_xwidget_info[SN_PCIBUS_BUSSOFT(bus)->bs_xid]);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1853: FILE: arch/ia64/sn/kernel/io_common.c:394:
+		printk(KERN_WARNING "Device ASIC=%u XID=%u PBUSNUM=%u"

WARNING:SPLIT_STRING: quoted string split across lines
#1854: FILE: arch/ia64/sn/kernel/io_common.c:395:
+		printk(KERN_WARNING "Device ASIC=%u XID=%u PBUSNUM=%u"
+		       "L_IO=%lx L_MEM=%lx BASE=%lx\n",

WARNING:MISSING_SPACE: break quoted strings at a space character
#1854: FILE: arch/ia64/sn/kernel/io_common.c:395:
+		printk(KERN_WARNING "Device ASIC=%u XID=%u PBUSNUM=%u"
+		       "L_IO=%lx L_MEM=%lx BASE=%lx\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1857: FILE: arch/ia64/sn/kernel/io_common.c:398:
+		printk(KERN_WARNING "on node %d but only %d nodes online."

WARNING:SPLIT_STRING: quoted string split across lines
#1858: FILE: arch/ia64/sn/kernel/io_common.c:399:
+		printk(KERN_WARNING "on node %d but only %d nodes online."
+		       "Association set to undetermined.\n",

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*element)...) over kzalloc(sizeof(struct sysdata_el)...)
#1868: FILE: arch/ia64/sn/kernel/io_common.c:409:
+	element = kzalloc(sizeof(struct sysdata_el), GFP_KERNEL);

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#1870: FILE: arch/ia64/sn/kernel/io_common.c:411:
+	if (!element) {
+		dev_dbg(dev, "%s: out of memory!\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1870: FILE: arch/ia64/sn/kernel/io_common.c:411:
+		dev_dbg(dev, "%s: out of memory!\n", __FUNCTION__);

WARNING:RETURN_VOID: void function return statements are not generally useful
#1891: FILE: arch/ia64/sn/kernel/io_common.c:432:
+	return;
+}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1897: FILE: arch/ia64/sn/kernel/io_common.c:438:
+void hubdev_init_node(nodepda_t * npda, cnodeid_t node)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1938: FILE: arch/ia64/sn/kernel/io_common.c:479:
+		'0'+RACK_GET_CLASS(MODULE_GET_RACK(moduleid)),
 		   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1939: FILE: arch/ia64/sn/kernel/io_common.c:480:
+		'0'+RACK_GET_GROUP(MODULE_GET_RACK(moduleid)),
 		   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1940: FILE: arch/ia64/sn/kernel/io_common.c:481:
+		'0'+RACK_GET_NUM(MODULE_GET_RACK(moduleid)),
 		   ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#1945: FILE: arch/ia64/sn/kernel/io_common.c:486:
+	if ((bricktype == L1_BRICKTYPE_191010) ||
[...]
+			sprintf(address, "%s^%d", address, geo_slot(geoid));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bricktype == L1_BRICKTYPE_191010'
#1945: FILE: arch/ia64/sn/kernel/io_common.c:486:
+	if ((bricktype == L1_BRICKTYPE_191010) ||
+	    (bricktype == L1_BRICKTYPE_1932))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bricktype == L1_BRICKTYPE_1932'
#1945: FILE: arch/ia64/sn/kernel/io_common.c:486:
+	if ((bricktype == L1_BRICKTYPE_191010) ||
+	    (bricktype == L1_BRICKTYPE_1932))

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1955: FILE: arch/ia64/sn/kernel/io_common.c:496:
+void __devinit

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1958: FILE: arch/ia64/sn/kernel/io_common.c:499:
+{
+

WARNING:TYPO_SPELLING: 'Individial' may be misspelled - perhaps 'Individual'?
#1981: FILE: arch/ia64/sn/kernel/io_common.c:522:
+	 * prime sn_pci_provider[].  Individial provider init routines will
 	                             ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2005: FILE: arch/ia64/sn/kernel/io_common.c:546:
+	printk(KERN_INFO "ACPI  DSDT OEM Rev 0x%x\n",

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bussoft->bs_asic_type == PCIIO_ASIC_TYPE_TIOCP'
#2042: FILE: arch/ia64/sn/kernel/io_common.c:583:
+		if ((bussoft->bs_asic_type == PCIIO_ASIC_TYPE_TIOCP) ||
+		    (bussoft->bs_asic_type == PCIIO_ASIC_TYPE_TIOCE)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bussoft->bs_asic_type == PCIIO_ASIC_TYPE_TIOCE'
#2042: FILE: arch/ia64/sn/kernel/io_common.c:583:
+		if ((bussoft->bs_asic_type == PCIIO_ASIC_TYPE_TIOCP) ||
+		    (bussoft->bs_asic_type == PCIIO_ASIC_TYPE_TIOCE)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2049: FILE: arch/ia64/sn/kernel/io_common.c:590:
+				printk(KERN_WARNING "pcibr_bus_fixup: failed "

WARNING:SPLIT_STRING: quoted string split across lines
#2050: FILE: arch/ia64/sn/kernel/io_common.c:591:
+				printk(KERN_WARNING "pcibr_bus_fixup: failed "
+				       "to find near node with CPUs to TIO "

WARNING:SPLIT_STRING: quoted string split across lines
#2051: FILE: arch/ia64/sn/kernel/io_common.c:592:
+				       "to find near node with CPUs to TIO "
+				       "node %d, err=%d\n", cnode, e);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2066: FILE: arch/ia64/sn/kernel/io_common.c:607:
+EXPORT_SYMBOL(sn_pci_fixup_slot);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2067: FILE: arch/ia64/sn/kernel/io_common.c:608:
+EXPORT_SYMBOL(sn_pci_unfixup_slot);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2068: FILE: arch/ia64/sn/kernel/io_common.c:609:
+EXPORT_SYMBOL(sn_bus_store_sysdata);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2069: FILE: arch/ia64/sn/kernel/io_common.c:610:
+EXPORT_SYMBOL(sn_bus_free_sysdata);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2070: FILE: arch/ia64/sn/kernel/io_common.c:611:
+EXPORT_SYMBOL(sn_generate_path);

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.31498.commit.9e3f9be9f56ba42252e95d7a8891eac1b3cdc283 total: 29 errors, 113 warnings, 39 checks, 1825 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.31498.commit.9e3f9be9f56ba42252e95d7a8891eac1b3cdc283 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
