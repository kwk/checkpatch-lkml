WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#30: 
Signed-Off-By: David Howells <dhowells@redhat.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#73: FILE: fs/binfmt_elf_fdpic.c:53:
+#if 0

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#74: FILE: fs/binfmt_elf_fdpic.c:54:
+#define kdcore(fmt, ...) printk("FDPIC "fmt"\n" ,##__VA_ARGS__ )

ERROR:SPACING: space prohibited before that ',' (ctx:WxV)
#74: FILE: fs/binfmt_elf_fdpic.c:54:
+#define kdcore(fmt, ...) printk("FDPIC "fmt"\n" ,##__VA_ARGS__ )
                                                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:WxV)
#74: FILE: fs/binfmt_elf_fdpic.c:54:
+#define kdcore(fmt, ...) printk("FDPIC "fmt"\n" ,##__VA_ARGS__ )
                                                 ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#74: FILE: fs/binfmt_elf_fdpic.c:54:
+#define kdcore(fmt, ...) printk("FDPIC "fmt"\n" ,##__VA_ARGS__ )

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#74: FILE: fs/binfmt_elf_fdpic.c:54:
+#define kdcore(fmt, ...) printk("FDPIC "fmt"\n" ,##__VA_ARGS__ )

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

ERROR:SPACING: space required before the open parenthesis '('
#76: FILE: fs/binfmt_elf_fdpic.c:56:
+#define kdcore(fmt, ...) do {} while(0)

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#193: FILE: fs/binfmt_elf_fdpic.c:1215:
+struct memelfnote
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#213: FILE: fs/binfmt_elf_fdpic.c:1235:
+#define DUMP_WRITE(addr, nr)	\
+	do { if (!dump_write(file, (addr), (nr))) return 0; } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#214: FILE: fs/binfmt_elf_fdpic.c:1236:
+	do { if (!dump_write(file, (addr), (nr))) return 0; } while(0)

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#215: FILE: fs/binfmt_elf_fdpic.c:1237:
+#define DUMP_SEEK(off)	\
+	do { if (!dump_seek(file, (off))) return 0; } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#216: FILE: fs/binfmt_elf_fdpic.c:1238:
+	do { if (!dump_seek(file, (off))) return 0; } while(0)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#235: FILE: fs/binfmt_elf_fdpic.c:1257:
+}
+#undef DUMP_WRITE

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#238: FILE: fs/binfmt_elf_fdpic.c:1260:
+#define DUMP_WRITE(addr, nr)	\
+	if ((size += (nr)) > limit || !dump_write(file, (addr), (nr))) \
+		goto end_coredump;

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'nr' - possible side-effects?
#238: FILE: fs/binfmt_elf_fdpic.c:1260:
+#define DUMP_WRITE(addr, nr)	\
+	if ((size += (nr)) > limit || !dump_write(file, (addr), (nr))) \
+		goto end_coredump;

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#238: FILE: fs/binfmt_elf_fdpic.c:1260:
+#define DUMP_WRITE(addr, nr)	\
+	if ((size += (nr)) > limit || !dump_write(file, (addr), (nr))) \
+		goto end_coredump;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#238: FILE: fs/binfmt_elf_fdpic.c:1260:
+#define DUMP_WRITE(addr, nr)	\
+	if ((size += (nr)) > limit || !dump_write(file, (addr), (nr))) \
+		goto end_coredump;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#239: FILE: fs/binfmt_elf_fdpic.c:1261:
+	if ((size += (nr)) > limit || !dump_write(file, (addr), (nr))) \

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#241: FILE: fs/binfmt_elf_fdpic.c:1263:
+#define DUMP_SEEK(off)	\
+	if (!dump_seek(file, (off))) \
+		goto end_coredump;

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#241: FILE: fs/binfmt_elf_fdpic.c:1263:
+#define DUMP_SEEK(off)	\
+	if (!dump_seek(file, (off))) \
+		goto end_coredump;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#241: FILE: fs/binfmt_elf_fdpic.c:1263:
+#define DUMP_SEEK(off)	\
+	if (!dump_seek(file, (off))) \
+		goto end_coredump;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#252: FILE: fs/binfmt_elf_fdpic.c:1274:
+	memset(elf->e_ident+EI_PAD, 0, EI_NIDENT-EI_PAD);
 	                   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#252: FILE: fs/binfmt_elf_fdpic.c:1274:
+	memset(elf->e_ident+EI_PAD, 0, EI_NIDENT-EI_PAD);
 	                                        ^

WARNING:RETURN_VOID: void function return statements are not generally useful
#268: FILE: fs/binfmt_elf_fdpic.c:1290:
+	return;
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#281: FILE: fs/binfmt_elf_fdpic.c:1303:
+	return;
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#284: FILE: fs/binfmt_elf_fdpic.c:1306:
+static inline void fill_note(struct memelfnote *note, const char *name, int type,
+		unsigned int sz, void *data)

WARNING:RETURN_VOID: void function return statements are not generally useful
#291: FILE: fs/binfmt_elf_fdpic.c:1313:
+	return;
+}

WARNING:TYPO_SPELLING: 'seperately' may be misspelled - perhaps 'separately'?
#295: FILE: fs/binfmt_elf_fdpic.c:1317:
+ * registers which need to be filled up seperately.
                                         ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#300: FILE: fs/binfmt_elf_fdpic.c:1322:
+	prstatus->pr_info.si_signo = prstatus->pr_cursig = signr;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:CODE_INDENT: code indent should use tabs where possible
#345: FILE: fs/binfmt_elf_fdpic.c:1367:
+^I^I           (const char __user *) mm->arg_start, len))$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#345: FILE: fs/binfmt_elf_fdpic.c:1367:
+	if (copy_from_user(&psinfo->pr_psargs,
+		           (const char __user *) mm->arg_start, len))

CHECK:SPACING: No space is necessary after a cast
#345: FILE: fs/binfmt_elf_fdpic.c:1367:
+		           (const char __user *) mm->arg_start, len))

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#372: FILE: fs/binfmt_elf_fdpic.c:1394:
+struct elf_thread_status
+{

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#449: FILE: fs/binfmt_elf_fdpic.c:1471:
+			}
+			else if (page == ZERO_PAGE(addr)) {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#453: FILE: fs/binfmt_elf_fdpic.c:1475:
+			}
+			else {

CHECK:BRACES: Unbalanced braces around else statement
#453: FILE: fs/binfmt_elf_fdpic.c:1475:
+			else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#458: FILE: fs/binfmt_elf_fdpic.c:1480:
+				if ((*size += PAGE_SIZE) > *limit ||

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#487: FILE: fs/binfmt_elf_fdpic.c:1509:
+	for (vml = current->mm->context.vmlist; vml; vml = vml->next) {
+	struct vm_area_struct *vma = vml->vma;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#493: FILE: fs/binfmt_elf_fdpic.c:1515:
+		if ((*size += PAGE_SIZE) > *limit)

CHECK:SPACING: No space is necessary after a cast
#496: FILE: fs/binfmt_elf_fdpic.c:1518:
+		if (!dump_write(file, (void *) vma->vm_start,

ERROR:CODE_INDENT: code indent should use tabs where possible
#529: FILE: fs/binfmt_elf_fdpic.c:1551:
+ ^Istruct task_struct *g, *p;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#529: FILE: fs/binfmt_elf_fdpic.c:1551:
+ ^Istruct task_struct *g, *p;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#529: FILE: fs/binfmt_elf_fdpic.c:1551:
+ ^Istruct task_struct *g, *p;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#530: FILE: fs/binfmt_elf_fdpic.c:1552:
+ ^ILIST_HEAD(thread_list);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#530: FILE: fs/binfmt_elf_fdpic.c:1552:
+ ^ILIST_HEAD(thread_list);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#530: FILE: fs/binfmt_elf_fdpic.c:1552:
+ ^ILIST_HEAD(thread_list);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#531: FILE: fs/binfmt_elf_fdpic.c:1553:
+ ^Istruct list_head *t;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#531: FILE: fs/binfmt_elf_fdpic.c:1553:
+ ^Istruct list_head *t;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#531: FILE: fs/binfmt_elf_fdpic.c:1553:
+ ^Istruct list_head *t;$

WARNING:TYPO_SPELLING: 'proceses' may be misspelled - perhaps 'processes'?
#545: FILE: fs/binfmt_elf_fdpic.c:1567:
+	 * This is because those proceses that could possibly change map_count
 	                         ^^^^^^^^

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#564: FILE: fs/binfmt_elf_fdpic.c:1586:
+	notes = kmalloc(NUM_NOTES * sizeof(struct memelfnote), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:LINE_SPACING: Missing a blank line after declarations
#578: FILE: fs/binfmt_elf_fdpic.c:1600:
+		struct elf_thread_status *tmp;
+		read_lock(&tasklist_lock);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#579: FILE: fs/binfmt_elf_fdpic.c:1601:
+		do_each_thread(g,p)
 		                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#590: FILE: fs/binfmt_elf_fdpic.c:1612:
+		while_each_thread(g,p);
 		                   ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#610: FILE: fs/binfmt_elf_fdpic.c:1632:
+	for (vml = current->mm->context.vmlist; vml; vml = vml->next)
+	    segs++;

CHECK:SPACING: No space is necessary after a cast
#634: FILE: fs/binfmt_elf_fdpic.c:1656:
+	auxv = (elf_addr_t *) current->mm->saved_auxv;

ERROR:CODE_INDENT: code indent should use tabs where possible
#643: FILE: fs/binfmt_elf_fdpic.c:1665:
+  ^I/* Try to dump the FPU. */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#643: FILE: fs/binfmt_elf_fdpic.c:1665:
+  ^I/* Try to dump the FPU. */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#643: FILE: fs/binfmt_elf_fdpic.c:1665:
+  ^I/* Try to dump the FPU. */$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#644: FILE: fs/binfmt_elf_fdpic.c:1666:
+	if ((prstatus->pr_fpvalid =

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#659: FILE: fs/binfmt_elf_fdpic.c:1681:
+	offset += (segs+1) * sizeof(struct elf_phdr);	/* Program headers */
 	               ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#677: FILE: fs/binfmt_elf_fdpic.c:1699:
+	dataoff = offset = roundup(offset, ELF_EXEC_PAGESIZE);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#678: FILE: fs/binfmt_elf_fdpic.c:1700:
+^I     $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#680: FILE: fs/binfmt_elf_fdpic.c:1702:
+	for (

ERROR:CODE_INDENT: code indent should use tabs where possible
#717: FILE: fs/binfmt_elf_fdpic.c:1739:
+ ^I/* write out the notes section */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#717: FILE: fs/binfmt_elf_fdpic.c:1739:
+ ^I/* write out the notes section */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#717: FILE: fs/binfmt_elf_fdpic.c:1739:
+ ^I/* write out the notes section */$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#743: FILE: fs/binfmt_elf_fdpic.c:1765:
+		printk(KERN_WARNING

WARNING:LINE_SPACING: Missing a blank line after declarations
#754: FILE: fs/binfmt_elf_fdpic.c:1776:
+		struct list_head *tmp = thread_list.next;
+		list_del(tmp);

WARNING:NEW_TYPEDEFS: do not add new typedefs
#780: FILE: include/asm-frv/elf.h:67:
+typedef struct user_fpmedia_regs elf_fpregset_t;

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.59920.commit.019b870cd490e444195b3edd3ba728b7292effdc total: 25 errors, 31 warnings, 15 checks, 758 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.59920.commit.019b870cd490e444195b3edd3ba728b7292effdc has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
