WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#50: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#55: FILE: drivers/infiniband/core/iwcm.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#123: FILE: drivers/infiniband/core/iwcm.c:69:
+ *^ILISTENING IDS: ^IGet enough elements preallocated to handle the$

WARNING:TYPO_SPELLING: 'connectino' may be misspelled - perhaps 'connection'?
#137: FILE: drivers/infiniband/core/iwcm.c:83:
+ *    to the provider to reject the connectino request.
                                     ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#173: FILE: drivers/infiniband/core/iwcm.c:119:
+	BUG_ON(!list_empty(&cm_id_priv->work_free_list));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*work)...) over kmalloc(sizeof(struct iwcm_work)...)
#175: FILE: drivers/infiniband/core/iwcm.c:121:
+		work = kmalloc(sizeof(struct iwcm_work), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#193: FILE: drivers/infiniband/core/iwcm.c:139:
+static int copy_private_data(struct iwcm_id_private *cm_id_priv,
+		       struct iw_cm_event *event)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#213: FILE: drivers/infiniband/core/iwcm.c:159:
+	BUG_ON(atomic_read(&cm_id_priv->refcount)==0);

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#213: FILE: drivers/infiniband/core/iwcm.c:159:
+	BUG_ON(atomic_read(&cm_id_priv->refcount)==0);
 	                                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#215: FILE: drivers/infiniband/core/iwcm.c:161:
+		BUG_ON(!list_empty(&cm_id_priv->work_list));

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#216: FILE: drivers/infiniband/core/iwcm.c:162:
+		if (waitqueue_active(&cm_id_priv->destroy_comp.wait)) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#217: FILE: drivers/infiniband/core/iwcm.c:163:
+			BUG_ON(cm_id_priv->state != IW_CM_STATE_DESTROYING);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#218: FILE: drivers/infiniband/core/iwcm.c:164:
+			BUG_ON(test_bit(IWCM_F_CALLBACK_DESTROY,

WARNING:LINE_SPACING: Missing a blank line after declarations
#231: FILE: drivers/infiniband/core/iwcm.c:177:
+	struct iwcm_id_private *cm_id_priv;
+	cm_id_priv = container_of(cm_id, struct iwcm_id_private, id);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#238: FILE: drivers/infiniband/core/iwcm.c:184:
+	struct iwcm_id_private *cm_id_priv;
+	cm_id_priv = container_of(cm_id, struct iwcm_id_private, id);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#272: FILE: drivers/infiniband/core/iwcm.c:218:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#292: FILE: drivers/infiniband/core/iwcm.c:238:
+	BUG_ON(qp == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!qp"
#292: FILE: drivers/infiniband/core/iwcm.c:238:
+	BUG_ON(qp == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:TYPO_SPELLING: 'currenlty' may be misspelled - perhaps 'currently'?
#300: FILE: drivers/infiniband/core/iwcm.c:246:
+ * Block if a passive or active connection is currenlty being processed. Then
                                               ^^^^^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#349: FILE: drivers/infiniband/core/iwcm.c:295:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#420: FILE: drivers/infiniband/core/iwcm.c:366:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#443: FILE: drivers/infiniband/core/iwcm.c:389:
+	BUG_ON(test_bit(IWCM_F_CALLBACK_DESTROY, &cm_id_priv->flags));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#566: FILE: drivers/infiniband/core/iwcm.c:512:
+		BUG_ON(cm_id_priv->state != IW_CM_STATE_CONN_RECV);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#631: FILE: drivers/infiniband/core/iwcm.c:577:
+		BUG_ON(cm_id_priv->state != IW_CM_STATE_CONN_SENT);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#668: FILE: drivers/infiniband/core/iwcm.c:614:
+	BUG_ON(iw_event->status);

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#707: FILE: drivers/infiniband/core/iwcm.c:653:
+		if (atomic_read(&cm_id_priv->refcount)==0)
 		                                      ^

WARNING:TYPO_SPELLING: 'negotion' may be misspelled - perhaps 'negotiation'?
#719: FILE: drivers/infiniband/core/iwcm.c:665:
+ * the MPA negotion has completed successfully and we are now in MPA
            ^^^^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#741: FILE: drivers/infiniband/core/iwcm.c:687:
+	BUG_ON(cm_id_priv->state != IW_CM_STATE_CONN_RECV);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#769: FILE: drivers/infiniband/core/iwcm.c:715:
+	BUG_ON(cm_id_priv->state != IW_CM_STATE_CONN_SENT);

WARNING:REPEATED_WORD: Possible repeated word: 'have'
#811: FILE: drivers/infiniband/core/iwcm.c:757:
+ * If in the ESTBLISHED or CLOSING states, the QP will have have been

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#820: FILE: drivers/infiniband/core/iwcm.c:766:
+static int cm_close_handler(struct iwcm_id_private *cm_id_priv,
+				  struct iw_cm_event *iw_event)

WARNING:LINE_SPACING: Missing a blank line after declarations
#824: FILE: drivers/infiniband/core/iwcm.c:770:
+	int ret = 0;
+	spin_lock_irqsave(&cm_id_priv->lock, flags);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#841: FILE: drivers/infiniband/core/iwcm.c:787:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#870: FILE: drivers/infiniband/core/iwcm.c:816:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#909: FILE: drivers/infiniband/core/iwcm.c:855:
+		BUG_ON(atomic_read(&cm_id_priv->refcount)==0);

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#909: FILE: drivers/infiniband/core/iwcm.c:855:
+		BUG_ON(atomic_read(&cm_id_priv->refcount)==0);
 		                                         ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#913: FILE: drivers/infiniband/core/iwcm.c:859:
+		if (atomic_read(&cm_id_priv->refcount)==0 &&
 		                                      ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#936: FILE: drivers/infiniband/core/iwcm.c:882:
+ * ^I      0^I- the event was handled.$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#940: FILE: drivers/infiniband/core/iwcm.c:886:
+static int cm_event_handler(struct iw_cm_id *cm_id,
+			     struct iw_cm_event *iw_event)

CHECK:BRACES: braces {} should be used on all arms of this statement
#971: FILE: drivers/infiniband/core/iwcm.c:917:
+	if (list_empty(&cm_id_priv->work_list)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#974: FILE: drivers/infiniband/core/iwcm.c:920:
+	} else

CHECK:SPACING: space preferred before that '|' (ctx:VxE)
#996: FILE: drivers/infiniband/core/iwcm.c:942:
+					   IB_ACCESS_REMOTE_WRITE|
 					                         ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1009: FILE: drivers/infiniband/core/iwcm.c:955:
+static int iwcm_init_qp_rts_attr(struct iwcm_id_private *cm_id_priv,
+				  struct ib_qp_attr *qp_attr,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1080: FILE: drivers/infiniband/core/iwcm.h:1:
+/*

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1133: FILE: drivers/infiniband/core/iwcm.h:54:
+	spinlock_t lock;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1148: FILE: include/rdma/iw_cm.h:1:
+/*

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#1202: FILE: include/rdma/iw_cm.h:55:
+	IW_CM_EVENT_STATUS_EINVAL,	 /* asynchronous failure for bad parm */
 	                          	                                 ^^^^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1212: FILE: include/rdma/iw_cm.h:65:
+	void* provider_data;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1244: FILE: include/rdma/iw_cm.h:97:
+	iw_event_handler        event_handler;   /* cb for provider
+						    events */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1244: FILE: include/rdma/iw_cm.h:97:
+						    events */

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct iw_cm_id *' should also have an identifier name
#1246: FILE: include/rdma/iw_cm.h:99:
+	void (*add_ref)(struct iw_cm_id *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct iw_cm_id *' should also have an identifier name
#1247: FILE: include/rdma/iw_cm.h:100:
+	void (*rem_ref)(struct iw_cm_id *);

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.39886.commit.601d698674723972e682df9f30bda79b2cd2e3bf total: 5 errors, 36 warnings, 11 checks, 1339 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.39886.commit.601d698674723972e682df9f30bda79b2cd2e3bf has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
