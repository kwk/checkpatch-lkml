CHECK:MACRO_ARG_REUSE: Macro argument reuse 'member' - possible side-effects?
#61: FILE: include/linux/kernel.h:295:
+#define __container_of(ptr, type, member) ({			\
         const typeof( ((type *)0)->member ) *__mptr = (ptr);	\
         (type *)( (char *)__mptr - offsetof(type,member) );})

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'member' may be better as '(member)' to avoid precedence issues
#61: FILE: include/linux/kernel.h:295:
+#define __container_of(ptr, type, member) ({			\
         const typeof( ((type *)0)->member ) *__mptr = (ptr);	\
         (type *)( (char *)__mptr - offsetof(type,member) );})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'member' - possible side-effects?
#64: FILE: include/linux/kernel.h:298:
+#define container_of(ptr, type, member) ({			\
+	DECLARE_MEMLEAK_OFFSET(container_of, type, member);	\
+	__container_of(ptr, type, member);			\
+})

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#72: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#77: FILE: include/linux/memleak.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#78: FILE: include/linux/memleak.h:2:
+ * include/linux/memleak.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#93: FILE: include/linux/memleak.h:17:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#94: FILE: include/linux/memleak.h:18:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA$

CHECK:SPACING: No space is necessary after a cast
#110: FILE: include/linux/memleak.h:34:
+#define ml_typeid(type)		ml_guess_typeid(sizeof(type))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'member' - possible side-effects?
#119: FILE: include/linux/memleak.h:43:
+#define memleak_offsetof(type, member)				\
+	(__builtin_constant_p(offsetof(type, member)) ?		\
+	 offsetof(type, member) : 0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'member' - possible side-effects?
#123: FILE: include/linux/memleak.h:47:
+#define DECLARE_MEMLEAK_OFFSET(name, type, member)		\
+	static const struct memleak_offset			\
+	__attribute__ ((__section__ (".init.memleak_offsets")))	\
+	__attribute_used__ __memleak_offset__##name = {		\
+		ml_typeid(type),				\
+		ml_typeid(typeof(((type *)0)->member)),		\
+		memleak_offsetof(type, member)			\
+	}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'member' may be better as '(member)' to avoid precedence issues
#123: FILE: include/linux/memleak.h:47:
+#define DECLARE_MEMLEAK_OFFSET(name, type, member)		\
+	static const struct memleak_offset			\
+	__attribute__ ((__section__ (".init.memleak_offsets")))	\
+	__attribute_used__ __memleak_offset__##name = {		\
+		ml_typeid(type),				\
+		ml_typeid(typeof(((type *)0)->member)),		\
+		memleak_offsetof(type, member)			\
+	}

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#125: FILE: include/linux/memleak.h:49:
+	__attribute__ ((__section__ (".init.memleak_offsets")))	\

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".init.memleak_offsets") over __attribute__((__section__(".init.memleak_offsets")))
#125: FILE: include/linux/memleak.h:49:
+	__attribute__ ((__section__ (".init.memleak_offsets")))	\

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#132: FILE: include/linux/memleak.h:56:
+extern void memleak_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#133: FILE: include/linux/memleak.h:57:
+extern void memleak_alloc(const void *ptr, size_t size, int ref_count);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#134: FILE: include/linux/memleak.h:58:
+extern void memleak_free(const void *ptr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#135: FILE: include/linux/memleak.h:59:
+extern void memleak_padding(const void *ptr, unsigned long offset, size_t size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#136: FILE: include/linux/memleak.h:60:
+extern void memleak_not_leak(const void *ptr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#137: FILE: include/linux/memleak.h:61:
+extern void memleak_ignore(const void *ptr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#138: FILE: include/linux/memleak.h:62:
+extern void memleak_scan_area(const void *ptr, unsigned long offset, size_t length);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#139: FILE: include/linux/memleak.h:63:
+extern void memleak_insert_aliases(struct memleak_offset *ml_off_start,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#151: FILE: include/linux/memleak.h:75:
+extern void memleak_typeid_raw(const void *ptr, unsigned long type_id);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#316: FILE: mm/memleak.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#317: FILE: mm/memleak.c:2:
+ * mm/memleak.c

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#332: FILE: mm/memleak.c:17:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#333: FILE: mm/memleak.c:18:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA$

WARNING:INCLUDE_LINUX: Use #include <linux/bitops.h> instead of <asm/bitops.h>
#356: FILE: mm/memleak.c:41:
+#include <asm/bitops.h>

WARNING:INCLUDE_LINUX: Use #include <linux/percpu.h> instead of <asm/percpu.h>
#358: FILE: mm/memleak.c:43:
+#include <asm/percpu.h>

WARNING:INCLUDE_LINUX: Use #include <linux/processor.h> instead of <asm/processor.h>
#359: FILE: mm/memleak.c:44:
+#include <asm/processor.h>

WARNING:INCLUDE_LINUX: Use #include <linux/thread_info.h> instead of <asm/thread_info.h>
#360: FILE: mm/memleak.c:45:
+#include <asm/thread_info.h>

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#361: FILE: mm/memleak.c:46:
+#include <asm/atomic.h>

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#375: FILE: mm/memleak.c:60:
+extern struct memleak_offset __memleak_offsets_start[];

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#376: FILE: mm/memleak.c:61:
+extern struct memleak_offset __memleak_offsets_end[];

WARNING:MISPLACED_INIT: __initdata should be placed after preinit_pos
#459: FILE: mm/memleak.c:144:
+static int __initdata preinit_pos;

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

WARNING:MISPLACED_INIT: __initdata should be placed after preinit_pointers[PREINIT_POINTERS]
#460: FILE: mm/memleak.c:145:
+static struct memleak_preinit_pointer __initdata preinit_pointers[PREINIT_POINTERS];

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#480: FILE: mm/memleak.c:165:
+	printk(KERN_NOTICE "    %lx: <%s>\n", addr, namebuf);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#485: FILE: mm/memleak.c:170:
+	printk(KERN_NOTICE "    %lx\n", addr);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#495: FILE: mm/memleak.c:180:
+	printk(KERN_NOTICE "  size = %d\n", pointer->size);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#496: FILE: mm/memleak.c:181:
+	printk(KERN_NOTICE "  ref_count = %d\n", pointer->ref_count);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#497: FILE: mm/memleak.c:182:
+	printk(KERN_NOTICE "  count = %d\n", pointer->count);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#498: FILE: mm/memleak.c:183:
+	printk(KERN_NOTICE "  aliases:\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#501: FILE: mm/memleak.c:186:
+			printk(KERN_NOTICE "    0x%lx\n", alias->offset);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#512: FILE: mm/memleak.c:197:
+	printk(KERN_NOTICE "kmemleak: pointer 0x%08lx:\n", pointer->pointer);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#514: FILE: mm/memleak.c:199:
+	printk(KERN_NOTICE "  trace:\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#553: FILE: mm/memleak.c:238:
+		if (!alias_list)
+			panic("kmemleak: cannot allocate initial memory\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#563: FILE: mm/memleak.c:248:
+	if (!alias)
+		panic("kmemleak: cannot allocate initial memory\n");

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#582: FILE: mm/memleak.c:267:
+	pr_debug("%s(0x%p, 0x%p)\n", __FUNCTION__, ml_off_start, ml_off_end);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#589: FILE: mm/memleak.c:274:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#634: FILE: mm/memleak.c:319:
+	BUG_ON(pointer->flags & POINTER_ALIASES);

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#640: FILE: mm/memleak.c:325:
+			panic("kmemleak: cannot insert offset into the pointer radix tree: %d\n", err);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#652: FILE: mm/memleak.c:337:
+				panic("kmemleak: cannot insert alias into the pointer radix tree: %d\n", err);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#666: FILE: mm/memleak.c:351:
+	BUG_ON(!(pointer->flags & POINTER_ALIASES));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#716: FILE: mm/memleak.c:401:
+		BUG();

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#777: FILE: mm/memleak.c:462:
+			printk(KERN_NOTICE "Existing pointer:\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#797: FILE: mm/memleak.c:482:
+		printk(KERN_WARNING "kmemleak: freeing unknown pointer value 0x%08lx\n", ptr);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#806: FILE: mm/memleak.c:491:
+	BUG_ON(!(pointer->flags & POINTER_ALLOCATED));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#815: FILE: mm/memleak.c:500:
+		printk(KERN_WARNING "kmemleak: freeing orphan pointer 0x%08lx\n", ptr);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#827: FILE: mm/memleak.c:512:
+ * information */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#921: FILE: mm/memleak.c:606:
+	if (!area)
+		panic("kmemleak: cannot allocate a scan area\n");

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#980: FILE: mm/memleak.c:665:
+	pr_debug("%s(0x%p, %d, %d)\n", __FUNCTION__, ptr, size, ref_count);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#984: FILE: mm/memleak.c:669:
+		 * executed before the other CPUs are started */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#987: FILE: mm/memleak.c:672:
+		BUG_ON(cpu_id != 0);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1029: FILE: mm/memleak.c:714:
+	pr_debug("%s(0x%p)\n", __FUNCTION__, ptr);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1034: FILE: mm/memleak.c:719:
+		BUG_ON(cpu_id != 0);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1059: FILE: mm/memleak.c:744:
+ * block (this is needed for allocations padding the object) */

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1075: FILE: mm/memleak.c:760:
+	pr_debug("%s(0x%p, %d)\n", __FUNCTION__, ptr, size);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1080: FILE: mm/memleak.c:765:
+		BUG_ON(cpu_id != 0);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1122: FILE: mm/memleak.c:807:
+	pr_debug("%s(0x%p)\n", __FUNCTION__, ptr);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1127: FILE: mm/memleak.c:812:
+		BUG_ON(cpu_id != 0);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1167: FILE: mm/memleak.c:852:
+	pr_debug("%s(0x%p)\n", __FUNCTION__, ptr);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1172: FILE: mm/memleak.c:857:
+		BUG_ON(cpu_id != 0);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1212: FILE: mm/memleak.c:897:
+	pr_debug("%s(0x%p)\n", __FUNCTION__, ptr);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1217: FILE: mm/memleak.c:902:
+		BUG_ON(cpu_id != 0);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1259: FILE: mm/memleak.c:944:
+	pr_debug("%s(0x%p, %ld)\n", __FUNCTION__, ptr, type_id);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1264: FILE: mm/memleak.c:949:
+		BUG_ON(cpu_id != 0);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1375: FILE: mm/memleak.c:1060:
+	 * memory */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1379: FILE: mm/memleak.c:1064:
+		BUG();

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1384: FILE: mm/memleak.c:1069:
+		if ((pointer->flags & POINTER_ALLOCATED)
+		    && !(pointer->flags & POINTER_ALIASES))

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1403: FILE: mm/memleak.c:1088:
+	for (i = 0; i < NR_CPUS; i++)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1427: FILE: mm/memleak.c:1112:
+	 * be added to the list during scanning */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1434: FILE: mm/memleak.c:1119:
+	 * put_pointer() can free the structure */

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1517: FILE: mm/memleak.c:1202:
+	if (!(pointer->flags & POINTER_ALLOCATED)
+	    || !(pointer->flags & POINTER_ALIASES))

WARNING:LINE_SPACING: Missing a blank line after declarations
#1526: FILE: mm/memleak.c:1211:
+		unsigned long trace = pointer->trace[i];
+		if (!trace)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#1540: FILE: mm/memleak.c:1225:
+static struct seq_operations memleak_seq_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1552: FILE: mm/memleak.c:1237:
+static struct file_operations memleak_fops = {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1575: FILE: mm/memleak.c:1260:
+	 * yet. Holding it here would lead to a deadlock */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1611: FILE: mm/memleak.c:1296:
+			BUG();

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1617: FILE: mm/memleak.c:1302:
+	printk(KERN_INFO "Kernel memory leak detector initialized\n");

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#1626: FILE: mm/memleak.c:1311:
+	dentry = debugfs_create_file("memleak", S_IRUGO, NULL, NULL,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.48406.commit.c85e7b4c0e2ff4766a6f172263b99a70692b447d total: 4 errors, 68 warnings, 18 checks, 1558 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

/tmp/tmp.gGZ8aIRHtl//home/kkleine/dev/lkml/0/patch.offset.48406.commit.c85e7b4c0e2ff4766a6f172263b99a70692b447d has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
